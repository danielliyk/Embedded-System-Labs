
ble_lab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012064  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000100c  080121f8  080121f8  000131f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013204  08013204  00015730  2**0
                  CONTENTS
  4 .ARM          00000008  08013204  08013204  00014204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801320c  0801320c  00015730  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801320c  0801320c  0001420c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08013210  08013210  00014210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000730  20000000  08013214  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000043e8  20000730  08013944  00015730  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004b18  08013944  00015b18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00015730  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ba01  00000000  00000000  00015760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006631  00000000  00000000  00041161  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002548  00000000  00000000  00047798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001c69  00000000  00000000  00049ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00031c26  00000000  00000000  0004b949  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00030308  00000000  00000000  0007d56f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00115a5f  00000000  00000000  000ad877  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b8  00000000  00000000  001c32d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b400  00000000  00000000  001c3390  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001ce790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00000d0a  00000000  00000000  001ce7f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000020  00000000  00000000  001cf4fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000730 	.word	0x20000730
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080121dc 	.word	0x080121dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000734 	.word	0x20000734
 80001cc:	080121dc 	.word	0x080121dc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <MX_BlueNRG_MS_Init>:
  PRINT_CSV("%02ld:%02ld:%02ld.%03ld", (long)(ms/(60*60*1000)%24), (long)(ms/(60*1000)%60), (long)((ms/1000)%60), (long)(ms%1000));
}
#endif

void MX_BlueNRG_MS_Init(void)
{
 8000fe4:	b5b0      	push	{r4, r5, r7, lr}
 8000fe6:	b08a      	sub	sp, #40	@ 0x28
 8000fe8:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN BlueNRG_MS_Init_PreTreatment */

  /* USER CODE END BlueNRG_MS_Init_PreTreatment */

  /* Initialize the peripherals and the BLE Stack */
  const char *name = "BlueNRG";
 8000fea:	4b69      	ldr	r3, [pc, #420]	@ (8001190 <MX_BlueNRG_MS_Init+0x1ac>)
 8000fec:	613b      	str	r3, [r7, #16]
  uint8_t  bdaddr_len_out;
  uint8_t  hwVersion;
  uint16_t fwVersion;
  int ret;

  User_Init();
 8000fee:	f000 f8f9 	bl	80011e4 <User_Init>

  /* Get the User Button initial state */
  user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 8000ff2:	2000      	movs	r0, #0
 8000ff4:	f003 fb86 	bl	8004704 <BSP_PB_GetState>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	b2da      	uxtb	r2, r3
 8000ffc:	4b65      	ldr	r3, [pc, #404]	@ (8001194 <MX_BlueNRG_MS_Init+0x1b0>)
 8000ffe:	701a      	strb	r2, [r3, #0]

  hci_init(user_notify, NULL);
 8001000:	2100      	movs	r1, #0
 8001002:	4865      	ldr	r0, [pc, #404]	@ (8001198 <MX_BlueNRG_MS_Init+0x1b4>)
 8001004:	f009 fd80 	bl	800ab08 <hci_init>

  /* get the BlueNRG HW and FW versions */
  getBlueNRGVersion(&hwVersion, &fwVersion);
 8001008:	1dba      	adds	r2, r7, #6
 800100a:	f107 0308 	add.w	r3, r7, #8
 800100e:	4611      	mov	r1, r2
 8001010:	4618      	mov	r0, r3
 8001012:	f009 fbee 	bl	800a7f2 <getBlueNRGVersion>
   * Reset BlueNRG again otherwise we won't
   * be able to change its MAC address.
   * aci_hal_write_config_data() must be the first
   * command after reset otherwise it will fail.
   */
  hci_reset();
 8001016:	f009 fc30 	bl	800a87a <hci_reset>
  HAL_Delay(100);
 800101a:	2064      	movs	r0, #100	@ 0x64
 800101c:	f004 f8de 	bl	80051dc <HAL_Delay>

  PRINTF("HWver %d\nFWver %d\n", hwVersion, fwVersion);
 8001020:	7a3b      	ldrb	r3, [r7, #8]
 8001022:	4619      	mov	r1, r3
 8001024:	88fb      	ldrh	r3, [r7, #6]
 8001026:	461a      	mov	r2, r3
 8001028:	485c      	ldr	r0, [pc, #368]	@ (800119c <MX_BlueNRG_MS_Init+0x1b8>)
 800102a:	f00c ff77 	bl	800df1c <iprintf>
  if (hwVersion > 0x30) { /* X-NUCLEO-IDB05A1 expansion board is used */
 800102e:	7a3b      	ldrb	r3, [r7, #8]
 8001030:	2b30      	cmp	r3, #48	@ 0x30
 8001032:	d902      	bls.n	800103a <MX_BlueNRG_MS_Init+0x56>
    bnrg_expansion_board = IDB05A1;
 8001034:	4b5a      	ldr	r3, [pc, #360]	@ (80011a0 <MX_BlueNRG_MS_Init+0x1bc>)
 8001036:	2201      	movs	r2, #1
 8001038:	701a      	strb	r2, [r3, #0]
  }

  ret = aci_hal_read_config_data(CONFIG_DATA_RANDOM_ADDRESS, BDADDR_SIZE, &bdaddr_len_out, bdaddr);
 800103a:	f107 0209 	add.w	r2, r7, #9
 800103e:	4b59      	ldr	r3, [pc, #356]	@ (80011a4 <MX_BlueNRG_MS_Init+0x1c0>)
 8001040:	2106      	movs	r1, #6
 8001042:	2080      	movs	r0, #128	@ 0x80
 8001044:	f009 fb4f 	bl	800a6e6 <aci_hal_read_config_data>
 8001048:	4603      	mov	r3, r0
 800104a:	617b      	str	r3, [r7, #20]

  if (ret) {
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d002      	beq.n	8001058 <MX_BlueNRG_MS_Init+0x74>
    PRINTF("Read Static Random address failed.\n");
 8001052:	4855      	ldr	r0, [pc, #340]	@ (80011a8 <MX_BlueNRG_MS_Init+0x1c4>)
 8001054:	f00c ffca 	bl	800dfec <puts>
  }

  if ((bdaddr[5] & 0xC0) != 0xC0) {
 8001058:	4b52      	ldr	r3, [pc, #328]	@ (80011a4 <MX_BlueNRG_MS_Init+0x1c0>)
 800105a:	795b      	ldrb	r3, [r3, #5]
 800105c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001060:	2bc0      	cmp	r3, #192	@ 0xc0
 8001062:	d004      	beq.n	800106e <MX_BlueNRG_MS_Init+0x8a>
    PRINTF("Static Random address not well formed.\n");
 8001064:	4851      	ldr	r0, [pc, #324]	@ (80011ac <MX_BlueNRG_MS_Init+0x1c8>)
 8001066:	f00c ffc1 	bl	800dfec <puts>
    while(1);
 800106a:	bf00      	nop
 800106c:	e7fd      	b.n	800106a <MX_BlueNRG_MS_Init+0x86>
  }

  /* GATT Init */
  ret = aci_gatt_init();
 800106e:	f009 f866 	bl	800a13e <aci_gatt_init>
 8001072:	4603      	mov	r3, r0
 8001074:	617b      	str	r3, [r7, #20]
  if(ret){
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d002      	beq.n	8001082 <MX_BlueNRG_MS_Init+0x9e>
    PRINTF("GATT_Init failed.\n");
 800107c:	484c      	ldr	r0, [pc, #304]	@ (80011b0 <MX_BlueNRG_MS_Init+0x1cc>)
 800107e:	f00c ffb5 	bl	800dfec <puts>
  }

  /* GAP Init */
  if (bnrg_expansion_board == IDB05A1) {
 8001082:	4b47      	ldr	r3, [pc, #284]	@ (80011a0 <MX_BlueNRG_MS_Init+0x1bc>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	2b01      	cmp	r3, #1
 8001088:	d110      	bne.n	80010ac <MX_BlueNRG_MS_Init+0xc8>
    ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 800108a:	f107 020e 	add.w	r2, r7, #14
 800108e:	f107 030a 	add.w	r3, r7, #10
 8001092:	9301      	str	r3, [sp, #4]
 8001094:	f107 030c 	add.w	r3, r7, #12
 8001098:	9300      	str	r3, [sp, #0]
 800109a:	4613      	mov	r3, r2
 800109c:	2207      	movs	r2, #7
 800109e:	2100      	movs	r1, #0
 80010a0:	2001      	movs	r0, #1
 80010a2:	f008 fe20 	bl	8009ce6 <aci_gap_init_IDB05A1>
 80010a6:	4603      	mov	r3, r0
 80010a8:	617b      	str	r3, [r7, #20]
 80010aa:	e00a      	b.n	80010c2 <MX_BlueNRG_MS_Init+0xde>
  }
  else {
    ret = aci_gap_init_IDB04A1(GAP_PERIPHERAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 80010ac:	f107 030a 	add.w	r3, r7, #10
 80010b0:	f107 020c 	add.w	r2, r7, #12
 80010b4:	f107 010e 	add.w	r1, r7, #14
 80010b8:	2001      	movs	r0, #1
 80010ba:	f008 fe64 	bl	8009d86 <aci_gap_init_IDB04A1>
 80010be:	4603      	mov	r3, r0
 80010c0:	617b      	str	r3, [r7, #20]
  }
  if (ret != BLE_STATUS_SUCCESS) {
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d002      	beq.n	80010ce <MX_BlueNRG_MS_Init+0xea>
    PRINTF("GAP_Init failed.\n");
 80010c8:	483a      	ldr	r0, [pc, #232]	@ (80011b4 <MX_BlueNRG_MS_Init+0x1d0>)
 80010ca:	f00c ff8f 	bl	800dfec <puts>
  }

  /* Update device name */
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 80010ce:	89fc      	ldrh	r4, [r7, #14]
 80010d0:	89bd      	ldrh	r5, [r7, #12]
                                   strlen(name), (uint8_t *)name);
 80010d2:	6938      	ldr	r0, [r7, #16]
 80010d4:	f7ff f8cc 	bl	8000270 <strlen>
 80010d8:	4603      	mov	r3, r0
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 80010da:	b2da      	uxtb	r2, r3
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	9300      	str	r3, [sp, #0]
 80010e0:	4613      	mov	r3, r2
 80010e2:	2200      	movs	r2, #0
 80010e4:	4629      	mov	r1, r5
 80010e6:	4620      	mov	r0, r4
 80010e8:	f009 f9a0 	bl	800a42c <aci_gatt_update_char_value>
 80010ec:	4603      	mov	r3, r0
 80010ee:	617b      	str	r3, [r7, #20]
  if (ret) {
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d004      	beq.n	8001100 <MX_BlueNRG_MS_Init+0x11c>
    PRINTF("aci_gatt_update_char_value failed.\n");
 80010f6:	4830      	ldr	r0, [pc, #192]	@ (80011b8 <MX_BlueNRG_MS_Init+0x1d4>)
 80010f8:	f00c ff78 	bl	800dfec <puts>
    while(1);
 80010fc:	bf00      	nop
 80010fe:	e7fd      	b.n	80010fc <MX_BlueNRG_MS_Init+0x118>
  }

  ret = aci_gap_set_auth_requirement(MITM_PROTECTION_REQUIRED,
 8001100:	2301      	movs	r3, #1
 8001102:	9303      	str	r3, [sp, #12]
 8001104:	4b2d      	ldr	r3, [pc, #180]	@ (80011bc <MX_BlueNRG_MS_Init+0x1d8>)
 8001106:	9302      	str	r3, [sp, #8]
 8001108:	2300      	movs	r3, #0
 800110a:	9301      	str	r3, [sp, #4]
 800110c:	2310      	movs	r3, #16
 800110e:	9300      	str	r3, [sp, #0]
 8001110:	2307      	movs	r3, #7
 8001112:	2200      	movs	r2, #0
 8001114:	2100      	movs	r1, #0
 8001116:	2001      	movs	r0, #1
 8001118:	f008 ff69 	bl	8009fee <aci_gap_set_auth_requirement>
 800111c:	4603      	mov	r3, r0
 800111e:	617b      	str	r3, [r7, #20]
                                     7,
                                     16,
                                     USE_FIXED_PIN_FOR_PAIRING,
                                     123456,
                                     BONDING);
  if (ret) {
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d004      	beq.n	8001130 <MX_BlueNRG_MS_Init+0x14c>
    PRINTF("aci_gap_set_authentication_requirement failed.\n");
 8001126:	4826      	ldr	r0, [pc, #152]	@ (80011c0 <MX_BlueNRG_MS_Init+0x1dc>)
 8001128:	f00c ff60 	bl	800dfec <puts>
    while(1);
 800112c:	bf00      	nop
 800112e:	e7fd      	b.n	800112c <MX_BlueNRG_MS_Init+0x148>
  }

  PRINTF("BLE Stack Initialized\n");
 8001130:	4824      	ldr	r0, [pc, #144]	@ (80011c4 <MX_BlueNRG_MS_Init+0x1e0>)
 8001132:	f00c ff5b 	bl	800dfec <puts>

  ret = Add_HWServW2ST_Service();
 8001136:	f001 fab7 	bl	80026a8 <Add_HWServW2ST_Service>
 800113a:	4603      	mov	r3, r0
 800113c:	617b      	str	r3, [r7, #20]
  if(ret == BLE_STATUS_SUCCESS) {
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d10a      	bne.n	800115a <MX_BlueNRG_MS_Init+0x176>
    PRINTF("BlueMS HW service added successfully.\n");
 8001144:	4820      	ldr	r0, [pc, #128]	@ (80011c8 <MX_BlueNRG_MS_Init+0x1e4>)
 8001146:	f00c ff51 	bl	800dfec <puts>
  } else {
    PRINTF("Error while adding BlueMS HW service: 0x%02x\r\n", ret);
    while(1);
  }

  ret = Add_SWServW2ST_Service();
 800114a:	f001 fb75 	bl	8002838 <Add_SWServW2ST_Service>
 800114e:	4603      	mov	r3, r0
 8001150:	617b      	str	r3, [r7, #20]
  if(ret == BLE_STATUS_SUCCESS) {
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d10a      	bne.n	800116e <MX_BlueNRG_MS_Init+0x18a>
 8001158:	e005      	b.n	8001166 <MX_BlueNRG_MS_Init+0x182>
    PRINTF("Error while adding BlueMS HW service: 0x%02x\r\n", ret);
 800115a:	6979      	ldr	r1, [r7, #20]
 800115c:	481b      	ldr	r0, [pc, #108]	@ (80011cc <MX_BlueNRG_MS_Init+0x1e8>)
 800115e:	f00c fedd 	bl	800df1c <iprintf>
    while(1);
 8001162:	bf00      	nop
 8001164:	e7fd      	b.n	8001162 <MX_BlueNRG_MS_Init+0x17e>
     PRINTF("BlueMS SW service added successfully.\n");
 8001166:	481a      	ldr	r0, [pc, #104]	@ (80011d0 <MX_BlueNRG_MS_Init+0x1ec>)
 8001168:	f00c ff40 	bl	800dfec <puts>
 800116c:	e005      	b.n	800117a <MX_BlueNRG_MS_Init+0x196>
  } else {
     PRINTF("Error while adding BlueMS HW service: 0x%02x\r\n", ret);
 800116e:	6979      	ldr	r1, [r7, #20]
 8001170:	4816      	ldr	r0, [pc, #88]	@ (80011cc <MX_BlueNRG_MS_Init+0x1e8>)
 8001172:	f00c fed3 	bl	800df1c <iprintf>
     while(1);
 8001176:	bf00      	nop
 8001178:	e7fd      	b.n	8001176 <MX_BlueNRG_MS_Init+0x192>
  }

  /* Set output power level */
  ret = aci_hal_set_tx_power_level(1,4);
 800117a:	2104      	movs	r1, #4
 800117c:	2001      	movs	r0, #1
 800117e:	f009 fb07 	bl	800a790 <aci_hal_set_tx_power_level>
 8001182:	4603      	mov	r3, r0
 8001184:	617b      	str	r3, [r7, #20]

  /* USER CODE BEGIN BlueNRG_MS_Init_PostTreatment */

  /* USER CODE END BlueNRG_MS_Init_PostTreatment */
}
 8001186:	bf00      	nop
 8001188:	3718      	adds	r7, #24
 800118a:	46bd      	mov	sp, r7
 800118c:	bdb0      	pop	{r4, r5, r7, pc}
 800118e:	bf00      	nop
 8001190:	080121f8 	.word	0x080121f8
 8001194:	20000000 	.word	0x20000000
 8001198:	08002e89 	.word	0x08002e89
 800119c:	08012200 	.word	0x08012200
 80011a0:	2000074c 	.word	0x2000074c
 80011a4:	20000750 	.word	0x20000750
 80011a8:	08012214 	.word	0x08012214
 80011ac:	08012238 	.word	0x08012238
 80011b0:	08012260 	.word	0x08012260
 80011b4:	08012274 	.word	0x08012274
 80011b8:	08012288 	.word	0x08012288
 80011bc:	0001e240 	.word	0x0001e240
 80011c0:	080122ac 	.word	0x080122ac
 80011c4:	080122dc 	.word	0x080122dc
 80011c8:	080122f4 	.word	0x080122f4
 80011cc:	0801231c 	.word	0x0801231c
 80011d0:	0801234c 	.word	0x0801234c

080011d4 <MX_BlueNRG_MS_Process>:

/*
 * BlueNRG-MS background task
 */
void MX_BlueNRG_MS_Process(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BlueNRG_MS_Process_PreTreatment */

  /* USER CODE END BlueNRG_MS_Process_PreTreatment */

  User_Process();
 80011d8:	f000 f812 	bl	8001200 <User_Process>
  hci_user_evt_proc();
 80011dc:	f009 fe0e 	bl	800adfc <hci_user_evt_proc>

  /* USER CODE BEGIN BlueNRG_MS_Process_PostTreatment */

  /* USER CODE END BlueNRG_MS_Process_PostTreatment */
}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <User_Init>:
 *
 * @param  None
 * @retval None
 */
static void User_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 80011e8:	2101      	movs	r1, #1
 80011ea:	2000      	movs	r0, #0
 80011ec:	f003 fa36 	bl	800465c <BSP_PB_Init>
  BSP_LED_Init(LED2);
 80011f0:	2000      	movs	r0, #0
 80011f2:	f003 f9cb 	bl	800458c <BSP_LED_Init>

  BSP_COM_Init(COM1);
 80011f6:	2000      	movs	r0, #0
 80011f8:	f003 fae2 	bl	80047c0 <BSP_COM_Init>
}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}

08001200 <User_Process>:
 *
 * @param  None
 * @retval None
 */
static void User_Process(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
  float data_t;
  float data_p;
  static uint32_t counter = 0;

  if (set_connectable)
 8001206:	4b2c      	ldr	r3, [pc, #176]	@ (80012b8 <User_Process+0xb8>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	b2db      	uxtb	r3, r3
 800120c:	2b00      	cmp	r3, #0
 800120e:	d004      	beq.n	800121a <User_Process+0x1a>
  {
    Set_DeviceConnectable();
 8001210:	f001 fdae 	bl	8002d70 <Set_DeviceConnectable>
    set_connectable = FALSE;
 8001214:	4b28      	ldr	r3, [pc, #160]	@ (80012b8 <User_Process+0xb8>)
 8001216:	2200      	movs	r2, #0
 8001218:	701a      	strb	r2, [r3, #0]
    while (BSP_PB_GetState(BUTTON_KEY) == !user_button_init_state);

    /* Debouncing */
    HAL_Delay(50);
#endif
    BSP_LED_Toggle(LED2);
 800121a:	2000      	movs	r0, #0
 800121c:	f003 f9c8 	bl	80045b0 <BSP_LED_Toggle>

    if (connected)
 8001220:	4b26      	ldr	r3, [pc, #152]	@ (80012bc <User_Process+0xbc>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d042      	beq.n	80012ae <User_Process+0xae>
    {
      /* Set a random seed */
      srand(HAL_GetTick());
 8001228:	f003 ffcc 	bl	80051c4 <HAL_GetTick>
 800122c:	4603      	mov	r3, r0
 800122e:	4618      	mov	r0, r3
 8001230:	f00b fc80 	bl	800cb34 <srand>

      /* Update emulated Environmental data */
      Set_Random_Environmental_Values(&data_t, &data_p);
 8001234:	463a      	mov	r2, r7
 8001236:	1d3b      	adds	r3, r7, #4
 8001238:	4611      	mov	r1, r2
 800123a:	4618      	mov	r0, r3
 800123c:	f000 f84c 	bl	80012d8 <Set_Random_Environmental_Values>
      BlueMS_Environmental_Update((int32_t)(data_p *100), (int16_t)(data_t * 10));
 8001240:	edd7 7a00 	vldr	s15, [r7]
 8001244:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 80012c0 <User_Process+0xc0>
 8001248:	ee67 7a87 	vmul.f32	s15, s15, s14
 800124c:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8001250:	edd7 7a01 	vldr	s15, [r7, #4]
 8001254:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001258:	ee67 7a87 	vmul.f32	s15, s15, s14
 800125c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001260:	ee17 3a90 	vmov	r3, s15
 8001264:	b21b      	sxth	r3, r3
 8001266:	4619      	mov	r1, r3
 8001268:	ee16 0a90 	vmov	r0, s13
 800126c:	f001 fd3a 	bl	8002ce4 <BlueMS_Environmental_Update>

      /* Update emulated Acceleration, Gyroscope and Sensor Fusion data */
      Set_Random_Motion_Values(counter);
 8001270:	4b14      	ldr	r3, [pc, #80]	@ (80012c4 <User_Process+0xc4>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4618      	mov	r0, r3
 8001276:	f000 f8af 	bl	80013d8 <Set_Random_Motion_Values>
      Acc_Update(&x_axes, &g_axes, &m_axes);
 800127a:	4a13      	ldr	r2, [pc, #76]	@ (80012c8 <User_Process+0xc8>)
 800127c:	4913      	ldr	r1, [pc, #76]	@ (80012cc <User_Process+0xcc>)
 800127e:	4814      	ldr	r0, [pc, #80]	@ (80012d0 <User_Process+0xd0>)
 8001280:	f001 fb6a 	bl	8002958 <Acc_Update>
      Quat_Update(&q_axes);
 8001284:	4813      	ldr	r0, [pc, #76]	@ (80012d4 <User_Process+0xd4>)
 8001286:	f001 fc0b 	bl	8002aa0 <Quat_Update>

      counter ++;
 800128a:	4b0e      	ldr	r3, [pc, #56]	@ (80012c4 <User_Process+0xc4>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	3301      	adds	r3, #1
 8001290:	4a0c      	ldr	r2, [pc, #48]	@ (80012c4 <User_Process+0xc4>)
 8001292:	6013      	str	r3, [r2, #0]
      if (counter == 40) {
 8001294:	4b0b      	ldr	r3, [pc, #44]	@ (80012c4 <User_Process+0xc4>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2b28      	cmp	r3, #40	@ 0x28
 800129a:	d104      	bne.n	80012a6 <User_Process+0xa6>
        counter = 0;
 800129c:	4b09      	ldr	r3, [pc, #36]	@ (80012c4 <User_Process+0xc4>)
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
        Reset_Motion_Values();
 80012a2:	f001 f907 	bl	80024b4 <Reset_Motion_Values>
      }
#if !USE_BUTTON
      HAL_Delay(1000); /* wait 1 sec before sending new data */
 80012a6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80012aa:	f003 ff97 	bl	80051dc <HAL_Delay>
#if USE_BUTTON
    /* Reset the User Button flag */
    user_button_pressed = 0;
  }
#endif
}
 80012ae:	bf00      	nop
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000001 	.word	0x20000001
 80012bc:	2000078c 	.word	0x2000078c
 80012c0:	42c80000 	.word	0x42c80000
 80012c4:	20000758 	.word	0x20000758
 80012c8:	200007a8 	.word	0x200007a8
 80012cc:	2000079c 	.word	0x2000079c
 80012d0:	20000790 	.word	0x20000790
 80012d4:	200007b4 	.word	0x200007b4

080012d8 <Set_Random_Environmental_Values>:
 * @param  float pointer to temperature data
 * @param  float pointer to pressure data
 * @retval None
 */
static void Set_Random_Environmental_Values(float *data_t, float *data_p)
{
 80012d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80012dc:	b084      	sub	sp, #16
 80012de:	af00      	add	r7, sp, #0
 80012e0:	60f8      	str	r0, [r7, #12]
 80012e2:	60b9      	str	r1, [r7, #8]
  *data_t = 27.0 + ((uint64_t)rand()*5)/RAND_MAX;     /* T sensor emulation */
 80012e4:	f00b fc54 	bl	800cb90 <rand>
 80012e8:	4603      	mov	r3, r0
 80012ea:	17da      	asrs	r2, r3, #31
 80012ec:	469a      	mov	sl, r3
 80012ee:	4693      	mov	fp, r2
 80012f0:	4652      	mov	r2, sl
 80012f2:	465b      	mov	r3, fp
 80012f4:	f04f 0000 	mov.w	r0, #0
 80012f8:	f04f 0100 	mov.w	r1, #0
 80012fc:	0099      	lsls	r1, r3, #2
 80012fe:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001302:	0090      	lsls	r0, r2, #2
 8001304:	4602      	mov	r2, r0
 8001306:	460b      	mov	r3, r1
 8001308:	eb12 010a 	adds.w	r1, r2, sl
 800130c:	6039      	str	r1, [r7, #0]
 800130e:	eb43 030b 	adc.w	r3, r3, fp
 8001312:	607b      	str	r3, [r7, #4]
 8001314:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001318:	f04f 0300 	mov.w	r3, #0
 800131c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001320:	f7ff fcb2 	bl	8000c88 <__aeabi_uldivmod>
 8001324:	4602      	mov	r2, r0
 8001326:	460b      	mov	r3, r1
 8001328:	4610      	mov	r0, r2
 800132a:	4619      	mov	r1, r3
 800132c:	f7ff f92e 	bl	800058c <__aeabi_ul2d>
 8001330:	f04f 0200 	mov.w	r2, #0
 8001334:	4b26      	ldr	r3, [pc, #152]	@ (80013d0 <Set_Random_Environmental_Values+0xf8>)
 8001336:	f7fe ffa9 	bl	800028c <__adddf3>
 800133a:	4602      	mov	r2, r0
 800133c:	460b      	mov	r3, r1
 800133e:	4610      	mov	r0, r2
 8001340:	4619      	mov	r1, r3
 8001342:	f7ff fc51 	bl	8000be8 <__aeabi_d2f>
 8001346:	4602      	mov	r2, r0
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	601a      	str	r2, [r3, #0]
  *data_p = 1000.0 + ((uint64_t)rand()*80)/RAND_MAX; /* P sensor emulation */
 800134c:	f00b fc20 	bl	800cb90 <rand>
 8001350:	4603      	mov	r3, r0
 8001352:	17da      	asrs	r2, r3, #31
 8001354:	4698      	mov	r8, r3
 8001356:	4691      	mov	r9, r2
 8001358:	4642      	mov	r2, r8
 800135a:	464b      	mov	r3, r9
 800135c:	f04f 0000 	mov.w	r0, #0
 8001360:	f04f 0100 	mov.w	r1, #0
 8001364:	0099      	lsls	r1, r3, #2
 8001366:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800136a:	0090      	lsls	r0, r2, #2
 800136c:	4602      	mov	r2, r0
 800136e:	460b      	mov	r3, r1
 8001370:	eb12 0408 	adds.w	r4, r2, r8
 8001374:	eb43 0509 	adc.w	r5, r3, r9
 8001378:	f04f 0200 	mov.w	r2, #0
 800137c:	f04f 0300 	mov.w	r3, #0
 8001380:	012b      	lsls	r3, r5, #4
 8001382:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001386:	0122      	lsls	r2, r4, #4
 8001388:	4614      	mov	r4, r2
 800138a:	461d      	mov	r5, r3
 800138c:	4620      	mov	r0, r4
 800138e:	4629      	mov	r1, r5
 8001390:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001394:	f04f 0300 	mov.w	r3, #0
 8001398:	f7ff fc76 	bl	8000c88 <__aeabi_uldivmod>
 800139c:	4602      	mov	r2, r0
 800139e:	460b      	mov	r3, r1
 80013a0:	4610      	mov	r0, r2
 80013a2:	4619      	mov	r1, r3
 80013a4:	f7ff f8f2 	bl	800058c <__aeabi_ul2d>
 80013a8:	f04f 0200 	mov.w	r2, #0
 80013ac:	4b09      	ldr	r3, [pc, #36]	@ (80013d4 <Set_Random_Environmental_Values+0xfc>)
 80013ae:	f7fe ff6d 	bl	800028c <__adddf3>
 80013b2:	4602      	mov	r2, r0
 80013b4:	460b      	mov	r3, r1
 80013b6:	4610      	mov	r0, r2
 80013b8:	4619      	mov	r1, r3
 80013ba:	f7ff fc15 	bl	8000be8 <__aeabi_d2f>
 80013be:	4602      	mov	r2, r0
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	601a      	str	r2, [r3, #0]
}
 80013c4:	bf00      	nop
 80013c6:	3710      	adds	r7, #16
 80013c8:	46bd      	mov	sp, r7
 80013ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80013ce:	bf00      	nop
 80013d0:	403b0000 	.word	0x403b0000
 80013d4:	408f4000 	.word	0x408f4000

080013d8 <Set_Random_Motion_Values>:
 * @brief  Set random values for all motion sensor data
 * @param  uint32_t counter for changing the rotation direction
 * @retval None
 */
static void Set_Random_Motion_Values(uint32_t cnt)
{
 80013d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013dc:	f5ad 7d7a 	sub.w	sp, sp, #1000	@ 0x3e8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	f8c7 03e4 	str.w	r0, [r7, #996]	@ 0x3e4
  /* Update Acceleration, Gyroscope and Sensor Fusion data */
  if (cnt < 20) {
 80013e6:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 80013ea:	2b13      	cmp	r3, #19
 80013ec:	f200 8426 	bhi.w	8001c3c <Set_Random_Motion_Values+0x864>
    x_axes.AXIS_X +=  (10  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 80013f0:	f00b fbce 	bl	800cb90 <rand>
 80013f4:	4603      	mov	r3, r0
 80013f6:	17da      	asrs	r2, r3, #31
 80013f8:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
 80013fc:	f8c7 232c 	str.w	r2, [r7, #812]	@ 0x32c
 8001400:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001404:	2200      	movs	r2, #0
 8001406:	f8c7 3320 	str.w	r3, [r7, #800]	@ 0x320
 800140a:	f8c7 2324 	str.w	r2, [r7, #804]	@ 0x324
 800140e:	e9d7 45ca 	ldrd	r4, r5, [r7, #808]	@ 0x328
 8001412:	462b      	mov	r3, r5
 8001414:	e9d7 abc8 	ldrd	sl, fp, [r7, #800]	@ 0x320
 8001418:	4652      	mov	r2, sl
 800141a:	fb02 f203 	mul.w	r2, r2, r3
 800141e:	465b      	mov	r3, fp
 8001420:	4621      	mov	r1, r4
 8001422:	fb01 f303 	mul.w	r3, r1, r3
 8001426:	4413      	add	r3, r2
 8001428:	4622      	mov	r2, r4
 800142a:	4651      	mov	r1, sl
 800142c:	fba2 8901 	umull	r8, r9, r2, r1
 8001430:	444b      	add	r3, r9
 8001432:	4699      	mov	r9, r3
 8001434:	4642      	mov	r2, r8
 8001436:	464b      	mov	r3, r9
 8001438:	1891      	adds	r1, r2, r2
 800143a:	66b9      	str	r1, [r7, #104]	@ 0x68
 800143c:	415b      	adcs	r3, r3
 800143e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001440:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8001444:	eb12 0108 	adds.w	r1, r2, r8
 8001448:	f8c7 1318 	str.w	r1, [r7, #792]	@ 0x318
 800144c:	eb43 0309 	adc.w	r3, r3, r9
 8001450:	f8c7 331c 	str.w	r3, [r7, #796]	@ 0x31c
 8001454:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001458:	f04f 0300 	mov.w	r3, #0
 800145c:	e9d7 01c6 	ldrd	r0, r1, [r7, #792]	@ 0x318
 8001460:	f7ff fc12 	bl	8000c88 <__aeabi_uldivmod>
 8001464:	4602      	mov	r2, r0
 8001466:	460b      	mov	r3, r1
 8001468:	f112 010a 	adds.w	r1, r2, #10
 800146c:	f8c7 10c8 	str.w	r1, [r7, #200]	@ 0xc8
 8001470:	f143 0300 	adc.w	r3, r3, #0
 8001474:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001478:	4bec      	ldr	r3, [pc, #944]	@ (800182c <Set_Random_Motion_Values+0x454>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	461a      	mov	r2, r3
 800147e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001482:	4413      	add	r3, r2
 8001484:	461a      	mov	r2, r3
 8001486:	4be9      	ldr	r3, [pc, #932]	@ (800182c <Set_Random_Motion_Values+0x454>)
 8001488:	601a      	str	r2, [r3, #0]
    x_axes.AXIS_Y += -(10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 800148a:	f00b fb81 	bl	800cb90 <rand>
 800148e:	4603      	mov	r3, r0
 8001490:	17da      	asrs	r2, r3, #31
 8001492:	f8c7 3310 	str.w	r3, [r7, #784]	@ 0x310
 8001496:	f8c7 2314 	str.w	r2, [r7, #788]	@ 0x314
 800149a:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 800149e:	2200      	movs	r2, #0
 80014a0:	f8c7 3308 	str.w	r3, [r7, #776]	@ 0x308
 80014a4:	f8c7 230c 	str.w	r2, [r7, #780]	@ 0x30c
 80014a8:	e9d7 45c4 	ldrd	r4, r5, [r7, #784]	@ 0x310
 80014ac:	462b      	mov	r3, r5
 80014ae:	e9d7 89c2 	ldrd	r8, r9, [r7, #776]	@ 0x308
 80014b2:	4642      	mov	r2, r8
 80014b4:	fb02 f203 	mul.w	r2, r2, r3
 80014b8:	464b      	mov	r3, r9
 80014ba:	4621      	mov	r1, r4
 80014bc:	fb01 f303 	mul.w	r3, r1, r3
 80014c0:	4413      	add	r3, r2
 80014c2:	4622      	mov	r2, r4
 80014c4:	4641      	mov	r1, r8
 80014c6:	fba2 1201 	umull	r1, r2, r2, r1
 80014ca:	f8c7 23dc 	str.w	r2, [r7, #988]	@ 0x3dc
 80014ce:	460a      	mov	r2, r1
 80014d0:	f8c7 23d8 	str.w	r2, [r7, #984]	@ 0x3d8
 80014d4:	f8d7 23dc 	ldr.w	r2, [r7, #988]	@ 0x3dc
 80014d8:	4413      	add	r3, r2
 80014da:	f8c7 33dc 	str.w	r3, [r7, #988]	@ 0x3dc
 80014de:	e9d7 45f6 	ldrd	r4, r5, [r7, #984]	@ 0x3d8
 80014e2:	4622      	mov	r2, r4
 80014e4:	462b      	mov	r3, r5
 80014e6:	f04f 0000 	mov.w	r0, #0
 80014ea:	f04f 0100 	mov.w	r1, #0
 80014ee:	0099      	lsls	r1, r3, #2
 80014f0:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80014f4:	0090      	lsls	r0, r2, #2
 80014f6:	4602      	mov	r2, r0
 80014f8:	460b      	mov	r3, r1
 80014fa:	4621      	mov	r1, r4
 80014fc:	1851      	adds	r1, r2, r1
 80014fe:	f8c7 1300 	str.w	r1, [r7, #768]	@ 0x300
 8001502:	4629      	mov	r1, r5
 8001504:	eb43 0101 	adc.w	r1, r3, r1
 8001508:	f8c7 1304 	str.w	r1, [r7, #772]	@ 0x304
 800150c:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001510:	f04f 0300 	mov.w	r3, #0
 8001514:	e9d7 01c0 	ldrd	r0, r1, [r7, #768]	@ 0x300
 8001518:	f7ff fbb6 	bl	8000c88 <__aeabi_uldivmod>
 800151c:	4602      	mov	r2, r0
 800151e:	460b      	mov	r3, r1
 8001520:	f06f 0009 	mvn.w	r0, #9
 8001524:	f04f 31ff 	mov.w	r1, #4294967295
 8001528:	1a80      	subs	r0, r0, r2
 800152a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
 800152e:	eb61 0303 	sbc.w	r3, r1, r3
 8001532:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001536:	4bbd      	ldr	r3, [pc, #756]	@ (800182c <Set_Random_Motion_Values+0x454>)
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	461a      	mov	r2, r3
 800153c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001540:	4413      	add	r3, r2
 8001542:	461a      	mov	r2, r3
 8001544:	4bb9      	ldr	r3, [pc, #740]	@ (800182c <Set_Random_Motion_Values+0x454>)
 8001546:	605a      	str	r2, [r3, #4]
    x_axes.AXIS_Z +=  (10  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8001548:	f00b fb22 	bl	800cb90 <rand>
 800154c:	4603      	mov	r3, r0
 800154e:	17da      	asrs	r2, r3, #31
 8001550:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8
 8001554:	f8c7 22fc 	str.w	r2, [r7, #764]	@ 0x2fc
 8001558:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 800155c:	2200      	movs	r2, #0
 800155e:	f8c7 32f0 	str.w	r3, [r7, #752]	@ 0x2f0
 8001562:	f8c7 22f4 	str.w	r2, [r7, #756]	@ 0x2f4
 8001566:	e9d7 45be 	ldrd	r4, r5, [r7, #760]	@ 0x2f8
 800156a:	462b      	mov	r3, r5
 800156c:	e9d7 89bc 	ldrd	r8, r9, [r7, #752]	@ 0x2f0
 8001570:	4642      	mov	r2, r8
 8001572:	fb02 f203 	mul.w	r2, r2, r3
 8001576:	464b      	mov	r3, r9
 8001578:	4621      	mov	r1, r4
 800157a:	fb01 f303 	mul.w	r3, r1, r3
 800157e:	4413      	add	r3, r2
 8001580:	4622      	mov	r2, r4
 8001582:	4641      	mov	r1, r8
 8001584:	fba2 1201 	umull	r1, r2, r2, r1
 8001588:	f8c7 23d4 	str.w	r2, [r7, #980]	@ 0x3d4
 800158c:	460a      	mov	r2, r1
 800158e:	f8c7 23d0 	str.w	r2, [r7, #976]	@ 0x3d0
 8001592:	f8d7 23d4 	ldr.w	r2, [r7, #980]	@ 0x3d4
 8001596:	4413      	add	r3, r2
 8001598:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
 800159c:	e9d7 45f4 	ldrd	r4, r5, [r7, #976]	@ 0x3d0
 80015a0:	4622      	mov	r2, r4
 80015a2:	462b      	mov	r3, r5
 80015a4:	f04f 0000 	mov.w	r0, #0
 80015a8:	f04f 0100 	mov.w	r1, #0
 80015ac:	00d9      	lsls	r1, r3, #3
 80015ae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80015b2:	00d0      	lsls	r0, r2, #3
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	4621      	mov	r1, r4
 80015ba:	1a51      	subs	r1, r2, r1
 80015bc:	f8c7 12e8 	str.w	r1, [r7, #744]	@ 0x2e8
 80015c0:	4629      	mov	r1, r5
 80015c2:	eb63 0301 	sbc.w	r3, r3, r1
 80015c6:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
 80015ca:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80015ce:	f04f 0300 	mov.w	r3, #0
 80015d2:	e9d7 01ba 	ldrd	r0, r1, [r7, #744]	@ 0x2e8
 80015d6:	f7ff fb57 	bl	8000c88 <__aeabi_uldivmod>
 80015da:	4602      	mov	r2, r0
 80015dc:	460b      	mov	r3, r1
 80015de:	f112 010a 	adds.w	r1, r2, #10
 80015e2:	f8c7 10b8 	str.w	r1, [r7, #184]	@ 0xb8
 80015e6:	f143 0300 	adc.w	r3, r3, #0
 80015ea:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80015ee:	4b8f      	ldr	r3, [pc, #572]	@ (800182c <Set_Random_Motion_Values+0x454>)
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	461a      	mov	r2, r3
 80015f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80015f8:	4413      	add	r3, r2
 80015fa:	461a      	mov	r2, r3
 80015fc:	4b8b      	ldr	r3, [pc, #556]	@ (800182c <Set_Random_Motion_Values+0x454>)
 80015fe:	609a      	str	r2, [r3, #8]
    g_axes.AXIS_X +=  (100 + ((uint64_t)rand()*2*cnt)/RAND_MAX);
 8001600:	f00b fac6 	bl	800cb90 <rand>
 8001604:	4603      	mov	r3, r0
 8001606:	17da      	asrs	r2, r3, #31
 8001608:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
 800160c:	f8c7 22e4 	str.w	r2, [r7, #740]	@ 0x2e4
 8001610:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001614:	2200      	movs	r2, #0
 8001616:	f8c7 32d8 	str.w	r3, [r7, #728]	@ 0x2d8
 800161a:	f8c7 22dc 	str.w	r2, [r7, #732]	@ 0x2dc
 800161e:	e9d7 45b8 	ldrd	r4, r5, [r7, #736]	@ 0x2e0
 8001622:	462b      	mov	r3, r5
 8001624:	e9d7 89b6 	ldrd	r8, r9, [r7, #728]	@ 0x2d8
 8001628:	4642      	mov	r2, r8
 800162a:	fb02 f203 	mul.w	r2, r2, r3
 800162e:	464b      	mov	r3, r9
 8001630:	4621      	mov	r1, r4
 8001632:	fb01 f303 	mul.w	r3, r1, r3
 8001636:	4413      	add	r3, r2
 8001638:	4622      	mov	r2, r4
 800163a:	4641      	mov	r1, r8
 800163c:	fba2 1201 	umull	r1, r2, r2, r1
 8001640:	f8c7 23cc 	str.w	r2, [r7, #972]	@ 0x3cc
 8001644:	460a      	mov	r2, r1
 8001646:	f8c7 23c8 	str.w	r2, [r7, #968]	@ 0x3c8
 800164a:	f8d7 23cc 	ldr.w	r2, [r7, #972]	@ 0x3cc
 800164e:	4413      	add	r3, r2
 8001650:	f8c7 33cc 	str.w	r3, [r7, #972]	@ 0x3cc
 8001654:	e9d7 12f2 	ldrd	r1, r2, [r7, #968]	@ 0x3c8
 8001658:	460b      	mov	r3, r1
 800165a:	18db      	adds	r3, r3, r3
 800165c:	663b      	str	r3, [r7, #96]	@ 0x60
 800165e:	4613      	mov	r3, r2
 8001660:	eb42 0303 	adc.w	r3, r2, r3
 8001664:	667b      	str	r3, [r7, #100]	@ 0x64
 8001666:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 800166a:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800166e:	f04f 0300 	mov.w	r3, #0
 8001672:	f7ff fb09 	bl	8000c88 <__aeabi_uldivmod>
 8001676:	4602      	mov	r2, r0
 8001678:	460b      	mov	r3, r1
 800167a:	f112 0164 	adds.w	r1, r2, #100	@ 0x64
 800167e:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 8001682:	f143 0300 	adc.w	r3, r3, #0
 8001686:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800168a:	4b69      	ldr	r3, [pc, #420]	@ (8001830 <Set_Random_Motion_Values+0x458>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	461a      	mov	r2, r3
 8001690:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001694:	4413      	add	r3, r2
 8001696:	461a      	mov	r2, r3
 8001698:	4b65      	ldr	r3, [pc, #404]	@ (8001830 <Set_Random_Motion_Values+0x458>)
 800169a:	601a      	str	r2, [r3, #0]
    g_axes.AXIS_Y += -(100 + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 800169c:	f00b fa78 	bl	800cb90 <rand>
 80016a0:	4603      	mov	r3, r0
 80016a2:	17da      	asrs	r2, r3, #31
 80016a4:	f8c7 32d0 	str.w	r3, [r7, #720]	@ 0x2d0
 80016a8:	f8c7 22d4 	str.w	r2, [r7, #724]	@ 0x2d4
 80016ac:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 80016b0:	2200      	movs	r2, #0
 80016b2:	f8c7 32c8 	str.w	r3, [r7, #712]	@ 0x2c8
 80016b6:	f8c7 22cc 	str.w	r2, [r7, #716]	@ 0x2cc
 80016ba:	e9d7 45b4 	ldrd	r4, r5, [r7, #720]	@ 0x2d0
 80016be:	462b      	mov	r3, r5
 80016c0:	e9d7 89b2 	ldrd	r8, r9, [r7, #712]	@ 0x2c8
 80016c4:	4642      	mov	r2, r8
 80016c6:	fb02 f203 	mul.w	r2, r2, r3
 80016ca:	464b      	mov	r3, r9
 80016cc:	4621      	mov	r1, r4
 80016ce:	fb01 f303 	mul.w	r3, r1, r3
 80016d2:	4413      	add	r3, r2
 80016d4:	4622      	mov	r2, r4
 80016d6:	4641      	mov	r1, r8
 80016d8:	fba2 1201 	umull	r1, r2, r2, r1
 80016dc:	f8c7 23c4 	str.w	r2, [r7, #964]	@ 0x3c4
 80016e0:	460a      	mov	r2, r1
 80016e2:	f8c7 23c0 	str.w	r2, [r7, #960]	@ 0x3c0
 80016e6:	f8d7 23c4 	ldr.w	r2, [r7, #964]	@ 0x3c4
 80016ea:	4413      	add	r3, r2
 80016ec:	f8c7 33c4 	str.w	r3, [r7, #964]	@ 0x3c4
 80016f0:	f04f 0000 	mov.w	r0, #0
 80016f4:	f04f 0100 	mov.w	r1, #0
 80016f8:	e9d7 45f0 	ldrd	r4, r5, [r7, #960]	@ 0x3c0
 80016fc:	462b      	mov	r3, r5
 80016fe:	0099      	lsls	r1, r3, #2
 8001700:	4623      	mov	r3, r4
 8001702:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 8001706:	4623      	mov	r3, r4
 8001708:	0098      	lsls	r0, r3, #2
 800170a:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800170e:	f04f 0300 	mov.w	r3, #0
 8001712:	f7ff fab9 	bl	8000c88 <__aeabi_uldivmod>
 8001716:	4602      	mov	r2, r0
 8001718:	460b      	mov	r3, r1
 800171a:	f06f 0063 	mvn.w	r0, #99	@ 0x63
 800171e:	f04f 31ff 	mov.w	r1, #4294967295
 8001722:	1a80      	subs	r0, r0, r2
 8001724:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
 8001728:	eb61 0303 	sbc.w	r3, r1, r3
 800172c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001730:	4b3f      	ldr	r3, [pc, #252]	@ (8001830 <Set_Random_Motion_Values+0x458>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	461a      	mov	r2, r3
 8001736:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800173a:	4413      	add	r3, r2
 800173c:	461a      	mov	r2, r3
 800173e:	4b3c      	ldr	r3, [pc, #240]	@ (8001830 <Set_Random_Motion_Values+0x458>)
 8001740:	605a      	str	r2, [r3, #4]
    g_axes.AXIS_Z +=  (100 + ((uint64_t)rand()*6*cnt)/RAND_MAX);
 8001742:	f00b fa25 	bl	800cb90 <rand>
 8001746:	4603      	mov	r3, r0
 8001748:	17da      	asrs	r2, r3, #31
 800174a:	f8c7 32c0 	str.w	r3, [r7, #704]	@ 0x2c0
 800174e:	f8c7 22c4 	str.w	r2, [r7, #708]	@ 0x2c4
 8001752:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001756:	2200      	movs	r2, #0
 8001758:	f8c7 32b8 	str.w	r3, [r7, #696]	@ 0x2b8
 800175c:	f8c7 22bc 	str.w	r2, [r7, #700]	@ 0x2bc
 8001760:	e9d7 45b0 	ldrd	r4, r5, [r7, #704]	@ 0x2c0
 8001764:	462b      	mov	r3, r5
 8001766:	e9d7 89ae 	ldrd	r8, r9, [r7, #696]	@ 0x2b8
 800176a:	4642      	mov	r2, r8
 800176c:	fb02 f203 	mul.w	r2, r2, r3
 8001770:	464b      	mov	r3, r9
 8001772:	4621      	mov	r1, r4
 8001774:	fb01 f303 	mul.w	r3, r1, r3
 8001778:	4413      	add	r3, r2
 800177a:	4622      	mov	r2, r4
 800177c:	4641      	mov	r1, r8
 800177e:	fba2 1201 	umull	r1, r2, r2, r1
 8001782:	f8c7 23bc 	str.w	r2, [r7, #956]	@ 0x3bc
 8001786:	460a      	mov	r2, r1
 8001788:	f8c7 23b8 	str.w	r2, [r7, #952]	@ 0x3b8
 800178c:	f8d7 23bc 	ldr.w	r2, [r7, #956]	@ 0x3bc
 8001790:	4413      	add	r3, r2
 8001792:	f8c7 33bc 	str.w	r3, [r7, #956]	@ 0x3bc
 8001796:	e9d7 45ee 	ldrd	r4, r5, [r7, #952]	@ 0x3b8
 800179a:	4622      	mov	r2, r4
 800179c:	462b      	mov	r3, r5
 800179e:	1891      	adds	r1, r2, r2
 80017a0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80017a2:	415b      	adcs	r3, r3
 80017a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80017a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80017aa:	4621      	mov	r1, r4
 80017ac:	1851      	adds	r1, r2, r1
 80017ae:	6539      	str	r1, [r7, #80]	@ 0x50
 80017b0:	4629      	mov	r1, r5
 80017b2:	eb43 0101 	adc.w	r1, r3, r1
 80017b6:	6579      	str	r1, [r7, #84]	@ 0x54
 80017b8:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80017bc:	460b      	mov	r3, r1
 80017be:	18db      	adds	r3, r3, r3
 80017c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80017c2:	4613      	mov	r3, r2
 80017c4:	eb42 0303 	adc.w	r3, r2, r3
 80017c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80017ca:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 80017ce:	4618      	mov	r0, r3
 80017d0:	4621      	mov	r1, r4
 80017d2:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80017d6:	f04f 0300 	mov.w	r3, #0
 80017da:	f7ff fa55 	bl	8000c88 <__aeabi_uldivmod>
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	f112 0164 	adds.w	r1, r2, #100	@ 0x64
 80017e6:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 80017ea:	f143 0300 	adc.w	r3, r3, #0
 80017ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80017f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001830 <Set_Random_Motion_Values+0x458>)
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	461a      	mov	r2, r3
 80017f8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80017fc:	4413      	add	r3, r2
 80017fe:	461a      	mov	r2, r3
 8001800:	4b0b      	ldr	r3, [pc, #44]	@ (8001830 <Set_Random_Motion_Values+0x458>)
 8001802:	609a      	str	r2, [r3, #8]
    m_axes.AXIS_X +=  (3  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8001804:	f00b f9c4 	bl	800cb90 <rand>
 8001808:	4603      	mov	r3, r0
 800180a:	17da      	asrs	r2, r3, #31
 800180c:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
 8001810:	f8c7 22b4 	str.w	r2, [r7, #692]	@ 0x2b4
 8001814:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001818:	2200      	movs	r2, #0
 800181a:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
 800181e:	f8c7 22ac 	str.w	r2, [r7, #684]	@ 0x2ac
 8001822:	e9d7 45ac 	ldrd	r4, r5, [r7, #688]	@ 0x2b0
 8001826:	462b      	mov	r3, r5
 8001828:	e004      	b.n	8001834 <Set_Random_Motion_Values+0x45c>
 800182a:	bf00      	nop
 800182c:	20000790 	.word	0x20000790
 8001830:	2000079c 	.word	0x2000079c
 8001834:	e9d7 89aa 	ldrd	r8, r9, [r7, #680]	@ 0x2a8
 8001838:	4642      	mov	r2, r8
 800183a:	fb02 f203 	mul.w	r2, r2, r3
 800183e:	464b      	mov	r3, r9
 8001840:	4621      	mov	r1, r4
 8001842:	fb01 f303 	mul.w	r3, r1, r3
 8001846:	4413      	add	r3, r2
 8001848:	4622      	mov	r2, r4
 800184a:	4641      	mov	r1, r8
 800184c:	fba2 1201 	umull	r1, r2, r2, r1
 8001850:	f8c7 23b4 	str.w	r2, [r7, #948]	@ 0x3b4
 8001854:	460a      	mov	r2, r1
 8001856:	f8c7 23b0 	str.w	r2, [r7, #944]	@ 0x3b0
 800185a:	f8d7 23b4 	ldr.w	r2, [r7, #948]	@ 0x3b4
 800185e:	4413      	add	r3, r2
 8001860:	f8c7 33b4 	str.w	r3, [r7, #948]	@ 0x3b4
 8001864:	e9d7 45ec 	ldrd	r4, r5, [r7, #944]	@ 0x3b0
 8001868:	4622      	mov	r2, r4
 800186a:	462b      	mov	r3, r5
 800186c:	1891      	adds	r1, r2, r2
 800186e:	6439      	str	r1, [r7, #64]	@ 0x40
 8001870:	415b      	adcs	r3, r3
 8001872:	647b      	str	r3, [r7, #68]	@ 0x44
 8001874:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001878:	4621      	mov	r1, r4
 800187a:	1851      	adds	r1, r2, r1
 800187c:	f8c7 12a0 	str.w	r1, [r7, #672]	@ 0x2a0
 8001880:	4629      	mov	r1, r5
 8001882:	eb43 0101 	adc.w	r1, r3, r1
 8001886:	f8c7 12a4 	str.w	r1, [r7, #676]	@ 0x2a4
 800188a:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800188e:	f04f 0300 	mov.w	r3, #0
 8001892:	e9d7 01a8 	ldrd	r0, r1, [r7, #672]	@ 0x2a0
 8001896:	f7ff f9f7 	bl	8000c88 <__aeabi_uldivmod>
 800189a:	4602      	mov	r2, r0
 800189c:	460b      	mov	r3, r1
 800189e:	1cd1      	adds	r1, r2, #3
 80018a0:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 80018a4:	f143 0300 	adc.w	r3, r3, #0
 80018a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80018ac:	4be1      	ldr	r3, [pc, #900]	@ (8001c34 <Set_Random_Motion_Values+0x85c>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	461a      	mov	r2, r3
 80018b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80018b6:	4413      	add	r3, r2
 80018b8:	461a      	mov	r2, r3
 80018ba:	4bde      	ldr	r3, [pc, #888]	@ (8001c34 <Set_Random_Motion_Values+0x85c>)
 80018bc:	601a      	str	r2, [r3, #0]
    m_axes.AXIS_Y += -(3  + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 80018be:	f00b f967 	bl	800cb90 <rand>
 80018c2:	4603      	mov	r3, r0
 80018c4:	17da      	asrs	r2, r3, #31
 80018c6:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
 80018ca:	f8c7 229c 	str.w	r2, [r7, #668]	@ 0x29c
 80018ce:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 80018d2:	2200      	movs	r2, #0
 80018d4:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
 80018d8:	f8c7 2294 	str.w	r2, [r7, #660]	@ 0x294
 80018dc:	e9d7 45a6 	ldrd	r4, r5, [r7, #664]	@ 0x298
 80018e0:	462b      	mov	r3, r5
 80018e2:	e9d7 89a4 	ldrd	r8, r9, [r7, #656]	@ 0x290
 80018e6:	4642      	mov	r2, r8
 80018e8:	fb02 f203 	mul.w	r2, r2, r3
 80018ec:	464b      	mov	r3, r9
 80018ee:	4621      	mov	r1, r4
 80018f0:	fb01 f303 	mul.w	r3, r1, r3
 80018f4:	4413      	add	r3, r2
 80018f6:	4622      	mov	r2, r4
 80018f8:	4641      	mov	r1, r8
 80018fa:	fba2 1201 	umull	r1, r2, r2, r1
 80018fe:	f8c7 23ac 	str.w	r2, [r7, #940]	@ 0x3ac
 8001902:	460a      	mov	r2, r1
 8001904:	f8c7 23a8 	str.w	r2, [r7, #936]	@ 0x3a8
 8001908:	f8d7 23ac 	ldr.w	r2, [r7, #940]	@ 0x3ac
 800190c:	4413      	add	r3, r2
 800190e:	f8c7 33ac 	str.w	r3, [r7, #940]	@ 0x3ac
 8001912:	f04f 0000 	mov.w	r0, #0
 8001916:	f04f 0100 	mov.w	r1, #0
 800191a:	e9d7 45ea 	ldrd	r4, r5, [r7, #936]	@ 0x3a8
 800191e:	462b      	mov	r3, r5
 8001920:	0099      	lsls	r1, r3, #2
 8001922:	4623      	mov	r3, r4
 8001924:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 8001928:	4623      	mov	r3, r4
 800192a:	0098      	lsls	r0, r3, #2
 800192c:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001930:	f04f 0300 	mov.w	r3, #0
 8001934:	f7ff f9a8 	bl	8000c88 <__aeabi_uldivmod>
 8001938:	4602      	mov	r2, r0
 800193a:	460b      	mov	r3, r1
 800193c:	f06f 0002 	mvn.w	r0, #2
 8001940:	f04f 31ff 	mov.w	r1, #4294967295
 8001944:	1a80      	subs	r0, r0, r2
 8001946:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
 800194a:	eb61 0303 	sbc.w	r3, r1, r3
 800194e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001952:	4bb8      	ldr	r3, [pc, #736]	@ (8001c34 <Set_Random_Motion_Values+0x85c>)
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	461a      	mov	r2, r3
 8001958:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800195c:	4413      	add	r3, r2
 800195e:	461a      	mov	r2, r3
 8001960:	4bb4      	ldr	r3, [pc, #720]	@ (8001c34 <Set_Random_Motion_Values+0x85c>)
 8001962:	605a      	str	r2, [r3, #4]
    m_axes.AXIS_Z +=  (3  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 8001964:	f00b f914 	bl	800cb90 <rand>
 8001968:	4603      	mov	r3, r0
 800196a:	17da      	asrs	r2, r3, #31
 800196c:	f8c7 3288 	str.w	r3, [r7, #648]	@ 0x288
 8001970:	f8c7 228c 	str.w	r2, [r7, #652]	@ 0x28c
 8001974:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001978:	2200      	movs	r2, #0
 800197a:	f8c7 3280 	str.w	r3, [r7, #640]	@ 0x280
 800197e:	f8c7 2284 	str.w	r2, [r7, #644]	@ 0x284
 8001982:	e9d7 45a2 	ldrd	r4, r5, [r7, #648]	@ 0x288
 8001986:	462b      	mov	r3, r5
 8001988:	e9d7 89a0 	ldrd	r8, r9, [r7, #640]	@ 0x280
 800198c:	4642      	mov	r2, r8
 800198e:	fb02 f203 	mul.w	r2, r2, r3
 8001992:	464b      	mov	r3, r9
 8001994:	4621      	mov	r1, r4
 8001996:	fb01 f303 	mul.w	r3, r1, r3
 800199a:	4413      	add	r3, r2
 800199c:	4622      	mov	r2, r4
 800199e:	4641      	mov	r1, r8
 80019a0:	fba2 1201 	umull	r1, r2, r2, r1
 80019a4:	f8c7 23a4 	str.w	r2, [r7, #932]	@ 0x3a4
 80019a8:	460a      	mov	r2, r1
 80019aa:	f8c7 23a0 	str.w	r2, [r7, #928]	@ 0x3a0
 80019ae:	f8d7 23a4 	ldr.w	r2, [r7, #932]	@ 0x3a4
 80019b2:	4413      	add	r3, r2
 80019b4:	f8c7 33a4 	str.w	r3, [r7, #932]	@ 0x3a4
 80019b8:	e9d7 45e8 	ldrd	r4, r5, [r7, #928]	@ 0x3a0
 80019bc:	4622      	mov	r2, r4
 80019be:	462b      	mov	r3, r5
 80019c0:	f04f 0000 	mov.w	r0, #0
 80019c4:	f04f 0100 	mov.w	r1, #0
 80019c8:	0099      	lsls	r1, r3, #2
 80019ca:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80019ce:	0090      	lsls	r0, r2, #2
 80019d0:	4602      	mov	r2, r0
 80019d2:	460b      	mov	r3, r1
 80019d4:	4621      	mov	r1, r4
 80019d6:	1851      	adds	r1, r2, r1
 80019d8:	f8c7 1278 	str.w	r1, [r7, #632]	@ 0x278
 80019dc:	4629      	mov	r1, r5
 80019de:	eb43 0101 	adc.w	r1, r3, r1
 80019e2:	f8c7 127c 	str.w	r1, [r7, #636]	@ 0x27c
 80019e6:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80019ea:	f04f 0300 	mov.w	r3, #0
 80019ee:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	@ 0x278
 80019f2:	f7ff f949 	bl	8000c88 <__aeabi_uldivmod>
 80019f6:	4602      	mov	r2, r0
 80019f8:	460b      	mov	r3, r1
 80019fa:	1cd1      	adds	r1, r2, #3
 80019fc:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 8001a00:	f143 0300 	adc.w	r3, r3, #0
 8001a04:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001a08:	4b8a      	ldr	r3, [pc, #552]	@ (8001c34 <Set_Random_Motion_Values+0x85c>)
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001a12:	4413      	add	r3, r2
 8001a14:	461a      	mov	r2, r3
 8001a16:	4b87      	ldr	r3, [pc, #540]	@ (8001c34 <Set_Random_Motion_Values+0x85c>)
 8001a18:	609a      	str	r2, [r3, #8]

    q_axes.AXIS_X -= (100  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8001a1a:	f00b f8b9 	bl	800cb90 <rand>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	17da      	asrs	r2, r3, #31
 8001a22:	f8c7 3270 	str.w	r3, [r7, #624]	@ 0x270
 8001a26:	f8c7 2274 	str.w	r2, [r7, #628]	@ 0x274
 8001a2a:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f8c7 3268 	str.w	r3, [r7, #616]	@ 0x268
 8001a34:	f8c7 226c 	str.w	r2, [r7, #620]	@ 0x26c
 8001a38:	e9d7 459c 	ldrd	r4, r5, [r7, #624]	@ 0x270
 8001a3c:	462b      	mov	r3, r5
 8001a3e:	e9d7 899a 	ldrd	r8, r9, [r7, #616]	@ 0x268
 8001a42:	4642      	mov	r2, r8
 8001a44:	fb02 f203 	mul.w	r2, r2, r3
 8001a48:	464b      	mov	r3, r9
 8001a4a:	4621      	mov	r1, r4
 8001a4c:	fb01 f303 	mul.w	r3, r1, r3
 8001a50:	4413      	add	r3, r2
 8001a52:	4622      	mov	r2, r4
 8001a54:	4641      	mov	r1, r8
 8001a56:	fba2 1201 	umull	r1, r2, r2, r1
 8001a5a:	f8c7 239c 	str.w	r2, [r7, #924]	@ 0x39c
 8001a5e:	460a      	mov	r2, r1
 8001a60:	f8c7 2398 	str.w	r2, [r7, #920]	@ 0x398
 8001a64:	f8d7 239c 	ldr.w	r2, [r7, #924]	@ 0x39c
 8001a68:	4413      	add	r3, r2
 8001a6a:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
 8001a6e:	e9d7 45e6 	ldrd	r4, r5, [r7, #920]	@ 0x398
 8001a72:	4622      	mov	r2, r4
 8001a74:	462b      	mov	r3, r5
 8001a76:	1891      	adds	r1, r2, r2
 8001a78:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001a7a:	415b      	adcs	r3, r3
 8001a7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001a7e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001a82:	4621      	mov	r1, r4
 8001a84:	1851      	adds	r1, r2, r1
 8001a86:	f8c7 1260 	str.w	r1, [r7, #608]	@ 0x260
 8001a8a:	4629      	mov	r1, r5
 8001a8c:	eb43 0101 	adc.w	r1, r3, r1
 8001a90:	f8c7 1264 	str.w	r1, [r7, #612]	@ 0x264
 8001a94:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001a98:	f04f 0300 	mov.w	r3, #0
 8001a9c:	e9d7 0198 	ldrd	r0, r1, [r7, #608]	@ 0x260
 8001aa0:	f7ff f8f2 	bl	8000c88 <__aeabi_uldivmod>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	f112 0164 	adds.w	r1, r2, #100	@ 0x64
 8001aac:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 8001ab0:	f143 0300 	adc.w	r3, r3, #0
 8001ab4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001ab8:	4b5f      	ldr	r3, [pc, #380]	@ (8001c38 <Set_Random_Motion_Values+0x860>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	461a      	mov	r2, r3
 8001abe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	4b5c      	ldr	r3, [pc, #368]	@ (8001c38 <Set_Random_Motion_Values+0x860>)
 8001ac8:	601a      	str	r2, [r3, #0]
    q_axes.AXIS_Y += (100  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 8001aca:	f00b f861 	bl	800cb90 <rand>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	17da      	asrs	r2, r3, #31
 8001ad2:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
 8001ad6:	f8c7 225c 	str.w	r2, [r7, #604]	@ 0x25c
 8001ada:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
 8001ae4:	f8c7 2254 	str.w	r2, [r7, #596]	@ 0x254
 8001ae8:	e9d7 4596 	ldrd	r4, r5, [r7, #600]	@ 0x258
 8001aec:	462b      	mov	r3, r5
 8001aee:	e9d7 8994 	ldrd	r8, r9, [r7, #592]	@ 0x250
 8001af2:	4642      	mov	r2, r8
 8001af4:	fb02 f203 	mul.w	r2, r2, r3
 8001af8:	464b      	mov	r3, r9
 8001afa:	4621      	mov	r1, r4
 8001afc:	fb01 f303 	mul.w	r3, r1, r3
 8001b00:	4413      	add	r3, r2
 8001b02:	4622      	mov	r2, r4
 8001b04:	4641      	mov	r1, r8
 8001b06:	fba2 1201 	umull	r1, r2, r2, r1
 8001b0a:	f8c7 2394 	str.w	r2, [r7, #916]	@ 0x394
 8001b0e:	460a      	mov	r2, r1
 8001b10:	f8c7 2390 	str.w	r2, [r7, #912]	@ 0x390
 8001b14:	f8d7 2394 	ldr.w	r2, [r7, #916]	@ 0x394
 8001b18:	4413      	add	r3, r2
 8001b1a:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
 8001b1e:	e9d7 45e4 	ldrd	r4, r5, [r7, #912]	@ 0x390
 8001b22:	4622      	mov	r2, r4
 8001b24:	462b      	mov	r3, r5
 8001b26:	f04f 0000 	mov.w	r0, #0
 8001b2a:	f04f 0100 	mov.w	r1, #0
 8001b2e:	0099      	lsls	r1, r3, #2
 8001b30:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001b34:	0090      	lsls	r0, r2, #2
 8001b36:	4602      	mov	r2, r0
 8001b38:	460b      	mov	r3, r1
 8001b3a:	4621      	mov	r1, r4
 8001b3c:	1851      	adds	r1, r2, r1
 8001b3e:	f8c7 1248 	str.w	r1, [r7, #584]	@ 0x248
 8001b42:	4629      	mov	r1, r5
 8001b44:	eb43 0101 	adc.w	r1, r3, r1
 8001b48:	f8c7 124c 	str.w	r1, [r7, #588]	@ 0x24c
 8001b4c:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001b50:	f04f 0300 	mov.w	r3, #0
 8001b54:	e9d7 0192 	ldrd	r0, r1, [r7, #584]	@ 0x248
 8001b58:	f7ff f896 	bl	8000c88 <__aeabi_uldivmod>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	460b      	mov	r3, r1
 8001b60:	f112 0164 	adds.w	r1, r2, #100	@ 0x64
 8001b64:	67b9      	str	r1, [r7, #120]	@ 0x78
 8001b66:	f143 0300 	adc.w	r3, r3, #0
 8001b6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001b6c:	4b32      	ldr	r3, [pc, #200]	@ (8001c38 <Set_Random_Motion_Values+0x860>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	461a      	mov	r2, r3
 8001b72:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001b74:	4413      	add	r3, r2
 8001b76:	461a      	mov	r2, r3
 8001b78:	4b2f      	ldr	r3, [pc, #188]	@ (8001c38 <Set_Random_Motion_Values+0x860>)
 8001b7a:	605a      	str	r2, [r3, #4]
    q_axes.AXIS_Z -= (100  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8001b7c:	f00b f808 	bl	800cb90 <rand>
 8001b80:	4603      	mov	r3, r0
 8001b82:	17da      	asrs	r2, r3, #31
 8001b84:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
 8001b88:	f8c7 2244 	str.w	r2, [r7, #580]	@ 0x244
 8001b8c:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001b90:	2200      	movs	r2, #0
 8001b92:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
 8001b96:	f8c7 223c 	str.w	r2, [r7, #572]	@ 0x23c
 8001b9a:	e9d7 4590 	ldrd	r4, r5, [r7, #576]	@ 0x240
 8001b9e:	462b      	mov	r3, r5
 8001ba0:	e9d7 898e 	ldrd	r8, r9, [r7, #568]	@ 0x238
 8001ba4:	4642      	mov	r2, r8
 8001ba6:	fb02 f203 	mul.w	r2, r2, r3
 8001baa:	464b      	mov	r3, r9
 8001bac:	4621      	mov	r1, r4
 8001bae:	fb01 f303 	mul.w	r3, r1, r3
 8001bb2:	4413      	add	r3, r2
 8001bb4:	4622      	mov	r2, r4
 8001bb6:	4641      	mov	r1, r8
 8001bb8:	fba2 1201 	umull	r1, r2, r2, r1
 8001bbc:	f8c7 238c 	str.w	r2, [r7, #908]	@ 0x38c
 8001bc0:	460a      	mov	r2, r1
 8001bc2:	f8c7 2388 	str.w	r2, [r7, #904]	@ 0x388
 8001bc6:	f8d7 238c 	ldr.w	r2, [r7, #908]	@ 0x38c
 8001bca:	4413      	add	r3, r2
 8001bcc:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c
 8001bd0:	e9d7 45e2 	ldrd	r4, r5, [r7, #904]	@ 0x388
 8001bd4:	4622      	mov	r2, r4
 8001bd6:	462b      	mov	r3, r5
 8001bd8:	f04f 0000 	mov.w	r0, #0
 8001bdc:	f04f 0100 	mov.w	r1, #0
 8001be0:	00d9      	lsls	r1, r3, #3
 8001be2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001be6:	00d0      	lsls	r0, r2, #3
 8001be8:	4602      	mov	r2, r0
 8001bea:	460b      	mov	r3, r1
 8001bec:	4621      	mov	r1, r4
 8001bee:	1a51      	subs	r1, r2, r1
 8001bf0:	f8c7 1230 	str.w	r1, [r7, #560]	@ 0x230
 8001bf4:	4629      	mov	r1, r5
 8001bf6:	eb63 0301 	sbc.w	r3, r3, r1
 8001bfa:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
 8001bfe:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001c02:	f04f 0300 	mov.w	r3, #0
 8001c06:	e9d7 018c 	ldrd	r0, r1, [r7, #560]	@ 0x230
 8001c0a:	f7ff f83d 	bl	8000c88 <__aeabi_uldivmod>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	460b      	mov	r3, r1
 8001c12:	f112 0164 	adds.w	r1, r2, #100	@ 0x64
 8001c16:	6739      	str	r1, [r7, #112]	@ 0x70
 8001c18:	f143 0300 	adc.w	r3, r3, #0
 8001c1c:	677b      	str	r3, [r7, #116]	@ 0x74
 8001c1e:	4b06      	ldr	r3, [pc, #24]	@ (8001c38 <Set_Random_Motion_Values+0x860>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	461a      	mov	r2, r3
 8001c24:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	461a      	mov	r2, r3
 8001c2a:	4b03      	ldr	r3, [pc, #12]	@ (8001c38 <Set_Random_Motion_Values+0x860>)
 8001c2c:	609a      	str	r2, [r3, #8]
    q_axes.AXIS_X += (200 + ((uint64_t)rand()*7*cnt)/RAND_MAX);
    q_axes.AXIS_Y -= (150 + ((uint64_t)rand()*3*cnt)/RAND_MAX);
    q_axes.AXIS_Z += (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
  }

}
 8001c2e:	f000 bc37 	b.w	80024a0 <Set_Random_Motion_Values+0x10c8>
 8001c32:	bf00      	nop
 8001c34:	200007a8 	.word	0x200007a8
 8001c38:	200007b4 	.word	0x200007b4
    x_axes.AXIS_X += -(10  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8001c3c:	f00a ffa8 	bl	800cb90 <rand>
 8001c40:	4603      	mov	r3, r0
 8001c42:	17da      	asrs	r2, r3, #31
 8001c44:	f8c7 3228 	str.w	r3, [r7, #552]	@ 0x228
 8001c48:	f8c7 222c 	str.w	r2, [r7, #556]	@ 0x22c
 8001c4c:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001c50:	2200      	movs	r2, #0
 8001c52:	469a      	mov	sl, r3
 8001c54:	4693      	mov	fp, r2
 8001c56:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	fb0a f203 	mul.w	r2, sl, r3
 8001c60:	4603      	mov	r3, r0
 8001c62:	fb03 f30b 	mul.w	r3, r3, fp
 8001c66:	4413      	add	r3, r2
 8001c68:	4602      	mov	r2, r0
 8001c6a:	fba2 450a 	umull	r4, r5, r2, sl
 8001c6e:	442b      	add	r3, r5
 8001c70:	461d      	mov	r5, r3
 8001c72:	4622      	mov	r2, r4
 8001c74:	462b      	mov	r3, r5
 8001c76:	1891      	adds	r1, r2, r2
 8001c78:	6339      	str	r1, [r7, #48]	@ 0x30
 8001c7a:	415b      	adcs	r3, r3
 8001c7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c7e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001c82:	1911      	adds	r1, r2, r4
 8001c84:	f8c7 1220 	str.w	r1, [r7, #544]	@ 0x220
 8001c88:	416b      	adcs	r3, r5
 8001c8a:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
 8001c8e:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001c92:	f04f 0300 	mov.w	r3, #0
 8001c96:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 8001c9a:	f7fe fff5 	bl	8000c88 <__aeabi_uldivmod>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	f06f 0009 	mvn.w	r0, #9
 8001ca6:	f04f 31ff 	mov.w	r1, #4294967295
 8001caa:	1a80      	subs	r0, r0, r2
 8001cac:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128
 8001cb0:	eb61 0303 	sbc.w	r3, r1, r3
 8001cb4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8001cb8:	4beb      	ldr	r3, [pc, #940]	@ (8002068 <Set_Random_Motion_Values+0xc90>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001cc2:	4413      	add	r3, r2
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	4be8      	ldr	r3, [pc, #928]	@ (8002068 <Set_Random_Motion_Values+0xc90>)
 8001cc8:	601a      	str	r2, [r3, #0]
    x_axes.AXIS_Y +=  (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 8001cca:	f00a ff61 	bl	800cb90 <rand>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	17da      	asrs	r2, r3, #31
 8001cd2:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
 8001cd6:	f8c7 221c 	str.w	r2, [r7, #540]	@ 0x21c
 8001cda:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 8001ce4:	f8c7 2214 	str.w	r2, [r7, #532]	@ 0x214
 8001ce8:	e9d7 4586 	ldrd	r4, r5, [r7, #536]	@ 0x218
 8001cec:	462b      	mov	r3, r5
 8001cee:	e9d7 8984 	ldrd	r8, r9, [r7, #528]	@ 0x210
 8001cf2:	4642      	mov	r2, r8
 8001cf4:	fb02 f203 	mul.w	r2, r2, r3
 8001cf8:	464b      	mov	r3, r9
 8001cfa:	4621      	mov	r1, r4
 8001cfc:	fb01 f303 	mul.w	r3, r1, r3
 8001d00:	4413      	add	r3, r2
 8001d02:	4622      	mov	r2, r4
 8001d04:	4641      	mov	r1, r8
 8001d06:	fba2 1201 	umull	r1, r2, r2, r1
 8001d0a:	f8c7 2384 	str.w	r2, [r7, #900]	@ 0x384
 8001d0e:	460a      	mov	r2, r1
 8001d10:	f8c7 2380 	str.w	r2, [r7, #896]	@ 0x380
 8001d14:	f8d7 2384 	ldr.w	r2, [r7, #900]	@ 0x384
 8001d18:	4413      	add	r3, r2
 8001d1a:	f8c7 3384 	str.w	r3, [r7, #900]	@ 0x384
 8001d1e:	e9d7 45e0 	ldrd	r4, r5, [r7, #896]	@ 0x380
 8001d22:	4622      	mov	r2, r4
 8001d24:	462b      	mov	r3, r5
 8001d26:	f04f 0000 	mov.w	r0, #0
 8001d2a:	f04f 0100 	mov.w	r1, #0
 8001d2e:	0099      	lsls	r1, r3, #2
 8001d30:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001d34:	0090      	lsls	r0, r2, #2
 8001d36:	4602      	mov	r2, r0
 8001d38:	460b      	mov	r3, r1
 8001d3a:	4621      	mov	r1, r4
 8001d3c:	1851      	adds	r1, r2, r1
 8001d3e:	f8c7 1208 	str.w	r1, [r7, #520]	@ 0x208
 8001d42:	4629      	mov	r1, r5
 8001d44:	eb43 0101 	adc.w	r1, r3, r1
 8001d48:	f8c7 120c 	str.w	r1, [r7, #524]	@ 0x20c
 8001d4c:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001d50:	f04f 0300 	mov.w	r3, #0
 8001d54:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	@ 0x208
 8001d58:	f7fe ff96 	bl	8000c88 <__aeabi_uldivmod>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	460b      	mov	r3, r1
 8001d60:	f112 010a 	adds.w	r1, r2, #10
 8001d64:	f8c7 1120 	str.w	r1, [r7, #288]	@ 0x120
 8001d68:	f143 0300 	adc.w	r3, r3, #0
 8001d6c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001d70:	4bbd      	ldr	r3, [pc, #756]	@ (8002068 <Set_Random_Motion_Values+0xc90>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	461a      	mov	r2, r3
 8001d76:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001d7a:	4413      	add	r3, r2
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	4bba      	ldr	r3, [pc, #744]	@ (8002068 <Set_Random_Motion_Values+0xc90>)
 8001d80:	605a      	str	r2, [r3, #4]
    x_axes.AXIS_Z += -(10  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8001d82:	f00a ff05 	bl	800cb90 <rand>
 8001d86:	4603      	mov	r3, r0
 8001d88:	17da      	asrs	r2, r3, #31
 8001d8a:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
 8001d8e:	f8c7 2204 	str.w	r2, [r7, #516]	@ 0x204
 8001d92:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001d96:	2200      	movs	r2, #0
 8001d98:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
 8001d9c:	f8c7 21fc 	str.w	r2, [r7, #508]	@ 0x1fc
 8001da0:	e9d7 4580 	ldrd	r4, r5, [r7, #512]	@ 0x200
 8001da4:	462b      	mov	r3, r5
 8001da6:	e9d7 897e 	ldrd	r8, r9, [r7, #504]	@ 0x1f8
 8001daa:	4642      	mov	r2, r8
 8001dac:	fb02 f203 	mul.w	r2, r2, r3
 8001db0:	464b      	mov	r3, r9
 8001db2:	4621      	mov	r1, r4
 8001db4:	fb01 f303 	mul.w	r3, r1, r3
 8001db8:	4413      	add	r3, r2
 8001dba:	4622      	mov	r2, r4
 8001dbc:	4641      	mov	r1, r8
 8001dbe:	fba2 1201 	umull	r1, r2, r2, r1
 8001dc2:	f8c7 237c 	str.w	r2, [r7, #892]	@ 0x37c
 8001dc6:	460a      	mov	r2, r1
 8001dc8:	f8c7 2378 	str.w	r2, [r7, #888]	@ 0x378
 8001dcc:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
 8001dd0:	4413      	add	r3, r2
 8001dd2:	f8c7 337c 	str.w	r3, [r7, #892]	@ 0x37c
 8001dd6:	e9d7 45de 	ldrd	r4, r5, [r7, #888]	@ 0x378
 8001dda:	4622      	mov	r2, r4
 8001ddc:	462b      	mov	r3, r5
 8001dde:	f04f 0000 	mov.w	r0, #0
 8001de2:	f04f 0100 	mov.w	r1, #0
 8001de6:	00d9      	lsls	r1, r3, #3
 8001de8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001dec:	00d0      	lsls	r0, r2, #3
 8001dee:	4602      	mov	r2, r0
 8001df0:	460b      	mov	r3, r1
 8001df2:	4621      	mov	r1, r4
 8001df4:	1a51      	subs	r1, r2, r1
 8001df6:	f8c7 11f0 	str.w	r1, [r7, #496]	@ 0x1f0
 8001dfa:	4629      	mov	r1, r5
 8001dfc:	eb63 0301 	sbc.w	r3, r3, r1
 8001e00:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
 8001e04:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001e08:	f04f 0300 	mov.w	r3, #0
 8001e0c:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	@ 0x1f0
 8001e10:	f7fe ff3a 	bl	8000c88 <__aeabi_uldivmod>
 8001e14:	4602      	mov	r2, r0
 8001e16:	460b      	mov	r3, r1
 8001e18:	f06f 0009 	mvn.w	r0, #9
 8001e1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e20:	1a80      	subs	r0, r0, r2
 8001e22:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118
 8001e26:	eb61 0303 	sbc.w	r3, r1, r3
 8001e2a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001e2e:	4b8e      	ldr	r3, [pc, #568]	@ (8002068 <Set_Random_Motion_Values+0xc90>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	461a      	mov	r2, r3
 8001e34:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001e38:	4413      	add	r3, r2
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	4b8a      	ldr	r3, [pc, #552]	@ (8002068 <Set_Random_Motion_Values+0xc90>)
 8001e3e:	609a      	str	r2, [r3, #8]
    g_axes.AXIS_X += -(100 + ((uint64_t)rand()*2*cnt)/RAND_MAX);
 8001e40:	f00a fea6 	bl	800cb90 <rand>
 8001e44:	4603      	mov	r3, r0
 8001e46:	17da      	asrs	r2, r3, #31
 8001e48:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8001e4c:	f8c7 21ec 	str.w	r2, [r7, #492]	@ 0x1ec
 8001e50:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001e54:	2200      	movs	r2, #0
 8001e56:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001e5a:	f8c7 21e4 	str.w	r2, [r7, #484]	@ 0x1e4
 8001e5e:	e9d7 457a 	ldrd	r4, r5, [r7, #488]	@ 0x1e8
 8001e62:	462b      	mov	r3, r5
 8001e64:	e9d7 8978 	ldrd	r8, r9, [r7, #480]	@ 0x1e0
 8001e68:	4642      	mov	r2, r8
 8001e6a:	fb02 f203 	mul.w	r2, r2, r3
 8001e6e:	464b      	mov	r3, r9
 8001e70:	4621      	mov	r1, r4
 8001e72:	fb01 f303 	mul.w	r3, r1, r3
 8001e76:	4413      	add	r3, r2
 8001e78:	4622      	mov	r2, r4
 8001e7a:	4641      	mov	r1, r8
 8001e7c:	fba2 1201 	umull	r1, r2, r2, r1
 8001e80:	f8c7 2374 	str.w	r2, [r7, #884]	@ 0x374
 8001e84:	460a      	mov	r2, r1
 8001e86:	f8c7 2370 	str.w	r2, [r7, #880]	@ 0x370
 8001e8a:	f8d7 2374 	ldr.w	r2, [r7, #884]	@ 0x374
 8001e8e:	4413      	add	r3, r2
 8001e90:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374
 8001e94:	e9d7 12dc 	ldrd	r1, r2, [r7, #880]	@ 0x370
 8001e98:	460b      	mov	r3, r1
 8001e9a:	18db      	adds	r3, r3, r3
 8001e9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	eb42 0303 	adc.w	r3, r2, r3
 8001ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ea6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001eaa:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001eae:	f04f 0300 	mov.w	r3, #0
 8001eb2:	f7fe fee9 	bl	8000c88 <__aeabi_uldivmod>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	460b      	mov	r3, r1
 8001eba:	f06f 0063 	mvn.w	r0, #99	@ 0x63
 8001ebe:	f04f 31ff 	mov.w	r1, #4294967295
 8001ec2:	1a80      	subs	r0, r0, r2
 8001ec4:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
 8001ec8:	eb61 0303 	sbc.w	r3, r1, r3
 8001ecc:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8001ed0:	4b66      	ldr	r3, [pc, #408]	@ (800206c <Set_Random_Motion_Values+0xc94>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001eda:	4413      	add	r3, r2
 8001edc:	461a      	mov	r2, r3
 8001ede:	4b63      	ldr	r3, [pc, #396]	@ (800206c <Set_Random_Motion_Values+0xc94>)
 8001ee0:	601a      	str	r2, [r3, #0]
    g_axes.AXIS_Y +=  (100 + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 8001ee2:	f00a fe55 	bl	800cb90 <rand>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	17da      	asrs	r2, r3, #31
 8001eea:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 8001eee:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8001ef2:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8001efc:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
 8001f00:	e9d7 4576 	ldrd	r4, r5, [r7, #472]	@ 0x1d8
 8001f04:	462b      	mov	r3, r5
 8001f06:	e9d7 8974 	ldrd	r8, r9, [r7, #464]	@ 0x1d0
 8001f0a:	4642      	mov	r2, r8
 8001f0c:	fb02 f203 	mul.w	r2, r2, r3
 8001f10:	464b      	mov	r3, r9
 8001f12:	4621      	mov	r1, r4
 8001f14:	fb01 f303 	mul.w	r3, r1, r3
 8001f18:	4413      	add	r3, r2
 8001f1a:	4622      	mov	r2, r4
 8001f1c:	4641      	mov	r1, r8
 8001f1e:	fba2 1201 	umull	r1, r2, r2, r1
 8001f22:	f8c7 236c 	str.w	r2, [r7, #876]	@ 0x36c
 8001f26:	460a      	mov	r2, r1
 8001f28:	f8c7 2368 	str.w	r2, [r7, #872]	@ 0x368
 8001f2c:	f8d7 236c 	ldr.w	r2, [r7, #876]	@ 0x36c
 8001f30:	4413      	add	r3, r2
 8001f32:	f8c7 336c 	str.w	r3, [r7, #876]	@ 0x36c
 8001f36:	f04f 0000 	mov.w	r0, #0
 8001f3a:	f04f 0100 	mov.w	r1, #0
 8001f3e:	e9d7 45da 	ldrd	r4, r5, [r7, #872]	@ 0x368
 8001f42:	462b      	mov	r3, r5
 8001f44:	0099      	lsls	r1, r3, #2
 8001f46:	4623      	mov	r3, r4
 8001f48:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 8001f4c:	4623      	mov	r3, r4
 8001f4e:	0098      	lsls	r0, r3, #2
 8001f50:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001f54:	f04f 0300 	mov.w	r3, #0
 8001f58:	f7fe fe96 	bl	8000c88 <__aeabi_uldivmod>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	460b      	mov	r3, r1
 8001f60:	f112 0164 	adds.w	r1, r2, #100	@ 0x64
 8001f64:	f8c7 1108 	str.w	r1, [r7, #264]	@ 0x108
 8001f68:	f143 0300 	adc.w	r3, r3, #0
 8001f6c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8001f70:	4b3e      	ldr	r3, [pc, #248]	@ (800206c <Set_Random_Motion_Values+0xc94>)
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	461a      	mov	r2, r3
 8001f76:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001f7a:	4413      	add	r3, r2
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	4b3b      	ldr	r3, [pc, #236]	@ (800206c <Set_Random_Motion_Values+0xc94>)
 8001f80:	605a      	str	r2, [r3, #4]
    g_axes.AXIS_Z += -(100 + ((uint64_t)rand()*6*cnt)/RAND_MAX);
 8001f82:	f00a fe05 	bl	800cb90 <rand>
 8001f86:	4603      	mov	r3, r0
 8001f88:	17da      	asrs	r2, r3, #31
 8001f8a:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8001f8e:	f8c7 21cc 	str.w	r2, [r7, #460]	@ 0x1cc
 8001f92:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001f96:	2200      	movs	r2, #0
 8001f98:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001f9c:	f8c7 21c4 	str.w	r2, [r7, #452]	@ 0x1c4
 8001fa0:	e9d7 4572 	ldrd	r4, r5, [r7, #456]	@ 0x1c8
 8001fa4:	462b      	mov	r3, r5
 8001fa6:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	@ 0x1c0
 8001faa:	4642      	mov	r2, r8
 8001fac:	fb02 f203 	mul.w	r2, r2, r3
 8001fb0:	464b      	mov	r3, r9
 8001fb2:	4621      	mov	r1, r4
 8001fb4:	fb01 f303 	mul.w	r3, r1, r3
 8001fb8:	4413      	add	r3, r2
 8001fba:	4622      	mov	r2, r4
 8001fbc:	4641      	mov	r1, r8
 8001fbe:	fba2 1201 	umull	r1, r2, r2, r1
 8001fc2:	f8c7 2364 	str.w	r2, [r7, #868]	@ 0x364
 8001fc6:	460a      	mov	r2, r1
 8001fc8:	f8c7 2360 	str.w	r2, [r7, #864]	@ 0x360
 8001fcc:	f8d7 2364 	ldr.w	r2, [r7, #868]	@ 0x364
 8001fd0:	4413      	add	r3, r2
 8001fd2:	f8c7 3364 	str.w	r3, [r7, #868]	@ 0x364
 8001fd6:	e9d7 45d8 	ldrd	r4, r5, [r7, #864]	@ 0x360
 8001fda:	4622      	mov	r2, r4
 8001fdc:	462b      	mov	r3, r5
 8001fde:	1891      	adds	r1, r2, r2
 8001fe0:	6239      	str	r1, [r7, #32]
 8001fe2:	415b      	adcs	r3, r3
 8001fe4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fe6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001fea:	4621      	mov	r1, r4
 8001fec:	1851      	adds	r1, r2, r1
 8001fee:	61b9      	str	r1, [r7, #24]
 8001ff0:	4629      	mov	r1, r5
 8001ff2:	eb43 0101 	adc.w	r1, r3, r1
 8001ff6:	61f9      	str	r1, [r7, #28]
 8001ff8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	18db      	adds	r3, r3, r3
 8002000:	613b      	str	r3, [r7, #16]
 8002002:	4613      	mov	r3, r2
 8002004:	eb42 0303 	adc.w	r3, r2, r3
 8002008:	617b      	str	r3, [r7, #20]
 800200a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800200e:	4618      	mov	r0, r3
 8002010:	4621      	mov	r1, r4
 8002012:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8002016:	f04f 0300 	mov.w	r3, #0
 800201a:	f7fe fe35 	bl	8000c88 <__aeabi_uldivmod>
 800201e:	4602      	mov	r2, r0
 8002020:	460b      	mov	r3, r1
 8002022:	f06f 0063 	mvn.w	r0, #99	@ 0x63
 8002026:	f04f 31ff 	mov.w	r1, #4294967295
 800202a:	1a80      	subs	r0, r0, r2
 800202c:	f8c7 0100 	str.w	r0, [r7, #256]	@ 0x100
 8002030:	eb61 0303 	sbc.w	r3, r1, r3
 8002034:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002038:	4b0c      	ldr	r3, [pc, #48]	@ (800206c <Set_Random_Motion_Values+0xc94>)
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	461a      	mov	r2, r3
 800203e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8002042:	4413      	add	r3, r2
 8002044:	461a      	mov	r2, r3
 8002046:	4b09      	ldr	r3, [pc, #36]	@ (800206c <Set_Random_Motion_Values+0xc94>)
 8002048:	609a      	str	r2, [r3, #8]
    m_axes.AXIS_X += -(3  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 800204a:	f00a fda1 	bl	800cb90 <rand>
 800204e:	4603      	mov	r3, r0
 8002050:	17da      	asrs	r2, r3, #31
 8002052:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8002056:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 800205a:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 800205e:	2200      	movs	r2, #0
 8002060:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 8002064:	e004      	b.n	8002070 <Set_Random_Motion_Values+0xc98>
 8002066:	bf00      	nop
 8002068:	20000790 	.word	0x20000790
 800206c:	2000079c 	.word	0x2000079c
 8002070:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 8002074:	e9d7 456e 	ldrd	r4, r5, [r7, #440]	@ 0x1b8
 8002078:	462b      	mov	r3, r5
 800207a:	e9d7 896c 	ldrd	r8, r9, [r7, #432]	@ 0x1b0
 800207e:	4642      	mov	r2, r8
 8002080:	fb02 f203 	mul.w	r2, r2, r3
 8002084:	464b      	mov	r3, r9
 8002086:	4621      	mov	r1, r4
 8002088:	fb01 f303 	mul.w	r3, r1, r3
 800208c:	4413      	add	r3, r2
 800208e:	4622      	mov	r2, r4
 8002090:	4641      	mov	r1, r8
 8002092:	fba2 1201 	umull	r1, r2, r2, r1
 8002096:	f8c7 235c 	str.w	r2, [r7, #860]	@ 0x35c
 800209a:	460a      	mov	r2, r1
 800209c:	f8c7 2358 	str.w	r2, [r7, #856]	@ 0x358
 80020a0:	f8d7 235c 	ldr.w	r2, [r7, #860]	@ 0x35c
 80020a4:	4413      	add	r3, r2
 80020a6:	f8c7 335c 	str.w	r3, [r7, #860]	@ 0x35c
 80020aa:	e9d7 45d6 	ldrd	r4, r5, [r7, #856]	@ 0x358
 80020ae:	4622      	mov	r2, r4
 80020b0:	462b      	mov	r3, r5
 80020b2:	f04f 0000 	mov.w	r0, #0
 80020b6:	f04f 0100 	mov.w	r1, #0
 80020ba:	00d9      	lsls	r1, r3, #3
 80020bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80020c0:	00d0      	lsls	r0, r2, #3
 80020c2:	4602      	mov	r2, r0
 80020c4:	460b      	mov	r3, r1
 80020c6:	4621      	mov	r1, r4
 80020c8:	1a51      	subs	r1, r2, r1
 80020ca:	f8c7 11a8 	str.w	r1, [r7, #424]	@ 0x1a8
 80020ce:	4629      	mov	r1, r5
 80020d0:	eb63 0301 	sbc.w	r3, r3, r1
 80020d4:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 80020d8:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80020dc:	f04f 0300 	mov.w	r3, #0
 80020e0:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	@ 0x1a8
 80020e4:	f7fe fdd0 	bl	8000c88 <__aeabi_uldivmod>
 80020e8:	4602      	mov	r2, r0
 80020ea:	460b      	mov	r3, r1
 80020ec:	f06f 0002 	mvn.w	r0, #2
 80020f0:	f04f 31ff 	mov.w	r1, #4294967295
 80020f4:	1a80      	subs	r0, r0, r2
 80020f6:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
 80020fa:	eb61 0303 	sbc.w	r3, r1, r3
 80020fe:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002102:	4bea      	ldr	r3, [pc, #936]	@ (80024ac <Set_Random_Motion_Values+0x10d4>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	461a      	mov	r2, r3
 8002108:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800210c:	4413      	add	r3, r2
 800210e:	461a      	mov	r2, r3
 8002110:	4be6      	ldr	r3, [pc, #920]	@ (80024ac <Set_Random_Motion_Values+0x10d4>)
 8002112:	601a      	str	r2, [r3, #0]
    m_axes.AXIS_Y +=  (3  + ((uint64_t)rand()*9*cnt)/RAND_MAX);
 8002114:	f00a fd3c 	bl	800cb90 <rand>
 8002118:	4603      	mov	r3, r0
 800211a:	17da      	asrs	r2, r3, #31
 800211c:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002120:	f8c7 21a4 	str.w	r2, [r7, #420]	@ 0x1a4
 8002124:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8002128:	2200      	movs	r2, #0
 800212a:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 800212e:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8002132:	e9d7 4568 	ldrd	r4, r5, [r7, #416]	@ 0x1a0
 8002136:	462b      	mov	r3, r5
 8002138:	e9d7 8966 	ldrd	r8, r9, [r7, #408]	@ 0x198
 800213c:	4642      	mov	r2, r8
 800213e:	fb02 f203 	mul.w	r2, r2, r3
 8002142:	464b      	mov	r3, r9
 8002144:	4621      	mov	r1, r4
 8002146:	fb01 f303 	mul.w	r3, r1, r3
 800214a:	4413      	add	r3, r2
 800214c:	4622      	mov	r2, r4
 800214e:	4641      	mov	r1, r8
 8002150:	fba2 1201 	umull	r1, r2, r2, r1
 8002154:	f8c7 2354 	str.w	r2, [r7, #852]	@ 0x354
 8002158:	460a      	mov	r2, r1
 800215a:	f8c7 2350 	str.w	r2, [r7, #848]	@ 0x350
 800215e:	f8d7 2354 	ldr.w	r2, [r7, #852]	@ 0x354
 8002162:	4413      	add	r3, r2
 8002164:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8002168:	e9d7 45d4 	ldrd	r4, r5, [r7, #848]	@ 0x350
 800216c:	4622      	mov	r2, r4
 800216e:	462b      	mov	r3, r5
 8002170:	f04f 0000 	mov.w	r0, #0
 8002174:	f04f 0100 	mov.w	r1, #0
 8002178:	00d9      	lsls	r1, r3, #3
 800217a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800217e:	00d0      	lsls	r0, r2, #3
 8002180:	4602      	mov	r2, r0
 8002182:	460b      	mov	r3, r1
 8002184:	4621      	mov	r1, r4
 8002186:	1851      	adds	r1, r2, r1
 8002188:	f8c7 1190 	str.w	r1, [r7, #400]	@ 0x190
 800218c:	4629      	mov	r1, r5
 800218e:	eb43 0101 	adc.w	r1, r3, r1
 8002192:	f8c7 1194 	str.w	r1, [r7, #404]	@ 0x194
 8002196:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800219a:	f04f 0300 	mov.w	r3, #0
 800219e:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 80021a2:	f7fe fd71 	bl	8000c88 <__aeabi_uldivmod>
 80021a6:	4602      	mov	r2, r0
 80021a8:	460b      	mov	r3, r1
 80021aa:	1cd1      	adds	r1, r2, #3
 80021ac:	f8c7 10f0 	str.w	r1, [r7, #240]	@ 0xf0
 80021b0:	f143 0300 	adc.w	r3, r3, #0
 80021b4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80021b8:	4bbc      	ldr	r3, [pc, #752]	@ (80024ac <Set_Random_Motion_Values+0x10d4>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	461a      	mov	r2, r3
 80021be:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80021c2:	4413      	add	r3, r2
 80021c4:	461a      	mov	r2, r3
 80021c6:	4bb9      	ldr	r3, [pc, #740]	@ (80024ac <Set_Random_Motion_Values+0x10d4>)
 80021c8:	605a      	str	r2, [r3, #4]
    m_axes.AXIS_Z += -(3  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 80021ca:	f00a fce1 	bl	800cb90 <rand>
 80021ce:	4603      	mov	r3, r0
 80021d0:	17da      	asrs	r2, r3, #31
 80021d2:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 80021d6:	f8c7 218c 	str.w	r2, [r7, #396]	@ 0x18c
 80021da:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 80021de:	2200      	movs	r2, #0
 80021e0:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80021e4:	f8c7 2184 	str.w	r2, [r7, #388]	@ 0x184
 80021e8:	e9d7 4562 	ldrd	r4, r5, [r7, #392]	@ 0x188
 80021ec:	462b      	mov	r3, r5
 80021ee:	e9d7 8960 	ldrd	r8, r9, [r7, #384]	@ 0x180
 80021f2:	4642      	mov	r2, r8
 80021f4:	fb02 f203 	mul.w	r2, r2, r3
 80021f8:	464b      	mov	r3, r9
 80021fa:	4621      	mov	r1, r4
 80021fc:	fb01 f303 	mul.w	r3, r1, r3
 8002200:	4413      	add	r3, r2
 8002202:	4622      	mov	r2, r4
 8002204:	4641      	mov	r1, r8
 8002206:	fba2 1201 	umull	r1, r2, r2, r1
 800220a:	f8c7 234c 	str.w	r2, [r7, #844]	@ 0x34c
 800220e:	460a      	mov	r2, r1
 8002210:	f8c7 2348 	str.w	r2, [r7, #840]	@ 0x348
 8002214:	f8d7 234c 	ldr.w	r2, [r7, #844]	@ 0x34c
 8002218:	4413      	add	r3, r2
 800221a:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
 800221e:	e9d7 45d2 	ldrd	r4, r5, [r7, #840]	@ 0x348
 8002222:	4622      	mov	r2, r4
 8002224:	462b      	mov	r3, r5
 8002226:	1891      	adds	r1, r2, r2
 8002228:	60b9      	str	r1, [r7, #8]
 800222a:	415b      	adcs	r3, r3
 800222c:	60fb      	str	r3, [r7, #12]
 800222e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002232:	4621      	mov	r1, r4
 8002234:	1851      	adds	r1, r2, r1
 8002236:	f8c7 1178 	str.w	r1, [r7, #376]	@ 0x178
 800223a:	4629      	mov	r1, r5
 800223c:	eb43 0101 	adc.w	r1, r3, r1
 8002240:	f8c7 117c 	str.w	r1, [r7, #380]	@ 0x17c
 8002244:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8002248:	f04f 0300 	mov.w	r3, #0
 800224c:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	@ 0x178
 8002250:	f7fe fd1a 	bl	8000c88 <__aeabi_uldivmod>
 8002254:	4602      	mov	r2, r0
 8002256:	460b      	mov	r3, r1
 8002258:	f06f 0002 	mvn.w	r0, #2
 800225c:	f04f 31ff 	mov.w	r1, #4294967295
 8002260:	1a80      	subs	r0, r0, r2
 8002262:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
 8002266:	eb61 0303 	sbc.w	r3, r1, r3
 800226a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800226e:	4b8f      	ldr	r3, [pc, #572]	@ (80024ac <Set_Random_Motion_Values+0x10d4>)
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	461a      	mov	r2, r3
 8002274:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002278:	4413      	add	r3, r2
 800227a:	461a      	mov	r2, r3
 800227c:	4b8b      	ldr	r3, [pc, #556]	@ (80024ac <Set_Random_Motion_Values+0x10d4>)
 800227e:	609a      	str	r2, [r3, #8]
    q_axes.AXIS_X += (200 + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8002280:	f00a fc86 	bl	800cb90 <rand>
 8002284:	4603      	mov	r3, r0
 8002286:	17da      	asrs	r2, r3, #31
 8002288:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 800228c:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
 8002290:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8002294:	2200      	movs	r2, #0
 8002296:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 800229a:	f8c7 216c 	str.w	r2, [r7, #364]	@ 0x16c
 800229e:	e9d7 455c 	ldrd	r4, r5, [r7, #368]	@ 0x170
 80022a2:	462b      	mov	r3, r5
 80022a4:	e9d7 895a 	ldrd	r8, r9, [r7, #360]	@ 0x168
 80022a8:	4642      	mov	r2, r8
 80022aa:	fb02 f203 	mul.w	r2, r2, r3
 80022ae:	464b      	mov	r3, r9
 80022b0:	4621      	mov	r1, r4
 80022b2:	fb01 f303 	mul.w	r3, r1, r3
 80022b6:	4413      	add	r3, r2
 80022b8:	4622      	mov	r2, r4
 80022ba:	4641      	mov	r1, r8
 80022bc:	fba2 1201 	umull	r1, r2, r2, r1
 80022c0:	f8c7 2344 	str.w	r2, [r7, #836]	@ 0x344
 80022c4:	460a      	mov	r2, r1
 80022c6:	f8c7 2340 	str.w	r2, [r7, #832]	@ 0x340
 80022ca:	f8d7 2344 	ldr.w	r2, [r7, #836]	@ 0x344
 80022ce:	4413      	add	r3, r2
 80022d0:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
 80022d4:	e9d7 45d0 	ldrd	r4, r5, [r7, #832]	@ 0x340
 80022d8:	4622      	mov	r2, r4
 80022da:	462b      	mov	r3, r5
 80022dc:	f04f 0000 	mov.w	r0, #0
 80022e0:	f04f 0100 	mov.w	r1, #0
 80022e4:	00d9      	lsls	r1, r3, #3
 80022e6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80022ea:	00d0      	lsls	r0, r2, #3
 80022ec:	4602      	mov	r2, r0
 80022ee:	460b      	mov	r3, r1
 80022f0:	4621      	mov	r1, r4
 80022f2:	1a51      	subs	r1, r2, r1
 80022f4:	f8c7 1160 	str.w	r1, [r7, #352]	@ 0x160
 80022f8:	4629      	mov	r1, r5
 80022fa:	eb63 0301 	sbc.w	r3, r3, r1
 80022fe:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8002302:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8002306:	f04f 0300 	mov.w	r3, #0
 800230a:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	@ 0x160
 800230e:	f7fe fcbb 	bl	8000c88 <__aeabi_uldivmod>
 8002312:	4602      	mov	r2, r0
 8002314:	460b      	mov	r3, r1
 8002316:	f112 01c8 	adds.w	r1, r2, #200	@ 0xc8
 800231a:	f8c7 10e0 	str.w	r1, [r7, #224]	@ 0xe0
 800231e:	f143 0300 	adc.w	r3, r3, #0
 8002322:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002326:	4b62      	ldr	r3, [pc, #392]	@ (80024b0 <Set_Random_Motion_Values+0x10d8>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	461a      	mov	r2, r3
 800232c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002330:	4413      	add	r3, r2
 8002332:	461a      	mov	r2, r3
 8002334:	4b5e      	ldr	r3, [pc, #376]	@ (80024b0 <Set_Random_Motion_Values+0x10d8>)
 8002336:	601a      	str	r2, [r3, #0]
    q_axes.AXIS_Y -= (150 + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8002338:	f00a fc2a 	bl	800cb90 <rand>
 800233c:	4603      	mov	r3, r0
 800233e:	17da      	asrs	r2, r3, #31
 8002340:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8002344:	f8c7 215c 	str.w	r2, [r7, #348]	@ 0x15c
 8002348:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 800234c:	2200      	movs	r2, #0
 800234e:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002352:	f8c7 2154 	str.w	r2, [r7, #340]	@ 0x154
 8002356:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	@ 0x158
 800235a:	462b      	mov	r3, r5
 800235c:	e9d7 8954 	ldrd	r8, r9, [r7, #336]	@ 0x150
 8002360:	4642      	mov	r2, r8
 8002362:	fb02 f203 	mul.w	r2, r2, r3
 8002366:	464b      	mov	r3, r9
 8002368:	4621      	mov	r1, r4
 800236a:	fb01 f303 	mul.w	r3, r1, r3
 800236e:	4413      	add	r3, r2
 8002370:	4622      	mov	r2, r4
 8002372:	4641      	mov	r1, r8
 8002374:	fba2 1201 	umull	r1, r2, r2, r1
 8002378:	f8c7 233c 	str.w	r2, [r7, #828]	@ 0x33c
 800237c:	460a      	mov	r2, r1
 800237e:	f8c7 2338 	str.w	r2, [r7, #824]	@ 0x338
 8002382:	f8d7 233c 	ldr.w	r2, [r7, #828]	@ 0x33c
 8002386:	4413      	add	r3, r2
 8002388:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 800238c:	e9d7 45ce 	ldrd	r4, r5, [r7, #824]	@ 0x338
 8002390:	4622      	mov	r2, r4
 8002392:	462b      	mov	r3, r5
 8002394:	1891      	adds	r1, r2, r2
 8002396:	6039      	str	r1, [r7, #0]
 8002398:	415b      	adcs	r3, r3
 800239a:	607b      	str	r3, [r7, #4]
 800239c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80023a0:	4621      	mov	r1, r4
 80023a2:	1851      	adds	r1, r2, r1
 80023a4:	f8c7 1148 	str.w	r1, [r7, #328]	@ 0x148
 80023a8:	4629      	mov	r1, r5
 80023aa:	eb43 0101 	adc.w	r1, r3, r1
 80023ae:	f8c7 114c 	str.w	r1, [r7, #332]	@ 0x14c
 80023b2:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80023b6:	f04f 0300 	mov.w	r3, #0
 80023ba:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 80023be:	f7fe fc63 	bl	8000c88 <__aeabi_uldivmod>
 80023c2:	4602      	mov	r2, r0
 80023c4:	460b      	mov	r3, r1
 80023c6:	f112 0196 	adds.w	r1, r2, #150	@ 0x96
 80023ca:	f8c7 10d8 	str.w	r1, [r7, #216]	@ 0xd8
 80023ce:	f143 0300 	adc.w	r3, r3, #0
 80023d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80023d6:	4b36      	ldr	r3, [pc, #216]	@ (80024b0 <Set_Random_Motion_Values+0x10d8>)
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	461a      	mov	r2, r3
 80023dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	461a      	mov	r2, r3
 80023e4:	4b32      	ldr	r3, [pc, #200]	@ (80024b0 <Set_Random_Motion_Values+0x10d8>)
 80023e6:	605a      	str	r2, [r3, #4]
    q_axes.AXIS_Z += (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 80023e8:	f00a fbd2 	bl	800cb90 <rand>
 80023ec:	4603      	mov	r3, r0
 80023ee:	17da      	asrs	r2, r3, #31
 80023f0:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 80023f4:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
 80023f8:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 80023fc:	2200      	movs	r2, #0
 80023fe:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8002402:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 8002406:	e9d7 4550 	ldrd	r4, r5, [r7, #320]	@ 0x140
 800240a:	462b      	mov	r3, r5
 800240c:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	@ 0x138
 8002410:	4642      	mov	r2, r8
 8002412:	fb02 f203 	mul.w	r2, r2, r3
 8002416:	464b      	mov	r3, r9
 8002418:	4621      	mov	r1, r4
 800241a:	fb01 f303 	mul.w	r3, r1, r3
 800241e:	4413      	add	r3, r2
 8002420:	4622      	mov	r2, r4
 8002422:	4641      	mov	r1, r8
 8002424:	fba2 1201 	umull	r1, r2, r2, r1
 8002428:	f8c7 2334 	str.w	r2, [r7, #820]	@ 0x334
 800242c:	460a      	mov	r2, r1
 800242e:	f8c7 2330 	str.w	r2, [r7, #816]	@ 0x330
 8002432:	f8d7 2334 	ldr.w	r2, [r7, #820]	@ 0x334
 8002436:	4413      	add	r3, r2
 8002438:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
 800243c:	e9d7 45cc 	ldrd	r4, r5, [r7, #816]	@ 0x330
 8002440:	4622      	mov	r2, r4
 8002442:	462b      	mov	r3, r5
 8002444:	f04f 0000 	mov.w	r0, #0
 8002448:	f04f 0100 	mov.w	r1, #0
 800244c:	0099      	lsls	r1, r3, #2
 800244e:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002452:	0090      	lsls	r0, r2, #2
 8002454:	4602      	mov	r2, r0
 8002456:	460b      	mov	r3, r1
 8002458:	4621      	mov	r1, r4
 800245a:	1851      	adds	r1, r2, r1
 800245c:	f8c7 1130 	str.w	r1, [r7, #304]	@ 0x130
 8002460:	4629      	mov	r1, r5
 8002462:	eb43 0101 	adc.w	r1, r3, r1
 8002466:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 800246a:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800246e:	f04f 0300 	mov.w	r3, #0
 8002472:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	@ 0x130
 8002476:	f7fe fc07 	bl	8000c88 <__aeabi_uldivmod>
 800247a:	4602      	mov	r2, r0
 800247c:	460b      	mov	r3, r1
 800247e:	f112 010a 	adds.w	r1, r2, #10
 8002482:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 8002486:	f143 0300 	adc.w	r3, r3, #0
 800248a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800248e:	4b08      	ldr	r3, [pc, #32]	@ (80024b0 <Set_Random_Motion_Values+0x10d8>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	461a      	mov	r2, r3
 8002494:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002498:	4413      	add	r3, r2
 800249a:	461a      	mov	r2, r3
 800249c:	4b04      	ldr	r3, [pc, #16]	@ (80024b0 <Set_Random_Motion_Values+0x10d8>)
 800249e:	609a      	str	r2, [r3, #8]
}
 80024a0:	bf00      	nop
 80024a2:	f507 777a 	add.w	r7, r7, #1000	@ 0x3e8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024ac:	200007a8 	.word	0x200007a8
 80024b0:	200007b4 	.word	0x200007b4

080024b4 <Reset_Motion_Values>:
 * @brief  Reset values for all motion sensor data
 * @param  None
 * @retval None
 */
static void Reset_Motion_Values(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  x_axes.AXIS_X = (x_axes.AXIS_X)%2000 == 0 ? -x_axes.AXIS_X : 10;
 80024b8:	4b6e      	ldr	r3, [pc, #440]	@ (8002674 <Reset_Motion_Values+0x1c0>)
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	4b6e      	ldr	r3, [pc, #440]	@ (8002678 <Reset_Motion_Values+0x1c4>)
 80024be:	fb83 1302 	smull	r1, r3, r3, r2
 80024c2:	11d9      	asrs	r1, r3, #7
 80024c4:	17d3      	asrs	r3, r2, #31
 80024c6:	1acb      	subs	r3, r1, r3
 80024c8:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80024cc:	fb01 f303 	mul.w	r3, r1, r3
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d103      	bne.n	80024de <Reset_Motion_Values+0x2a>
 80024d6:	4b67      	ldr	r3, [pc, #412]	@ (8002674 <Reset_Motion_Values+0x1c0>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	425b      	negs	r3, r3
 80024dc:	e000      	b.n	80024e0 <Reset_Motion_Values+0x2c>
 80024de:	230a      	movs	r3, #10
 80024e0:	4a64      	ldr	r2, [pc, #400]	@ (8002674 <Reset_Motion_Values+0x1c0>)
 80024e2:	6013      	str	r3, [r2, #0]
  x_axes.AXIS_Y = (x_axes.AXIS_Y)%2000 == 0 ? -x_axes.AXIS_Y : -10;
 80024e4:	4b63      	ldr	r3, [pc, #396]	@ (8002674 <Reset_Motion_Values+0x1c0>)
 80024e6:	685a      	ldr	r2, [r3, #4]
 80024e8:	4b63      	ldr	r3, [pc, #396]	@ (8002678 <Reset_Motion_Values+0x1c4>)
 80024ea:	fb83 1302 	smull	r1, r3, r3, r2
 80024ee:	11d9      	asrs	r1, r3, #7
 80024f0:	17d3      	asrs	r3, r2, #31
 80024f2:	1acb      	subs	r3, r1, r3
 80024f4:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80024f8:	fb01 f303 	mul.w	r3, r1, r3
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d103      	bne.n	800250a <Reset_Motion_Values+0x56>
 8002502:	4b5c      	ldr	r3, [pc, #368]	@ (8002674 <Reset_Motion_Values+0x1c0>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	425b      	negs	r3, r3
 8002508:	e001      	b.n	800250e <Reset_Motion_Values+0x5a>
 800250a:	f06f 0309 	mvn.w	r3, #9
 800250e:	4a59      	ldr	r2, [pc, #356]	@ (8002674 <Reset_Motion_Values+0x1c0>)
 8002510:	6053      	str	r3, [r2, #4]
  x_axes.AXIS_Z = (x_axes.AXIS_Z)%2000 == 0 ? -x_axes.AXIS_Z : 10;
 8002512:	4b58      	ldr	r3, [pc, #352]	@ (8002674 <Reset_Motion_Values+0x1c0>)
 8002514:	689a      	ldr	r2, [r3, #8]
 8002516:	4b58      	ldr	r3, [pc, #352]	@ (8002678 <Reset_Motion_Values+0x1c4>)
 8002518:	fb83 1302 	smull	r1, r3, r3, r2
 800251c:	11d9      	asrs	r1, r3, #7
 800251e:	17d3      	asrs	r3, r2, #31
 8002520:	1acb      	subs	r3, r1, r3
 8002522:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8002526:	fb01 f303 	mul.w	r3, r1, r3
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	2b00      	cmp	r3, #0
 800252e:	d103      	bne.n	8002538 <Reset_Motion_Values+0x84>
 8002530:	4b50      	ldr	r3, [pc, #320]	@ (8002674 <Reset_Motion_Values+0x1c0>)
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	425b      	negs	r3, r3
 8002536:	e000      	b.n	800253a <Reset_Motion_Values+0x86>
 8002538:	230a      	movs	r3, #10
 800253a:	4a4e      	ldr	r2, [pc, #312]	@ (8002674 <Reset_Motion_Values+0x1c0>)
 800253c:	6093      	str	r3, [r2, #8]
  g_axes.AXIS_X = (g_axes.AXIS_X)%2000 == 0 ? -g_axes.AXIS_X : 100;
 800253e:	4b4f      	ldr	r3, [pc, #316]	@ (800267c <Reset_Motion_Values+0x1c8>)
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	4b4d      	ldr	r3, [pc, #308]	@ (8002678 <Reset_Motion_Values+0x1c4>)
 8002544:	fb83 1302 	smull	r1, r3, r3, r2
 8002548:	11d9      	asrs	r1, r3, #7
 800254a:	17d3      	asrs	r3, r2, #31
 800254c:	1acb      	subs	r3, r1, r3
 800254e:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8002552:	fb01 f303 	mul.w	r3, r1, r3
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	2b00      	cmp	r3, #0
 800255a:	d103      	bne.n	8002564 <Reset_Motion_Values+0xb0>
 800255c:	4b47      	ldr	r3, [pc, #284]	@ (800267c <Reset_Motion_Values+0x1c8>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	425b      	negs	r3, r3
 8002562:	e000      	b.n	8002566 <Reset_Motion_Values+0xb2>
 8002564:	2364      	movs	r3, #100	@ 0x64
 8002566:	4a45      	ldr	r2, [pc, #276]	@ (800267c <Reset_Motion_Values+0x1c8>)
 8002568:	6013      	str	r3, [r2, #0]
  g_axes.AXIS_Y = (g_axes.AXIS_Y)%2000 == 0 ? -g_axes.AXIS_Y : -100;
 800256a:	4b44      	ldr	r3, [pc, #272]	@ (800267c <Reset_Motion_Values+0x1c8>)
 800256c:	685a      	ldr	r2, [r3, #4]
 800256e:	4b42      	ldr	r3, [pc, #264]	@ (8002678 <Reset_Motion_Values+0x1c4>)
 8002570:	fb83 1302 	smull	r1, r3, r3, r2
 8002574:	11d9      	asrs	r1, r3, #7
 8002576:	17d3      	asrs	r3, r2, #31
 8002578:	1acb      	subs	r3, r1, r3
 800257a:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800257e:	fb01 f303 	mul.w	r3, r1, r3
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	2b00      	cmp	r3, #0
 8002586:	d103      	bne.n	8002590 <Reset_Motion_Values+0xdc>
 8002588:	4b3c      	ldr	r3, [pc, #240]	@ (800267c <Reset_Motion_Values+0x1c8>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	425b      	negs	r3, r3
 800258e:	e001      	b.n	8002594 <Reset_Motion_Values+0xe0>
 8002590:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8002594:	4a39      	ldr	r2, [pc, #228]	@ (800267c <Reset_Motion_Values+0x1c8>)
 8002596:	6053      	str	r3, [r2, #4]
  g_axes.AXIS_Z = (g_axes.AXIS_Z)%2000 == 0 ? -g_axes.AXIS_Z : 100;
 8002598:	4b38      	ldr	r3, [pc, #224]	@ (800267c <Reset_Motion_Values+0x1c8>)
 800259a:	689a      	ldr	r2, [r3, #8]
 800259c:	4b36      	ldr	r3, [pc, #216]	@ (8002678 <Reset_Motion_Values+0x1c4>)
 800259e:	fb83 1302 	smull	r1, r3, r3, r2
 80025a2:	11d9      	asrs	r1, r3, #7
 80025a4:	17d3      	asrs	r3, r2, #31
 80025a6:	1acb      	subs	r3, r1, r3
 80025a8:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80025ac:	fb01 f303 	mul.w	r3, r1, r3
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d103      	bne.n	80025be <Reset_Motion_Values+0x10a>
 80025b6:	4b31      	ldr	r3, [pc, #196]	@ (800267c <Reset_Motion_Values+0x1c8>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	425b      	negs	r3, r3
 80025bc:	e000      	b.n	80025c0 <Reset_Motion_Values+0x10c>
 80025be:	2364      	movs	r3, #100	@ 0x64
 80025c0:	4a2e      	ldr	r2, [pc, #184]	@ (800267c <Reset_Motion_Values+0x1c8>)
 80025c2:	6093      	str	r3, [r2, #8]
  m_axes.AXIS_X = (g_axes.AXIS_X)%2000 == 0 ? -m_axes.AXIS_X : 3;
 80025c4:	4b2d      	ldr	r3, [pc, #180]	@ (800267c <Reset_Motion_Values+0x1c8>)
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	4b2b      	ldr	r3, [pc, #172]	@ (8002678 <Reset_Motion_Values+0x1c4>)
 80025ca:	fb83 1302 	smull	r1, r3, r3, r2
 80025ce:	11d9      	asrs	r1, r3, #7
 80025d0:	17d3      	asrs	r3, r2, #31
 80025d2:	1acb      	subs	r3, r1, r3
 80025d4:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80025d8:	fb01 f303 	mul.w	r3, r1, r3
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d103      	bne.n	80025ea <Reset_Motion_Values+0x136>
 80025e2:	4b27      	ldr	r3, [pc, #156]	@ (8002680 <Reset_Motion_Values+0x1cc>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	425b      	negs	r3, r3
 80025e8:	e000      	b.n	80025ec <Reset_Motion_Values+0x138>
 80025ea:	2303      	movs	r3, #3
 80025ec:	4a24      	ldr	r2, [pc, #144]	@ (8002680 <Reset_Motion_Values+0x1cc>)
 80025ee:	6013      	str	r3, [r2, #0]
  m_axes.AXIS_Y = (g_axes.AXIS_Y)%2000 == 0 ? -m_axes.AXIS_Y : -3;
 80025f0:	4b22      	ldr	r3, [pc, #136]	@ (800267c <Reset_Motion_Values+0x1c8>)
 80025f2:	685a      	ldr	r2, [r3, #4]
 80025f4:	4b20      	ldr	r3, [pc, #128]	@ (8002678 <Reset_Motion_Values+0x1c4>)
 80025f6:	fb83 1302 	smull	r1, r3, r3, r2
 80025fa:	11d9      	asrs	r1, r3, #7
 80025fc:	17d3      	asrs	r3, r2, #31
 80025fe:	1acb      	subs	r3, r1, r3
 8002600:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8002604:	fb01 f303 	mul.w	r3, r1, r3
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b00      	cmp	r3, #0
 800260c:	d103      	bne.n	8002616 <Reset_Motion_Values+0x162>
 800260e:	4b1c      	ldr	r3, [pc, #112]	@ (8002680 <Reset_Motion_Values+0x1cc>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	425b      	negs	r3, r3
 8002614:	e001      	b.n	800261a <Reset_Motion_Values+0x166>
 8002616:	f06f 0302 	mvn.w	r3, #2
 800261a:	4a19      	ldr	r2, [pc, #100]	@ (8002680 <Reset_Motion_Values+0x1cc>)
 800261c:	6053      	str	r3, [r2, #4]
  m_axes.AXIS_Z = (g_axes.AXIS_Z)%2000 == 0 ? -m_axes.AXIS_Z : 3;
 800261e:	4b17      	ldr	r3, [pc, #92]	@ (800267c <Reset_Motion_Values+0x1c8>)
 8002620:	689a      	ldr	r2, [r3, #8]
 8002622:	4b15      	ldr	r3, [pc, #84]	@ (8002678 <Reset_Motion_Values+0x1c4>)
 8002624:	fb83 1302 	smull	r1, r3, r3, r2
 8002628:	11d9      	asrs	r1, r3, #7
 800262a:	17d3      	asrs	r3, r2, #31
 800262c:	1acb      	subs	r3, r1, r3
 800262e:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8002632:	fb01 f303 	mul.w	r3, r1, r3
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	2b00      	cmp	r3, #0
 800263a:	d103      	bne.n	8002644 <Reset_Motion_Values+0x190>
 800263c:	4b10      	ldr	r3, [pc, #64]	@ (8002680 <Reset_Motion_Values+0x1cc>)
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	425b      	negs	r3, r3
 8002642:	e000      	b.n	8002646 <Reset_Motion_Values+0x192>
 8002644:	2303      	movs	r3, #3
 8002646:	4a0e      	ldr	r2, [pc, #56]	@ (8002680 <Reset_Motion_Values+0x1cc>)
 8002648:	6093      	str	r3, [r2, #8]
  q_axes.AXIS_X = -q_axes.AXIS_X;
 800264a:	4b0e      	ldr	r3, [pc, #56]	@ (8002684 <Reset_Motion_Values+0x1d0>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	425b      	negs	r3, r3
 8002650:	4a0c      	ldr	r2, [pc, #48]	@ (8002684 <Reset_Motion_Values+0x1d0>)
 8002652:	6013      	str	r3, [r2, #0]
  q_axes.AXIS_Y = -q_axes.AXIS_Y;
 8002654:	4b0b      	ldr	r3, [pc, #44]	@ (8002684 <Reset_Motion_Values+0x1d0>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	425b      	negs	r3, r3
 800265a:	4a0a      	ldr	r2, [pc, #40]	@ (8002684 <Reset_Motion_Values+0x1d0>)
 800265c:	6053      	str	r3, [r2, #4]
  q_axes.AXIS_Z = -q_axes.AXIS_Z;
 800265e:	4b09      	ldr	r3, [pc, #36]	@ (8002684 <Reset_Motion_Values+0x1d0>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	425b      	negs	r3, r3
 8002664:	4a07      	ldr	r2, [pc, #28]	@ (8002684 <Reset_Motion_Values+0x1d0>)
 8002666:	6093      	str	r3, [r2, #8]
}
 8002668:	bf00      	nop
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	20000790 	.word	0x20000790
 8002678:	10624dd3 	.word	0x10624dd3
 800267c:	2000079c 	.word	0x2000079c
 8002680:	200007a8 	.word	0x200007a8
 8002684:	200007b4 	.word	0x200007b4

08002688 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	4603      	mov	r3, r0
 8002690:	71fb      	strb	r3, [r7, #7]
  /* Set the User Button flag */
  user_button_pressed = 1;
 8002692:	4b04      	ldr	r3, [pc, #16]	@ (80026a4 <BSP_PB_Callback+0x1c>)
 8002694:	2201      	movs	r2, #1
 8002696:	701a      	strb	r2, [r3, #0]
}
 8002698:	bf00      	nop
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr
 80026a4:	20000756 	.word	0x20000756

080026a8 <Add_HWServW2ST_Service>:
 * @brief  Add the 'HW' service (and the Environmental and AccGyr characteristics).
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_HWServW2ST_Service(void)
{
 80026a8:	b590      	push	{r4, r7, lr}
 80026aa:	b08d      	sub	sp, #52	@ 0x34
 80026ac:	af06      	add	r7, sp, #24
  tBleStatus ret;
  uint8_t uuid[16];

  /* Add_HWServW2ST_Service */
  COPY_HW_SENS_W2ST_SERVICE_UUID(uuid);
 80026ae:	231b      	movs	r3, #27
 80026b0:	713b      	strb	r3, [r7, #4]
 80026b2:	23c5      	movs	r3, #197	@ 0xc5
 80026b4:	717b      	strb	r3, [r7, #5]
 80026b6:	23d5      	movs	r3, #213	@ 0xd5
 80026b8:	71bb      	strb	r3, [r7, #6]
 80026ba:	23a5      	movs	r3, #165	@ 0xa5
 80026bc:	71fb      	strb	r3, [r7, #7]
 80026be:	2302      	movs	r3, #2
 80026c0:	723b      	strb	r3, [r7, #8]
 80026c2:	2300      	movs	r3, #0
 80026c4:	727b      	strb	r3, [r7, #9]
 80026c6:	23b4      	movs	r3, #180	@ 0xb4
 80026c8:	72bb      	strb	r3, [r7, #10]
 80026ca:	239a      	movs	r3, #154	@ 0x9a
 80026cc:	72fb      	strb	r3, [r7, #11]
 80026ce:	23e1      	movs	r3, #225	@ 0xe1
 80026d0:	733b      	strb	r3, [r7, #12]
 80026d2:	2311      	movs	r3, #17
 80026d4:	737b      	strb	r3, [r7, #13]
 80026d6:	2301      	movs	r3, #1
 80026d8:	73bb      	strb	r3, [r7, #14]
 80026da:	2300      	movs	r3, #0
 80026dc:	73fb      	strb	r3, [r7, #15]
 80026de:	2300      	movs	r3, #0
 80026e0:	743b      	strb	r3, [r7, #16]
 80026e2:	2300      	movs	r3, #0
 80026e4:	747b      	strb	r3, [r7, #17]
 80026e6:	2300      	movs	r3, #0
 80026e8:	74bb      	strb	r3, [r7, #18]
 80026ea:	2300      	movs	r3, #0
 80026ec:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 80026ee:	4b4d      	ldr	r3, [pc, #308]	@ (8002824 <Add_HWServW2ST_Service+0x17c>)
 80026f0:	461c      	mov	r4, r3
 80026f2:	1d3b      	adds	r3, r7, #4
 80026f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid.Service_UUID_128, PRIMARY_SERVICE,
 80026fa:	4b4b      	ldr	r3, [pc, #300]	@ (8002828 <Add_HWServW2ST_Service+0x180>)
 80026fc:	9300      	str	r3, [sp, #0]
 80026fe:	2310      	movs	r3, #16
 8002700:	2201      	movs	r2, #1
 8002702:	4948      	ldr	r1, [pc, #288]	@ (8002824 <Add_HWServW2ST_Service+0x17c>)
 8002704:	2002      	movs	r0, #2
 8002706:	f007 fd3d 	bl	800a184 <aci_gatt_add_serv>
 800270a:	4603      	mov	r3, r0
 800270c:	75fb      	strb	r3, [r7, #23]
                          1+3*5, &HWServW2STHandle);
  if (ret != BLE_STATUS_SUCCESS)
 800270e:	7dfb      	ldrb	r3, [r7, #23]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d001      	beq.n	8002718 <Add_HWServW2ST_Service+0x70>
    return BLE_STATUS_ERROR;
 8002714:	2347      	movs	r3, #71	@ 0x47
 8002716:	e080      	b.n	800281a <Add_HWServW2ST_Service+0x172>

  /* Fill the Environmental BLE Characteristc */
  COPY_ENVIRONMENTAL_W2ST_CHAR_UUID(uuid);
 8002718:	231b      	movs	r3, #27
 800271a:	713b      	strb	r3, [r7, #4]
 800271c:	23c5      	movs	r3, #197	@ 0xc5
 800271e:	717b      	strb	r3, [r7, #5]
 8002720:	23d5      	movs	r3, #213	@ 0xd5
 8002722:	71bb      	strb	r3, [r7, #6]
 8002724:	23a5      	movs	r3, #165	@ 0xa5
 8002726:	71fb      	strb	r3, [r7, #7]
 8002728:	2302      	movs	r3, #2
 800272a:	723b      	strb	r3, [r7, #8]
 800272c:	2300      	movs	r3, #0
 800272e:	727b      	strb	r3, [r7, #9]
 8002730:	2336      	movs	r3, #54	@ 0x36
 8002732:	72bb      	strb	r3, [r7, #10]
 8002734:	23ac      	movs	r3, #172	@ 0xac
 8002736:	72fb      	strb	r3, [r7, #11]
 8002738:	23e1      	movs	r3, #225	@ 0xe1
 800273a:	733b      	strb	r3, [r7, #12]
 800273c:	2311      	movs	r3, #17
 800273e:	737b      	strb	r3, [r7, #13]
 8002740:	2301      	movs	r3, #1
 8002742:	73bb      	strb	r3, [r7, #14]
 8002744:	2300      	movs	r3, #0
 8002746:	73fb      	strb	r3, [r7, #15]
 8002748:	2300      	movs	r3, #0
 800274a:	743b      	strb	r3, [r7, #16]
 800274c:	2300      	movs	r3, #0
 800274e:	747b      	strb	r3, [r7, #17]
 8002750:	2300      	movs	r3, #0
 8002752:	74bb      	strb	r3, [r7, #18]
 8002754:	2300      	movs	r3, #0
 8002756:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8002758:	4b34      	ldr	r3, [pc, #208]	@ (800282c <Add_HWServW2ST_Service+0x184>)
 800275a:	461c      	mov	r4, r3
 800275c:	1d3b      	adds	r3, r7, #4
 800275e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002760:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128,
 8002764:	4b30      	ldr	r3, [pc, #192]	@ (8002828 <Add_HWServW2ST_Service+0x180>)
 8002766:	8818      	ldrh	r0, [r3, #0]
 8002768:	4b31      	ldr	r3, [pc, #196]	@ (8002830 <Add_HWServW2ST_Service+0x188>)
 800276a:	9305      	str	r3, [sp, #20]
 800276c:	2300      	movs	r3, #0
 800276e:	9304      	str	r3, [sp, #16]
 8002770:	2310      	movs	r3, #16
 8002772:	9303      	str	r3, [sp, #12]
 8002774:	2304      	movs	r3, #4
 8002776:	9302      	str	r3, [sp, #8]
 8002778:	2300      	movs	r3, #0
 800277a:	9301      	str	r3, [sp, #4]
 800277c:	2312      	movs	r3, #18
 800277e:	9300      	str	r3, [sp, #0]
 8002780:	2306      	movs	r3, #6
 8002782:	4a2a      	ldr	r2, [pc, #168]	@ (800282c <Add_HWServW2ST_Service+0x184>)
 8002784:	2102      	movs	r1, #2
 8002786:	f007 fd86 	bl	800a296 <aci_gatt_add_char>
 800278a:	4603      	mov	r3, r0
 800278c:	75fb      	strb	r3, [r7, #23]
                           6,
                           CHAR_PROP_NOTIFY|CHAR_PROP_READ,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &AccDataCharHandle);
  if (ret != BLE_STATUS_SUCCESS)
 800278e:	7dfb      	ldrb	r3, [r7, #23]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <Add_HWServW2ST_Service+0xf0>
    return BLE_STATUS_ERROR;
 8002794:	2347      	movs	r3, #71	@ 0x47
 8002796:	e040      	b.n	800281a <Add_HWServW2ST_Service+0x172>

  /* Fill the AccGyroMag BLE Characteristc */
  COPY_ACC_GYRO_MAG_W2ST_CHAR_UUID(uuid);
 8002798:	231b      	movs	r3, #27
 800279a:	713b      	strb	r3, [r7, #4]
 800279c:	23c5      	movs	r3, #197	@ 0xc5
 800279e:	717b      	strb	r3, [r7, #5]
 80027a0:	23d5      	movs	r3, #213	@ 0xd5
 80027a2:	71bb      	strb	r3, [r7, #6]
 80027a4:	23a5      	movs	r3, #165	@ 0xa5
 80027a6:	71fb      	strb	r3, [r7, #7]
 80027a8:	2302      	movs	r3, #2
 80027aa:	723b      	strb	r3, [r7, #8]
 80027ac:	2300      	movs	r3, #0
 80027ae:	727b      	strb	r3, [r7, #9]
 80027b0:	2336      	movs	r3, #54	@ 0x36
 80027b2:	72bb      	strb	r3, [r7, #10]
 80027b4:	23ac      	movs	r3, #172	@ 0xac
 80027b6:	72fb      	strb	r3, [r7, #11]
 80027b8:	23e1      	movs	r3, #225	@ 0xe1
 80027ba:	733b      	strb	r3, [r7, #12]
 80027bc:	2311      	movs	r3, #17
 80027be:	737b      	strb	r3, [r7, #13]
 80027c0:	2301      	movs	r3, #1
 80027c2:	73bb      	strb	r3, [r7, #14]
 80027c4:	2300      	movs	r3, #0
 80027c6:	73fb      	strb	r3, [r7, #15]
 80027c8:	2300      	movs	r3, #0
 80027ca:	743b      	strb	r3, [r7, #16]
 80027cc:	2300      	movs	r3, #0
 80027ce:	747b      	strb	r3, [r7, #17]
 80027d0:	23e0      	movs	r3, #224	@ 0xe0
 80027d2:	74bb      	strb	r3, [r7, #18]
 80027d4:	2300      	movs	r3, #0
 80027d6:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 80027d8:	4b14      	ldr	r3, [pc, #80]	@ (800282c <Add_HWServW2ST_Service+0x184>)
 80027da:	461c      	mov	r4, r3
 80027dc:	1d3b      	adds	r3, r7, #4
 80027de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128,
 80027e4:	4b10      	ldr	r3, [pc, #64]	@ (8002828 <Add_HWServW2ST_Service+0x180>)
 80027e6:	8818      	ldrh	r0, [r3, #0]
 80027e8:	4b12      	ldr	r3, [pc, #72]	@ (8002834 <Add_HWServW2ST_Service+0x18c>)
 80027ea:	9305      	str	r3, [sp, #20]
 80027ec:	2300      	movs	r3, #0
 80027ee:	9304      	str	r3, [sp, #16]
 80027f0:	2310      	movs	r3, #16
 80027f2:	9303      	str	r3, [sp, #12]
 80027f4:	2302      	movs	r3, #2
 80027f6:	9302      	str	r3, [sp, #8]
 80027f8:	2300      	movs	r3, #0
 80027fa:	9301      	str	r3, [sp, #4]
 80027fc:	2304      	movs	r3, #4
 80027fe:	9300      	str	r3, [sp, #0]
 8002800:	2314      	movs	r3, #20
 8002802:	4a0a      	ldr	r2, [pc, #40]	@ (800282c <Add_HWServW2ST_Service+0x184>)
 8002804:	2102      	movs	r1, #2
 8002806:	f007 fd46 	bl	800a296 <aci_gatt_add_char>
 800280a:	4603      	mov	r3, r0
 800280c:	75fb      	strb	r3, [r7, #23]
                           2+3*3*2,
						   CHAR_PROP_WRITE_WITHOUT_RESP,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_WRITE_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &AccGyroMagCharHandle);
  if (ret != BLE_STATUS_SUCCESS)
 800280e:	7dfb      	ldrb	r3, [r7, #23]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d001      	beq.n	8002818 <Add_HWServW2ST_Service+0x170>
    return BLE_STATUS_ERROR;
 8002814:	2347      	movs	r3, #71	@ 0x47
 8002816:	e000      	b.n	800281a <Add_HWServW2ST_Service+0x172>

  return BLE_STATUS_SUCCESS;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	371c      	adds	r7, #28
 800281e:	46bd      	mov	sp, r7
 8002820:	bd90      	pop	{r4, r7, pc}
 8002822:	bf00      	nop
 8002824:	20000768 	.word	0x20000768
 8002828:	2000075c 	.word	0x2000075c
 800282c:	20000778 	.word	0x20000778
 8002830:	20000762 	.word	0x20000762
 8002834:	20000760 	.word	0x20000760

08002838 <Add_SWServW2ST_Service>:
 * @brief  Add the SW Feature service using a vendor specific profile
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_SWServW2ST_Service(void)
{
 8002838:	b590      	push	{r4, r7, lr}
 800283a:	b08d      	sub	sp, #52	@ 0x34
 800283c:	af06      	add	r7, sp, #24
  tBleStatus ret;
  int32_t NumberOfRecords=1;
 800283e:	2301      	movs	r3, #1
 8002840:	617b      	str	r3, [r7, #20]
  uint8_t uuid[16];

  COPY_SW_SENS_W2ST_SERVICE_UUID(uuid);
 8002842:	231b      	movs	r3, #27
 8002844:	703b      	strb	r3, [r7, #0]
 8002846:	23c5      	movs	r3, #197	@ 0xc5
 8002848:	707b      	strb	r3, [r7, #1]
 800284a:	23d5      	movs	r3, #213	@ 0xd5
 800284c:	70bb      	strb	r3, [r7, #2]
 800284e:	23a5      	movs	r3, #165	@ 0xa5
 8002850:	70fb      	strb	r3, [r7, #3]
 8002852:	2302      	movs	r3, #2
 8002854:	713b      	strb	r3, [r7, #4]
 8002856:	2300      	movs	r3, #0
 8002858:	717b      	strb	r3, [r7, #5]
 800285a:	23b4      	movs	r3, #180	@ 0xb4
 800285c:	71bb      	strb	r3, [r7, #6]
 800285e:	239a      	movs	r3, #154	@ 0x9a
 8002860:	71fb      	strb	r3, [r7, #7]
 8002862:	23e1      	movs	r3, #225	@ 0xe1
 8002864:	723b      	strb	r3, [r7, #8]
 8002866:	2311      	movs	r3, #17
 8002868:	727b      	strb	r3, [r7, #9]
 800286a:	2302      	movs	r3, #2
 800286c:	72bb      	strb	r3, [r7, #10]
 800286e:	2300      	movs	r3, #0
 8002870:	72fb      	strb	r3, [r7, #11]
 8002872:	2300      	movs	r3, #0
 8002874:	733b      	strb	r3, [r7, #12]
 8002876:	2300      	movs	r3, #0
 8002878:	737b      	strb	r3, [r7, #13]
 800287a:	2300      	movs	r3, #0
 800287c:	73bb      	strb	r3, [r7, #14]
 800287e:	2300      	movs	r3, #0
 8002880:	73fb      	strb	r3, [r7, #15]
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 8002882:	4b31      	ldr	r3, [pc, #196]	@ (8002948 <Add_SWServW2ST_Service+0x110>)
 8002884:	461c      	mov	r4, r3
 8002886:	463b      	mov	r3, r7
 8002888:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800288a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid.Service_UUID_128, PRIMARY_SERVICE,
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	b2db      	uxtb	r3, r3
 8002892:	461a      	mov	r2, r3
 8002894:	0052      	lsls	r2, r2, #1
 8002896:	4413      	add	r3, r2
 8002898:	b2db      	uxtb	r3, r3
 800289a:	3301      	adds	r3, #1
 800289c:	b2db      	uxtb	r3, r3
 800289e:	4a2b      	ldr	r2, [pc, #172]	@ (800294c <Add_SWServW2ST_Service+0x114>)
 80028a0:	9200      	str	r2, [sp, #0]
 80028a2:	2201      	movs	r2, #1
 80028a4:	4928      	ldr	r1, [pc, #160]	@ (8002948 <Add_SWServW2ST_Service+0x110>)
 80028a6:	2002      	movs	r0, #2
 80028a8:	f007 fc6c 	bl	800a184 <aci_gatt_add_serv>
 80028ac:	4603      	mov	r3, r0
 80028ae:	74fb      	strb	r3, [r7, #19]
                          1+3*NumberOfRecords, &SWServW2STHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 80028b0:	7cfb      	ldrb	r3, [r7, #19]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d13f      	bne.n	8002936 <Add_SWServW2ST_Service+0xfe>
    goto fail;
  }

  COPY_QUATERNIONS_W2ST_CHAR_UUID(uuid);
 80028b6:	231b      	movs	r3, #27
 80028b8:	703b      	strb	r3, [r7, #0]
 80028ba:	23c5      	movs	r3, #197	@ 0xc5
 80028bc:	707b      	strb	r3, [r7, #1]
 80028be:	23d5      	movs	r3, #213	@ 0xd5
 80028c0:	70bb      	strb	r3, [r7, #2]
 80028c2:	23a5      	movs	r3, #165	@ 0xa5
 80028c4:	70fb      	strb	r3, [r7, #3]
 80028c6:	2302      	movs	r3, #2
 80028c8:	713b      	strb	r3, [r7, #4]
 80028ca:	2300      	movs	r3, #0
 80028cc:	717b      	strb	r3, [r7, #5]
 80028ce:	2336      	movs	r3, #54	@ 0x36
 80028d0:	71bb      	strb	r3, [r7, #6]
 80028d2:	23ac      	movs	r3, #172	@ 0xac
 80028d4:	71fb      	strb	r3, [r7, #7]
 80028d6:	23e1      	movs	r3, #225	@ 0xe1
 80028d8:	723b      	strb	r3, [r7, #8]
 80028da:	2311      	movs	r3, #17
 80028dc:	727b      	strb	r3, [r7, #9]
 80028de:	2301      	movs	r3, #1
 80028e0:	72bb      	strb	r3, [r7, #10]
 80028e2:	2300      	movs	r3, #0
 80028e4:	72fb      	strb	r3, [r7, #11]
 80028e6:	2300      	movs	r3, #0
 80028e8:	733b      	strb	r3, [r7, #12]
 80028ea:	2301      	movs	r3, #1
 80028ec:	737b      	strb	r3, [r7, #13]
 80028ee:	2300      	movs	r3, #0
 80028f0:	73bb      	strb	r3, [r7, #14]
 80028f2:	2300      	movs	r3, #0
 80028f4:	73fb      	strb	r3, [r7, #15]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 80028f6:	4b16      	ldr	r3, [pc, #88]	@ (8002950 <Add_SWServW2ST_Service+0x118>)
 80028f8:	461c      	mov	r4, r3
 80028fa:	463b      	mov	r3, r7
 80028fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(SWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128,
 8002902:	4b12      	ldr	r3, [pc, #72]	@ (800294c <Add_SWServW2ST_Service+0x114>)
 8002904:	8818      	ldrh	r0, [r3, #0]
 8002906:	4b13      	ldr	r3, [pc, #76]	@ (8002954 <Add_SWServW2ST_Service+0x11c>)
 8002908:	9305      	str	r3, [sp, #20]
 800290a:	2300      	movs	r3, #0
 800290c:	9304      	str	r3, [sp, #16]
 800290e:	2310      	movs	r3, #16
 8002910:	9303      	str	r3, [sp, #12]
 8002912:	2304      	movs	r3, #4
 8002914:	9302      	str	r3, [sp, #8]
 8002916:	2300      	movs	r3, #0
 8002918:	9301      	str	r3, [sp, #4]
 800291a:	2310      	movs	r3, #16
 800291c:	9300      	str	r3, [sp, #0]
 800291e:	2308      	movs	r3, #8
 8002920:	4a0b      	ldr	r2, [pc, #44]	@ (8002950 <Add_SWServW2ST_Service+0x118>)
 8002922:	2102      	movs	r1, #2
 8002924:	f007 fcb7 	bl	800a296 <aci_gatt_add_char>
 8002928:	4603      	mov	r3, r0
 800292a:	74fb      	strb	r3, [r7, #19]
                           CHAR_PROP_NOTIFY,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &QuaternionsCharHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 800292c:	7cfb      	ldrb	r3, [r7, #19]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d103      	bne.n	800293a <Add_SWServW2ST_Service+0x102>
    goto fail;
  }

  return BLE_STATUS_SUCCESS;
 8002932:	2300      	movs	r3, #0
 8002934:	e003      	b.n	800293e <Add_SWServW2ST_Service+0x106>
    goto fail;
 8002936:	bf00      	nop
 8002938:	e000      	b.n	800293c <Add_SWServW2ST_Service+0x104>
    goto fail;
 800293a:	bf00      	nop

fail:
  return BLE_STATUS_ERROR;
 800293c:	2347      	movs	r3, #71	@ 0x47
}
 800293e:	4618      	mov	r0, r3
 8002940:	371c      	adds	r7, #28
 8002942:	46bd      	mov	sp, r7
 8002944:	bd90      	pop	{r4, r7, pc}
 8002946:	bf00      	nop
 8002948:	20000768 	.word	0x20000768
 800294c:	20000764 	.word	0x20000764
 8002950:	20000778 	.word	0x20000778
 8002954:	20000766 	.word	0x20000766

08002958 <Acc_Update>:
 * @brief  Update acceleration characteristic value
 * @param  AxesRaw_t structure containing acceleration value in mg.
 * @retval tBleStatus Status
 */
tBleStatus Acc_Update(AxesRaw_t *x_axes, AxesRaw_t *g_axes, AxesRaw_t *m_axes)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b08c      	sub	sp, #48	@ 0x30
 800295c:	af02      	add	r7, sp, #8
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	607a      	str	r2, [r7, #4]
  uint8_t buff[2+2*3*3];
  tBleStatus ret;

  HOST_TO_LE_16(buff,(HAL_GetTick()>>3));
 8002964:	f002 fc2e 	bl	80051c4 <HAL_GetTick>
 8002968:	4603      	mov	r3, r0
 800296a:	08db      	lsrs	r3, r3, #3
 800296c:	b2db      	uxtb	r3, r3
 800296e:	743b      	strb	r3, [r7, #16]
 8002970:	f002 fc28 	bl	80051c4 <HAL_GetTick>
 8002974:	4603      	mov	r3, r0
 8002976:	0adb      	lsrs	r3, r3, #11
 8002978:	b2db      	uxtb	r3, r3
 800297a:	747b      	strb	r3, [r7, #17]

  HOST_TO_LE_16(buff+2,-x_axes->AXIS_Y);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	b2db      	uxtb	r3, r3
 8002982:	425b      	negs	r3, r3
 8002984:	b2db      	uxtb	r3, r3
 8002986:	74bb      	strb	r3, [r7, #18]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	425b      	negs	r3, r3
 800298e:	121b      	asrs	r3, r3, #8
 8002990:	b2db      	uxtb	r3, r3
 8002992:	74fb      	strb	r3, [r7, #19]
  HOST_TO_LE_16(buff+4, x_axes->AXIS_X);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	b2db      	uxtb	r3, r3
 800299a:	753b      	strb	r3, [r7, #20]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	121b      	asrs	r3, r3, #8
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	757b      	strb	r3, [r7, #21]
  HOST_TO_LE_16(buff+6,-x_axes->AXIS_Z);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	425b      	negs	r3, r3
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	75bb      	strb	r3, [r7, #22]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	425b      	negs	r3, r3
 80029b8:	121b      	asrs	r3, r3, #8
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	75fb      	strb	r3, [r7, #23]

  HOST_TO_LE_16(buff+8,g_axes->AXIS_Y);
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	763b      	strb	r3, [r7, #24]
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	121b      	asrs	r3, r3, #8
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	767b      	strb	r3, [r7, #25]
  HOST_TO_LE_16(buff+10,g_axes->AXIS_X);
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	76bb      	strb	r3, [r7, #26]
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	121b      	asrs	r3, r3, #8
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	76fb      	strb	r3, [r7, #27]
  HOST_TO_LE_16(buff+12,g_axes->AXIS_Z);
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	773b      	strb	r3, [r7, #28]
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	121b      	asrs	r3, r3, #8
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	777b      	strb	r3, [r7, #29]

  HOST_TO_LE_16(buff+14,m_axes->AXIS_Y);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	77bb      	strb	r3, [r7, #30]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	121b      	asrs	r3, r3, #8
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	77fb      	strb	r3, [r7, #31]
  HOST_TO_LE_16(buff+16,m_axes->AXIS_X);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	f887 3020 	strb.w	r3, [r7, #32]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	121b      	asrs	r3, r3, #8
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  HOST_TO_LE_16(buff+18,m_axes->AXIS_Z);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	121b      	asrs	r3, r3, #8
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  ret = aci_gatt_update_char_value(HWServW2STHandle, AccGyroMagCharHandle,
 8002a32:	4b0f      	ldr	r3, [pc, #60]	@ (8002a70 <Acc_Update+0x118>)
 8002a34:	8818      	ldrh	r0, [r3, #0]
 8002a36:	4b0f      	ldr	r3, [pc, #60]	@ (8002a74 <Acc_Update+0x11c>)
 8002a38:	8819      	ldrh	r1, [r3, #0]
 8002a3a:	f107 0310 	add.w	r3, r7, #16
 8002a3e:	9300      	str	r3, [sp, #0]
 8002a40:	2314      	movs	r3, #20
 8002a42:	2200      	movs	r2, #0
 8002a44:	f007 fcf2 	bl	800a42c <aci_gatt_update_char_value>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				   0, 2+2*3*3, buff);
  if (ret != BLE_STATUS_SUCCESS){
 8002a4e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d007      	beq.n	8002a66 <Acc_Update+0x10e>
    PRINTF("Error while updating Acceleration characteristic: 0x%02X\n",ret) ;
 8002a56:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	4806      	ldr	r0, [pc, #24]	@ (8002a78 <Acc_Update+0x120>)
 8002a5e:	f00b fa5d 	bl	800df1c <iprintf>
    return BLE_STATUS_ERROR ;
 8002a62:	2347      	movs	r3, #71	@ 0x47
 8002a64:	e000      	b.n	8002a68 <Acc_Update+0x110>
  }

  return BLE_STATUS_SUCCESS;
 8002a66:	2300      	movs	r3, #0
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3728      	adds	r7, #40	@ 0x28
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	2000075c 	.word	0x2000075c
 8002a74:	20000760 	.word	0x20000760
 8002a78:	08012374 	.word	0x08012374

08002a7c <Sample_rate_Update>:

tBleStatus Sample_rate_Update(uint8_t data)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	4603      	mov	r3, r0
 8002a84:	71fb      	strb	r3, [r7, #7]
	sample_rate = data;
 8002a86:	4a05      	ldr	r2, [pc, #20]	@ (8002a9c <Sample_rate_Update+0x20>)
 8002a88:	79fb      	ldrb	r3, [r7, #7]
 8002a8a:	7013      	strb	r3, [r2, #0]
}
 8002a8c:	bf00      	nop
 8002a8e:	4618      	mov	r0, r3
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	2000050c 	.word	0x2000050c

08002aa0 <Quat_Update>:
 * @brief  Update quaternions characteristic value
 * @param  SensorAxes_t *data Structure containing the quaterions
 * @retval tBleStatus      Status
 */
tBleStatus Quat_Update(AxesRaw_t *data)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b088      	sub	sp, #32
 8002aa4:	af02      	add	r7, sp, #8
 8002aa6:	6078      	str	r0, [r7, #4]
  tBleStatus ret;
  uint8_t buff[2+6*SEND_N_QUATERNIONS];

  HOST_TO_LE_16(buff,(HAL_GetTick()>>3));
 8002aa8:	f002 fb8c 	bl	80051c4 <HAL_GetTick>
 8002aac:	4603      	mov	r3, r0
 8002aae:	08db      	lsrs	r3, r3, #3
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	733b      	strb	r3, [r7, #12]
 8002ab4:	f002 fb86 	bl	80051c4 <HAL_GetTick>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	0adb      	lsrs	r3, r3, #11
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	737b      	strb	r3, [r7, #13]

#if SEND_N_QUATERNIONS == 1
  HOST_TO_LE_16(buff+2,data[0].AXIS_X);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	73bb      	strb	r3, [r7, #14]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	121b      	asrs	r3, r3, #8
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	73fb      	strb	r3, [r7, #15]
  HOST_TO_LE_16(buff+4,data[0].AXIS_Y);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	743b      	strb	r3, [r7, #16]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	121b      	asrs	r3, r3, #8
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	747b      	strb	r3, [r7, #17]
  HOST_TO_LE_16(buff+6,data[0].AXIS_Z);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	74bb      	strb	r3, [r7, #18]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	121b      	asrs	r3, r3, #8
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	74fb      	strb	r3, [r7, #19]
  HOST_TO_LE_16(buff+18,data[2].AXIS_Z);
#else
#error SEND_N_QUATERNIONS could be only 1,2,3
#endif

  ret = aci_gatt_update_char_value(SWServW2STHandle, QuaternionsCharHandle,
 8002af6:	4b0e      	ldr	r3, [pc, #56]	@ (8002b30 <Quat_Update+0x90>)
 8002af8:	8818      	ldrh	r0, [r3, #0]
 8002afa:	4b0e      	ldr	r3, [pc, #56]	@ (8002b34 <Quat_Update+0x94>)
 8002afc:	8819      	ldrh	r1, [r3, #0]
 8002afe:	f107 030c 	add.w	r3, r7, #12
 8002b02:	9300      	str	r3, [sp, #0]
 8002b04:	2308      	movs	r3, #8
 8002b06:	2200      	movs	r2, #0
 8002b08:	f007 fc90 	bl	800a42c <aci_gatt_update_char_value>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	75fb      	strb	r3, [r7, #23]
				   0, 2+6*SEND_N_QUATERNIONS, buff);
  if (ret != BLE_STATUS_SUCCESS){
 8002b10:	7dfb      	ldrb	r3, [r7, #23]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d006      	beq.n	8002b24 <Quat_Update+0x84>
    PRINTF("Error while updating Sensor Fusion characteristic: 0x%02X\n",ret) ;
 8002b16:	7dfb      	ldrb	r3, [r7, #23]
 8002b18:	4619      	mov	r1, r3
 8002b1a:	4807      	ldr	r0, [pc, #28]	@ (8002b38 <Quat_Update+0x98>)
 8002b1c:	f00b f9fe 	bl	800df1c <iprintf>
    return BLE_STATUS_ERROR ;
 8002b20:	2347      	movs	r3, #71	@ 0x47
 8002b22:	e000      	b.n	8002b26 <Quat_Update+0x86>
  }

  return BLE_STATUS_SUCCESS;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3718      	adds	r7, #24
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	20000764 	.word	0x20000764
 8002b34:	20000766 	.word	0x20000766
 8002b38:	080123d0 	.word	0x080123d0

08002b3c <Read_Request_CB>:
* Description    : Update the sensor values.
* Input          : Handle of the characteristic to update.
* Return         : None.
*******************************************************************************/
void Read_Request_CB(uint16_t handle)
{
 8002b3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b40:	b08e      	sub	sp, #56	@ 0x38
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	4603      	mov	r3, r0
 8002b46:	84fb      	strh	r3, [r7, #38]	@ 0x26
  tBleStatus ret;

  if(handle == AccGyroMagCharHandle + 1)
 8002b48:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002b4a:	4b5c      	ldr	r3, [pc, #368]	@ (8002cbc <Read_Request_CB+0x180>)
 8002b4c:	881b      	ldrh	r3, [r3, #0]
 8002b4e:	3301      	adds	r3, #1
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d105      	bne.n	8002b60 <Read_Request_CB+0x24>
  {
    Acc_Update(&x_axes, &g_axes, &m_axes);
 8002b54:	4a5a      	ldr	r2, [pc, #360]	@ (8002cc0 <Read_Request_CB+0x184>)
 8002b56:	495b      	ldr	r1, [pc, #364]	@ (8002cc4 <Read_Request_CB+0x188>)
 8002b58:	485b      	ldr	r0, [pc, #364]	@ (8002cc8 <Read_Request_CB+0x18c>)
 8002b5a:	f7ff fefd 	bl	8002958 <Acc_Update>
 8002b5e:	e091      	b.n	8002c84 <Read_Request_CB+0x148>
  }
  else if (handle == EnvironmentalCharHandle + 1)
 8002b60:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002b62:	4b5a      	ldr	r3, [pc, #360]	@ (8002ccc <Read_Request_CB+0x190>)
 8002b64:	881b      	ldrh	r3, [r3, #0]
 8002b66:	3301      	adds	r3, #1
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	f040 808b 	bne.w	8002c84 <Read_Request_CB+0x148>
  {
    float data_t, data_p;
    data_t = 27.0 + ((uint64_t)rand()*5)/RAND_MAX; //T sensor emulation
 8002b6e:	f00a f80f 	bl	800cb90 <rand>
 8002b72:	4603      	mov	r3, r0
 8002b74:	17da      	asrs	r2, r3, #31
 8002b76:	61bb      	str	r3, [r7, #24]
 8002b78:	61fa      	str	r2, [r7, #28]
 8002b7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b7e:	f04f 0000 	mov.w	r0, #0
 8002b82:	f04f 0100 	mov.w	r1, #0
 8002b86:	0099      	lsls	r1, r3, #2
 8002b88:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002b8c:	0090      	lsls	r0, r2, #2
 8002b8e:	4602      	mov	r2, r0
 8002b90:	460b      	mov	r3, r1
 8002b92:	69b9      	ldr	r1, [r7, #24]
 8002b94:	1851      	adds	r1, r2, r1
 8002b96:	6139      	str	r1, [r7, #16]
 8002b98:	69f9      	ldr	r1, [r7, #28]
 8002b9a:	eb43 0101 	adc.w	r1, r3, r1
 8002b9e:	6179      	str	r1, [r7, #20]
 8002ba0:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8002ba4:	f04f 0300 	mov.w	r3, #0
 8002ba8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002bac:	f7fe f86c 	bl	8000c88 <__aeabi_uldivmod>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	460b      	mov	r3, r1
 8002bb4:	4610      	mov	r0, r2
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	f7fd fce8 	bl	800058c <__aeabi_ul2d>
 8002bbc:	f04f 0200 	mov.w	r2, #0
 8002bc0:	4b43      	ldr	r3, [pc, #268]	@ (8002cd0 <Read_Request_CB+0x194>)
 8002bc2:	f7fd fb63 	bl	800028c <__adddf3>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	460b      	mov	r3, r1
 8002bca:	4610      	mov	r0, r2
 8002bcc:	4619      	mov	r1, r3
 8002bce:	f7fe f80b 	bl	8000be8 <__aeabi_d2f>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	637b      	str	r3, [r7, #52]	@ 0x34
    data_p = 1000.0 + ((uint64_t)rand()*100)/RAND_MAX; //P sensor emulation
 8002bd6:	f009 ffdb 	bl	800cb90 <rand>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	17da      	asrs	r2, r3, #31
 8002bde:	4698      	mov	r8, r3
 8002be0:	4691      	mov	r9, r2
 8002be2:	4642      	mov	r2, r8
 8002be4:	464b      	mov	r3, r9
 8002be6:	1891      	adds	r1, r2, r2
 8002be8:	6039      	str	r1, [r7, #0]
 8002bea:	415b      	adcs	r3, r3
 8002bec:	607b      	str	r3, [r7, #4]
 8002bee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002bf2:	eb12 0408 	adds.w	r4, r2, r8
 8002bf6:	eb43 0509 	adc.w	r5, r3, r9
 8002bfa:	f04f 0200 	mov.w	r2, #0
 8002bfe:	f04f 0300 	mov.w	r3, #0
 8002c02:	016b      	lsls	r3, r5, #5
 8002c04:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8002c08:	0162      	lsls	r2, r4, #5
 8002c0a:	eb14 0a02 	adds.w	sl, r4, r2
 8002c0e:	eb45 0b03 	adc.w	fp, r5, r3
 8002c12:	eb1a 0308 	adds.w	r3, sl, r8
 8002c16:	60bb      	str	r3, [r7, #8]
 8002c18:	eb4b 0309 	adc.w	r3, fp, r9
 8002c1c:	60fb      	str	r3, [r7, #12]
 8002c1e:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8002c22:	f04f 0300 	mov.w	r3, #0
 8002c26:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002c2a:	f7fe f82d 	bl	8000c88 <__aeabi_uldivmod>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	460b      	mov	r3, r1
 8002c32:	4610      	mov	r0, r2
 8002c34:	4619      	mov	r1, r3
 8002c36:	f7fd fca9 	bl	800058c <__aeabi_ul2d>
 8002c3a:	f04f 0200 	mov.w	r2, #0
 8002c3e:	4b25      	ldr	r3, [pc, #148]	@ (8002cd4 <Read_Request_CB+0x198>)
 8002c40:	f7fd fb24 	bl	800028c <__adddf3>
 8002c44:	4602      	mov	r2, r0
 8002c46:	460b      	mov	r3, r1
 8002c48:	4610      	mov	r0, r2
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	f7fd ffcc 	bl	8000be8 <__aeabi_d2f>
 8002c50:	4603      	mov	r3, r0
 8002c52:	633b      	str	r3, [r7, #48]	@ 0x30
    BlueMS_Environmental_Update((int32_t)(data_p *100), (int16_t)(data_t * 10));
 8002c54:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002c58:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8002cd8 <Read_Request_CB+0x19c>
 8002c5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c60:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8002c64:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002c68:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002c6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c74:	ee17 3a90 	vmov	r3, s15
 8002c78:	b21b      	sxth	r3, r3
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	ee16 0a90 	vmov	r0, s13
 8002c80:	f000 f830 	bl	8002ce4 <BlueMS_Environmental_Update>
  }

  if(connection_handle !=0)
 8002c84:	4b15      	ldr	r3, [pc, #84]	@ (8002cdc <Read_Request_CB+0x1a0>)
 8002c86:	881b      	ldrh	r3, [r3, #0]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d011      	beq.n	8002cb0 <Read_Request_CB+0x174>
  {
    ret = aci_gatt_allow_read(connection_handle);
 8002c8c:	4b13      	ldr	r3, [pc, #76]	@ (8002cdc <Read_Request_CB+0x1a0>)
 8002c8e:	881b      	ldrh	r3, [r3, #0]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f007 fcfb 	bl	800a68c <aci_gatt_allow_read>
 8002c96:	4603      	mov	r3, r0
 8002c98:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (ret != BLE_STATUS_SUCCESS)
 8002c9c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d005      	beq.n	8002cb0 <Read_Request_CB+0x174>
    {
      PRINTF("aci_gatt_allow_read() failed: 0x%02x\r\n", ret);
 8002ca4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002ca8:	4619      	mov	r1, r3
 8002caa:	480d      	ldr	r0, [pc, #52]	@ (8002ce0 <Read_Request_CB+0x1a4>)
 8002cac:	f00b f936 	bl	800df1c <iprintf>
    }
  }
}
 8002cb0:	bf00      	nop
 8002cb2:	3738      	adds	r7, #56	@ 0x38
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cba:	bf00      	nop
 8002cbc:	20000760 	.word	0x20000760
 8002cc0:	200007a8 	.word	0x200007a8
 8002cc4:	2000079c 	.word	0x2000079c
 8002cc8:	20000790 	.word	0x20000790
 8002ccc:	2000075e 	.word	0x2000075e
 8002cd0:	403b0000 	.word	0x403b0000
 8002cd4:	408f4000 	.word	0x408f4000
 8002cd8:	42c80000 	.word	0x42c80000
 8002cdc:	20000788 	.word	0x20000788
 8002ce0:	0801240c 	.word	0x0801240c

08002ce4 <BlueMS_Environmental_Update>:

tBleStatus BlueMS_Environmental_Update(int32_t press, int16_t temp)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b088      	sub	sp, #32
 8002ce8:	af02      	add	r7, sp, #8
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	460b      	mov	r3, r1
 8002cee:	807b      	strh	r3, [r7, #2]
  tBleStatus ret;
  uint8_t buff[8];
  HOST_TO_LE_16(buff, HAL_GetTick()>>3);
 8002cf0:	f002 fa68 	bl	80051c4 <HAL_GetTick>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	08db      	lsrs	r3, r3, #3
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	733b      	strb	r3, [r7, #12]
 8002cfc:	f002 fa62 	bl	80051c4 <HAL_GetTick>
 8002d00:	4603      	mov	r3, r0
 8002d02:	0adb      	lsrs	r3, r3, #11
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	737b      	strb	r3, [r7, #13]

  HOST_TO_LE_32(buff+2,press);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	73bb      	strb	r3, [r7, #14]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	121b      	asrs	r3, r3, #8
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	73fb      	strb	r3, [r7, #15]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	141b      	asrs	r3, r3, #16
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	743b      	strb	r3, [r7, #16]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	161b      	asrs	r3, r3, #24
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	747b      	strb	r3, [r7, #17]
  HOST_TO_LE_16(buff+6,temp);
 8002d26:	887b      	ldrh	r3, [r7, #2]
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	74bb      	strb	r3, [r7, #18]
 8002d2c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002d30:	121b      	asrs	r3, r3, #8
 8002d32:	b21b      	sxth	r3, r3
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	74fb      	strb	r3, [r7, #19]

  ret = aci_gatt_update_char_value(HWServW2STHandle, EnvironmentalCharHandle,
 8002d38:	4b0b      	ldr	r3, [pc, #44]	@ (8002d68 <BlueMS_Environmental_Update+0x84>)
 8002d3a:	8818      	ldrh	r0, [r3, #0]
 8002d3c:	4b0b      	ldr	r3, [pc, #44]	@ (8002d6c <BlueMS_Environmental_Update+0x88>)
 8002d3e:	8819      	ldrh	r1, [r3, #0]
 8002d40:	f107 030c 	add.w	r3, r7, #12
 8002d44:	9300      	str	r3, [sp, #0]
 8002d46:	2308      	movs	r3, #8
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f007 fb6f 	bl	800a42c <aci_gatt_update_char_value>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	75fb      	strb	r3, [r7, #23]
                                   0, 8, buff);

  if (ret != BLE_STATUS_SUCCESS){
 8002d52:	7dfb      	ldrb	r3, [r7, #23]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <BlueMS_Environmental_Update+0x78>
    //PRINTF("Error while updating TEMP characteristic: 0x%04X\n",ret) ;
    return BLE_STATUS_ERROR ;
 8002d58:	2347      	movs	r3, #71	@ 0x47
 8002d5a:	e000      	b.n	8002d5e <BlueMS_Environmental_Update+0x7a>
  }

  return BLE_STATUS_SUCCESS;
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3718      	adds	r7, #24
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	2000075c 	.word	0x2000075c
 8002d6c:	2000075e 	.word	0x2000075e

08002d70 <Set_DeviceConnectable>:
 * Input          : None.
 * Output         : None.
 * Return         : None.
 *******************************************************************************/
void Set_DeviceConnectable(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b092      	sub	sp, #72	@ 0x48
 8002d74:	af08      	add	r7, sp, #32
  uint8_t ret;
  const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,SENSOR_DEMO_NAME};
 8002d76:	4a3f      	ldr	r2, [pc, #252]	@ (8002e74 <Set_DeviceConnectable+0x104>)
 8002d78:	f107 031c 	add.w	r3, r7, #28
 8002d7c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002d80:	e883 0003 	stmia.w	r3, {r0, r1}

  uint8_t manuf_data[26] = {
 8002d84:	2302      	movs	r3, #2
 8002d86:	703b      	strb	r3, [r7, #0]
 8002d88:	230a      	movs	r3, #10
 8002d8a:	707b      	strb	r3, [r7, #1]
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	70bb      	strb	r3, [r7, #2]
 8002d90:	2308      	movs	r3, #8
 8002d92:	70fb      	strb	r3, [r7, #3]
 8002d94:	2309      	movs	r3, #9
 8002d96:	713b      	strb	r3, [r7, #4]
 8002d98:	2342      	movs	r3, #66	@ 0x42
 8002d9a:	717b      	strb	r3, [r7, #5]
 8002d9c:	236c      	movs	r3, #108	@ 0x6c
 8002d9e:	71bb      	strb	r3, [r7, #6]
 8002da0:	2375      	movs	r3, #117	@ 0x75
 8002da2:	71fb      	strb	r3, [r7, #7]
 8002da4:	2365      	movs	r3, #101	@ 0x65
 8002da6:	723b      	strb	r3, [r7, #8]
 8002da8:	2370      	movs	r3, #112	@ 0x70
 8002daa:	727b      	strb	r3, [r7, #9]
 8002dac:	2369      	movs	r3, #105	@ 0x69
 8002dae:	72bb      	strb	r3, [r7, #10]
 8002db0:	236f      	movs	r3, #111	@ 0x6f
 8002db2:	72fb      	strb	r3, [r7, #11]
 8002db4:	230d      	movs	r3, #13
 8002db6:	733b      	strb	r3, [r7, #12]
 8002db8:	23ff      	movs	r3, #255	@ 0xff
 8002dba:	737b      	strb	r3, [r7, #13]
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	73bb      	strb	r3, [r7, #14]
 8002dc0:	2380      	movs	r3, #128	@ 0x80
 8002dc2:	73fb      	strb	r3, [r7, #15]
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	743b      	strb	r3, [r7, #16]
 8002dc8:	23f4      	movs	r3, #244	@ 0xf4
 8002dca:	747b      	strb	r3, [r7, #17]
 8002dcc:	2300      	movs	r3, #0
 8002dce:	74bb      	strb	r3, [r7, #18]
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	74fb      	strb	r3, [r7, #19]
    0x80,
    0x00,
    0xF4, /* ACC+Gyro+Mag 0xE0 | 0x04 Temp | 0x10 Pressure */
    0x00, /*  */
    0x00, /*  */
    bdaddr[5], /* BLE MAC start -MSB first- */
 8002dd4:	4b28      	ldr	r3, [pc, #160]	@ (8002e78 <Set_DeviceConnectable+0x108>)
 8002dd6:	795b      	ldrb	r3, [r3, #5]
  uint8_t manuf_data[26] = {
 8002dd8:	753b      	strb	r3, [r7, #20]
    bdaddr[4],
 8002dda:	4b27      	ldr	r3, [pc, #156]	@ (8002e78 <Set_DeviceConnectable+0x108>)
 8002ddc:	791b      	ldrb	r3, [r3, #4]
  uint8_t manuf_data[26] = {
 8002dde:	757b      	strb	r3, [r7, #21]
    bdaddr[3],
 8002de0:	4b25      	ldr	r3, [pc, #148]	@ (8002e78 <Set_DeviceConnectable+0x108>)
 8002de2:	78db      	ldrb	r3, [r3, #3]
  uint8_t manuf_data[26] = {
 8002de4:	75bb      	strb	r3, [r7, #22]
    bdaddr[2],
 8002de6:	4b24      	ldr	r3, [pc, #144]	@ (8002e78 <Set_DeviceConnectable+0x108>)
 8002de8:	789b      	ldrb	r3, [r3, #2]
  uint8_t manuf_data[26] = {
 8002dea:	75fb      	strb	r3, [r7, #23]
    bdaddr[1],
 8002dec:	4b22      	ldr	r3, [pc, #136]	@ (8002e78 <Set_DeviceConnectable+0x108>)
 8002dee:	785b      	ldrb	r3, [r3, #1]
  uint8_t manuf_data[26] = {
 8002df0:	763b      	strb	r3, [r7, #24]
    bdaddr[0]  /* BLE MAC stop */
 8002df2:	4b21      	ldr	r3, [pc, #132]	@ (8002e78 <Set_DeviceConnectable+0x108>)
 8002df4:	781b      	ldrb	r3, [r3, #0]
  uint8_t manuf_data[26] = {
 8002df6:	767b      	strb	r3, [r7, #25]
  };

  manuf_data[18] |= 0x01; /* Sensor Fusion */
 8002df8:	7cbb      	ldrb	r3, [r7, #18]
 8002dfa:	f043 0301 	orr.w	r3, r3, #1
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	74bb      	strb	r3, [r7, #18]

  hci_le_set_scan_resp_data(0, NULL);
 8002e02:	2100      	movs	r1, #0
 8002e04:	2000      	movs	r0, #0
 8002e06:	f007 fda4 	bl	800a952 <hci_le_set_scan_resp_data>

  PRINTF("Set General Discoverable Mode.\n");
 8002e0a:	481c      	ldr	r0, [pc, #112]	@ (8002e7c <Set_DeviceConnectable+0x10c>)
 8002e0c:	f00b f8ee 	bl	800dfec <puts>

  ret = aci_gap_set_discoverable(ADV_DATA_TYPE,
 8002e10:	2300      	movs	r3, #0
 8002e12:	9306      	str	r3, [sp, #24]
 8002e14:	2300      	movs	r3, #0
 8002e16:	9305      	str	r3, [sp, #20]
 8002e18:	2300      	movs	r3, #0
 8002e1a:	9304      	str	r3, [sp, #16]
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	9303      	str	r3, [sp, #12]
 8002e20:	f107 031c 	add.w	r3, r7, #28
 8002e24:	9302      	str	r3, [sp, #8]
 8002e26:	2308      	movs	r3, #8
 8002e28:	9301      	str	r3, [sp, #4]
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	9300      	str	r3, [sp, #0]
 8002e2e:	2301      	movs	r3, #1
 8002e30:	f44f 62f0 	mov.w	r2, #1920	@ 0x780
 8002e34:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8002e38:	2000      	movs	r0, #0
 8002e3a:	f006 ffee 	bl	8009e1a <aci_gap_set_discoverable>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                                (ADV_INTERVAL_MIN_MS*1000)/625,(ADV_INTERVAL_MAX_MS*1000)/625,
                                 STATIC_RANDOM_ADDR, NO_WHITE_LIST_USE,
                                 sizeof(local_name), local_name, 0, NULL, 0, 0);

  aci_gap_update_adv_data(26, manuf_data);
 8002e44:	463b      	mov	r3, r7
 8002e46:	4619      	mov	r1, r3
 8002e48:	201a      	movs	r0, #26
 8002e4a:	f007 f927 	bl	800a09c <aci_gap_update_adv_data>

  if(ret != BLE_STATUS_SUCCESS)
 8002e4e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d006      	beq.n	8002e64 <Set_DeviceConnectable+0xf4>
  {
    PRINTF("aci_gap_set_discoverable() failed: 0x%02x\r\n", ret);
 8002e56:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	4808      	ldr	r0, [pc, #32]	@ (8002e80 <Set_DeviceConnectable+0x110>)
 8002e5e:	f00b f85d 	bl	800df1c <iprintf>
  }
  else
    PRINTF("aci_gap_set_discoverable() --> SUCCESS\r\n");
}
 8002e62:	e002      	b.n	8002e6a <Set_DeviceConnectable+0xfa>
    PRINTF("aci_gap_set_discoverable() --> SUCCESS\r\n");
 8002e64:	4807      	ldr	r0, [pc, #28]	@ (8002e84 <Set_DeviceConnectable+0x114>)
 8002e66:	f00b f8c1 	bl	800dfec <puts>
}
 8002e6a:	bf00      	nop
 8002e6c:	3728      	adds	r7, #40	@ 0x28
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	080124a8 	.word	0x080124a8
 8002e78:	20000750 	.word	0x20000750
 8002e7c:	08012434 	.word	0x08012434
 8002e80:	08012454 	.word	0x08012454
 8002e84:	08012480 	.word	0x08012480

08002e88 <user_notify>:
 *         parsed.
 * @param  void* Pointer to the ACI packet
 * @retval None
 */
void user_notify(void * pData)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b08e      	sub	sp, #56	@ 0x38
 8002e8c:	af02      	add	r7, sp, #8
 8002e8e:	6078      	str	r0, [r7, #4]
  hci_uart_pckt *hci_pckt = pData;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* obtain event packet */
  hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 8002e94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e96:	3301      	adds	r3, #1
 8002e98:	62bb      	str	r3, [r7, #40]	@ 0x28
  if(hci_pckt->type != HCI_EVENT_PKT)
 8002e9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	2b04      	cmp	r3, #4
 8002ea0:	d15d      	bne.n	8002f5e <user_notify+0xd6>
    return;
  evt_blue_aci *blue_evt = (void*)event_pckt->data;
 8002ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ea4:	3302      	adds	r3, #2
 8002ea6:	627b      	str	r3, [r7, #36]	@ 0x24
  switch(event_pckt->evt){
 8002ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	2bff      	cmp	r3, #255	@ 0xff
 8002eae:	d01f      	beq.n	8002ef0 <user_notify+0x68>
 8002eb0:	2bff      	cmp	r3, #255	@ 0xff
 8002eb2:	dc59      	bgt.n	8002f68 <user_notify+0xe0>
 8002eb4:	2b05      	cmp	r3, #5
 8002eb6:	d002      	beq.n	8002ebe <user_notify+0x36>
 8002eb8:	2b3e      	cmp	r3, #62	@ 0x3e
 8002eba:	d003      	beq.n	8002ec4 <user_notify+0x3c>
 8002ebc:	e054      	b.n	8002f68 <user_notify+0xe0>

  case EVT_DISCONN_COMPLETE:
    {
      GAP_DisconnectionComplete_CB();
 8002ebe:	f000 f857 	bl	8002f70 <GAP_DisconnectionComplete_CB>
    }
    break;
 8002ec2:	e051      	b.n	8002f68 <user_notify+0xe0>

  case EVT_LE_META_EVENT:
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 8002ec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ec6:	3302      	adds	r3, #2
 8002ec8:	613b      	str	r3, [r7, #16]

      switch(evt->subevent){
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d147      	bne.n	8002f62 <user_notify+0xda>
      case EVT_LE_CONN_COMPLETE:
        {
          evt_le_connection_complete *cc = (void *)evt->data;
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	60fb      	str	r3, [r7, #12]
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	1d5a      	adds	r2, r3, #5
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	4610      	mov	r0, r2
 8002ee8:	f000 f85a 	bl	8002fa0 <GAP_ConnectionComplete_CB>
        }
        break;
 8002eec:	bf00      	nop
      }
    }
    break;
 8002eee:	e038      	b.n	8002f62 <user_notify+0xda>
  case EVT_VENDOR:
    {
      switch(blue_evt->ecode){
 8002ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef2:	881b      	ldrh	r3, [r3, #0]
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	f640 4213 	movw	r2, #3091	@ 0xc13
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d00d      	beq.n	8002f1a <user_notify+0x92>
 8002efe:	f640 4214 	movw	r2, #3092	@ 0xc14
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d12f      	bne.n	8002f66 <user_notify+0xde>

      case EVT_BLUE_GATT_READ_PERMIT_REQ:
        {
          evt_gatt_read_permit_req *pr = (void*)blue_evt->data;
 8002f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f08:	3302      	adds	r3, #2
 8002f0a:	623b      	str	r3, [r7, #32]
          Read_Request_CB(pr->attr_handle);
 8002f0c:	6a3b      	ldr	r3, [r7, #32]
 8002f0e:	885b      	ldrh	r3, [r3, #2]
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7ff fe12 	bl	8002b3c <Read_Request_CB>
        }
        //Sample_rate_Update(sample_rate);
        break;
 8002f18:	e020      	b.n	8002f5c <user_notify+0xd4>
      case EVT_BLUE_GATT_WRITE_PERMIT_REQ:
		{
			//// OUR CODE
			evt_gatt_write_permit_req *wr = (void*)blue_evt->data;
 8002f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f1c:	3302      	adds	r3, #2
 8002f1e:	61fb      	str	r3, [r7, #28]
			uint16_t attr_handle = wr->attr_handle;
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	789a      	ldrb	r2, [r3, #2]
 8002f24:	78db      	ldrb	r3, [r3, #3]
 8002f26:	021b      	lsls	r3, r3, #8
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	837b      	strh	r3, [r7, #26]
			uint8_t *data = wr->data;
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	3305      	adds	r3, #5
 8002f30:	617b      	str	r3, [r7, #20]


		     Sample_rate_Update( data[0]  );
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	4618      	mov	r0, r3
 8002f38:	f7ff fda0 	bl	8002a7c <Sample_rate_Update>
		     aci_gatt_write_response(wr->conn_handle, wr->attr_handle,0x00,
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	881b      	ldrh	r3, [r3, #0]
 8002f40:	b298      	uxth	r0, r3
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	885b      	ldrh	r3, [r3, #2]
 8002f46:	b299      	uxth	r1, r3
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	3305      	adds	r3, #5
 8002f4c:	9301      	str	r3, [sp, #4]
 8002f4e:	2301      	movs	r3, #1
 8002f50:	9300      	str	r3, [sp, #0]
 8002f52:	2300      	movs	r3, #0
 8002f54:	2200      	movs	r2, #0
 8002f56:	f007 faf9 	bl	800a54c <aci_gatt_write_response>
                     1,
                     (uint8_t *)&(wr->data[0]));;

			//// OUR CODE
		}
		break;
 8002f5a:	bf00      	nop
      }

    }
    break;
 8002f5c:	e003      	b.n	8002f66 <user_notify+0xde>
    return;
 8002f5e:	bf00      	nop
 8002f60:	e002      	b.n	8002f68 <user_notify+0xe0>
    break;
 8002f62:	bf00      	nop
 8002f64:	e000      	b.n	8002f68 <user_notify+0xe0>
    break;
 8002f66:	bf00      	nop
  }
}
 8002f68:	3730      	adds	r7, #48	@ 0x30
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
	...

08002f70 <GAP_DisconnectionComplete_CB>:
 * @brief  This function is called when the peer device gets disconnected.
 * @param  None
 * @retval None
 */
void GAP_DisconnectionComplete_CB(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0
  connected = FALSE;
 8002f74:	4b06      	ldr	r3, [pc, #24]	@ (8002f90 <GAP_DisconnectionComplete_CB+0x20>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	601a      	str	r2, [r3, #0]
  PRINTF("Disconnected\n");
 8002f7a:	4806      	ldr	r0, [pc, #24]	@ (8002f94 <GAP_DisconnectionComplete_CB+0x24>)
 8002f7c:	f00b f836 	bl	800dfec <puts>
  /* Make the device connectable again. */
  set_connectable = TRUE;
 8002f80:	4b05      	ldr	r3, [pc, #20]	@ (8002f98 <GAP_DisconnectionComplete_CB+0x28>)
 8002f82:	2201      	movs	r2, #1
 8002f84:	701a      	strb	r2, [r3, #0]
  notification_enabled = FALSE;
 8002f86:	4b05      	ldr	r3, [pc, #20]	@ (8002f9c <GAP_DisconnectionComplete_CB+0x2c>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	701a      	strb	r2, [r3, #0]
}
 8002f8c:	bf00      	nop
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	2000078c 	.word	0x2000078c
 8002f94:	080124b0 	.word	0x080124b0
 8002f98:	20000001 	.word	0x20000001
 8002f9c:	2000078a 	.word	0x2000078a

08002fa0 <GAP_ConnectionComplete_CB>:
 * @param  uint8_t Address of peer device
 * @param  uint16_t Connection handle
 * @retval None
 */
void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	460b      	mov	r3, r1
 8002faa:	807b      	strh	r3, [r7, #2]
  connected = TRUE;
 8002fac:	4b11      	ldr	r3, [pc, #68]	@ (8002ff4 <GAP_ConnectionComplete_CB+0x54>)
 8002fae:	2201      	movs	r2, #1
 8002fb0:	601a      	str	r2, [r3, #0]
  connection_handle = handle;
 8002fb2:	4a11      	ldr	r2, [pc, #68]	@ (8002ff8 <GAP_ConnectionComplete_CB+0x58>)
 8002fb4:	887b      	ldrh	r3, [r7, #2]
 8002fb6:	8013      	strh	r3, [r2, #0]

  PRINTF("Connected to device:");
 8002fb8:	4810      	ldr	r0, [pc, #64]	@ (8002ffc <GAP_ConnectionComplete_CB+0x5c>)
 8002fba:	f00a ffaf 	bl	800df1c <iprintf>
  for(uint32_t i = 5; i > 0; i--){
 8002fbe:	2305      	movs	r3, #5
 8002fc0:	60fb      	str	r3, [r7, #12]
 8002fc2:	e00a      	b.n	8002fda <GAP_ConnectionComplete_CB+0x3a>
    PRINTF("%02X-", addr[i]);
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	4413      	add	r3, r2
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	4619      	mov	r1, r3
 8002fce:	480c      	ldr	r0, [pc, #48]	@ (8003000 <GAP_ConnectionComplete_CB+0x60>)
 8002fd0:	f00a ffa4 	bl	800df1c <iprintf>
  for(uint32_t i = 5; i > 0; i--){
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	60fb      	str	r3, [r7, #12]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d1f1      	bne.n	8002fc4 <GAP_ConnectionComplete_CB+0x24>
  }
  PRINTF("%02X\n", addr[0]);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	4807      	ldr	r0, [pc, #28]	@ (8003004 <GAP_ConnectionComplete_CB+0x64>)
 8002fe8:	f00a ff98 	bl	800df1c <iprintf>
}
 8002fec:	bf00      	nop
 8002fee:	3710      	adds	r7, #16
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	2000078c 	.word	0x2000078c
 8002ff8:	20000788 	.word	0x20000788
 8002ffc:	080124c0 	.word	0x080124c0
 8003000:	080124d8 	.word	0x080124d8
 8003004:	080124e0 	.word	0x080124e0

08003008 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b088      	sub	sp, #32
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003010:	4b1f      	ldr	r3, [pc, #124]	@ (8003090 <HCI_TL_SPI_Init+0x88>)
 8003012:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003014:	4a1e      	ldr	r2, [pc, #120]	@ (8003090 <HCI_TL_SPI_Init+0x88>)
 8003016:	f043 0301 	orr.w	r3, r3, #1
 800301a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800301c:	4b1c      	ldr	r3, [pc, #112]	@ (8003090 <HCI_TL_SPI_Init+0x88>)
 800301e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003020:	f003 0301 	and.w	r3, r3, #1
 8003024:	60bb      	str	r3, [r7, #8]
 8003026:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8003028:	2340      	movs	r3, #64	@ 0x40
 800302a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800302c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003030:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003032:	2300      	movs	r3, #0
 8003034:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 8003036:	f107 030c 	add.w	r3, r7, #12
 800303a:	4619      	mov	r1, r3
 800303c:	4815      	ldr	r0, [pc, #84]	@ (8003094 <HCI_TL_SPI_Init+0x8c>)
 800303e:	f002 fb6d 	bl	800571c <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 8003042:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003046:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003048:	2301      	movs	r3, #1
 800304a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800304c:	2300      	movs	r3, #0
 800304e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003050:	2300      	movs	r3, #0
 8003052:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 8003054:	f107 030c 	add.w	r3, r7, #12
 8003058:	4619      	mov	r1, r3
 800305a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800305e:	f002 fb5d 	bl	800571c <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 8003062:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003066:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003068:	2301      	movs	r3, #1
 800306a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800306c:	2300      	movs	r3, #0
 800306e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003070:	2300      	movs	r3, #0
 8003072:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 8003074:	f107 030c 	add.w	r3, r7, #12
 8003078:	4619      	mov	r1, r3
 800307a:	4807      	ldr	r0, [pc, #28]	@ (8003098 <HCI_TL_SPI_Init+0x90>)
 800307c:	f002 fb4e 	bl	800571c <HAL_GPIO_Init>

  return BSP_SPI3_Init();
 8003080:	f001 fdda 	bl	8004c38 <BSP_SPI3_Init>
 8003084:	4603      	mov	r3, r0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3720      	adds	r7, #32
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	40021000 	.word	0x40021000
 8003094:	48001000 	.word	0x48001000
 8003098:	48000c00 	.word	0x48000c00

0800309c <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 80030a0:	2140      	movs	r1, #64	@ 0x40
 80030a2:	4808      	ldr	r0, [pc, #32]	@ (80030c4 <HCI_TL_SPI_DeInit+0x28>)
 80030a4:	f002 fce4 	bl	8005a70 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 80030a8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80030ac:	4806      	ldr	r0, [pc, #24]	@ (80030c8 <HCI_TL_SPI_DeInit+0x2c>)
 80030ae:	f002 fcdf 	bl	8005a70 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 80030b2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80030b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80030ba:	f002 fcd9 	bl	8005a70 <HAL_GPIO_DeInit>
  return 0;
 80030be:	2300      	movs	r3, #0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	48001000 	.word	0x48001000
 80030c8:	48000c00 	.word	0x48000c00

080030cc <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80030d0:	2201      	movs	r2, #1
 80030d2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80030d6:	480d      	ldr	r0, [pc, #52]	@ (800310c <HCI_TL_SPI_Reset+0x40>)
 80030d8:	f002 fdd6 	bl	8005c88 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 80030dc:	2200      	movs	r2, #0
 80030de:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80030e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80030e6:	f002 fdcf 	bl	8005c88 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80030ea:	2005      	movs	r0, #5
 80030ec:	f002 f876 	bl	80051dc <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 80030f0:	2201      	movs	r2, #1
 80030f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80030f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80030fa:	f002 fdc5 	bl	8005c88 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80030fe:	2005      	movs	r0, #5
 8003100:	f002 f86c 	bl	80051dc <HAL_Delay>
  return 0;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	48000c00 	.word	0x48000c00

08003110 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b088      	sub	sp, #32
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	460b      	mov	r3, r1
 800311a:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 800311c:	2300      	movs	r3, #0
 800311e:	777b      	strb	r3, [r7, #29]
  uint8_t char_ff = 0xff;
 8003120:	23ff      	movs	r3, #255	@ 0xff
 8003122:	773b      	strb	r3, [r7, #28]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8003124:	4a26      	ldr	r2, [pc, #152]	@ (80031c0 <HCI_TL_SPI_Receive+0xb0>)
 8003126:	f107 0314 	add.w	r3, r7, #20
 800312a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800312e:	6018      	str	r0, [r3, #0]
 8003130:	3304      	adds	r3, #4
 8003132:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8003134:	2200      	movs	r2, #0
 8003136:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800313a:	4822      	ldr	r0, [pc, #136]	@ (80031c4 <HCI_TL_SPI_Receive+0xb4>)
 800313c:	f002 fda4 	bl	8005c88 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI3_SendRecv(header_master, header_slave, HEADER_SIZE);
 8003140:	f107 010c 	add.w	r1, r7, #12
 8003144:	f107 0314 	add.w	r3, r7, #20
 8003148:	2205      	movs	r2, #5
 800314a:	4618      	mov	r0, r3
 800314c:	f001 fda4 	bl	8004c98 <BSP_SPI3_SendRecv>

  if(header_slave[0] == 0x02)
 8003150:	7b3b      	ldrb	r3, [r7, #12]
 8003152:	2b02      	cmp	r3, #2
 8003154:	d129      	bne.n	80031aa <HCI_TL_SPI_Receive+0x9a>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 8003156:	7c3b      	ldrb	r3, [r7, #16]
 8003158:	021b      	lsls	r3, r3, #8
 800315a:	b21a      	sxth	r2, r3
 800315c:	7bfb      	ldrb	r3, [r7, #15]
 800315e:	b21b      	sxth	r3, r3
 8003160:	4313      	orrs	r3, r2
 8003162:	b21b      	sxth	r3, r3
 8003164:	83fb      	strh	r3, [r7, #30]

    if(byte_count > 0)
 8003166:	8bfb      	ldrh	r3, [r7, #30]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d01e      	beq.n	80031aa <HCI_TL_SPI_Receive+0x9a>
    {
      /* avoid to read more data than the size of the buffer */
      if (byte_count > size){
 800316c:	8bfa      	ldrh	r2, [r7, #30]
 800316e:	887b      	ldrh	r3, [r7, #2]
 8003170:	429a      	cmp	r2, r3
 8003172:	d901      	bls.n	8003178 <HCI_TL_SPI_Receive+0x68>
        byte_count = size;
 8003174:	887b      	ldrh	r3, [r7, #2]
 8003176:	83fb      	strh	r3, [r7, #30]
      }

      for(len = 0; len < byte_count; len++)
 8003178:	2300      	movs	r3, #0
 800317a:	777b      	strb	r3, [r7, #29]
 800317c:	e010      	b.n	80031a0 <HCI_TL_SPI_Receive+0x90>
      {
        BSP_SPI3_SendRecv(&char_ff, (uint8_t*)&read_char, 1);
 800317e:	f107 011b 	add.w	r1, r7, #27
 8003182:	f107 031c 	add.w	r3, r7, #28
 8003186:	2201      	movs	r2, #1
 8003188:	4618      	mov	r0, r3
 800318a:	f001 fd85 	bl	8004c98 <BSP_SPI3_SendRecv>
        buffer[len] = read_char;
 800318e:	7f7b      	ldrb	r3, [r7, #29]
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	4413      	add	r3, r2
 8003194:	7efa      	ldrb	r2, [r7, #27]
 8003196:	b2d2      	uxtb	r2, r2
 8003198:	701a      	strb	r2, [r3, #0]
      for(len = 0; len < byte_count; len++)
 800319a:	7f7b      	ldrb	r3, [r7, #29]
 800319c:	3301      	adds	r3, #1
 800319e:	777b      	strb	r3, [r7, #29]
 80031a0:	7f7b      	ldrb	r3, [r7, #29]
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	8bfa      	ldrh	r2, [r7, #30]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d8e9      	bhi.n	800317e <HCI_TL_SPI_Receive+0x6e>
      }
    }
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80031aa:	2201      	movs	r2, #1
 80031ac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80031b0:	4804      	ldr	r0, [pc, #16]	@ (80031c4 <HCI_TL_SPI_Receive+0xb4>)
 80031b2:	f002 fd69 	bl	8005c88 <HAL_GPIO_WritePin>
    }
    PRINT_CSV("\n");
  }
#endif

  return len;
 80031b6:	7f7b      	ldrb	r3, [r7, #29]
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3720      	adds	r7, #32
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	080124e8 	.word	0x080124e8
 80031c4:	48000c00 	.word	0x48000c00

080031c8 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b088      	sub	sp, #32
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	460b      	mov	r3, r1
 80031d2:	807b      	strh	r3, [r7, #2]
  int32_t result;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 80031d4:	4a24      	ldr	r2, [pc, #144]	@ (8003268 <HCI_TL_SPI_Send+0xa0>)
 80031d6:	f107 0310 	add.w	r3, r7, #16
 80031da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80031de:	6018      	str	r0, [r3, #0]
 80031e0:	3304      	adds	r3, #4
 80031e2:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 80031e4:	f001 ffee 	bl	80051c4 <HAL_GetTick>
 80031e8:	61b8      	str	r0, [r7, #24]

  do
  {
    result = 0;
 80031ea:	2300      	movs	r3, #0
 80031ec:	61fb      	str	r3, [r7, #28]

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80031ee:	2200      	movs	r2, #0
 80031f0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80031f4:	481d      	ldr	r0, [pc, #116]	@ (800326c <HCI_TL_SPI_Send+0xa4>)
 80031f6:	f002 fd47 	bl	8005c88 <HAL_GPIO_WritePin>

    /* Read header */
    BSP_SPI3_SendRecv(header_master, header_slave, HEADER_SIZE);
 80031fa:	f107 0108 	add.w	r1, r7, #8
 80031fe:	f107 0310 	add.w	r3, r7, #16
 8003202:	2205      	movs	r2, #5
 8003204:	4618      	mov	r0, r3
 8003206:	f001 fd47 	bl	8004c98 <BSP_SPI3_SendRecv>

    if(header_slave[0] == 0x02)
 800320a:	7a3b      	ldrb	r3, [r7, #8]
 800320c:	2b02      	cmp	r3, #2
 800320e:	d10f      	bne.n	8003230 <HCI_TL_SPI_Send+0x68>
    {
      /* SPI is ready */
      if(header_slave[1] >= size)
 8003210:	7a7b      	ldrb	r3, [r7, #9]
 8003212:	461a      	mov	r2, r3
 8003214:	887b      	ldrh	r3, [r7, #2]
 8003216:	4293      	cmp	r3, r2
 8003218:	d806      	bhi.n	8003228 <HCI_TL_SPI_Send+0x60>
      {
        BSP_SPI3_SendRecv(buffer, read_char_buf, size);
 800321a:	887b      	ldrh	r3, [r7, #2]
 800321c:	461a      	mov	r2, r3
 800321e:	4914      	ldr	r1, [pc, #80]	@ (8003270 <HCI_TL_SPI_Send+0xa8>)
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f001 fd39 	bl	8004c98 <BSP_SPI3_SendRecv>
 8003226:	e006      	b.n	8003236 <HCI_TL_SPI_Send+0x6e>
      }
      else
      {
        /* Buffer is too small */
        result = -2;
 8003228:	f06f 0301 	mvn.w	r3, #1
 800322c:	61fb      	str	r3, [r7, #28]
 800322e:	e002      	b.n	8003236 <HCI_TL_SPI_Send+0x6e>
      }
    } else {
      /* SPI is not ready */
      result = -1;
 8003230:	f04f 33ff 	mov.w	r3, #4294967295
 8003234:	61fb      	str	r3, [r7, #28]
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8003236:	2201      	movs	r2, #1
 8003238:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800323c:	480b      	ldr	r0, [pc, #44]	@ (800326c <HCI_TL_SPI_Send+0xa4>)
 800323e:	f002 fd23 	bl	8005c88 <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 8003242:	f001 ffbf 	bl	80051c4 <HAL_GetTick>
 8003246:	4602      	mov	r2, r0
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	2b0f      	cmp	r3, #15
 800324e:	d903      	bls.n	8003258 <HCI_TL_SPI_Send+0x90>
    {
      result = -3;
 8003250:	f06f 0302 	mvn.w	r3, #2
 8003254:	61fb      	str	r3, [r7, #28]
      break;
 8003256:	e002      	b.n	800325e <HCI_TL_SPI_Send+0x96>
    }
  } while(result < 0);
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	2b00      	cmp	r3, #0
 800325c:	dbc5      	blt.n	80031ea <HCI_TL_SPI_Send+0x22>

  return result;
 800325e:	69fb      	ldr	r3, [r7, #28]
}
 8003260:	4618      	mov	r0, r3
 8003262:	3720      	adds	r7, #32
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}
 8003268:	080124f0 	.word	0x080124f0
 800326c:	48000c00 	.word	0x48000c00
 8003270:	200007c8 	.word	0x200007c8

08003274 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8003278:	2140      	movs	r1, #64	@ 0x40
 800327a:	4805      	ldr	r0, [pc, #20]	@ (8003290 <IsDataAvailable+0x1c>)
 800327c:	f002 fcec 	bl	8005c58 <HAL_GPIO_ReadPin>
 8003280:	4603      	mov	r3, r0
 8003282:	2b01      	cmp	r3, #1
 8003284:	bf0c      	ite	eq
 8003286:	2301      	moveq	r3, #1
 8003288:	2300      	movne	r3, #0
 800328a:	b2db      	uxtb	r3, r3
}
 800328c:	4618      	mov	r0, r3
 800328e:	bd80      	pop	{r7, pc}
 8003290:	48001000 	.word	0x48001000

08003294 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b088      	sub	sp, #32
 8003298:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 800329a:	4b12      	ldr	r3, [pc, #72]	@ (80032e4 <hci_tl_lowlevel_init+0x50>)
 800329c:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 800329e:	4b12      	ldr	r3, [pc, #72]	@ (80032e8 <hci_tl_lowlevel_init+0x54>)
 80032a0:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 80032a2:	4b12      	ldr	r3, [pc, #72]	@ (80032ec <hci_tl_lowlevel_init+0x58>)
 80032a4:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 80032a6:	4b12      	ldr	r3, [pc, #72]	@ (80032f0 <hci_tl_lowlevel_init+0x5c>)
 80032a8:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 80032aa:	4b12      	ldr	r3, [pc, #72]	@ (80032f4 <hci_tl_lowlevel_init+0x60>)
 80032ac:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 80032ae:	4b12      	ldr	r3, [pc, #72]	@ (80032f8 <hci_tl_lowlevel_init+0x64>)
 80032b0:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 80032b2:	1d3b      	adds	r3, r7, #4
 80032b4:	4618      	mov	r0, r3
 80032b6:	f007 fc69 	bl	800ab8c <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti6, EXTI_LINE_6);
 80032ba:	4910      	ldr	r1, [pc, #64]	@ (80032fc <hci_tl_lowlevel_init+0x68>)
 80032bc:	4810      	ldr	r0, [pc, #64]	@ (8003300 <hci_tl_lowlevel_init+0x6c>)
 80032be:	f002 f9e9 	bl	8005694 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti6, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 80032c2:	4a10      	ldr	r2, [pc, #64]	@ (8003304 <hci_tl_lowlevel_init+0x70>)
 80032c4:	2100      	movs	r1, #0
 80032c6:	480e      	ldr	r0, [pc, #56]	@ (8003300 <hci_tl_lowlevel_init+0x6c>)
 80032c8:	f002 f9ca 	bl	8005660 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80032cc:	2200      	movs	r2, #0
 80032ce:	2100      	movs	r1, #0
 80032d0:	2017      	movs	r0, #23
 80032d2:	f002 f882 	bl	80053da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80032d6:	2017      	movs	r0, #23
 80032d8:	f002 f89b 	bl	8005412 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 80032dc:	bf00      	nop
 80032de:	3720      	adds	r7, #32
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	08003009 	.word	0x08003009
 80032e8:	0800309d 	.word	0x0800309d
 80032ec:	080031c9 	.word	0x080031c9
 80032f0:	08003111 	.word	0x08003111
 80032f4:	080030cd 	.word	0x080030cd
 80032f8:	08004cd9 	.word	0x08004cd9
 80032fc:	16000006 	.word	0x16000006
 8003300:	200007c0 	.word	0x200007c0
 8003304:	08003309 	.word	0x08003309

08003308 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 800330c:	e005      	b.n	800331a <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 800330e:	2000      	movs	r0, #0
 8003310:	f007 fda0 	bl	800ae54 <hci_notify_asynch_evt>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d105      	bne.n	8003326 <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 800331a:	f7ff ffab 	bl	8003274 <IsDataAvailable>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d1f4      	bne.n	800330e <hci_tl_lowlevel_isr+0x6>
 8003324:	e000      	b.n	8003328 <hci_tl_lowlevel_isr+0x20>
    {
      return;
 8003326:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 8003328:	bd80      	pop	{r7, pc}
	...

0800332c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800332c:	b480      	push	{r7}
 800332e:	b085      	sub	sp, #20
 8003330:	af00      	add	r7, sp, #0
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	60b9      	str	r1, [r7, #8]
 8003336:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	4a07      	ldr	r2, [pc, #28]	@ (8003358 <vApplicationGetIdleTaskMemory+0x2c>)
 800333c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	4a06      	ldr	r2, [pc, #24]	@ (800335c <vApplicationGetIdleTaskMemory+0x30>)
 8003342:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2280      	movs	r2, #128	@ 0x80
 8003348:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800334a:	bf00      	nop
 800334c:	3714      	adds	r7, #20
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	200008c8 	.word	0x200008c8
 800335c:	2000091c 	.word	0x2000091c

08003360 <writeArrayToFile>:

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
void writeArrayToFile(const char* filename,   float32_t* array, size_t size) {
 8003360:	b580      	push	{r7, lr}
 8003362:	b086      	sub	sp, #24
 8003364:	af00      	add	r7, sp, #0
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	60b9      	str	r1, [r7, #8]
 800336a:	607a      	str	r2, [r7, #4]
    // Open the file in write mode ("w")
    FILE *file = fopen(filename, "w");
 800336c:	4914      	ldr	r1, [pc, #80]	@ (80033c0 <writeArrayToFile+0x60>)
 800336e:	68f8      	ldr	r0, [r7, #12]
 8003370:	f00a fd0c 	bl	800dd8c <fopen>
 8003374:	6138      	str	r0, [r7, #16]

    if (file == NULL) {
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d103      	bne.n	8003384 <writeArrayToFile+0x24>
        // If the file cannot be opened, print an error message and exit
        perror("Error opening file");
 800337c:	4811      	ldr	r0, [pc, #68]	@ (80033c4 <writeArrayToFile+0x64>)
 800337e:	f00a fdc5 	bl	800df0c <perror>
        return;
 8003382:	e01a      	b.n	80033ba <writeArrayToFile+0x5a>
    }

    // Write each element of the array to the file
    for (size_t i = 0; i < size; i++) {
 8003384:	2300      	movs	r3, #0
 8003386:	617b      	str	r3, [r7, #20]
 8003388:	e010      	b.n	80033ac <writeArrayToFile+0x4c>
        fprintf(file, "%d\n", array[i]);
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	68ba      	ldr	r2, [r7, #8]
 8003390:	4413      	add	r3, r2
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4618      	mov	r0, r3
 8003396:	f7fd f8d7 	bl	8000548 <__aeabi_f2d>
 800339a:	4602      	mov	r2, r0
 800339c:	460b      	mov	r3, r1
 800339e:	490a      	ldr	r1, [pc, #40]	@ (80033c8 <writeArrayToFile+0x68>)
 80033a0:	6938      	ldr	r0, [r7, #16]
 80033a2:	f00a fcfb 	bl	800dd9c <fiprintf>
    for (size_t i = 0; i < size; i++) {
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	3301      	adds	r3, #1
 80033aa:	617b      	str	r3, [r7, #20]
 80033ac:	697a      	ldr	r2, [r7, #20]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d3ea      	bcc.n	800338a <writeArrayToFile+0x2a>
    }

    // Close the file
    fclose(file);
 80033b4:	6938      	ldr	r0, [r7, #16]
 80033b6:	f00a faeb 	bl	800d990 <fclose>
}
 80033ba:	3718      	adds	r7, #24
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	080124f8 	.word	0x080124f8
 80033c4:	080124fc 	.word	0x080124fc
 80033c8:	08012510 	.word	0x08012510

080033cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80033cc:	b5b0      	push	{r4, r5, r7, lr}
 80033ce:	f5ad 6d7a 	sub.w	sp, sp, #4000	@ 0xfa0
 80033d2:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80033d4:	f001 fe8e 	bl	80050f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80033d8:	f000 f996 	bl	8003708 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80033dc:	f000 fab2 	bl	8003944 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 80033e0:	f000 f9f4 	bl	80037cc <MX_DFSDM1_Init>
  //0MX_I2C2_Init();
  MX_QUADSPI_Init();
 80033e4:	f000 fa2a 	bl	800383c <MX_QUADSPI_Init>
  MX_USART3_UART_Init();
 80033e8:	f000 fa4e 	bl	8003888 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80033ec:	f000 fa7c 	bl	80038e8 <MX_USB_OTG_FS_PCD_Init>
  MX_BlueNRG_MS_Init();
 80033f0:	f7fd fdf8 	bl	8000fe4 <MX_BlueNRG_MS_Init>

  /* USER CODE BEGIN 2 */
  BSP_ACCELERO_Init();
 80033f4:	f001 fd12 	bl	8004e1c <BSP_ACCELERO_Init>
  float32_t bufferX[320];
  float32_t bufferY[320];
  float32_t bufferZ[320];

  const char* filename = "lab7.text";
 80033f8:	4bac      	ldr	r3, [pc, #688]	@ (80036ac <main+0x2e0>)
 80033fa:	f8c7 3f8c 	str.w	r3, [r7, #3980]	@ 0xf8c
  for(uint16_t i = 0; i < 320; i++){
 80033fe:	2300      	movs	r3, #0
 8003400:	f8a7 3f96 	strh.w	r3, [r7, #3990]	@ 0xf96
 8003404:	e058      	b.n	80034b8 <main+0xec>
	// 获取加速度数据
	  int16_t pDataXYZ[3];
	BSP_ACCELERO_AccGetXYZ(pDataXYZ);
 8003406:	463b      	mov	r3, r7
 8003408:	4618      	mov	r0, r3
 800340a:	f001 fd45 	bl	8004e98 <BSP_ACCELERO_AccGetXYZ>

	bufferX[i] = (float32_t)pDataXYZ[0];
 800340e:	f607 7398 	addw	r3, r7, #3992	@ 0xf98
 8003412:	f6a3 7398 	subw	r3, r3, #3992	@ 0xf98
 8003416:	f9b3 2000 	ldrsh.w	r2, [r3]
 800341a:	f8b7 3f96 	ldrh.w	r3, [r7, #3990]	@ 0xf96
 800341e:	ee07 2a90 	vmov	s15, r2
 8003422:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003426:	f607 7298 	addw	r2, r7, #3992	@ 0xf98
 800342a:	f2a2 5214 	subw	r2, r2, #1300	@ 0x514
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	4413      	add	r3, r2
 8003432:	edc3 7a00 	vstr	s15, [r3]
	bufferY[i] = (float32_t)pDataXYZ[1];
 8003436:	f607 7398 	addw	r3, r7, #3992	@ 0xf98
 800343a:	f6a3 7398 	subw	r3, r3, #3992	@ 0xf98
 800343e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8003442:	f8b7 3f96 	ldrh.w	r3, [r7, #3990]	@ 0xf96
 8003446:	ee07 2a90 	vmov	s15, r2
 800344a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800344e:	f607 7298 	addw	r2, r7, #3992	@ 0xf98
 8003452:	f6a2 2214 	subw	r2, r2, #2580	@ 0xa14
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	4413      	add	r3, r2
 800345a:	edc3 7a00 	vstr	s15, [r3]
	bufferZ[i] = (float32_t)pDataXYZ[2];
 800345e:	f607 7398 	addw	r3, r7, #3992	@ 0xf98
 8003462:	f6a3 7398 	subw	r3, r3, #3992	@ 0xf98
 8003466:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800346a:	f8b7 3f96 	ldrh.w	r3, [r7, #3990]	@ 0xf96
 800346e:	ee07 2a90 	vmov	s15, r2
 8003472:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003476:	f607 7298 	addw	r2, r7, #3992	@ 0xf98
 800347a:	f6a2 7214 	subw	r2, r2, #3860	@ 0xf14
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	4413      	add	r3, r2
 8003482:	edc3 7a00 	vstr	s15, [r3]

	//snprintf(buffer, sizeof(buffer), "X: %d Y: %d Z: %d \n", pDataXYZ[0], pDataXYZ[1], pDataXYZ[2]);

	// 打印数据到终端
	printf("%f \n", bufferX[i]);
 8003486:	f8b7 3f96 	ldrh.w	r3, [r7, #3990]	@ 0xf96
 800348a:	f607 7298 	addw	r2, r7, #3992	@ 0xf98
 800348e:	f2a2 5214 	subw	r2, r2, #1300	@ 0x514
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	4413      	add	r3, r2
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4618      	mov	r0, r3
 800349a:	f7fd f855 	bl	8000548 <__aeabi_f2d>
 800349e:	4602      	mov	r2, r0
 80034a0:	460b      	mov	r3, r1
 80034a2:	4883      	ldr	r0, [pc, #524]	@ (80036b0 <main+0x2e4>)
 80034a4:	f00a fd3a 	bl	800df1c <iprintf>

	HAL_Delay(100);
 80034a8:	2064      	movs	r0, #100	@ 0x64
 80034aa:	f001 fe97 	bl	80051dc <HAL_Delay>
  for(uint16_t i = 0; i < 320; i++){
 80034ae:	f8b7 3f96 	ldrh.w	r3, [r7, #3990]	@ 0xf96
 80034b2:	3301      	adds	r3, #1
 80034b4:	f8a7 3f96 	strh.w	r3, [r7, #3990]	@ 0xf96
 80034b8:	f8b7 3f96 	ldrh.w	r3, [r7, #3990]	@ 0xf96
 80034bc:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80034c0:	d3a1      	bcc.n	8003406 <main+0x3a>
}
  printf("get acc success");
 80034c2:	487c      	ldr	r0, [pc, #496]	@ (80036b4 <main+0x2e8>)
 80034c4:	f00a fd2a 	bl	800df1c <iprintf>
  writeArrayToFile(filename, bufferX, 320 );
 80034c8:	f607 2384 	addw	r3, r7, #2692	@ 0xa84
 80034cc:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80034d0:	4619      	mov	r1, r3
 80034d2:	f8d7 0f8c 	ldr.w	r0, [r7, #3980]	@ 0xf8c
 80034d6:	f7ff ff43 	bl	8003360 <writeArrayToFile>
    arm_status status;
    float32_t  *inputF32, *outputF32;

    /* Initialize input and output buffer pointers */
    //inputF32 = &testInput_f32_1kHz_15kHz[0];
    inputF32 = &bufferX[0];
 80034da:	f607 2384 	addw	r3, r7, #2692	@ 0xa84
 80034de:	f8c7 3f88 	str.w	r3, [r7, #3976]	@ 0xf88

    outputF32 = &testOutput[0];
 80034e2:	4b75      	ldr	r3, [pc, #468]	@ (80036b8 <main+0x2ec>)
 80034e4:	f8c7 3f84 	str.w	r3, [r7, #3972]	@ 0xf84

    /* Call FIR init function to initialize the instance structure. */
    arm_fir_init_f32(&S, NUM_TAPS, (float32_t *)&firCoeffs32[0], &firStateF32[0], blockSize);
 80034e8:	4b74      	ldr	r3, [pc, #464]	@ (80036bc <main+0x2f0>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f107 0078 	add.w	r0, r7, #120	@ 0x78
 80034f0:	9300      	str	r3, [sp, #0]
 80034f2:	4b73      	ldr	r3, [pc, #460]	@ (80036c0 <main+0x2f4>)
 80034f4:	4a73      	ldr	r2, [pc, #460]	@ (80036c4 <main+0x2f8>)
 80034f6:	211d      	movs	r1, #29
 80034f8:	f009 f88c 	bl	800c614 <arm_fir_init_f32>
    printf("init success");
 80034fc:	4872      	ldr	r0, [pc, #456]	@ (80036c8 <main+0x2fc>)
 80034fe:	f00a fd0d 	bl	800df1c <iprintf>
    /* ----------------------------------------------------------------------
    ** Call the FIR process function for every blockSize samples
    ** ------------------------------------------------------------------- */

    for(i=0; i < numBlocks; i++)
 8003502:	2300      	movs	r3, #0
 8003504:	f8c7 3f90 	str.w	r3, [r7, #3984]	@ 0xf90
 8003508:	e01e      	b.n	8003548 <main+0x17c>
    {
      arm_fir_f32(&S, inputF32 + (i * blockSize), outputF32 + (i * blockSize), blockSize);
 800350a:	4b6c      	ldr	r3, [pc, #432]	@ (80036bc <main+0x2f0>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f8d7 2f90 	ldr.w	r2, [r7, #3984]	@ 0xf90
 8003512:	fb02 f303 	mul.w	r3, r2, r3
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	f8d7 2f88 	ldr.w	r2, [r7, #3976]	@ 0xf88
 800351c:	18d1      	adds	r1, r2, r3
 800351e:	4b67      	ldr	r3, [pc, #412]	@ (80036bc <main+0x2f0>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f8d7 2f90 	ldr.w	r2, [r7, #3984]	@ 0xf90
 8003526:	fb02 f303 	mul.w	r3, r2, r3
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	f8d7 2f84 	ldr.w	r2, [r7, #3972]	@ 0xf84
 8003530:	441a      	add	r2, r3
 8003532:	4b62      	ldr	r3, [pc, #392]	@ (80036bc <main+0x2f0>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f107 0078 	add.w	r0, r7, #120	@ 0x78
 800353a:	f009 f87b 	bl	800c634 <arm_fir_f32>
    for(i=0; i < numBlocks; i++)
 800353e:	f8d7 3f90 	ldr.w	r3, [r7, #3984]	@ 0xf90
 8003542:	3301      	adds	r3, #1
 8003544:	f8c7 3f90 	str.w	r3, [r7, #3984]	@ 0xf90
 8003548:	4b60      	ldr	r3, [pc, #384]	@ (80036cc <main+0x300>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f8d7 2f90 	ldr.w	r2, [r7, #3984]	@ 0xf90
 8003550:	429a      	cmp	r2, r3
 8003552:	d3da      	bcc.n	800350a <main+0x13e>
    }

    printf("calculation success");
 8003554:	485e      	ldr	r0, [pc, #376]	@ (80036d0 <main+0x304>)
 8003556:	f00a fce1 	bl	800df1c <iprintf>
    /* ----------------------------------------------------------------------
    ** Compare the generated output against the reference output computed
    ** in MATLAB.
    ** ------------------------------------------------------------------- */

    snr = arm_snr_f32(&refOutput[0], &testOutput[0], TEST_LENGTH_SAMPLES);
 800355a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800355e:	4956      	ldr	r1, [pc, #344]	@ (80036b8 <main+0x2ec>)
 8003560:	485c      	ldr	r0, [pc, #368]	@ (80036d4 <main+0x308>)
 8003562:	f000 fbbd 	bl	8003ce0 <arm_snr_f32>
 8003566:	eef0 7a40 	vmov.f32	s15, s0
 800356a:	4b5b      	ldr	r3, [pc, #364]	@ (80036d8 <main+0x30c>)
 800356c:	edc3 7a00 	vstr	s15, [r3]
    }

    for (i = 0; i < TEST_LENGTH_SAMPLES; i++) {
    	printf("Output (scaled): %d\n", (int)(testOutput[i] * 1000)); // 將浮點數放大
    }*/
    printf("input ");
 8003570:	485a      	ldr	r0, [pc, #360]	@ (80036dc <main+0x310>)
 8003572:	f00a fcd3 	bl	800df1c <iprintf>
    for (i = 0; i < TEST_LENGTH_SAMPLES; i++) {
 8003576:	2300      	movs	r3, #0
 8003578:	f8c7 3f90 	str.w	r3, [r7, #3984]	@ 0xf90
 800357c:	e015      	b.n	80035aa <main+0x1de>
            printf("%f,", bufferX[i]);
 800357e:	f607 7398 	addw	r3, r7, #3992	@ 0xf98
 8003582:	f2a3 5214 	subw	r2, r3, #1300	@ 0x514
 8003586:	f8d7 3f90 	ldr.w	r3, [r7, #3984]	@ 0xf90
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	4413      	add	r3, r2
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4618      	mov	r0, r3
 8003592:	f7fc ffd9 	bl	8000548 <__aeabi_f2d>
 8003596:	4602      	mov	r2, r0
 8003598:	460b      	mov	r3, r1
 800359a:	4851      	ldr	r0, [pc, #324]	@ (80036e0 <main+0x314>)
 800359c:	f00a fcbe 	bl	800df1c <iprintf>
    for (i = 0; i < TEST_LENGTH_SAMPLES; i++) {
 80035a0:	f8d7 3f90 	ldr.w	r3, [r7, #3984]	@ 0xf90
 80035a4:	3301      	adds	r3, #1
 80035a6:	f8c7 3f90 	str.w	r3, [r7, #3984]	@ 0xf90
 80035aa:	f8d7 3f90 	ldr.w	r3, [r7, #3984]	@ 0xf90
 80035ae:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80035b2:	d3e4      	bcc.n	800357e <main+0x1b2>
        }

    	printf("\nOutput");
 80035b4:	484b      	ldr	r0, [pc, #300]	@ (80036e4 <main+0x318>)
 80035b6:	f00a fcb1 	bl	800df1c <iprintf>
        for (i = 0; i < TEST_LENGTH_SAMPLES; i++) {
 80035ba:	2300      	movs	r3, #0
 80035bc:	f8c7 3f90 	str.w	r3, [r7, #3984]	@ 0xf90
 80035c0:	e012      	b.n	80035e8 <main+0x21c>
        	printf("%f,", testOutput[i]); // 將浮點數放大
 80035c2:	4a3d      	ldr	r2, [pc, #244]	@ (80036b8 <main+0x2ec>)
 80035c4:	f8d7 3f90 	ldr.w	r3, [r7, #3984]	@ 0xf90
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	4413      	add	r3, r2
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7fc ffba 	bl	8000548 <__aeabi_f2d>
 80035d4:	4602      	mov	r2, r0
 80035d6:	460b      	mov	r3, r1
 80035d8:	4841      	ldr	r0, [pc, #260]	@ (80036e0 <main+0x314>)
 80035da:	f00a fc9f 	bl	800df1c <iprintf>
        for (i = 0; i < TEST_LENGTH_SAMPLES; i++) {
 80035de:	f8d7 3f90 	ldr.w	r3, [r7, #3984]	@ 0xf90
 80035e2:	3301      	adds	r3, #1
 80035e4:	f8c7 3f90 	str.w	r3, [r7, #3984]	@ 0xf90
 80035e8:	f8d7 3f90 	ldr.w	r3, [r7, #3984]	@ 0xf90
 80035ec:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80035f0:	d3e7      	bcc.n	80035c2 <main+0x1f6>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadStaticDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 512, defaultTaskBuffer, &defaultTaskControlBlock);
 80035f2:	f607 7398 	addw	r3, r7, #3992	@ 0xf98
 80035f6:	f6a3 733c 	subw	r3, r3, #3900	@ 0xf3c
 80035fa:	4a3b      	ldr	r2, [pc, #236]	@ (80036e8 <main+0x31c>)
 80035fc:	461c      	mov	r4, r3
 80035fe:	4615      	mov	r5, r2
 8003600:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003602:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003604:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003608:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800360c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003610:	2100      	movs	r1, #0
 8003612:	4618      	mov	r0, r3
 8003614:	f007 fda0 	bl	800b158 <osThreadCreate>
 8003618:	4603      	mov	r3, r0
 800361a:	4a34      	ldr	r2, [pc, #208]	@ (80036ec <main+0x320>)
 800361c:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadStaticDef(myTask02, StartTask02, osPriorityNormal, 0, 512, myTask02Buffer, &myTask02ControlBlock);
 800361e:	f607 7398 	addw	r3, r7, #3992	@ 0xf98
 8003622:	f6a3 7358 	subw	r3, r3, #3928	@ 0xf58
 8003626:	4a32      	ldr	r2, [pc, #200]	@ (80036f0 <main+0x324>)
 8003628:	461c      	mov	r4, r3
 800362a:	4615      	mov	r5, r2
 800362c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800362e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003630:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003634:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8003638:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800363c:	2100      	movs	r1, #0
 800363e:	4618      	mov	r0, r3
 8003640:	f007 fd8a 	bl	800b158 <osThreadCreate>
 8003644:	4603      	mov	r3, r0
 8003646:	4a2b      	ldr	r2, [pc, #172]	@ (80036f4 <main+0x328>)
 8003648:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadStaticDef(myTask03, StartTask03, osPriorityIdle, 0, 512, myTask03Buffer, &myTask03ControlBlock);
 800364a:	f607 7398 	addw	r3, r7, #3992	@ 0xf98
 800364e:	f6a3 7374 	subw	r3, r3, #3956	@ 0xf74
 8003652:	4a29      	ldr	r2, [pc, #164]	@ (80036f8 <main+0x32c>)
 8003654:	461c      	mov	r4, r3
 8003656:	4615      	mov	r5, r2
 8003658:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800365a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800365c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003660:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 8003664:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003668:	2100      	movs	r1, #0
 800366a:	4618      	mov	r0, r3
 800366c:	f007 fd74 	bl	800b158 <osThreadCreate>
 8003670:	4603      	mov	r3, r0
 8003672:	4a22      	ldr	r2, [pc, #136]	@ (80036fc <main+0x330>)
 8003674:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask04 */
  osThreadStaticDef(myTask04, StartTask04, osPriorityIdle, 0, 512, myTask04Buffer, &myTask04ControlBlock);
 8003676:	f607 7398 	addw	r3, r7, #3992	@ 0xf98
 800367a:	f5a3 6379 	sub.w	r3, r3, #3984	@ 0xf90
 800367e:	4a20      	ldr	r2, [pc, #128]	@ (8003700 <main+0x334>)
 8003680:	461c      	mov	r4, r3
 8003682:	4615      	mov	r5, r2
 8003684:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003686:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003688:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800368c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask04Handle = osThreadCreate(osThread(myTask04), NULL);
 8003690:	f107 0308 	add.w	r3, r7, #8
 8003694:	2100      	movs	r1, #0
 8003696:	4618      	mov	r0, r3
 8003698:	f007 fd5e 	bl	800b158 <osThreadCreate>
 800369c:	4603      	mov	r3, r0
 800369e:	4a19      	ldr	r2, [pc, #100]	@ (8003704 <main+0x338>)
 80036a0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80036a2:	f007 fd52 	bl	800b14a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80036a6:	bf00      	nop
 80036a8:	e7fd      	b.n	80036a6 <main+0x2da>
 80036aa:	bf00      	nop
 80036ac:	08012514 	.word	0x08012514
 80036b0:	08012520 	.word	0x08012520
 80036b4:	08012528 	.word	0x08012528
 80036b8:	20003264 	.word	0x20003264
 80036bc:	20000504 	.word	0x20000504
 80036c0:	20003764 	.word	0x20003764
 80036c4:	08012618 	.word	0x08012618
 80036c8:	08012538 	.word	0x08012538
 80036cc:	20000508 	.word	0x20000508
 80036d0:	08012548 	.word	0x08012548
 80036d4:	20000004 	.word	0x20000004
 80036d8:	20003854 	.word	0x20003854
 80036dc:	0801255c 	.word	0x0801255c
 80036e0:	08012564 	.word	0x08012564
 80036e4:	08012568 	.word	0x08012568
 80036e8:	0801257c 	.word	0x0801257c
 80036ec:	20001104 	.word	0x20001104
 80036f0:	080125a4 	.word	0x080125a4
 80036f4:	2000195c 	.word	0x2000195c
 80036f8:	080125cc 	.word	0x080125cc
 80036fc:	200021b4 	.word	0x200021b4
 8003700:	080125f4 	.word	0x080125f4
 8003704:	20002a0c 	.word	0x20002a0c

08003708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b096      	sub	sp, #88	@ 0x58
 800370c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800370e:	f107 0314 	add.w	r3, r7, #20
 8003712:	2244      	movs	r2, #68	@ 0x44
 8003714:	2100      	movs	r1, #0
 8003716:	4618      	mov	r0, r3
 8003718:	f00a fdff 	bl	800e31a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800371c:	463b      	mov	r3, r7
 800371e:	2200      	movs	r2, #0
 8003720:	601a      	str	r2, [r3, #0]
 8003722:	605a      	str	r2, [r3, #4]
 8003724:	609a      	str	r2, [r3, #8]
 8003726:	60da      	str	r2, [r3, #12]
 8003728:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800372a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800372e:	f003 fa57 	bl	8006be0 <HAL_PWREx_ControlVoltageScaling>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d001      	beq.n	800373c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8003738:	f000 facb 	bl	8003cd2 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800373c:	f003 fa32 	bl	8006ba4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8003740:	4b21      	ldr	r3, [pc, #132]	@ (80037c8 <SystemClock_Config+0xc0>)
 8003742:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003746:	4a20      	ldr	r2, [pc, #128]	@ (80037c8 <SystemClock_Config+0xc0>)
 8003748:	f023 0318 	bic.w	r3, r3, #24
 800374c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8003750:	2314      	movs	r3, #20
 8003752:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003754:	2301      	movs	r3, #1
 8003756:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003758:	2301      	movs	r3, #1
 800375a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800375c:	2300      	movs	r3, #0
 800375e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8003760:	2360      	movs	r3, #96	@ 0x60
 8003762:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003764:	2302      	movs	r3, #2
 8003766:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8003768:	2301      	movs	r3, #1
 800376a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800376c:	2301      	movs	r3, #1
 800376e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8003770:	2328      	movs	r3, #40	@ 0x28
 8003772:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003774:	2307      	movs	r3, #7
 8003776:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003778:	2302      	movs	r3, #2
 800377a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800377c:	2302      	movs	r3, #2
 800377e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003780:	f107 0314 	add.w	r3, r7, #20
 8003784:	4618      	mov	r0, r3
 8003786:	f003 fb4d 	bl	8006e24 <HAL_RCC_OscConfig>
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d001      	beq.n	8003794 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8003790:	f000 fa9f 	bl	8003cd2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003794:	230f      	movs	r3, #15
 8003796:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003798:	2303      	movs	r3, #3
 800379a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800379c:	2300      	movs	r3, #0
 800379e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80037a0:	2300      	movs	r3, #0
 80037a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80037a4:	2300      	movs	r3, #0
 80037a6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80037a8:	463b      	mov	r3, r7
 80037aa:	2104      	movs	r1, #4
 80037ac:	4618      	mov	r0, r3
 80037ae:	f003 ff15 	bl	80075dc <HAL_RCC_ClockConfig>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d001      	beq.n	80037bc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80037b8:	f000 fa8b 	bl	8003cd2 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80037bc:	f004 fc1c 	bl	8007ff8 <HAL_RCCEx_EnableMSIPLLMode>
}
 80037c0:	bf00      	nop
 80037c2:	3758      	adds	r7, #88	@ 0x58
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	40021000 	.word	0x40021000

080037cc <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80037d0:	4b18      	ldr	r3, [pc, #96]	@ (8003834 <MX_DFSDM1_Init+0x68>)
 80037d2:	4a19      	ldr	r2, [pc, #100]	@ (8003838 <MX_DFSDM1_Init+0x6c>)
 80037d4:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80037d6:	4b17      	ldr	r3, [pc, #92]	@ (8003834 <MX_DFSDM1_Init+0x68>)
 80037d8:	2201      	movs	r2, #1
 80037da:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80037dc:	4b15      	ldr	r3, [pc, #84]	@ (8003834 <MX_DFSDM1_Init+0x68>)
 80037de:	2200      	movs	r2, #0
 80037e0:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80037e2:	4b14      	ldr	r3, [pc, #80]	@ (8003834 <MX_DFSDM1_Init+0x68>)
 80037e4:	2202      	movs	r2, #2
 80037e6:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80037e8:	4b12      	ldr	r3, [pc, #72]	@ (8003834 <MX_DFSDM1_Init+0x68>)
 80037ea:	2200      	movs	r2, #0
 80037ec:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80037ee:	4b11      	ldr	r3, [pc, #68]	@ (8003834 <MX_DFSDM1_Init+0x68>)
 80037f0:	2200      	movs	r2, #0
 80037f2:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80037f4:	4b0f      	ldr	r3, [pc, #60]	@ (8003834 <MX_DFSDM1_Init+0x68>)
 80037f6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80037fa:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80037fc:	4b0d      	ldr	r3, [pc, #52]	@ (8003834 <MX_DFSDM1_Init+0x68>)
 80037fe:	2200      	movs	r2, #0
 8003800:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8003802:	4b0c      	ldr	r3, [pc, #48]	@ (8003834 <MX_DFSDM1_Init+0x68>)
 8003804:	2204      	movs	r2, #4
 8003806:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8003808:	4b0a      	ldr	r3, [pc, #40]	@ (8003834 <MX_DFSDM1_Init+0x68>)
 800380a:	2200      	movs	r2, #0
 800380c:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 800380e:	4b09      	ldr	r3, [pc, #36]	@ (8003834 <MX_DFSDM1_Init+0x68>)
 8003810:	2201      	movs	r2, #1
 8003812:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8003814:	4b07      	ldr	r3, [pc, #28]	@ (8003834 <MX_DFSDM1_Init+0x68>)
 8003816:	2200      	movs	r2, #0
 8003818:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 800381a:	4b06      	ldr	r3, [pc, #24]	@ (8003834 <MX_DFSDM1_Init+0x68>)
 800381c:	2200      	movs	r2, #0
 800381e:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8003820:	4804      	ldr	r0, [pc, #16]	@ (8003834 <MX_DFSDM1_Init+0x68>)
 8003822:	f001 fe11 	bl	8005448 <HAL_DFSDM_ChannelInit>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d001      	beq.n	8003830 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 800382c:	f000 fa51 	bl	8003cd2 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8003830:	bf00      	nop
 8003832:	bd80      	pop	{r7, pc}
 8003834:	20000b1c 	.word	0x20000b1c
 8003838:	40016020 	.word	0x40016020

0800383c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8003840:	4b0f      	ldr	r3, [pc, #60]	@ (8003880 <MX_QUADSPI_Init+0x44>)
 8003842:	4a10      	ldr	r2, [pc, #64]	@ (8003884 <MX_QUADSPI_Init+0x48>)
 8003844:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8003846:	4b0e      	ldr	r3, [pc, #56]	@ (8003880 <MX_QUADSPI_Init+0x44>)
 8003848:	2202      	movs	r2, #2
 800384a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 800384c:	4b0c      	ldr	r3, [pc, #48]	@ (8003880 <MX_QUADSPI_Init+0x44>)
 800384e:	2204      	movs	r2, #4
 8003850:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8003852:	4b0b      	ldr	r3, [pc, #44]	@ (8003880 <MX_QUADSPI_Init+0x44>)
 8003854:	2210      	movs	r2, #16
 8003856:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8003858:	4b09      	ldr	r3, [pc, #36]	@ (8003880 <MX_QUADSPI_Init+0x44>)
 800385a:	2217      	movs	r2, #23
 800385c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800385e:	4b08      	ldr	r3, [pc, #32]	@ (8003880 <MX_QUADSPI_Init+0x44>)
 8003860:	2200      	movs	r2, #0
 8003862:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8003864:	4b06      	ldr	r3, [pc, #24]	@ (8003880 <MX_QUADSPI_Init+0x44>)
 8003866:	2200      	movs	r2, #0
 8003868:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800386a:	4805      	ldr	r0, [pc, #20]	@ (8003880 <MX_QUADSPI_Init+0x44>)
 800386c:	f003 fa1e 	bl	8006cac <HAL_QSPI_Init>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d001      	beq.n	800387a <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8003876:	f000 fa2c 	bl	8003cd2 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800387a:	bf00      	nop
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	20000b54 	.word	0x20000b54
 8003884:	a0001000 	.word	0xa0001000

08003888 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800388c:	4b14      	ldr	r3, [pc, #80]	@ (80038e0 <MX_USART3_UART_Init+0x58>)
 800388e:	4a15      	ldr	r2, [pc, #84]	@ (80038e4 <MX_USART3_UART_Init+0x5c>)
 8003890:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003892:	4b13      	ldr	r3, [pc, #76]	@ (80038e0 <MX_USART3_UART_Init+0x58>)
 8003894:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003898:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800389a:	4b11      	ldr	r3, [pc, #68]	@ (80038e0 <MX_USART3_UART_Init+0x58>)
 800389c:	2200      	movs	r2, #0
 800389e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80038a0:	4b0f      	ldr	r3, [pc, #60]	@ (80038e0 <MX_USART3_UART_Init+0x58>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80038a6:	4b0e      	ldr	r3, [pc, #56]	@ (80038e0 <MX_USART3_UART_Init+0x58>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80038ac:	4b0c      	ldr	r3, [pc, #48]	@ (80038e0 <MX_USART3_UART_Init+0x58>)
 80038ae:	220c      	movs	r2, #12
 80038b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80038b2:	4b0b      	ldr	r3, [pc, #44]	@ (80038e0 <MX_USART3_UART_Init+0x58>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80038b8:	4b09      	ldr	r3, [pc, #36]	@ (80038e0 <MX_USART3_UART_Init+0x58>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80038be:	4b08      	ldr	r3, [pc, #32]	@ (80038e0 <MX_USART3_UART_Init+0x58>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80038c4:	4b06      	ldr	r3, [pc, #24]	@ (80038e0 <MX_USART3_UART_Init+0x58>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80038ca:	4805      	ldr	r0, [pc, #20]	@ (80038e0 <MX_USART3_UART_Init+0x58>)
 80038cc:	f005 f9b4 	bl	8008c38 <HAL_UART_Init>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d001      	beq.n	80038da <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80038d6:	f000 f9fc 	bl	8003cd2 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80038da:	bf00      	nop
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	20000b98 	.word	0x20000b98
 80038e4:	40004800 	.word	0x40004800

080038e8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80038ec:	4b14      	ldr	r3, [pc, #80]	@ (8003940 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80038ee:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80038f2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80038f4:	4b12      	ldr	r3, [pc, #72]	@ (8003940 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80038f6:	2206      	movs	r2, #6
 80038f8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80038fa:	4b11      	ldr	r3, [pc, #68]	@ (8003940 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80038fc:	2202      	movs	r2, #2
 80038fe:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003900:	4b0f      	ldr	r3, [pc, #60]	@ (8003940 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003902:	2202      	movs	r2, #2
 8003904:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8003906:	4b0e      	ldr	r3, [pc, #56]	@ (8003940 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003908:	2200      	movs	r2, #0
 800390a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800390c:	4b0c      	ldr	r3, [pc, #48]	@ (8003940 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800390e:	2200      	movs	r2, #0
 8003910:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8003912:	4b0b      	ldr	r3, [pc, #44]	@ (8003940 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003914:	2200      	movs	r2, #0
 8003916:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8003918:	4b09      	ldr	r3, [pc, #36]	@ (8003940 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800391a:	2200      	movs	r2, #0
 800391c:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800391e:	4b08      	ldr	r3, [pc, #32]	@ (8003940 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003920:	2200      	movs	r2, #0
 8003922:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8003924:	4b06      	ldr	r3, [pc, #24]	@ (8003940 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003926:	2200      	movs	r2, #0
 8003928:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800392a:	4805      	ldr	r0, [pc, #20]	@ (8003940 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800392c:	f003 f807 	bl	800693e <HAL_PCD_Init>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d001      	beq.n	800393a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8003936:	f000 f9cc 	bl	8003cd2 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800393a:	bf00      	nop
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	20000c20 	.word	0x20000c20

08003944 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b08a      	sub	sp, #40	@ 0x28
 8003948:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800394a:	f107 0314 	add.w	r3, r7, #20
 800394e:	2200      	movs	r2, #0
 8003950:	601a      	str	r2, [r3, #0]
 8003952:	605a      	str	r2, [r3, #4]
 8003954:	609a      	str	r2, [r3, #8]
 8003956:	60da      	str	r2, [r3, #12]
 8003958:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800395a:	4bbd      	ldr	r3, [pc, #756]	@ (8003c50 <MX_GPIO_Init+0x30c>)
 800395c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800395e:	4abc      	ldr	r2, [pc, #752]	@ (8003c50 <MX_GPIO_Init+0x30c>)
 8003960:	f043 0310 	orr.w	r3, r3, #16
 8003964:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003966:	4bba      	ldr	r3, [pc, #744]	@ (8003c50 <MX_GPIO_Init+0x30c>)
 8003968:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800396a:	f003 0310 	and.w	r3, r3, #16
 800396e:	613b      	str	r3, [r7, #16]
 8003970:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003972:	4bb7      	ldr	r3, [pc, #732]	@ (8003c50 <MX_GPIO_Init+0x30c>)
 8003974:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003976:	4ab6      	ldr	r2, [pc, #728]	@ (8003c50 <MX_GPIO_Init+0x30c>)
 8003978:	f043 0304 	orr.w	r3, r3, #4
 800397c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800397e:	4bb4      	ldr	r3, [pc, #720]	@ (8003c50 <MX_GPIO_Init+0x30c>)
 8003980:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003982:	f003 0304 	and.w	r3, r3, #4
 8003986:	60fb      	str	r3, [r7, #12]
 8003988:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800398a:	4bb1      	ldr	r3, [pc, #708]	@ (8003c50 <MX_GPIO_Init+0x30c>)
 800398c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800398e:	4ab0      	ldr	r2, [pc, #704]	@ (8003c50 <MX_GPIO_Init+0x30c>)
 8003990:	f043 0301 	orr.w	r3, r3, #1
 8003994:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003996:	4bae      	ldr	r3, [pc, #696]	@ (8003c50 <MX_GPIO_Init+0x30c>)
 8003998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800399a:	f003 0301 	and.w	r3, r3, #1
 800399e:	60bb      	str	r3, [r7, #8]
 80039a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80039a2:	4bab      	ldr	r3, [pc, #684]	@ (8003c50 <MX_GPIO_Init+0x30c>)
 80039a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039a6:	4aaa      	ldr	r2, [pc, #680]	@ (8003c50 <MX_GPIO_Init+0x30c>)
 80039a8:	f043 0302 	orr.w	r3, r3, #2
 80039ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80039ae:	4ba8      	ldr	r3, [pc, #672]	@ (8003c50 <MX_GPIO_Init+0x30c>)
 80039b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	607b      	str	r3, [r7, #4]
 80039b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80039ba:	4ba5      	ldr	r3, [pc, #660]	@ (8003c50 <MX_GPIO_Init+0x30c>)
 80039bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039be:	4aa4      	ldr	r2, [pc, #656]	@ (8003c50 <MX_GPIO_Init+0x30c>)
 80039c0:	f043 0308 	orr.w	r3, r3, #8
 80039c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80039c6:	4ba2      	ldr	r3, [pc, #648]	@ (8003c50 <MX_GPIO_Init+0x30c>)
 80039c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039ca:	f003 0308 	and.w	r3, r3, #8
 80039ce:	603b      	str	r3, [r7, #0]
 80039d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 80039d2:	2200      	movs	r2, #0
 80039d4:	f44f 718a 	mov.w	r1, #276	@ 0x114
 80039d8:	489e      	ldr	r0, [pc, #632]	@ (8003c54 <MX_GPIO_Init+0x310>)
 80039da:	f002 f955 	bl	8005c88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 80039de:	2200      	movs	r2, #0
 80039e0:	f248 1104 	movw	r1, #33028	@ 0x8104
 80039e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80039e8:	f002 f94e 	bl	8005c88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|SPSGRF_915_SDN_Pin
 80039ec:	2200      	movs	r2, #0
 80039ee:	f24b 0114 	movw	r1, #45076	@ 0xb014
 80039f2:	4899      	ldr	r0, [pc, #612]	@ (8003c58 <MX_GPIO_Init+0x314>)
 80039f4:	f002 f948 	bl	8005c88 <HAL_GPIO_WritePin>
                          |ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 80039f8:	2200      	movs	r2, #0
 80039fa:	f241 0181 	movw	r1, #4225	@ 0x1081
 80039fe:	4897      	ldr	r0, [pc, #604]	@ (8003c5c <MX_GPIO_Init+0x318>)
 8003a00:	f002 f942 	bl	8005c88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8003a04:	2201      	movs	r2, #1
 8003a06:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003a0a:	4894      	ldr	r0, [pc, #592]	@ (8003c5c <MX_GPIO_Init+0x318>)
 8003a0c:	f002 f93c 	bl	8005c88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8003a10:	2200      	movs	r2, #0
 8003a12:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8003a16:	4892      	ldr	r0, [pc, #584]	@ (8003c60 <MX_GPIO_Init+0x31c>)
 8003a18:	f002 f936 	bl	8005c88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	2120      	movs	r1, #32
 8003a20:	488d      	ldr	r0, [pc, #564]	@ (8003c58 <MX_GPIO_Init+0x314>)
 8003a22:	f002 f931 	bl	8005c88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8003a26:	2201      	movs	r2, #1
 8003a28:	2101      	movs	r1, #1
 8003a2a:	488a      	ldr	r0, [pc, #552]	@ (8003c54 <MX_GPIO_Init+0x310>)
 8003a2c:	f002 f92c 	bl	8005c88 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8003a30:	f240 1315 	movw	r3, #277	@ 0x115
 8003a34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a36:	2301      	movs	r3, #1
 8003a38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003a42:	f107 0314 	add.w	r3, r7, #20
 8003a46:	4619      	mov	r1, r3
 8003a48:	4882      	ldr	r0, [pc, #520]	@ (8003c54 <MX_GPIO_Init+0x310>)
 8003a4a:	f001 fe67 	bl	800571c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8003a4e:	236a      	movs	r3, #106	@ 0x6a
 8003a50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003a52:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003a56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003a5c:	f107 0314 	add.w	r3, r7, #20
 8003a60:	4619      	mov	r1, r3
 8003a62:	487c      	ldr	r0, [pc, #496]	@ (8003c54 <MX_GPIO_Init+0x310>)
 8003a64:	f001 fe5a 	bl	800571c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8003a68:	233f      	movs	r3, #63	@ 0x3f
 8003a6a:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003a6c:	230b      	movs	r3, #11
 8003a6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a70:	2300      	movs	r3, #0
 8003a72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a74:	f107 0314 	add.w	r3, r7, #20
 8003a78:	4619      	mov	r1, r3
 8003a7a:	4879      	ldr	r0, [pc, #484]	@ (8003c60 <MX_GPIO_Init+0x31c>)
 8003a7c:	f001 fe4e 	bl	800571c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8003a80:	2303      	movs	r3, #3
 8003a82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a84:	2302      	movs	r3, #2
 8003a86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003a90:	2308      	movs	r3, #8
 8003a92:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a94:	f107 0314 	add.w	r3, r7, #20
 8003a98:	4619      	mov	r1, r3
 8003a9a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003a9e:	f001 fe3d 	bl	800571c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8003aa2:	f248 1304 	movw	r3, #33028	@ 0x8104
 8003aa6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aac:	2300      	movs	r3, #0
 8003aae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ab4:	f107 0314 	add.w	r3, r7, #20
 8003ab8:	4619      	mov	r1, r3
 8003aba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003abe:	f001 fe2d 	bl	800571c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8003ac2:	2308      	movs	r3, #8
 8003ac4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ac6:	2302      	movs	r3, #2
 8003ac8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aca:	2300      	movs	r3, #0
 8003acc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8003ad6:	f107 0314 	add.w	r3, r7, #20
 8003ada:	4619      	mov	r1, r3
 8003adc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003ae0:	f001 fe1c 	bl	800571c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8003ae4:	2310      	movs	r3, #16
 8003ae6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003ae8:	230b      	movs	r3, #11
 8003aea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aec:	2300      	movs	r3, #0
 8003aee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8003af0:	f107 0314 	add.w	r3, r7, #20
 8003af4:	4619      	mov	r1, r3
 8003af6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003afa:	f001 fe0f 	bl	800571c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8003afe:	23e0      	movs	r3, #224	@ 0xe0
 8003b00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b02:	2302      	movs	r3, #2
 8003b04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b06:	2300      	movs	r3, #0
 8003b08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003b0e:	2305      	movs	r3, #5
 8003b10:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b12:	f107 0314 	add.w	r3, r7, #20
 8003b16:	4619      	mov	r1, r3
 8003b18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003b1c:	f001 fdfe 	bl	800571c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8003b20:	2301      	movs	r3, #1
 8003b22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003b24:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003b28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8003b2e:	f107 0314 	add.w	r3, r7, #20
 8003b32:	4619      	mov	r1, r3
 8003b34:	4848      	ldr	r0, [pc, #288]	@ (8003c58 <MX_GPIO_Init+0x314>)
 8003b36:	f001 fdf1 	bl	800571c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8003b3a:	2302      	movs	r3, #2
 8003b3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003b3e:	230b      	movs	r3, #11
 8003b40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b42:	2300      	movs	r3, #0
 8003b44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8003b46:	f107 0314 	add.w	r3, r7, #20
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	4842      	ldr	r0, [pc, #264]	@ (8003c58 <MX_GPIO_Init+0x314>)
 8003b4e:	f001 fde5 	bl	800571c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin SPSGRF_915_SDN_Pin
                           ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|SPSGRF_915_SDN_Pin
 8003b52:	f24b 0334 	movw	r3, #45108	@ 0xb034
 8003b56:	617b      	str	r3, [r7, #20]
                          |ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b60:	2300      	movs	r3, #0
 8003b62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b64:	f107 0314 	add.w	r3, r7, #20
 8003b68:	4619      	mov	r1, r3
 8003b6a:	483b      	ldr	r0, [pc, #236]	@ (8003c58 <MX_GPIO_Init+0x314>)
 8003b6c:	f001 fdd6 	bl	800571c <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8003b70:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 8003b74:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003b76:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003b7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b80:	f107 0314 	add.w	r3, r7, #20
 8003b84:	4619      	mov	r1, r3
 8003b86:	4835      	ldr	r0, [pc, #212]	@ (8003c5c <MX_GPIO_Init+0x318>)
 8003b88:	f001 fdc8 	bl	800571c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8003b8c:	f243 0381 	movw	r3, #12417	@ 0x3081
 8003b90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b92:	2301      	movs	r3, #1
 8003b94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b96:	2300      	movs	r3, #0
 8003b98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b9e:	f107 0314 	add.w	r3, r7, #20
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	482d      	ldr	r0, [pc, #180]	@ (8003c5c <MX_GPIO_Init+0x318>)
 8003ba6:	f001 fdb9 	bl	800571c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8003baa:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8003bae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bbc:	f107 0314 	add.w	r3, r7, #20
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	4827      	ldr	r0, [pc, #156]	@ (8003c60 <MX_GPIO_Init+0x31c>)
 8003bc4:	f001 fdaa 	bl	800571c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8003bc8:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8003bcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003bce:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003bd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bd8:	f107 0314 	add.w	r3, r7, #20
 8003bdc:	4619      	mov	r1, r3
 8003bde:	4820      	ldr	r0, [pc, #128]	@ (8003c60 <MX_GPIO_Init+0x31c>)
 8003be0:	f001 fd9c 	bl	800571c <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8003be4:	2302      	movs	r3, #2
 8003be6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003be8:	2302      	movs	r3, #2
 8003bea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bec:	2300      	movs	r3, #0
 8003bee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003bf4:	2305      	movs	r3, #5
 8003bf6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8003bf8:	f107 0314 	add.w	r3, r7, #20
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	4817      	ldr	r0, [pc, #92]	@ (8003c5c <MX_GPIO_Init+0x318>)
 8003c00:	f001 fd8c 	bl	800571c <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8003c04:	2378      	movs	r3, #120	@ 0x78
 8003c06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c08:	2302      	movs	r3, #2
 8003c0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c10:	2303      	movs	r3, #3
 8003c12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003c14:	2307      	movs	r3, #7
 8003c16:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003c18:	f107 0314 	add.w	r3, r7, #20
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	480f      	ldr	r0, [pc, #60]	@ (8003c5c <MX_GPIO_Init+0x318>)
 8003c20:	f001 fd7c 	bl	800571c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8003c24:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003c28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c2a:	2312      	movs	r3, #18
 8003c2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c32:	2303      	movs	r3, #3
 8003c34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003c36:	2304      	movs	r3, #4
 8003c38:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c3a:	f107 0314 	add.w	r3, r7, #20
 8003c3e:	4619      	mov	r1, r3
 8003c40:	4805      	ldr	r0, [pc, #20]	@ (8003c58 <MX_GPIO_Init+0x314>)
 8003c42:	f001 fd6b 	bl	800571c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8003c46:	2200      	movs	r2, #0
 8003c48:	2105      	movs	r1, #5
 8003c4a:	2017      	movs	r0, #23
 8003c4c:	e00a      	b.n	8003c64 <MX_GPIO_Init+0x320>
 8003c4e:	bf00      	nop
 8003c50:	40021000 	.word	0x40021000
 8003c54:	48001000 	.word	0x48001000
 8003c58:	48000400 	.word	0x48000400
 8003c5c:	48000c00 	.word	0x48000c00
 8003c60:	48000800 	.word	0x48000800
 8003c64:	f001 fbb9 	bl	80053da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003c68:	2017      	movs	r0, #23
 8003c6a:	f001 fbd2 	bl	8005412 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8003c6e:	2200      	movs	r2, #0
 8003c70:	2105      	movs	r1, #5
 8003c72:	2028      	movs	r0, #40	@ 0x28
 8003c74:	f001 fbb1 	bl	80053da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003c78:	2028      	movs	r0, #40	@ 0x28
 8003c7a:	f001 fbca 	bl	8005412 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003c7e:	bf00      	nop
 8003c80:	3728      	adds	r7, #40	@ 0x28
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop

08003c88 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	MX_BlueNRG_MS_Process();
 8003c90:	f7fd faa0 	bl	80011d4 <MX_BlueNRG_MS_Process>
    osDelay(110);
 8003c94:	206e      	movs	r0, #110	@ 0x6e
 8003c96:	f007 faab 	bl	800b1f0 <osDelay>
	MX_BlueNRG_MS_Process();
 8003c9a:	bf00      	nop
 8003c9c:	e7f8      	b.n	8003c90 <StartDefaultTask+0x8>

08003c9e <StartTask02>:
/* USER CODE END Header_StartTask02 */
uint8_t sample_rate = 1;
uint8_t pio = 0;

void StartTask02(void const * argument)
{
 8003c9e:	b480      	push	{r7}
 8003ca0:	b083      	sub	sp, #12
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
        printf("ss sent: %s", buffer);

      //ACC_DATA_Update();
  }*/
  /* USER CODE END StartTask02 */
}
 8003ca6:	bf00      	nop
 8003ca8:	370c      	adds	r7, #12
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr

08003cb2 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8003cb2:	b580      	push	{r7, lr}
 8003cb4:	b082      	sub	sp, #8
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(20);
 8003cba:	2014      	movs	r0, #20
 8003cbc:	f007 fa98 	bl	800b1f0 <osDelay>
 8003cc0:	e7fb      	b.n	8003cba <StartTask03+0x8>

08003cc2 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void const * argument)
{
 8003cc2:	b580      	push	{r7, lr}
 8003cc4:	b082      	sub	sp, #8
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(50);
 8003cca:	2032      	movs	r0, #50	@ 0x32
 8003ccc:	f007 fa90 	bl	800b1f0 <osDelay>
 8003cd0:	e7fb      	b.n	8003cca <StartTask04+0x8>

08003cd2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003cd2:	b480      	push	{r7}
 8003cd4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003cd6:	b672      	cpsid	i
}
 8003cd8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003cda:	bf00      	nop
 8003cdc:	e7fd      	b.n	8003cda <Error_Handler+0x8>
	...

08003ce0 <arm_snr_f32>:
 * The function Caluclates signal to noise ratio for the reference output
 * and test output
 */

float arm_snr_f32(float *pRef, float *pTest, uint32_t buffSize)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b08a      	sub	sp, #40	@ 0x28
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	607a      	str	r2, [r7, #4]
  float EnergySignal = 0.0, EnergyError = 0.0;
 8003cec:	f04f 0300 	mov.w	r3, #0
 8003cf0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cf2:	f04f 0300 	mov.w	r3, #0
 8003cf6:	613b      	str	r3, [r7, #16]
  uint32_t i;
  float SNR;
  int temp;
  int *test;

  for (i = 0; i < buffSize; i++)
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	623b      	str	r3, [r7, #32]
 8003cfc:	e058      	b.n	8003db0 <arm_snr_f32+0xd0>
    {
 	  /* Checking for a NAN value in pRef array */
	  test =   (int *)(&pRef[i]);
 8003cfe:	6a3b      	ldr	r3, [r7, #32]
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	4413      	add	r3, r2
 8003d06:	61fb      	str	r3, [r7, #28]
      temp =  *test;
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	61bb      	str	r3, [r7, #24]

	  if (temp == 0x7FC00000)
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	4a43      	ldr	r2, [pc, #268]	@ (8003e20 <arm_snr_f32+0x140>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d102      	bne.n	8003d1c <arm_snr_f32+0x3c>
	  {
	  		return(0);
 8003d16:	f04f 0300 	mov.w	r3, #0
 8003d1a:	e07a      	b.n	8003e12 <arm_snr_f32+0x132>
	  }

	  /* Checking for a NAN value in pTest array */
	  test =   (int *)(&pTest[i]);
 8003d1c:	6a3b      	ldr	r3, [r7, #32]
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	68ba      	ldr	r2, [r7, #8]
 8003d22:	4413      	add	r3, r2
 8003d24:	61fb      	str	r3, [r7, #28]
      temp =  *test;
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	61bb      	str	r3, [r7, #24]

	  if (temp == 0x7FC00000)
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	4a3c      	ldr	r2, [pc, #240]	@ (8003e20 <arm_snr_f32+0x140>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d102      	bne.n	8003d3a <arm_snr_f32+0x5a>
	  {
	  		return(0);
 8003d34:	f04f 0300 	mov.w	r3, #0
 8003d38:	e06b      	b.n	8003e12 <arm_snr_f32+0x132>
	  }
      EnergySignal += pRef[i] * pRef[i];
 8003d3a:	6a3b      	ldr	r3, [r7, #32]
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	4413      	add	r3, r2
 8003d42:	ed93 7a00 	vldr	s14, [r3]
 8003d46:	6a3b      	ldr	r3, [r7, #32]
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	68fa      	ldr	r2, [r7, #12]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	edd3 7a00 	vldr	s15, [r3]
 8003d52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d56:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003d5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d5e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
      EnergyError += (pRef[i] - pTest[i]) * (pRef[i] - pTest[i]);
 8003d62:	6a3b      	ldr	r3, [r7, #32]
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	4413      	add	r3, r2
 8003d6a:	ed93 7a00 	vldr	s14, [r3]
 8003d6e:	6a3b      	ldr	r3, [r7, #32]
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	68ba      	ldr	r2, [r7, #8]
 8003d74:	4413      	add	r3, r2
 8003d76:	edd3 7a00 	vldr	s15, [r3]
 8003d7a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003d7e:	6a3b      	ldr	r3, [r7, #32]
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	68fa      	ldr	r2, [r7, #12]
 8003d84:	4413      	add	r3, r2
 8003d86:	edd3 6a00 	vldr	s13, [r3]
 8003d8a:	6a3b      	ldr	r3, [r7, #32]
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	68ba      	ldr	r2, [r7, #8]
 8003d90:	4413      	add	r3, r2
 8003d92:	edd3 7a00 	vldr	s15, [r3]
 8003d96:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003d9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d9e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003da2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003da6:	edc7 7a04 	vstr	s15, [r7, #16]
  for (i = 0; i < buffSize; i++)
 8003daa:	6a3b      	ldr	r3, [r7, #32]
 8003dac:	3301      	adds	r3, #1
 8003dae:	623b      	str	r3, [r7, #32]
 8003db0:	6a3a      	ldr	r2, [r7, #32]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d3a2      	bcc.n	8003cfe <arm_snr_f32+0x1e>
    }

	/* Checking for a NAN value in EnergyError */
	test =   (int *)(&EnergyError);
 8003db8:	f107 0310 	add.w	r3, r7, #16
 8003dbc:	61fb      	str	r3, [r7, #28]
    temp =  *test;
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	61bb      	str	r3, [r7, #24]

    if (temp == 0x7FC00000)
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	4a16      	ldr	r2, [pc, #88]	@ (8003e20 <arm_snr_f32+0x140>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d102      	bne.n	8003dd2 <arm_snr_f32+0xf2>
    {
  		return(0);
 8003dcc:	f04f 0300 	mov.w	r3, #0
 8003dd0:	e01f      	b.n	8003e12 <arm_snr_f32+0x132>
    }


  SNR = 10 * log10 (EnergySignal / EnergyError);
 8003dd2:	edd7 7a04 	vldr	s15, [r7, #16]
 8003dd6:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003dda:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003dde:	ee16 0a90 	vmov	r0, s13
 8003de2:	f7fc fbb1 	bl	8000548 <__aeabi_f2d>
 8003de6:	4602      	mov	r2, r0
 8003de8:	460b      	mov	r3, r1
 8003dea:	ec43 2b10 	vmov	d0, r2, r3
 8003dee:	f00d ff73 	bl	8011cd8 <log10>
 8003df2:	ec51 0b10 	vmov	r0, r1, d0
 8003df6:	f04f 0200 	mov.w	r2, #0
 8003dfa:	4b0a      	ldr	r3, [pc, #40]	@ (8003e24 <arm_snr_f32+0x144>)
 8003dfc:	f7fc fbfc 	bl	80005f8 <__aeabi_dmul>
 8003e00:	4602      	mov	r2, r0
 8003e02:	460b      	mov	r3, r1
 8003e04:	4610      	mov	r0, r2
 8003e06:	4619      	mov	r1, r3
 8003e08:	f7fc feee 	bl	8000be8 <__aeabi_d2f>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	617b      	str	r3, [r7, #20]

  return (SNR);
 8003e10:	697b      	ldr	r3, [r7, #20]

}
 8003e12:	ee07 3a90 	vmov	s15, r3
 8003e16:	eeb0 0a67 	vmov.f32	s0, s15
 8003e1a:	3728      	adds	r7, #40	@ 0x28
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	7fc00000 	.word	0x7fc00000
 8003e24:	40240000 	.word	0x40240000

08003e28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b082      	sub	sp, #8
 8003e2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e2e:	4b11      	ldr	r3, [pc, #68]	@ (8003e74 <HAL_MspInit+0x4c>)
 8003e30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e32:	4a10      	ldr	r2, [pc, #64]	@ (8003e74 <HAL_MspInit+0x4c>)
 8003e34:	f043 0301 	orr.w	r3, r3, #1
 8003e38:	6613      	str	r3, [r2, #96]	@ 0x60
 8003e3a:	4b0e      	ldr	r3, [pc, #56]	@ (8003e74 <HAL_MspInit+0x4c>)
 8003e3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e3e:	f003 0301 	and.w	r3, r3, #1
 8003e42:	607b      	str	r3, [r7, #4]
 8003e44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e46:	4b0b      	ldr	r3, [pc, #44]	@ (8003e74 <HAL_MspInit+0x4c>)
 8003e48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e4a:	4a0a      	ldr	r2, [pc, #40]	@ (8003e74 <HAL_MspInit+0x4c>)
 8003e4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e50:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e52:	4b08      	ldr	r3, [pc, #32]	@ (8003e74 <HAL_MspInit+0x4c>)
 8003e54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e5a:	603b      	str	r3, [r7, #0]
 8003e5c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003e5e:	2200      	movs	r2, #0
 8003e60:	210f      	movs	r1, #15
 8003e62:	f06f 0001 	mvn.w	r0, #1
 8003e66:	f001 fab8 	bl	80053da <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e6a:	bf00      	nop
 8003e6c:	3708      	adds	r7, #8
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	40021000 	.word	0x40021000

08003e78 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b0ac      	sub	sp, #176	@ 0xb0
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e80:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003e84:	2200      	movs	r2, #0
 8003e86:	601a      	str	r2, [r3, #0]
 8003e88:	605a      	str	r2, [r3, #4]
 8003e8a:	609a      	str	r2, [r3, #8]
 8003e8c:	60da      	str	r2, [r3, #12]
 8003e8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003e90:	f107 0314 	add.w	r3, r7, #20
 8003e94:	2288      	movs	r2, #136	@ 0x88
 8003e96:	2100      	movs	r1, #0
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f00a fa3e 	bl	800e31a <memset>
  if(DFSDM1_Init == 0)
 8003e9e:	4b25      	ldr	r3, [pc, #148]	@ (8003f34 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d142      	bne.n	8003f2c <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8003ea6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003eaa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8003eac:	2300      	movs	r3, #0
 8003eae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003eb2:	f107 0314 	add.w	r3, r7, #20
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f003 fdb4 	bl	8007a24 <HAL_RCCEx_PeriphCLKConfig>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d001      	beq.n	8003ec6 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8003ec2:	f7ff ff06 	bl	8003cd2 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8003ec6:	4b1c      	ldr	r3, [pc, #112]	@ (8003f38 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8003ec8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003eca:	4a1b      	ldr	r2, [pc, #108]	@ (8003f38 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8003ecc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ed0:	6613      	str	r3, [r2, #96]	@ 0x60
 8003ed2:	4b19      	ldr	r3, [pc, #100]	@ (8003f38 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8003ed4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ed6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003eda:	613b      	str	r3, [r7, #16]
 8003edc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003ede:	4b16      	ldr	r3, [pc, #88]	@ (8003f38 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8003ee0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ee2:	4a15      	ldr	r2, [pc, #84]	@ (8003f38 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8003ee4:	f043 0310 	orr.w	r3, r3, #16
 8003ee8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003eea:	4b13      	ldr	r3, [pc, #76]	@ (8003f38 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8003eec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003eee:	f003 0310 	and.w	r3, r3, #16
 8003ef2:	60fb      	str	r3, [r7, #12]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8003ef6:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8003efa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003efe:	2302      	movs	r3, #2
 8003f00:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f04:	2300      	movs	r3, #0
 8003f06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8003f10:	2306      	movs	r3, #6
 8003f12:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003f16:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	4807      	ldr	r0, [pc, #28]	@ (8003f3c <HAL_DFSDM_ChannelMspInit+0xc4>)
 8003f1e:	f001 fbfd 	bl	800571c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 8003f22:	4b04      	ldr	r3, [pc, #16]	@ (8003f34 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	3301      	adds	r3, #1
 8003f28:	4a02      	ldr	r2, [pc, #8]	@ (8003f34 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8003f2a:	6013      	str	r3, [r2, #0]
  }

}
 8003f2c:	bf00      	nop
 8003f2e:	37b0      	adds	r7, #176	@ 0xb0
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	20003858 	.word	0x20003858
 8003f38:	40021000 	.word	0x40021000
 8003f3c:	48001000 	.word	0x48001000

08003f40 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b0ac      	sub	sp, #176	@ 0xb0
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f48:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	601a      	str	r2, [r3, #0]
 8003f50:	605a      	str	r2, [r3, #4]
 8003f52:	609a      	str	r2, [r3, #8]
 8003f54:	60da      	str	r2, [r3, #12]
 8003f56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003f58:	f107 0314 	add.w	r3, r7, #20
 8003f5c:	2288      	movs	r2, #136	@ 0x88
 8003f5e:	2100      	movs	r1, #0
 8003f60:	4618      	mov	r0, r3
 8003f62:	f00a f9da 	bl	800e31a <memset>
  if(hi2c->Instance==I2C2)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a21      	ldr	r2, [pc, #132]	@ (8003ff0 <HAL_I2C_MspInit+0xb0>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d13b      	bne.n	8003fe8 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8003f70:	2380      	movs	r3, #128	@ 0x80
 8003f72:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8003f74:	2300      	movs	r3, #0
 8003f76:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003f78:	f107 0314 	add.w	r3, r7, #20
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f003 fd51 	bl	8007a24 <HAL_RCCEx_PeriphCLKConfig>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d001      	beq.n	8003f8c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8003f88:	f7ff fea3 	bl	8003cd2 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f8c:	4b19      	ldr	r3, [pc, #100]	@ (8003ff4 <HAL_I2C_MspInit+0xb4>)
 8003f8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f90:	4a18      	ldr	r2, [pc, #96]	@ (8003ff4 <HAL_I2C_MspInit+0xb4>)
 8003f92:	f043 0302 	orr.w	r3, r3, #2
 8003f96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f98:	4b16      	ldr	r3, [pc, #88]	@ (8003ff4 <HAL_I2C_MspInit+0xb4>)
 8003f9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f9c:	f003 0302 	and.w	r3, r3, #2
 8003fa0:	613b      	str	r3, [r7, #16]
 8003fa2:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8003fa4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003fa8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003fac:	2312      	movs	r3, #18
 8003fae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003fbe:	2304      	movs	r3, #4
 8003fc0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fc4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003fc8:	4619      	mov	r1, r3
 8003fca:	480b      	ldr	r0, [pc, #44]	@ (8003ff8 <HAL_I2C_MspInit+0xb8>)
 8003fcc:	f001 fba6 	bl	800571c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003fd0:	4b08      	ldr	r3, [pc, #32]	@ (8003ff4 <HAL_I2C_MspInit+0xb4>)
 8003fd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fd4:	4a07      	ldr	r2, [pc, #28]	@ (8003ff4 <HAL_I2C_MspInit+0xb4>)
 8003fd6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003fda:	6593      	str	r3, [r2, #88]	@ 0x58
 8003fdc:	4b05      	ldr	r3, [pc, #20]	@ (8003ff4 <HAL_I2C_MspInit+0xb4>)
 8003fde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fe0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fe4:	60fb      	str	r3, [r7, #12]
 8003fe6:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8003fe8:	bf00      	nop
 8003fea:	37b0      	adds	r7, #176	@ 0xb0
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	40005800 	.word	0x40005800
 8003ff4:	40021000 	.word	0x40021000
 8003ff8:	48000400 	.word	0x48000400

08003ffc <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a0b      	ldr	r2, [pc, #44]	@ (8004038 <HAL_I2C_MspDeInit+0x3c>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d10f      	bne.n	800402e <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 800400e:	4b0b      	ldr	r3, [pc, #44]	@ (800403c <HAL_I2C_MspDeInit+0x40>)
 8004010:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004012:	4a0a      	ldr	r2, [pc, #40]	@ (800403c <HAL_I2C_MspDeInit+0x40>)
 8004014:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8004018:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 800401a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800401e:	4808      	ldr	r0, [pc, #32]	@ (8004040 <HAL_I2C_MspDeInit+0x44>)
 8004020:	f001 fd26 	bl	8005a70 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 8004024:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004028:	4805      	ldr	r0, [pc, #20]	@ (8004040 <HAL_I2C_MspDeInit+0x44>)
 800402a:	f001 fd21 	bl	8005a70 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 800402e:	bf00      	nop
 8004030:	3708      	adds	r7, #8
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	40005800 	.word	0x40005800
 800403c:	40021000 	.word	0x40021000
 8004040:	48000400 	.word	0x48000400

08004044 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b08a      	sub	sp, #40	@ 0x28
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800404c:	f107 0314 	add.w	r3, r7, #20
 8004050:	2200      	movs	r2, #0
 8004052:	601a      	str	r2, [r3, #0]
 8004054:	605a      	str	r2, [r3, #4]
 8004056:	609a      	str	r2, [r3, #8]
 8004058:	60da      	str	r2, [r3, #12]
 800405a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a17      	ldr	r2, [pc, #92]	@ (80040c0 <HAL_QSPI_MspInit+0x7c>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d128      	bne.n	80040b8 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8004066:	4b17      	ldr	r3, [pc, #92]	@ (80040c4 <HAL_QSPI_MspInit+0x80>)
 8004068:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800406a:	4a16      	ldr	r2, [pc, #88]	@ (80040c4 <HAL_QSPI_MspInit+0x80>)
 800406c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004070:	6513      	str	r3, [r2, #80]	@ 0x50
 8004072:	4b14      	ldr	r3, [pc, #80]	@ (80040c4 <HAL_QSPI_MspInit+0x80>)
 8004074:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004076:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800407a:	613b      	str	r3, [r7, #16]
 800407c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800407e:	4b11      	ldr	r3, [pc, #68]	@ (80040c4 <HAL_QSPI_MspInit+0x80>)
 8004080:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004082:	4a10      	ldr	r2, [pc, #64]	@ (80040c4 <HAL_QSPI_MspInit+0x80>)
 8004084:	f043 0310 	orr.w	r3, r3, #16
 8004088:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800408a:	4b0e      	ldr	r3, [pc, #56]	@ (80040c4 <HAL_QSPI_MspInit+0x80>)
 800408c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800408e:	f003 0310 	and.w	r3, r3, #16
 8004092:	60fb      	str	r3, [r7, #12]
 8004094:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8004096:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 800409a:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800409c:	2302      	movs	r3, #2
 800409e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040a0:	2300      	movs	r3, #0
 80040a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040a4:	2303      	movs	r3, #3
 80040a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80040a8:	230a      	movs	r3, #10
 80040aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80040ac:	f107 0314 	add.w	r3, r7, #20
 80040b0:	4619      	mov	r1, r3
 80040b2:	4805      	ldr	r0, [pc, #20]	@ (80040c8 <HAL_QSPI_MspInit+0x84>)
 80040b4:	f001 fb32 	bl	800571c <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 80040b8:	bf00      	nop
 80040ba:	3728      	adds	r7, #40	@ 0x28
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	a0001000 	.word	0xa0001000
 80040c4:	40021000 	.word	0x40021000
 80040c8:	48001000 	.word	0x48001000

080040cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b0ac      	sub	sp, #176	@ 0xb0
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040d4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80040d8:	2200      	movs	r2, #0
 80040da:	601a      	str	r2, [r3, #0]
 80040dc:	605a      	str	r2, [r3, #4]
 80040de:	609a      	str	r2, [r3, #8]
 80040e0:	60da      	str	r2, [r3, #12]
 80040e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80040e4:	f107 0314 	add.w	r3, r7, #20
 80040e8:	2288      	movs	r2, #136	@ 0x88
 80040ea:	2100      	movs	r1, #0
 80040ec:	4618      	mov	r0, r3
 80040ee:	f00a f914 	bl	800e31a <memset>
  if(huart->Instance==USART3)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a21      	ldr	r2, [pc, #132]	@ (800417c <HAL_UART_MspInit+0xb0>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d13b      	bne.n	8004174 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80040fc:	2304      	movs	r3, #4
 80040fe:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8004100:	2300      	movs	r3, #0
 8004102:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004104:	f107 0314 	add.w	r3, r7, #20
 8004108:	4618      	mov	r0, r3
 800410a:	f003 fc8b 	bl	8007a24 <HAL_RCCEx_PeriphCLKConfig>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d001      	beq.n	8004118 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004114:	f7ff fddd 	bl	8003cd2 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004118:	4b19      	ldr	r3, [pc, #100]	@ (8004180 <HAL_UART_MspInit+0xb4>)
 800411a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800411c:	4a18      	ldr	r2, [pc, #96]	@ (8004180 <HAL_UART_MspInit+0xb4>)
 800411e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004122:	6593      	str	r3, [r2, #88]	@ 0x58
 8004124:	4b16      	ldr	r3, [pc, #88]	@ (8004180 <HAL_UART_MspInit+0xb4>)
 8004126:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004128:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800412c:	613b      	str	r3, [r7, #16]
 800412e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004130:	4b13      	ldr	r3, [pc, #76]	@ (8004180 <HAL_UART_MspInit+0xb4>)
 8004132:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004134:	4a12      	ldr	r2, [pc, #72]	@ (8004180 <HAL_UART_MspInit+0xb4>)
 8004136:	f043 0308 	orr.w	r3, r3, #8
 800413a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800413c:	4b10      	ldr	r3, [pc, #64]	@ (8004180 <HAL_UART_MspInit+0xb4>)
 800413e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004140:	f003 0308 	and.w	r3, r3, #8
 8004144:	60fb      	str	r3, [r7, #12]
 8004146:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8004148:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800414c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004150:	2302      	movs	r3, #2
 8004152:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004156:	2300      	movs	r3, #0
 8004158:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800415c:	2303      	movs	r3, #3
 800415e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004162:	2307      	movs	r3, #7
 8004164:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004168:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800416c:	4619      	mov	r1, r3
 800416e:	4805      	ldr	r0, [pc, #20]	@ (8004184 <HAL_UART_MspInit+0xb8>)
 8004170:	f001 fad4 	bl	800571c <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8004174:	bf00      	nop
 8004176:	37b0      	adds	r7, #176	@ 0xb0
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}
 800417c:	40004800 	.word	0x40004800
 8004180:	40021000 	.word	0x40021000
 8004184:	48000c00 	.word	0x48000c00

08004188 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b0ac      	sub	sp, #176	@ 0xb0
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004190:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8004194:	2200      	movs	r2, #0
 8004196:	601a      	str	r2, [r3, #0]
 8004198:	605a      	str	r2, [r3, #4]
 800419a:	609a      	str	r2, [r3, #8]
 800419c:	60da      	str	r2, [r3, #12]
 800419e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80041a0:	f107 0314 	add.w	r3, r7, #20
 80041a4:	2288      	movs	r2, #136	@ 0x88
 80041a6:	2100      	movs	r1, #0
 80041a8:	4618      	mov	r0, r3
 80041aa:	f00a f8b6 	bl	800e31a <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80041b6:	d17c      	bne.n	80042b2 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80041b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80041bc:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80041be:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80041c2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80041c6:	2301      	movs	r3, #1
 80041c8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80041ca:	2301      	movs	r3, #1
 80041cc:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80041ce:	2318      	movs	r3, #24
 80041d0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80041d2:	2307      	movs	r3, #7
 80041d4:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80041d6:	2302      	movs	r3, #2
 80041d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80041da:	2302      	movs	r3, #2
 80041dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80041de:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80041e2:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80041e4:	f107 0314 	add.w	r3, r7, #20
 80041e8:	4618      	mov	r0, r3
 80041ea:	f003 fc1b 	bl	8007a24 <HAL_RCCEx_PeriphCLKConfig>
 80041ee:	4603      	mov	r3, r0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d001      	beq.n	80041f8 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80041f4:	f7ff fd6d 	bl	8003cd2 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041f8:	4b30      	ldr	r3, [pc, #192]	@ (80042bc <HAL_PCD_MspInit+0x134>)
 80041fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041fc:	4a2f      	ldr	r2, [pc, #188]	@ (80042bc <HAL_PCD_MspInit+0x134>)
 80041fe:	f043 0301 	orr.w	r3, r3, #1
 8004202:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004204:	4b2d      	ldr	r3, [pc, #180]	@ (80042bc <HAL_PCD_MspInit+0x134>)
 8004206:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004208:	f003 0301 	and.w	r3, r3, #1
 800420c:	613b      	str	r3, [r7, #16]
 800420e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8004210:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004214:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004218:	2300      	movs	r3, #0
 800421a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800421e:	2300      	movs	r3, #0
 8004220:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8004224:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8004228:	4619      	mov	r1, r3
 800422a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800422e:	f001 fa75 	bl	800571c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8004232:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8004236:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800423a:	2302      	movs	r3, #2
 800423c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004240:	2300      	movs	r3, #0
 8004242:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004246:	2303      	movs	r3, #3
 8004248:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800424c:	230a      	movs	r3, #10
 800424e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004252:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8004256:	4619      	mov	r1, r3
 8004258:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800425c:	f001 fa5e 	bl	800571c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8004260:	4b16      	ldr	r3, [pc, #88]	@ (80042bc <HAL_PCD_MspInit+0x134>)
 8004262:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004264:	4a15      	ldr	r2, [pc, #84]	@ (80042bc <HAL_PCD_MspInit+0x134>)
 8004266:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800426a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800426c:	4b13      	ldr	r3, [pc, #76]	@ (80042bc <HAL_PCD_MspInit+0x134>)
 800426e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004270:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004274:	60fb      	str	r3, [r7, #12]
 8004276:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004278:	4b10      	ldr	r3, [pc, #64]	@ (80042bc <HAL_PCD_MspInit+0x134>)
 800427a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800427c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d114      	bne.n	80042ae <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004284:	4b0d      	ldr	r3, [pc, #52]	@ (80042bc <HAL_PCD_MspInit+0x134>)
 8004286:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004288:	4a0c      	ldr	r2, [pc, #48]	@ (80042bc <HAL_PCD_MspInit+0x134>)
 800428a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800428e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004290:	4b0a      	ldr	r3, [pc, #40]	@ (80042bc <HAL_PCD_MspInit+0x134>)
 8004292:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004294:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004298:	60bb      	str	r3, [r7, #8]
 800429a:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800429c:	f002 fcf6 	bl	8006c8c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80042a0:	4b06      	ldr	r3, [pc, #24]	@ (80042bc <HAL_PCD_MspInit+0x134>)
 80042a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042a4:	4a05      	ldr	r2, [pc, #20]	@ (80042bc <HAL_PCD_MspInit+0x134>)
 80042a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80042aa:	6593      	str	r3, [r2, #88]	@ 0x58

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80042ac:	e001      	b.n	80042b2 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 80042ae:	f002 fced 	bl	8006c8c <HAL_PWREx_EnableVddUSB>
}
 80042b2:	bf00      	nop
 80042b4:	37b0      	adds	r7, #176	@ 0xb0
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	40021000 	.word	0x40021000

080042c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80042c0:	b480      	push	{r7}
 80042c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80042c4:	bf00      	nop
 80042c6:	e7fd      	b.n	80042c4 <NMI_Handler+0x4>

080042c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80042c8:	b480      	push	{r7}
 80042ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80042cc:	bf00      	nop
 80042ce:	e7fd      	b.n	80042cc <HardFault_Handler+0x4>

080042d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80042d0:	b480      	push	{r7}
 80042d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80042d4:	bf00      	nop
 80042d6:	e7fd      	b.n	80042d4 <MemManage_Handler+0x4>

080042d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80042d8:	b480      	push	{r7}
 80042da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80042dc:	bf00      	nop
 80042de:	e7fd      	b.n	80042dc <BusFault_Handler+0x4>

080042e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80042e0:	b480      	push	{r7}
 80042e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80042e4:	bf00      	nop
 80042e6:	e7fd      	b.n	80042e4 <UsageFault_Handler+0x4>

080042e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80042e8:	b480      	push	{r7}
 80042ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80042ec:	bf00      	nop
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr

080042f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80042f6:	b580      	push	{r7, lr}
 80042f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80042fa:	f000 ff4f 	bl	800519c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80042fe:	f007 fd07 	bl	800bd10 <xTaskGetSchedulerState>
 8004302:	4603      	mov	r3, r0
 8004304:	2b01      	cmp	r3, #1
 8004306:	d001      	beq.n	800430c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8004308:	f007 ff46 	bl	800c198 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800430c:	bf00      	nop
 800430e:	bd80      	pop	{r7, pc}

08004310 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void) //blue tooth interrupt
{
 8004310:	b580      	push	{r7, lr}
 8004312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8004314:	2020      	movs	r0, #32
 8004316:	f001 fce9 	bl	8005cec <HAL_GPIO_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_6); //blue tooth module
 800431a:	4806      	ldr	r0, [pc, #24]	@ (8004334 <EXTI9_5_IRQHandler+0x24>)
 800431c:	f001 f9ce 	bl	80056bc <HAL_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8004320:	2080      	movs	r0, #128	@ 0x80
 8004322:	f001 fce3 	bl	8005cec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8004326:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800432a:	f001 fcdf 	bl	8005cec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800432e:	bf00      	nop
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	200007c0 	.word	0x200007c0

08004338 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 800433c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8004340:	f001 fcd4 	bl	8005cec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8004344:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8004348:	f001 fcd0 	bl	8005cec <HAL_GPIO_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 800434c:	4806      	ldr	r0, [pc, #24]	@ (8004368 <EXTI15_10_IRQHandler+0x30>)
 800434e:	f001 f9b5 	bl	80056bc <HAL_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8004352:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8004356:	f001 fcc9 	bl	8005cec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 800435a:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800435e:	f001 fcc5 	bl	8005cec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004362:	bf00      	nop
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	2000051c 	.word	0x2000051c

0800436c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800436c:	b480      	push	{r7}
 800436e:	af00      	add	r7, sp, #0
  return 1;
 8004370:	2301      	movs	r3, #1
}
 8004372:	4618      	mov	r0, r3
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <_kill>:

int _kill(int pid, int sig)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b082      	sub	sp, #8
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004386:	f00a fa15 	bl	800e7b4 <__errno>
 800438a:	4603      	mov	r3, r0
 800438c:	2216      	movs	r2, #22
 800438e:	601a      	str	r2, [r3, #0]
  return -1;
 8004390:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004394:	4618      	mov	r0, r3
 8004396:	3708      	adds	r7, #8
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <_exit>:

void _exit (int status)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b082      	sub	sp, #8
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80043a4:	f04f 31ff 	mov.w	r1, #4294967295
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f7ff ffe7 	bl	800437c <_kill>
  while (1) {}    /* Make sure we hang here */
 80043ae:	bf00      	nop
 80043b0:	e7fd      	b.n	80043ae <_exit+0x12>

080043b2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80043b2:	b580      	push	{r7, lr}
 80043b4:	b086      	sub	sp, #24
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	60f8      	str	r0, [r7, #12]
 80043ba:	60b9      	str	r1, [r7, #8]
 80043bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043be:	2300      	movs	r3, #0
 80043c0:	617b      	str	r3, [r7, #20]
 80043c2:	e00a      	b.n	80043da <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80043c4:	f3af 8000 	nop.w
 80043c8:	4601      	mov	r1, r0
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	1c5a      	adds	r2, r3, #1
 80043ce:	60ba      	str	r2, [r7, #8]
 80043d0:	b2ca      	uxtb	r2, r1
 80043d2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	3301      	adds	r3, #1
 80043d8:	617b      	str	r3, [r7, #20]
 80043da:	697a      	ldr	r2, [r7, #20]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	429a      	cmp	r2, r3
 80043e0:	dbf0      	blt.n	80043c4 <_read+0x12>
  }

  return len;
 80043e2:	687b      	ldr	r3, [r7, #4]
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3718      	adds	r7, #24
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}

080043ec <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b086      	sub	sp, #24
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043f8:	2300      	movs	r3, #0
 80043fa:	617b      	str	r3, [r7, #20]
 80043fc:	e009      	b.n	8004412 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	1c5a      	adds	r2, r3, #1
 8004402:	60ba      	str	r2, [r7, #8]
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	4618      	mov	r0, r3
 8004408:	f000 fa4c 	bl	80048a4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	3301      	adds	r3, #1
 8004410:	617b      	str	r3, [r7, #20]
 8004412:	697a      	ldr	r2, [r7, #20]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	429a      	cmp	r2, r3
 8004418:	dbf1      	blt.n	80043fe <_write+0x12>
  }
  return len;
 800441a:	687b      	ldr	r3, [r7, #4]
}
 800441c:	4618      	mov	r0, r3
 800441e:	3718      	adds	r7, #24
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}

08004424 <_close>:

int _close(int file)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800442c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004430:	4618      	mov	r0, r3
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800444c:	605a      	str	r2, [r3, #4]
  return 0;
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <_isatty>:

int _isatty(int file)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004464:	2301      	movs	r3, #1
}
 8004466:	4618      	mov	r0, r3
 8004468:	370c      	adds	r7, #12
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr

08004472 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004472:	b480      	push	{r7}
 8004474:	b085      	sub	sp, #20
 8004476:	af00      	add	r7, sp, #0
 8004478:	60f8      	str	r0, [r7, #12]
 800447a:	60b9      	str	r1, [r7, #8]
 800447c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	3714      	adds	r7, #20
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <_open>:

int _open(char *path, int flags, ...)
{
 800448c:	b40e      	push	{r1, r2, r3}
 800448e:	b480      	push	{r7}
 8004490:	b082      	sub	sp, #8
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
  (void)path;
  (void)flags;
  /* Pretend like we always fail */
  return -1;
 8004496:	f04f 33ff 	mov.w	r3, #4294967295
}
 800449a:	4618      	mov	r0, r3
 800449c:	3708      	adds	r7, #8
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	b003      	add	sp, #12
 80044a6:	4770      	bx	lr

080044a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b086      	sub	sp, #24
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80044b0:	4a14      	ldr	r2, [pc, #80]	@ (8004504 <_sbrk+0x5c>)
 80044b2:	4b15      	ldr	r3, [pc, #84]	@ (8004508 <_sbrk+0x60>)
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80044bc:	4b13      	ldr	r3, [pc, #76]	@ (800450c <_sbrk+0x64>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d102      	bne.n	80044ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80044c4:	4b11      	ldr	r3, [pc, #68]	@ (800450c <_sbrk+0x64>)
 80044c6:	4a12      	ldr	r2, [pc, #72]	@ (8004510 <_sbrk+0x68>)
 80044c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80044ca:	4b10      	ldr	r3, [pc, #64]	@ (800450c <_sbrk+0x64>)
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4413      	add	r3, r2
 80044d2:	693a      	ldr	r2, [r7, #16]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d207      	bcs.n	80044e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80044d8:	f00a f96c 	bl	800e7b4 <__errno>
 80044dc:	4603      	mov	r3, r0
 80044de:	220c      	movs	r2, #12
 80044e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80044e2:	f04f 33ff 	mov.w	r3, #4294967295
 80044e6:	e009      	b.n	80044fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80044e8:	4b08      	ldr	r3, [pc, #32]	@ (800450c <_sbrk+0x64>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80044ee:	4b07      	ldr	r3, [pc, #28]	@ (800450c <_sbrk+0x64>)
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4413      	add	r3, r2
 80044f6:	4a05      	ldr	r2, [pc, #20]	@ (800450c <_sbrk+0x64>)
 80044f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80044fa:	68fb      	ldr	r3, [r7, #12]
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3718      	adds	r7, #24
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	20018000 	.word	0x20018000
 8004508:	00000400 	.word	0x00000400
 800450c:	2000385c 	.word	0x2000385c
 8004510:	20004b18 	.word	0x20004b18

08004514 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004514:	b480      	push	{r7}
 8004516:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004518:	4b06      	ldr	r3, [pc, #24]	@ (8004534 <SystemInit+0x20>)
 800451a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800451e:	4a05      	ldr	r2, [pc, #20]	@ (8004534 <SystemInit+0x20>)
 8004520:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004524:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8004528:	bf00      	nop
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr
 8004532:	bf00      	nop
 8004534:	e000ed00 	.word	0xe000ed00

08004538 <Reset_Handler>:
 8004538:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004570 <LoopForever+0x2>
 800453c:	f7ff ffea 	bl	8004514 <SystemInit>
 8004540:	480c      	ldr	r0, [pc, #48]	@ (8004574 <LoopForever+0x6>)
 8004542:	490d      	ldr	r1, [pc, #52]	@ (8004578 <LoopForever+0xa>)
 8004544:	4a0d      	ldr	r2, [pc, #52]	@ (800457c <LoopForever+0xe>)
 8004546:	2300      	movs	r3, #0
 8004548:	e002      	b.n	8004550 <LoopCopyDataInit>

0800454a <CopyDataInit>:
 800454a:	58d4      	ldr	r4, [r2, r3]
 800454c:	50c4      	str	r4, [r0, r3]
 800454e:	3304      	adds	r3, #4

08004550 <LoopCopyDataInit>:
 8004550:	18c4      	adds	r4, r0, r3
 8004552:	428c      	cmp	r4, r1
 8004554:	d3f9      	bcc.n	800454a <CopyDataInit>
 8004556:	4a0a      	ldr	r2, [pc, #40]	@ (8004580 <LoopForever+0x12>)
 8004558:	4c0a      	ldr	r4, [pc, #40]	@ (8004584 <LoopForever+0x16>)
 800455a:	2300      	movs	r3, #0
 800455c:	e001      	b.n	8004562 <LoopFillZerobss>

0800455e <FillZerobss>:
 800455e:	6013      	str	r3, [r2, #0]
 8004560:	3204      	adds	r2, #4

08004562 <LoopFillZerobss>:
 8004562:	42a2      	cmp	r2, r4
 8004564:	d3fb      	bcc.n	800455e <FillZerobss>
 8004566:	f00a f92b 	bl	800e7c0 <__libc_init_array>
 800456a:	f7fe ff2f 	bl	80033cc <main>

0800456e <LoopForever>:
 800456e:	e7fe      	b.n	800456e <LoopForever>
 8004570:	20018000 	.word	0x20018000
 8004574:	20000000 	.word	0x20000000
 8004578:	20000730 	.word	0x20000730
 800457c:	08013214 	.word	0x08013214
 8004580:	20000730 	.word	0x20000730
 8004584:	20004b18 	.word	0x20004b18

08004588 <ADC1_2_IRQHandler>:
 8004588:	e7fe      	b.n	8004588 <ADC1_2_IRQHandler>
	...

0800458c <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b082      	sub	sp, #8
 8004590:	af00      	add	r7, sp, #0
 8004592:	4603      	mov	r3, r0
 8004594:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 8004596:	79fb      	ldrb	r3, [r7, #7]
 8004598:	4a04      	ldr	r2, [pc, #16]	@ (80045ac <BSP_LED_Init+0x20>)
 800459a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800459e:	4798      	blx	r3
  return BSP_ERROR_NONE;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3708      	adds	r7, #8
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	080126d4 	.word	0x080126d4

080045b0 <BSP_LED_Toggle>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b082      	sub	sp, #8
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	4603      	mov	r3, r0
 80045b8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80045ba:	79fb      	ldrb	r3, [r7, #7]
 80045bc:	4a06      	ldr	r2, [pc, #24]	@ (80045d8 <BSP_LED_Toggle+0x28>)
 80045be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045c2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80045c6:	4611      	mov	r1, r2
 80045c8:	4618      	mov	r0, r3
 80045ca:	f001 fb75 	bl	8005cb8 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 80045ce:	2300      	movs	r3, #0
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3708      	adds	r7, #8
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	20000514 	.word	0x20000514

080045dc <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 80045dc:	b580      	push	{r7, lr}
 80045de:	b088      	sub	sp, #32
 80045e0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80045e2:	4b1c      	ldr	r3, [pc, #112]	@ (8004654 <LED_USER_GPIO_Init+0x78>)
 80045e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045e6:	4a1b      	ldr	r2, [pc, #108]	@ (8004654 <LED_USER_GPIO_Init+0x78>)
 80045e8:	f043 0302 	orr.w	r3, r3, #2
 80045ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80045ee:	4b19      	ldr	r3, [pc, #100]	@ (8004654 <LED_USER_GPIO_Init+0x78>)
 80045f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045f2:	f003 0302 	and.w	r3, r3, #2
 80045f6:	60bb      	str	r3, [r7, #8]
 80045f8:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045fa:	f107 030c 	add.w	r3, r7, #12
 80045fe:	2200      	movs	r2, #0
 8004600:	601a      	str	r2, [r3, #0]
 8004602:	605a      	str	r2, [r3, #4]
 8004604:	609a      	str	r2, [r3, #8]
 8004606:	60da      	str	r2, [r3, #12]
 8004608:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800460a:	4b12      	ldr	r3, [pc, #72]	@ (8004654 <LED_USER_GPIO_Init+0x78>)
 800460c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800460e:	4a11      	ldr	r2, [pc, #68]	@ (8004654 <LED_USER_GPIO_Init+0x78>)
 8004610:	f043 0302 	orr.w	r3, r3, #2
 8004614:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004616:	4b0f      	ldr	r3, [pc, #60]	@ (8004654 <LED_USER_GPIO_Init+0x78>)
 8004618:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	607b      	str	r3, [r7, #4]
 8004620:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 8004622:	2200      	movs	r2, #0
 8004624:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004628:	480b      	ldr	r0, [pc, #44]	@ (8004658 <LED_USER_GPIO_Init+0x7c>)
 800462a:	f001 fb2d 	bl	8005c88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 800462e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004632:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004634:	2301      	movs	r3, #1
 8004636:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004638:	2300      	movs	r3, #0
 800463a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800463c:	2300      	movs	r3, #0
 800463e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 8004640:	f107 030c 	add.w	r3, r7, #12
 8004644:	4619      	mov	r1, r3
 8004646:	4804      	ldr	r0, [pc, #16]	@ (8004658 <LED_USER_GPIO_Init+0x7c>)
 8004648:	f001 f868 	bl	800571c <HAL_GPIO_Init>

}
 800464c:	bf00      	nop
 800464e:	3720      	adds	r7, #32
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}
 8004654:	40021000 	.word	0x40021000
 8004658:	48000400 	.word	0x48000400

0800465c <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	4603      	mov	r3, r0
 8004664:	460a      	mov	r2, r1
 8004666:	71fb      	strb	r3, [r7, #7]
 8004668:	4613      	mov	r3, r2
 800466a:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800466c:	2300      	movs	r3, #0
 800466e:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 8004670:	79fb      	ldrb	r3, [r7, #7]
 8004672:	4a1f      	ldr	r2, [pc, #124]	@ (80046f0 <BSP_PB_Init+0x94>)
 8004674:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004678:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 800467a:	79bb      	ldrb	r3, [r7, #6]
 800467c:	2b01      	cmp	r3, #1
 800467e:	d132      	bne.n	80046e6 <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8004680:	79fb      	ldrb	r3, [r7, #7]
 8004682:	00db      	lsls	r3, r3, #3
 8004684:	4a1b      	ldr	r2, [pc, #108]	@ (80046f4 <BSP_PB_Init+0x98>)
 8004686:	441a      	add	r2, r3
 8004688:	79fb      	ldrb	r3, [r7, #7]
 800468a:	491b      	ldr	r1, [pc, #108]	@ (80046f8 <BSP_PB_Init+0x9c>)
 800468c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004690:	4619      	mov	r1, r3
 8004692:	4610      	mov	r0, r2
 8004694:	f000 fffe 	bl	8005694 <HAL_EXTI_GetHandle>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d003      	beq.n	80046a6 <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800469e:	f06f 0303 	mvn.w	r3, #3
 80046a2:	60fb      	str	r3, [r7, #12]
 80046a4:	e01f      	b.n	80046e6 <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 80046a6:	79fb      	ldrb	r3, [r7, #7]
 80046a8:	00db      	lsls	r3, r3, #3
 80046aa:	4a12      	ldr	r2, [pc, #72]	@ (80046f4 <BSP_PB_Init+0x98>)
 80046ac:	1898      	adds	r0, r3, r2
 80046ae:	79fb      	ldrb	r3, [r7, #7]
 80046b0:	4a12      	ldr	r2, [pc, #72]	@ (80046fc <BSP_PB_Init+0xa0>)
 80046b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046b6:	461a      	mov	r2, r3
 80046b8:	2100      	movs	r1, #0
 80046ba:	f000 ffd1 	bl	8005660 <HAL_EXTI_RegisterCallback>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d003      	beq.n	80046cc <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80046c4:	f06f 0303 	mvn.w	r3, #3
 80046c8:	60fb      	str	r3, [r7, #12]
 80046ca:	e00c      	b.n	80046e6 <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80046cc:	2028      	movs	r0, #40	@ 0x28
 80046ce:	79fb      	ldrb	r3, [r7, #7]
 80046d0:	4a0b      	ldr	r2, [pc, #44]	@ (8004700 <BSP_PB_Init+0xa4>)
 80046d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046d6:	2200      	movs	r2, #0
 80046d8:	4619      	mov	r1, r3
 80046da:	f000 fe7e 	bl	80053da <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80046de:	2328      	movs	r3, #40	@ 0x28
 80046e0:	4618      	mov	r0, r3
 80046e2:	f000 fe96 	bl	8005412 <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 80046e6:	68fb      	ldr	r3, [r7, #12]
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3710      	adds	r7, #16
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	080126d8 	.word	0x080126d8
 80046f4:	2000051c 	.word	0x2000051c
 80046f8:	080126dc 	.word	0x080126dc
 80046fc:	080126e0 	.word	0x080126e0
 8004700:	080126e4 	.word	0x080126e4

08004704 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
 800470a:	4603      	mov	r3, r0
 800470c:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 800470e:	79fb      	ldrb	r3, [r7, #7]
 8004710:	4a09      	ldr	r2, [pc, #36]	@ (8004738 <BSP_PB_GetState+0x34>)
 8004712:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004716:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800471a:	4611      	mov	r1, r2
 800471c:	4618      	mov	r0, r3
 800471e:	f001 fa9b 	bl	8005c58 <HAL_GPIO_ReadPin>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	bf0c      	ite	eq
 8004728:	2301      	moveq	r3, #1
 800472a:	2300      	movne	r3, #0
 800472c:	b2db      	uxtb	r3, r3
}
 800472e:	4618      	mov	r0, r3
 8004730:	3708      	adds	r7, #8
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	20000518 	.word	0x20000518

0800473c <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8004740:	2000      	movs	r0, #0
 8004742:	f7fd ffa1 	bl	8002688 <BSP_PB_Callback>
}
 8004746:	bf00      	nop
 8004748:	bd80      	pop	{r7, pc}
	...

0800474c <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 800474c:	b580      	push	{r7, lr}
 800474e:	b088      	sub	sp, #32
 8004750:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004752:	4b19      	ldr	r3, [pc, #100]	@ (80047b8 <BUTTON_USER_GPIO_Init+0x6c>)
 8004754:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004756:	4a18      	ldr	r2, [pc, #96]	@ (80047b8 <BUTTON_USER_GPIO_Init+0x6c>)
 8004758:	f043 0304 	orr.w	r3, r3, #4
 800475c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800475e:	4b16      	ldr	r3, [pc, #88]	@ (80047b8 <BUTTON_USER_GPIO_Init+0x6c>)
 8004760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004762:	f003 0304 	and.w	r3, r3, #4
 8004766:	60bb      	str	r3, [r7, #8]
 8004768:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800476a:	f107 030c 	add.w	r3, r7, #12
 800476e:	2200      	movs	r2, #0
 8004770:	601a      	str	r2, [r3, #0]
 8004772:	605a      	str	r2, [r3, #4]
 8004774:	609a      	str	r2, [r3, #8]
 8004776:	60da      	str	r2, [r3, #12]
 8004778:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800477a:	4b0f      	ldr	r3, [pc, #60]	@ (80047b8 <BUTTON_USER_GPIO_Init+0x6c>)
 800477c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800477e:	4a0e      	ldr	r2, [pc, #56]	@ (80047b8 <BUTTON_USER_GPIO_Init+0x6c>)
 8004780:	f043 0304 	orr.w	r3, r3, #4
 8004784:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004786:	4b0c      	ldr	r3, [pc, #48]	@ (80047b8 <BUTTON_USER_GPIO_Init+0x6c>)
 8004788:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800478a:	f003 0304 	and.w	r3, r3, #4
 800478e:	607b      	str	r3, [r7, #4]
 8004790:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 8004792:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004796:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004798:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800479c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800479e:	2300      	movs	r3, #0
 80047a0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 80047a2:	f107 030c 	add.w	r3, r7, #12
 80047a6:	4619      	mov	r1, r3
 80047a8:	4804      	ldr	r0, [pc, #16]	@ (80047bc <BUTTON_USER_GPIO_Init+0x70>)
 80047aa:	f000 ffb7 	bl	800571c <HAL_GPIO_Init>

}
 80047ae:	bf00      	nop
 80047b0:	3720      	adds	r7, #32
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop
 80047b8:	40021000 	.word	0x40021000
 80047bc:	48000800 	.word	0x48000800

080047c0 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	4603      	mov	r3, r0
 80047c8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80047ca:	2300      	movs	r3, #0
 80047cc:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 80047ce:	79fb      	ldrb	r3, [r7, #7]
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d903      	bls.n	80047dc <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80047d4:	f06f 0301 	mvn.w	r3, #1
 80047d8:	60fb      	str	r3, [r7, #12]
 80047da:	e025      	b.n	8004828 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 80047dc:	79fb      	ldrb	r3, [r7, #7]
 80047de:	79fa      	ldrb	r2, [r7, #7]
 80047e0:	4914      	ldr	r1, [pc, #80]	@ (8004834 <BSP_COM_Init+0x74>)
 80047e2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80047e6:	4814      	ldr	r0, [pc, #80]	@ (8004838 <BSP_COM_Init+0x78>)
 80047e8:	4613      	mov	r3, r2
 80047ea:	011b      	lsls	r3, r3, #4
 80047ec:	4413      	add	r3, r2
 80047ee:	00db      	lsls	r3, r3, #3
 80047f0:	4403      	add	r3, r0
 80047f2:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART1_MspInit(&hcom_uart[COM]);
 80047f4:	79fa      	ldrb	r2, [r7, #7]
 80047f6:	4613      	mov	r3, r2
 80047f8:	011b      	lsls	r3, r3, #4
 80047fa:	4413      	add	r3, r2
 80047fc:	00db      	lsls	r3, r3, #3
 80047fe:	4a0e      	ldr	r2, [pc, #56]	@ (8004838 <BSP_COM_Init+0x78>)
 8004800:	4413      	add	r3, r2
 8004802:	4618      	mov	r0, r3
 8004804:	f000 f86a 	bl	80048dc <USART1_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART1_UART_Init(&hcom_uart[COM]))
 8004808:	79fa      	ldrb	r2, [r7, #7]
 800480a:	4613      	mov	r3, r2
 800480c:	011b      	lsls	r3, r3, #4
 800480e:	4413      	add	r3, r2
 8004810:	00db      	lsls	r3, r3, #3
 8004812:	4a09      	ldr	r2, [pc, #36]	@ (8004838 <BSP_COM_Init+0x78>)
 8004814:	4413      	add	r3, r2
 8004816:	4618      	mov	r0, r3
 8004818:	f000 f810 	bl	800483c <MX_USART1_UART_Init>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d002      	beq.n	8004828 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8004822:	f06f 0303 	mvn.w	r3, #3
 8004826:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8004828:	68fb      	ldr	r3, [r7, #12]
}
 800482a:	4618      	mov	r0, r3
 800482c:	3710      	adds	r7, #16
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	20000524 	.word	0x20000524
 8004838:	20003860 	.word	0x20003860

0800483c <MX_USART1_UART_Init>:
 */

/* USART1 init function */

__weak HAL_StatusTypeDef MX_USART1_UART_Init(UART_HandleTypeDef* huart)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8004844:	2300      	movs	r3, #0
 8004846:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART1;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4a15      	ldr	r2, [pc, #84]	@ (80048a0 <MX_USART1_UART_Init+0x64>)
 800484c:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004854:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	220c      	movs	r2, #12
 800486c:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	621a      	str	r2, [r3, #32]
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(huart) != HAL_OK)
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f004 f9d6 	bl	8008c38 <HAL_UART_Init>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d001      	beq.n	8004896 <MX_USART1_UART_Init+0x5a>
  {
    ret = HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004896:	7bfb      	ldrb	r3, [r7, #15]
}
 8004898:	4618      	mov	r0, r3
 800489a:	3710      	adds	r7, #16
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	40013800 	.word	0x40013800

080048a4 <__io_putchar>:
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
  return ch;
}
#else /* For GCC Toolchains */
int __io_putchar (int ch)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b082      	sub	sp, #8
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 80048ac:	4b09      	ldr	r3, [pc, #36]	@ (80048d4 <__io_putchar+0x30>)
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	461a      	mov	r2, r3
 80048b2:	4613      	mov	r3, r2
 80048b4:	011b      	lsls	r3, r3, #4
 80048b6:	4413      	add	r3, r2
 80048b8:	00db      	lsls	r3, r3, #3
 80048ba:	4a07      	ldr	r2, [pc, #28]	@ (80048d8 <__io_putchar+0x34>)
 80048bc:	1898      	adds	r0, r3, r2
 80048be:	1d39      	adds	r1, r7, #4
 80048c0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80048c4:	2201      	movs	r2, #1
 80048c6:	f004 fa05 	bl	8008cd4 <HAL_UART_Transmit>
  return ch;
 80048ca:	687b      	ldr	r3, [r7, #4]
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3708      	adds	r7, #8
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	200038e8 	.word	0x200038e8
 80048d8:	20003860 	.word	0x20003860

080048dc <USART1_MspInit>:
 * @param  huart USART1 handle
 * @retval None
 */

static void USART1_MspInit(UART_HandleTypeDef* uartHandle)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b0ac      	sub	sp, #176	@ 0xb0
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80048e4:	f107 0314 	add.w	r3, r7, #20
 80048e8:	2288      	movs	r2, #136	@ 0x88
 80048ea:	2100      	movs	r1, #0
 80048ec:	4618      	mov	r0, r3
 80048ee:	f009 fd14 	bl	800e31a <memset>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80048f2:	2301      	movs	r3, #1
 80048f4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80048f6:	2300      	movs	r3, #0
 80048f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 80048fa:	f107 0314 	add.w	r3, r7, #20
 80048fe:	4618      	mov	r0, r3
 8004900:	f003 f890 	bl	8007a24 <HAL_RCCEx_PeriphCLKConfig>

    /* Enable Peripheral clock */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004904:	4b22      	ldr	r3, [pc, #136]	@ (8004990 <USART1_MspInit+0xb4>)
 8004906:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004908:	4a21      	ldr	r2, [pc, #132]	@ (8004990 <USART1_MspInit+0xb4>)
 800490a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800490e:	6613      	str	r3, [r2, #96]	@ 0x60
 8004910:	4b1f      	ldr	r3, [pc, #124]	@ (8004990 <USART1_MspInit+0xb4>)
 8004912:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004914:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004918:	613b      	str	r3, [r7, #16]
 800491a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800491c:	4b1c      	ldr	r3, [pc, #112]	@ (8004990 <USART1_MspInit+0xb4>)
 800491e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004920:	4a1b      	ldr	r2, [pc, #108]	@ (8004990 <USART1_MspInit+0xb4>)
 8004922:	f043 0302 	orr.w	r3, r3, #2
 8004926:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004928:	4b19      	ldr	r3, [pc, #100]	@ (8004990 <USART1_MspInit+0xb4>)
 800492a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800492c:	f003 0302 	and.w	r3, r3, #2
 8004930:	60fb      	str	r3, [r7, #12]
 8004932:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BUS_USART1_TX_GPIO_PIN;
 8004934:	2340      	movs	r3, #64	@ 0x40
 8004936:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800493a:	2302      	movs	r3, #2
 800493c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004940:	2300      	movs	r3, #0
 8004942:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004946:	2303      	movs	r3, #3
 8004948:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = BUS_USART1_TX_GPIO_AF;
 800494c:	2307      	movs	r3, #7
 800494e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(BUS_USART1_TX_GPIO_PORT, &GPIO_InitStruct);
 8004952:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8004956:	4619      	mov	r1, r3
 8004958:	480e      	ldr	r0, [pc, #56]	@ (8004994 <USART1_MspInit+0xb8>)
 800495a:	f000 fedf 	bl	800571c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART1_RX_GPIO_PIN;
 800495e:	2380      	movs	r3, #128	@ 0x80
 8004960:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004964:	2302      	movs	r3, #2
 8004966:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800496a:	2300      	movs	r3, #0
 800496c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004970:	2303      	movs	r3, #3
 8004972:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = BUS_USART1_RX_GPIO_AF;
 8004976:	2307      	movs	r3, #7
 8004978:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(BUS_USART1_RX_GPIO_PORT, &GPIO_InitStruct);
 800497c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8004980:	4619      	mov	r1, r3
 8004982:	4804      	ldr	r0, [pc, #16]	@ (8004994 <USART1_MspInit+0xb8>)
 8004984:	f000 feca 	bl	800571c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
}
 8004988:	bf00      	nop
 800498a:	37b0      	adds	r7, #176	@ 0xb0
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	40021000 	.word	0x40021000
 8004994:	48000400 	.word	0x48000400

08004998 <I2Cx_MspInit>:
void     NFC_IO_Delay(uint32_t Delay);
/**
 * @}
 */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b08a      	sub	sp, #40	@ 0x28
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80049a0:	4b27      	ldr	r3, [pc, #156]	@ (8004a40 <I2Cx_MspInit+0xa8>)
 80049a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049a4:	4a26      	ldr	r2, [pc, #152]	@ (8004a40 <I2Cx_MspInit+0xa8>)
 80049a6:	f043 0302 	orr.w	r3, r3, #2
 80049aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80049ac:	4b24      	ldr	r3, [pc, #144]	@ (8004a40 <I2Cx_MspInit+0xa8>)
 80049ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049b0:	f003 0302 	and.w	r3, r3, #2
 80049b4:	613b      	str	r3, [r7, #16]
 80049b6:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 80049b8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80049bc:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80049be:	2312      	movs	r3, #18
 80049c0:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80049c2:	2301      	movs	r3, #1
 80049c4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049c6:	2303      	movs	r3, #3
 80049c8:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80049ca:	2304      	movs	r3, #4
 80049cc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80049ce:	f107 0314 	add.w	r3, r7, #20
 80049d2:	4619      	mov	r1, r3
 80049d4:	481b      	ldr	r0, [pc, #108]	@ (8004a44 <I2Cx_MspInit+0xac>)
 80049d6:	f000 fea1 	bl	800571c <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80049da:	f107 0314 	add.w	r3, r7, #20
 80049de:	4619      	mov	r1, r3
 80049e0:	4818      	ldr	r0, [pc, #96]	@ (8004a44 <I2Cx_MspInit+0xac>)
 80049e2:	f000 fe9b 	bl	800571c <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 80049e6:	4b16      	ldr	r3, [pc, #88]	@ (8004a40 <I2Cx_MspInit+0xa8>)
 80049e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049ea:	4a15      	ldr	r2, [pc, #84]	@ (8004a40 <I2Cx_MspInit+0xa8>)
 80049ec:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80049f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80049f2:	4b13      	ldr	r3, [pc, #76]	@ (8004a40 <I2Cx_MspInit+0xa8>)
 80049f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049fa:	60fb      	str	r3, [r7, #12]
 80049fc:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 80049fe:	4b10      	ldr	r3, [pc, #64]	@ (8004a40 <I2Cx_MspInit+0xa8>)
 8004a00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a02:	4a0f      	ldr	r2, [pc, #60]	@ (8004a40 <I2Cx_MspInit+0xa8>)
 8004a04:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004a08:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8004a0a:	4b0d      	ldr	r3, [pc, #52]	@ (8004a40 <I2Cx_MspInit+0xa8>)
 8004a0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a0e:	4a0c      	ldr	r2, [pc, #48]	@ (8004a40 <I2Cx_MspInit+0xa8>)
 8004a10:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8004a14:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8004a16:	2200      	movs	r2, #0
 8004a18:	210f      	movs	r1, #15
 8004a1a:	2021      	movs	r0, #33	@ 0x21
 8004a1c:	f000 fcdd 	bl	80053da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8004a20:	2021      	movs	r0, #33	@ 0x21
 8004a22:	f000 fcf6 	bl	8005412 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8004a26:	2200      	movs	r2, #0
 8004a28:	210f      	movs	r1, #15
 8004a2a:	2022      	movs	r0, #34	@ 0x22
 8004a2c:	f000 fcd5 	bl	80053da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8004a30:	2022      	movs	r0, #34	@ 0x22
 8004a32:	f000 fcee 	bl	8005412 <HAL_NVIC_EnableIRQ>
}
 8004a36:	bf00      	nop
 8004a38:	3728      	adds	r7, #40	@ 0x28
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	40021000 	.word	0x40021000
 8004a44:	48000400 	.word	0x48000400

08004a48 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b082      	sub	sp, #8
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a12      	ldr	r2, [pc, #72]	@ (8004a9c <I2Cx_Init+0x54>)
 8004a54:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a11      	ldr	r2, [pc, #68]	@ (8004aa0 <I2Cx_Init+0x58>)
 8004a5a:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2201      	movs	r2, #1
 8004a66:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f7ff ff89 	bl	8004998 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f001 f953 	bl	8005d32 <HAL_I2C_Init>

  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);
 8004a8c:	2100      	movs	r1, #0
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f001 ff0a 	bl	80068a8 <HAL_I2CEx_ConfigAnalogFilter>
}
 8004a94:	bf00      	nop
 8004a96:	3708      	adds	r7, #8
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	40005800 	.word	0x40005800
 8004aa0:	00702681 	.word	0x00702681

08004aa4 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b08a      	sub	sp, #40	@ 0x28
 8004aa8:	af04      	add	r7, sp, #16
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	4608      	mov	r0, r1
 8004aae:	4611      	mov	r1, r2
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	72fb      	strb	r3, [r7, #11]
 8004ab6:	460b      	mov	r3, r1
 8004ab8:	813b      	strh	r3, [r7, #8]
 8004aba:	4613      	mov	r3, r2
 8004abc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8004ac2:	7afb      	ldrb	r3, [r7, #11]
 8004ac4:	b299      	uxth	r1, r3
 8004ac6:	88f8      	ldrh	r0, [r7, #6]
 8004ac8:	893a      	ldrh	r2, [r7, #8]
 8004aca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004ace:	9302      	str	r3, [sp, #8]
 8004ad0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004ad2:	9301      	str	r3, [sp, #4]
 8004ad4:	6a3b      	ldr	r3, [r7, #32]
 8004ad6:	9300      	str	r3, [sp, #0]
 8004ad8:	4603      	mov	r3, r0
 8004ada:	68f8      	ldr	r0, [r7, #12]
 8004adc:	f001 fb08 	bl	80060f0 <HAL_I2C_Mem_Read>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8004ae4:	7dfb      	ldrb	r3, [r7, #23]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d004      	beq.n	8004af4 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8004aea:	7afb      	ldrb	r3, [r7, #11]
 8004aec:	4619      	mov	r1, r3
 8004aee:	68f8      	ldr	r0, [r7, #12]
 8004af0:	f000 f832 	bl	8004b58 <I2Cx_Error>
  }
  return status;
 8004af4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3718      	adds	r7, #24
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}

08004afe <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8004afe:	b580      	push	{r7, lr}
 8004b00:	b08a      	sub	sp, #40	@ 0x28
 8004b02:	af04      	add	r7, sp, #16
 8004b04:	60f8      	str	r0, [r7, #12]
 8004b06:	4608      	mov	r0, r1
 8004b08:	4611      	mov	r1, r2
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	72fb      	strb	r3, [r7, #11]
 8004b10:	460b      	mov	r3, r1
 8004b12:	813b      	strh	r3, [r7, #8]
 8004b14:	4613      	mov	r3, r2
 8004b16:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8004b1c:	7afb      	ldrb	r3, [r7, #11]
 8004b1e:	b299      	uxth	r1, r3
 8004b20:	88f8      	ldrh	r0, [r7, #6]
 8004b22:	893a      	ldrh	r2, [r7, #8]
 8004b24:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004b28:	9302      	str	r3, [sp, #8]
 8004b2a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004b2c:	9301      	str	r3, [sp, #4]
 8004b2e:	6a3b      	ldr	r3, [r7, #32]
 8004b30:	9300      	str	r3, [sp, #0]
 8004b32:	4603      	mov	r3, r0
 8004b34:	68f8      	ldr	r0, [r7, #12]
 8004b36:	f001 f9c7 	bl	8005ec8 <HAL_I2C_Mem_Write>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8004b3e:	7dfb      	ldrb	r3, [r7, #23]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d004      	beq.n	8004b4e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8004b44:	7afb      	ldrb	r3, [r7, #11]
 8004b46:	4619      	mov	r1, r3
 8004b48:	68f8      	ldr	r0, [r7, #12]
 8004b4a:	f000 f805 	bl	8004b58 <I2Cx_Error>
  }
  return status;
 8004b4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3718      	adds	r7, #24
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	460b      	mov	r3, r1
 8004b62:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f001 f97f 	bl	8005e68 <HAL_I2C_DeInit>

  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f7ff ff6c 	bl	8004a48 <I2Cx_Init>
}
 8004b70:	bf00      	nop
 8004b72:	3708      	adds	r7, #8
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <SENSOR_IO_Init>:


void SENSOR_IO_Init(void)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8004b7c:	4802      	ldr	r0, [pc, #8]	@ (8004b88 <SENSOR_IO_Init+0x10>)
 8004b7e:	f7ff ff63 	bl	8004a48 <I2Cx_Init>
}
 8004b82:	bf00      	nop
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	200038ec 	.word	0x200038ec

08004b8c <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af02      	add	r7, sp, #8
 8004b92:	4603      	mov	r3, r0
 8004b94:	71fb      	strb	r3, [r7, #7]
 8004b96:	460b      	mov	r3, r1
 8004b98:	71bb      	strb	r3, [r7, #6]
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8004b9e:	79bb      	ldrb	r3, [r7, #6]
 8004ba0:	b29a      	uxth	r2, r3
 8004ba2:	79f9      	ldrb	r1, [r7, #7]
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	9301      	str	r3, [sp, #4]
 8004ba8:	1d7b      	adds	r3, r7, #5
 8004baa:	9300      	str	r3, [sp, #0]
 8004bac:	2301      	movs	r3, #1
 8004bae:	4803      	ldr	r0, [pc, #12]	@ (8004bbc <SENSOR_IO_Write+0x30>)
 8004bb0:	f7ff ffa5 	bl	8004afe <I2Cx_WriteMultiple>
}
 8004bb4:	bf00      	nop
 8004bb6:	3708      	adds	r7, #8
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	200038ec 	.word	0x200038ec

08004bc0 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b086      	sub	sp, #24
 8004bc4:	af02      	add	r7, sp, #8
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	460a      	mov	r2, r1
 8004bca:	71fb      	strb	r3, [r7, #7]
 8004bcc:	4613      	mov	r3, r2
 8004bce:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8004bd4:	79bb      	ldrb	r3, [r7, #6]
 8004bd6:	b29a      	uxth	r2, r3
 8004bd8:	79f9      	ldrb	r1, [r7, #7]
 8004bda:	2301      	movs	r3, #1
 8004bdc:	9301      	str	r3, [sp, #4]
 8004bde:	f107 030f 	add.w	r3, r7, #15
 8004be2:	9300      	str	r3, [sp, #0]
 8004be4:	2301      	movs	r3, #1
 8004be6:	4804      	ldr	r0, [pc, #16]	@ (8004bf8 <SENSOR_IO_Read+0x38>)
 8004be8:	f7ff ff5c 	bl	8004aa4 <I2Cx_ReadMultiple>

  return read_value;
 8004bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3710      	adds	r7, #16
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop
 8004bf8:	200038ec 	.word	0x200038ec

08004bfc <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b084      	sub	sp, #16
 8004c00:	af02      	add	r7, sp, #8
 8004c02:	603a      	str	r2, [r7, #0]
 8004c04:	461a      	mov	r2, r3
 8004c06:	4603      	mov	r3, r0
 8004c08:	71fb      	strb	r3, [r7, #7]
 8004c0a:	460b      	mov	r3, r1
 8004c0c:	71bb      	strb	r3, [r7, #6]
 8004c0e:	4613      	mov	r3, r2
 8004c10:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8004c12:	79bb      	ldrb	r3, [r7, #6]
 8004c14:	b29a      	uxth	r2, r3
 8004c16:	79f9      	ldrb	r1, [r7, #7]
 8004c18:	88bb      	ldrh	r3, [r7, #4]
 8004c1a:	9301      	str	r3, [sp, #4]
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	9300      	str	r3, [sp, #0]
 8004c20:	2301      	movs	r3, #1
 8004c22:	4804      	ldr	r0, [pc, #16]	@ (8004c34 <SENSOR_IO_ReadMultiple+0x38>)
 8004c24:	f7ff ff3e 	bl	8004aa4 <I2Cx_ReadMultiple>
 8004c28:	4603      	mov	r3, r0
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3708      	adds	r7, #8
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	200038ec 	.word	0x200038ec

08004c38 <BSP_SPI3_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI3_Init(void)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b082      	sub	sp, #8
 8004c3c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	607b      	str	r3, [r7, #4]

  hspi3.Instance  = SPI3;
 8004c42:	4b12      	ldr	r3, [pc, #72]	@ (8004c8c <BSP_SPI3_Init+0x54>)
 8004c44:	4a12      	ldr	r2, [pc, #72]	@ (8004c90 <BSP_SPI3_Init+0x58>)
 8004c46:	601a      	str	r2, [r3, #0]

  if(SPI3InitCounter++ == 0)
 8004c48:	4b12      	ldr	r3, [pc, #72]	@ (8004c94 <BSP_SPI3_Init+0x5c>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	1c5a      	adds	r2, r3, #1
 8004c4e:	4911      	ldr	r1, [pc, #68]	@ (8004c94 <BSP_SPI3_Init+0x5c>)
 8004c50:	600a      	str	r2, [r1, #0]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d114      	bne.n	8004c80 <BSP_SPI3_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi3) == HAL_SPI_STATE_RESET)
 8004c56:	480d      	ldr	r0, [pc, #52]	@ (8004c8c <BSP_SPI3_Init+0x54>)
 8004c58:	f003 fe7c 	bl	8008954 <HAL_SPI_GetState>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d10e      	bne.n	8004c80 <BSP_SPI3_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI3_MspInit(&hspi3);
 8004c62:	480a      	ldr	r0, [pc, #40]	@ (8004c8c <BSP_SPI3_Init+0x54>)
 8004c64:	f000 f882 	bl	8004d6c <SPI3_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d108      	bne.n	8004c80 <BSP_SPI3_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI3_Init(&hspi3) != HAL_OK)
 8004c6e:	4807      	ldr	r0, [pc, #28]	@ (8004c8c <BSP_SPI3_Init+0x54>)
 8004c70:	f000 f83a 	bl	8004ce8 <MX_SPI3_Init>
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d002      	beq.n	8004c80 <BSP_SPI3_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8004c7a:	f06f 0307 	mvn.w	r3, #7
 8004c7e:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 8004c80:	687b      	ldr	r3, [r7, #4]
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3708      	adds	r7, #8
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	20003940 	.word	0x20003940
 8004c90:	40003c00 	.word	0x40003c00
 8004c94:	200039a4 	.word	0x200039a4

08004c98 <BSP_SPI3_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI3_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b088      	sub	sp, #32
 8004c9c:	af02      	add	r7, sp, #8
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	60b9      	str	r1, [r7, #8]
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi3, pTxData, pRxData, Length, BUS_SPI3_POLL_TIMEOUT) != HAL_OK)
 8004caa:	88fb      	ldrh	r3, [r7, #6]
 8004cac:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004cb0:	9200      	str	r2, [sp, #0]
 8004cb2:	68ba      	ldr	r2, [r7, #8]
 8004cb4:	68f9      	ldr	r1, [r7, #12]
 8004cb6:	4807      	ldr	r0, [pc, #28]	@ (8004cd4 <BSP_SPI3_SendRecv+0x3c>)
 8004cb8:	f003 fc2d 	bl	8008516 <HAL_SPI_TransmitReceive>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d002      	beq.n	8004cc8 <BSP_SPI3_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8004cc2:	f06f 0305 	mvn.w	r3, #5
 8004cc6:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8004cc8:	697b      	ldr	r3, [r7, #20]
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3718      	adds	r7, #24
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	bf00      	nop
 8004cd4:	20003940 	.word	0x20003940

08004cd8 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004cdc:	f000 fa72 	bl	80051c4 <HAL_GetTick>
 8004ce0:	4603      	mov	r3, r0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	bd80      	pop	{r7, pc}
	...

08004ce8 <MX_SPI3_Init>:

/* SPI3 init function */

__weak HAL_StatusTypeDef MX_SPI3_Init(SPI_HandleTypeDef* hspi)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b084      	sub	sp, #16
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI3;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4a1c      	ldr	r2, [pc, #112]	@ (8004d68 <MX_SPI3_Init+0x80>)
 8004cf8:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004d00:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004d0e:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d22:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi->Init.CRCPolynomial = 7;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2207      	movs	r2, #7
 8004d40:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2208      	movs	r2, #8
 8004d4c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f003 fb34 	bl	80083bc <HAL_SPI_Init>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d001      	beq.n	8004d5e <MX_SPI3_Init+0x76>
  {
    ret = HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3710      	adds	r7, #16
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}
 8004d68:	40003c00 	.word	0x40003c00

08004d6c <SPI3_MspInit>:

static void SPI3_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b08a      	sub	sp, #40	@ 0x28
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004d74:	4b27      	ldr	r3, [pc, #156]	@ (8004e14 <SPI3_MspInit+0xa8>)
 8004d76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d78:	4a26      	ldr	r2, [pc, #152]	@ (8004e14 <SPI3_MspInit+0xa8>)
 8004d7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d80:	4b24      	ldr	r3, [pc, #144]	@ (8004e14 <SPI3_MspInit+0xa8>)
 8004d82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004d88:	613b      	str	r3, [r7, #16]
 8004d8a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d8c:	4b21      	ldr	r3, [pc, #132]	@ (8004e14 <SPI3_MspInit+0xa8>)
 8004d8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d90:	4a20      	ldr	r2, [pc, #128]	@ (8004e14 <SPI3_MspInit+0xa8>)
 8004d92:	f043 0304 	orr.w	r3, r3, #4
 8004d96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004d98:	4b1e      	ldr	r3, [pc, #120]	@ (8004e14 <SPI3_MspInit+0xa8>)
 8004d9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d9c:	f003 0304 	and.w	r3, r3, #4
 8004da0:	60fb      	str	r3, [r7, #12]
 8004da2:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = BUS_SPI3_SCK_GPIO_PIN;
 8004da4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004da8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004daa:	2302      	movs	r3, #2
 8004dac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dae:	2300      	movs	r3, #0
 8004db0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004db2:	2303      	movs	r3, #3
 8004db4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_SCK_GPIO_AF;
 8004db6:	2306      	movs	r3, #6
 8004db8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI3_SCK_GPIO_PORT, &GPIO_InitStruct);
 8004dba:	f107 0314 	add.w	r3, r7, #20
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	4815      	ldr	r0, [pc, #84]	@ (8004e18 <SPI3_MspInit+0xac>)
 8004dc2:	f000 fcab 	bl	800571c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI3_MISO_GPIO_PIN;
 8004dc6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004dca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dcc:	2302      	movs	r3, #2
 8004dce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_MISO_GPIO_AF;
 8004dd8:	2306      	movs	r3, #6
 8004dda:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI3_MISO_GPIO_PORT, &GPIO_InitStruct);
 8004ddc:	f107 0314 	add.w	r3, r7, #20
 8004de0:	4619      	mov	r1, r3
 8004de2:	480d      	ldr	r0, [pc, #52]	@ (8004e18 <SPI3_MspInit+0xac>)
 8004de4:	f000 fc9a 	bl	800571c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI3_MOSI_GPIO_PIN;
 8004de8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004dec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dee:	2302      	movs	r3, #2
 8004df0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004df2:	2300      	movs	r3, #0
 8004df4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004df6:	2303      	movs	r3, #3
 8004df8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_MOSI_GPIO_AF;
 8004dfa:	2306      	movs	r3, #6
 8004dfc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI3_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8004dfe:	f107 0314 	add.w	r3, r7, #20
 8004e02:	4619      	mov	r1, r3
 8004e04:	4804      	ldr	r0, [pc, #16]	@ (8004e18 <SPI3_MspInit+0xac>)
 8004e06:	f000 fc89 	bl	800571c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
}
 8004e0a:	bf00      	nop
 8004e0c:	3728      	adds	r7, #40	@ 0x28
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	bf00      	nop
 8004e14:	40021000 	.word	0x40021000
 8004e18:	48000800 	.word	0x48000800

08004e1c <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8004e22:	2300      	movs	r3, #0
 8004e24:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8004e26:	2300      	movs	r3, #0
 8004e28:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8004e2a:	4b19      	ldr	r3, [pc, #100]	@ (8004e90 <BSP_ACCELERO_Init+0x74>)
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	4798      	blx	r3
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b6a      	cmp	r3, #106	@ 0x6a
 8004e34:	d002      	beq.n	8004e3c <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	73fb      	strb	r3, [r7, #15]
 8004e3a:	e024      	b.n	8004e86 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8004e3c:	4b15      	ldr	r3, [pc, #84]	@ (8004e94 <BSP_ACCELERO_Init+0x78>)
 8004e3e:	4a14      	ldr	r2, [pc, #80]	@ (8004e90 <BSP_ACCELERO_Init+0x74>)
 8004e40:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8004e42:	2330      	movs	r3, #48	@ 0x30
 8004e44:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8004e46:	2300      	movs	r3, #0
 8004e48:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8004e4e:	2340      	movs	r3, #64	@ 0x40
 8004e50:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8004e52:	2300      	movs	r3, #0
 8004e54:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8004e56:	2300      	movs	r3, #0
 8004e58:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8004e5a:	797a      	ldrb	r2, [r7, #5]
 8004e5c:	7abb      	ldrb	r3, [r7, #10]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8004e64:	7a3b      	ldrb	r3, [r7, #8]
 8004e66:	f043 0304 	orr.w	r3, r3, #4
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	021b      	lsls	r3, r3, #8
 8004e6e:	b21a      	sxth	r2, r3
 8004e70:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004e74:	4313      	orrs	r3, r2
 8004e76:	b21b      	sxth	r3, r3
 8004e78:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8004e7a:	4b06      	ldr	r3, [pc, #24]	@ (8004e94 <BSP_ACCELERO_Init+0x78>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	89ba      	ldrh	r2, [r7, #12]
 8004e82:	4610      	mov	r0, r2
 8004e84:	4798      	blx	r3
  }  

  return ret;
 8004e86:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3710      	adds	r7, #16
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}
 8004e90:	20000528 	.word	0x20000528
 8004e94:	200039a8 	.word	0x200039a8

08004e98 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8004ea0:	4b08      	ldr	r3, [pc, #32]	@ (8004ec4 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d009      	beq.n	8004ebc <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8004ea8:	4b06      	ldr	r3, [pc, #24]	@ (8004ec4 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d004      	beq.n	8004ebc <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8004eb2:	4b04      	ldr	r3, [pc, #16]	@ (8004ec4 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	4798      	blx	r3
    }
  }
}
 8004ebc:	bf00      	nop
 8004ebe:	3708      	adds	r7, #8
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	200039a8 	.word	0x200039a8

08004ec8 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	4603      	mov	r3, r0
 8004ed0:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8004ed6:	2110      	movs	r1, #16
 8004ed8:	20d4      	movs	r0, #212	@ 0xd4
 8004eda:	f7ff fe71 	bl	8004bc0 <SENSOR_IO_Read>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8004ee2:	88fb      	ldrh	r3, [r7, #6]
 8004ee4:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8004ee6:	7bbb      	ldrb	r3, [r7, #14]
 8004ee8:	f003 0303 	and.w	r3, r3, #3
 8004eec:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8004eee:	7bba      	ldrb	r2, [r7, #14]
 8004ef0:	7bfb      	ldrb	r3, [r7, #15]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8004ef6:	7bbb      	ldrb	r3, [r7, #14]
 8004ef8:	461a      	mov	r2, r3
 8004efa:	2110      	movs	r1, #16
 8004efc:	20d4      	movs	r0, #212	@ 0xd4
 8004efe:	f7ff fe45 	bl	8004b8c <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8004f02:	2112      	movs	r1, #18
 8004f04:	20d4      	movs	r0, #212	@ 0xd4
 8004f06:	f7ff fe5b 	bl	8004bc0 <SENSOR_IO_Read>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8004f0e:	88fb      	ldrh	r3, [r7, #6]
 8004f10:	0a1b      	lsrs	r3, r3, #8
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8004f16:	7bbb      	ldrb	r3, [r7, #14]
 8004f18:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 8004f1c:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8004f1e:	7bba      	ldrb	r2, [r7, #14]
 8004f20:	7bfb      	ldrb	r3, [r7, #15]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8004f26:	7bbb      	ldrb	r3, [r7, #14]
 8004f28:	461a      	mov	r2, r3
 8004f2a:	2112      	movs	r1, #18
 8004f2c:	20d4      	movs	r0, #212	@ 0xd4
 8004f2e:	f7ff fe2d 	bl	8004b8c <SENSOR_IO_Write>
}
 8004f32:	bf00      	nop
 8004f34:	3710      	adds	r7, #16
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}

08004f3a <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8004f3a:	b580      	push	{r7, lr}
 8004f3c:	b082      	sub	sp, #8
 8004f3e:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8004f40:	2300      	movs	r3, #0
 8004f42:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8004f44:	2110      	movs	r1, #16
 8004f46:	20d4      	movs	r0, #212	@ 0xd4
 8004f48:	f7ff fe3a 	bl	8004bc0 <SENSOR_IO_Read>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8004f50:	79fb      	ldrb	r3, [r7, #7]
 8004f52:	f003 030f 	and.w	r3, r3, #15
 8004f56:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8004f58:	79fb      	ldrb	r3, [r7, #7]
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	2110      	movs	r1, #16
 8004f5e:	20d4      	movs	r0, #212	@ 0xd4
 8004f60:	f7ff fe14 	bl	8004b8c <SENSOR_IO_Write>
}
 8004f64:	bf00      	nop
 8004f66:	3708      	adds	r7, #8
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8004f70:	f7ff fe02 	bl	8004b78 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8004f74:	210f      	movs	r1, #15
 8004f76:	20d4      	movs	r0, #212	@ 0xd4
 8004f78:	f7ff fe22 	bl	8004bc0 <SENSOR_IO_Read>
 8004f7c:	4603      	mov	r3, r0
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	bd80      	pop	{r7, pc}

08004f82 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8004f82:	b580      	push	{r7, lr}
 8004f84:	b084      	sub	sp, #16
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	4603      	mov	r3, r0
 8004f8a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8004f90:	2115      	movs	r1, #21
 8004f92:	20d4      	movs	r0, #212	@ 0xd4
 8004f94:	f7ff fe14 	bl	8004bc0 <SENSOR_IO_Read>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8004f9c:	7bfb      	ldrb	r3, [r7, #15]
 8004f9e:	f023 0310 	bic.w	r3, r3, #16
 8004fa2:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8004fa4:	88fb      	ldrh	r3, [r7, #6]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d003      	beq.n	8004fb2 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8004faa:	7bfb      	ldrb	r3, [r7, #15]
 8004fac:	f043 0310 	orr.w	r3, r3, #16
 8004fb0:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8004fb2:	7bfb      	ldrb	r3, [r7, #15]
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	2115      	movs	r1, #21
 8004fb8:	20d4      	movs	r0, #212	@ 0xd4
 8004fba:	f7ff fde7 	bl	8004b8c <SENSOR_IO_Write>
}
 8004fbe:	bf00      	nop
 8004fc0:	3710      	adds	r7, #16
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
	...

08004fc8 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b088      	sub	sp, #32
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8004fd8:	f04f 0300 	mov.w	r3, #0
 8004fdc:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8004fde:	2110      	movs	r1, #16
 8004fe0:	20d4      	movs	r0, #212	@ 0xd4
 8004fe2:	f7ff fded 	bl	8004bc0 <SENSOR_IO_Read>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8004fea:	f107 0208 	add.w	r2, r7, #8
 8004fee:	2306      	movs	r3, #6
 8004ff0:	2128      	movs	r1, #40	@ 0x28
 8004ff2:	20d4      	movs	r0, #212	@ 0xd4
 8004ff4:	f7ff fe02 	bl	8004bfc <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	77fb      	strb	r3, [r7, #31]
 8004ffc:	e01a      	b.n	8005034 <LSM6DSL_AccReadXYZ+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8004ffe:	7ffb      	ldrb	r3, [r7, #31]
 8005000:	005b      	lsls	r3, r3, #1
 8005002:	3301      	adds	r3, #1
 8005004:	3320      	adds	r3, #32
 8005006:	443b      	add	r3, r7
 8005008:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800500c:	021b      	lsls	r3, r3, #8
 800500e:	b29b      	uxth	r3, r3
 8005010:	7ffa      	ldrb	r2, [r7, #31]
 8005012:	0052      	lsls	r2, r2, #1
 8005014:	3220      	adds	r2, #32
 8005016:	443a      	add	r2, r7
 8005018:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 800501c:	4413      	add	r3, r2
 800501e:	b29a      	uxth	r2, r3
 8005020:	7ffb      	ldrb	r3, [r7, #31]
 8005022:	b212      	sxth	r2, r2
 8005024:	005b      	lsls	r3, r3, #1
 8005026:	3320      	adds	r3, #32
 8005028:	443b      	add	r3, r7
 800502a:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800502e:	7ffb      	ldrb	r3, [r7, #31]
 8005030:	3301      	adds	r3, #1
 8005032:	77fb      	strb	r3, [r7, #31]
 8005034:	7ffb      	ldrb	r3, [r7, #31]
 8005036:	2b02      	cmp	r3, #2
 8005038:	d9e1      	bls.n	8004ffe <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 800503a:	7dfb      	ldrb	r3, [r7, #23]
 800503c:	f003 030c 	and.w	r3, r3, #12
 8005040:	2b0c      	cmp	r3, #12
 8005042:	d829      	bhi.n	8005098 <LSM6DSL_AccReadXYZ+0xd0>
 8005044:	a201      	add	r2, pc, #4	@ (adr r2, 800504c <LSM6DSL_AccReadXYZ+0x84>)
 8005046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800504a:	bf00      	nop
 800504c:	08005081 	.word	0x08005081
 8005050:	08005099 	.word	0x08005099
 8005054:	08005099 	.word	0x08005099
 8005058:	08005099 	.word	0x08005099
 800505c:	08005093 	.word	0x08005093
 8005060:	08005099 	.word	0x08005099
 8005064:	08005099 	.word	0x08005099
 8005068:	08005099 	.word	0x08005099
 800506c:	08005087 	.word	0x08005087
 8005070:	08005099 	.word	0x08005099
 8005074:	08005099 	.word	0x08005099
 8005078:	08005099 	.word	0x08005099
 800507c:	0800508d 	.word	0x0800508d
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8005080:	4b18      	ldr	r3, [pc, #96]	@ (80050e4 <LSM6DSL_AccReadXYZ+0x11c>)
 8005082:	61bb      	str	r3, [r7, #24]
    break;
 8005084:	e008      	b.n	8005098 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8005086:	4b18      	ldr	r3, [pc, #96]	@ (80050e8 <LSM6DSL_AccReadXYZ+0x120>)
 8005088:	61bb      	str	r3, [r7, #24]
    break;
 800508a:	e005      	b.n	8005098 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 800508c:	4b17      	ldr	r3, [pc, #92]	@ (80050ec <LSM6DSL_AccReadXYZ+0x124>)
 800508e:	61bb      	str	r3, [r7, #24]
    break;
 8005090:	e002      	b.n	8005098 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8005092:	4b17      	ldr	r3, [pc, #92]	@ (80050f0 <LSM6DSL_AccReadXYZ+0x128>)
 8005094:	61bb      	str	r3, [r7, #24]
    break;    
 8005096:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8005098:	2300      	movs	r3, #0
 800509a:	77fb      	strb	r3, [r7, #31]
 800509c:	e01a      	b.n	80050d4 <LSM6DSL_AccReadXYZ+0x10c>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 800509e:	7ffb      	ldrb	r3, [r7, #31]
 80050a0:	005b      	lsls	r3, r3, #1
 80050a2:	3320      	adds	r3, #32
 80050a4:	443b      	add	r3, r7
 80050a6:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80050aa:	ee07 3a90 	vmov	s15, r3
 80050ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80050b2:	edd7 7a06 	vldr	s15, [r7, #24]
 80050b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050ba:	7ffb      	ldrb	r3, [r7, #31]
 80050bc:	005b      	lsls	r3, r3, #1
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	4413      	add	r3, r2
 80050c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80050c6:	ee17 2a90 	vmov	r2, s15
 80050ca:	b212      	sxth	r2, r2
 80050cc:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80050ce:	7ffb      	ldrb	r3, [r7, #31]
 80050d0:	3301      	adds	r3, #1
 80050d2:	77fb      	strb	r3, [r7, #31]
 80050d4:	7ffb      	ldrb	r3, [r7, #31]
 80050d6:	2b02      	cmp	r3, #2
 80050d8:	d9e1      	bls.n	800509e <LSM6DSL_AccReadXYZ+0xd6>
  }
}
 80050da:	bf00      	nop
 80050dc:	bf00      	nop
 80050de:	3720      	adds	r7, #32
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	3d79db23 	.word	0x3d79db23
 80050e8:	3df9db23 	.word	0x3df9db23
 80050ec:	3e79db23 	.word	0x3e79db23
 80050f0:	3ef9db23 	.word	0x3ef9db23

080050f4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b082      	sub	sp, #8
 80050f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80050fa:	2300      	movs	r3, #0
 80050fc:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80050fe:	2003      	movs	r0, #3
 8005100:	f000 f960 	bl	80053c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005104:	200f      	movs	r0, #15
 8005106:	f000 f80d 	bl	8005124 <HAL_InitTick>
 800510a:	4603      	mov	r3, r0
 800510c:	2b00      	cmp	r3, #0
 800510e:	d002      	beq.n	8005116 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	71fb      	strb	r3, [r7, #7]
 8005114:	e001      	b.n	800511a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005116:	f7fe fe87 	bl	8003e28 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800511a:	79fb      	ldrb	r3, [r7, #7]
}
 800511c:	4618      	mov	r0, r3
 800511e:	3708      	adds	r7, #8
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}

08005124 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b084      	sub	sp, #16
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800512c:	2300      	movs	r3, #0
 800512e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8005130:	4b17      	ldr	r3, [pc, #92]	@ (8005190 <HAL_InitTick+0x6c>)
 8005132:	781b      	ldrb	r3, [r3, #0]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d023      	beq.n	8005180 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8005138:	4b16      	ldr	r3, [pc, #88]	@ (8005194 <HAL_InitTick+0x70>)
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	4b14      	ldr	r3, [pc, #80]	@ (8005190 <HAL_InitTick+0x6c>)
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	4619      	mov	r1, r3
 8005142:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005146:	fbb3 f3f1 	udiv	r3, r3, r1
 800514a:	fbb2 f3f3 	udiv	r3, r2, r3
 800514e:	4618      	mov	r0, r3
 8005150:	f000 f96d 	bl	800542e <HAL_SYSTICK_Config>
 8005154:	4603      	mov	r3, r0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d10f      	bne.n	800517a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2b0f      	cmp	r3, #15
 800515e:	d809      	bhi.n	8005174 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005160:	2200      	movs	r2, #0
 8005162:	6879      	ldr	r1, [r7, #4]
 8005164:	f04f 30ff 	mov.w	r0, #4294967295
 8005168:	f000 f937 	bl	80053da <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800516c:	4a0a      	ldr	r2, [pc, #40]	@ (8005198 <HAL_InitTick+0x74>)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6013      	str	r3, [r2, #0]
 8005172:	e007      	b.n	8005184 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	73fb      	strb	r3, [r7, #15]
 8005178:	e004      	b.n	8005184 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	73fb      	strb	r3, [r7, #15]
 800517e:	e001      	b.n	8005184 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005184:	7bfb      	ldrb	r3, [r7, #15]
}
 8005186:	4618      	mov	r0, r3
 8005188:	3710      	adds	r7, #16
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	20000560 	.word	0x20000560
 8005194:	20000510 	.word	0x20000510
 8005198:	2000055c 	.word	0x2000055c

0800519c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800519c:	b480      	push	{r7}
 800519e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80051a0:	4b06      	ldr	r3, [pc, #24]	@ (80051bc <HAL_IncTick+0x20>)
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	461a      	mov	r2, r3
 80051a6:	4b06      	ldr	r3, [pc, #24]	@ (80051c0 <HAL_IncTick+0x24>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4413      	add	r3, r2
 80051ac:	4a04      	ldr	r2, [pc, #16]	@ (80051c0 <HAL_IncTick+0x24>)
 80051ae:	6013      	str	r3, [r2, #0]
}
 80051b0:	bf00      	nop
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr
 80051ba:	bf00      	nop
 80051bc:	20000560 	.word	0x20000560
 80051c0:	200039ac 	.word	0x200039ac

080051c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80051c4:	b480      	push	{r7}
 80051c6:	af00      	add	r7, sp, #0
  return uwTick;
 80051c8:	4b03      	ldr	r3, [pc, #12]	@ (80051d8 <HAL_GetTick+0x14>)
 80051ca:	681b      	ldr	r3, [r3, #0]
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr
 80051d6:	bf00      	nop
 80051d8:	200039ac 	.word	0x200039ac

080051dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b084      	sub	sp, #16
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80051e4:	f7ff ffee 	bl	80051c4 <HAL_GetTick>
 80051e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051f4:	d005      	beq.n	8005202 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80051f6:	4b0a      	ldr	r3, [pc, #40]	@ (8005220 <HAL_Delay+0x44>)
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	461a      	mov	r2, r3
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	4413      	add	r3, r2
 8005200:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005202:	bf00      	nop
 8005204:	f7ff ffde 	bl	80051c4 <HAL_GetTick>
 8005208:	4602      	mov	r2, r0
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	1ad3      	subs	r3, r2, r3
 800520e:	68fa      	ldr	r2, [r7, #12]
 8005210:	429a      	cmp	r2, r3
 8005212:	d8f7      	bhi.n	8005204 <HAL_Delay+0x28>
  {
  }
}
 8005214:	bf00      	nop
 8005216:	bf00      	nop
 8005218:	3710      	adds	r7, #16
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop
 8005220:	20000560 	.word	0x20000560

08005224 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005224:	b480      	push	{r7}
 8005226:	b085      	sub	sp, #20
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f003 0307 	and.w	r3, r3, #7
 8005232:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005234:	4b0c      	ldr	r3, [pc, #48]	@ (8005268 <__NVIC_SetPriorityGrouping+0x44>)
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800523a:	68ba      	ldr	r2, [r7, #8]
 800523c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005240:	4013      	ands	r3, r2
 8005242:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800524c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005250:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005254:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005256:	4a04      	ldr	r2, [pc, #16]	@ (8005268 <__NVIC_SetPriorityGrouping+0x44>)
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	60d3      	str	r3, [r2, #12]
}
 800525c:	bf00      	nop
 800525e:	3714      	adds	r7, #20
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr
 8005268:	e000ed00 	.word	0xe000ed00

0800526c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800526c:	b480      	push	{r7}
 800526e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005270:	4b04      	ldr	r3, [pc, #16]	@ (8005284 <__NVIC_GetPriorityGrouping+0x18>)
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	0a1b      	lsrs	r3, r3, #8
 8005276:	f003 0307 	and.w	r3, r3, #7
}
 800527a:	4618      	mov	r0, r3
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr
 8005284:	e000ed00 	.word	0xe000ed00

08005288 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005288:	b480      	push	{r7}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
 800528e:	4603      	mov	r3, r0
 8005290:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005296:	2b00      	cmp	r3, #0
 8005298:	db0b      	blt.n	80052b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800529a:	79fb      	ldrb	r3, [r7, #7]
 800529c:	f003 021f 	and.w	r2, r3, #31
 80052a0:	4907      	ldr	r1, [pc, #28]	@ (80052c0 <__NVIC_EnableIRQ+0x38>)
 80052a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052a6:	095b      	lsrs	r3, r3, #5
 80052a8:	2001      	movs	r0, #1
 80052aa:	fa00 f202 	lsl.w	r2, r0, r2
 80052ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80052b2:	bf00      	nop
 80052b4:	370c      	adds	r7, #12
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop
 80052c0:	e000e100 	.word	0xe000e100

080052c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b083      	sub	sp, #12
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	4603      	mov	r3, r0
 80052cc:	6039      	str	r1, [r7, #0]
 80052ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	db0a      	blt.n	80052ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	b2da      	uxtb	r2, r3
 80052dc:	490c      	ldr	r1, [pc, #48]	@ (8005310 <__NVIC_SetPriority+0x4c>)
 80052de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052e2:	0112      	lsls	r2, r2, #4
 80052e4:	b2d2      	uxtb	r2, r2
 80052e6:	440b      	add	r3, r1
 80052e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80052ec:	e00a      	b.n	8005304 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	b2da      	uxtb	r2, r3
 80052f2:	4908      	ldr	r1, [pc, #32]	@ (8005314 <__NVIC_SetPriority+0x50>)
 80052f4:	79fb      	ldrb	r3, [r7, #7]
 80052f6:	f003 030f 	and.w	r3, r3, #15
 80052fa:	3b04      	subs	r3, #4
 80052fc:	0112      	lsls	r2, r2, #4
 80052fe:	b2d2      	uxtb	r2, r2
 8005300:	440b      	add	r3, r1
 8005302:	761a      	strb	r2, [r3, #24]
}
 8005304:	bf00      	nop
 8005306:	370c      	adds	r7, #12
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr
 8005310:	e000e100 	.word	0xe000e100
 8005314:	e000ed00 	.word	0xe000ed00

08005318 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005318:	b480      	push	{r7}
 800531a:	b089      	sub	sp, #36	@ 0x24
 800531c:	af00      	add	r7, sp, #0
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	60b9      	str	r1, [r7, #8]
 8005322:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f003 0307 	and.w	r3, r3, #7
 800532a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800532c:	69fb      	ldr	r3, [r7, #28]
 800532e:	f1c3 0307 	rsb	r3, r3, #7
 8005332:	2b04      	cmp	r3, #4
 8005334:	bf28      	it	cs
 8005336:	2304      	movcs	r3, #4
 8005338:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800533a:	69fb      	ldr	r3, [r7, #28]
 800533c:	3304      	adds	r3, #4
 800533e:	2b06      	cmp	r3, #6
 8005340:	d902      	bls.n	8005348 <NVIC_EncodePriority+0x30>
 8005342:	69fb      	ldr	r3, [r7, #28]
 8005344:	3b03      	subs	r3, #3
 8005346:	e000      	b.n	800534a <NVIC_EncodePriority+0x32>
 8005348:	2300      	movs	r3, #0
 800534a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800534c:	f04f 32ff 	mov.w	r2, #4294967295
 8005350:	69bb      	ldr	r3, [r7, #24]
 8005352:	fa02 f303 	lsl.w	r3, r2, r3
 8005356:	43da      	mvns	r2, r3
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	401a      	ands	r2, r3
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005360:	f04f 31ff 	mov.w	r1, #4294967295
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	fa01 f303 	lsl.w	r3, r1, r3
 800536a:	43d9      	mvns	r1, r3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005370:	4313      	orrs	r3, r2
         );
}
 8005372:	4618      	mov	r0, r3
 8005374:	3724      	adds	r7, #36	@ 0x24
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr
	...

08005380 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b082      	sub	sp, #8
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	3b01      	subs	r3, #1
 800538c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005390:	d301      	bcc.n	8005396 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005392:	2301      	movs	r3, #1
 8005394:	e00f      	b.n	80053b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005396:	4a0a      	ldr	r2, [pc, #40]	@ (80053c0 <SysTick_Config+0x40>)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	3b01      	subs	r3, #1
 800539c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800539e:	210f      	movs	r1, #15
 80053a0:	f04f 30ff 	mov.w	r0, #4294967295
 80053a4:	f7ff ff8e 	bl	80052c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80053a8:	4b05      	ldr	r3, [pc, #20]	@ (80053c0 <SysTick_Config+0x40>)
 80053aa:	2200      	movs	r2, #0
 80053ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80053ae:	4b04      	ldr	r3, [pc, #16]	@ (80053c0 <SysTick_Config+0x40>)
 80053b0:	2207      	movs	r2, #7
 80053b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80053b4:	2300      	movs	r3, #0
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3708      	adds	r7, #8
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
 80053be:	bf00      	nop
 80053c0:	e000e010 	.word	0xe000e010

080053c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b082      	sub	sp, #8
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f7ff ff29 	bl	8005224 <__NVIC_SetPriorityGrouping>
}
 80053d2:	bf00      	nop
 80053d4:	3708      	adds	r7, #8
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}

080053da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80053da:	b580      	push	{r7, lr}
 80053dc:	b086      	sub	sp, #24
 80053de:	af00      	add	r7, sp, #0
 80053e0:	4603      	mov	r3, r0
 80053e2:	60b9      	str	r1, [r7, #8]
 80053e4:	607a      	str	r2, [r7, #4]
 80053e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80053e8:	2300      	movs	r3, #0
 80053ea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80053ec:	f7ff ff3e 	bl	800526c <__NVIC_GetPriorityGrouping>
 80053f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	68b9      	ldr	r1, [r7, #8]
 80053f6:	6978      	ldr	r0, [r7, #20]
 80053f8:	f7ff ff8e 	bl	8005318 <NVIC_EncodePriority>
 80053fc:	4602      	mov	r2, r0
 80053fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005402:	4611      	mov	r1, r2
 8005404:	4618      	mov	r0, r3
 8005406:	f7ff ff5d 	bl	80052c4 <__NVIC_SetPriority>
}
 800540a:	bf00      	nop
 800540c:	3718      	adds	r7, #24
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}

08005412 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005412:	b580      	push	{r7, lr}
 8005414:	b082      	sub	sp, #8
 8005416:	af00      	add	r7, sp, #0
 8005418:	4603      	mov	r3, r0
 800541a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800541c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005420:	4618      	mov	r0, r3
 8005422:	f7ff ff31 	bl	8005288 <__NVIC_EnableIRQ>
}
 8005426:	bf00      	nop
 8005428:	3708      	adds	r7, #8
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}

0800542e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800542e:	b580      	push	{r7, lr}
 8005430:	b082      	sub	sp, #8
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f7ff ffa2 	bl	8005380 <SysTick_Config>
 800543c:	4603      	mov	r3, r0
}
 800543e:	4618      	mov	r0, r3
 8005440:	3708      	adds	r7, #8
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
	...

08005448 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b082      	sub	sp, #8
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d101      	bne.n	800545a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e0ac      	b.n	80055b4 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4618      	mov	r0, r3
 8005460:	f000 f8b2 	bl	80055c8 <DFSDM_GetChannelFromInstance>
 8005464:	4603      	mov	r3, r0
 8005466:	4a55      	ldr	r2, [pc, #340]	@ (80055bc <HAL_DFSDM_ChannelInit+0x174>)
 8005468:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d001      	beq.n	8005474 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	e09f      	b.n	80055b4 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f7fe fcff 	bl	8003e78 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800547a:	4b51      	ldr	r3, [pc, #324]	@ (80055c0 <HAL_DFSDM_ChannelInit+0x178>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	3301      	adds	r3, #1
 8005480:	4a4f      	ldr	r2, [pc, #316]	@ (80055c0 <HAL_DFSDM_ChannelInit+0x178>)
 8005482:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8005484:	4b4e      	ldr	r3, [pc, #312]	@ (80055c0 <HAL_DFSDM_ChannelInit+0x178>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2b01      	cmp	r3, #1
 800548a:	d125      	bne.n	80054d8 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800548c:	4b4d      	ldr	r3, [pc, #308]	@ (80055c4 <HAL_DFSDM_ChannelInit+0x17c>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a4c      	ldr	r2, [pc, #304]	@ (80055c4 <HAL_DFSDM_ChannelInit+0x17c>)
 8005492:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005496:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8005498:	4b4a      	ldr	r3, [pc, #296]	@ (80055c4 <HAL_DFSDM_ChannelInit+0x17c>)
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	4948      	ldr	r1, [pc, #288]	@ (80055c4 <HAL_DFSDM_ChannelInit+0x17c>)
 80054a2:	4313      	orrs	r3, r2
 80054a4:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80054a6:	4b47      	ldr	r3, [pc, #284]	@ (80055c4 <HAL_DFSDM_ChannelInit+0x17c>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a46      	ldr	r2, [pc, #280]	@ (80055c4 <HAL_DFSDM_ChannelInit+0x17c>)
 80054ac:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 80054b0:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	791b      	ldrb	r3, [r3, #4]
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d108      	bne.n	80054cc <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80054ba:	4b42      	ldr	r3, [pc, #264]	@ (80055c4 <HAL_DFSDM_ChannelInit+0x17c>)
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	3b01      	subs	r3, #1
 80054c4:	041b      	lsls	r3, r3, #16
 80054c6:	493f      	ldr	r1, [pc, #252]	@ (80055c4 <HAL_DFSDM_ChannelInit+0x17c>)
 80054c8:	4313      	orrs	r3, r2
 80054ca:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80054cc:	4b3d      	ldr	r3, [pc, #244]	@ (80055c4 <HAL_DFSDM_ChannelInit+0x17c>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a3c      	ldr	r2, [pc, #240]	@ (80055c4 <HAL_DFSDM_ChannelInit+0x17c>)
 80054d2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80054d6:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 80054e6:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	6819      	ldr	r1, [r3, #0]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80054f6:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80054fc:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	430a      	orrs	r2, r1
 8005504:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f022 020f 	bic.w	r2, r2, #15
 8005514:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	6819      	ldr	r1, [r3, #0]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8005524:	431a      	orrs	r2, r3
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	430a      	orrs	r2, r1
 800552c:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	689a      	ldr	r2, [r3, #8]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 800553c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	6899      	ldr	r1, [r3, #8]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800554c:	3b01      	subs	r3, #1
 800554e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8005550:	431a      	orrs	r2, r3
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	430a      	orrs	r2, r1
 8005558:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	685a      	ldr	r2, [r3, #4]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f002 0207 	and.w	r2, r2, #7
 8005568:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	6859      	ldr	r1, [r3, #4]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005574:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800557a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800557c:	431a      	orrs	r2, r3
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	430a      	orrs	r2, r1
 8005584:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005594:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2201      	movs	r2, #1
 800559a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4618      	mov	r0, r3
 80055a4:	f000 f810 	bl	80055c8 <DFSDM_GetChannelFromInstance>
 80055a8:	4602      	mov	r2, r0
 80055aa:	4904      	ldr	r1, [pc, #16]	@ (80055bc <HAL_DFSDM_ChannelInit+0x174>)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80055b2:	2300      	movs	r3, #0
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3708      	adds	r7, #8
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}
 80055bc:	200039b4 	.word	0x200039b4
 80055c0:	200039b0 	.word	0x200039b0
 80055c4:	40016000 	.word	0x40016000

080055c8 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b085      	sub	sp, #20
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	4a1c      	ldr	r2, [pc, #112]	@ (8005644 <DFSDM_GetChannelFromInstance+0x7c>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d102      	bne.n	80055de <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80055d8:	2300      	movs	r3, #0
 80055da:	60fb      	str	r3, [r7, #12]
 80055dc:	e02b      	b.n	8005636 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a19      	ldr	r2, [pc, #100]	@ (8005648 <DFSDM_GetChannelFromInstance+0x80>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d102      	bne.n	80055ec <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80055e6:	2301      	movs	r3, #1
 80055e8:	60fb      	str	r3, [r7, #12]
 80055ea:	e024      	b.n	8005636 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4a17      	ldr	r2, [pc, #92]	@ (800564c <DFSDM_GetChannelFromInstance+0x84>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d102      	bne.n	80055fa <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80055f4:	2302      	movs	r3, #2
 80055f6:	60fb      	str	r3, [r7, #12]
 80055f8:	e01d      	b.n	8005636 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	4a14      	ldr	r2, [pc, #80]	@ (8005650 <DFSDM_GetChannelFromInstance+0x88>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d102      	bne.n	8005608 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8005602:	2304      	movs	r3, #4
 8005604:	60fb      	str	r3, [r7, #12]
 8005606:	e016      	b.n	8005636 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	4a12      	ldr	r2, [pc, #72]	@ (8005654 <DFSDM_GetChannelFromInstance+0x8c>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d102      	bne.n	8005616 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8005610:	2305      	movs	r3, #5
 8005612:	60fb      	str	r3, [r7, #12]
 8005614:	e00f      	b.n	8005636 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a0f      	ldr	r2, [pc, #60]	@ (8005658 <DFSDM_GetChannelFromInstance+0x90>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d102      	bne.n	8005624 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800561e:	2306      	movs	r3, #6
 8005620:	60fb      	str	r3, [r7, #12]
 8005622:	e008      	b.n	8005636 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4a0d      	ldr	r2, [pc, #52]	@ (800565c <DFSDM_GetChannelFromInstance+0x94>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d102      	bne.n	8005632 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 800562c:	2307      	movs	r3, #7
 800562e:	60fb      	str	r3, [r7, #12]
 8005630:	e001      	b.n	8005636 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8005632:	2303      	movs	r3, #3
 8005634:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8005636:	68fb      	ldr	r3, [r7, #12]
}
 8005638:	4618      	mov	r0, r3
 800563a:	3714      	adds	r7, #20
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr
 8005644:	40016000 	.word	0x40016000
 8005648:	40016020 	.word	0x40016020
 800564c:	40016040 	.word	0x40016040
 8005650:	40016080 	.word	0x40016080
 8005654:	400160a0 	.word	0x400160a0
 8005658:	400160c0 	.word	0x400160c0
 800565c:	400160e0 	.word	0x400160e0

08005660 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8005660:	b480      	push	{r7}
 8005662:	b087      	sub	sp, #28
 8005664:	af00      	add	r7, sp, #0
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	460b      	mov	r3, r1
 800566a:	607a      	str	r2, [r7, #4]
 800566c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800566e:	2300      	movs	r3, #0
 8005670:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8005672:	7afb      	ldrb	r3, [r7, #11]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d103      	bne.n	8005680 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	605a      	str	r2, [r3, #4]
      break;
 800567e:	e002      	b.n	8005686 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	75fb      	strb	r3, [r7, #23]
      break;
 8005684:	bf00      	nop
  }

  return status;
 8005686:	7dfb      	ldrb	r3, [r7, #23]
}
 8005688:	4618      	mov	r0, r3
 800568a:	371c      	adds	r7, #28
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr

08005694 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8005694:	b480      	push	{r7}
 8005696:	b083      	sub	sp, #12
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d101      	bne.n	80056a8 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	e003      	b.n	80056b0 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	683a      	ldr	r2, [r7, #0]
 80056ac:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80056ae:	2300      	movs	r3, #0
  }
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	370c      	adds	r7, #12
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr

080056bc <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b086      	sub	sp, #24
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	0c1b      	lsrs	r3, r3, #16
 80056ca:	f003 0301 	and.w	r3, r3, #1
 80056ce:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 031f 	and.w	r3, r3, #31
 80056d8:	2201      	movs	r2, #1
 80056da:	fa02 f303 	lsl.w	r3, r2, r3
 80056de:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	015a      	lsls	r2, r3, #5
 80056e4:	4b0c      	ldr	r3, [pc, #48]	@ (8005718 <HAL_EXTI_IRQHandler+0x5c>)
 80056e6:	4413      	add	r3, r2
 80056e8:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	693a      	ldr	r2, [r7, #16]
 80056f0:	4013      	ands	r3, r2
 80056f2:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d009      	beq.n	800570e <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	693a      	ldr	r2, [r7, #16]
 80056fe:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d002      	beq.n	800570e <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	4798      	blx	r3
    }
  }
}
 800570e:	bf00      	nop
 8005710:	3718      	adds	r7, #24
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
 8005716:	bf00      	nop
 8005718:	40010414 	.word	0x40010414

0800571c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800571c:	b480      	push	{r7}
 800571e:	b087      	sub	sp, #28
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005726:	2300      	movs	r3, #0
 8005728:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800572a:	e17f      	b.n	8005a2c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	2101      	movs	r1, #1
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	fa01 f303 	lsl.w	r3, r1, r3
 8005738:	4013      	ands	r3, r2
 800573a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2b00      	cmp	r3, #0
 8005740:	f000 8171 	beq.w	8005a26 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	f003 0303 	and.w	r3, r3, #3
 800574c:	2b01      	cmp	r3, #1
 800574e:	d005      	beq.n	800575c <HAL_GPIO_Init+0x40>
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	f003 0303 	and.w	r3, r3, #3
 8005758:	2b02      	cmp	r3, #2
 800575a:	d130      	bne.n	80057be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	005b      	lsls	r3, r3, #1
 8005766:	2203      	movs	r2, #3
 8005768:	fa02 f303 	lsl.w	r3, r2, r3
 800576c:	43db      	mvns	r3, r3
 800576e:	693a      	ldr	r2, [r7, #16]
 8005770:	4013      	ands	r3, r2
 8005772:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	68da      	ldr	r2, [r3, #12]
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	005b      	lsls	r3, r3, #1
 800577c:	fa02 f303 	lsl.w	r3, r2, r3
 8005780:	693a      	ldr	r2, [r7, #16]
 8005782:	4313      	orrs	r3, r2
 8005784:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	693a      	ldr	r2, [r7, #16]
 800578a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005792:	2201      	movs	r2, #1
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	fa02 f303 	lsl.w	r3, r2, r3
 800579a:	43db      	mvns	r3, r3
 800579c:	693a      	ldr	r2, [r7, #16]
 800579e:	4013      	ands	r3, r2
 80057a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	091b      	lsrs	r3, r3, #4
 80057a8:	f003 0201 	and.w	r2, r3, #1
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	fa02 f303 	lsl.w	r3, r2, r3
 80057b2:	693a      	ldr	r2, [r7, #16]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	693a      	ldr	r2, [r7, #16]
 80057bc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	f003 0303 	and.w	r3, r3, #3
 80057c6:	2b03      	cmp	r3, #3
 80057c8:	d118      	bne.n	80057fc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80057d0:	2201      	movs	r2, #1
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	fa02 f303 	lsl.w	r3, r2, r3
 80057d8:	43db      	mvns	r3, r3
 80057da:	693a      	ldr	r2, [r7, #16]
 80057dc:	4013      	ands	r3, r2
 80057de:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	08db      	lsrs	r3, r3, #3
 80057e6:	f003 0201 	and.w	r2, r3, #1
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	fa02 f303 	lsl.w	r3, r2, r3
 80057f0:	693a      	ldr	r2, [r7, #16]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	693a      	ldr	r2, [r7, #16]
 80057fa:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	f003 0303 	and.w	r3, r3, #3
 8005804:	2b03      	cmp	r3, #3
 8005806:	d017      	beq.n	8005838 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	68db      	ldr	r3, [r3, #12]
 800580c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	005b      	lsls	r3, r3, #1
 8005812:	2203      	movs	r2, #3
 8005814:	fa02 f303 	lsl.w	r3, r2, r3
 8005818:	43db      	mvns	r3, r3
 800581a:	693a      	ldr	r2, [r7, #16]
 800581c:	4013      	ands	r3, r2
 800581e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	689a      	ldr	r2, [r3, #8]
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	005b      	lsls	r3, r3, #1
 8005828:	fa02 f303 	lsl.w	r3, r2, r3
 800582c:	693a      	ldr	r2, [r7, #16]
 800582e:	4313      	orrs	r3, r2
 8005830:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	693a      	ldr	r2, [r7, #16]
 8005836:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	f003 0303 	and.w	r3, r3, #3
 8005840:	2b02      	cmp	r3, #2
 8005842:	d123      	bne.n	800588c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	08da      	lsrs	r2, r3, #3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	3208      	adds	r2, #8
 800584c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005850:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	f003 0307 	and.w	r3, r3, #7
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	220f      	movs	r2, #15
 800585c:	fa02 f303 	lsl.w	r3, r2, r3
 8005860:	43db      	mvns	r3, r3
 8005862:	693a      	ldr	r2, [r7, #16]
 8005864:	4013      	ands	r3, r2
 8005866:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	691a      	ldr	r2, [r3, #16]
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	f003 0307 	and.w	r3, r3, #7
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	fa02 f303 	lsl.w	r3, r2, r3
 8005878:	693a      	ldr	r2, [r7, #16]
 800587a:	4313      	orrs	r3, r2
 800587c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	08da      	lsrs	r2, r3, #3
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	3208      	adds	r2, #8
 8005886:	6939      	ldr	r1, [r7, #16]
 8005888:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	005b      	lsls	r3, r3, #1
 8005896:	2203      	movs	r2, #3
 8005898:	fa02 f303 	lsl.w	r3, r2, r3
 800589c:	43db      	mvns	r3, r3
 800589e:	693a      	ldr	r2, [r7, #16]
 80058a0:	4013      	ands	r3, r2
 80058a2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	f003 0203 	and.w	r2, r3, #3
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	005b      	lsls	r3, r3, #1
 80058b0:	fa02 f303 	lsl.w	r3, r2, r3
 80058b4:	693a      	ldr	r2, [r7, #16]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	693a      	ldr	r2, [r7, #16]
 80058be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	f000 80ac 	beq.w	8005a26 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058ce:	4b5f      	ldr	r3, [pc, #380]	@ (8005a4c <HAL_GPIO_Init+0x330>)
 80058d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058d2:	4a5e      	ldr	r2, [pc, #376]	@ (8005a4c <HAL_GPIO_Init+0x330>)
 80058d4:	f043 0301 	orr.w	r3, r3, #1
 80058d8:	6613      	str	r3, [r2, #96]	@ 0x60
 80058da:	4b5c      	ldr	r3, [pc, #368]	@ (8005a4c <HAL_GPIO_Init+0x330>)
 80058dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058de:	f003 0301 	and.w	r3, r3, #1
 80058e2:	60bb      	str	r3, [r7, #8]
 80058e4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80058e6:	4a5a      	ldr	r2, [pc, #360]	@ (8005a50 <HAL_GPIO_Init+0x334>)
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	089b      	lsrs	r3, r3, #2
 80058ec:	3302      	adds	r3, #2
 80058ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	f003 0303 	and.w	r3, r3, #3
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	220f      	movs	r2, #15
 80058fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005902:	43db      	mvns	r3, r3
 8005904:	693a      	ldr	r2, [r7, #16]
 8005906:	4013      	ands	r3, r2
 8005908:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005910:	d025      	beq.n	800595e <HAL_GPIO_Init+0x242>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a4f      	ldr	r2, [pc, #316]	@ (8005a54 <HAL_GPIO_Init+0x338>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d01f      	beq.n	800595a <HAL_GPIO_Init+0x23e>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a4e      	ldr	r2, [pc, #312]	@ (8005a58 <HAL_GPIO_Init+0x33c>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d019      	beq.n	8005956 <HAL_GPIO_Init+0x23a>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4a4d      	ldr	r2, [pc, #308]	@ (8005a5c <HAL_GPIO_Init+0x340>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d013      	beq.n	8005952 <HAL_GPIO_Init+0x236>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4a4c      	ldr	r2, [pc, #304]	@ (8005a60 <HAL_GPIO_Init+0x344>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d00d      	beq.n	800594e <HAL_GPIO_Init+0x232>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a4b      	ldr	r2, [pc, #300]	@ (8005a64 <HAL_GPIO_Init+0x348>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d007      	beq.n	800594a <HAL_GPIO_Init+0x22e>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a4a      	ldr	r2, [pc, #296]	@ (8005a68 <HAL_GPIO_Init+0x34c>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d101      	bne.n	8005946 <HAL_GPIO_Init+0x22a>
 8005942:	2306      	movs	r3, #6
 8005944:	e00c      	b.n	8005960 <HAL_GPIO_Init+0x244>
 8005946:	2307      	movs	r3, #7
 8005948:	e00a      	b.n	8005960 <HAL_GPIO_Init+0x244>
 800594a:	2305      	movs	r3, #5
 800594c:	e008      	b.n	8005960 <HAL_GPIO_Init+0x244>
 800594e:	2304      	movs	r3, #4
 8005950:	e006      	b.n	8005960 <HAL_GPIO_Init+0x244>
 8005952:	2303      	movs	r3, #3
 8005954:	e004      	b.n	8005960 <HAL_GPIO_Init+0x244>
 8005956:	2302      	movs	r3, #2
 8005958:	e002      	b.n	8005960 <HAL_GPIO_Init+0x244>
 800595a:	2301      	movs	r3, #1
 800595c:	e000      	b.n	8005960 <HAL_GPIO_Init+0x244>
 800595e:	2300      	movs	r3, #0
 8005960:	697a      	ldr	r2, [r7, #20]
 8005962:	f002 0203 	and.w	r2, r2, #3
 8005966:	0092      	lsls	r2, r2, #2
 8005968:	4093      	lsls	r3, r2
 800596a:	693a      	ldr	r2, [r7, #16]
 800596c:	4313      	orrs	r3, r2
 800596e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005970:	4937      	ldr	r1, [pc, #220]	@ (8005a50 <HAL_GPIO_Init+0x334>)
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	089b      	lsrs	r3, r3, #2
 8005976:	3302      	adds	r3, #2
 8005978:	693a      	ldr	r2, [r7, #16]
 800597a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800597e:	4b3b      	ldr	r3, [pc, #236]	@ (8005a6c <HAL_GPIO_Init+0x350>)
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	43db      	mvns	r3, r3
 8005988:	693a      	ldr	r2, [r7, #16]
 800598a:	4013      	ands	r3, r2
 800598c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005996:	2b00      	cmp	r3, #0
 8005998:	d003      	beq.n	80059a2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800599a:	693a      	ldr	r2, [r7, #16]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	4313      	orrs	r3, r2
 80059a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80059a2:	4a32      	ldr	r2, [pc, #200]	@ (8005a6c <HAL_GPIO_Init+0x350>)
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80059a8:	4b30      	ldr	r3, [pc, #192]	@ (8005a6c <HAL_GPIO_Init+0x350>)
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	43db      	mvns	r3, r3
 80059b2:	693a      	ldr	r2, [r7, #16]
 80059b4:	4013      	ands	r3, r2
 80059b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d003      	beq.n	80059cc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80059c4:	693a      	ldr	r2, [r7, #16]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	4313      	orrs	r3, r2
 80059ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80059cc:	4a27      	ldr	r2, [pc, #156]	@ (8005a6c <HAL_GPIO_Init+0x350>)
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80059d2:	4b26      	ldr	r3, [pc, #152]	@ (8005a6c <HAL_GPIO_Init+0x350>)
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	43db      	mvns	r3, r3
 80059dc:	693a      	ldr	r2, [r7, #16]
 80059de:	4013      	ands	r3, r2
 80059e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d003      	beq.n	80059f6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80059ee:	693a      	ldr	r2, [r7, #16]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80059f6:	4a1d      	ldr	r2, [pc, #116]	@ (8005a6c <HAL_GPIO_Init+0x350>)
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80059fc:	4b1b      	ldr	r3, [pc, #108]	@ (8005a6c <HAL_GPIO_Init+0x350>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	43db      	mvns	r3, r3
 8005a06:	693a      	ldr	r2, [r7, #16]
 8005a08:	4013      	ands	r3, r2
 8005a0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d003      	beq.n	8005a20 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8005a18:	693a      	ldr	r2, [r7, #16]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005a20:	4a12      	ldr	r2, [pc, #72]	@ (8005a6c <HAL_GPIO_Init+0x350>)
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	3301      	adds	r3, #1
 8005a2a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	fa22 f303 	lsr.w	r3, r2, r3
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	f47f ae78 	bne.w	800572c <HAL_GPIO_Init+0x10>
  }
}
 8005a3c:	bf00      	nop
 8005a3e:	bf00      	nop
 8005a40:	371c      	adds	r7, #28
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr
 8005a4a:	bf00      	nop
 8005a4c:	40021000 	.word	0x40021000
 8005a50:	40010000 	.word	0x40010000
 8005a54:	48000400 	.word	0x48000400
 8005a58:	48000800 	.word	0x48000800
 8005a5c:	48000c00 	.word	0x48000c00
 8005a60:	48001000 	.word	0x48001000
 8005a64:	48001400 	.word	0x48001400
 8005a68:	48001800 	.word	0x48001800
 8005a6c:	40010400 	.word	0x40010400

08005a70 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b087      	sub	sp, #28
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8005a7e:	e0cd      	b.n	8005c1c <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005a80:	2201      	movs	r2, #1
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	fa02 f303 	lsl.w	r3, r2, r3
 8005a88:	683a      	ldr	r2, [r7, #0]
 8005a8a:	4013      	ands	r3, r2
 8005a8c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	f000 80c0 	beq.w	8005c16 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8005a96:	4a68      	ldr	r2, [pc, #416]	@ (8005c38 <HAL_GPIO_DeInit+0x1c8>)
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	089b      	lsrs	r3, r3, #2
 8005a9c:	3302      	adds	r3, #2
 8005a9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005aa2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	f003 0303 	and.w	r3, r3, #3
 8005aaa:	009b      	lsls	r3, r3, #2
 8005aac:	220f      	movs	r2, #15
 8005aae:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab2:	68fa      	ldr	r2, [r7, #12]
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005abe:	d025      	beq.n	8005b0c <HAL_GPIO_DeInit+0x9c>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4a5e      	ldr	r2, [pc, #376]	@ (8005c3c <HAL_GPIO_DeInit+0x1cc>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d01f      	beq.n	8005b08 <HAL_GPIO_DeInit+0x98>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a5d      	ldr	r2, [pc, #372]	@ (8005c40 <HAL_GPIO_DeInit+0x1d0>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d019      	beq.n	8005b04 <HAL_GPIO_DeInit+0x94>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4a5c      	ldr	r2, [pc, #368]	@ (8005c44 <HAL_GPIO_DeInit+0x1d4>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d013      	beq.n	8005b00 <HAL_GPIO_DeInit+0x90>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a5b      	ldr	r2, [pc, #364]	@ (8005c48 <HAL_GPIO_DeInit+0x1d8>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d00d      	beq.n	8005afc <HAL_GPIO_DeInit+0x8c>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4a5a      	ldr	r2, [pc, #360]	@ (8005c4c <HAL_GPIO_DeInit+0x1dc>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d007      	beq.n	8005af8 <HAL_GPIO_DeInit+0x88>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	4a59      	ldr	r2, [pc, #356]	@ (8005c50 <HAL_GPIO_DeInit+0x1e0>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d101      	bne.n	8005af4 <HAL_GPIO_DeInit+0x84>
 8005af0:	2306      	movs	r3, #6
 8005af2:	e00c      	b.n	8005b0e <HAL_GPIO_DeInit+0x9e>
 8005af4:	2307      	movs	r3, #7
 8005af6:	e00a      	b.n	8005b0e <HAL_GPIO_DeInit+0x9e>
 8005af8:	2305      	movs	r3, #5
 8005afa:	e008      	b.n	8005b0e <HAL_GPIO_DeInit+0x9e>
 8005afc:	2304      	movs	r3, #4
 8005afe:	e006      	b.n	8005b0e <HAL_GPIO_DeInit+0x9e>
 8005b00:	2303      	movs	r3, #3
 8005b02:	e004      	b.n	8005b0e <HAL_GPIO_DeInit+0x9e>
 8005b04:	2302      	movs	r3, #2
 8005b06:	e002      	b.n	8005b0e <HAL_GPIO_DeInit+0x9e>
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e000      	b.n	8005b0e <HAL_GPIO_DeInit+0x9e>
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	697a      	ldr	r2, [r7, #20]
 8005b10:	f002 0203 	and.w	r2, r2, #3
 8005b14:	0092      	lsls	r2, r2, #2
 8005b16:	4093      	lsls	r3, r2
 8005b18:	68fa      	ldr	r2, [r7, #12]
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d132      	bne.n	8005b84 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8005b1e:	4b4d      	ldr	r3, [pc, #308]	@ (8005c54 <HAL_GPIO_DeInit+0x1e4>)
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	43db      	mvns	r3, r3
 8005b26:	494b      	ldr	r1, [pc, #300]	@ (8005c54 <HAL_GPIO_DeInit+0x1e4>)
 8005b28:	4013      	ands	r3, r2
 8005b2a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8005b2c:	4b49      	ldr	r3, [pc, #292]	@ (8005c54 <HAL_GPIO_DeInit+0x1e4>)
 8005b2e:	685a      	ldr	r2, [r3, #4]
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	43db      	mvns	r3, r3
 8005b34:	4947      	ldr	r1, [pc, #284]	@ (8005c54 <HAL_GPIO_DeInit+0x1e4>)
 8005b36:	4013      	ands	r3, r2
 8005b38:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8005b3a:	4b46      	ldr	r3, [pc, #280]	@ (8005c54 <HAL_GPIO_DeInit+0x1e4>)
 8005b3c:	68da      	ldr	r2, [r3, #12]
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	43db      	mvns	r3, r3
 8005b42:	4944      	ldr	r1, [pc, #272]	@ (8005c54 <HAL_GPIO_DeInit+0x1e4>)
 8005b44:	4013      	ands	r3, r2
 8005b46:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8005b48:	4b42      	ldr	r3, [pc, #264]	@ (8005c54 <HAL_GPIO_DeInit+0x1e4>)
 8005b4a:	689a      	ldr	r2, [r3, #8]
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	43db      	mvns	r3, r3
 8005b50:	4940      	ldr	r1, [pc, #256]	@ (8005c54 <HAL_GPIO_DeInit+0x1e4>)
 8005b52:	4013      	ands	r3, r2
 8005b54:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	f003 0303 	and.w	r3, r3, #3
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	220f      	movs	r2, #15
 8005b60:	fa02 f303 	lsl.w	r3, r2, r3
 8005b64:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8005b66:	4a34      	ldr	r2, [pc, #208]	@ (8005c38 <HAL_GPIO_DeInit+0x1c8>)
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	089b      	lsrs	r3, r3, #2
 8005b6c:	3302      	adds	r3, #2
 8005b6e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	43da      	mvns	r2, r3
 8005b76:	4830      	ldr	r0, [pc, #192]	@ (8005c38 <HAL_GPIO_DeInit+0x1c8>)
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	089b      	lsrs	r3, r3, #2
 8005b7c:	400a      	ands	r2, r1
 8005b7e:	3302      	adds	r3, #2
 8005b80:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	005b      	lsls	r3, r3, #1
 8005b8c:	2103      	movs	r1, #3
 8005b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8005b92:	431a      	orrs	r2, r3
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	08da      	lsrs	r2, r3, #3
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	3208      	adds	r2, #8
 8005ba0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	f003 0307 	and.w	r3, r3, #7
 8005baa:	009b      	lsls	r3, r3, #2
 8005bac:	220f      	movs	r2, #15
 8005bae:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb2:	43db      	mvns	r3, r3
 8005bb4:	697a      	ldr	r2, [r7, #20]
 8005bb6:	08d2      	lsrs	r2, r2, #3
 8005bb8:	4019      	ands	r1, r3
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	3208      	adds	r2, #8
 8005bbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	689a      	ldr	r2, [r3, #8]
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	005b      	lsls	r3, r3, #1
 8005bca:	2103      	movs	r1, #3
 8005bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8005bd0:	43db      	mvns	r3, r3
 8005bd2:	401a      	ands	r2, r3
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	685a      	ldr	r2, [r3, #4]
 8005bdc:	2101      	movs	r1, #1
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	fa01 f303 	lsl.w	r3, r1, r3
 8005be4:	43db      	mvns	r3, r3
 8005be6:	401a      	ands	r2, r3
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	68da      	ldr	r2, [r3, #12]
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	005b      	lsls	r3, r3, #1
 8005bf4:	2103      	movs	r1, #3
 8005bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8005bfa:	43db      	mvns	r3, r3
 8005bfc:	401a      	ands	r2, r3
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c06:	2101      	movs	r1, #1
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8005c0e:	43db      	mvns	r3, r3
 8005c10:	401a      	ands	r2, r3
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	3301      	adds	r3, #1
 8005c1a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8005c1c:	683a      	ldr	r2, [r7, #0]
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	fa22 f303 	lsr.w	r3, r2, r3
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	f47f af2b 	bne.w	8005a80 <HAL_GPIO_DeInit+0x10>
  }
}
 8005c2a:	bf00      	nop
 8005c2c:	bf00      	nop
 8005c2e:	371c      	adds	r7, #28
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr
 8005c38:	40010000 	.word	0x40010000
 8005c3c:	48000400 	.word	0x48000400
 8005c40:	48000800 	.word	0x48000800
 8005c44:	48000c00 	.word	0x48000c00
 8005c48:	48001000 	.word	0x48001000
 8005c4c:	48001400 	.word	0x48001400
 8005c50:	48001800 	.word	0x48001800
 8005c54:	40010400 	.word	0x40010400

08005c58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b085      	sub	sp, #20
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	460b      	mov	r3, r1
 8005c62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	691a      	ldr	r2, [r3, #16]
 8005c68:	887b      	ldrh	r3, [r7, #2]
 8005c6a:	4013      	ands	r3, r2
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d002      	beq.n	8005c76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005c70:	2301      	movs	r3, #1
 8005c72:	73fb      	strb	r3, [r7, #15]
 8005c74:	e001      	b.n	8005c7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005c76:	2300      	movs	r3, #0
 8005c78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3714      	adds	r7, #20
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr

08005c88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	460b      	mov	r3, r1
 8005c92:	807b      	strh	r3, [r7, #2]
 8005c94:	4613      	mov	r3, r2
 8005c96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005c98:	787b      	ldrb	r3, [r7, #1]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d003      	beq.n	8005ca6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005c9e:	887a      	ldrh	r2, [r7, #2]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005ca4:	e002      	b.n	8005cac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005ca6:	887a      	ldrh	r2, [r7, #2]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005cac:	bf00      	nop
 8005cae:	370c      	adds	r7, #12
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b085      	sub	sp, #20
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	460b      	mov	r3, r1
 8005cc2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	695b      	ldr	r3, [r3, #20]
 8005cc8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005cca:	887a      	ldrh	r2, [r7, #2]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	4013      	ands	r3, r2
 8005cd0:	041a      	lsls	r2, r3, #16
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	43d9      	mvns	r1, r3
 8005cd6:	887b      	ldrh	r3, [r7, #2]
 8005cd8:	400b      	ands	r3, r1
 8005cda:	431a      	orrs	r2, r3
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	619a      	str	r2, [r3, #24]
}
 8005ce0:	bf00      	nop
 8005ce2:	3714      	adds	r7, #20
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr

08005cec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b082      	sub	sp, #8
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005cf6:	4b08      	ldr	r3, [pc, #32]	@ (8005d18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005cf8:	695a      	ldr	r2, [r3, #20]
 8005cfa:	88fb      	ldrh	r3, [r7, #6]
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d006      	beq.n	8005d10 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005d02:	4a05      	ldr	r2, [pc, #20]	@ (8005d18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005d04:	88fb      	ldrh	r3, [r7, #6]
 8005d06:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005d08:	88fb      	ldrh	r3, [r7, #6]
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f000 f806 	bl	8005d1c <HAL_GPIO_EXTI_Callback>
  }
}
 8005d10:	bf00      	nop
 8005d12:	3708      	adds	r7, #8
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	40010400 	.word	0x40010400

08005d1c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b083      	sub	sp, #12
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	4603      	mov	r3, r0
 8005d24:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005d26:	bf00      	nop
 8005d28:	370c      	adds	r7, #12
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr

08005d32 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005d32:	b580      	push	{r7, lr}
 8005d34:	b082      	sub	sp, #8
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d101      	bne.n	8005d44 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	e08d      	b.n	8005e60 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d4a:	b2db      	uxtb	r3, r3
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d106      	bne.n	8005d5e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f7fe f8f1 	bl	8003f40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2224      	movs	r2, #36	@ 0x24
 8005d62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f022 0201 	bic.w	r2, r2, #1
 8005d74:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	685a      	ldr	r2, [r3, #4]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005d82:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	689a      	ldr	r2, [r3, #8]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005d92:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d107      	bne.n	8005dac <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	689a      	ldr	r2, [r3, #8]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005da8:	609a      	str	r2, [r3, #8]
 8005daa:	e006      	b.n	8005dba <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	689a      	ldr	r2, [r3, #8]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005db8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	68db      	ldr	r3, [r3, #12]
 8005dbe:	2b02      	cmp	r3, #2
 8005dc0:	d108      	bne.n	8005dd4 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	685a      	ldr	r2, [r3, #4]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005dd0:	605a      	str	r2, [r3, #4]
 8005dd2:	e007      	b.n	8005de4 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	685a      	ldr	r2, [r3, #4]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005de2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	6812      	ldr	r2, [r2, #0]
 8005dee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005df2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005df6:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	68da      	ldr	r2, [r3, #12]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005e06:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	691a      	ldr	r2, [r3, #16]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	695b      	ldr	r3, [r3, #20]
 8005e10:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	699b      	ldr	r3, [r3, #24]
 8005e18:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	430a      	orrs	r2, r1
 8005e20:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	69d9      	ldr	r1, [r3, #28]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6a1a      	ldr	r2, [r3, #32]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	430a      	orrs	r2, r1
 8005e30:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f042 0201 	orr.w	r2, r2, #1
 8005e40:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2220      	movs	r2, #32
 8005e4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2200      	movs	r2, #0
 8005e54:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005e5e:	2300      	movs	r3, #0
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3708      	adds	r7, #8
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}

08005e68 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b082      	sub	sp, #8
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d101      	bne.n	8005e7a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	e021      	b.n	8005ebe <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2224      	movs	r2, #36	@ 0x24
 8005e7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	681a      	ldr	r2, [r3, #0]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f022 0201 	bic.w	r2, r2, #1
 8005e90:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f7fe f8b2 	bl	8003ffc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005ebc:	2300      	movs	r3, #0
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3708      	adds	r7, #8
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}
	...

08005ec8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b088      	sub	sp, #32
 8005ecc:	af02      	add	r7, sp, #8
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	4608      	mov	r0, r1
 8005ed2:	4611      	mov	r1, r2
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	817b      	strh	r3, [r7, #10]
 8005eda:	460b      	mov	r3, r1
 8005edc:	813b      	strh	r3, [r7, #8]
 8005ede:	4613      	mov	r3, r2
 8005ee0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	2b20      	cmp	r3, #32
 8005eec:	f040 80f9 	bne.w	80060e2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ef0:	6a3b      	ldr	r3, [r7, #32]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d002      	beq.n	8005efc <HAL_I2C_Mem_Write+0x34>
 8005ef6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d105      	bne.n	8005f08 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f02:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	e0ed      	b.n	80060e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d101      	bne.n	8005f16 <HAL_I2C_Mem_Write+0x4e>
 8005f12:	2302      	movs	r3, #2
 8005f14:	e0e6      	b.n	80060e4 <HAL_I2C_Mem_Write+0x21c>
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005f1e:	f7ff f951 	bl	80051c4 <HAL_GetTick>
 8005f22:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	9300      	str	r3, [sp, #0]
 8005f28:	2319      	movs	r3, #25
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005f30:	68f8      	ldr	r0, [r7, #12]
 8005f32:	f000 fac3 	bl	80064bc <I2C_WaitOnFlagUntilTimeout>
 8005f36:	4603      	mov	r3, r0
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d001      	beq.n	8005f40 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	e0d1      	b.n	80060e4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2221      	movs	r2, #33	@ 0x21
 8005f44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2240      	movs	r2, #64	@ 0x40
 8005f4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2200      	movs	r2, #0
 8005f54:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	6a3a      	ldr	r2, [r7, #32]
 8005f5a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005f60:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2200      	movs	r2, #0
 8005f66:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005f68:	88f8      	ldrh	r0, [r7, #6]
 8005f6a:	893a      	ldrh	r2, [r7, #8]
 8005f6c:	8979      	ldrh	r1, [r7, #10]
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	9301      	str	r3, [sp, #4]
 8005f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f74:	9300      	str	r3, [sp, #0]
 8005f76:	4603      	mov	r3, r0
 8005f78:	68f8      	ldr	r0, [r7, #12]
 8005f7a:	f000 f9d3 	bl	8006324 <I2C_RequestMemoryWrite>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d005      	beq.n	8005f90 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2200      	movs	r2, #0
 8005f88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e0a9      	b.n	80060e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	2bff      	cmp	r3, #255	@ 0xff
 8005f98:	d90e      	bls.n	8005fb8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	22ff      	movs	r2, #255	@ 0xff
 8005f9e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fa4:	b2da      	uxtb	r2, r3
 8005fa6:	8979      	ldrh	r1, [r7, #10]
 8005fa8:	2300      	movs	r3, #0
 8005faa:	9300      	str	r3, [sp, #0]
 8005fac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005fb0:	68f8      	ldr	r0, [r7, #12]
 8005fb2:	f000 fc47 	bl	8006844 <I2C_TransferConfig>
 8005fb6:	e00f      	b.n	8005fd8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fbc:	b29a      	uxth	r2, r3
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fc6:	b2da      	uxtb	r2, r3
 8005fc8:	8979      	ldrh	r1, [r7, #10]
 8005fca:	2300      	movs	r3, #0
 8005fcc:	9300      	str	r3, [sp, #0]
 8005fce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005fd2:	68f8      	ldr	r0, [r7, #12]
 8005fd4:	f000 fc36 	bl	8006844 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005fd8:	697a      	ldr	r2, [r7, #20]
 8005fda:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005fdc:	68f8      	ldr	r0, [r7, #12]
 8005fde:	f000 fac6 	bl	800656e <I2C_WaitOnTXISFlagUntilTimeout>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d001      	beq.n	8005fec <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	e07b      	b.n	80060e4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ff0:	781a      	ldrb	r2, [r3, #0]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ffc:	1c5a      	adds	r2, r3, #1
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006006:	b29b      	uxth	r3, r3
 8006008:	3b01      	subs	r3, #1
 800600a:	b29a      	uxth	r2, r3
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006014:	3b01      	subs	r3, #1
 8006016:	b29a      	uxth	r2, r3
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006020:	b29b      	uxth	r3, r3
 8006022:	2b00      	cmp	r3, #0
 8006024:	d034      	beq.n	8006090 <HAL_I2C_Mem_Write+0x1c8>
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800602a:	2b00      	cmp	r3, #0
 800602c:	d130      	bne.n	8006090 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	9300      	str	r3, [sp, #0]
 8006032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006034:	2200      	movs	r2, #0
 8006036:	2180      	movs	r1, #128	@ 0x80
 8006038:	68f8      	ldr	r0, [r7, #12]
 800603a:	f000 fa3f 	bl	80064bc <I2C_WaitOnFlagUntilTimeout>
 800603e:	4603      	mov	r3, r0
 8006040:	2b00      	cmp	r3, #0
 8006042:	d001      	beq.n	8006048 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	e04d      	b.n	80060e4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800604c:	b29b      	uxth	r3, r3
 800604e:	2bff      	cmp	r3, #255	@ 0xff
 8006050:	d90e      	bls.n	8006070 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	22ff      	movs	r2, #255	@ 0xff
 8006056:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800605c:	b2da      	uxtb	r2, r3
 800605e:	8979      	ldrh	r1, [r7, #10]
 8006060:	2300      	movs	r3, #0
 8006062:	9300      	str	r3, [sp, #0]
 8006064:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006068:	68f8      	ldr	r0, [r7, #12]
 800606a:	f000 fbeb 	bl	8006844 <I2C_TransferConfig>
 800606e:	e00f      	b.n	8006090 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006074:	b29a      	uxth	r2, r3
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800607e:	b2da      	uxtb	r2, r3
 8006080:	8979      	ldrh	r1, [r7, #10]
 8006082:	2300      	movs	r3, #0
 8006084:	9300      	str	r3, [sp, #0]
 8006086:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800608a:	68f8      	ldr	r0, [r7, #12]
 800608c:	f000 fbda 	bl	8006844 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006094:	b29b      	uxth	r3, r3
 8006096:	2b00      	cmp	r3, #0
 8006098:	d19e      	bne.n	8005fd8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800609a:	697a      	ldr	r2, [r7, #20]
 800609c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800609e:	68f8      	ldr	r0, [r7, #12]
 80060a0:	f000 faac 	bl	80065fc <I2C_WaitOnSTOPFlagUntilTimeout>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d001      	beq.n	80060ae <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	e01a      	b.n	80060e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	2220      	movs	r2, #32
 80060b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	6859      	ldr	r1, [r3, #4]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	4b0a      	ldr	r3, [pc, #40]	@ (80060ec <HAL_I2C_Mem_Write+0x224>)
 80060c2:	400b      	ands	r3, r1
 80060c4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2220      	movs	r2, #32
 80060ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2200      	movs	r2, #0
 80060d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2200      	movs	r2, #0
 80060da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80060de:	2300      	movs	r3, #0
 80060e0:	e000      	b.n	80060e4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80060e2:	2302      	movs	r3, #2
  }
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3718      	adds	r7, #24
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}
 80060ec:	fe00e800 	.word	0xfe00e800

080060f0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b088      	sub	sp, #32
 80060f4:	af02      	add	r7, sp, #8
 80060f6:	60f8      	str	r0, [r7, #12]
 80060f8:	4608      	mov	r0, r1
 80060fa:	4611      	mov	r1, r2
 80060fc:	461a      	mov	r2, r3
 80060fe:	4603      	mov	r3, r0
 8006100:	817b      	strh	r3, [r7, #10]
 8006102:	460b      	mov	r3, r1
 8006104:	813b      	strh	r3, [r7, #8]
 8006106:	4613      	mov	r3, r2
 8006108:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006110:	b2db      	uxtb	r3, r3
 8006112:	2b20      	cmp	r3, #32
 8006114:	f040 80fd 	bne.w	8006312 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006118:	6a3b      	ldr	r3, [r7, #32]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d002      	beq.n	8006124 <HAL_I2C_Mem_Read+0x34>
 800611e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006120:	2b00      	cmp	r3, #0
 8006122:	d105      	bne.n	8006130 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800612a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	e0f1      	b.n	8006314 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006136:	2b01      	cmp	r3, #1
 8006138:	d101      	bne.n	800613e <HAL_I2C_Mem_Read+0x4e>
 800613a:	2302      	movs	r3, #2
 800613c:	e0ea      	b.n	8006314 <HAL_I2C_Mem_Read+0x224>
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2201      	movs	r2, #1
 8006142:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006146:	f7ff f83d 	bl	80051c4 <HAL_GetTick>
 800614a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	9300      	str	r3, [sp, #0]
 8006150:	2319      	movs	r3, #25
 8006152:	2201      	movs	r2, #1
 8006154:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006158:	68f8      	ldr	r0, [r7, #12]
 800615a:	f000 f9af 	bl	80064bc <I2C_WaitOnFlagUntilTimeout>
 800615e:	4603      	mov	r3, r0
 8006160:	2b00      	cmp	r3, #0
 8006162:	d001      	beq.n	8006168 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006164:	2301      	movs	r3, #1
 8006166:	e0d5      	b.n	8006314 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2222      	movs	r2, #34	@ 0x22
 800616c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2240      	movs	r2, #64	@ 0x40
 8006174:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2200      	movs	r2, #0
 800617c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	6a3a      	ldr	r2, [r7, #32]
 8006182:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006188:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2200      	movs	r2, #0
 800618e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006190:	88f8      	ldrh	r0, [r7, #6]
 8006192:	893a      	ldrh	r2, [r7, #8]
 8006194:	8979      	ldrh	r1, [r7, #10]
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	9301      	str	r3, [sp, #4]
 800619a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800619c:	9300      	str	r3, [sp, #0]
 800619e:	4603      	mov	r3, r0
 80061a0:	68f8      	ldr	r0, [r7, #12]
 80061a2:	f000 f913 	bl	80063cc <I2C_RequestMemoryRead>
 80061a6:	4603      	mov	r3, r0
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d005      	beq.n	80061b8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2200      	movs	r2, #0
 80061b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80061b4:	2301      	movs	r3, #1
 80061b6:	e0ad      	b.n	8006314 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061bc:	b29b      	uxth	r3, r3
 80061be:	2bff      	cmp	r3, #255	@ 0xff
 80061c0:	d90e      	bls.n	80061e0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2201      	movs	r2, #1
 80061c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061cc:	b2da      	uxtb	r2, r3
 80061ce:	8979      	ldrh	r1, [r7, #10]
 80061d0:	4b52      	ldr	r3, [pc, #328]	@ (800631c <HAL_I2C_Mem_Read+0x22c>)
 80061d2:	9300      	str	r3, [sp, #0]
 80061d4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80061d8:	68f8      	ldr	r0, [r7, #12]
 80061da:	f000 fb33 	bl	8006844 <I2C_TransferConfig>
 80061de:	e00f      	b.n	8006200 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061e4:	b29a      	uxth	r2, r3
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061ee:	b2da      	uxtb	r2, r3
 80061f0:	8979      	ldrh	r1, [r7, #10]
 80061f2:	4b4a      	ldr	r3, [pc, #296]	@ (800631c <HAL_I2C_Mem_Read+0x22c>)
 80061f4:	9300      	str	r3, [sp, #0]
 80061f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80061fa:	68f8      	ldr	r0, [r7, #12]
 80061fc:	f000 fb22 	bl	8006844 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	9300      	str	r3, [sp, #0]
 8006204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006206:	2200      	movs	r2, #0
 8006208:	2104      	movs	r1, #4
 800620a:	68f8      	ldr	r0, [r7, #12]
 800620c:	f000 f956 	bl	80064bc <I2C_WaitOnFlagUntilTimeout>
 8006210:	4603      	mov	r3, r0
 8006212:	2b00      	cmp	r3, #0
 8006214:	d001      	beq.n	800621a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	e07c      	b.n	8006314 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006224:	b2d2      	uxtb	r2, r2
 8006226:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800622c:	1c5a      	adds	r2, r3, #1
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006236:	3b01      	subs	r3, #1
 8006238:	b29a      	uxth	r2, r3
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006242:	b29b      	uxth	r3, r3
 8006244:	3b01      	subs	r3, #1
 8006246:	b29a      	uxth	r2, r3
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006250:	b29b      	uxth	r3, r3
 8006252:	2b00      	cmp	r3, #0
 8006254:	d034      	beq.n	80062c0 <HAL_I2C_Mem_Read+0x1d0>
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800625a:	2b00      	cmp	r3, #0
 800625c:	d130      	bne.n	80062c0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	9300      	str	r3, [sp, #0]
 8006262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006264:	2200      	movs	r2, #0
 8006266:	2180      	movs	r1, #128	@ 0x80
 8006268:	68f8      	ldr	r0, [r7, #12]
 800626a:	f000 f927 	bl	80064bc <I2C_WaitOnFlagUntilTimeout>
 800626e:	4603      	mov	r3, r0
 8006270:	2b00      	cmp	r3, #0
 8006272:	d001      	beq.n	8006278 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	e04d      	b.n	8006314 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800627c:	b29b      	uxth	r3, r3
 800627e:	2bff      	cmp	r3, #255	@ 0xff
 8006280:	d90e      	bls.n	80062a0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2201      	movs	r2, #1
 8006286:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800628c:	b2da      	uxtb	r2, r3
 800628e:	8979      	ldrh	r1, [r7, #10]
 8006290:	2300      	movs	r3, #0
 8006292:	9300      	str	r3, [sp, #0]
 8006294:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006298:	68f8      	ldr	r0, [r7, #12]
 800629a:	f000 fad3 	bl	8006844 <I2C_TransferConfig>
 800629e:	e00f      	b.n	80062c0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062a4:	b29a      	uxth	r2, r3
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062ae:	b2da      	uxtb	r2, r3
 80062b0:	8979      	ldrh	r1, [r7, #10]
 80062b2:	2300      	movs	r3, #0
 80062b4:	9300      	str	r3, [sp, #0]
 80062b6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80062ba:	68f8      	ldr	r0, [r7, #12]
 80062bc:	f000 fac2 	bl	8006844 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d19a      	bne.n	8006200 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80062ca:	697a      	ldr	r2, [r7, #20]
 80062cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80062ce:	68f8      	ldr	r0, [r7, #12]
 80062d0:	f000 f994 	bl	80065fc <I2C_WaitOnSTOPFlagUntilTimeout>
 80062d4:	4603      	mov	r3, r0
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d001      	beq.n	80062de <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	e01a      	b.n	8006314 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	2220      	movs	r2, #32
 80062e4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	6859      	ldr	r1, [r3, #4]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	4b0b      	ldr	r3, [pc, #44]	@ (8006320 <HAL_I2C_Mem_Read+0x230>)
 80062f2:	400b      	ands	r3, r1
 80062f4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2220      	movs	r2, #32
 80062fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2200      	movs	r2, #0
 8006302:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2200      	movs	r2, #0
 800630a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800630e:	2300      	movs	r3, #0
 8006310:	e000      	b.n	8006314 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006312:	2302      	movs	r3, #2
  }
}
 8006314:	4618      	mov	r0, r3
 8006316:	3718      	adds	r7, #24
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}
 800631c:	80002400 	.word	0x80002400
 8006320:	fe00e800 	.word	0xfe00e800

08006324 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b086      	sub	sp, #24
 8006328:	af02      	add	r7, sp, #8
 800632a:	60f8      	str	r0, [r7, #12]
 800632c:	4608      	mov	r0, r1
 800632e:	4611      	mov	r1, r2
 8006330:	461a      	mov	r2, r3
 8006332:	4603      	mov	r3, r0
 8006334:	817b      	strh	r3, [r7, #10]
 8006336:	460b      	mov	r3, r1
 8006338:	813b      	strh	r3, [r7, #8]
 800633a:	4613      	mov	r3, r2
 800633c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800633e:	88fb      	ldrh	r3, [r7, #6]
 8006340:	b2da      	uxtb	r2, r3
 8006342:	8979      	ldrh	r1, [r7, #10]
 8006344:	4b20      	ldr	r3, [pc, #128]	@ (80063c8 <I2C_RequestMemoryWrite+0xa4>)
 8006346:	9300      	str	r3, [sp, #0]
 8006348:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800634c:	68f8      	ldr	r0, [r7, #12]
 800634e:	f000 fa79 	bl	8006844 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006352:	69fa      	ldr	r2, [r7, #28]
 8006354:	69b9      	ldr	r1, [r7, #24]
 8006356:	68f8      	ldr	r0, [r7, #12]
 8006358:	f000 f909 	bl	800656e <I2C_WaitOnTXISFlagUntilTimeout>
 800635c:	4603      	mov	r3, r0
 800635e:	2b00      	cmp	r3, #0
 8006360:	d001      	beq.n	8006366 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	e02c      	b.n	80063c0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006366:	88fb      	ldrh	r3, [r7, #6]
 8006368:	2b01      	cmp	r3, #1
 800636a:	d105      	bne.n	8006378 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800636c:	893b      	ldrh	r3, [r7, #8]
 800636e:	b2da      	uxtb	r2, r3
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	629a      	str	r2, [r3, #40]	@ 0x28
 8006376:	e015      	b.n	80063a4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006378:	893b      	ldrh	r3, [r7, #8]
 800637a:	0a1b      	lsrs	r3, r3, #8
 800637c:	b29b      	uxth	r3, r3
 800637e:	b2da      	uxtb	r2, r3
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006386:	69fa      	ldr	r2, [r7, #28]
 8006388:	69b9      	ldr	r1, [r7, #24]
 800638a:	68f8      	ldr	r0, [r7, #12]
 800638c:	f000 f8ef 	bl	800656e <I2C_WaitOnTXISFlagUntilTimeout>
 8006390:	4603      	mov	r3, r0
 8006392:	2b00      	cmp	r3, #0
 8006394:	d001      	beq.n	800639a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	e012      	b.n	80063c0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800639a:	893b      	ldrh	r3, [r7, #8]
 800639c:	b2da      	uxtb	r2, r3
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80063a4:	69fb      	ldr	r3, [r7, #28]
 80063a6:	9300      	str	r3, [sp, #0]
 80063a8:	69bb      	ldr	r3, [r7, #24]
 80063aa:	2200      	movs	r2, #0
 80063ac:	2180      	movs	r1, #128	@ 0x80
 80063ae:	68f8      	ldr	r0, [r7, #12]
 80063b0:	f000 f884 	bl	80064bc <I2C_WaitOnFlagUntilTimeout>
 80063b4:	4603      	mov	r3, r0
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d001      	beq.n	80063be <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	e000      	b.n	80063c0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80063be:	2300      	movs	r3, #0
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3710      	adds	r7, #16
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}
 80063c8:	80002000 	.word	0x80002000

080063cc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b086      	sub	sp, #24
 80063d0:	af02      	add	r7, sp, #8
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	4608      	mov	r0, r1
 80063d6:	4611      	mov	r1, r2
 80063d8:	461a      	mov	r2, r3
 80063da:	4603      	mov	r3, r0
 80063dc:	817b      	strh	r3, [r7, #10]
 80063de:	460b      	mov	r3, r1
 80063e0:	813b      	strh	r3, [r7, #8]
 80063e2:	4613      	mov	r3, r2
 80063e4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80063e6:	88fb      	ldrh	r3, [r7, #6]
 80063e8:	b2da      	uxtb	r2, r3
 80063ea:	8979      	ldrh	r1, [r7, #10]
 80063ec:	4b20      	ldr	r3, [pc, #128]	@ (8006470 <I2C_RequestMemoryRead+0xa4>)
 80063ee:	9300      	str	r3, [sp, #0]
 80063f0:	2300      	movs	r3, #0
 80063f2:	68f8      	ldr	r0, [r7, #12]
 80063f4:	f000 fa26 	bl	8006844 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063f8:	69fa      	ldr	r2, [r7, #28]
 80063fa:	69b9      	ldr	r1, [r7, #24]
 80063fc:	68f8      	ldr	r0, [r7, #12]
 80063fe:	f000 f8b6 	bl	800656e <I2C_WaitOnTXISFlagUntilTimeout>
 8006402:	4603      	mov	r3, r0
 8006404:	2b00      	cmp	r3, #0
 8006406:	d001      	beq.n	800640c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	e02c      	b.n	8006466 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800640c:	88fb      	ldrh	r3, [r7, #6]
 800640e:	2b01      	cmp	r3, #1
 8006410:	d105      	bne.n	800641e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006412:	893b      	ldrh	r3, [r7, #8]
 8006414:	b2da      	uxtb	r2, r3
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	629a      	str	r2, [r3, #40]	@ 0x28
 800641c:	e015      	b.n	800644a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800641e:	893b      	ldrh	r3, [r7, #8]
 8006420:	0a1b      	lsrs	r3, r3, #8
 8006422:	b29b      	uxth	r3, r3
 8006424:	b2da      	uxtb	r2, r3
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800642c:	69fa      	ldr	r2, [r7, #28]
 800642e:	69b9      	ldr	r1, [r7, #24]
 8006430:	68f8      	ldr	r0, [r7, #12]
 8006432:	f000 f89c 	bl	800656e <I2C_WaitOnTXISFlagUntilTimeout>
 8006436:	4603      	mov	r3, r0
 8006438:	2b00      	cmp	r3, #0
 800643a:	d001      	beq.n	8006440 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	e012      	b.n	8006466 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006440:	893b      	ldrh	r3, [r7, #8]
 8006442:	b2da      	uxtb	r2, r3
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800644a:	69fb      	ldr	r3, [r7, #28]
 800644c:	9300      	str	r3, [sp, #0]
 800644e:	69bb      	ldr	r3, [r7, #24]
 8006450:	2200      	movs	r2, #0
 8006452:	2140      	movs	r1, #64	@ 0x40
 8006454:	68f8      	ldr	r0, [r7, #12]
 8006456:	f000 f831 	bl	80064bc <I2C_WaitOnFlagUntilTimeout>
 800645a:	4603      	mov	r3, r0
 800645c:	2b00      	cmp	r3, #0
 800645e:	d001      	beq.n	8006464 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006460:	2301      	movs	r3, #1
 8006462:	e000      	b.n	8006466 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006464:	2300      	movs	r3, #0
}
 8006466:	4618      	mov	r0, r3
 8006468:	3710      	adds	r7, #16
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
 800646e:	bf00      	nop
 8006470:	80002000 	.word	0x80002000

08006474 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006474:	b480      	push	{r7}
 8006476:	b083      	sub	sp, #12
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	699b      	ldr	r3, [r3, #24]
 8006482:	f003 0302 	and.w	r3, r3, #2
 8006486:	2b02      	cmp	r3, #2
 8006488:	d103      	bne.n	8006492 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	2200      	movs	r2, #0
 8006490:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	699b      	ldr	r3, [r3, #24]
 8006498:	f003 0301 	and.w	r3, r3, #1
 800649c:	2b01      	cmp	r3, #1
 800649e:	d007      	beq.n	80064b0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	699a      	ldr	r2, [r3, #24]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f042 0201 	orr.w	r2, r2, #1
 80064ae:	619a      	str	r2, [r3, #24]
  }
}
 80064b0:	bf00      	nop
 80064b2:	370c      	adds	r7, #12
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr

080064bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b084      	sub	sp, #16
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	603b      	str	r3, [r7, #0]
 80064c8:	4613      	mov	r3, r2
 80064ca:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80064cc:	e03b      	b.n	8006546 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80064ce:	69ba      	ldr	r2, [r7, #24]
 80064d0:	6839      	ldr	r1, [r7, #0]
 80064d2:	68f8      	ldr	r0, [r7, #12]
 80064d4:	f000 f8d6 	bl	8006684 <I2C_IsErrorOccurred>
 80064d8:	4603      	mov	r3, r0
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d001      	beq.n	80064e2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	e041      	b.n	8006566 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064e8:	d02d      	beq.n	8006546 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064ea:	f7fe fe6b 	bl	80051c4 <HAL_GetTick>
 80064ee:	4602      	mov	r2, r0
 80064f0:	69bb      	ldr	r3, [r7, #24]
 80064f2:	1ad3      	subs	r3, r2, r3
 80064f4:	683a      	ldr	r2, [r7, #0]
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d302      	bcc.n	8006500 <I2C_WaitOnFlagUntilTimeout+0x44>
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d122      	bne.n	8006546 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	699a      	ldr	r2, [r3, #24]
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	4013      	ands	r3, r2
 800650a:	68ba      	ldr	r2, [r7, #8]
 800650c:	429a      	cmp	r2, r3
 800650e:	bf0c      	ite	eq
 8006510:	2301      	moveq	r3, #1
 8006512:	2300      	movne	r3, #0
 8006514:	b2db      	uxtb	r3, r3
 8006516:	461a      	mov	r2, r3
 8006518:	79fb      	ldrb	r3, [r7, #7]
 800651a:	429a      	cmp	r2, r3
 800651c:	d113      	bne.n	8006546 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006522:	f043 0220 	orr.w	r2, r3, #32
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2220      	movs	r2, #32
 800652e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2200      	movs	r2, #0
 8006536:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2200      	movs	r2, #0
 800653e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	e00f      	b.n	8006566 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	699a      	ldr	r2, [r3, #24]
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	4013      	ands	r3, r2
 8006550:	68ba      	ldr	r2, [r7, #8]
 8006552:	429a      	cmp	r2, r3
 8006554:	bf0c      	ite	eq
 8006556:	2301      	moveq	r3, #1
 8006558:	2300      	movne	r3, #0
 800655a:	b2db      	uxtb	r3, r3
 800655c:	461a      	mov	r2, r3
 800655e:	79fb      	ldrb	r3, [r7, #7]
 8006560:	429a      	cmp	r2, r3
 8006562:	d0b4      	beq.n	80064ce <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006564:	2300      	movs	r3, #0
}
 8006566:	4618      	mov	r0, r3
 8006568:	3710      	adds	r7, #16
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}

0800656e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800656e:	b580      	push	{r7, lr}
 8006570:	b084      	sub	sp, #16
 8006572:	af00      	add	r7, sp, #0
 8006574:	60f8      	str	r0, [r7, #12]
 8006576:	60b9      	str	r1, [r7, #8]
 8006578:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800657a:	e033      	b.n	80065e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	68b9      	ldr	r1, [r7, #8]
 8006580:	68f8      	ldr	r0, [r7, #12]
 8006582:	f000 f87f 	bl	8006684 <I2C_IsErrorOccurred>
 8006586:	4603      	mov	r3, r0
 8006588:	2b00      	cmp	r3, #0
 800658a:	d001      	beq.n	8006590 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800658c:	2301      	movs	r3, #1
 800658e:	e031      	b.n	80065f4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006596:	d025      	beq.n	80065e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006598:	f7fe fe14 	bl	80051c4 <HAL_GetTick>
 800659c:	4602      	mov	r2, r0
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	1ad3      	subs	r3, r2, r3
 80065a2:	68ba      	ldr	r2, [r7, #8]
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d302      	bcc.n	80065ae <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d11a      	bne.n	80065e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	699b      	ldr	r3, [r3, #24]
 80065b4:	f003 0302 	and.w	r3, r3, #2
 80065b8:	2b02      	cmp	r3, #2
 80065ba:	d013      	beq.n	80065e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065c0:	f043 0220 	orr.w	r2, r3, #32
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2220      	movs	r2, #32
 80065cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2200      	movs	r2, #0
 80065d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2200      	movs	r2, #0
 80065dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80065e0:	2301      	movs	r3, #1
 80065e2:	e007      	b.n	80065f4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	699b      	ldr	r3, [r3, #24]
 80065ea:	f003 0302 	and.w	r3, r3, #2
 80065ee:	2b02      	cmp	r3, #2
 80065f0:	d1c4      	bne.n	800657c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80065f2:	2300      	movs	r3, #0
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3710      	adds	r7, #16
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}

080065fc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b084      	sub	sp, #16
 8006600:	af00      	add	r7, sp, #0
 8006602:	60f8      	str	r0, [r7, #12]
 8006604:	60b9      	str	r1, [r7, #8]
 8006606:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006608:	e02f      	b.n	800666a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800660a:	687a      	ldr	r2, [r7, #4]
 800660c:	68b9      	ldr	r1, [r7, #8]
 800660e:	68f8      	ldr	r0, [r7, #12]
 8006610:	f000 f838 	bl	8006684 <I2C_IsErrorOccurred>
 8006614:	4603      	mov	r3, r0
 8006616:	2b00      	cmp	r3, #0
 8006618:	d001      	beq.n	800661e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800661a:	2301      	movs	r3, #1
 800661c:	e02d      	b.n	800667a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800661e:	f7fe fdd1 	bl	80051c4 <HAL_GetTick>
 8006622:	4602      	mov	r2, r0
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	1ad3      	subs	r3, r2, r3
 8006628:	68ba      	ldr	r2, [r7, #8]
 800662a:	429a      	cmp	r2, r3
 800662c:	d302      	bcc.n	8006634 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d11a      	bne.n	800666a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	699b      	ldr	r3, [r3, #24]
 800663a:	f003 0320 	and.w	r3, r3, #32
 800663e:	2b20      	cmp	r3, #32
 8006640:	d013      	beq.n	800666a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006646:	f043 0220 	orr.w	r2, r3, #32
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2220      	movs	r2, #32
 8006652:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2200      	movs	r2, #0
 800665a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2200      	movs	r2, #0
 8006662:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	e007      	b.n	800667a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	699b      	ldr	r3, [r3, #24]
 8006670:	f003 0320 	and.w	r3, r3, #32
 8006674:	2b20      	cmp	r3, #32
 8006676:	d1c8      	bne.n	800660a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006678:	2300      	movs	r3, #0
}
 800667a:	4618      	mov	r0, r3
 800667c:	3710      	adds	r7, #16
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}
	...

08006684 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b08a      	sub	sp, #40	@ 0x28
 8006688:	af00      	add	r7, sp, #0
 800668a:	60f8      	str	r0, [r7, #12]
 800668c:	60b9      	str	r1, [r7, #8]
 800668e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006690:	2300      	movs	r3, #0
 8006692:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	699b      	ldr	r3, [r3, #24]
 800669c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800669e:	2300      	movs	r3, #0
 80066a0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80066a6:	69bb      	ldr	r3, [r7, #24]
 80066a8:	f003 0310 	and.w	r3, r3, #16
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d068      	beq.n	8006782 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	2210      	movs	r2, #16
 80066b6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80066b8:	e049      	b.n	800674e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066c0:	d045      	beq.n	800674e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80066c2:	f7fe fd7f 	bl	80051c4 <HAL_GetTick>
 80066c6:	4602      	mov	r2, r0
 80066c8:	69fb      	ldr	r3, [r7, #28]
 80066ca:	1ad3      	subs	r3, r2, r3
 80066cc:	68ba      	ldr	r2, [r7, #8]
 80066ce:	429a      	cmp	r2, r3
 80066d0:	d302      	bcc.n	80066d8 <I2C_IsErrorOccurred+0x54>
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d13a      	bne.n	800674e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80066e2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80066ea:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	699b      	ldr	r3, [r3, #24]
 80066f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80066f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80066fa:	d121      	bne.n	8006740 <I2C_IsErrorOccurred+0xbc>
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006702:	d01d      	beq.n	8006740 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006704:	7cfb      	ldrb	r3, [r7, #19]
 8006706:	2b20      	cmp	r3, #32
 8006708:	d01a      	beq.n	8006740 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	685a      	ldr	r2, [r3, #4]
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006718:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800671a:	f7fe fd53 	bl	80051c4 <HAL_GetTick>
 800671e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006720:	e00e      	b.n	8006740 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006722:	f7fe fd4f 	bl	80051c4 <HAL_GetTick>
 8006726:	4602      	mov	r2, r0
 8006728:	69fb      	ldr	r3, [r7, #28]
 800672a:	1ad3      	subs	r3, r2, r3
 800672c:	2b19      	cmp	r3, #25
 800672e:	d907      	bls.n	8006740 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006730:	6a3b      	ldr	r3, [r7, #32]
 8006732:	f043 0320 	orr.w	r3, r3, #32
 8006736:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800673e:	e006      	b.n	800674e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	699b      	ldr	r3, [r3, #24]
 8006746:	f003 0320 	and.w	r3, r3, #32
 800674a:	2b20      	cmp	r3, #32
 800674c:	d1e9      	bne.n	8006722 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	699b      	ldr	r3, [r3, #24]
 8006754:	f003 0320 	and.w	r3, r3, #32
 8006758:	2b20      	cmp	r3, #32
 800675a:	d003      	beq.n	8006764 <I2C_IsErrorOccurred+0xe0>
 800675c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006760:	2b00      	cmp	r3, #0
 8006762:	d0aa      	beq.n	80066ba <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006764:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006768:	2b00      	cmp	r3, #0
 800676a:	d103      	bne.n	8006774 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	2220      	movs	r2, #32
 8006772:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006774:	6a3b      	ldr	r3, [r7, #32]
 8006776:	f043 0304 	orr.w	r3, r3, #4
 800677a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	699b      	ldr	r3, [r3, #24]
 8006788:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800678a:	69bb      	ldr	r3, [r7, #24]
 800678c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006790:	2b00      	cmp	r3, #0
 8006792:	d00b      	beq.n	80067ac <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006794:	6a3b      	ldr	r3, [r7, #32]
 8006796:	f043 0301 	orr.w	r3, r3, #1
 800679a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80067a4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80067ac:	69bb      	ldr	r3, [r7, #24]
 80067ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d00b      	beq.n	80067ce <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80067b6:	6a3b      	ldr	r3, [r7, #32]
 80067b8:	f043 0308 	orr.w	r3, r3, #8
 80067bc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80067c6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80067c8:	2301      	movs	r3, #1
 80067ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80067ce:	69bb      	ldr	r3, [r7, #24]
 80067d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d00b      	beq.n	80067f0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80067d8:	6a3b      	ldr	r3, [r7, #32]
 80067da:	f043 0302 	orr.w	r3, r3, #2
 80067de:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80067e8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
 80067ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80067f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d01c      	beq.n	8006832 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80067f8:	68f8      	ldr	r0, [r7, #12]
 80067fa:	f7ff fe3b 	bl	8006474 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	6859      	ldr	r1, [r3, #4]
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	4b0d      	ldr	r3, [pc, #52]	@ (8006840 <I2C_IsErrorOccurred+0x1bc>)
 800680a:	400b      	ands	r3, r1
 800680c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006812:	6a3b      	ldr	r3, [r7, #32]
 8006814:	431a      	orrs	r2, r3
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2220      	movs	r2, #32
 800681e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2200      	movs	r2, #0
 8006826:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2200      	movs	r2, #0
 800682e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8006832:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006836:	4618      	mov	r0, r3
 8006838:	3728      	adds	r7, #40	@ 0x28
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop
 8006840:	fe00e800 	.word	0xfe00e800

08006844 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006844:	b480      	push	{r7}
 8006846:	b087      	sub	sp, #28
 8006848:	af00      	add	r7, sp, #0
 800684a:	60f8      	str	r0, [r7, #12]
 800684c:	607b      	str	r3, [r7, #4]
 800684e:	460b      	mov	r3, r1
 8006850:	817b      	strh	r3, [r7, #10]
 8006852:	4613      	mov	r3, r2
 8006854:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006856:	897b      	ldrh	r3, [r7, #10]
 8006858:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800685c:	7a7b      	ldrb	r3, [r7, #9]
 800685e:	041b      	lsls	r3, r3, #16
 8006860:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006864:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800686a:	6a3b      	ldr	r3, [r7, #32]
 800686c:	4313      	orrs	r3, r2
 800686e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006872:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	685a      	ldr	r2, [r3, #4]
 800687a:	6a3b      	ldr	r3, [r7, #32]
 800687c:	0d5b      	lsrs	r3, r3, #21
 800687e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006882:	4b08      	ldr	r3, [pc, #32]	@ (80068a4 <I2C_TransferConfig+0x60>)
 8006884:	430b      	orrs	r3, r1
 8006886:	43db      	mvns	r3, r3
 8006888:	ea02 0103 	and.w	r1, r2, r3
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	697a      	ldr	r2, [r7, #20]
 8006892:	430a      	orrs	r2, r1
 8006894:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006896:	bf00      	nop
 8006898:	371c      	adds	r7, #28
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr
 80068a2:	bf00      	nop
 80068a4:	03ff63ff 	.word	0x03ff63ff

080068a8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b083      	sub	sp, #12
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
 80068b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	2b20      	cmp	r3, #32
 80068bc:	d138      	bne.n	8006930 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	d101      	bne.n	80068cc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80068c8:	2302      	movs	r3, #2
 80068ca:	e032      	b.n	8006932 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2201      	movs	r2, #1
 80068d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2224      	movs	r2, #36	@ 0x24
 80068d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f022 0201 	bic.w	r2, r2, #1
 80068ea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80068fa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	6819      	ldr	r1, [r3, #0]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	683a      	ldr	r2, [r7, #0]
 8006908:	430a      	orrs	r2, r1
 800690a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f042 0201 	orr.w	r2, r2, #1
 800691a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2220      	movs	r2, #32
 8006920:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800692c:	2300      	movs	r3, #0
 800692e:	e000      	b.n	8006932 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006930:	2302      	movs	r3, #2
  }
}
 8006932:	4618      	mov	r0, r3
 8006934:	370c      	adds	r7, #12
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr

0800693e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800693e:	b580      	push	{r7, lr}
 8006940:	b086      	sub	sp, #24
 8006942:	af02      	add	r7, sp, #8
 8006944:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d101      	bne.n	8006950 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800694c:	2301      	movs	r3, #1
 800694e:	e101      	b.n	8006b54 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8006956:	b2db      	uxtb	r3, r3
 8006958:	2b00      	cmp	r3, #0
 800695a:	d106      	bne.n	800696a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2200      	movs	r2, #0
 8006960:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f7fd fc0f 	bl	8004188 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2203      	movs	r2, #3
 800696e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2200      	movs	r2, #0
 8006976:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4618      	mov	r0, r3
 800697e:	f002 ff33 	bl	80097e8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6818      	ldr	r0, [r3, #0]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	7c1a      	ldrb	r2, [r3, #16]
 800698a:	f88d 2000 	strb.w	r2, [sp]
 800698e:	3304      	adds	r3, #4
 8006990:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006992:	f002 fefc 	bl	800978e <USB_CoreInit>
 8006996:	4603      	mov	r3, r0
 8006998:	2b00      	cmp	r3, #0
 800699a:	d005      	beq.n	80069a8 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2202      	movs	r2, #2
 80069a0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80069a4:	2301      	movs	r3, #1
 80069a6:	e0d5      	b.n	8006b54 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	2100      	movs	r1, #0
 80069ae:	4618      	mov	r0, r3
 80069b0:	f002 ff2b 	bl	800980a <USB_SetCurrentMode>
 80069b4:	4603      	mov	r3, r0
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d005      	beq.n	80069c6 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2202      	movs	r2, #2
 80069be:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80069c2:	2301      	movs	r3, #1
 80069c4:	e0c6      	b.n	8006b54 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80069c6:	2300      	movs	r3, #0
 80069c8:	73fb      	strb	r3, [r7, #15]
 80069ca:	e04a      	b.n	8006a62 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80069cc:	7bfa      	ldrb	r2, [r7, #15]
 80069ce:	6879      	ldr	r1, [r7, #4]
 80069d0:	4613      	mov	r3, r2
 80069d2:	00db      	lsls	r3, r3, #3
 80069d4:	4413      	add	r3, r2
 80069d6:	009b      	lsls	r3, r3, #2
 80069d8:	440b      	add	r3, r1
 80069da:	3315      	adds	r3, #21
 80069dc:	2201      	movs	r2, #1
 80069de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80069e0:	7bfa      	ldrb	r2, [r7, #15]
 80069e2:	6879      	ldr	r1, [r7, #4]
 80069e4:	4613      	mov	r3, r2
 80069e6:	00db      	lsls	r3, r3, #3
 80069e8:	4413      	add	r3, r2
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	440b      	add	r3, r1
 80069ee:	3314      	adds	r3, #20
 80069f0:	7bfa      	ldrb	r2, [r7, #15]
 80069f2:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80069f4:	7bfa      	ldrb	r2, [r7, #15]
 80069f6:	7bfb      	ldrb	r3, [r7, #15]
 80069f8:	b298      	uxth	r0, r3
 80069fa:	6879      	ldr	r1, [r7, #4]
 80069fc:	4613      	mov	r3, r2
 80069fe:	00db      	lsls	r3, r3, #3
 8006a00:	4413      	add	r3, r2
 8006a02:	009b      	lsls	r3, r3, #2
 8006a04:	440b      	add	r3, r1
 8006a06:	332e      	adds	r3, #46	@ 0x2e
 8006a08:	4602      	mov	r2, r0
 8006a0a:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006a0c:	7bfa      	ldrb	r2, [r7, #15]
 8006a0e:	6879      	ldr	r1, [r7, #4]
 8006a10:	4613      	mov	r3, r2
 8006a12:	00db      	lsls	r3, r3, #3
 8006a14:	4413      	add	r3, r2
 8006a16:	009b      	lsls	r3, r3, #2
 8006a18:	440b      	add	r3, r1
 8006a1a:	3318      	adds	r3, #24
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006a20:	7bfa      	ldrb	r2, [r7, #15]
 8006a22:	6879      	ldr	r1, [r7, #4]
 8006a24:	4613      	mov	r3, r2
 8006a26:	00db      	lsls	r3, r3, #3
 8006a28:	4413      	add	r3, r2
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	440b      	add	r3, r1
 8006a2e:	331c      	adds	r3, #28
 8006a30:	2200      	movs	r2, #0
 8006a32:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006a34:	7bfa      	ldrb	r2, [r7, #15]
 8006a36:	6879      	ldr	r1, [r7, #4]
 8006a38:	4613      	mov	r3, r2
 8006a3a:	00db      	lsls	r3, r3, #3
 8006a3c:	4413      	add	r3, r2
 8006a3e:	009b      	lsls	r3, r3, #2
 8006a40:	440b      	add	r3, r1
 8006a42:	3320      	adds	r3, #32
 8006a44:	2200      	movs	r2, #0
 8006a46:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006a48:	7bfa      	ldrb	r2, [r7, #15]
 8006a4a:	6879      	ldr	r1, [r7, #4]
 8006a4c:	4613      	mov	r3, r2
 8006a4e:	00db      	lsls	r3, r3, #3
 8006a50:	4413      	add	r3, r2
 8006a52:	009b      	lsls	r3, r3, #2
 8006a54:	440b      	add	r3, r1
 8006a56:	3324      	adds	r3, #36	@ 0x24
 8006a58:	2200      	movs	r2, #0
 8006a5a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006a5c:	7bfb      	ldrb	r3, [r7, #15]
 8006a5e:	3301      	adds	r3, #1
 8006a60:	73fb      	strb	r3, [r7, #15]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	791b      	ldrb	r3, [r3, #4]
 8006a66:	7bfa      	ldrb	r2, [r7, #15]
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d3af      	bcc.n	80069cc <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	73fb      	strb	r3, [r7, #15]
 8006a70:	e044      	b.n	8006afc <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006a72:	7bfa      	ldrb	r2, [r7, #15]
 8006a74:	6879      	ldr	r1, [r7, #4]
 8006a76:	4613      	mov	r3, r2
 8006a78:	00db      	lsls	r3, r3, #3
 8006a7a:	4413      	add	r3, r2
 8006a7c:	009b      	lsls	r3, r3, #2
 8006a7e:	440b      	add	r3, r1
 8006a80:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8006a84:	2200      	movs	r2, #0
 8006a86:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006a88:	7bfa      	ldrb	r2, [r7, #15]
 8006a8a:	6879      	ldr	r1, [r7, #4]
 8006a8c:	4613      	mov	r3, r2
 8006a8e:	00db      	lsls	r3, r3, #3
 8006a90:	4413      	add	r3, r2
 8006a92:	009b      	lsls	r3, r3, #2
 8006a94:	440b      	add	r3, r1
 8006a96:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8006a9a:	7bfa      	ldrb	r2, [r7, #15]
 8006a9c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006a9e:	7bfa      	ldrb	r2, [r7, #15]
 8006aa0:	6879      	ldr	r1, [r7, #4]
 8006aa2:	4613      	mov	r3, r2
 8006aa4:	00db      	lsls	r3, r3, #3
 8006aa6:	4413      	add	r3, r2
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	440b      	add	r3, r1
 8006aac:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006ab4:	7bfa      	ldrb	r2, [r7, #15]
 8006ab6:	6879      	ldr	r1, [r7, #4]
 8006ab8:	4613      	mov	r3, r2
 8006aba:	00db      	lsls	r3, r3, #3
 8006abc:	4413      	add	r3, r2
 8006abe:	009b      	lsls	r3, r3, #2
 8006ac0:	440b      	add	r3, r1
 8006ac2:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006aca:	7bfa      	ldrb	r2, [r7, #15]
 8006acc:	6879      	ldr	r1, [r7, #4]
 8006ace:	4613      	mov	r3, r2
 8006ad0:	00db      	lsls	r3, r3, #3
 8006ad2:	4413      	add	r3, r2
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	440b      	add	r3, r1
 8006ad8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006adc:	2200      	movs	r2, #0
 8006ade:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006ae0:	7bfa      	ldrb	r2, [r7, #15]
 8006ae2:	6879      	ldr	r1, [r7, #4]
 8006ae4:	4613      	mov	r3, r2
 8006ae6:	00db      	lsls	r3, r3, #3
 8006ae8:	4413      	add	r3, r2
 8006aea:	009b      	lsls	r3, r3, #2
 8006aec:	440b      	add	r3, r1
 8006aee:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006af2:	2200      	movs	r2, #0
 8006af4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006af6:	7bfb      	ldrb	r3, [r7, #15]
 8006af8:	3301      	adds	r3, #1
 8006afa:	73fb      	strb	r3, [r7, #15]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	791b      	ldrb	r3, [r3, #4]
 8006b00:	7bfa      	ldrb	r2, [r7, #15]
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d3b5      	bcc.n	8006a72 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6818      	ldr	r0, [r3, #0]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	7c1a      	ldrb	r2, [r3, #16]
 8006b0e:	f88d 2000 	strb.w	r2, [sp]
 8006b12:	3304      	adds	r3, #4
 8006b14:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006b16:	f002 fec5 	bl	80098a4 <USB_DevInit>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d005      	beq.n	8006b2c <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2202      	movs	r2, #2
 8006b24:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	e013      	b.n	8006b54 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2201      	movs	r2, #1
 8006b36:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	7b1b      	ldrb	r3, [r3, #12]
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	d102      	bne.n	8006b48 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f000 f80a 	bl	8006b5c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f003 f86a 	bl	8009c26 <USB_DevDisconnect>

  return HAL_OK;
 8006b52:	2300      	movs	r3, #0
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	3710      	adds	r7, #16
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}

08006b5c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b085      	sub	sp, #20
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	699b      	ldr	r3, [r3, #24]
 8006b7e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b8e:	f043 0303 	orr.w	r3, r3, #3
 8006b92:	68fa      	ldr	r2, [r7, #12]
 8006b94:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8006b96:	2300      	movs	r3, #0
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3714      	adds	r7, #20
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr

08006ba4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006ba8:	4b05      	ldr	r3, [pc, #20]	@ (8006bc0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a04      	ldr	r2, [pc, #16]	@ (8006bc0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006bae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006bb2:	6013      	str	r3, [r2, #0]
}
 8006bb4:	bf00      	nop
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbc:	4770      	bx	lr
 8006bbe:	bf00      	nop
 8006bc0:	40007000 	.word	0x40007000

08006bc4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006bc8:	4b04      	ldr	r3, [pc, #16]	@ (8006bdc <HAL_PWREx_GetVoltageRange+0x18>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr
 8006bda:	bf00      	nop
 8006bdc:	40007000 	.word	0x40007000

08006be0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b085      	sub	sp, #20
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006bee:	d130      	bne.n	8006c52 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006bf0:	4b23      	ldr	r3, [pc, #140]	@ (8006c80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006bf8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006bfc:	d038      	beq.n	8006c70 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006bfe:	4b20      	ldr	r3, [pc, #128]	@ (8006c80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006c06:	4a1e      	ldr	r2, [pc, #120]	@ (8006c80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006c08:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006c0c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006c0e:	4b1d      	ldr	r3, [pc, #116]	@ (8006c84 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	2232      	movs	r2, #50	@ 0x32
 8006c14:	fb02 f303 	mul.w	r3, r2, r3
 8006c18:	4a1b      	ldr	r2, [pc, #108]	@ (8006c88 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8006c1e:	0c9b      	lsrs	r3, r3, #18
 8006c20:	3301      	adds	r3, #1
 8006c22:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006c24:	e002      	b.n	8006c2c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	3b01      	subs	r3, #1
 8006c2a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006c2c:	4b14      	ldr	r3, [pc, #80]	@ (8006c80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006c2e:	695b      	ldr	r3, [r3, #20]
 8006c30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c38:	d102      	bne.n	8006c40 <HAL_PWREx_ControlVoltageScaling+0x60>
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d1f2      	bne.n	8006c26 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006c40:	4b0f      	ldr	r3, [pc, #60]	@ (8006c80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006c42:	695b      	ldr	r3, [r3, #20]
 8006c44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c4c:	d110      	bne.n	8006c70 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006c4e:	2303      	movs	r3, #3
 8006c50:	e00f      	b.n	8006c72 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006c52:	4b0b      	ldr	r3, [pc, #44]	@ (8006c80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006c5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c5e:	d007      	beq.n	8006c70 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006c60:	4b07      	ldr	r3, [pc, #28]	@ (8006c80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006c68:	4a05      	ldr	r2, [pc, #20]	@ (8006c80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006c6a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006c6e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006c70:	2300      	movs	r3, #0
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3714      	adds	r7, #20
 8006c76:	46bd      	mov	sp, r7
 8006c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7c:	4770      	bx	lr
 8006c7e:	bf00      	nop
 8006c80:	40007000 	.word	0x40007000
 8006c84:	20000510 	.word	0x20000510
 8006c88:	431bde83 	.word	0x431bde83

08006c8c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8006c90:	4b05      	ldr	r3, [pc, #20]	@ (8006ca8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	4a04      	ldr	r2, [pc, #16]	@ (8006ca8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8006c96:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006c9a:	6053      	str	r3, [r2, #4]
}
 8006c9c:	bf00      	nop
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr
 8006ca6:	bf00      	nop
 8006ca8:	40007000 	.word	0x40007000

08006cac <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b086      	sub	sp, #24
 8006cb0:	af02      	add	r7, sp, #8
 8006cb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006cb4:	f7fe fa86 	bl	80051c4 <HAL_GetTick>
 8006cb8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d101      	bne.n	8006cc4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	e063      	b.n	8006d8c <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8006cca:	b2db      	uxtb	r3, r3
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d10b      	bne.n	8006ce8 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f7fd f9b3 	bl	8004044 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8006cde:	f241 3188 	movw	r1, #5000	@ 0x1388
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f000 f858 	bl	8006d98 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	689b      	ldr	r3, [r3, #8]
 8006cf6:	3b01      	subs	r3, #1
 8006cf8:	021a      	lsls	r2, r3, #8
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	430a      	orrs	r2, r1
 8006d00:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d06:	9300      	str	r3, [sp, #0]
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	2120      	movs	r1, #32
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 f850 	bl	8006db4 <QSPI_WaitFlagStateUntilTimeout>
 8006d14:	4603      	mov	r3, r0
 8006d16:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006d18:	7afb      	ldrb	r3, [r7, #11]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d131      	bne.n	8006d82 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006d28:	f023 0310 	bic.w	r3, r3, #16
 8006d2c:	687a      	ldr	r2, [r7, #4]
 8006d2e:	6852      	ldr	r2, [r2, #4]
 8006d30:	0611      	lsls	r1, r2, #24
 8006d32:	687a      	ldr	r2, [r7, #4]
 8006d34:	68d2      	ldr	r2, [r2, #12]
 8006d36:	4311      	orrs	r1, r2
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	6812      	ldr	r2, [r2, #0]
 8006d3c:	430b      	orrs	r3, r1
 8006d3e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	685a      	ldr	r2, [r3, #4]
 8006d46:	4b13      	ldr	r3, [pc, #76]	@ (8006d94 <HAL_QSPI_Init+0xe8>)
 8006d48:	4013      	ands	r3, r2
 8006d4a:	687a      	ldr	r2, [r7, #4]
 8006d4c:	6912      	ldr	r2, [r2, #16]
 8006d4e:	0411      	lsls	r1, r2, #16
 8006d50:	687a      	ldr	r2, [r7, #4]
 8006d52:	6952      	ldr	r2, [r2, #20]
 8006d54:	4311      	orrs	r1, r2
 8006d56:	687a      	ldr	r2, [r7, #4]
 8006d58:	6992      	ldr	r2, [r2, #24]
 8006d5a:	4311      	orrs	r1, r2
 8006d5c:	687a      	ldr	r2, [r7, #4]
 8006d5e:	6812      	ldr	r2, [r2, #0]
 8006d60:	430b      	orrs	r3, r1
 8006d62:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f042 0201 	orr.w	r2, r2, #1
 8006d72:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2200      	movs	r2, #0
 8006d86:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 8006d8a:	7afb      	ldrb	r3, [r7, #11]
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3710      	adds	r7, #16
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}
 8006d94:	ffe0f8fe 	.word	0xffe0f8fe

08006d98 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b083      	sub	sp, #12
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	683a      	ldr	r2, [r7, #0]
 8006da6:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8006da8:	bf00      	nop
 8006daa:	370c      	adds	r7, #12
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr

08006db4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b084      	sub	sp, #16
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	60f8      	str	r0, [r7, #12]
 8006dbc:	60b9      	str	r1, [r7, #8]
 8006dbe:	603b      	str	r3, [r7, #0]
 8006dc0:	4613      	mov	r3, r2
 8006dc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006dc4:	e01a      	b.n	8006dfc <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dc6:	69bb      	ldr	r3, [r7, #24]
 8006dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dcc:	d016      	beq.n	8006dfc <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dce:	f7fe f9f9 	bl	80051c4 <HAL_GetTick>
 8006dd2:	4602      	mov	r2, r0
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	1ad3      	subs	r3, r2, r3
 8006dd8:	69ba      	ldr	r2, [r7, #24]
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d302      	bcc.n	8006de4 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8006dde:	69bb      	ldr	r3, [r7, #24]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d10b      	bne.n	8006dfc <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2204      	movs	r2, #4
 8006de8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006df0:	f043 0201 	orr.w	r2, r3, #1
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	e00e      	b.n	8006e1a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	689a      	ldr	r2, [r3, #8]
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	4013      	ands	r3, r2
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	bf14      	ite	ne
 8006e0a:	2301      	movne	r3, #1
 8006e0c:	2300      	moveq	r3, #0
 8006e0e:	b2db      	uxtb	r3, r3
 8006e10:	461a      	mov	r2, r3
 8006e12:	79fb      	ldrb	r3, [r7, #7]
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d1d6      	bne.n	8006dc6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006e18:	2300      	movs	r3, #0
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3710      	adds	r7, #16
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}
	...

08006e24 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b088      	sub	sp, #32
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d101      	bne.n	8006e36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006e32:	2301      	movs	r3, #1
 8006e34:	e3ca      	b.n	80075cc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e36:	4b97      	ldr	r3, [pc, #604]	@ (8007094 <HAL_RCC_OscConfig+0x270>)
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	f003 030c 	and.w	r3, r3, #12
 8006e3e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006e40:	4b94      	ldr	r3, [pc, #592]	@ (8007094 <HAL_RCC_OscConfig+0x270>)
 8006e42:	68db      	ldr	r3, [r3, #12]
 8006e44:	f003 0303 	and.w	r3, r3, #3
 8006e48:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f003 0310 	and.w	r3, r3, #16
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	f000 80e4 	beq.w	8007020 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006e58:	69bb      	ldr	r3, [r7, #24]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d007      	beq.n	8006e6e <HAL_RCC_OscConfig+0x4a>
 8006e5e:	69bb      	ldr	r3, [r7, #24]
 8006e60:	2b0c      	cmp	r3, #12
 8006e62:	f040 808b 	bne.w	8006f7c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	f040 8087 	bne.w	8006f7c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006e6e:	4b89      	ldr	r3, [pc, #548]	@ (8007094 <HAL_RCC_OscConfig+0x270>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f003 0302 	and.w	r3, r3, #2
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d005      	beq.n	8006e86 <HAL_RCC_OscConfig+0x62>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	699b      	ldr	r3, [r3, #24]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d101      	bne.n	8006e86 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8006e82:	2301      	movs	r3, #1
 8006e84:	e3a2      	b.n	80075cc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6a1a      	ldr	r2, [r3, #32]
 8006e8a:	4b82      	ldr	r3, [pc, #520]	@ (8007094 <HAL_RCC_OscConfig+0x270>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f003 0308 	and.w	r3, r3, #8
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d004      	beq.n	8006ea0 <HAL_RCC_OscConfig+0x7c>
 8006e96:	4b7f      	ldr	r3, [pc, #508]	@ (8007094 <HAL_RCC_OscConfig+0x270>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006e9e:	e005      	b.n	8006eac <HAL_RCC_OscConfig+0x88>
 8006ea0:	4b7c      	ldr	r3, [pc, #496]	@ (8007094 <HAL_RCC_OscConfig+0x270>)
 8006ea2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ea6:	091b      	lsrs	r3, r3, #4
 8006ea8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d223      	bcs.n	8006ef8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6a1b      	ldr	r3, [r3, #32]
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f000 fd55 	bl	8007964 <RCC_SetFlashLatencyFromMSIRange>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d001      	beq.n	8006ec4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	e383      	b.n	80075cc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006ec4:	4b73      	ldr	r3, [pc, #460]	@ (8007094 <HAL_RCC_OscConfig+0x270>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a72      	ldr	r2, [pc, #456]	@ (8007094 <HAL_RCC_OscConfig+0x270>)
 8006eca:	f043 0308 	orr.w	r3, r3, #8
 8006ece:	6013      	str	r3, [r2, #0]
 8006ed0:	4b70      	ldr	r3, [pc, #448]	@ (8007094 <HAL_RCC_OscConfig+0x270>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6a1b      	ldr	r3, [r3, #32]
 8006edc:	496d      	ldr	r1, [pc, #436]	@ (8007094 <HAL_RCC_OscConfig+0x270>)
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006ee2:	4b6c      	ldr	r3, [pc, #432]	@ (8007094 <HAL_RCC_OscConfig+0x270>)
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	69db      	ldr	r3, [r3, #28]
 8006eee:	021b      	lsls	r3, r3, #8
 8006ef0:	4968      	ldr	r1, [pc, #416]	@ (8007094 <HAL_RCC_OscConfig+0x270>)
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	604b      	str	r3, [r1, #4]
 8006ef6:	e025      	b.n	8006f44 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006ef8:	4b66      	ldr	r3, [pc, #408]	@ (8007094 <HAL_RCC_OscConfig+0x270>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a65      	ldr	r2, [pc, #404]	@ (8007094 <HAL_RCC_OscConfig+0x270>)
 8006efe:	f043 0308 	orr.w	r3, r3, #8
 8006f02:	6013      	str	r3, [r2, #0]
 8006f04:	4b63      	ldr	r3, [pc, #396]	@ (8007094 <HAL_RCC_OscConfig+0x270>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6a1b      	ldr	r3, [r3, #32]
 8006f10:	4960      	ldr	r1, [pc, #384]	@ (8007094 <HAL_RCC_OscConfig+0x270>)
 8006f12:	4313      	orrs	r3, r2
 8006f14:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006f16:	4b5f      	ldr	r3, [pc, #380]	@ (8007094 <HAL_RCC_OscConfig+0x270>)
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	69db      	ldr	r3, [r3, #28]
 8006f22:	021b      	lsls	r3, r3, #8
 8006f24:	495b      	ldr	r1, [pc, #364]	@ (8007094 <HAL_RCC_OscConfig+0x270>)
 8006f26:	4313      	orrs	r3, r2
 8006f28:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006f2a:	69bb      	ldr	r3, [r7, #24]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d109      	bne.n	8006f44 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6a1b      	ldr	r3, [r3, #32]
 8006f34:	4618      	mov	r0, r3
 8006f36:	f000 fd15 	bl	8007964 <RCC_SetFlashLatencyFromMSIRange>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d001      	beq.n	8006f44 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8006f40:	2301      	movs	r3, #1
 8006f42:	e343      	b.n	80075cc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006f44:	f000 fc4a 	bl	80077dc <HAL_RCC_GetSysClockFreq>
 8006f48:	4602      	mov	r2, r0
 8006f4a:	4b52      	ldr	r3, [pc, #328]	@ (8007094 <HAL_RCC_OscConfig+0x270>)
 8006f4c:	689b      	ldr	r3, [r3, #8]
 8006f4e:	091b      	lsrs	r3, r3, #4
 8006f50:	f003 030f 	and.w	r3, r3, #15
 8006f54:	4950      	ldr	r1, [pc, #320]	@ (8007098 <HAL_RCC_OscConfig+0x274>)
 8006f56:	5ccb      	ldrb	r3, [r1, r3]
 8006f58:	f003 031f 	and.w	r3, r3, #31
 8006f5c:	fa22 f303 	lsr.w	r3, r2, r3
 8006f60:	4a4e      	ldr	r2, [pc, #312]	@ (800709c <HAL_RCC_OscConfig+0x278>)
 8006f62:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006f64:	4b4e      	ldr	r3, [pc, #312]	@ (80070a0 <HAL_RCC_OscConfig+0x27c>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f7fe f8db 	bl	8005124 <HAL_InitTick>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006f72:	7bfb      	ldrb	r3, [r7, #15]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d052      	beq.n	800701e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8006f78:	7bfb      	ldrb	r3, [r7, #15]
 8006f7a:	e327      	b.n	80075cc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	699b      	ldr	r3, [r3, #24]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d032      	beq.n	8006fea <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006f84:	4b43      	ldr	r3, [pc, #268]	@ (8007094 <HAL_RCC_OscConfig+0x270>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a42      	ldr	r2, [pc, #264]	@ (8007094 <HAL_RCC_OscConfig+0x270>)
 8006f8a:	f043 0301 	orr.w	r3, r3, #1
 8006f8e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006f90:	f7fe f918 	bl	80051c4 <HAL_GetTick>
 8006f94:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006f96:	e008      	b.n	8006faa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006f98:	f7fe f914 	bl	80051c4 <HAL_GetTick>
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	1ad3      	subs	r3, r2, r3
 8006fa2:	2b02      	cmp	r3, #2
 8006fa4:	d901      	bls.n	8006faa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8006fa6:	2303      	movs	r3, #3
 8006fa8:	e310      	b.n	80075cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006faa:	4b3a      	ldr	r3, [pc, #232]	@ (8007094 <HAL_RCC_OscConfig+0x270>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f003 0302 	and.w	r3, r3, #2
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d0f0      	beq.n	8006f98 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006fb6:	4b37      	ldr	r3, [pc, #220]	@ (8007094 <HAL_RCC_OscConfig+0x270>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a36      	ldr	r2, [pc, #216]	@ (8007094 <HAL_RCC_OscConfig+0x270>)
 8006fbc:	f043 0308 	orr.w	r3, r3, #8
 8006fc0:	6013      	str	r3, [r2, #0]
 8006fc2:	4b34      	ldr	r3, [pc, #208]	@ (8007094 <HAL_RCC_OscConfig+0x270>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6a1b      	ldr	r3, [r3, #32]
 8006fce:	4931      	ldr	r1, [pc, #196]	@ (8007094 <HAL_RCC_OscConfig+0x270>)
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006fd4:	4b2f      	ldr	r3, [pc, #188]	@ (8007094 <HAL_RCC_OscConfig+0x270>)
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	69db      	ldr	r3, [r3, #28]
 8006fe0:	021b      	lsls	r3, r3, #8
 8006fe2:	492c      	ldr	r1, [pc, #176]	@ (8007094 <HAL_RCC_OscConfig+0x270>)
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	604b      	str	r3, [r1, #4]
 8006fe8:	e01a      	b.n	8007020 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006fea:	4b2a      	ldr	r3, [pc, #168]	@ (8007094 <HAL_RCC_OscConfig+0x270>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a29      	ldr	r2, [pc, #164]	@ (8007094 <HAL_RCC_OscConfig+0x270>)
 8006ff0:	f023 0301 	bic.w	r3, r3, #1
 8006ff4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006ff6:	f7fe f8e5 	bl	80051c4 <HAL_GetTick>
 8006ffa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006ffc:	e008      	b.n	8007010 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006ffe:	f7fe f8e1 	bl	80051c4 <HAL_GetTick>
 8007002:	4602      	mov	r2, r0
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	1ad3      	subs	r3, r2, r3
 8007008:	2b02      	cmp	r3, #2
 800700a:	d901      	bls.n	8007010 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800700c:	2303      	movs	r3, #3
 800700e:	e2dd      	b.n	80075cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007010:	4b20      	ldr	r3, [pc, #128]	@ (8007094 <HAL_RCC_OscConfig+0x270>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f003 0302 	and.w	r3, r3, #2
 8007018:	2b00      	cmp	r3, #0
 800701a:	d1f0      	bne.n	8006ffe <HAL_RCC_OscConfig+0x1da>
 800701c:	e000      	b.n	8007020 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800701e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f003 0301 	and.w	r3, r3, #1
 8007028:	2b00      	cmp	r3, #0
 800702a:	d074      	beq.n	8007116 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800702c:	69bb      	ldr	r3, [r7, #24]
 800702e:	2b08      	cmp	r3, #8
 8007030:	d005      	beq.n	800703e <HAL_RCC_OscConfig+0x21a>
 8007032:	69bb      	ldr	r3, [r7, #24]
 8007034:	2b0c      	cmp	r3, #12
 8007036:	d10e      	bne.n	8007056 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	2b03      	cmp	r3, #3
 800703c:	d10b      	bne.n	8007056 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800703e:	4b15      	ldr	r3, [pc, #84]	@ (8007094 <HAL_RCC_OscConfig+0x270>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007046:	2b00      	cmp	r3, #0
 8007048:	d064      	beq.n	8007114 <HAL_RCC_OscConfig+0x2f0>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d160      	bne.n	8007114 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8007052:	2301      	movs	r3, #1
 8007054:	e2ba      	b.n	80075cc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800705e:	d106      	bne.n	800706e <HAL_RCC_OscConfig+0x24a>
 8007060:	4b0c      	ldr	r3, [pc, #48]	@ (8007094 <HAL_RCC_OscConfig+0x270>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a0b      	ldr	r2, [pc, #44]	@ (8007094 <HAL_RCC_OscConfig+0x270>)
 8007066:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800706a:	6013      	str	r3, [r2, #0]
 800706c:	e026      	b.n	80070bc <HAL_RCC_OscConfig+0x298>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007076:	d115      	bne.n	80070a4 <HAL_RCC_OscConfig+0x280>
 8007078:	4b06      	ldr	r3, [pc, #24]	@ (8007094 <HAL_RCC_OscConfig+0x270>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a05      	ldr	r2, [pc, #20]	@ (8007094 <HAL_RCC_OscConfig+0x270>)
 800707e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007082:	6013      	str	r3, [r2, #0]
 8007084:	4b03      	ldr	r3, [pc, #12]	@ (8007094 <HAL_RCC_OscConfig+0x270>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a02      	ldr	r2, [pc, #8]	@ (8007094 <HAL_RCC_OscConfig+0x270>)
 800708a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800708e:	6013      	str	r3, [r2, #0]
 8007090:	e014      	b.n	80070bc <HAL_RCC_OscConfig+0x298>
 8007092:	bf00      	nop
 8007094:	40021000 	.word	0x40021000
 8007098:	0801268c 	.word	0x0801268c
 800709c:	20000510 	.word	0x20000510
 80070a0:	2000055c 	.word	0x2000055c
 80070a4:	4ba0      	ldr	r3, [pc, #640]	@ (8007328 <HAL_RCC_OscConfig+0x504>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a9f      	ldr	r2, [pc, #636]	@ (8007328 <HAL_RCC_OscConfig+0x504>)
 80070aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80070ae:	6013      	str	r3, [r2, #0]
 80070b0:	4b9d      	ldr	r3, [pc, #628]	@ (8007328 <HAL_RCC_OscConfig+0x504>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a9c      	ldr	r2, [pc, #624]	@ (8007328 <HAL_RCC_OscConfig+0x504>)
 80070b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80070ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d013      	beq.n	80070ec <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070c4:	f7fe f87e 	bl	80051c4 <HAL_GetTick>
 80070c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80070ca:	e008      	b.n	80070de <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80070cc:	f7fe f87a 	bl	80051c4 <HAL_GetTick>
 80070d0:	4602      	mov	r2, r0
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	1ad3      	subs	r3, r2, r3
 80070d6:	2b64      	cmp	r3, #100	@ 0x64
 80070d8:	d901      	bls.n	80070de <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80070da:	2303      	movs	r3, #3
 80070dc:	e276      	b.n	80075cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80070de:	4b92      	ldr	r3, [pc, #584]	@ (8007328 <HAL_RCC_OscConfig+0x504>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d0f0      	beq.n	80070cc <HAL_RCC_OscConfig+0x2a8>
 80070ea:	e014      	b.n	8007116 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070ec:	f7fe f86a 	bl	80051c4 <HAL_GetTick>
 80070f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80070f2:	e008      	b.n	8007106 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80070f4:	f7fe f866 	bl	80051c4 <HAL_GetTick>
 80070f8:	4602      	mov	r2, r0
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	1ad3      	subs	r3, r2, r3
 80070fe:	2b64      	cmp	r3, #100	@ 0x64
 8007100:	d901      	bls.n	8007106 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007102:	2303      	movs	r3, #3
 8007104:	e262      	b.n	80075cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007106:	4b88      	ldr	r3, [pc, #544]	@ (8007328 <HAL_RCC_OscConfig+0x504>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800710e:	2b00      	cmp	r3, #0
 8007110:	d1f0      	bne.n	80070f4 <HAL_RCC_OscConfig+0x2d0>
 8007112:	e000      	b.n	8007116 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007114:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f003 0302 	and.w	r3, r3, #2
 800711e:	2b00      	cmp	r3, #0
 8007120:	d060      	beq.n	80071e4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8007122:	69bb      	ldr	r3, [r7, #24]
 8007124:	2b04      	cmp	r3, #4
 8007126:	d005      	beq.n	8007134 <HAL_RCC_OscConfig+0x310>
 8007128:	69bb      	ldr	r3, [r7, #24]
 800712a:	2b0c      	cmp	r3, #12
 800712c:	d119      	bne.n	8007162 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	2b02      	cmp	r3, #2
 8007132:	d116      	bne.n	8007162 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007134:	4b7c      	ldr	r3, [pc, #496]	@ (8007328 <HAL_RCC_OscConfig+0x504>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800713c:	2b00      	cmp	r3, #0
 800713e:	d005      	beq.n	800714c <HAL_RCC_OscConfig+0x328>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	68db      	ldr	r3, [r3, #12]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d101      	bne.n	800714c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8007148:	2301      	movs	r3, #1
 800714a:	e23f      	b.n	80075cc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800714c:	4b76      	ldr	r3, [pc, #472]	@ (8007328 <HAL_RCC_OscConfig+0x504>)
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	691b      	ldr	r3, [r3, #16]
 8007158:	061b      	lsls	r3, r3, #24
 800715a:	4973      	ldr	r1, [pc, #460]	@ (8007328 <HAL_RCC_OscConfig+0x504>)
 800715c:	4313      	orrs	r3, r2
 800715e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007160:	e040      	b.n	80071e4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	68db      	ldr	r3, [r3, #12]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d023      	beq.n	80071b2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800716a:	4b6f      	ldr	r3, [pc, #444]	@ (8007328 <HAL_RCC_OscConfig+0x504>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a6e      	ldr	r2, [pc, #440]	@ (8007328 <HAL_RCC_OscConfig+0x504>)
 8007170:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007174:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007176:	f7fe f825 	bl	80051c4 <HAL_GetTick>
 800717a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800717c:	e008      	b.n	8007190 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800717e:	f7fe f821 	bl	80051c4 <HAL_GetTick>
 8007182:	4602      	mov	r2, r0
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	1ad3      	subs	r3, r2, r3
 8007188:	2b02      	cmp	r3, #2
 800718a:	d901      	bls.n	8007190 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800718c:	2303      	movs	r3, #3
 800718e:	e21d      	b.n	80075cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007190:	4b65      	ldr	r3, [pc, #404]	@ (8007328 <HAL_RCC_OscConfig+0x504>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007198:	2b00      	cmp	r3, #0
 800719a:	d0f0      	beq.n	800717e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800719c:	4b62      	ldr	r3, [pc, #392]	@ (8007328 <HAL_RCC_OscConfig+0x504>)
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	691b      	ldr	r3, [r3, #16]
 80071a8:	061b      	lsls	r3, r3, #24
 80071aa:	495f      	ldr	r1, [pc, #380]	@ (8007328 <HAL_RCC_OscConfig+0x504>)
 80071ac:	4313      	orrs	r3, r2
 80071ae:	604b      	str	r3, [r1, #4]
 80071b0:	e018      	b.n	80071e4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80071b2:	4b5d      	ldr	r3, [pc, #372]	@ (8007328 <HAL_RCC_OscConfig+0x504>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a5c      	ldr	r2, [pc, #368]	@ (8007328 <HAL_RCC_OscConfig+0x504>)
 80071b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80071bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071be:	f7fe f801 	bl	80051c4 <HAL_GetTick>
 80071c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80071c4:	e008      	b.n	80071d8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80071c6:	f7fd fffd 	bl	80051c4 <HAL_GetTick>
 80071ca:	4602      	mov	r2, r0
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	1ad3      	subs	r3, r2, r3
 80071d0:	2b02      	cmp	r3, #2
 80071d2:	d901      	bls.n	80071d8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80071d4:	2303      	movs	r3, #3
 80071d6:	e1f9      	b.n	80075cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80071d8:	4b53      	ldr	r3, [pc, #332]	@ (8007328 <HAL_RCC_OscConfig+0x504>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d1f0      	bne.n	80071c6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f003 0308 	and.w	r3, r3, #8
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d03c      	beq.n	800726a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	695b      	ldr	r3, [r3, #20]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d01c      	beq.n	8007232 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80071f8:	4b4b      	ldr	r3, [pc, #300]	@ (8007328 <HAL_RCC_OscConfig+0x504>)
 80071fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80071fe:	4a4a      	ldr	r2, [pc, #296]	@ (8007328 <HAL_RCC_OscConfig+0x504>)
 8007200:	f043 0301 	orr.w	r3, r3, #1
 8007204:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007208:	f7fd ffdc 	bl	80051c4 <HAL_GetTick>
 800720c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800720e:	e008      	b.n	8007222 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007210:	f7fd ffd8 	bl	80051c4 <HAL_GetTick>
 8007214:	4602      	mov	r2, r0
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	1ad3      	subs	r3, r2, r3
 800721a:	2b02      	cmp	r3, #2
 800721c:	d901      	bls.n	8007222 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800721e:	2303      	movs	r3, #3
 8007220:	e1d4      	b.n	80075cc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007222:	4b41      	ldr	r3, [pc, #260]	@ (8007328 <HAL_RCC_OscConfig+0x504>)
 8007224:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007228:	f003 0302 	and.w	r3, r3, #2
 800722c:	2b00      	cmp	r3, #0
 800722e:	d0ef      	beq.n	8007210 <HAL_RCC_OscConfig+0x3ec>
 8007230:	e01b      	b.n	800726a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007232:	4b3d      	ldr	r3, [pc, #244]	@ (8007328 <HAL_RCC_OscConfig+0x504>)
 8007234:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007238:	4a3b      	ldr	r2, [pc, #236]	@ (8007328 <HAL_RCC_OscConfig+0x504>)
 800723a:	f023 0301 	bic.w	r3, r3, #1
 800723e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007242:	f7fd ffbf 	bl	80051c4 <HAL_GetTick>
 8007246:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007248:	e008      	b.n	800725c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800724a:	f7fd ffbb 	bl	80051c4 <HAL_GetTick>
 800724e:	4602      	mov	r2, r0
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	1ad3      	subs	r3, r2, r3
 8007254:	2b02      	cmp	r3, #2
 8007256:	d901      	bls.n	800725c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8007258:	2303      	movs	r3, #3
 800725a:	e1b7      	b.n	80075cc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800725c:	4b32      	ldr	r3, [pc, #200]	@ (8007328 <HAL_RCC_OscConfig+0x504>)
 800725e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007262:	f003 0302 	and.w	r3, r3, #2
 8007266:	2b00      	cmp	r3, #0
 8007268:	d1ef      	bne.n	800724a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f003 0304 	and.w	r3, r3, #4
 8007272:	2b00      	cmp	r3, #0
 8007274:	f000 80a6 	beq.w	80073c4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007278:	2300      	movs	r3, #0
 800727a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800727c:	4b2a      	ldr	r3, [pc, #168]	@ (8007328 <HAL_RCC_OscConfig+0x504>)
 800727e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007280:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007284:	2b00      	cmp	r3, #0
 8007286:	d10d      	bne.n	80072a4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007288:	4b27      	ldr	r3, [pc, #156]	@ (8007328 <HAL_RCC_OscConfig+0x504>)
 800728a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800728c:	4a26      	ldr	r2, [pc, #152]	@ (8007328 <HAL_RCC_OscConfig+0x504>)
 800728e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007292:	6593      	str	r3, [r2, #88]	@ 0x58
 8007294:	4b24      	ldr	r3, [pc, #144]	@ (8007328 <HAL_RCC_OscConfig+0x504>)
 8007296:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007298:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800729c:	60bb      	str	r3, [r7, #8]
 800729e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80072a0:	2301      	movs	r3, #1
 80072a2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80072a4:	4b21      	ldr	r3, [pc, #132]	@ (800732c <HAL_RCC_OscConfig+0x508>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d118      	bne.n	80072e2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80072b0:	4b1e      	ldr	r3, [pc, #120]	@ (800732c <HAL_RCC_OscConfig+0x508>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a1d      	ldr	r2, [pc, #116]	@ (800732c <HAL_RCC_OscConfig+0x508>)
 80072b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80072ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80072bc:	f7fd ff82 	bl	80051c4 <HAL_GetTick>
 80072c0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80072c2:	e008      	b.n	80072d6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072c4:	f7fd ff7e 	bl	80051c4 <HAL_GetTick>
 80072c8:	4602      	mov	r2, r0
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	1ad3      	subs	r3, r2, r3
 80072ce:	2b02      	cmp	r3, #2
 80072d0:	d901      	bls.n	80072d6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80072d2:	2303      	movs	r3, #3
 80072d4:	e17a      	b.n	80075cc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80072d6:	4b15      	ldr	r3, [pc, #84]	@ (800732c <HAL_RCC_OscConfig+0x508>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d0f0      	beq.n	80072c4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	689b      	ldr	r3, [r3, #8]
 80072e6:	2b01      	cmp	r3, #1
 80072e8:	d108      	bne.n	80072fc <HAL_RCC_OscConfig+0x4d8>
 80072ea:	4b0f      	ldr	r3, [pc, #60]	@ (8007328 <HAL_RCC_OscConfig+0x504>)
 80072ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072f0:	4a0d      	ldr	r2, [pc, #52]	@ (8007328 <HAL_RCC_OscConfig+0x504>)
 80072f2:	f043 0301 	orr.w	r3, r3, #1
 80072f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80072fa:	e029      	b.n	8007350 <HAL_RCC_OscConfig+0x52c>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	2b05      	cmp	r3, #5
 8007302:	d115      	bne.n	8007330 <HAL_RCC_OscConfig+0x50c>
 8007304:	4b08      	ldr	r3, [pc, #32]	@ (8007328 <HAL_RCC_OscConfig+0x504>)
 8007306:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800730a:	4a07      	ldr	r2, [pc, #28]	@ (8007328 <HAL_RCC_OscConfig+0x504>)
 800730c:	f043 0304 	orr.w	r3, r3, #4
 8007310:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007314:	4b04      	ldr	r3, [pc, #16]	@ (8007328 <HAL_RCC_OscConfig+0x504>)
 8007316:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800731a:	4a03      	ldr	r2, [pc, #12]	@ (8007328 <HAL_RCC_OscConfig+0x504>)
 800731c:	f043 0301 	orr.w	r3, r3, #1
 8007320:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007324:	e014      	b.n	8007350 <HAL_RCC_OscConfig+0x52c>
 8007326:	bf00      	nop
 8007328:	40021000 	.word	0x40021000
 800732c:	40007000 	.word	0x40007000
 8007330:	4b9c      	ldr	r3, [pc, #624]	@ (80075a4 <HAL_RCC_OscConfig+0x780>)
 8007332:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007336:	4a9b      	ldr	r2, [pc, #620]	@ (80075a4 <HAL_RCC_OscConfig+0x780>)
 8007338:	f023 0301 	bic.w	r3, r3, #1
 800733c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007340:	4b98      	ldr	r3, [pc, #608]	@ (80075a4 <HAL_RCC_OscConfig+0x780>)
 8007342:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007346:	4a97      	ldr	r2, [pc, #604]	@ (80075a4 <HAL_RCC_OscConfig+0x780>)
 8007348:	f023 0304 	bic.w	r3, r3, #4
 800734c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	689b      	ldr	r3, [r3, #8]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d016      	beq.n	8007386 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007358:	f7fd ff34 	bl	80051c4 <HAL_GetTick>
 800735c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800735e:	e00a      	b.n	8007376 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007360:	f7fd ff30 	bl	80051c4 <HAL_GetTick>
 8007364:	4602      	mov	r2, r0
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	1ad3      	subs	r3, r2, r3
 800736a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800736e:	4293      	cmp	r3, r2
 8007370:	d901      	bls.n	8007376 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8007372:	2303      	movs	r3, #3
 8007374:	e12a      	b.n	80075cc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007376:	4b8b      	ldr	r3, [pc, #556]	@ (80075a4 <HAL_RCC_OscConfig+0x780>)
 8007378:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800737c:	f003 0302 	and.w	r3, r3, #2
 8007380:	2b00      	cmp	r3, #0
 8007382:	d0ed      	beq.n	8007360 <HAL_RCC_OscConfig+0x53c>
 8007384:	e015      	b.n	80073b2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007386:	f7fd ff1d 	bl	80051c4 <HAL_GetTick>
 800738a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800738c:	e00a      	b.n	80073a4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800738e:	f7fd ff19 	bl	80051c4 <HAL_GetTick>
 8007392:	4602      	mov	r2, r0
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	1ad3      	subs	r3, r2, r3
 8007398:	f241 3288 	movw	r2, #5000	@ 0x1388
 800739c:	4293      	cmp	r3, r2
 800739e:	d901      	bls.n	80073a4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80073a0:	2303      	movs	r3, #3
 80073a2:	e113      	b.n	80075cc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80073a4:	4b7f      	ldr	r3, [pc, #508]	@ (80075a4 <HAL_RCC_OscConfig+0x780>)
 80073a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073aa:	f003 0302 	and.w	r3, r3, #2
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d1ed      	bne.n	800738e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80073b2:	7ffb      	ldrb	r3, [r7, #31]
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	d105      	bne.n	80073c4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80073b8:	4b7a      	ldr	r3, [pc, #488]	@ (80075a4 <HAL_RCC_OscConfig+0x780>)
 80073ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073bc:	4a79      	ldr	r2, [pc, #484]	@ (80075a4 <HAL_RCC_OscConfig+0x780>)
 80073be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80073c2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	f000 80fe 	beq.w	80075ca <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073d2:	2b02      	cmp	r3, #2
 80073d4:	f040 80d0 	bne.w	8007578 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80073d8:	4b72      	ldr	r3, [pc, #456]	@ (80075a4 <HAL_RCC_OscConfig+0x780>)
 80073da:	68db      	ldr	r3, [r3, #12]
 80073dc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	f003 0203 	and.w	r2, r3, #3
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073e8:	429a      	cmp	r2, r3
 80073ea:	d130      	bne.n	800744e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073f6:	3b01      	subs	r3, #1
 80073f8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80073fa:	429a      	cmp	r2, r3
 80073fc:	d127      	bne.n	800744e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007408:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800740a:	429a      	cmp	r2, r3
 800740c:	d11f      	bne.n	800744e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007414:	687a      	ldr	r2, [r7, #4]
 8007416:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007418:	2a07      	cmp	r2, #7
 800741a:	bf14      	ite	ne
 800741c:	2201      	movne	r2, #1
 800741e:	2200      	moveq	r2, #0
 8007420:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007422:	4293      	cmp	r3, r2
 8007424:	d113      	bne.n	800744e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007430:	085b      	lsrs	r3, r3, #1
 8007432:	3b01      	subs	r3, #1
 8007434:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8007436:	429a      	cmp	r2, r3
 8007438:	d109      	bne.n	800744e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007444:	085b      	lsrs	r3, r3, #1
 8007446:	3b01      	subs	r3, #1
 8007448:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800744a:	429a      	cmp	r2, r3
 800744c:	d06e      	beq.n	800752c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800744e:	69bb      	ldr	r3, [r7, #24]
 8007450:	2b0c      	cmp	r3, #12
 8007452:	d069      	beq.n	8007528 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007454:	4b53      	ldr	r3, [pc, #332]	@ (80075a4 <HAL_RCC_OscConfig+0x780>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800745c:	2b00      	cmp	r3, #0
 800745e:	d105      	bne.n	800746c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8007460:	4b50      	ldr	r3, [pc, #320]	@ (80075a4 <HAL_RCC_OscConfig+0x780>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007468:	2b00      	cmp	r3, #0
 800746a:	d001      	beq.n	8007470 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800746c:	2301      	movs	r3, #1
 800746e:	e0ad      	b.n	80075cc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007470:	4b4c      	ldr	r3, [pc, #304]	@ (80075a4 <HAL_RCC_OscConfig+0x780>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a4b      	ldr	r2, [pc, #300]	@ (80075a4 <HAL_RCC_OscConfig+0x780>)
 8007476:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800747a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800747c:	f7fd fea2 	bl	80051c4 <HAL_GetTick>
 8007480:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007482:	e008      	b.n	8007496 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007484:	f7fd fe9e 	bl	80051c4 <HAL_GetTick>
 8007488:	4602      	mov	r2, r0
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	1ad3      	subs	r3, r2, r3
 800748e:	2b02      	cmp	r3, #2
 8007490:	d901      	bls.n	8007496 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8007492:	2303      	movs	r3, #3
 8007494:	e09a      	b.n	80075cc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007496:	4b43      	ldr	r3, [pc, #268]	@ (80075a4 <HAL_RCC_OscConfig+0x780>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d1f0      	bne.n	8007484 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80074a2:	4b40      	ldr	r3, [pc, #256]	@ (80075a4 <HAL_RCC_OscConfig+0x780>)
 80074a4:	68da      	ldr	r2, [r3, #12]
 80074a6:	4b40      	ldr	r3, [pc, #256]	@ (80075a8 <HAL_RCC_OscConfig+0x784>)
 80074a8:	4013      	ands	r3, r2
 80074aa:	687a      	ldr	r2, [r7, #4]
 80074ac:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80074b2:	3a01      	subs	r2, #1
 80074b4:	0112      	lsls	r2, r2, #4
 80074b6:	4311      	orrs	r1, r2
 80074b8:	687a      	ldr	r2, [r7, #4]
 80074ba:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80074bc:	0212      	lsls	r2, r2, #8
 80074be:	4311      	orrs	r1, r2
 80074c0:	687a      	ldr	r2, [r7, #4]
 80074c2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80074c4:	0852      	lsrs	r2, r2, #1
 80074c6:	3a01      	subs	r2, #1
 80074c8:	0552      	lsls	r2, r2, #21
 80074ca:	4311      	orrs	r1, r2
 80074cc:	687a      	ldr	r2, [r7, #4]
 80074ce:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80074d0:	0852      	lsrs	r2, r2, #1
 80074d2:	3a01      	subs	r2, #1
 80074d4:	0652      	lsls	r2, r2, #25
 80074d6:	4311      	orrs	r1, r2
 80074d8:	687a      	ldr	r2, [r7, #4]
 80074da:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80074dc:	0912      	lsrs	r2, r2, #4
 80074de:	0452      	lsls	r2, r2, #17
 80074e0:	430a      	orrs	r2, r1
 80074e2:	4930      	ldr	r1, [pc, #192]	@ (80075a4 <HAL_RCC_OscConfig+0x780>)
 80074e4:	4313      	orrs	r3, r2
 80074e6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80074e8:	4b2e      	ldr	r3, [pc, #184]	@ (80075a4 <HAL_RCC_OscConfig+0x780>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a2d      	ldr	r2, [pc, #180]	@ (80075a4 <HAL_RCC_OscConfig+0x780>)
 80074ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80074f2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80074f4:	4b2b      	ldr	r3, [pc, #172]	@ (80075a4 <HAL_RCC_OscConfig+0x780>)
 80074f6:	68db      	ldr	r3, [r3, #12]
 80074f8:	4a2a      	ldr	r2, [pc, #168]	@ (80075a4 <HAL_RCC_OscConfig+0x780>)
 80074fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80074fe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007500:	f7fd fe60 	bl	80051c4 <HAL_GetTick>
 8007504:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007506:	e008      	b.n	800751a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007508:	f7fd fe5c 	bl	80051c4 <HAL_GetTick>
 800750c:	4602      	mov	r2, r0
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	1ad3      	subs	r3, r2, r3
 8007512:	2b02      	cmp	r3, #2
 8007514:	d901      	bls.n	800751a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8007516:	2303      	movs	r3, #3
 8007518:	e058      	b.n	80075cc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800751a:	4b22      	ldr	r3, [pc, #136]	@ (80075a4 <HAL_RCC_OscConfig+0x780>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007522:	2b00      	cmp	r3, #0
 8007524:	d0f0      	beq.n	8007508 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007526:	e050      	b.n	80075ca <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007528:	2301      	movs	r3, #1
 800752a:	e04f      	b.n	80075cc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800752c:	4b1d      	ldr	r3, [pc, #116]	@ (80075a4 <HAL_RCC_OscConfig+0x780>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007534:	2b00      	cmp	r3, #0
 8007536:	d148      	bne.n	80075ca <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007538:	4b1a      	ldr	r3, [pc, #104]	@ (80075a4 <HAL_RCC_OscConfig+0x780>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a19      	ldr	r2, [pc, #100]	@ (80075a4 <HAL_RCC_OscConfig+0x780>)
 800753e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007542:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007544:	4b17      	ldr	r3, [pc, #92]	@ (80075a4 <HAL_RCC_OscConfig+0x780>)
 8007546:	68db      	ldr	r3, [r3, #12]
 8007548:	4a16      	ldr	r2, [pc, #88]	@ (80075a4 <HAL_RCC_OscConfig+0x780>)
 800754a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800754e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007550:	f7fd fe38 	bl	80051c4 <HAL_GetTick>
 8007554:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007556:	e008      	b.n	800756a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007558:	f7fd fe34 	bl	80051c4 <HAL_GetTick>
 800755c:	4602      	mov	r2, r0
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	1ad3      	subs	r3, r2, r3
 8007562:	2b02      	cmp	r3, #2
 8007564:	d901      	bls.n	800756a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8007566:	2303      	movs	r3, #3
 8007568:	e030      	b.n	80075cc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800756a:	4b0e      	ldr	r3, [pc, #56]	@ (80075a4 <HAL_RCC_OscConfig+0x780>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007572:	2b00      	cmp	r3, #0
 8007574:	d0f0      	beq.n	8007558 <HAL_RCC_OscConfig+0x734>
 8007576:	e028      	b.n	80075ca <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007578:	69bb      	ldr	r3, [r7, #24]
 800757a:	2b0c      	cmp	r3, #12
 800757c:	d023      	beq.n	80075c6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800757e:	4b09      	ldr	r3, [pc, #36]	@ (80075a4 <HAL_RCC_OscConfig+0x780>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4a08      	ldr	r2, [pc, #32]	@ (80075a4 <HAL_RCC_OscConfig+0x780>)
 8007584:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007588:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800758a:	f7fd fe1b 	bl	80051c4 <HAL_GetTick>
 800758e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007590:	e00c      	b.n	80075ac <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007592:	f7fd fe17 	bl	80051c4 <HAL_GetTick>
 8007596:	4602      	mov	r2, r0
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	1ad3      	subs	r3, r2, r3
 800759c:	2b02      	cmp	r3, #2
 800759e:	d905      	bls.n	80075ac <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80075a0:	2303      	movs	r3, #3
 80075a2:	e013      	b.n	80075cc <HAL_RCC_OscConfig+0x7a8>
 80075a4:	40021000 	.word	0x40021000
 80075a8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80075ac:	4b09      	ldr	r3, [pc, #36]	@ (80075d4 <HAL_RCC_OscConfig+0x7b0>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d1ec      	bne.n	8007592 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80075b8:	4b06      	ldr	r3, [pc, #24]	@ (80075d4 <HAL_RCC_OscConfig+0x7b0>)
 80075ba:	68da      	ldr	r2, [r3, #12]
 80075bc:	4905      	ldr	r1, [pc, #20]	@ (80075d4 <HAL_RCC_OscConfig+0x7b0>)
 80075be:	4b06      	ldr	r3, [pc, #24]	@ (80075d8 <HAL_RCC_OscConfig+0x7b4>)
 80075c0:	4013      	ands	r3, r2
 80075c2:	60cb      	str	r3, [r1, #12]
 80075c4:	e001      	b.n	80075ca <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80075c6:	2301      	movs	r3, #1
 80075c8:	e000      	b.n	80075cc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80075ca:	2300      	movs	r3, #0
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	3720      	adds	r7, #32
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}
 80075d4:	40021000 	.word	0x40021000
 80075d8:	feeefffc 	.word	0xfeeefffc

080075dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b084      	sub	sp, #16
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d101      	bne.n	80075f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80075ec:	2301      	movs	r3, #1
 80075ee:	e0e7      	b.n	80077c0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80075f0:	4b75      	ldr	r3, [pc, #468]	@ (80077c8 <HAL_RCC_ClockConfig+0x1ec>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f003 0307 	and.w	r3, r3, #7
 80075f8:	683a      	ldr	r2, [r7, #0]
 80075fa:	429a      	cmp	r2, r3
 80075fc:	d910      	bls.n	8007620 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075fe:	4b72      	ldr	r3, [pc, #456]	@ (80077c8 <HAL_RCC_ClockConfig+0x1ec>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f023 0207 	bic.w	r2, r3, #7
 8007606:	4970      	ldr	r1, [pc, #448]	@ (80077c8 <HAL_RCC_ClockConfig+0x1ec>)
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	4313      	orrs	r3, r2
 800760c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800760e:	4b6e      	ldr	r3, [pc, #440]	@ (80077c8 <HAL_RCC_ClockConfig+0x1ec>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f003 0307 	and.w	r3, r3, #7
 8007616:	683a      	ldr	r2, [r7, #0]
 8007618:	429a      	cmp	r2, r3
 800761a:	d001      	beq.n	8007620 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800761c:	2301      	movs	r3, #1
 800761e:	e0cf      	b.n	80077c0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f003 0302 	and.w	r3, r3, #2
 8007628:	2b00      	cmp	r3, #0
 800762a:	d010      	beq.n	800764e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	689a      	ldr	r2, [r3, #8]
 8007630:	4b66      	ldr	r3, [pc, #408]	@ (80077cc <HAL_RCC_ClockConfig+0x1f0>)
 8007632:	689b      	ldr	r3, [r3, #8]
 8007634:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007638:	429a      	cmp	r2, r3
 800763a:	d908      	bls.n	800764e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800763c:	4b63      	ldr	r3, [pc, #396]	@ (80077cc <HAL_RCC_ClockConfig+0x1f0>)
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	689b      	ldr	r3, [r3, #8]
 8007648:	4960      	ldr	r1, [pc, #384]	@ (80077cc <HAL_RCC_ClockConfig+0x1f0>)
 800764a:	4313      	orrs	r3, r2
 800764c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f003 0301 	and.w	r3, r3, #1
 8007656:	2b00      	cmp	r3, #0
 8007658:	d04c      	beq.n	80076f4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	2b03      	cmp	r3, #3
 8007660:	d107      	bne.n	8007672 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007662:	4b5a      	ldr	r3, [pc, #360]	@ (80077cc <HAL_RCC_ClockConfig+0x1f0>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800766a:	2b00      	cmp	r3, #0
 800766c:	d121      	bne.n	80076b2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800766e:	2301      	movs	r3, #1
 8007670:	e0a6      	b.n	80077c0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	2b02      	cmp	r3, #2
 8007678:	d107      	bne.n	800768a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800767a:	4b54      	ldr	r3, [pc, #336]	@ (80077cc <HAL_RCC_ClockConfig+0x1f0>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007682:	2b00      	cmp	r3, #0
 8007684:	d115      	bne.n	80076b2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007686:	2301      	movs	r3, #1
 8007688:	e09a      	b.n	80077c0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d107      	bne.n	80076a2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007692:	4b4e      	ldr	r3, [pc, #312]	@ (80077cc <HAL_RCC_ClockConfig+0x1f0>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f003 0302 	and.w	r3, r3, #2
 800769a:	2b00      	cmp	r3, #0
 800769c:	d109      	bne.n	80076b2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800769e:	2301      	movs	r3, #1
 80076a0:	e08e      	b.n	80077c0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80076a2:	4b4a      	ldr	r3, [pc, #296]	@ (80077cc <HAL_RCC_ClockConfig+0x1f0>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d101      	bne.n	80076b2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80076ae:	2301      	movs	r3, #1
 80076b0:	e086      	b.n	80077c0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80076b2:	4b46      	ldr	r3, [pc, #280]	@ (80077cc <HAL_RCC_ClockConfig+0x1f0>)
 80076b4:	689b      	ldr	r3, [r3, #8]
 80076b6:	f023 0203 	bic.w	r2, r3, #3
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	4943      	ldr	r1, [pc, #268]	@ (80077cc <HAL_RCC_ClockConfig+0x1f0>)
 80076c0:	4313      	orrs	r3, r2
 80076c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076c4:	f7fd fd7e 	bl	80051c4 <HAL_GetTick>
 80076c8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076ca:	e00a      	b.n	80076e2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80076cc:	f7fd fd7a 	bl	80051c4 <HAL_GetTick>
 80076d0:	4602      	mov	r2, r0
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	1ad3      	subs	r3, r2, r3
 80076d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80076da:	4293      	cmp	r3, r2
 80076dc:	d901      	bls.n	80076e2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80076de:	2303      	movs	r3, #3
 80076e0:	e06e      	b.n	80077c0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076e2:	4b3a      	ldr	r3, [pc, #232]	@ (80077cc <HAL_RCC_ClockConfig+0x1f0>)
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	f003 020c 	and.w	r2, r3, #12
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	009b      	lsls	r3, r3, #2
 80076f0:	429a      	cmp	r2, r3
 80076f2:	d1eb      	bne.n	80076cc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f003 0302 	and.w	r3, r3, #2
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d010      	beq.n	8007722 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	689a      	ldr	r2, [r3, #8]
 8007704:	4b31      	ldr	r3, [pc, #196]	@ (80077cc <HAL_RCC_ClockConfig+0x1f0>)
 8007706:	689b      	ldr	r3, [r3, #8]
 8007708:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800770c:	429a      	cmp	r2, r3
 800770e:	d208      	bcs.n	8007722 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007710:	4b2e      	ldr	r3, [pc, #184]	@ (80077cc <HAL_RCC_ClockConfig+0x1f0>)
 8007712:	689b      	ldr	r3, [r3, #8]
 8007714:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	689b      	ldr	r3, [r3, #8]
 800771c:	492b      	ldr	r1, [pc, #172]	@ (80077cc <HAL_RCC_ClockConfig+0x1f0>)
 800771e:	4313      	orrs	r3, r2
 8007720:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007722:	4b29      	ldr	r3, [pc, #164]	@ (80077c8 <HAL_RCC_ClockConfig+0x1ec>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f003 0307 	and.w	r3, r3, #7
 800772a:	683a      	ldr	r2, [r7, #0]
 800772c:	429a      	cmp	r2, r3
 800772e:	d210      	bcs.n	8007752 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007730:	4b25      	ldr	r3, [pc, #148]	@ (80077c8 <HAL_RCC_ClockConfig+0x1ec>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f023 0207 	bic.w	r2, r3, #7
 8007738:	4923      	ldr	r1, [pc, #140]	@ (80077c8 <HAL_RCC_ClockConfig+0x1ec>)
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	4313      	orrs	r3, r2
 800773e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007740:	4b21      	ldr	r3, [pc, #132]	@ (80077c8 <HAL_RCC_ClockConfig+0x1ec>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f003 0307 	and.w	r3, r3, #7
 8007748:	683a      	ldr	r2, [r7, #0]
 800774a:	429a      	cmp	r2, r3
 800774c:	d001      	beq.n	8007752 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800774e:	2301      	movs	r3, #1
 8007750:	e036      	b.n	80077c0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f003 0304 	and.w	r3, r3, #4
 800775a:	2b00      	cmp	r3, #0
 800775c:	d008      	beq.n	8007770 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800775e:	4b1b      	ldr	r3, [pc, #108]	@ (80077cc <HAL_RCC_ClockConfig+0x1f0>)
 8007760:	689b      	ldr	r3, [r3, #8]
 8007762:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	68db      	ldr	r3, [r3, #12]
 800776a:	4918      	ldr	r1, [pc, #96]	@ (80077cc <HAL_RCC_ClockConfig+0x1f0>)
 800776c:	4313      	orrs	r3, r2
 800776e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f003 0308 	and.w	r3, r3, #8
 8007778:	2b00      	cmp	r3, #0
 800777a:	d009      	beq.n	8007790 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800777c:	4b13      	ldr	r3, [pc, #76]	@ (80077cc <HAL_RCC_ClockConfig+0x1f0>)
 800777e:	689b      	ldr	r3, [r3, #8]
 8007780:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	691b      	ldr	r3, [r3, #16]
 8007788:	00db      	lsls	r3, r3, #3
 800778a:	4910      	ldr	r1, [pc, #64]	@ (80077cc <HAL_RCC_ClockConfig+0x1f0>)
 800778c:	4313      	orrs	r3, r2
 800778e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007790:	f000 f824 	bl	80077dc <HAL_RCC_GetSysClockFreq>
 8007794:	4602      	mov	r2, r0
 8007796:	4b0d      	ldr	r3, [pc, #52]	@ (80077cc <HAL_RCC_ClockConfig+0x1f0>)
 8007798:	689b      	ldr	r3, [r3, #8]
 800779a:	091b      	lsrs	r3, r3, #4
 800779c:	f003 030f 	and.w	r3, r3, #15
 80077a0:	490b      	ldr	r1, [pc, #44]	@ (80077d0 <HAL_RCC_ClockConfig+0x1f4>)
 80077a2:	5ccb      	ldrb	r3, [r1, r3]
 80077a4:	f003 031f 	and.w	r3, r3, #31
 80077a8:	fa22 f303 	lsr.w	r3, r2, r3
 80077ac:	4a09      	ldr	r2, [pc, #36]	@ (80077d4 <HAL_RCC_ClockConfig+0x1f8>)
 80077ae:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80077b0:	4b09      	ldr	r3, [pc, #36]	@ (80077d8 <HAL_RCC_ClockConfig+0x1fc>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4618      	mov	r0, r3
 80077b6:	f7fd fcb5 	bl	8005124 <HAL_InitTick>
 80077ba:	4603      	mov	r3, r0
 80077bc:	72fb      	strb	r3, [r7, #11]

  return status;
 80077be:	7afb      	ldrb	r3, [r7, #11]
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3710      	adds	r7, #16
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}
 80077c8:	40022000 	.word	0x40022000
 80077cc:	40021000 	.word	0x40021000
 80077d0:	0801268c 	.word	0x0801268c
 80077d4:	20000510 	.word	0x20000510
 80077d8:	2000055c 	.word	0x2000055c

080077dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80077dc:	b480      	push	{r7}
 80077de:	b089      	sub	sp, #36	@ 0x24
 80077e0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80077e2:	2300      	movs	r3, #0
 80077e4:	61fb      	str	r3, [r7, #28]
 80077e6:	2300      	movs	r3, #0
 80077e8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80077ea:	4b3e      	ldr	r3, [pc, #248]	@ (80078e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80077ec:	689b      	ldr	r3, [r3, #8]
 80077ee:	f003 030c 	and.w	r3, r3, #12
 80077f2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80077f4:	4b3b      	ldr	r3, [pc, #236]	@ (80078e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80077f6:	68db      	ldr	r3, [r3, #12]
 80077f8:	f003 0303 	and.w	r3, r3, #3
 80077fc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d005      	beq.n	8007810 <HAL_RCC_GetSysClockFreq+0x34>
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	2b0c      	cmp	r3, #12
 8007808:	d121      	bne.n	800784e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2b01      	cmp	r3, #1
 800780e:	d11e      	bne.n	800784e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007810:	4b34      	ldr	r3, [pc, #208]	@ (80078e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f003 0308 	and.w	r3, r3, #8
 8007818:	2b00      	cmp	r3, #0
 800781a:	d107      	bne.n	800782c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800781c:	4b31      	ldr	r3, [pc, #196]	@ (80078e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800781e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007822:	0a1b      	lsrs	r3, r3, #8
 8007824:	f003 030f 	and.w	r3, r3, #15
 8007828:	61fb      	str	r3, [r7, #28]
 800782a:	e005      	b.n	8007838 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800782c:	4b2d      	ldr	r3, [pc, #180]	@ (80078e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	091b      	lsrs	r3, r3, #4
 8007832:	f003 030f 	and.w	r3, r3, #15
 8007836:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007838:	4a2b      	ldr	r2, [pc, #172]	@ (80078e8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800783a:	69fb      	ldr	r3, [r7, #28]
 800783c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007840:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d10d      	bne.n	8007864 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007848:	69fb      	ldr	r3, [r7, #28]
 800784a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800784c:	e00a      	b.n	8007864 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	2b04      	cmp	r3, #4
 8007852:	d102      	bne.n	800785a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007854:	4b25      	ldr	r3, [pc, #148]	@ (80078ec <HAL_RCC_GetSysClockFreq+0x110>)
 8007856:	61bb      	str	r3, [r7, #24]
 8007858:	e004      	b.n	8007864 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	2b08      	cmp	r3, #8
 800785e:	d101      	bne.n	8007864 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007860:	4b23      	ldr	r3, [pc, #140]	@ (80078f0 <HAL_RCC_GetSysClockFreq+0x114>)
 8007862:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007864:	693b      	ldr	r3, [r7, #16]
 8007866:	2b0c      	cmp	r3, #12
 8007868:	d134      	bne.n	80078d4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800786a:	4b1e      	ldr	r3, [pc, #120]	@ (80078e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800786c:	68db      	ldr	r3, [r3, #12]
 800786e:	f003 0303 	and.w	r3, r3, #3
 8007872:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	2b02      	cmp	r3, #2
 8007878:	d003      	beq.n	8007882 <HAL_RCC_GetSysClockFreq+0xa6>
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	2b03      	cmp	r3, #3
 800787e:	d003      	beq.n	8007888 <HAL_RCC_GetSysClockFreq+0xac>
 8007880:	e005      	b.n	800788e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007882:	4b1a      	ldr	r3, [pc, #104]	@ (80078ec <HAL_RCC_GetSysClockFreq+0x110>)
 8007884:	617b      	str	r3, [r7, #20]
      break;
 8007886:	e005      	b.n	8007894 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007888:	4b19      	ldr	r3, [pc, #100]	@ (80078f0 <HAL_RCC_GetSysClockFreq+0x114>)
 800788a:	617b      	str	r3, [r7, #20]
      break;
 800788c:	e002      	b.n	8007894 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800788e:	69fb      	ldr	r3, [r7, #28]
 8007890:	617b      	str	r3, [r7, #20]
      break;
 8007892:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007894:	4b13      	ldr	r3, [pc, #76]	@ (80078e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8007896:	68db      	ldr	r3, [r3, #12]
 8007898:	091b      	lsrs	r3, r3, #4
 800789a:	f003 0307 	and.w	r3, r3, #7
 800789e:	3301      	adds	r3, #1
 80078a0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80078a2:	4b10      	ldr	r3, [pc, #64]	@ (80078e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80078a4:	68db      	ldr	r3, [r3, #12]
 80078a6:	0a1b      	lsrs	r3, r3, #8
 80078a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80078ac:	697a      	ldr	r2, [r7, #20]
 80078ae:	fb03 f202 	mul.w	r2, r3, r2
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80078b8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80078ba:	4b0a      	ldr	r3, [pc, #40]	@ (80078e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80078bc:	68db      	ldr	r3, [r3, #12]
 80078be:	0e5b      	lsrs	r3, r3, #25
 80078c0:	f003 0303 	and.w	r3, r3, #3
 80078c4:	3301      	adds	r3, #1
 80078c6:	005b      	lsls	r3, r3, #1
 80078c8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80078ca:	697a      	ldr	r2, [r7, #20]
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80078d2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80078d4:	69bb      	ldr	r3, [r7, #24]
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3724      	adds	r7, #36	@ 0x24
 80078da:	46bd      	mov	sp, r7
 80078dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e0:	4770      	bx	lr
 80078e2:	bf00      	nop
 80078e4:	40021000 	.word	0x40021000
 80078e8:	080126a4 	.word	0x080126a4
 80078ec:	00f42400 	.word	0x00f42400
 80078f0:	007a1200 	.word	0x007a1200

080078f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80078f4:	b480      	push	{r7}
 80078f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80078f8:	4b03      	ldr	r3, [pc, #12]	@ (8007908 <HAL_RCC_GetHCLKFreq+0x14>)
 80078fa:	681b      	ldr	r3, [r3, #0]
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	46bd      	mov	sp, r7
 8007900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007904:	4770      	bx	lr
 8007906:	bf00      	nop
 8007908:	20000510 	.word	0x20000510

0800790c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007910:	f7ff fff0 	bl	80078f4 <HAL_RCC_GetHCLKFreq>
 8007914:	4602      	mov	r2, r0
 8007916:	4b06      	ldr	r3, [pc, #24]	@ (8007930 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007918:	689b      	ldr	r3, [r3, #8]
 800791a:	0a1b      	lsrs	r3, r3, #8
 800791c:	f003 0307 	and.w	r3, r3, #7
 8007920:	4904      	ldr	r1, [pc, #16]	@ (8007934 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007922:	5ccb      	ldrb	r3, [r1, r3]
 8007924:	f003 031f 	and.w	r3, r3, #31
 8007928:	fa22 f303 	lsr.w	r3, r2, r3
}
 800792c:	4618      	mov	r0, r3
 800792e:	bd80      	pop	{r7, pc}
 8007930:	40021000 	.word	0x40021000
 8007934:	0801269c 	.word	0x0801269c

08007938 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800793c:	f7ff ffda 	bl	80078f4 <HAL_RCC_GetHCLKFreq>
 8007940:	4602      	mov	r2, r0
 8007942:	4b06      	ldr	r3, [pc, #24]	@ (800795c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007944:	689b      	ldr	r3, [r3, #8]
 8007946:	0adb      	lsrs	r3, r3, #11
 8007948:	f003 0307 	and.w	r3, r3, #7
 800794c:	4904      	ldr	r1, [pc, #16]	@ (8007960 <HAL_RCC_GetPCLK2Freq+0x28>)
 800794e:	5ccb      	ldrb	r3, [r1, r3]
 8007950:	f003 031f 	and.w	r3, r3, #31
 8007954:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007958:	4618      	mov	r0, r3
 800795a:	bd80      	pop	{r7, pc}
 800795c:	40021000 	.word	0x40021000
 8007960:	0801269c 	.word	0x0801269c

08007964 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b086      	sub	sp, #24
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800796c:	2300      	movs	r3, #0
 800796e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007970:	4b2a      	ldr	r3, [pc, #168]	@ (8007a1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007972:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007974:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007978:	2b00      	cmp	r3, #0
 800797a:	d003      	beq.n	8007984 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800797c:	f7ff f922 	bl	8006bc4 <HAL_PWREx_GetVoltageRange>
 8007980:	6178      	str	r0, [r7, #20]
 8007982:	e014      	b.n	80079ae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007984:	4b25      	ldr	r3, [pc, #148]	@ (8007a1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007986:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007988:	4a24      	ldr	r2, [pc, #144]	@ (8007a1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800798a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800798e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007990:	4b22      	ldr	r3, [pc, #136]	@ (8007a1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007992:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007994:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007998:	60fb      	str	r3, [r7, #12]
 800799a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800799c:	f7ff f912 	bl	8006bc4 <HAL_PWREx_GetVoltageRange>
 80079a0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80079a2:	4b1e      	ldr	r3, [pc, #120]	@ (8007a1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80079a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079a6:	4a1d      	ldr	r2, [pc, #116]	@ (8007a1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80079a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80079ac:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80079b4:	d10b      	bne.n	80079ce <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2b80      	cmp	r3, #128	@ 0x80
 80079ba:	d919      	bls.n	80079f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2ba0      	cmp	r3, #160	@ 0xa0
 80079c0:	d902      	bls.n	80079c8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80079c2:	2302      	movs	r3, #2
 80079c4:	613b      	str	r3, [r7, #16]
 80079c6:	e013      	b.n	80079f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80079c8:	2301      	movs	r3, #1
 80079ca:	613b      	str	r3, [r7, #16]
 80079cc:	e010      	b.n	80079f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2b80      	cmp	r3, #128	@ 0x80
 80079d2:	d902      	bls.n	80079da <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80079d4:	2303      	movs	r3, #3
 80079d6:	613b      	str	r3, [r7, #16]
 80079d8:	e00a      	b.n	80079f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2b80      	cmp	r3, #128	@ 0x80
 80079de:	d102      	bne.n	80079e6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80079e0:	2302      	movs	r3, #2
 80079e2:	613b      	str	r3, [r7, #16]
 80079e4:	e004      	b.n	80079f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2b70      	cmp	r3, #112	@ 0x70
 80079ea:	d101      	bne.n	80079f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80079ec:	2301      	movs	r3, #1
 80079ee:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80079f0:	4b0b      	ldr	r3, [pc, #44]	@ (8007a20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f023 0207 	bic.w	r2, r3, #7
 80079f8:	4909      	ldr	r1, [pc, #36]	@ (8007a20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	4313      	orrs	r3, r2
 80079fe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007a00:	4b07      	ldr	r3, [pc, #28]	@ (8007a20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f003 0307 	and.w	r3, r3, #7
 8007a08:	693a      	ldr	r2, [r7, #16]
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	d001      	beq.n	8007a12 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007a0e:	2301      	movs	r3, #1
 8007a10:	e000      	b.n	8007a14 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8007a12:	2300      	movs	r3, #0
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3718      	adds	r7, #24
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}
 8007a1c:	40021000 	.word	0x40021000
 8007a20:	40022000 	.word	0x40022000

08007a24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b086      	sub	sp, #24
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007a30:	2300      	movs	r3, #0
 8007a32:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d041      	beq.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a44:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007a48:	d02a      	beq.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007a4a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007a4e:	d824      	bhi.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007a50:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007a54:	d008      	beq.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007a56:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007a5a:	d81e      	bhi.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d00a      	beq.n	8007a76 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007a60:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007a64:	d010      	beq.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007a66:	e018      	b.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007a68:	4b86      	ldr	r3, [pc, #536]	@ (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007a6a:	68db      	ldr	r3, [r3, #12]
 8007a6c:	4a85      	ldr	r2, [pc, #532]	@ (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007a6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a72:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007a74:	e015      	b.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	3304      	adds	r3, #4
 8007a7a:	2100      	movs	r1, #0
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f000 facb 	bl	8008018 <RCCEx_PLLSAI1_Config>
 8007a82:	4603      	mov	r3, r0
 8007a84:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007a86:	e00c      	b.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	3320      	adds	r3, #32
 8007a8c:	2100      	movs	r1, #0
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f000 fbb6 	bl	8008200 <RCCEx_PLLSAI2_Config>
 8007a94:	4603      	mov	r3, r0
 8007a96:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007a98:	e003      	b.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	74fb      	strb	r3, [r7, #19]
      break;
 8007a9e:	e000      	b.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007aa0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007aa2:	7cfb      	ldrb	r3, [r7, #19]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d10b      	bne.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007aa8:	4b76      	ldr	r3, [pc, #472]	@ (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007aae:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ab6:	4973      	ldr	r1, [pc, #460]	@ (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007ab8:	4313      	orrs	r3, r2
 8007aba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8007abe:	e001      	b.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ac0:	7cfb      	ldrb	r3, [r7, #19]
 8007ac2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d041      	beq.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007ad4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007ad8:	d02a      	beq.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8007ada:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007ade:	d824      	bhi.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007ae0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007ae4:	d008      	beq.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007ae6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007aea:	d81e      	bhi.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d00a      	beq.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8007af0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007af4:	d010      	beq.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007af6:	e018      	b.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007af8:	4b62      	ldr	r3, [pc, #392]	@ (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007afa:	68db      	ldr	r3, [r3, #12]
 8007afc:	4a61      	ldr	r2, [pc, #388]	@ (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007afe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b02:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007b04:	e015      	b.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	3304      	adds	r3, #4
 8007b0a:	2100      	movs	r1, #0
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f000 fa83 	bl	8008018 <RCCEx_PLLSAI1_Config>
 8007b12:	4603      	mov	r3, r0
 8007b14:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007b16:	e00c      	b.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	3320      	adds	r3, #32
 8007b1c:	2100      	movs	r1, #0
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f000 fb6e 	bl	8008200 <RCCEx_PLLSAI2_Config>
 8007b24:	4603      	mov	r3, r0
 8007b26:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007b28:	e003      	b.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	74fb      	strb	r3, [r7, #19]
      break;
 8007b2e:	e000      	b.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8007b30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b32:	7cfb      	ldrb	r3, [r7, #19]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d10b      	bne.n	8007b50 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007b38:	4b52      	ldr	r3, [pc, #328]	@ (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b3e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007b46:	494f      	ldr	r1, [pc, #316]	@ (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8007b4e:	e001      	b.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b50:	7cfb      	ldrb	r3, [r7, #19]
 8007b52:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	f000 80a0 	beq.w	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007b62:	2300      	movs	r3, #0
 8007b64:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007b66:	4b47      	ldr	r3, [pc, #284]	@ (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007b68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d101      	bne.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8007b72:	2301      	movs	r3, #1
 8007b74:	e000      	b.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8007b76:	2300      	movs	r3, #0
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d00d      	beq.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007b7c:	4b41      	ldr	r3, [pc, #260]	@ (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007b7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b80:	4a40      	ldr	r2, [pc, #256]	@ (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007b82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b86:	6593      	str	r3, [r2, #88]	@ 0x58
 8007b88:	4b3e      	ldr	r3, [pc, #248]	@ (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007b8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b90:	60bb      	str	r3, [r7, #8]
 8007b92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007b94:	2301      	movs	r3, #1
 8007b96:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007b98:	4b3b      	ldr	r3, [pc, #236]	@ (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4a3a      	ldr	r2, [pc, #232]	@ (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007b9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ba2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007ba4:	f7fd fb0e 	bl	80051c4 <HAL_GetTick>
 8007ba8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007baa:	e009      	b.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007bac:	f7fd fb0a 	bl	80051c4 <HAL_GetTick>
 8007bb0:	4602      	mov	r2, r0
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	1ad3      	subs	r3, r2, r3
 8007bb6:	2b02      	cmp	r3, #2
 8007bb8:	d902      	bls.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8007bba:	2303      	movs	r3, #3
 8007bbc:	74fb      	strb	r3, [r7, #19]
        break;
 8007bbe:	e005      	b.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007bc0:	4b31      	ldr	r3, [pc, #196]	@ (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d0ef      	beq.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8007bcc:	7cfb      	ldrb	r3, [r7, #19]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d15c      	bne.n	8007c8c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007bd2:	4b2c      	ldr	r3, [pc, #176]	@ (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bd8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007bdc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d01f      	beq.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007bea:	697a      	ldr	r2, [r7, #20]
 8007bec:	429a      	cmp	r2, r3
 8007bee:	d019      	beq.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007bf0:	4b24      	ldr	r3, [pc, #144]	@ (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bf6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007bfa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007bfc:	4b21      	ldr	r3, [pc, #132]	@ (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c02:	4a20      	ldr	r2, [pc, #128]	@ (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007c04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007c08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007c0c:	4b1d      	ldr	r3, [pc, #116]	@ (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c12:	4a1c      	ldr	r2, [pc, #112]	@ (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007c14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007c18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007c1c:	4a19      	ldr	r2, [pc, #100]	@ (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	f003 0301 	and.w	r3, r3, #1
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d016      	beq.n	8007c5c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c2e:	f7fd fac9 	bl	80051c4 <HAL_GetTick>
 8007c32:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007c34:	e00b      	b.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c36:	f7fd fac5 	bl	80051c4 <HAL_GetTick>
 8007c3a:	4602      	mov	r2, r0
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	1ad3      	subs	r3, r2, r3
 8007c40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d902      	bls.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8007c48:	2303      	movs	r3, #3
 8007c4a:	74fb      	strb	r3, [r7, #19]
            break;
 8007c4c:	e006      	b.n	8007c5c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c54:	f003 0302 	and.w	r3, r3, #2
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d0ec      	beq.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8007c5c:	7cfb      	ldrb	r3, [r7, #19]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d10c      	bne.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007c62:	4b08      	ldr	r3, [pc, #32]	@ (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c68:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c72:	4904      	ldr	r1, [pc, #16]	@ (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007c74:	4313      	orrs	r3, r2
 8007c76:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007c7a:	e009      	b.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007c7c:	7cfb      	ldrb	r3, [r7, #19]
 8007c7e:	74bb      	strb	r3, [r7, #18]
 8007c80:	e006      	b.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8007c82:	bf00      	nop
 8007c84:	40021000 	.word	0x40021000
 8007c88:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c8c:	7cfb      	ldrb	r3, [r7, #19]
 8007c8e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007c90:	7c7b      	ldrb	r3, [r7, #17]
 8007c92:	2b01      	cmp	r3, #1
 8007c94:	d105      	bne.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007c96:	4b9e      	ldr	r3, [pc, #632]	@ (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007c98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c9a:	4a9d      	ldr	r2, [pc, #628]	@ (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007c9c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007ca0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f003 0301 	and.w	r3, r3, #1
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d00a      	beq.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007cae:	4b98      	ldr	r3, [pc, #608]	@ (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cb4:	f023 0203 	bic.w	r2, r3, #3
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cbc:	4994      	ldr	r1, [pc, #592]	@ (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f003 0302 	and.w	r3, r3, #2
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d00a      	beq.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007cd0:	4b8f      	ldr	r3, [pc, #572]	@ (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cd6:	f023 020c 	bic.w	r2, r3, #12
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cde:	498c      	ldr	r1, [pc, #560]	@ (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f003 0304 	and.w	r3, r3, #4
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d00a      	beq.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007cf2:	4b87      	ldr	r3, [pc, #540]	@ (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cf8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d00:	4983      	ldr	r1, [pc, #524]	@ (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007d02:	4313      	orrs	r3, r2
 8007d04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f003 0308 	and.w	r3, r3, #8
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d00a      	beq.n	8007d2a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007d14:	4b7e      	ldr	r3, [pc, #504]	@ (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d1a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d22:	497b      	ldr	r1, [pc, #492]	@ (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007d24:	4313      	orrs	r3, r2
 8007d26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f003 0310 	and.w	r3, r3, #16
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d00a      	beq.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007d36:	4b76      	ldr	r3, [pc, #472]	@ (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d3c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d44:	4972      	ldr	r1, [pc, #456]	@ (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007d46:	4313      	orrs	r3, r2
 8007d48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f003 0320 	and.w	r3, r3, #32
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d00a      	beq.n	8007d6e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007d58:	4b6d      	ldr	r3, [pc, #436]	@ (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d5e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d66:	496a      	ldr	r1, [pc, #424]	@ (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007d68:	4313      	orrs	r3, r2
 8007d6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d00a      	beq.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007d7a:	4b65      	ldr	r3, [pc, #404]	@ (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d80:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d88:	4961      	ldr	r1, [pc, #388]	@ (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d00a      	beq.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007d9c:	4b5c      	ldr	r3, [pc, #368]	@ (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007da2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007daa:	4959      	ldr	r1, [pc, #356]	@ (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007dac:	4313      	orrs	r3, r2
 8007dae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d00a      	beq.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007dbe:	4b54      	ldr	r3, [pc, #336]	@ (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007dc4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007dcc:	4950      	ldr	r1, [pc, #320]	@ (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d00a      	beq.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007de0:	4b4b      	ldr	r3, [pc, #300]	@ (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007de6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007dee:	4948      	ldr	r1, [pc, #288]	@ (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007df0:	4313      	orrs	r3, r2
 8007df2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d00a      	beq.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007e02:	4b43      	ldr	r3, [pc, #268]	@ (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e08:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e10:	493f      	ldr	r1, [pc, #252]	@ (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007e12:	4313      	orrs	r3, r2
 8007e14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d028      	beq.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007e24:	4b3a      	ldr	r3, [pc, #232]	@ (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e2a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e32:	4937      	ldr	r1, [pc, #220]	@ (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007e34:	4313      	orrs	r3, r2
 8007e36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e3e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007e42:	d106      	bne.n	8007e52 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007e44:	4b32      	ldr	r3, [pc, #200]	@ (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007e46:	68db      	ldr	r3, [r3, #12]
 8007e48:	4a31      	ldr	r2, [pc, #196]	@ (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007e4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007e4e:	60d3      	str	r3, [r2, #12]
 8007e50:	e011      	b.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e56:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007e5a:	d10c      	bne.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	3304      	adds	r3, #4
 8007e60:	2101      	movs	r1, #1
 8007e62:	4618      	mov	r0, r3
 8007e64:	f000 f8d8 	bl	8008018 <RCCEx_PLLSAI1_Config>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007e6c:	7cfb      	ldrb	r3, [r7, #19]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d001      	beq.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8007e72:	7cfb      	ldrb	r3, [r7, #19]
 8007e74:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d028      	beq.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007e82:	4b23      	ldr	r3, [pc, #140]	@ (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e88:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e90:	491f      	ldr	r1, [pc, #124]	@ (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007e92:	4313      	orrs	r3, r2
 8007e94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e9c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007ea0:	d106      	bne.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007ea2:	4b1b      	ldr	r3, [pc, #108]	@ (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007ea4:	68db      	ldr	r3, [r3, #12]
 8007ea6:	4a1a      	ldr	r2, [pc, #104]	@ (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007ea8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007eac:	60d3      	str	r3, [r2, #12]
 8007eae:	e011      	b.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007eb4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007eb8:	d10c      	bne.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	3304      	adds	r3, #4
 8007ebe:	2101      	movs	r1, #1
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f000 f8a9 	bl	8008018 <RCCEx_PLLSAI1_Config>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007eca:	7cfb      	ldrb	r3, [r7, #19]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d001      	beq.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8007ed0:	7cfb      	ldrb	r3, [r7, #19]
 8007ed2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d02b      	beq.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ee6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007eee:	4908      	ldr	r1, [pc, #32]	@ (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007ef0:	4313      	orrs	r3, r2
 8007ef2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007efa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007efe:	d109      	bne.n	8007f14 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007f00:	4b03      	ldr	r3, [pc, #12]	@ (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007f02:	68db      	ldr	r3, [r3, #12]
 8007f04:	4a02      	ldr	r2, [pc, #8]	@ (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007f06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007f0a:	60d3      	str	r3, [r2, #12]
 8007f0c:	e014      	b.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8007f0e:	bf00      	nop
 8007f10:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f18:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007f1c:	d10c      	bne.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	3304      	adds	r3, #4
 8007f22:	2101      	movs	r1, #1
 8007f24:	4618      	mov	r0, r3
 8007f26:	f000 f877 	bl	8008018 <RCCEx_PLLSAI1_Config>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007f2e:	7cfb      	ldrb	r3, [r7, #19]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d001      	beq.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8007f34:	7cfb      	ldrb	r3, [r7, #19]
 8007f36:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d02f      	beq.n	8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007f44:	4b2b      	ldr	r3, [pc, #172]	@ (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f4a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007f52:	4928      	ldr	r1, [pc, #160]	@ (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007f54:	4313      	orrs	r3, r2
 8007f56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007f5e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007f62:	d10d      	bne.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	3304      	adds	r3, #4
 8007f68:	2102      	movs	r1, #2
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f000 f854 	bl	8008018 <RCCEx_PLLSAI1_Config>
 8007f70:	4603      	mov	r3, r0
 8007f72:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007f74:	7cfb      	ldrb	r3, [r7, #19]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d014      	beq.n	8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8007f7a:	7cfb      	ldrb	r3, [r7, #19]
 8007f7c:	74bb      	strb	r3, [r7, #18]
 8007f7e:	e011      	b.n	8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007f84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f88:	d10c      	bne.n	8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	3320      	adds	r3, #32
 8007f8e:	2102      	movs	r1, #2
 8007f90:	4618      	mov	r0, r3
 8007f92:	f000 f935 	bl	8008200 <RCCEx_PLLSAI2_Config>
 8007f96:	4603      	mov	r3, r0
 8007f98:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007f9a:	7cfb      	ldrb	r3, [r7, #19]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d001      	beq.n	8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8007fa0:	7cfb      	ldrb	r3, [r7, #19]
 8007fa2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d00a      	beq.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007fb0:	4b10      	ldr	r3, [pc, #64]	@ (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fb6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007fbe:	490d      	ldr	r1, [pc, #52]	@ (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007fc0:	4313      	orrs	r3, r2
 8007fc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d00b      	beq.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007fd2:	4b08      	ldr	r3, [pc, #32]	@ (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fd8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007fe2:	4904      	ldr	r1, [pc, #16]	@ (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007fe4:	4313      	orrs	r3, r2
 8007fe6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007fea:	7cbb      	ldrb	r3, [r7, #18]
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	3718      	adds	r7, #24
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}
 8007ff4:	40021000 	.word	0x40021000

08007ff8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8007ffc:	4b05      	ldr	r3, [pc, #20]	@ (8008014 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4a04      	ldr	r2, [pc, #16]	@ (8008014 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8008002:	f043 0304 	orr.w	r3, r3, #4
 8008006:	6013      	str	r3, [r2, #0]
}
 8008008:	bf00      	nop
 800800a:	46bd      	mov	sp, r7
 800800c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008010:	4770      	bx	lr
 8008012:	bf00      	nop
 8008014:	40021000 	.word	0x40021000

08008018 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b084      	sub	sp, #16
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008022:	2300      	movs	r3, #0
 8008024:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008026:	4b75      	ldr	r3, [pc, #468]	@ (80081fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8008028:	68db      	ldr	r3, [r3, #12]
 800802a:	f003 0303 	and.w	r3, r3, #3
 800802e:	2b00      	cmp	r3, #0
 8008030:	d018      	beq.n	8008064 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8008032:	4b72      	ldr	r3, [pc, #456]	@ (80081fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8008034:	68db      	ldr	r3, [r3, #12]
 8008036:	f003 0203 	and.w	r2, r3, #3
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	429a      	cmp	r2, r3
 8008040:	d10d      	bne.n	800805e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
       ||
 8008046:	2b00      	cmp	r3, #0
 8008048:	d009      	beq.n	800805e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800804a:	4b6c      	ldr	r3, [pc, #432]	@ (80081fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800804c:	68db      	ldr	r3, [r3, #12]
 800804e:	091b      	lsrs	r3, r3, #4
 8008050:	f003 0307 	and.w	r3, r3, #7
 8008054:	1c5a      	adds	r2, r3, #1
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	685b      	ldr	r3, [r3, #4]
       ||
 800805a:	429a      	cmp	r2, r3
 800805c:	d047      	beq.n	80080ee <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800805e:	2301      	movs	r3, #1
 8008060:	73fb      	strb	r3, [r7, #15]
 8008062:	e044      	b.n	80080ee <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	2b03      	cmp	r3, #3
 800806a:	d018      	beq.n	800809e <RCCEx_PLLSAI1_Config+0x86>
 800806c:	2b03      	cmp	r3, #3
 800806e:	d825      	bhi.n	80080bc <RCCEx_PLLSAI1_Config+0xa4>
 8008070:	2b01      	cmp	r3, #1
 8008072:	d002      	beq.n	800807a <RCCEx_PLLSAI1_Config+0x62>
 8008074:	2b02      	cmp	r3, #2
 8008076:	d009      	beq.n	800808c <RCCEx_PLLSAI1_Config+0x74>
 8008078:	e020      	b.n	80080bc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800807a:	4b60      	ldr	r3, [pc, #384]	@ (80081fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f003 0302 	and.w	r3, r3, #2
 8008082:	2b00      	cmp	r3, #0
 8008084:	d11d      	bne.n	80080c2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8008086:	2301      	movs	r3, #1
 8008088:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800808a:	e01a      	b.n	80080c2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800808c:	4b5b      	ldr	r3, [pc, #364]	@ (80081fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008094:	2b00      	cmp	r3, #0
 8008096:	d116      	bne.n	80080c6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8008098:	2301      	movs	r3, #1
 800809a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800809c:	e013      	b.n	80080c6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800809e:	4b57      	ldr	r3, [pc, #348]	@ (80081fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d10f      	bne.n	80080ca <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80080aa:	4b54      	ldr	r3, [pc, #336]	@ (80081fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d109      	bne.n	80080ca <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80080b6:	2301      	movs	r3, #1
 80080b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80080ba:	e006      	b.n	80080ca <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80080bc:	2301      	movs	r3, #1
 80080be:	73fb      	strb	r3, [r7, #15]
      break;
 80080c0:	e004      	b.n	80080cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80080c2:	bf00      	nop
 80080c4:	e002      	b.n	80080cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80080c6:	bf00      	nop
 80080c8:	e000      	b.n	80080cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80080ca:	bf00      	nop
    }

    if(status == HAL_OK)
 80080cc:	7bfb      	ldrb	r3, [r7, #15]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d10d      	bne.n	80080ee <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80080d2:	4b4a      	ldr	r3, [pc, #296]	@ (80081fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80080d4:	68db      	ldr	r3, [r3, #12]
 80080d6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6819      	ldr	r1, [r3, #0]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	3b01      	subs	r3, #1
 80080e4:	011b      	lsls	r3, r3, #4
 80080e6:	430b      	orrs	r3, r1
 80080e8:	4944      	ldr	r1, [pc, #272]	@ (80081fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80080ea:	4313      	orrs	r3, r2
 80080ec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80080ee:	7bfb      	ldrb	r3, [r7, #15]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d17d      	bne.n	80081f0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80080f4:	4b41      	ldr	r3, [pc, #260]	@ (80081fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4a40      	ldr	r2, [pc, #256]	@ (80081fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80080fa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80080fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008100:	f7fd f860 	bl	80051c4 <HAL_GetTick>
 8008104:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008106:	e009      	b.n	800811c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008108:	f7fd f85c 	bl	80051c4 <HAL_GetTick>
 800810c:	4602      	mov	r2, r0
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	1ad3      	subs	r3, r2, r3
 8008112:	2b02      	cmp	r3, #2
 8008114:	d902      	bls.n	800811c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8008116:	2303      	movs	r3, #3
 8008118:	73fb      	strb	r3, [r7, #15]
        break;
 800811a:	e005      	b.n	8008128 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800811c:	4b37      	ldr	r3, [pc, #220]	@ (80081fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008124:	2b00      	cmp	r3, #0
 8008126:	d1ef      	bne.n	8008108 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8008128:	7bfb      	ldrb	r3, [r7, #15]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d160      	bne.n	80081f0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d111      	bne.n	8008158 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008134:	4b31      	ldr	r3, [pc, #196]	@ (80081fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8008136:	691b      	ldr	r3, [r3, #16]
 8008138:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800813c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008140:	687a      	ldr	r2, [r7, #4]
 8008142:	6892      	ldr	r2, [r2, #8]
 8008144:	0211      	lsls	r1, r2, #8
 8008146:	687a      	ldr	r2, [r7, #4]
 8008148:	68d2      	ldr	r2, [r2, #12]
 800814a:	0912      	lsrs	r2, r2, #4
 800814c:	0452      	lsls	r2, r2, #17
 800814e:	430a      	orrs	r2, r1
 8008150:	492a      	ldr	r1, [pc, #168]	@ (80081fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8008152:	4313      	orrs	r3, r2
 8008154:	610b      	str	r3, [r1, #16]
 8008156:	e027      	b.n	80081a8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	2b01      	cmp	r3, #1
 800815c:	d112      	bne.n	8008184 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800815e:	4b27      	ldr	r3, [pc, #156]	@ (80081fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8008160:	691b      	ldr	r3, [r3, #16]
 8008162:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8008166:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800816a:	687a      	ldr	r2, [r7, #4]
 800816c:	6892      	ldr	r2, [r2, #8]
 800816e:	0211      	lsls	r1, r2, #8
 8008170:	687a      	ldr	r2, [r7, #4]
 8008172:	6912      	ldr	r2, [r2, #16]
 8008174:	0852      	lsrs	r2, r2, #1
 8008176:	3a01      	subs	r2, #1
 8008178:	0552      	lsls	r2, r2, #21
 800817a:	430a      	orrs	r2, r1
 800817c:	491f      	ldr	r1, [pc, #124]	@ (80081fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800817e:	4313      	orrs	r3, r2
 8008180:	610b      	str	r3, [r1, #16]
 8008182:	e011      	b.n	80081a8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008184:	4b1d      	ldr	r3, [pc, #116]	@ (80081fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8008186:	691b      	ldr	r3, [r3, #16]
 8008188:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800818c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8008190:	687a      	ldr	r2, [r7, #4]
 8008192:	6892      	ldr	r2, [r2, #8]
 8008194:	0211      	lsls	r1, r2, #8
 8008196:	687a      	ldr	r2, [r7, #4]
 8008198:	6952      	ldr	r2, [r2, #20]
 800819a:	0852      	lsrs	r2, r2, #1
 800819c:	3a01      	subs	r2, #1
 800819e:	0652      	lsls	r2, r2, #25
 80081a0:	430a      	orrs	r2, r1
 80081a2:	4916      	ldr	r1, [pc, #88]	@ (80081fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80081a4:	4313      	orrs	r3, r2
 80081a6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80081a8:	4b14      	ldr	r3, [pc, #80]	@ (80081fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4a13      	ldr	r2, [pc, #76]	@ (80081fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80081ae:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80081b2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081b4:	f7fd f806 	bl	80051c4 <HAL_GetTick>
 80081b8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80081ba:	e009      	b.n	80081d0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80081bc:	f7fd f802 	bl	80051c4 <HAL_GetTick>
 80081c0:	4602      	mov	r2, r0
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	1ad3      	subs	r3, r2, r3
 80081c6:	2b02      	cmp	r3, #2
 80081c8:	d902      	bls.n	80081d0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80081ca:	2303      	movs	r3, #3
 80081cc:	73fb      	strb	r3, [r7, #15]
          break;
 80081ce:	e005      	b.n	80081dc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80081d0:	4b0a      	ldr	r3, [pc, #40]	@ (80081fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d0ef      	beq.n	80081bc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80081dc:	7bfb      	ldrb	r3, [r7, #15]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d106      	bne.n	80081f0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80081e2:	4b06      	ldr	r3, [pc, #24]	@ (80081fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80081e4:	691a      	ldr	r2, [r3, #16]
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	699b      	ldr	r3, [r3, #24]
 80081ea:	4904      	ldr	r1, [pc, #16]	@ (80081fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80081ec:	4313      	orrs	r3, r2
 80081ee:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80081f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3710      	adds	r7, #16
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}
 80081fa:	bf00      	nop
 80081fc:	40021000 	.word	0x40021000

08008200 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b084      	sub	sp, #16
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
 8008208:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800820a:	2300      	movs	r3, #0
 800820c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800820e:	4b6a      	ldr	r3, [pc, #424]	@ (80083b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008210:	68db      	ldr	r3, [r3, #12]
 8008212:	f003 0303 	and.w	r3, r3, #3
 8008216:	2b00      	cmp	r3, #0
 8008218:	d018      	beq.n	800824c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800821a:	4b67      	ldr	r3, [pc, #412]	@ (80083b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800821c:	68db      	ldr	r3, [r3, #12]
 800821e:	f003 0203 	and.w	r2, r3, #3
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	429a      	cmp	r2, r3
 8008228:	d10d      	bne.n	8008246 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
       ||
 800822e:	2b00      	cmp	r3, #0
 8008230:	d009      	beq.n	8008246 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8008232:	4b61      	ldr	r3, [pc, #388]	@ (80083b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008234:	68db      	ldr	r3, [r3, #12]
 8008236:	091b      	lsrs	r3, r3, #4
 8008238:	f003 0307 	and.w	r3, r3, #7
 800823c:	1c5a      	adds	r2, r3, #1
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	685b      	ldr	r3, [r3, #4]
       ||
 8008242:	429a      	cmp	r2, r3
 8008244:	d047      	beq.n	80082d6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8008246:	2301      	movs	r3, #1
 8008248:	73fb      	strb	r3, [r7, #15]
 800824a:	e044      	b.n	80082d6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	2b03      	cmp	r3, #3
 8008252:	d018      	beq.n	8008286 <RCCEx_PLLSAI2_Config+0x86>
 8008254:	2b03      	cmp	r3, #3
 8008256:	d825      	bhi.n	80082a4 <RCCEx_PLLSAI2_Config+0xa4>
 8008258:	2b01      	cmp	r3, #1
 800825a:	d002      	beq.n	8008262 <RCCEx_PLLSAI2_Config+0x62>
 800825c:	2b02      	cmp	r3, #2
 800825e:	d009      	beq.n	8008274 <RCCEx_PLLSAI2_Config+0x74>
 8008260:	e020      	b.n	80082a4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008262:	4b55      	ldr	r3, [pc, #340]	@ (80083b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f003 0302 	and.w	r3, r3, #2
 800826a:	2b00      	cmp	r3, #0
 800826c:	d11d      	bne.n	80082aa <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800826e:	2301      	movs	r3, #1
 8008270:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008272:	e01a      	b.n	80082aa <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008274:	4b50      	ldr	r3, [pc, #320]	@ (80083b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800827c:	2b00      	cmp	r3, #0
 800827e:	d116      	bne.n	80082ae <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8008280:	2301      	movs	r3, #1
 8008282:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008284:	e013      	b.n	80082ae <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008286:	4b4c      	ldr	r3, [pc, #304]	@ (80083b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800828e:	2b00      	cmp	r3, #0
 8008290:	d10f      	bne.n	80082b2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008292:	4b49      	ldr	r3, [pc, #292]	@ (80083b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800829a:	2b00      	cmp	r3, #0
 800829c:	d109      	bne.n	80082b2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800829e:	2301      	movs	r3, #1
 80082a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80082a2:	e006      	b.n	80082b2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80082a4:	2301      	movs	r3, #1
 80082a6:	73fb      	strb	r3, [r7, #15]
      break;
 80082a8:	e004      	b.n	80082b4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80082aa:	bf00      	nop
 80082ac:	e002      	b.n	80082b4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80082ae:	bf00      	nop
 80082b0:	e000      	b.n	80082b4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80082b2:	bf00      	nop
    }

    if(status == HAL_OK)
 80082b4:	7bfb      	ldrb	r3, [r7, #15]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d10d      	bne.n	80082d6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80082ba:	4b3f      	ldr	r3, [pc, #252]	@ (80083b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80082bc:	68db      	ldr	r3, [r3, #12]
 80082be:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6819      	ldr	r1, [r3, #0]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	685b      	ldr	r3, [r3, #4]
 80082ca:	3b01      	subs	r3, #1
 80082cc:	011b      	lsls	r3, r3, #4
 80082ce:	430b      	orrs	r3, r1
 80082d0:	4939      	ldr	r1, [pc, #228]	@ (80083b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80082d2:	4313      	orrs	r3, r2
 80082d4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80082d6:	7bfb      	ldrb	r3, [r7, #15]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d167      	bne.n	80083ac <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80082dc:	4b36      	ldr	r3, [pc, #216]	@ (80083b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a35      	ldr	r2, [pc, #212]	@ (80083b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80082e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80082e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082e8:	f7fc ff6c 	bl	80051c4 <HAL_GetTick>
 80082ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80082ee:	e009      	b.n	8008304 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80082f0:	f7fc ff68 	bl	80051c4 <HAL_GetTick>
 80082f4:	4602      	mov	r2, r0
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	1ad3      	subs	r3, r2, r3
 80082fa:	2b02      	cmp	r3, #2
 80082fc:	d902      	bls.n	8008304 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80082fe:	2303      	movs	r3, #3
 8008300:	73fb      	strb	r3, [r7, #15]
        break;
 8008302:	e005      	b.n	8008310 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008304:	4b2c      	ldr	r3, [pc, #176]	@ (80083b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800830c:	2b00      	cmp	r3, #0
 800830e:	d1ef      	bne.n	80082f0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8008310:	7bfb      	ldrb	r3, [r7, #15]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d14a      	bne.n	80083ac <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d111      	bne.n	8008340 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800831c:	4b26      	ldr	r3, [pc, #152]	@ (80083b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800831e:	695b      	ldr	r3, [r3, #20]
 8008320:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8008324:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008328:	687a      	ldr	r2, [r7, #4]
 800832a:	6892      	ldr	r2, [r2, #8]
 800832c:	0211      	lsls	r1, r2, #8
 800832e:	687a      	ldr	r2, [r7, #4]
 8008330:	68d2      	ldr	r2, [r2, #12]
 8008332:	0912      	lsrs	r2, r2, #4
 8008334:	0452      	lsls	r2, r2, #17
 8008336:	430a      	orrs	r2, r1
 8008338:	491f      	ldr	r1, [pc, #124]	@ (80083b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800833a:	4313      	orrs	r3, r2
 800833c:	614b      	str	r3, [r1, #20]
 800833e:	e011      	b.n	8008364 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008340:	4b1d      	ldr	r3, [pc, #116]	@ (80083b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008342:	695b      	ldr	r3, [r3, #20]
 8008344:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8008348:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800834c:	687a      	ldr	r2, [r7, #4]
 800834e:	6892      	ldr	r2, [r2, #8]
 8008350:	0211      	lsls	r1, r2, #8
 8008352:	687a      	ldr	r2, [r7, #4]
 8008354:	6912      	ldr	r2, [r2, #16]
 8008356:	0852      	lsrs	r2, r2, #1
 8008358:	3a01      	subs	r2, #1
 800835a:	0652      	lsls	r2, r2, #25
 800835c:	430a      	orrs	r2, r1
 800835e:	4916      	ldr	r1, [pc, #88]	@ (80083b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008360:	4313      	orrs	r3, r2
 8008362:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8008364:	4b14      	ldr	r3, [pc, #80]	@ (80083b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4a13      	ldr	r2, [pc, #76]	@ (80083b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800836a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800836e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008370:	f7fc ff28 	bl	80051c4 <HAL_GetTick>
 8008374:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008376:	e009      	b.n	800838c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008378:	f7fc ff24 	bl	80051c4 <HAL_GetTick>
 800837c:	4602      	mov	r2, r0
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	1ad3      	subs	r3, r2, r3
 8008382:	2b02      	cmp	r3, #2
 8008384:	d902      	bls.n	800838c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8008386:	2303      	movs	r3, #3
 8008388:	73fb      	strb	r3, [r7, #15]
          break;
 800838a:	e005      	b.n	8008398 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800838c:	4b0a      	ldr	r3, [pc, #40]	@ (80083b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008394:	2b00      	cmp	r3, #0
 8008396:	d0ef      	beq.n	8008378 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8008398:	7bfb      	ldrb	r3, [r7, #15]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d106      	bne.n	80083ac <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800839e:	4b06      	ldr	r3, [pc, #24]	@ (80083b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80083a0:	695a      	ldr	r2, [r3, #20]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	695b      	ldr	r3, [r3, #20]
 80083a6:	4904      	ldr	r1, [pc, #16]	@ (80083b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80083a8:	4313      	orrs	r3, r2
 80083aa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80083ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3710      	adds	r7, #16
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}
 80083b6:	bf00      	nop
 80083b8:	40021000 	.word	0x40021000

080083bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b084      	sub	sp, #16
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d101      	bne.n	80083ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80083ca:	2301      	movs	r3, #1
 80083cc:	e095      	b.n	80084fa <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d108      	bne.n	80083e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	685b      	ldr	r3, [r3, #4]
 80083da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80083de:	d009      	beq.n	80083f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2200      	movs	r2, #0
 80083e4:	61da      	str	r2, [r3, #28]
 80083e6:	e005      	b.n	80083f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2200      	movs	r2, #0
 80083ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2200      	movs	r2, #0
 80083f2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2200      	movs	r2, #0
 80083f8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008400:	b2db      	uxtb	r3, r3
 8008402:	2b00      	cmp	r3, #0
 8008404:	d106      	bne.n	8008414 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2200      	movs	r2, #0
 800840a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f000 f877 	bl	8008502 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2202      	movs	r2, #2
 8008418:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	681a      	ldr	r2, [r3, #0]
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800842a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	68db      	ldr	r3, [r3, #12]
 8008430:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008434:	d902      	bls.n	800843c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008436:	2300      	movs	r3, #0
 8008438:	60fb      	str	r3, [r7, #12]
 800843a:	e002      	b.n	8008442 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800843c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008440:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	68db      	ldr	r3, [r3, #12]
 8008446:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800844a:	d007      	beq.n	800845c <HAL_SPI_Init+0xa0>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	68db      	ldr	r3, [r3, #12]
 8008450:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008454:	d002      	beq.n	800845c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2200      	movs	r2, #0
 800845a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	689b      	ldr	r3, [r3, #8]
 8008468:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800846c:	431a      	orrs	r2, r3
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	691b      	ldr	r3, [r3, #16]
 8008472:	f003 0302 	and.w	r3, r3, #2
 8008476:	431a      	orrs	r2, r3
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	695b      	ldr	r3, [r3, #20]
 800847c:	f003 0301 	and.w	r3, r3, #1
 8008480:	431a      	orrs	r2, r3
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	699b      	ldr	r3, [r3, #24]
 8008486:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800848a:	431a      	orrs	r2, r3
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	69db      	ldr	r3, [r3, #28]
 8008490:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008494:	431a      	orrs	r2, r3
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6a1b      	ldr	r3, [r3, #32]
 800849a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800849e:	ea42 0103 	orr.w	r1, r2, r3
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084a6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	430a      	orrs	r2, r1
 80084b0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	699b      	ldr	r3, [r3, #24]
 80084b6:	0c1b      	lsrs	r3, r3, #16
 80084b8:	f003 0204 	and.w	r2, r3, #4
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084c0:	f003 0310 	and.w	r3, r3, #16
 80084c4:	431a      	orrs	r2, r3
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084ca:	f003 0308 	and.w	r3, r3, #8
 80084ce:	431a      	orrs	r2, r3
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	68db      	ldr	r3, [r3, #12]
 80084d4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80084d8:	ea42 0103 	orr.w	r1, r2, r3
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	430a      	orrs	r2, r1
 80084e8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2200      	movs	r2, #0
 80084ee:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2201      	movs	r2, #1
 80084f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80084f8:	2300      	movs	r3, #0
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3710      	adds	r7, #16
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}

08008502 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8008502:	b480      	push	{r7}
 8008504:	b083      	sub	sp, #12
 8008506:	af00      	add	r7, sp, #0
 8008508:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 800850a:	bf00      	nop
 800850c:	370c      	adds	r7, #12
 800850e:	46bd      	mov	sp, r7
 8008510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008514:	4770      	bx	lr

08008516 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008516:	b580      	push	{r7, lr}
 8008518:	b08a      	sub	sp, #40	@ 0x28
 800851a:	af00      	add	r7, sp, #0
 800851c:	60f8      	str	r0, [r7, #12]
 800851e:	60b9      	str	r1, [r7, #8]
 8008520:	607a      	str	r2, [r7, #4]
 8008522:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008524:	2301      	movs	r3, #1
 8008526:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008528:	f7fc fe4c 	bl	80051c4 <HAL_GetTick>
 800852c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008534:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	685b      	ldr	r3, [r3, #4]
 800853a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800853c:	887b      	ldrh	r3, [r7, #2]
 800853e:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8008540:	887b      	ldrh	r3, [r7, #2]
 8008542:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008544:	7ffb      	ldrb	r3, [r7, #31]
 8008546:	2b01      	cmp	r3, #1
 8008548:	d00c      	beq.n	8008564 <HAL_SPI_TransmitReceive+0x4e>
 800854a:	69bb      	ldr	r3, [r7, #24]
 800854c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008550:	d106      	bne.n	8008560 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	689b      	ldr	r3, [r3, #8]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d102      	bne.n	8008560 <HAL_SPI_TransmitReceive+0x4a>
 800855a:	7ffb      	ldrb	r3, [r7, #31]
 800855c:	2b04      	cmp	r3, #4
 800855e:	d001      	beq.n	8008564 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8008560:	2302      	movs	r3, #2
 8008562:	e1f3      	b.n	800894c <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d005      	beq.n	8008576 <HAL_SPI_TransmitReceive+0x60>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d002      	beq.n	8008576 <HAL_SPI_TransmitReceive+0x60>
 8008570:	887b      	ldrh	r3, [r7, #2]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d101      	bne.n	800857a <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8008576:	2301      	movs	r3, #1
 8008578:	e1e8      	b.n	800894c <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008580:	2b01      	cmp	r3, #1
 8008582:	d101      	bne.n	8008588 <HAL_SPI_TransmitReceive+0x72>
 8008584:	2302      	movs	r3, #2
 8008586:	e1e1      	b.n	800894c <HAL_SPI_TransmitReceive+0x436>
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	2201      	movs	r2, #1
 800858c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008596:	b2db      	uxtb	r3, r3
 8008598:	2b04      	cmp	r3, #4
 800859a:	d003      	beq.n	80085a4 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	2205      	movs	r2, #5
 80085a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	2200      	movs	r2, #0
 80085a8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	687a      	ldr	r2, [r7, #4]
 80085ae:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	887a      	ldrh	r2, [r7, #2]
 80085b4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	887a      	ldrh	r2, [r7, #2]
 80085bc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	68ba      	ldr	r2, [r7, #8]
 80085c4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	887a      	ldrh	r2, [r7, #2]
 80085ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	887a      	ldrh	r2, [r7, #2]
 80085d0:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	2200      	movs	r2, #0
 80085d6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	2200      	movs	r2, #0
 80085dc:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	68db      	ldr	r3, [r3, #12]
 80085e2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80085e6:	d802      	bhi.n	80085ee <HAL_SPI_TransmitReceive+0xd8>
 80085e8:	8abb      	ldrh	r3, [r7, #20]
 80085ea:	2b01      	cmp	r3, #1
 80085ec:	d908      	bls.n	8008600 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	685a      	ldr	r2, [r3, #4]
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80085fc:	605a      	str	r2, [r3, #4]
 80085fe:	e007      	b.n	8008610 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	685a      	ldr	r2, [r3, #4]
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800860e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800861a:	2b40      	cmp	r3, #64	@ 0x40
 800861c:	d007      	beq.n	800862e <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	681a      	ldr	r2, [r3, #0]
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800862c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	68db      	ldr	r3, [r3, #12]
 8008632:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008636:	f240 8083 	bls.w	8008740 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d002      	beq.n	8008648 <HAL_SPI_TransmitReceive+0x132>
 8008642:	8afb      	ldrh	r3, [r7, #22]
 8008644:	2b01      	cmp	r3, #1
 8008646:	d16f      	bne.n	8008728 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800864c:	881a      	ldrh	r2, [r3, #0]
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008658:	1c9a      	adds	r2, r3, #2
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008662:	b29b      	uxth	r3, r3
 8008664:	3b01      	subs	r3, #1
 8008666:	b29a      	uxth	r2, r3
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800866c:	e05c      	b.n	8008728 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	689b      	ldr	r3, [r3, #8]
 8008674:	f003 0302 	and.w	r3, r3, #2
 8008678:	2b02      	cmp	r3, #2
 800867a:	d11b      	bne.n	80086b4 <HAL_SPI_TransmitReceive+0x19e>
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008680:	b29b      	uxth	r3, r3
 8008682:	2b00      	cmp	r3, #0
 8008684:	d016      	beq.n	80086b4 <HAL_SPI_TransmitReceive+0x19e>
 8008686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008688:	2b01      	cmp	r3, #1
 800868a:	d113      	bne.n	80086b4 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008690:	881a      	ldrh	r2, [r3, #0]
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800869c:	1c9a      	adds	r2, r3, #2
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80086a6:	b29b      	uxth	r3, r3
 80086a8:	3b01      	subs	r3, #1
 80086aa:	b29a      	uxth	r2, r3
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80086b0:	2300      	movs	r3, #0
 80086b2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	689b      	ldr	r3, [r3, #8]
 80086ba:	f003 0301 	and.w	r3, r3, #1
 80086be:	2b01      	cmp	r3, #1
 80086c0:	d11c      	bne.n	80086fc <HAL_SPI_TransmitReceive+0x1e6>
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80086c8:	b29b      	uxth	r3, r3
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d016      	beq.n	80086fc <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	68da      	ldr	r2, [r3, #12]
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086d8:	b292      	uxth	r2, r2
 80086da:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086e0:	1c9a      	adds	r2, r3, #2
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80086ec:	b29b      	uxth	r3, r3
 80086ee:	3b01      	subs	r3, #1
 80086f0:	b29a      	uxth	r2, r3
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80086f8:	2301      	movs	r3, #1
 80086fa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80086fc:	f7fc fd62 	bl	80051c4 <HAL_GetTick>
 8008700:	4602      	mov	r2, r0
 8008702:	6a3b      	ldr	r3, [r7, #32]
 8008704:	1ad3      	subs	r3, r2, r3
 8008706:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008708:	429a      	cmp	r2, r3
 800870a:	d80d      	bhi.n	8008728 <HAL_SPI_TransmitReceive+0x212>
 800870c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800870e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008712:	d009      	beq.n	8008728 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	2201      	movs	r2, #1
 8008718:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	2200      	movs	r2, #0
 8008720:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8008724:	2303      	movs	r3, #3
 8008726:	e111      	b.n	800894c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800872c:	b29b      	uxth	r3, r3
 800872e:	2b00      	cmp	r3, #0
 8008730:	d19d      	bne.n	800866e <HAL_SPI_TransmitReceive+0x158>
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008738:	b29b      	uxth	r3, r3
 800873a:	2b00      	cmp	r3, #0
 800873c:	d197      	bne.n	800866e <HAL_SPI_TransmitReceive+0x158>
 800873e:	e0e5      	b.n	800890c <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	685b      	ldr	r3, [r3, #4]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d003      	beq.n	8008750 <HAL_SPI_TransmitReceive+0x23a>
 8008748:	8afb      	ldrh	r3, [r7, #22]
 800874a:	2b01      	cmp	r3, #1
 800874c:	f040 80d1 	bne.w	80088f2 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008754:	b29b      	uxth	r3, r3
 8008756:	2b01      	cmp	r3, #1
 8008758:	d912      	bls.n	8008780 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800875e:	881a      	ldrh	r2, [r3, #0]
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800876a:	1c9a      	adds	r2, r3, #2
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008774:	b29b      	uxth	r3, r3
 8008776:	3b02      	subs	r3, #2
 8008778:	b29a      	uxth	r2, r3
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800877e:	e0b8      	b.n	80088f2 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	330c      	adds	r3, #12
 800878a:	7812      	ldrb	r2, [r2, #0]
 800878c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008792:	1c5a      	adds	r2, r3, #1
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800879c:	b29b      	uxth	r3, r3
 800879e:	3b01      	subs	r3, #1
 80087a0:	b29a      	uxth	r2, r3
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80087a6:	e0a4      	b.n	80088f2 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	689b      	ldr	r3, [r3, #8]
 80087ae:	f003 0302 	and.w	r3, r3, #2
 80087b2:	2b02      	cmp	r3, #2
 80087b4:	d134      	bne.n	8008820 <HAL_SPI_TransmitReceive+0x30a>
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80087ba:	b29b      	uxth	r3, r3
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d02f      	beq.n	8008820 <HAL_SPI_TransmitReceive+0x30a>
 80087c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087c2:	2b01      	cmp	r3, #1
 80087c4:	d12c      	bne.n	8008820 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80087ca:	b29b      	uxth	r3, r3
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	d912      	bls.n	80087f6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087d4:	881a      	ldrh	r2, [r3, #0]
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087e0:	1c9a      	adds	r2, r3, #2
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80087ea:	b29b      	uxth	r3, r3
 80087ec:	3b02      	subs	r3, #2
 80087ee:	b29a      	uxth	r2, r3
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80087f4:	e012      	b.n	800881c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	330c      	adds	r3, #12
 8008800:	7812      	ldrb	r2, [r2, #0]
 8008802:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008808:	1c5a      	adds	r2, r3, #1
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008812:	b29b      	uxth	r3, r3
 8008814:	3b01      	subs	r3, #1
 8008816:	b29a      	uxth	r2, r3
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800881c:	2300      	movs	r3, #0
 800881e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	689b      	ldr	r3, [r3, #8]
 8008826:	f003 0301 	and.w	r3, r3, #1
 800882a:	2b01      	cmp	r3, #1
 800882c:	d148      	bne.n	80088c0 <HAL_SPI_TransmitReceive+0x3aa>
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008834:	b29b      	uxth	r3, r3
 8008836:	2b00      	cmp	r3, #0
 8008838:	d042      	beq.n	80088c0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008840:	b29b      	uxth	r3, r3
 8008842:	2b01      	cmp	r3, #1
 8008844:	d923      	bls.n	800888e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	68da      	ldr	r2, [r3, #12]
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008850:	b292      	uxth	r2, r2
 8008852:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008858:	1c9a      	adds	r2, r3, #2
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008864:	b29b      	uxth	r3, r3
 8008866:	3b02      	subs	r3, #2
 8008868:	b29a      	uxth	r2, r3
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008876:	b29b      	uxth	r3, r3
 8008878:	2b01      	cmp	r3, #1
 800887a:	d81f      	bhi.n	80088bc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	685a      	ldr	r2, [r3, #4]
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800888a:	605a      	str	r2, [r3, #4]
 800888c:	e016      	b.n	80088bc <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f103 020c 	add.w	r2, r3, #12
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800889a:	7812      	ldrb	r2, [r2, #0]
 800889c:	b2d2      	uxtb	r2, r2
 800889e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088a4:	1c5a      	adds	r2, r3, #1
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80088b0:	b29b      	uxth	r3, r3
 80088b2:	3b01      	subs	r3, #1
 80088b4:	b29a      	uxth	r2, r3
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80088bc:	2301      	movs	r3, #1
 80088be:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80088c0:	f7fc fc80 	bl	80051c4 <HAL_GetTick>
 80088c4:	4602      	mov	r2, r0
 80088c6:	6a3b      	ldr	r3, [r7, #32]
 80088c8:	1ad3      	subs	r3, r2, r3
 80088ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80088cc:	429a      	cmp	r2, r3
 80088ce:	d803      	bhi.n	80088d8 <HAL_SPI_TransmitReceive+0x3c2>
 80088d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088d6:	d102      	bne.n	80088de <HAL_SPI_TransmitReceive+0x3c8>
 80088d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d109      	bne.n	80088f2 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2201      	movs	r2, #1
 80088e2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	2200      	movs	r2, #0
 80088ea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80088ee:	2303      	movs	r3, #3
 80088f0:	e02c      	b.n	800894c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80088f6:	b29b      	uxth	r3, r3
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	f47f af55 	bne.w	80087a8 <HAL_SPI_TransmitReceive+0x292>
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008904:	b29b      	uxth	r3, r3
 8008906:	2b00      	cmp	r3, #0
 8008908:	f47f af4e 	bne.w	80087a8 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800890c:	6a3a      	ldr	r2, [r7, #32]
 800890e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008910:	68f8      	ldr	r0, [r7, #12]
 8008912:	f000 f94b 	bl	8008bac <SPI_EndRxTxTransaction>
 8008916:	4603      	mov	r3, r0
 8008918:	2b00      	cmp	r3, #0
 800891a:	d008      	beq.n	800892e <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	2220      	movs	r2, #32
 8008920:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	2200      	movs	r2, #0
 8008926:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800892a:	2301      	movs	r3, #1
 800892c:	e00e      	b.n	800894c <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2201      	movs	r2, #1
 8008932:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	2200      	movs	r2, #0
 800893a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008942:	2b00      	cmp	r3, #0
 8008944:	d001      	beq.n	800894a <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8008946:	2301      	movs	r3, #1
 8008948:	e000      	b.n	800894c <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800894a:	2300      	movs	r3, #0
  }
}
 800894c:	4618      	mov	r0, r3
 800894e:	3728      	adds	r7, #40	@ 0x28
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}

08008954 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8008954:	b480      	push	{r7}
 8008956:	b083      	sub	sp, #12
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008962:	b2db      	uxtb	r3, r3
}
 8008964:	4618      	mov	r0, r3
 8008966:	370c      	adds	r7, #12
 8008968:	46bd      	mov	sp, r7
 800896a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896e:	4770      	bx	lr

08008970 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b088      	sub	sp, #32
 8008974:	af00      	add	r7, sp, #0
 8008976:	60f8      	str	r0, [r7, #12]
 8008978:	60b9      	str	r1, [r7, #8]
 800897a:	603b      	str	r3, [r7, #0]
 800897c:	4613      	mov	r3, r2
 800897e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008980:	f7fc fc20 	bl	80051c4 <HAL_GetTick>
 8008984:	4602      	mov	r2, r0
 8008986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008988:	1a9b      	subs	r3, r3, r2
 800898a:	683a      	ldr	r2, [r7, #0]
 800898c:	4413      	add	r3, r2
 800898e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008990:	f7fc fc18 	bl	80051c4 <HAL_GetTick>
 8008994:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008996:	4b39      	ldr	r3, [pc, #228]	@ (8008a7c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	015b      	lsls	r3, r3, #5
 800899c:	0d1b      	lsrs	r3, r3, #20
 800899e:	69fa      	ldr	r2, [r7, #28]
 80089a0:	fb02 f303 	mul.w	r3, r2, r3
 80089a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80089a6:	e054      	b.n	8008a52 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089ae:	d050      	beq.n	8008a52 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80089b0:	f7fc fc08 	bl	80051c4 <HAL_GetTick>
 80089b4:	4602      	mov	r2, r0
 80089b6:	69bb      	ldr	r3, [r7, #24]
 80089b8:	1ad3      	subs	r3, r2, r3
 80089ba:	69fa      	ldr	r2, [r7, #28]
 80089bc:	429a      	cmp	r2, r3
 80089be:	d902      	bls.n	80089c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80089c0:	69fb      	ldr	r3, [r7, #28]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d13d      	bne.n	8008a42 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	685a      	ldr	r2, [r3, #4]
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80089d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	685b      	ldr	r3, [r3, #4]
 80089da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80089de:	d111      	bne.n	8008a04 <SPI_WaitFlagStateUntilTimeout+0x94>
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	689b      	ldr	r3, [r3, #8]
 80089e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80089e8:	d004      	beq.n	80089f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	689b      	ldr	r3, [r3, #8]
 80089ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80089f2:	d107      	bne.n	8008a04 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	681a      	ldr	r2, [r3, #0]
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008a02:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a0c:	d10f      	bne.n	8008a2e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	681a      	ldr	r2, [r3, #0]
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008a1c:	601a      	str	r2, [r3, #0]
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	681a      	ldr	r2, [r3, #0]
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008a2c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	2201      	movs	r2, #1
 8008a32:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8008a3e:	2303      	movs	r3, #3
 8008a40:	e017      	b.n	8008a72 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d101      	bne.n	8008a4c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008a48:	2300      	movs	r3, #0
 8008a4a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	3b01      	subs	r3, #1
 8008a50:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	689a      	ldr	r2, [r3, #8]
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	4013      	ands	r3, r2
 8008a5c:	68ba      	ldr	r2, [r7, #8]
 8008a5e:	429a      	cmp	r2, r3
 8008a60:	bf0c      	ite	eq
 8008a62:	2301      	moveq	r3, #1
 8008a64:	2300      	movne	r3, #0
 8008a66:	b2db      	uxtb	r3, r3
 8008a68:	461a      	mov	r2, r3
 8008a6a:	79fb      	ldrb	r3, [r7, #7]
 8008a6c:	429a      	cmp	r2, r3
 8008a6e:	d19b      	bne.n	80089a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008a70:	2300      	movs	r3, #0
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3720      	adds	r7, #32
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}
 8008a7a:	bf00      	nop
 8008a7c:	20000510 	.word	0x20000510

08008a80 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b08a      	sub	sp, #40	@ 0x28
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	60f8      	str	r0, [r7, #12]
 8008a88:	60b9      	str	r1, [r7, #8]
 8008a8a:	607a      	str	r2, [r7, #4]
 8008a8c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008a92:	f7fc fb97 	bl	80051c4 <HAL_GetTick>
 8008a96:	4602      	mov	r2, r0
 8008a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a9a:	1a9b      	subs	r3, r3, r2
 8008a9c:	683a      	ldr	r2, [r7, #0]
 8008a9e:	4413      	add	r3, r2
 8008aa0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8008aa2:	f7fc fb8f 	bl	80051c4 <HAL_GetTick>
 8008aa6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	330c      	adds	r3, #12
 8008aae:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008ab0:	4b3d      	ldr	r3, [pc, #244]	@ (8008ba8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8008ab2:	681a      	ldr	r2, [r3, #0]
 8008ab4:	4613      	mov	r3, r2
 8008ab6:	009b      	lsls	r3, r3, #2
 8008ab8:	4413      	add	r3, r2
 8008aba:	00da      	lsls	r2, r3, #3
 8008abc:	1ad3      	subs	r3, r2, r3
 8008abe:	0d1b      	lsrs	r3, r3, #20
 8008ac0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ac2:	fb02 f303 	mul.w	r3, r2, r3
 8008ac6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008ac8:	e060      	b.n	8008b8c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008ad0:	d107      	bne.n	8008ae2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d104      	bne.n	8008ae2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008ad8:	69fb      	ldr	r3, [r7, #28]
 8008ada:	781b      	ldrb	r3, [r3, #0]
 8008adc:	b2db      	uxtb	r3, r3
 8008ade:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008ae0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ae8:	d050      	beq.n	8008b8c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008aea:	f7fc fb6b 	bl	80051c4 <HAL_GetTick>
 8008aee:	4602      	mov	r2, r0
 8008af0:	6a3b      	ldr	r3, [r7, #32]
 8008af2:	1ad3      	subs	r3, r2, r3
 8008af4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008af6:	429a      	cmp	r2, r3
 8008af8:	d902      	bls.n	8008b00 <SPI_WaitFifoStateUntilTimeout+0x80>
 8008afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d13d      	bne.n	8008b7c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	685a      	ldr	r2, [r3, #4]
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008b0e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	685b      	ldr	r3, [r3, #4]
 8008b14:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008b18:	d111      	bne.n	8008b3e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	689b      	ldr	r3, [r3, #8]
 8008b1e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008b22:	d004      	beq.n	8008b2e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	689b      	ldr	r3, [r3, #8]
 8008b28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b2c:	d107      	bne.n	8008b3e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	681a      	ldr	r2, [r3, #0]
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008b3c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b46:	d10f      	bne.n	8008b68 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	681a      	ldr	r2, [r3, #0]
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008b56:	601a      	str	r2, [r3, #0]
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	681a      	ldr	r2, [r3, #0]
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008b66:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	2201      	movs	r2, #1
 8008b6c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	2200      	movs	r2, #0
 8008b74:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8008b78:	2303      	movs	r3, #3
 8008b7a:	e010      	b.n	8008b9e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008b7c:	69bb      	ldr	r3, [r7, #24]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d101      	bne.n	8008b86 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8008b82:	2300      	movs	r3, #0
 8008b84:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8008b86:	69bb      	ldr	r3, [r7, #24]
 8008b88:	3b01      	subs	r3, #1
 8008b8a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	689a      	ldr	r2, [r3, #8]
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	4013      	ands	r3, r2
 8008b96:	687a      	ldr	r2, [r7, #4]
 8008b98:	429a      	cmp	r2, r3
 8008b9a:	d196      	bne.n	8008aca <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008b9c:	2300      	movs	r3, #0
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	3728      	adds	r7, #40	@ 0x28
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}
 8008ba6:	bf00      	nop
 8008ba8:	20000510 	.word	0x20000510

08008bac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b086      	sub	sp, #24
 8008bb0:	af02      	add	r7, sp, #8
 8008bb2:	60f8      	str	r0, [r7, #12]
 8008bb4:	60b9      	str	r1, [r7, #8]
 8008bb6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	9300      	str	r3, [sp, #0]
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8008bc4:	68f8      	ldr	r0, [r7, #12]
 8008bc6:	f7ff ff5b 	bl	8008a80 <SPI_WaitFifoStateUntilTimeout>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d007      	beq.n	8008be0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008bd4:	f043 0220 	orr.w	r2, r3, #32
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008bdc:	2303      	movs	r3, #3
 8008bde:	e027      	b.n	8008c30 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	9300      	str	r3, [sp, #0]
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	2200      	movs	r2, #0
 8008be8:	2180      	movs	r1, #128	@ 0x80
 8008bea:	68f8      	ldr	r0, [r7, #12]
 8008bec:	f7ff fec0 	bl	8008970 <SPI_WaitFlagStateUntilTimeout>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d007      	beq.n	8008c06 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008bfa:	f043 0220 	orr.w	r2, r3, #32
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008c02:	2303      	movs	r3, #3
 8008c04:	e014      	b.n	8008c30 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	9300      	str	r3, [sp, #0]
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8008c12:	68f8      	ldr	r0, [r7, #12]
 8008c14:	f7ff ff34 	bl	8008a80 <SPI_WaitFifoStateUntilTimeout>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d007      	beq.n	8008c2e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008c22:	f043 0220 	orr.w	r2, r3, #32
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008c2a:	2303      	movs	r3, #3
 8008c2c:	e000      	b.n	8008c30 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008c2e:	2300      	movs	r3, #0
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3710      	adds	r7, #16
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}

08008c38 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b082      	sub	sp, #8
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d101      	bne.n	8008c4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008c46:	2301      	movs	r3, #1
 8008c48:	e040      	b.n	8008ccc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d106      	bne.n	8008c60 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2200      	movs	r2, #0
 8008c56:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f7fb fa36 	bl	80040cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2224      	movs	r2, #36	@ 0x24
 8008c64:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	681a      	ldr	r2, [r3, #0]
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f022 0201 	bic.w	r2, r2, #1
 8008c74:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d002      	beq.n	8008c84 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f000 fb6a 	bl	8009358 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	f000 f8af 	bl	8008de8 <UART_SetConfig>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	2b01      	cmp	r3, #1
 8008c8e:	d101      	bne.n	8008c94 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8008c90:	2301      	movs	r3, #1
 8008c92:	e01b      	b.n	8008ccc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	685a      	ldr	r2, [r3, #4]
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008ca2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	689a      	ldr	r2, [r3, #8]
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008cb2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	681a      	ldr	r2, [r3, #0]
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f042 0201 	orr.w	r2, r2, #1
 8008cc2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f000 fbe9 	bl	800949c <UART_CheckIdleState>
 8008cca:	4603      	mov	r3, r0
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3708      	adds	r7, #8
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}

08008cd4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b08a      	sub	sp, #40	@ 0x28
 8008cd8:	af02      	add	r7, sp, #8
 8008cda:	60f8      	str	r0, [r7, #12]
 8008cdc:	60b9      	str	r1, [r7, #8]
 8008cde:	603b      	str	r3, [r7, #0]
 8008ce0:	4613      	mov	r3, r2
 8008ce2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008ce8:	2b20      	cmp	r3, #32
 8008cea:	d177      	bne.n	8008ddc <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d002      	beq.n	8008cf8 <HAL_UART_Transmit+0x24>
 8008cf2:	88fb      	ldrh	r3, [r7, #6]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d101      	bne.n	8008cfc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	e070      	b.n	8008dde <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	2221      	movs	r2, #33	@ 0x21
 8008d08:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008d0a:	f7fc fa5b 	bl	80051c4 <HAL_GetTick>
 8008d0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	88fa      	ldrh	r2, [r7, #6]
 8008d14:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	88fa      	ldrh	r2, [r7, #6]
 8008d1c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	689b      	ldr	r3, [r3, #8]
 8008d24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d28:	d108      	bne.n	8008d3c <HAL_UART_Transmit+0x68>
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	691b      	ldr	r3, [r3, #16]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d104      	bne.n	8008d3c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8008d32:	2300      	movs	r3, #0
 8008d34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	61bb      	str	r3, [r7, #24]
 8008d3a:	e003      	b.n	8008d44 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008d40:	2300      	movs	r3, #0
 8008d42:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008d44:	e02f      	b.n	8008da6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	9300      	str	r3, [sp, #0]
 8008d4a:	697b      	ldr	r3, [r7, #20]
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	2180      	movs	r1, #128	@ 0x80
 8008d50:	68f8      	ldr	r0, [r7, #12]
 8008d52:	f000 fc4b 	bl	80095ec <UART_WaitOnFlagUntilTimeout>
 8008d56:	4603      	mov	r3, r0
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d004      	beq.n	8008d66 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	2220      	movs	r2, #32
 8008d60:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8008d62:	2303      	movs	r3, #3
 8008d64:	e03b      	b.n	8008dde <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8008d66:	69fb      	ldr	r3, [r7, #28]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d10b      	bne.n	8008d84 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008d6c:	69bb      	ldr	r3, [r7, #24]
 8008d6e:	881a      	ldrh	r2, [r3, #0]
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d78:	b292      	uxth	r2, r2
 8008d7a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008d7c:	69bb      	ldr	r3, [r7, #24]
 8008d7e:	3302      	adds	r3, #2
 8008d80:	61bb      	str	r3, [r7, #24]
 8008d82:	e007      	b.n	8008d94 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008d84:	69fb      	ldr	r3, [r7, #28]
 8008d86:	781a      	ldrb	r2, [r3, #0]
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008d8e:	69fb      	ldr	r3, [r7, #28]
 8008d90:	3301      	adds	r3, #1
 8008d92:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008d9a:	b29b      	uxth	r3, r3
 8008d9c:	3b01      	subs	r3, #1
 8008d9e:	b29a      	uxth	r2, r3
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008dac:	b29b      	uxth	r3, r3
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d1c9      	bne.n	8008d46 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	9300      	str	r3, [sp, #0]
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	2200      	movs	r2, #0
 8008dba:	2140      	movs	r1, #64	@ 0x40
 8008dbc:	68f8      	ldr	r0, [r7, #12]
 8008dbe:	f000 fc15 	bl	80095ec <UART_WaitOnFlagUntilTimeout>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d004      	beq.n	8008dd2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	2220      	movs	r2, #32
 8008dcc:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8008dce:	2303      	movs	r3, #3
 8008dd0:	e005      	b.n	8008dde <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	2220      	movs	r2, #32
 8008dd6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8008dd8:	2300      	movs	r3, #0
 8008dda:	e000      	b.n	8008dde <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8008ddc:	2302      	movs	r3, #2
  }
}
 8008dde:	4618      	mov	r0, r3
 8008de0:	3720      	adds	r7, #32
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bd80      	pop	{r7, pc}
	...

08008de8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008de8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008dec:	b08a      	sub	sp, #40	@ 0x28
 8008dee:	af00      	add	r7, sp, #0
 8008df0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008df2:	2300      	movs	r3, #0
 8008df4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	689a      	ldr	r2, [r3, #8]
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	691b      	ldr	r3, [r3, #16]
 8008e00:	431a      	orrs	r2, r3
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	695b      	ldr	r3, [r3, #20]
 8008e06:	431a      	orrs	r2, r3
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	69db      	ldr	r3, [r3, #28]
 8008e0c:	4313      	orrs	r3, r2
 8008e0e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	681a      	ldr	r2, [r3, #0]
 8008e16:	4ba4      	ldr	r3, [pc, #656]	@ (80090a8 <UART_SetConfig+0x2c0>)
 8008e18:	4013      	ands	r3, r2
 8008e1a:	68fa      	ldr	r2, [r7, #12]
 8008e1c:	6812      	ldr	r2, [r2, #0]
 8008e1e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008e20:	430b      	orrs	r3, r1
 8008e22:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	685b      	ldr	r3, [r3, #4]
 8008e2a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	68da      	ldr	r2, [r3, #12]
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	430a      	orrs	r2, r1
 8008e38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	699b      	ldr	r3, [r3, #24]
 8008e3e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	4a99      	ldr	r2, [pc, #612]	@ (80090ac <UART_SetConfig+0x2c4>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d004      	beq.n	8008e54 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	6a1b      	ldr	r3, [r3, #32]
 8008e4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e50:	4313      	orrs	r3, r2
 8008e52:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	689b      	ldr	r3, [r3, #8]
 8008e5a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e64:	430a      	orrs	r2, r1
 8008e66:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4a90      	ldr	r2, [pc, #576]	@ (80090b0 <UART_SetConfig+0x2c8>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d126      	bne.n	8008ec0 <UART_SetConfig+0xd8>
 8008e72:	4b90      	ldr	r3, [pc, #576]	@ (80090b4 <UART_SetConfig+0x2cc>)
 8008e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e78:	f003 0303 	and.w	r3, r3, #3
 8008e7c:	2b03      	cmp	r3, #3
 8008e7e:	d81b      	bhi.n	8008eb8 <UART_SetConfig+0xd0>
 8008e80:	a201      	add	r2, pc, #4	@ (adr r2, 8008e88 <UART_SetConfig+0xa0>)
 8008e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e86:	bf00      	nop
 8008e88:	08008e99 	.word	0x08008e99
 8008e8c:	08008ea9 	.word	0x08008ea9
 8008e90:	08008ea1 	.word	0x08008ea1
 8008e94:	08008eb1 	.word	0x08008eb1
 8008e98:	2301      	movs	r3, #1
 8008e9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008e9e:	e116      	b.n	80090ce <UART_SetConfig+0x2e6>
 8008ea0:	2302      	movs	r3, #2
 8008ea2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008ea6:	e112      	b.n	80090ce <UART_SetConfig+0x2e6>
 8008ea8:	2304      	movs	r3, #4
 8008eaa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008eae:	e10e      	b.n	80090ce <UART_SetConfig+0x2e6>
 8008eb0:	2308      	movs	r3, #8
 8008eb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008eb6:	e10a      	b.n	80090ce <UART_SetConfig+0x2e6>
 8008eb8:	2310      	movs	r3, #16
 8008eba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008ebe:	e106      	b.n	80090ce <UART_SetConfig+0x2e6>
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	4a7c      	ldr	r2, [pc, #496]	@ (80090b8 <UART_SetConfig+0x2d0>)
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d138      	bne.n	8008f3c <UART_SetConfig+0x154>
 8008eca:	4b7a      	ldr	r3, [pc, #488]	@ (80090b4 <UART_SetConfig+0x2cc>)
 8008ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ed0:	f003 030c 	and.w	r3, r3, #12
 8008ed4:	2b0c      	cmp	r3, #12
 8008ed6:	d82d      	bhi.n	8008f34 <UART_SetConfig+0x14c>
 8008ed8:	a201      	add	r2, pc, #4	@ (adr r2, 8008ee0 <UART_SetConfig+0xf8>)
 8008eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ede:	bf00      	nop
 8008ee0:	08008f15 	.word	0x08008f15
 8008ee4:	08008f35 	.word	0x08008f35
 8008ee8:	08008f35 	.word	0x08008f35
 8008eec:	08008f35 	.word	0x08008f35
 8008ef0:	08008f25 	.word	0x08008f25
 8008ef4:	08008f35 	.word	0x08008f35
 8008ef8:	08008f35 	.word	0x08008f35
 8008efc:	08008f35 	.word	0x08008f35
 8008f00:	08008f1d 	.word	0x08008f1d
 8008f04:	08008f35 	.word	0x08008f35
 8008f08:	08008f35 	.word	0x08008f35
 8008f0c:	08008f35 	.word	0x08008f35
 8008f10:	08008f2d 	.word	0x08008f2d
 8008f14:	2300      	movs	r3, #0
 8008f16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008f1a:	e0d8      	b.n	80090ce <UART_SetConfig+0x2e6>
 8008f1c:	2302      	movs	r3, #2
 8008f1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008f22:	e0d4      	b.n	80090ce <UART_SetConfig+0x2e6>
 8008f24:	2304      	movs	r3, #4
 8008f26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008f2a:	e0d0      	b.n	80090ce <UART_SetConfig+0x2e6>
 8008f2c:	2308      	movs	r3, #8
 8008f2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008f32:	e0cc      	b.n	80090ce <UART_SetConfig+0x2e6>
 8008f34:	2310      	movs	r3, #16
 8008f36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008f3a:	e0c8      	b.n	80090ce <UART_SetConfig+0x2e6>
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	4a5e      	ldr	r2, [pc, #376]	@ (80090bc <UART_SetConfig+0x2d4>)
 8008f42:	4293      	cmp	r3, r2
 8008f44:	d125      	bne.n	8008f92 <UART_SetConfig+0x1aa>
 8008f46:	4b5b      	ldr	r3, [pc, #364]	@ (80090b4 <UART_SetConfig+0x2cc>)
 8008f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f4c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008f50:	2b30      	cmp	r3, #48	@ 0x30
 8008f52:	d016      	beq.n	8008f82 <UART_SetConfig+0x19a>
 8008f54:	2b30      	cmp	r3, #48	@ 0x30
 8008f56:	d818      	bhi.n	8008f8a <UART_SetConfig+0x1a2>
 8008f58:	2b20      	cmp	r3, #32
 8008f5a:	d00a      	beq.n	8008f72 <UART_SetConfig+0x18a>
 8008f5c:	2b20      	cmp	r3, #32
 8008f5e:	d814      	bhi.n	8008f8a <UART_SetConfig+0x1a2>
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d002      	beq.n	8008f6a <UART_SetConfig+0x182>
 8008f64:	2b10      	cmp	r3, #16
 8008f66:	d008      	beq.n	8008f7a <UART_SetConfig+0x192>
 8008f68:	e00f      	b.n	8008f8a <UART_SetConfig+0x1a2>
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008f70:	e0ad      	b.n	80090ce <UART_SetConfig+0x2e6>
 8008f72:	2302      	movs	r3, #2
 8008f74:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008f78:	e0a9      	b.n	80090ce <UART_SetConfig+0x2e6>
 8008f7a:	2304      	movs	r3, #4
 8008f7c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008f80:	e0a5      	b.n	80090ce <UART_SetConfig+0x2e6>
 8008f82:	2308      	movs	r3, #8
 8008f84:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008f88:	e0a1      	b.n	80090ce <UART_SetConfig+0x2e6>
 8008f8a:	2310      	movs	r3, #16
 8008f8c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008f90:	e09d      	b.n	80090ce <UART_SetConfig+0x2e6>
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	4a4a      	ldr	r2, [pc, #296]	@ (80090c0 <UART_SetConfig+0x2d8>)
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	d125      	bne.n	8008fe8 <UART_SetConfig+0x200>
 8008f9c:	4b45      	ldr	r3, [pc, #276]	@ (80090b4 <UART_SetConfig+0x2cc>)
 8008f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008fa2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008fa6:	2bc0      	cmp	r3, #192	@ 0xc0
 8008fa8:	d016      	beq.n	8008fd8 <UART_SetConfig+0x1f0>
 8008faa:	2bc0      	cmp	r3, #192	@ 0xc0
 8008fac:	d818      	bhi.n	8008fe0 <UART_SetConfig+0x1f8>
 8008fae:	2b80      	cmp	r3, #128	@ 0x80
 8008fb0:	d00a      	beq.n	8008fc8 <UART_SetConfig+0x1e0>
 8008fb2:	2b80      	cmp	r3, #128	@ 0x80
 8008fb4:	d814      	bhi.n	8008fe0 <UART_SetConfig+0x1f8>
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d002      	beq.n	8008fc0 <UART_SetConfig+0x1d8>
 8008fba:	2b40      	cmp	r3, #64	@ 0x40
 8008fbc:	d008      	beq.n	8008fd0 <UART_SetConfig+0x1e8>
 8008fbe:	e00f      	b.n	8008fe0 <UART_SetConfig+0x1f8>
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008fc6:	e082      	b.n	80090ce <UART_SetConfig+0x2e6>
 8008fc8:	2302      	movs	r3, #2
 8008fca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008fce:	e07e      	b.n	80090ce <UART_SetConfig+0x2e6>
 8008fd0:	2304      	movs	r3, #4
 8008fd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008fd6:	e07a      	b.n	80090ce <UART_SetConfig+0x2e6>
 8008fd8:	2308      	movs	r3, #8
 8008fda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008fde:	e076      	b.n	80090ce <UART_SetConfig+0x2e6>
 8008fe0:	2310      	movs	r3, #16
 8008fe2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008fe6:	e072      	b.n	80090ce <UART_SetConfig+0x2e6>
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	4a35      	ldr	r2, [pc, #212]	@ (80090c4 <UART_SetConfig+0x2dc>)
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	d12a      	bne.n	8009048 <UART_SetConfig+0x260>
 8008ff2:	4b30      	ldr	r3, [pc, #192]	@ (80090b4 <UART_SetConfig+0x2cc>)
 8008ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ff8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008ffc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009000:	d01a      	beq.n	8009038 <UART_SetConfig+0x250>
 8009002:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009006:	d81b      	bhi.n	8009040 <UART_SetConfig+0x258>
 8009008:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800900c:	d00c      	beq.n	8009028 <UART_SetConfig+0x240>
 800900e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009012:	d815      	bhi.n	8009040 <UART_SetConfig+0x258>
 8009014:	2b00      	cmp	r3, #0
 8009016:	d003      	beq.n	8009020 <UART_SetConfig+0x238>
 8009018:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800901c:	d008      	beq.n	8009030 <UART_SetConfig+0x248>
 800901e:	e00f      	b.n	8009040 <UART_SetConfig+0x258>
 8009020:	2300      	movs	r3, #0
 8009022:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009026:	e052      	b.n	80090ce <UART_SetConfig+0x2e6>
 8009028:	2302      	movs	r3, #2
 800902a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800902e:	e04e      	b.n	80090ce <UART_SetConfig+0x2e6>
 8009030:	2304      	movs	r3, #4
 8009032:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009036:	e04a      	b.n	80090ce <UART_SetConfig+0x2e6>
 8009038:	2308      	movs	r3, #8
 800903a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800903e:	e046      	b.n	80090ce <UART_SetConfig+0x2e6>
 8009040:	2310      	movs	r3, #16
 8009042:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009046:	e042      	b.n	80090ce <UART_SetConfig+0x2e6>
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	4a17      	ldr	r2, [pc, #92]	@ (80090ac <UART_SetConfig+0x2c4>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d13a      	bne.n	80090c8 <UART_SetConfig+0x2e0>
 8009052:	4b18      	ldr	r3, [pc, #96]	@ (80090b4 <UART_SetConfig+0x2cc>)
 8009054:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009058:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800905c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009060:	d01a      	beq.n	8009098 <UART_SetConfig+0x2b0>
 8009062:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009066:	d81b      	bhi.n	80090a0 <UART_SetConfig+0x2b8>
 8009068:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800906c:	d00c      	beq.n	8009088 <UART_SetConfig+0x2a0>
 800906e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009072:	d815      	bhi.n	80090a0 <UART_SetConfig+0x2b8>
 8009074:	2b00      	cmp	r3, #0
 8009076:	d003      	beq.n	8009080 <UART_SetConfig+0x298>
 8009078:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800907c:	d008      	beq.n	8009090 <UART_SetConfig+0x2a8>
 800907e:	e00f      	b.n	80090a0 <UART_SetConfig+0x2b8>
 8009080:	2300      	movs	r3, #0
 8009082:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009086:	e022      	b.n	80090ce <UART_SetConfig+0x2e6>
 8009088:	2302      	movs	r3, #2
 800908a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800908e:	e01e      	b.n	80090ce <UART_SetConfig+0x2e6>
 8009090:	2304      	movs	r3, #4
 8009092:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009096:	e01a      	b.n	80090ce <UART_SetConfig+0x2e6>
 8009098:	2308      	movs	r3, #8
 800909a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800909e:	e016      	b.n	80090ce <UART_SetConfig+0x2e6>
 80090a0:	2310      	movs	r3, #16
 80090a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80090a6:	e012      	b.n	80090ce <UART_SetConfig+0x2e6>
 80090a8:	efff69f3 	.word	0xefff69f3
 80090ac:	40008000 	.word	0x40008000
 80090b0:	40013800 	.word	0x40013800
 80090b4:	40021000 	.word	0x40021000
 80090b8:	40004400 	.word	0x40004400
 80090bc:	40004800 	.word	0x40004800
 80090c0:	40004c00 	.word	0x40004c00
 80090c4:	40005000 	.word	0x40005000
 80090c8:	2310      	movs	r3, #16
 80090ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	4a9f      	ldr	r2, [pc, #636]	@ (8009350 <UART_SetConfig+0x568>)
 80090d4:	4293      	cmp	r3, r2
 80090d6:	d17a      	bne.n	80091ce <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80090d8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80090dc:	2b08      	cmp	r3, #8
 80090de:	d824      	bhi.n	800912a <UART_SetConfig+0x342>
 80090e0:	a201      	add	r2, pc, #4	@ (adr r2, 80090e8 <UART_SetConfig+0x300>)
 80090e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090e6:	bf00      	nop
 80090e8:	0800910d 	.word	0x0800910d
 80090ec:	0800912b 	.word	0x0800912b
 80090f0:	08009115 	.word	0x08009115
 80090f4:	0800912b 	.word	0x0800912b
 80090f8:	0800911b 	.word	0x0800911b
 80090fc:	0800912b 	.word	0x0800912b
 8009100:	0800912b 	.word	0x0800912b
 8009104:	0800912b 	.word	0x0800912b
 8009108:	08009123 	.word	0x08009123
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800910c:	f7fe fbfe 	bl	800790c <HAL_RCC_GetPCLK1Freq>
 8009110:	61f8      	str	r0, [r7, #28]
        break;
 8009112:	e010      	b.n	8009136 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009114:	4b8f      	ldr	r3, [pc, #572]	@ (8009354 <UART_SetConfig+0x56c>)
 8009116:	61fb      	str	r3, [r7, #28]
        break;
 8009118:	e00d      	b.n	8009136 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800911a:	f7fe fb5f 	bl	80077dc <HAL_RCC_GetSysClockFreq>
 800911e:	61f8      	str	r0, [r7, #28]
        break;
 8009120:	e009      	b.n	8009136 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009122:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009126:	61fb      	str	r3, [r7, #28]
        break;
 8009128:	e005      	b.n	8009136 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800912a:	2300      	movs	r3, #0
 800912c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800912e:	2301      	movs	r3, #1
 8009130:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8009134:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009136:	69fb      	ldr	r3, [r7, #28]
 8009138:	2b00      	cmp	r3, #0
 800913a:	f000 80fb 	beq.w	8009334 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	685a      	ldr	r2, [r3, #4]
 8009142:	4613      	mov	r3, r2
 8009144:	005b      	lsls	r3, r3, #1
 8009146:	4413      	add	r3, r2
 8009148:	69fa      	ldr	r2, [r7, #28]
 800914a:	429a      	cmp	r2, r3
 800914c:	d305      	bcc.n	800915a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	685b      	ldr	r3, [r3, #4]
 8009152:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009154:	69fa      	ldr	r2, [r7, #28]
 8009156:	429a      	cmp	r2, r3
 8009158:	d903      	bls.n	8009162 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800915a:	2301      	movs	r3, #1
 800915c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8009160:	e0e8      	b.n	8009334 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8009162:	69fb      	ldr	r3, [r7, #28]
 8009164:	2200      	movs	r2, #0
 8009166:	461c      	mov	r4, r3
 8009168:	4615      	mov	r5, r2
 800916a:	f04f 0200 	mov.w	r2, #0
 800916e:	f04f 0300 	mov.w	r3, #0
 8009172:	022b      	lsls	r3, r5, #8
 8009174:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8009178:	0222      	lsls	r2, r4, #8
 800917a:	68f9      	ldr	r1, [r7, #12]
 800917c:	6849      	ldr	r1, [r1, #4]
 800917e:	0849      	lsrs	r1, r1, #1
 8009180:	2000      	movs	r0, #0
 8009182:	4688      	mov	r8, r1
 8009184:	4681      	mov	r9, r0
 8009186:	eb12 0a08 	adds.w	sl, r2, r8
 800918a:	eb43 0b09 	adc.w	fp, r3, r9
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	685b      	ldr	r3, [r3, #4]
 8009192:	2200      	movs	r2, #0
 8009194:	603b      	str	r3, [r7, #0]
 8009196:	607a      	str	r2, [r7, #4]
 8009198:	e9d7 2300 	ldrd	r2, r3, [r7]
 800919c:	4650      	mov	r0, sl
 800919e:	4659      	mov	r1, fp
 80091a0:	f7f7 fd72 	bl	8000c88 <__aeabi_uldivmod>
 80091a4:	4602      	mov	r2, r0
 80091a6:	460b      	mov	r3, r1
 80091a8:	4613      	mov	r3, r2
 80091aa:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80091ac:	69bb      	ldr	r3, [r7, #24]
 80091ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80091b2:	d308      	bcc.n	80091c6 <UART_SetConfig+0x3de>
 80091b4:	69bb      	ldr	r3, [r7, #24]
 80091b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80091ba:	d204      	bcs.n	80091c6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	69ba      	ldr	r2, [r7, #24]
 80091c2:	60da      	str	r2, [r3, #12]
 80091c4:	e0b6      	b.n	8009334 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80091c6:	2301      	movs	r3, #1
 80091c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80091cc:	e0b2      	b.n	8009334 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	69db      	ldr	r3, [r3, #28]
 80091d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80091d6:	d15e      	bne.n	8009296 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80091d8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80091dc:	2b08      	cmp	r3, #8
 80091de:	d828      	bhi.n	8009232 <UART_SetConfig+0x44a>
 80091e0:	a201      	add	r2, pc, #4	@ (adr r2, 80091e8 <UART_SetConfig+0x400>)
 80091e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091e6:	bf00      	nop
 80091e8:	0800920d 	.word	0x0800920d
 80091ec:	08009215 	.word	0x08009215
 80091f0:	0800921d 	.word	0x0800921d
 80091f4:	08009233 	.word	0x08009233
 80091f8:	08009223 	.word	0x08009223
 80091fc:	08009233 	.word	0x08009233
 8009200:	08009233 	.word	0x08009233
 8009204:	08009233 	.word	0x08009233
 8009208:	0800922b 	.word	0x0800922b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800920c:	f7fe fb7e 	bl	800790c <HAL_RCC_GetPCLK1Freq>
 8009210:	61f8      	str	r0, [r7, #28]
        break;
 8009212:	e014      	b.n	800923e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009214:	f7fe fb90 	bl	8007938 <HAL_RCC_GetPCLK2Freq>
 8009218:	61f8      	str	r0, [r7, #28]
        break;
 800921a:	e010      	b.n	800923e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800921c:	4b4d      	ldr	r3, [pc, #308]	@ (8009354 <UART_SetConfig+0x56c>)
 800921e:	61fb      	str	r3, [r7, #28]
        break;
 8009220:	e00d      	b.n	800923e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009222:	f7fe fadb 	bl	80077dc <HAL_RCC_GetSysClockFreq>
 8009226:	61f8      	str	r0, [r7, #28]
        break;
 8009228:	e009      	b.n	800923e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800922a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800922e:	61fb      	str	r3, [r7, #28]
        break;
 8009230:	e005      	b.n	800923e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8009232:	2300      	movs	r3, #0
 8009234:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009236:	2301      	movs	r3, #1
 8009238:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800923c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800923e:	69fb      	ldr	r3, [r7, #28]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d077      	beq.n	8009334 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009244:	69fb      	ldr	r3, [r7, #28]
 8009246:	005a      	lsls	r2, r3, #1
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	685b      	ldr	r3, [r3, #4]
 800924c:	085b      	lsrs	r3, r3, #1
 800924e:	441a      	add	r2, r3
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	685b      	ldr	r3, [r3, #4]
 8009254:	fbb2 f3f3 	udiv	r3, r2, r3
 8009258:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800925a:	69bb      	ldr	r3, [r7, #24]
 800925c:	2b0f      	cmp	r3, #15
 800925e:	d916      	bls.n	800928e <UART_SetConfig+0x4a6>
 8009260:	69bb      	ldr	r3, [r7, #24]
 8009262:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009266:	d212      	bcs.n	800928e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009268:	69bb      	ldr	r3, [r7, #24]
 800926a:	b29b      	uxth	r3, r3
 800926c:	f023 030f 	bic.w	r3, r3, #15
 8009270:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009272:	69bb      	ldr	r3, [r7, #24]
 8009274:	085b      	lsrs	r3, r3, #1
 8009276:	b29b      	uxth	r3, r3
 8009278:	f003 0307 	and.w	r3, r3, #7
 800927c:	b29a      	uxth	r2, r3
 800927e:	8afb      	ldrh	r3, [r7, #22]
 8009280:	4313      	orrs	r3, r2
 8009282:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	8afa      	ldrh	r2, [r7, #22]
 800928a:	60da      	str	r2, [r3, #12]
 800928c:	e052      	b.n	8009334 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800928e:	2301      	movs	r3, #1
 8009290:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8009294:	e04e      	b.n	8009334 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009296:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800929a:	2b08      	cmp	r3, #8
 800929c:	d827      	bhi.n	80092ee <UART_SetConfig+0x506>
 800929e:	a201      	add	r2, pc, #4	@ (adr r2, 80092a4 <UART_SetConfig+0x4bc>)
 80092a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092a4:	080092c9 	.word	0x080092c9
 80092a8:	080092d1 	.word	0x080092d1
 80092ac:	080092d9 	.word	0x080092d9
 80092b0:	080092ef 	.word	0x080092ef
 80092b4:	080092df 	.word	0x080092df
 80092b8:	080092ef 	.word	0x080092ef
 80092bc:	080092ef 	.word	0x080092ef
 80092c0:	080092ef 	.word	0x080092ef
 80092c4:	080092e7 	.word	0x080092e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80092c8:	f7fe fb20 	bl	800790c <HAL_RCC_GetPCLK1Freq>
 80092cc:	61f8      	str	r0, [r7, #28]
        break;
 80092ce:	e014      	b.n	80092fa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80092d0:	f7fe fb32 	bl	8007938 <HAL_RCC_GetPCLK2Freq>
 80092d4:	61f8      	str	r0, [r7, #28]
        break;
 80092d6:	e010      	b.n	80092fa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80092d8:	4b1e      	ldr	r3, [pc, #120]	@ (8009354 <UART_SetConfig+0x56c>)
 80092da:	61fb      	str	r3, [r7, #28]
        break;
 80092dc:	e00d      	b.n	80092fa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80092de:	f7fe fa7d 	bl	80077dc <HAL_RCC_GetSysClockFreq>
 80092e2:	61f8      	str	r0, [r7, #28]
        break;
 80092e4:	e009      	b.n	80092fa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80092e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80092ea:	61fb      	str	r3, [r7, #28]
        break;
 80092ec:	e005      	b.n	80092fa <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80092ee:	2300      	movs	r3, #0
 80092f0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80092f2:	2301      	movs	r3, #1
 80092f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80092f8:	bf00      	nop
    }

    if (pclk != 0U)
 80092fa:	69fb      	ldr	r3, [r7, #28]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d019      	beq.n	8009334 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	685b      	ldr	r3, [r3, #4]
 8009304:	085a      	lsrs	r2, r3, #1
 8009306:	69fb      	ldr	r3, [r7, #28]
 8009308:	441a      	add	r2, r3
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	685b      	ldr	r3, [r3, #4]
 800930e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009312:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009314:	69bb      	ldr	r3, [r7, #24]
 8009316:	2b0f      	cmp	r3, #15
 8009318:	d909      	bls.n	800932e <UART_SetConfig+0x546>
 800931a:	69bb      	ldr	r3, [r7, #24]
 800931c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009320:	d205      	bcs.n	800932e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009322:	69bb      	ldr	r3, [r7, #24]
 8009324:	b29a      	uxth	r2, r3
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	60da      	str	r2, [r3, #12]
 800932c:	e002      	b.n	8009334 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800932e:	2301      	movs	r3, #1
 8009330:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	2200      	movs	r2, #0
 8009338:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	2200      	movs	r2, #0
 800933e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8009340:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8009344:	4618      	mov	r0, r3
 8009346:	3728      	adds	r7, #40	@ 0x28
 8009348:	46bd      	mov	sp, r7
 800934a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800934e:	bf00      	nop
 8009350:	40008000 	.word	0x40008000
 8009354:	00f42400 	.word	0x00f42400

08009358 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009358:	b480      	push	{r7}
 800935a:	b083      	sub	sp, #12
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009364:	f003 0308 	and.w	r3, r3, #8
 8009368:	2b00      	cmp	r3, #0
 800936a:	d00a      	beq.n	8009382 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	685b      	ldr	r3, [r3, #4]
 8009372:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	430a      	orrs	r2, r1
 8009380:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009386:	f003 0301 	and.w	r3, r3, #1
 800938a:	2b00      	cmp	r3, #0
 800938c:	d00a      	beq.n	80093a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	685b      	ldr	r3, [r3, #4]
 8009394:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	430a      	orrs	r2, r1
 80093a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093a8:	f003 0302 	and.w	r3, r3, #2
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d00a      	beq.n	80093c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	685b      	ldr	r3, [r3, #4]
 80093b6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	430a      	orrs	r2, r1
 80093c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093ca:	f003 0304 	and.w	r3, r3, #4
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d00a      	beq.n	80093e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	685b      	ldr	r3, [r3, #4]
 80093d8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	430a      	orrs	r2, r1
 80093e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093ec:	f003 0310 	and.w	r3, r3, #16
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d00a      	beq.n	800940a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	689b      	ldr	r3, [r3, #8]
 80093fa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	430a      	orrs	r2, r1
 8009408:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800940e:	f003 0320 	and.w	r3, r3, #32
 8009412:	2b00      	cmp	r3, #0
 8009414:	d00a      	beq.n	800942c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	689b      	ldr	r3, [r3, #8]
 800941c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	430a      	orrs	r2, r1
 800942a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009430:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009434:	2b00      	cmp	r3, #0
 8009436:	d01a      	beq.n	800946e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	685b      	ldr	r3, [r3, #4]
 800943e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	430a      	orrs	r2, r1
 800944c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009452:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009456:	d10a      	bne.n	800946e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	685b      	ldr	r3, [r3, #4]
 800945e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	430a      	orrs	r2, r1
 800946c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009472:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009476:	2b00      	cmp	r3, #0
 8009478:	d00a      	beq.n	8009490 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	685b      	ldr	r3, [r3, #4]
 8009480:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	430a      	orrs	r2, r1
 800948e:	605a      	str	r2, [r3, #4]
  }
}
 8009490:	bf00      	nop
 8009492:	370c      	adds	r7, #12
 8009494:	46bd      	mov	sp, r7
 8009496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949a:	4770      	bx	lr

0800949c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b098      	sub	sp, #96	@ 0x60
 80094a0:	af02      	add	r7, sp, #8
 80094a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2200      	movs	r2, #0
 80094a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80094ac:	f7fb fe8a 	bl	80051c4 <HAL_GetTick>
 80094b0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f003 0308 	and.w	r3, r3, #8
 80094bc:	2b08      	cmp	r3, #8
 80094be:	d12e      	bne.n	800951e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80094c0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80094c4:	9300      	str	r3, [sp, #0]
 80094c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80094c8:	2200      	movs	r2, #0
 80094ca:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f000 f88c 	bl	80095ec <UART_WaitOnFlagUntilTimeout>
 80094d4:	4603      	mov	r3, r0
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d021      	beq.n	800951e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094e2:	e853 3f00 	ldrex	r3, [r3]
 80094e6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80094e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80094ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	461a      	mov	r2, r3
 80094f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80094f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80094fa:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094fc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80094fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009500:	e841 2300 	strex	r3, r2, [r1]
 8009504:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009506:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009508:	2b00      	cmp	r3, #0
 800950a:	d1e6      	bne.n	80094da <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2220      	movs	r2, #32
 8009510:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2200      	movs	r2, #0
 8009516:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800951a:	2303      	movs	r3, #3
 800951c:	e062      	b.n	80095e4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	f003 0304 	and.w	r3, r3, #4
 8009528:	2b04      	cmp	r3, #4
 800952a:	d149      	bne.n	80095c0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800952c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009530:	9300      	str	r3, [sp, #0]
 8009532:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009534:	2200      	movs	r2, #0
 8009536:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f000 f856 	bl	80095ec <UART_WaitOnFlagUntilTimeout>
 8009540:	4603      	mov	r3, r0
 8009542:	2b00      	cmp	r3, #0
 8009544:	d03c      	beq.n	80095c0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800954c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800954e:	e853 3f00 	ldrex	r3, [r3]
 8009552:	623b      	str	r3, [r7, #32]
   return(result);
 8009554:	6a3b      	ldr	r3, [r7, #32]
 8009556:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800955a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	461a      	mov	r2, r3
 8009562:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009564:	633b      	str	r3, [r7, #48]	@ 0x30
 8009566:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009568:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800956a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800956c:	e841 2300 	strex	r3, r2, [r1]
 8009570:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009574:	2b00      	cmp	r3, #0
 8009576:	d1e6      	bne.n	8009546 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	3308      	adds	r3, #8
 800957e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009580:	693b      	ldr	r3, [r7, #16]
 8009582:	e853 3f00 	ldrex	r3, [r3]
 8009586:	60fb      	str	r3, [r7, #12]
   return(result);
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	f023 0301 	bic.w	r3, r3, #1
 800958e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	3308      	adds	r3, #8
 8009596:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009598:	61fa      	str	r2, [r7, #28]
 800959a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800959c:	69b9      	ldr	r1, [r7, #24]
 800959e:	69fa      	ldr	r2, [r7, #28]
 80095a0:	e841 2300 	strex	r3, r2, [r1]
 80095a4:	617b      	str	r3, [r7, #20]
   return(result);
 80095a6:	697b      	ldr	r3, [r7, #20]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d1e5      	bne.n	8009578 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2220      	movs	r2, #32
 80095b0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2200      	movs	r2, #0
 80095b8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80095bc:	2303      	movs	r3, #3
 80095be:	e011      	b.n	80095e4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2220      	movs	r2, #32
 80095c4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2220      	movs	r2, #32
 80095ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2200      	movs	r2, #0
 80095d2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2200      	movs	r2, #0
 80095d8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2200      	movs	r2, #0
 80095de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80095e2:	2300      	movs	r3, #0
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	3758      	adds	r7, #88	@ 0x58
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}

080095ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b084      	sub	sp, #16
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	60f8      	str	r0, [r7, #12]
 80095f4:	60b9      	str	r1, [r7, #8]
 80095f6:	603b      	str	r3, [r7, #0]
 80095f8:	4613      	mov	r3, r2
 80095fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80095fc:	e04f      	b.n	800969e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80095fe:	69bb      	ldr	r3, [r7, #24]
 8009600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009604:	d04b      	beq.n	800969e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009606:	f7fb fddd 	bl	80051c4 <HAL_GetTick>
 800960a:	4602      	mov	r2, r0
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	1ad3      	subs	r3, r2, r3
 8009610:	69ba      	ldr	r2, [r7, #24]
 8009612:	429a      	cmp	r2, r3
 8009614:	d302      	bcc.n	800961c <UART_WaitOnFlagUntilTimeout+0x30>
 8009616:	69bb      	ldr	r3, [r7, #24]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d101      	bne.n	8009620 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800961c:	2303      	movs	r3, #3
 800961e:	e04e      	b.n	80096be <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f003 0304 	and.w	r3, r3, #4
 800962a:	2b00      	cmp	r3, #0
 800962c:	d037      	beq.n	800969e <UART_WaitOnFlagUntilTimeout+0xb2>
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	2b80      	cmp	r3, #128	@ 0x80
 8009632:	d034      	beq.n	800969e <UART_WaitOnFlagUntilTimeout+0xb2>
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	2b40      	cmp	r3, #64	@ 0x40
 8009638:	d031      	beq.n	800969e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	69db      	ldr	r3, [r3, #28]
 8009640:	f003 0308 	and.w	r3, r3, #8
 8009644:	2b08      	cmp	r3, #8
 8009646:	d110      	bne.n	800966a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	2208      	movs	r2, #8
 800964e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009650:	68f8      	ldr	r0, [r7, #12]
 8009652:	f000 f838 	bl	80096c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	2208      	movs	r2, #8
 800965a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	2200      	movs	r2, #0
 8009662:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8009666:	2301      	movs	r3, #1
 8009668:	e029      	b.n	80096be <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	69db      	ldr	r3, [r3, #28]
 8009670:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009674:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009678:	d111      	bne.n	800969e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009682:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009684:	68f8      	ldr	r0, [r7, #12]
 8009686:	f000 f81e 	bl	80096c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	2220      	movs	r2, #32
 800968e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	2200      	movs	r2, #0
 8009696:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800969a:	2303      	movs	r3, #3
 800969c:	e00f      	b.n	80096be <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	69da      	ldr	r2, [r3, #28]
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	4013      	ands	r3, r2
 80096a8:	68ba      	ldr	r2, [r7, #8]
 80096aa:	429a      	cmp	r2, r3
 80096ac:	bf0c      	ite	eq
 80096ae:	2301      	moveq	r3, #1
 80096b0:	2300      	movne	r3, #0
 80096b2:	b2db      	uxtb	r3, r3
 80096b4:	461a      	mov	r2, r3
 80096b6:	79fb      	ldrb	r3, [r7, #7]
 80096b8:	429a      	cmp	r2, r3
 80096ba:	d0a0      	beq.n	80095fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80096bc:	2300      	movs	r3, #0
}
 80096be:	4618      	mov	r0, r3
 80096c0:	3710      	adds	r7, #16
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}

080096c6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80096c6:	b480      	push	{r7}
 80096c8:	b095      	sub	sp, #84	@ 0x54
 80096ca:	af00      	add	r7, sp, #0
 80096cc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096d6:	e853 3f00 	ldrex	r3, [r3]
 80096da:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80096dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80096e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	461a      	mov	r2, r3
 80096ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80096ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80096ee:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096f0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80096f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80096f4:	e841 2300 	strex	r3, r2, [r1]
 80096f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80096fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d1e6      	bne.n	80096ce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	3308      	adds	r3, #8
 8009706:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009708:	6a3b      	ldr	r3, [r7, #32]
 800970a:	e853 3f00 	ldrex	r3, [r3]
 800970e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009710:	69fb      	ldr	r3, [r7, #28]
 8009712:	f023 0301 	bic.w	r3, r3, #1
 8009716:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	3308      	adds	r3, #8
 800971e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009720:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009722:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009724:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009726:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009728:	e841 2300 	strex	r3, r2, [r1]
 800972c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800972e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009730:	2b00      	cmp	r3, #0
 8009732:	d1e5      	bne.n	8009700 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009738:	2b01      	cmp	r3, #1
 800973a:	d118      	bne.n	800976e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	e853 3f00 	ldrex	r3, [r3]
 8009748:	60bb      	str	r3, [r7, #8]
   return(result);
 800974a:	68bb      	ldr	r3, [r7, #8]
 800974c:	f023 0310 	bic.w	r3, r3, #16
 8009750:	647b      	str	r3, [r7, #68]	@ 0x44
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	461a      	mov	r2, r3
 8009758:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800975a:	61bb      	str	r3, [r7, #24]
 800975c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800975e:	6979      	ldr	r1, [r7, #20]
 8009760:	69ba      	ldr	r2, [r7, #24]
 8009762:	e841 2300 	strex	r3, r2, [r1]
 8009766:	613b      	str	r3, [r7, #16]
   return(result);
 8009768:	693b      	ldr	r3, [r7, #16]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d1e6      	bne.n	800973c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2220      	movs	r2, #32
 8009772:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	2200      	movs	r2, #0
 800977a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2200      	movs	r2, #0
 8009780:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8009782:	bf00      	nop
 8009784:	3754      	adds	r7, #84	@ 0x54
 8009786:	46bd      	mov	sp, r7
 8009788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978c:	4770      	bx	lr

0800978e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800978e:	b084      	sub	sp, #16
 8009790:	b580      	push	{r7, lr}
 8009792:	b084      	sub	sp, #16
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
 8009798:	f107 001c 	add.w	r0, r7, #28
 800979c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	68db      	ldr	r3, [r3, #12]
 80097a4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80097ac:	6878      	ldr	r0, [r7, #4]
 80097ae:	f000 fa69 	bl	8009c84 <USB_CoreReset>
 80097b2:	4603      	mov	r3, r0
 80097b4:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80097b6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d106      	bne.n	80097cc <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097c2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	639a      	str	r2, [r3, #56]	@ 0x38
 80097ca:	e005      	b.n	80097d8 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097d0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 80097d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80097da:	4618      	mov	r0, r3
 80097dc:	3710      	adds	r7, #16
 80097de:	46bd      	mov	sp, r7
 80097e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80097e4:	b004      	add	sp, #16
 80097e6:	4770      	bx	lr

080097e8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80097e8:	b480      	push	{r7}
 80097ea:	b083      	sub	sp, #12
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	689b      	ldr	r3, [r3, #8]
 80097f4:	f023 0201 	bic.w	r2, r3, #1
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80097fc:	2300      	movs	r3, #0
}
 80097fe:	4618      	mov	r0, r3
 8009800:	370c      	adds	r7, #12
 8009802:	46bd      	mov	sp, r7
 8009804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009808:	4770      	bx	lr

0800980a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800980a:	b580      	push	{r7, lr}
 800980c:	b084      	sub	sp, #16
 800980e:	af00      	add	r7, sp, #0
 8009810:	6078      	str	r0, [r7, #4]
 8009812:	460b      	mov	r3, r1
 8009814:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009816:	2300      	movs	r3, #0
 8009818:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	68db      	ldr	r3, [r3, #12]
 800981e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009826:	78fb      	ldrb	r3, [r7, #3]
 8009828:	2b01      	cmp	r3, #1
 800982a:	d115      	bne.n	8009858 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	68db      	ldr	r3, [r3, #12]
 8009830:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009838:	200a      	movs	r0, #10
 800983a:	f7fb fccf 	bl	80051dc <HAL_Delay>
      ms += 10U;
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	330a      	adds	r3, #10
 8009842:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	f000 fa0f 	bl	8009c68 <USB_GetMode>
 800984a:	4603      	mov	r3, r0
 800984c:	2b01      	cmp	r3, #1
 800984e:	d01e      	beq.n	800988e <USB_SetCurrentMode+0x84>
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	2bc7      	cmp	r3, #199	@ 0xc7
 8009854:	d9f0      	bls.n	8009838 <USB_SetCurrentMode+0x2e>
 8009856:	e01a      	b.n	800988e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009858:	78fb      	ldrb	r3, [r7, #3]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d115      	bne.n	800988a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	68db      	ldr	r3, [r3, #12]
 8009862:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800986a:	200a      	movs	r0, #10
 800986c:	f7fb fcb6 	bl	80051dc <HAL_Delay>
      ms += 10U;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	330a      	adds	r3, #10
 8009874:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	f000 f9f6 	bl	8009c68 <USB_GetMode>
 800987c:	4603      	mov	r3, r0
 800987e:	2b00      	cmp	r3, #0
 8009880:	d005      	beq.n	800988e <USB_SetCurrentMode+0x84>
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	2bc7      	cmp	r3, #199	@ 0xc7
 8009886:	d9f0      	bls.n	800986a <USB_SetCurrentMode+0x60>
 8009888:	e001      	b.n	800988e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800988a:	2301      	movs	r3, #1
 800988c:	e005      	b.n	800989a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	2bc8      	cmp	r3, #200	@ 0xc8
 8009892:	d101      	bne.n	8009898 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009894:	2301      	movs	r3, #1
 8009896:	e000      	b.n	800989a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009898:	2300      	movs	r3, #0
}
 800989a:	4618      	mov	r0, r3
 800989c:	3710      	adds	r7, #16
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}
	...

080098a4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80098a4:	b084      	sub	sp, #16
 80098a6:	b580      	push	{r7, lr}
 80098a8:	b086      	sub	sp, #24
 80098aa:	af00      	add	r7, sp, #0
 80098ac:	6078      	str	r0, [r7, #4]
 80098ae:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80098b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80098b6:	2300      	movs	r3, #0
 80098b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80098be:	2300      	movs	r3, #0
 80098c0:	613b      	str	r3, [r7, #16]
 80098c2:	e009      	b.n	80098d8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80098c4:	687a      	ldr	r2, [r7, #4]
 80098c6:	693b      	ldr	r3, [r7, #16]
 80098c8:	3340      	adds	r3, #64	@ 0x40
 80098ca:	009b      	lsls	r3, r3, #2
 80098cc:	4413      	add	r3, r2
 80098ce:	2200      	movs	r2, #0
 80098d0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80098d2:	693b      	ldr	r3, [r7, #16]
 80098d4:	3301      	adds	r3, #1
 80098d6:	613b      	str	r3, [r7, #16]
 80098d8:	693b      	ldr	r3, [r7, #16]
 80098da:	2b0e      	cmp	r3, #14
 80098dc:	d9f2      	bls.n	80098c4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80098de:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d11c      	bne.n	8009920 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098ec:	685b      	ldr	r3, [r3, #4]
 80098ee:	68fa      	ldr	r2, [r7, #12]
 80098f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80098f4:	f043 0302 	orr.w	r3, r3, #2
 80098f8:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098fe:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	601a      	str	r2, [r3, #0]
 800991e:	e005      	b.n	800992c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009924:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009932:	461a      	mov	r2, r3
 8009934:	2300      	movs	r3, #0
 8009936:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009938:	2103      	movs	r1, #3
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	f000 f95a 	bl	8009bf4 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009940:	2110      	movs	r1, #16
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f000 f8f6 	bl	8009b34 <USB_FlushTxFifo>
 8009948:	4603      	mov	r3, r0
 800994a:	2b00      	cmp	r3, #0
 800994c:	d001      	beq.n	8009952 <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 800994e:	2301      	movs	r3, #1
 8009950:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f000 f920 	bl	8009b98 <USB_FlushRxFifo>
 8009958:	4603      	mov	r3, r0
 800995a:	2b00      	cmp	r3, #0
 800995c:	d001      	beq.n	8009962 <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 800995e:	2301      	movs	r3, #1
 8009960:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009968:	461a      	mov	r2, r3
 800996a:	2300      	movs	r3, #0
 800996c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009974:	461a      	mov	r2, r3
 8009976:	2300      	movs	r3, #0
 8009978:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009980:	461a      	mov	r2, r3
 8009982:	2300      	movs	r3, #0
 8009984:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009986:	2300      	movs	r3, #0
 8009988:	613b      	str	r3, [r7, #16]
 800998a:	e043      	b.n	8009a14 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800998c:	693b      	ldr	r3, [r7, #16]
 800998e:	015a      	lsls	r2, r3, #5
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	4413      	add	r3, r2
 8009994:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800999e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80099a2:	d118      	bne.n	80099d6 <USB_DevInit+0x132>
    {
      if (i == 0U)
 80099a4:	693b      	ldr	r3, [r7, #16]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d10a      	bne.n	80099c0 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80099aa:	693b      	ldr	r3, [r7, #16]
 80099ac:	015a      	lsls	r2, r3, #5
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	4413      	add	r3, r2
 80099b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099b6:	461a      	mov	r2, r3
 80099b8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80099bc:	6013      	str	r3, [r2, #0]
 80099be:	e013      	b.n	80099e8 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80099c0:	693b      	ldr	r3, [r7, #16]
 80099c2:	015a      	lsls	r2, r3, #5
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	4413      	add	r3, r2
 80099c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099cc:	461a      	mov	r2, r3
 80099ce:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80099d2:	6013      	str	r3, [r2, #0]
 80099d4:	e008      	b.n	80099e8 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80099d6:	693b      	ldr	r3, [r7, #16]
 80099d8:	015a      	lsls	r2, r3, #5
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	4413      	add	r3, r2
 80099de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099e2:	461a      	mov	r2, r3
 80099e4:	2300      	movs	r3, #0
 80099e6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80099e8:	693b      	ldr	r3, [r7, #16]
 80099ea:	015a      	lsls	r2, r3, #5
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	4413      	add	r3, r2
 80099f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099f4:	461a      	mov	r2, r3
 80099f6:	2300      	movs	r3, #0
 80099f8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80099fa:	693b      	ldr	r3, [r7, #16]
 80099fc:	015a      	lsls	r2, r3, #5
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	4413      	add	r3, r2
 8009a02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a06:	461a      	mov	r2, r3
 8009a08:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009a0c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009a0e:	693b      	ldr	r3, [r7, #16]
 8009a10:	3301      	adds	r3, #1
 8009a12:	613b      	str	r3, [r7, #16]
 8009a14:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009a18:	461a      	mov	r2, r3
 8009a1a:	693b      	ldr	r3, [r7, #16]
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d3b5      	bcc.n	800998c <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009a20:	2300      	movs	r3, #0
 8009a22:	613b      	str	r3, [r7, #16]
 8009a24:	e043      	b.n	8009aae <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009a26:	693b      	ldr	r3, [r7, #16]
 8009a28:	015a      	lsls	r2, r3, #5
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	4413      	add	r3, r2
 8009a2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009a38:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009a3c:	d118      	bne.n	8009a70 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8009a3e:	693b      	ldr	r3, [r7, #16]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d10a      	bne.n	8009a5a <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009a44:	693b      	ldr	r3, [r7, #16]
 8009a46:	015a      	lsls	r2, r3, #5
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	4413      	add	r3, r2
 8009a4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a50:	461a      	mov	r2, r3
 8009a52:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009a56:	6013      	str	r3, [r2, #0]
 8009a58:	e013      	b.n	8009a82 <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009a5a:	693b      	ldr	r3, [r7, #16]
 8009a5c:	015a      	lsls	r2, r3, #5
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	4413      	add	r3, r2
 8009a62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a66:	461a      	mov	r2, r3
 8009a68:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009a6c:	6013      	str	r3, [r2, #0]
 8009a6e:	e008      	b.n	8009a82 <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009a70:	693b      	ldr	r3, [r7, #16]
 8009a72:	015a      	lsls	r2, r3, #5
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	4413      	add	r3, r2
 8009a78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a7c:	461a      	mov	r2, r3
 8009a7e:	2300      	movs	r3, #0
 8009a80:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009a82:	693b      	ldr	r3, [r7, #16]
 8009a84:	015a      	lsls	r2, r3, #5
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	4413      	add	r3, r2
 8009a8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a8e:	461a      	mov	r2, r3
 8009a90:	2300      	movs	r3, #0
 8009a92:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009a94:	693b      	ldr	r3, [r7, #16]
 8009a96:	015a      	lsls	r2, r3, #5
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	4413      	add	r3, r2
 8009a9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009aa0:	461a      	mov	r2, r3
 8009aa2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009aa6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009aa8:	693b      	ldr	r3, [r7, #16]
 8009aaa:	3301      	adds	r3, #1
 8009aac:	613b      	str	r3, [r7, #16]
 8009aae:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009ab2:	461a      	mov	r2, r3
 8009ab4:	693b      	ldr	r3, [r7, #16]
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	d3b5      	bcc.n	8009a26 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ac0:	691b      	ldr	r3, [r3, #16]
 8009ac2:	68fa      	ldr	r2, [r7, #12]
 8009ac4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009ac8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009acc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009ada:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	699b      	ldr	r3, [r3, #24]
 8009ae0:	f043 0210 	orr.w	r2, r3, #16
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	699a      	ldr	r2, [r3, #24]
 8009aec:	4b10      	ldr	r3, [pc, #64]	@ (8009b30 <USB_DevInit+0x28c>)
 8009aee:	4313      	orrs	r3, r2
 8009af0:	687a      	ldr	r2, [r7, #4]
 8009af2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009af4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d005      	beq.n	8009b08 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	699b      	ldr	r3, [r3, #24]
 8009b00:	f043 0208 	orr.w	r2, r3, #8
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009b08:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009b0c:	2b01      	cmp	r3, #1
 8009b0e:	d107      	bne.n	8009b20 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	699b      	ldr	r3, [r3, #24]
 8009b14:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009b18:	f043 0304 	orr.w	r3, r3, #4
 8009b1c:	687a      	ldr	r2, [r7, #4]
 8009b1e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009b20:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b22:	4618      	mov	r0, r3
 8009b24:	3718      	adds	r7, #24
 8009b26:	46bd      	mov	sp, r7
 8009b28:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009b2c:	b004      	add	sp, #16
 8009b2e:	4770      	bx	lr
 8009b30:	803c3800 	.word	0x803c3800

08009b34 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009b34:	b480      	push	{r7}
 8009b36:	b085      	sub	sp, #20
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
 8009b3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	3301      	adds	r3, #1
 8009b46:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009b4e:	d901      	bls.n	8009b54 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009b50:	2303      	movs	r3, #3
 8009b52:	e01b      	b.n	8009b8c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	691b      	ldr	r3, [r3, #16]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	daf2      	bge.n	8009b42 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	019b      	lsls	r3, r3, #6
 8009b64:	f043 0220 	orr.w	r2, r3, #32
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	3301      	adds	r3, #1
 8009b70:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009b78:	d901      	bls.n	8009b7e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009b7a:	2303      	movs	r3, #3
 8009b7c:	e006      	b.n	8009b8c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	691b      	ldr	r3, [r3, #16]
 8009b82:	f003 0320 	and.w	r3, r3, #32
 8009b86:	2b20      	cmp	r3, #32
 8009b88:	d0f0      	beq.n	8009b6c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009b8a:	2300      	movs	r3, #0
}
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	3714      	adds	r7, #20
 8009b90:	46bd      	mov	sp, r7
 8009b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b96:	4770      	bx	lr

08009b98 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b085      	sub	sp, #20
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	3301      	adds	r3, #1
 8009ba8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009bb0:	d901      	bls.n	8009bb6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009bb2:	2303      	movs	r3, #3
 8009bb4:	e018      	b.n	8009be8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	691b      	ldr	r3, [r3, #16]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	daf2      	bge.n	8009ba4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2210      	movs	r2, #16
 8009bc6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	3301      	adds	r3, #1
 8009bcc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009bd4:	d901      	bls.n	8009bda <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009bd6:	2303      	movs	r3, #3
 8009bd8:	e006      	b.n	8009be8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	691b      	ldr	r3, [r3, #16]
 8009bde:	f003 0310 	and.w	r3, r3, #16
 8009be2:	2b10      	cmp	r3, #16
 8009be4:	d0f0      	beq.n	8009bc8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009be6:	2300      	movs	r3, #0
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	3714      	adds	r7, #20
 8009bec:	46bd      	mov	sp, r7
 8009bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf2:	4770      	bx	lr

08009bf4 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	b085      	sub	sp, #20
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
 8009bfc:	460b      	mov	r3, r1
 8009bfe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c0a:	681a      	ldr	r2, [r3, #0]
 8009c0c:	78fb      	ldrb	r3, [r7, #3]
 8009c0e:	68f9      	ldr	r1, [r7, #12]
 8009c10:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009c14:	4313      	orrs	r3, r2
 8009c16:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009c18:	2300      	movs	r3, #0
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	3714      	adds	r7, #20
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c24:	4770      	bx	lr

08009c26 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009c26:	b480      	push	{r7}
 8009c28:	b085      	sub	sp, #20
 8009c2a:	af00      	add	r7, sp, #0
 8009c2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	68fa      	ldr	r2, [r7, #12]
 8009c3c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009c40:	f023 0303 	bic.w	r3, r3, #3
 8009c44:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c4c:	685b      	ldr	r3, [r3, #4]
 8009c4e:	68fa      	ldr	r2, [r7, #12]
 8009c50:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009c54:	f043 0302 	orr.w	r3, r3, #2
 8009c58:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009c5a:	2300      	movs	r3, #0
}
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	3714      	adds	r7, #20
 8009c60:	46bd      	mov	sp, r7
 8009c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c66:	4770      	bx	lr

08009c68 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009c68:	b480      	push	{r7}
 8009c6a:	b083      	sub	sp, #12
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	695b      	ldr	r3, [r3, #20]
 8009c74:	f003 0301 	and.w	r3, r3, #1
}
 8009c78:	4618      	mov	r0, r3
 8009c7a:	370c      	adds	r7, #12
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c82:	4770      	bx	lr

08009c84 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009c84:	b480      	push	{r7}
 8009c86:	b085      	sub	sp, #20
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	3301      	adds	r3, #1
 8009c94:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009c9c:	d901      	bls.n	8009ca2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009c9e:	2303      	movs	r3, #3
 8009ca0:	e01b      	b.n	8009cda <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	691b      	ldr	r3, [r3, #16]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	daf2      	bge.n	8009c90 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009caa:	2300      	movs	r3, #0
 8009cac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	691b      	ldr	r3, [r3, #16]
 8009cb2:	f043 0201 	orr.w	r2, r3, #1
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	3301      	adds	r3, #1
 8009cbe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009cc6:	d901      	bls.n	8009ccc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009cc8:	2303      	movs	r3, #3
 8009cca:	e006      	b.n	8009cda <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	691b      	ldr	r3, [r3, #16]
 8009cd0:	f003 0301 	and.w	r3, r3, #1
 8009cd4:	2b01      	cmp	r3, #1
 8009cd6:	d0f0      	beq.n	8009cba <USB_CoreReset+0x36>

  return HAL_OK;
 8009cd8:	2300      	movs	r3, #0
}
 8009cda:	4618      	mov	r0, r3
 8009cdc:	3714      	adds	r7, #20
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce4:	4770      	bx	lr

08009ce6 <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 8009ce6:	b580      	push	{r7, lr}
 8009ce8:	b08c      	sub	sp, #48	@ 0x30
 8009cea:	af00      	add	r7, sp, #0
 8009cec:	603b      	str	r3, [r7, #0]
 8009cee:	4603      	mov	r3, r0
 8009cf0:	71fb      	strb	r3, [r7, #7]
 8009cf2:	460b      	mov	r3, r1
 8009cf4:	71bb      	strb	r3, [r7, #6]
 8009cf6:	4613      	mov	r3, r2
 8009cf8:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 8009cfa:	79fb      	ldrb	r3, [r7, #7]
 8009cfc:	753b      	strb	r3, [r7, #20]
  cp.privacy_enabled = privacy_enabled;
 8009cfe:	79bb      	ldrb	r3, [r7, #6]
 8009d00:	757b      	strb	r3, [r7, #21]
  cp.device_name_char_len = device_name_char_len;
 8009d02:	797b      	ldrb	r3, [r7, #5]
 8009d04:	75bb      	strb	r3, [r7, #22]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8009d06:	f107 030c 	add.w	r3, r7, #12
 8009d0a:	2207      	movs	r2, #7
 8009d0c:	2100      	movs	r1, #0
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f004 fb03 	bl	800e31a <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009d14:	f107 0318 	add.w	r3, r7, #24
 8009d18:	2218      	movs	r2, #24
 8009d1a:	2100      	movs	r1, #0
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	f004 fafc 	bl	800e31a <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8009d22:	233f      	movs	r3, #63	@ 0x3f
 8009d24:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_GAP_INIT;
 8009d26:	238a      	movs	r3, #138	@ 0x8a
 8009d28:	837b      	strh	r3, [r7, #26]
  rq.cparam = &cp;
 8009d2a:	f107 0314 	add.w	r3, r7, #20
 8009d2e:	623b      	str	r3, [r7, #32]
  rq.clen = sizeof(cp);
 8009d30:	2303      	movs	r3, #3
 8009d32:	627b      	str	r3, [r7, #36]	@ 0x24
  rq.rparam = &resp;
 8009d34:	f107 030c 	add.w	r3, r7, #12
 8009d38:	62bb      	str	r3, [r7, #40]	@ 0x28
  rq.rlen = GAP_INIT_RP_SIZE;
 8009d3a:	2307      	movs	r3, #7
 8009d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 8009d3e:	f107 0318 	add.w	r3, r7, #24
 8009d42:	2100      	movs	r1, #0
 8009d44:	4618      	mov	r0, r3
 8009d46:	f000 ff41 	bl	800abcc <hci_send_req>
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	da01      	bge.n	8009d54 <aci_gap_init_IDB05A1+0x6e>
    return BLE_STATUS_TIMEOUT;
 8009d50:	23ff      	movs	r3, #255	@ 0xff
 8009d52:	e014      	b.n	8009d7e <aci_gap_init_IDB05A1+0x98>
  
  if (resp.status) {
 8009d54:	7b3b      	ldrb	r3, [r7, #12]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d001      	beq.n	8009d5e <aci_gap_init_IDB05A1+0x78>
    return resp.status;
 8009d5a:	7b3b      	ldrb	r3, [r7, #12]
 8009d5c:	e00f      	b.n	8009d7e <aci_gap_init_IDB05A1+0x98>
  }
  
  *service_handle = btohs(resp.service_handle);
 8009d5e:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 8009d62:	b29a      	uxth	r2, r3
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8009d68:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 8009d6c:	b29a      	uxth	r2, r3
 8009d6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d70:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8009d72:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 8009d76:	b29a      	uxth	r2, r3
 8009d78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d7a:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8009d7c:	2300      	movs	r3, #0
}
 8009d7e:	4618      	mov	r0, r3
 8009d80:	3730      	adds	r7, #48	@ 0x30
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}

08009d86 <aci_gap_init_IDB04A1>:

tBleStatus aci_gap_init_IDB04A1(uint8_t role, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 8009d86:	b580      	push	{r7, lr}
 8009d88:	b08e      	sub	sp, #56	@ 0x38
 8009d8a:	af00      	add	r7, sp, #0
 8009d8c:	60b9      	str	r1, [r7, #8]
 8009d8e:	607a      	str	r2, [r7, #4]
 8009d90:	603b      	str	r3, [r7, #0]
 8009d92:	4603      	mov	r3, r0
 8009d94:	73fb      	strb	r3, [r7, #15]
  struct hci_request rq;
  gap_init_cp_IDB04A1 cp;
  gap_init_rp resp;

  cp.role = role;
 8009d96:	7bfb      	ldrb	r3, [r7, #15]
 8009d98:	773b      	strb	r3, [r7, #28]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8009d9a:	f107 0314 	add.w	r3, r7, #20
 8009d9e:	2207      	movs	r2, #7
 8009da0:	2100      	movs	r1, #0
 8009da2:	4618      	mov	r0, r3
 8009da4:	f004 fab9 	bl	800e31a <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009da8:	f107 0320 	add.w	r3, r7, #32
 8009dac:	2218      	movs	r2, #24
 8009dae:	2100      	movs	r1, #0
 8009db0:	4618      	mov	r0, r3
 8009db2:	f004 fab2 	bl	800e31a <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8009db6:	233f      	movs	r3, #63	@ 0x3f
 8009db8:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_GAP_INIT;
 8009dba:	238a      	movs	r3, #138	@ 0x8a
 8009dbc:	847b      	strh	r3, [r7, #34]	@ 0x22
  rq.cparam = &cp;
 8009dbe:	f107 031c 	add.w	r3, r7, #28
 8009dc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  rq.clen = sizeof(cp);
 8009dc4:	2301      	movs	r3, #1
 8009dc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  rq.rparam = &resp;
 8009dc8:	f107 0314 	add.w	r3, r7, #20
 8009dcc:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.rlen = GAP_INIT_RP_SIZE;
 8009dce:	2307      	movs	r3, #7
 8009dd0:	637b      	str	r3, [r7, #52]	@ 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 8009dd2:	f107 0320 	add.w	r3, r7, #32
 8009dd6:	2100      	movs	r1, #0
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f000 fef7 	bl	800abcc <hci_send_req>
 8009dde:	4603      	mov	r3, r0
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	da01      	bge.n	8009de8 <aci_gap_init_IDB04A1+0x62>
    return BLE_STATUS_TIMEOUT;
 8009de4:	23ff      	movs	r3, #255	@ 0xff
 8009de6:	e014      	b.n	8009e12 <aci_gap_init_IDB04A1+0x8c>
  
  if (resp.status) {
 8009de8:	7d3b      	ldrb	r3, [r7, #20]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d001      	beq.n	8009df2 <aci_gap_init_IDB04A1+0x6c>
    return resp.status;
 8009dee:	7d3b      	ldrb	r3, [r7, #20]
 8009df0:	e00f      	b.n	8009e12 <aci_gap_init_IDB04A1+0x8c>
  }
  
  *service_handle = btohs(resp.service_handle);
 8009df2:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 8009df6:	b29a      	uxth	r2, r3
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8009dfc:	f8b7 3017 	ldrh.w	r3, [r7, #23]
 8009e00:	b29a      	uxth	r2, r3
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8009e06:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 8009e0a:	b29a      	uxth	r2, r3
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8009e10:	2300      	movs	r3, #0
}
 8009e12:	4618      	mov	r0, r3
 8009e14:	3738      	adds	r7, #56	@ 0x38
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bd80      	pop	{r7, pc}

08009e1a <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 8009e1a:	b590      	push	{r4, r7, lr}
 8009e1c:	b095      	sub	sp, #84	@ 0x54
 8009e1e:	af00      	add	r7, sp, #0
 8009e20:	4604      	mov	r4, r0
 8009e22:	4608      	mov	r0, r1
 8009e24:	4611      	mov	r1, r2
 8009e26:	461a      	mov	r2, r3
 8009e28:	4623      	mov	r3, r4
 8009e2a:	71fb      	strb	r3, [r7, #7]
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	80bb      	strh	r3, [r7, #4]
 8009e30:	460b      	mov	r3, r1
 8009e32:	807b      	strh	r3, [r7, #2]
 8009e34:	4613      	mov	r3, r2
 8009e36:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
 8009e38:	2300      	movs	r3, #0
 8009e3a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 8009e3e:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 8009e42:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8009e46:	4413      	add	r3, r2
 8009e48:	330e      	adds	r3, #14
 8009e4a:	2b28      	cmp	r3, #40	@ 0x28
 8009e4c:	d901      	bls.n	8009e52 <aci_gap_set_discoverable+0x38>
    return BLE_STATUS_INVALID_PARAMS;
 8009e4e:	2342      	movs	r3, #66	@ 0x42
 8009e50:	e0c9      	b.n	8009fe6 <aci_gap_set_discoverable+0x1cc>

  buffer[indx] = AdvType;
 8009e52:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009e56:	3350      	adds	r3, #80	@ 0x50
 8009e58:	443b      	add	r3, r7
 8009e5a:	79fa      	ldrb	r2, [r7, #7]
 8009e5c:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8009e60:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009e64:	3301      	adds	r3, #1
 8009e66:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  AdvIntervMin = htobs(AdvIntervMin);
 8009e6a:	88bb      	ldrh	r3, [r7, #4]
 8009e6c:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 8009e6e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009e72:	f107 0208 	add.w	r2, r7, #8
 8009e76:	4413      	add	r3, r2
 8009e78:	88ba      	ldrh	r2, [r7, #4]
 8009e7a:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8009e7c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009e80:	3302      	adds	r3, #2
 8009e82:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  AdvIntervMax = htobs(AdvIntervMax);
 8009e86:	887b      	ldrh	r3, [r7, #2]
 8009e88:	807b      	strh	r3, [r7, #2]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 8009e8a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009e8e:	f107 0208 	add.w	r2, r7, #8
 8009e92:	4413      	add	r3, r2
 8009e94:	887a      	ldrh	r2, [r7, #2]
 8009e96:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8009e98:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009e9c:	3302      	adds	r3, #2
 8009e9e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  buffer[indx] = OwnAddrType;
 8009ea2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009ea6:	3350      	adds	r3, #80	@ 0x50
 8009ea8:	443b      	add	r3, r7
 8009eaa:	79ba      	ldrb	r2, [r7, #6]
 8009eac:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8009eb0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009eb4:	3301      	adds	r3, #1
 8009eb6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  buffer[indx] = AdvFilterPolicy;
 8009eba:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009ebe:	3350      	adds	r3, #80	@ 0x50
 8009ec0:	443b      	add	r3, r7
 8009ec2:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 8009ec6:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8009eca:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009ece:	3301      	adds	r3, #1
 8009ed0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  buffer[indx] = LocalNameLen;
 8009ed4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009ed8:	3350      	adds	r3, #80	@ 0x50
 8009eda:	443b      	add	r3, r7
 8009edc:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 8009ee0:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8009ee4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009ee8:	3301      	adds	r3, #1
 8009eea:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 8009eee:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009ef2:	f107 0208 	add.w	r2, r7, #8
 8009ef6:	4413      	add	r3, r2
 8009ef8:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 8009efc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009efe:	4618      	mov	r0, r3
 8009f00:	f004 fc86 	bl	800e810 <memcpy>
  indx +=  LocalNameLen;
 8009f04:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8009f08:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8009f0c:	4413      	add	r3, r2
 8009f0e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  buffer[indx] = ServiceUUIDLen;
 8009f12:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009f16:	3350      	adds	r3, #80	@ 0x50
 8009f18:	443b      	add	r3, r7
 8009f1a:	f897 206c 	ldrb.w	r2, [r7, #108]	@ 0x6c
 8009f1e:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8009f22:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009f26:	3301      	adds	r3, #1
 8009f28:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 8009f2c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009f30:	f107 0208 	add.w	r2, r7, #8
 8009f34:	4413      	add	r3, r2
 8009f36:	f897 206c 	ldrb.w	r2, [r7, #108]	@ 0x6c
 8009f3a:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	f004 fc67 	bl	800e810 <memcpy>
  indx +=  ServiceUUIDLen;  
 8009f42:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8009f46:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8009f4a:	4413      	add	r3, r2
 8009f4c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
 8009f50:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8009f54:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 8009f58:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009f5c:	f107 0208 	add.w	r2, r7, #8
 8009f60:	4413      	add	r3, r2
 8009f62:	f8b7 2074 	ldrh.w	r2, [r7, #116]	@ 0x74
 8009f66:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8009f68:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009f6c:	3302      	adds	r3, #2
 8009f6e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
 8009f72:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 8009f76:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 8009f7a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009f7e:	f107 0208 	add.w	r2, r7, #8
 8009f82:	4413      	add	r3, r2
 8009f84:	f8b7 2078 	ldrh.w	r2, [r7, #120]	@ 0x78
 8009f88:	801a      	strh	r2, [r3, #0]
  indx +=  2;    
 8009f8a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009f8e:	3302      	adds	r3, #2
 8009f90:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009f94:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8009f98:	2218      	movs	r2, #24
 8009f9a:	2100      	movs	r1, #0
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	f004 f9bc 	bl	800e31a <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8009fa2:	233f      	movs	r3, #63	@ 0x3f
 8009fa4:	86bb      	strh	r3, [r7, #52]	@ 0x34
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 8009fa6:	2383      	movs	r3, #131	@ 0x83
 8009fa8:	86fb      	strh	r3, [r7, #54]	@ 0x36
  rq.cparam = (void *)buffer;
 8009faa:	f107 0308 	add.w	r3, r7, #8
 8009fae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.clen = indx;
 8009fb0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009fb4:	643b      	str	r3, [r7, #64]	@ 0x40
  rq.rparam = &status;
 8009fb6:	f107 0333 	add.w	r3, r7, #51	@ 0x33
 8009fba:	647b      	str	r3, [r7, #68]	@ 0x44
  rq.rlen = 1;
 8009fbc:	2301      	movs	r3, #1
 8009fbe:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (hci_send_req(&rq, FALSE) < 0)
 8009fc0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8009fc4:	2100      	movs	r1, #0
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	f000 fe00 	bl	800abcc <hci_send_req>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	da01      	bge.n	8009fd6 <aci_gap_set_discoverable+0x1bc>
    return BLE_STATUS_TIMEOUT;
 8009fd2:	23ff      	movs	r3, #255	@ 0xff
 8009fd4:	e007      	b.n	8009fe6 <aci_gap_set_discoverable+0x1cc>

  if (status) {
 8009fd6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d002      	beq.n	8009fe4 <aci_gap_set_discoverable+0x1ca>
    return status;
 8009fde:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009fe2:	e000      	b.n	8009fe6 <aci_gap_set_discoverable+0x1cc>
  }

  return 0;
 8009fe4:	2300      	movs	r3, #0
}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	3754      	adds	r7, #84	@ 0x54
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd90      	pop	{r4, r7, pc}

08009fee <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 8009fee:	b590      	push	{r4, r7, lr}
 8009ff0:	b091      	sub	sp, #68	@ 0x44
 8009ff2:	af00      	add	r7, sp, #0
 8009ff4:	603a      	str	r2, [r7, #0]
 8009ff6:	461a      	mov	r2, r3
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	71fb      	strb	r3, [r7, #7]
 8009ffc:	460b      	mov	r3, r1
 8009ffe:	71bb      	strb	r3, [r7, #6]
 800a000:	4613      	mov	r3, r2
 800a002:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 800a004:	79fb      	ldrb	r3, [r7, #7]
 800a006:	733b      	strb	r3, [r7, #12]
  cp.oob_enable = oob_enable;
 800a008:	79bb      	ldrb	r3, [r7, #6]
 800a00a:	737b      	strb	r3, [r7, #13]
  /* FIX: check on oob_enable introduced to fix issue in projects for Cortex-M33 */
  if (oob_enable) {
 800a00c:	79bb      	ldrb	r3, [r7, #6]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d00a      	beq.n	800a028 <aci_gap_set_auth_requirement+0x3a>
    BLUENRG_memcpy(cp.oob_data, oob_data, 16);
 800a012:	683a      	ldr	r2, [r7, #0]
 800a014:	f107 030e 	add.w	r3, r7, #14
 800a018:	6814      	ldr	r4, [r2, #0]
 800a01a:	6850      	ldr	r0, [r2, #4]
 800a01c:	6891      	ldr	r1, [r2, #8]
 800a01e:	68d2      	ldr	r2, [r2, #12]
 800a020:	601c      	str	r4, [r3, #0]
 800a022:	6058      	str	r0, [r3, #4]
 800a024:	6099      	str	r1, [r3, #8]
 800a026:	60da      	str	r2, [r3, #12]
  }
  cp.min_encryption_key_size = min_encryption_key_size;
 800a028:	797b      	ldrb	r3, [r7, #5]
 800a02a:	77bb      	strb	r3, [r7, #30]
  cp.max_encryption_key_size = max_encryption_key_size;
 800a02c:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 800a030:	77fb      	strb	r3, [r7, #31]
  cp.use_fixed_pin = use_fixed_pin;
 800a032:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800a036:	f887 3020 	strb.w	r3, [r7, #32]
  cp.fixed_pin = htobl(fixed_pin);
 800a03a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a03c:	f8c7 3021 	str.w	r3, [r7, #33]	@ 0x21
  cp.bonding_mode = bonding_mode;
 800a040:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 800a044:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a048:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800a04c:	2218      	movs	r2, #24
 800a04e:	2100      	movs	r1, #0
 800a050:	4618      	mov	r0, r3
 800a052:	f004 f962 	bl	800e31a <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800a056:	233f      	movs	r3, #63	@ 0x3f
 800a058:	853b      	strh	r3, [r7, #40]	@ 0x28
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 800a05a:	2386      	movs	r3, #134	@ 0x86
 800a05c:	857b      	strh	r3, [r7, #42]	@ 0x2a
  rq.cparam = &cp;
 800a05e:	f107 030c 	add.w	r3, r7, #12
 800a062:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.clen = sizeof(cp);
 800a064:	231a      	movs	r3, #26
 800a066:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.rparam = &status;
 800a068:	f107 030b 	add.w	r3, r7, #11
 800a06c:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.rlen = 1;
 800a06e:	2301      	movs	r3, #1
 800a070:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (hci_send_req(&rq, FALSE) < 0)
 800a072:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800a076:	2100      	movs	r1, #0
 800a078:	4618      	mov	r0, r3
 800a07a:	f000 fda7 	bl	800abcc <hci_send_req>
 800a07e:	4603      	mov	r3, r0
 800a080:	2b00      	cmp	r3, #0
 800a082:	da01      	bge.n	800a088 <aci_gap_set_auth_requirement+0x9a>
    return BLE_STATUS_TIMEOUT;
 800a084:	23ff      	movs	r3, #255	@ 0xff
 800a086:	e005      	b.n	800a094 <aci_gap_set_auth_requirement+0xa6>

  if (status) {
 800a088:	7afb      	ldrb	r3, [r7, #11]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d001      	beq.n	800a092 <aci_gap_set_auth_requirement+0xa4>
    return status;
 800a08e:	7afb      	ldrb	r3, [r7, #11]
 800a090:	e000      	b.n	800a094 <aci_gap_set_auth_requirement+0xa6>
  }
    
  return 0;
 800a092:	2300      	movs	r3, #0
}
 800a094:	4618      	mov	r0, r3
 800a096:	3744      	adds	r7, #68	@ 0x44
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd90      	pop	{r4, r7, pc}

0800a09c <aci_gap_update_adv_data>:
  return status;

}

tBleStatus aci_gap_update_adv_data(uint8_t AdvLen, const uint8_t *AdvData)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b092      	sub	sp, #72	@ 0x48
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	6039      	str	r1, [r7, #0]
 800a0a6:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[32];
  uint8_t indx = 0;
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  if (AdvLen > (sizeof(buffer)-1))
 800a0ae:	79fb      	ldrb	r3, [r7, #7]
 800a0b0:	2b1f      	cmp	r3, #31
 800a0b2:	d901      	bls.n	800a0b8 <aci_gap_update_adv_data+0x1c>
    return BLE_STATUS_INVALID_PARAMS;
 800a0b4:	2342      	movs	r3, #66	@ 0x42
 800a0b6:	e03e      	b.n	800a136 <aci_gap_update_adv_data+0x9a>

  buffer[indx] = AdvLen;
 800a0b8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a0bc:	3348      	adds	r3, #72	@ 0x48
 800a0be:	443b      	add	r3, r7
 800a0c0:	79fa      	ldrb	r2, [r7, #7]
 800a0c2:	f803 2c40 	strb.w	r2, [r3, #-64]
  indx++;
 800a0c6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a0ca:	3301      	adds	r3, #1
 800a0cc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  BLUENRG_memcpy(buffer + indx, AdvData, AdvLen);
 800a0d0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a0d4:	f107 0208 	add.w	r2, r7, #8
 800a0d8:	4413      	add	r3, r2
 800a0da:	79fa      	ldrb	r2, [r7, #7]
 800a0dc:	6839      	ldr	r1, [r7, #0]
 800a0de:	4618      	mov	r0, r3
 800a0e0:	f004 fb96 	bl	800e810 <memcpy>
  indx +=  AdvLen;
 800a0e4:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 800a0e8:	79fb      	ldrb	r3, [r7, #7]
 800a0ea:	4413      	add	r3, r2
 800a0ec:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a0f0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a0f4:	2218      	movs	r2, #24
 800a0f6:	2100      	movs	r1, #0
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	f004 f90e 	bl	800e31a <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800a0fe:	233f      	movs	r3, #63	@ 0x3f
 800a100:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  rq.ocf = OCF_GAP_UPDATE_ADV_DATA;
 800a102:	238e      	movs	r3, #142	@ 0x8e
 800a104:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  rq.cparam = (void *)buffer;
 800a106:	f107 0308 	add.w	r3, r7, #8
 800a10a:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.clen = indx;
 800a10c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a110:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.rparam = &status;
 800a112:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800a116:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.rlen = 1;
 800a118:	2301      	movs	r3, #1
 800a11a:	643b      	str	r3, [r7, #64]	@ 0x40
    
  if (hci_send_req(&rq, FALSE) < 0)
 800a11c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a120:	2100      	movs	r1, #0
 800a122:	4618      	mov	r0, r3
 800a124:	f000 fd52 	bl	800abcc <hci_send_req>
 800a128:	4603      	mov	r3, r0
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	da01      	bge.n	800a132 <aci_gap_update_adv_data+0x96>
    return BLE_STATUS_TIMEOUT;
 800a12e:	23ff      	movs	r3, #255	@ 0xff
 800a130:	e001      	b.n	800a136 <aci_gap_update_adv_data+0x9a>
    
  return status;
 800a132:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800a136:	4618      	mov	r0, r3
 800a138:	3748      	adds	r7, #72	@ 0x48
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}

0800a13e <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 800a13e:	b580      	push	{r7, lr}
 800a140:	b088      	sub	sp, #32
 800a142:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a144:	f107 0308 	add.w	r3, r7, #8
 800a148:	2218      	movs	r2, #24
 800a14a:	2100      	movs	r1, #0
 800a14c:	4618      	mov	r0, r3
 800a14e:	f004 f8e4 	bl	800e31a <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800a152:	233f      	movs	r3, #63	@ 0x3f
 800a154:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_GATT_INIT;
 800a156:	f240 1301 	movw	r3, #257	@ 0x101
 800a15a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800a15c:	1dfb      	adds	r3, r7, #7
 800a15e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800a160:	2301      	movs	r3, #1
 800a162:	61fb      	str	r3, [r7, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 800a164:	f107 0308 	add.w	r3, r7, #8
 800a168:	2100      	movs	r1, #0
 800a16a:	4618      	mov	r0, r3
 800a16c:	f000 fd2e 	bl	800abcc <hci_send_req>
 800a170:	4603      	mov	r3, r0
 800a172:	2b00      	cmp	r3, #0
 800a174:	da01      	bge.n	800a17a <aci_gatt_init+0x3c>
    return BLE_STATUS_TIMEOUT;
 800a176:	23ff      	movs	r3, #255	@ 0xff
 800a178:	e000      	b.n	800a17c <aci_gatt_init+0x3e>

  return status;
 800a17a:	79fb      	ldrb	r3, [r7, #7]
}
 800a17c:	4618      	mov	r0, r3
 800a17e:	3720      	adds	r7, #32
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}

0800a184 <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b090      	sub	sp, #64	@ 0x40
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6039      	str	r1, [r7, #0]
 800a18c:	4611      	mov	r1, r2
 800a18e:	461a      	mov	r2, r3
 800a190:	4603      	mov	r3, r0
 800a192:	71fb      	strb	r3, [r7, #7]
 800a194:	460b      	mov	r3, r1
 800a196:	71bb      	strb	r3, [r7, #6]
 800a198:	4613      	mov	r3, r2
 800a19a:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
 800a19c:	2300      	movs	r3, #0
 800a19e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  buffer[indx] = service_uuid_type;
 800a1a2:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800a1a6:	3340      	adds	r3, #64	@ 0x40
 800a1a8:	443b      	add	r3, r7
 800a1aa:	79fa      	ldrb	r2, [r7, #7]
 800a1ac:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 800a1b0:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800a1b4:	3301      	adds	r3, #1
 800a1b6:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  if(service_uuid_type == UUID_TYPE_16){
 800a1ba:	79fb      	ldrb	r3, [r7, #7]
 800a1bc:	2b01      	cmp	r3, #1
 800a1be:	d103      	bne.n	800a1c8 <aci_gatt_add_serv+0x44>
    uuid_len = 2;
 800a1c0:	2302      	movs	r3, #2
 800a1c2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800a1c6:	e002      	b.n	800a1ce <aci_gatt_add_serv+0x4a>
  }
  else {
    uuid_len = 16;
 800a1c8:	2310      	movs	r3, #16
 800a1ca:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 800a1ce:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800a1d2:	f107 020c 	add.w	r2, r7, #12
 800a1d6:	4413      	add	r3, r2
 800a1d8:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800a1dc:	6839      	ldr	r1, [r7, #0]
 800a1de:	4618      	mov	r0, r3
 800a1e0:	f004 fb16 	bl	800e810 <memcpy>
  indx +=  uuid_len;
 800a1e4:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 800a1e8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800a1ec:	4413      	add	r3, r2
 800a1ee:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  buffer[indx] = service_type;
 800a1f2:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800a1f6:	3340      	adds	r3, #64	@ 0x40
 800a1f8:	443b      	add	r3, r7
 800a1fa:	79ba      	ldrb	r2, [r7, #6]
 800a1fc:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 800a200:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800a204:	3301      	adds	r3, #1
 800a206:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  buffer[indx] = max_attr_records;
 800a20a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800a20e:	3340      	adds	r3, #64	@ 0x40
 800a210:	443b      	add	r3, r7
 800a212:	797a      	ldrb	r2, [r7, #5]
 800a214:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 800a218:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800a21c:	3301      	adds	r3, #1
 800a21e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800a222:	f107 0320 	add.w	r3, r7, #32
 800a226:	2203      	movs	r2, #3
 800a228:	2100      	movs	r1, #0
 800a22a:	4618      	mov	r0, r3
 800a22c:	f004 f875 	bl	800e31a <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a230:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a234:	2218      	movs	r2, #24
 800a236:	2100      	movs	r1, #0
 800a238:	4618      	mov	r0, r3
 800a23a:	f004 f86e 	bl	800e31a <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800a23e:	233f      	movs	r3, #63	@ 0x3f
 800a240:	84bb      	strh	r3, [r7, #36]	@ 0x24
  rq.ocf = OCF_GATT_ADD_SERV;
 800a242:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800a246:	84fb      	strh	r3, [r7, #38]	@ 0x26
  rq.cparam = (void *)buffer;
 800a248:	f107 030c 	add.w	r3, r7, #12
 800a24c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  rq.clen = indx;
 800a24e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800a252:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.rparam = &resp;
 800a254:	f107 0320 	add.w	r3, r7, #32
 800a258:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 800a25a:	2303      	movs	r3, #3
 800a25c:	63bb      	str	r3, [r7, #56]	@ 0x38

  if (hci_send_req(&rq, FALSE) < 0)
 800a25e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a262:	2100      	movs	r1, #0
 800a264:	4618      	mov	r0, r3
 800a266:	f000 fcb1 	bl	800abcc <hci_send_req>
 800a26a:	4603      	mov	r3, r0
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	da01      	bge.n	800a274 <aci_gatt_add_serv+0xf0>
    return BLE_STATUS_TIMEOUT;
 800a270:	23ff      	movs	r3, #255	@ 0xff
 800a272:	e00c      	b.n	800a28e <aci_gatt_add_serv+0x10a>

  if (resp.status) {
 800a274:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d002      	beq.n	800a282 <aci_gatt_add_serv+0xfe>
    return resp.status;
 800a27c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a280:	e005      	b.n	800a28e <aci_gatt_add_serv+0x10a>
  }
    
  *serviceHandle = btohs(resp.handle);
 800a282:	f8b7 3021 	ldrh.w	r3, [r7, #33]	@ 0x21
 800a286:	b29a      	uxth	r2, r3
 800a288:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a28a:	801a      	strh	r2, [r3, #0]

  return 0;
 800a28c:	2300      	movs	r3, #0
}
 800a28e:	4618      	mov	r0, r3
 800a290:	3740      	adds	r7, #64	@ 0x40
 800a292:	46bd      	mov	sp, r7
 800a294:	bd80      	pop	{r7, pc}

0800a296 <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 800a296:	b580      	push	{r7, lr}
 800a298:	b092      	sub	sp, #72	@ 0x48
 800a29a:	af00      	add	r7, sp, #0
 800a29c:	603a      	str	r2, [r7, #0]
 800a29e:	461a      	mov	r2, r3
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	80fb      	strh	r3, [r7, #6]
 800a2a4:	460b      	mov	r3, r1
 800a2a6:	717b      	strb	r3, [r7, #5]
 800a2a8:	4613      	mov	r3, r2
 800a2aa:	713b      	strb	r3, [r7, #4]
  struct hci_request rq;
  gatt_add_serv_rp resp;
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  serviceHandle = htobs(serviceHandle);
 800a2b2:	88fb      	ldrh	r3, [r7, #6]
 800a2b4:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 800a2b6:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800a2ba:	f107 020c 	add.w	r2, r7, #12
 800a2be:	4413      	add	r3, r2
 800a2c0:	88fa      	ldrh	r2, [r7, #6]
 800a2c2:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800a2c4:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800a2c8:	3302      	adds	r3, #2
 800a2ca:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = charUuidType;
 800a2ce:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800a2d2:	3348      	adds	r3, #72	@ 0x48
 800a2d4:	443b      	add	r3, r7
 800a2d6:	797a      	ldrb	r2, [r7, #5]
 800a2d8:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800a2dc:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800a2e0:	3301      	adds	r3, #1
 800a2e2:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  if(charUuidType == UUID_TYPE_16){
 800a2e6:	797b      	ldrb	r3, [r7, #5]
 800a2e8:	2b01      	cmp	r3, #1
 800a2ea:	d103      	bne.n	800a2f4 <aci_gatt_add_char+0x5e>
    uuid_len = 2;
 800a2ec:	2302      	movs	r3, #2
 800a2ee:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a2f2:	e002      	b.n	800a2fa <aci_gatt_add_char+0x64>
  }
  else {
    uuid_len = 16;
 800a2f4:	2310      	movs	r3, #16
 800a2f6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 800a2fa:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800a2fe:	f107 020c 	add.w	r2, r7, #12
 800a302:	4413      	add	r3, r2
 800a304:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 800a308:	6839      	ldr	r1, [r7, #0]
 800a30a:	4618      	mov	r0, r3
 800a30c:	f004 fa80 	bl	800e810 <memcpy>
  indx +=  uuid_len;
 800a310:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 800a314:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a318:	4413      	add	r3, r2
 800a31a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = charValueLen;
 800a31e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800a322:	3348      	adds	r3, #72	@ 0x48
 800a324:	443b      	add	r3, r7
 800a326:	793a      	ldrb	r2, [r7, #4]
 800a328:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800a32c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800a330:	3301      	adds	r3, #1
 800a332:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = charProperties;
 800a336:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800a33a:	3348      	adds	r3, #72	@ 0x48
 800a33c:	443b      	add	r3, r7
 800a33e:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 800a342:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800a346:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800a34a:	3301      	adds	r3, #1
 800a34c:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = secPermissions;
 800a350:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800a354:	3348      	adds	r3, #72	@ 0x48
 800a356:	443b      	add	r3, r7
 800a358:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800a35c:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800a360:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800a364:	3301      	adds	r3, #1
 800a366:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = gattEvtMask;
 800a36a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800a36e:	3348      	adds	r3, #72	@ 0x48
 800a370:	443b      	add	r3, r7
 800a372:	f897 2058 	ldrb.w	r2, [r7, #88]	@ 0x58
 800a376:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800a37a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800a37e:	3301      	adds	r3, #1
 800a380:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = encryKeySize;
 800a384:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800a388:	3348      	adds	r3, #72	@ 0x48
 800a38a:	443b      	add	r3, r7
 800a38c:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800a390:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800a394:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800a398:	3301      	adds	r3, #1
 800a39a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = isVariable;
 800a39e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800a3a2:	3348      	adds	r3, #72	@ 0x48
 800a3a4:	443b      	add	r3, r7
 800a3a6:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 800a3aa:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800a3ae:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800a3b2:	3301      	adds	r3, #1
 800a3b4:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800a3b8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800a3bc:	2203      	movs	r2, #3
 800a3be:	2100      	movs	r1, #0
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	f003 ffaa 	bl	800e31a <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a3c6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a3ca:	2218      	movs	r2, #24
 800a3cc:	2100      	movs	r1, #0
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	f003 ffa3 	bl	800e31a <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800a3d4:	233f      	movs	r3, #63	@ 0x3f
 800a3d6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  rq.ocf = OCF_GATT_ADD_CHAR;
 800a3d8:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800a3dc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  rq.cparam = (void *)buffer;
 800a3de:	f107 030c 	add.w	r3, r7, #12
 800a3e2:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.clen = indx;
 800a3e4:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800a3e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.rparam = &resp;
 800a3ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800a3ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 800a3f0:	2303      	movs	r3, #3
 800a3f2:	643b      	str	r3, [r7, #64]	@ 0x40

  if (hci_send_req(&rq, FALSE) < 0)
 800a3f4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a3f8:	2100      	movs	r1, #0
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	f000 fbe6 	bl	800abcc <hci_send_req>
 800a400:	4603      	mov	r3, r0
 800a402:	2b00      	cmp	r3, #0
 800a404:	da01      	bge.n	800a40a <aci_gatt_add_char+0x174>
    return BLE_STATUS_TIMEOUT;
 800a406:	23ff      	movs	r3, #255	@ 0xff
 800a408:	e00c      	b.n	800a424 <aci_gatt_add_char+0x18e>

  if (resp.status) {
 800a40a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d002      	beq.n	800a418 <aci_gatt_add_char+0x182>
    return resp.status;
 800a412:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a416:	e005      	b.n	800a424 <aci_gatt_add_char+0x18e>
  }
    
  *charHandle = btohs(resp.handle);
 800a418:	f8b7 3029 	ldrh.w	r3, [r7, #41]	@ 0x29
 800a41c:	b29a      	uxth	r2, r3
 800a41e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a420:	801a      	strh	r2, [r3, #0]

  return 0;
 800a422:	2300      	movs	r3, #0
}
 800a424:	4618      	mov	r0, r3
 800a426:	3748      	adds	r7, #72	@ 0x48
 800a428:	46bd      	mov	sp, r7
 800a42a:	bd80      	pop	{r7, pc}

0800a42c <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 800a42c:	b590      	push	{r4, r7, lr}
 800a42e:	b0ab      	sub	sp, #172	@ 0xac
 800a430:	af00      	add	r7, sp, #0
 800a432:	4604      	mov	r4, r0
 800a434:	4608      	mov	r0, r1
 800a436:	4611      	mov	r1, r2
 800a438:	461a      	mov	r2, r3
 800a43a:	4623      	mov	r3, r4
 800a43c:	80fb      	strh	r3, [r7, #6]
 800a43e:	4603      	mov	r3, r0
 800a440:	80bb      	strh	r3, [r7, #4]
 800a442:	460b      	mov	r3, r1
 800a444:	70fb      	strb	r3, [r7, #3]
 800a446:	4613      	mov	r3, r2
 800a448:	70bb      	strb	r3, [r7, #2]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 800a44a:	2300      	movs	r3, #0
 800a44c:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 800a450:	78bb      	ldrb	r3, [r7, #2]
 800a452:	2b7a      	cmp	r3, #122	@ 0x7a
 800a454:	d901      	bls.n	800a45a <aci_gatt_update_char_value+0x2e>
    return BLE_STATUS_INVALID_PARAMS;
 800a456:	2342      	movs	r3, #66	@ 0x42
 800a458:	e074      	b.n	800a544 <aci_gatt_update_char_value+0x118>

  servHandle = htobs(servHandle);
 800a45a:	88fb      	ldrh	r3, [r7, #6]
 800a45c:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 800a45e:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800a462:	f107 0208 	add.w	r2, r7, #8
 800a466:	4413      	add	r3, r2
 800a468:	88fa      	ldrh	r2, [r7, #6]
 800a46a:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800a46c:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800a470:	3302      	adds	r3, #2
 800a472:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  charHandle = htobs(charHandle);
 800a476:	88bb      	ldrh	r3, [r7, #4]
 800a478:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 800a47a:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800a47e:	f107 0208 	add.w	r2, r7, #8
 800a482:	4413      	add	r3, r2
 800a484:	88ba      	ldrh	r2, [r7, #4]
 800a486:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800a488:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800a48c:	3302      	adds	r3, #2
 800a48e:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  buffer[indx] = charValOffset;
 800a492:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800a496:	33a8      	adds	r3, #168	@ 0xa8
 800a498:	443b      	add	r3, r7
 800a49a:	78fa      	ldrb	r2, [r7, #3]
 800a49c:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 800a4a0:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800a4a4:	3301      	adds	r3, #1
 800a4a6:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  buffer[indx] = charValueLen;
 800a4aa:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800a4ae:	33a8      	adds	r3, #168	@ 0xa8
 800a4b0:	443b      	add	r3, r7
 800a4b2:	78ba      	ldrb	r2, [r7, #2]
 800a4b4:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 800a4b8:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800a4bc:	3301      	adds	r3, #1
 800a4be:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 800a4c2:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800a4c6:	f107 0208 	add.w	r2, r7, #8
 800a4ca:	4413      	add	r3, r2
 800a4cc:	78ba      	ldrb	r2, [r7, #2]
 800a4ce:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	f004 f99c 	bl	800e810 <memcpy>
  indx +=  charValueLen;
 800a4d8:	f897 20a7 	ldrb.w	r2, [r7, #167]	@ 0xa7
 800a4dc:	78bb      	ldrb	r3, [r7, #2]
 800a4de:	4413      	add	r3, r2
 800a4e0:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a4e4:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800a4e8:	2218      	movs	r2, #24
 800a4ea:	2100      	movs	r1, #0
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	f003 ff14 	bl	800e31a <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800a4f2:	233f      	movs	r3, #63	@ 0x3f
 800a4f4:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 800a4f8:	f44f 7383 	mov.w	r3, #262	@ 0x106
 800a4fc:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
  rq.cparam = (void *)buffer;
 800a500:	f107 0308 	add.w	r3, r7, #8
 800a504:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  rq.clen = indx;
 800a508:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800a50c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  rq.rparam = &status;
 800a510:	f107 038b 	add.w	r3, r7, #139	@ 0x8b
 800a514:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  rq.rlen = 1;
 800a518:	2301      	movs	r3, #1
 800a51a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 800a51e:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800a522:	2100      	movs	r1, #0
 800a524:	4618      	mov	r0, r3
 800a526:	f000 fb51 	bl	800abcc <hci_send_req>
 800a52a:	4603      	mov	r3, r0
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	da01      	bge.n	800a534 <aci_gatt_update_char_value+0x108>
    return BLE_STATUS_TIMEOUT;
 800a530:	23ff      	movs	r3, #255	@ 0xff
 800a532:	e007      	b.n	800a544 <aci_gatt_update_char_value+0x118>

  if (status) {
 800a534:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d002      	beq.n	800a542 <aci_gatt_update_char_value+0x116>
    return status;
 800a53c:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 800a540:	e000      	b.n	800a544 <aci_gatt_update_char_value+0x118>
  }

  return 0;
 800a542:	2300      	movs	r3, #0
}
 800a544:	4618      	mov	r0, r3
 800a546:	37ac      	adds	r7, #172	@ 0xac
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd90      	pop	{r4, r7, pc}

0800a54c <aci_gatt_write_response>:
                                   uint16_t attr_handle,
                                   uint8_t write_status,
                                   uint8_t err_code,
                                   uint8_t att_val_len,
                                   uint8_t *att_val)
{
 800a54c:	b590      	push	{r4, r7, lr}
 800a54e:	b0ab      	sub	sp, #172	@ 0xac
 800a550:	af00      	add	r7, sp, #0
 800a552:	4604      	mov	r4, r0
 800a554:	4608      	mov	r0, r1
 800a556:	4611      	mov	r1, r2
 800a558:	461a      	mov	r2, r3
 800a55a:	4623      	mov	r3, r4
 800a55c:	80fb      	strh	r3, [r7, #6]
 800a55e:	4603      	mov	r3, r0
 800a560:	80bb      	strh	r3, [r7, #4]
 800a562:	460b      	mov	r3, r1
 800a564:	70fb      	strb	r3, [r7, #3]
 800a566:	4613      	mov	r3, r2
 800a568:	70bb      	strb	r3, [r7, #2]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 800a56a:	2300      	movs	r3, #0
 800a56c:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
  
  if ((att_val_len+7) > HCI_MAX_PAYLOAD_SIZE)
 800a570:	f897 30b8 	ldrb.w	r3, [r7, #184]	@ 0xb8
 800a574:	2b79      	cmp	r3, #121	@ 0x79
 800a576:	d901      	bls.n	800a57c <aci_gatt_write_response+0x30>
    return BLE_STATUS_INVALID_PARAMS;
 800a578:	2342      	movs	r3, #66	@ 0x42
 800a57a:	e083      	b.n	800a684 <aci_gatt_write_response+0x138>

  conn_handle = htobs(conn_handle);  
 800a57c:	88fb      	ldrh	r3, [r7, #6]
 800a57e:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &conn_handle, 2);
 800a580:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800a584:	f107 0208 	add.w	r2, r7, #8
 800a588:	4413      	add	r3, r2
 800a58a:	88fa      	ldrh	r2, [r7, #6]
 800a58c:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800a58e:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800a592:	3302      	adds	r3, #2
 800a594:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  attr_handle = htobs(attr_handle);
 800a598:	88bb      	ldrh	r3, [r7, #4]
 800a59a:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &attr_handle, 2);
 800a59c:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800a5a0:	f107 0208 	add.w	r2, r7, #8
 800a5a4:	4413      	add	r3, r2
 800a5a6:	88ba      	ldrh	r2, [r7, #4]
 800a5a8:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800a5aa:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800a5ae:	3302      	adds	r3, #2
 800a5b0:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  buffer[indx] = write_status;
 800a5b4:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800a5b8:	33a8      	adds	r3, #168	@ 0xa8
 800a5ba:	443b      	add	r3, r7
 800a5bc:	78fa      	ldrb	r2, [r7, #3]
 800a5be:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx += 1;
 800a5c2:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800a5c6:	3301      	adds	r3, #1
 800a5c8:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  buffer[indx] = err_code;
 800a5cc:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800a5d0:	33a8      	adds	r3, #168	@ 0xa8
 800a5d2:	443b      	add	r3, r7
 800a5d4:	78ba      	ldrb	r2, [r7, #2]
 800a5d6:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx += 1;
 800a5da:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800a5de:	3301      	adds	r3, #1
 800a5e0:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  buffer[indx] = att_val_len;
 800a5e4:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800a5e8:	33a8      	adds	r3, #168	@ 0xa8
 800a5ea:	443b      	add	r3, r7
 800a5ec:	f897 20b8 	ldrb.w	r2, [r7, #184]	@ 0xb8
 800a5f0:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx += 1;
 800a5f4:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800a5f8:	3301      	adds	r3, #1
 800a5fa:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  BLUENRG_memcpy(buffer + indx, att_val, att_val_len);
 800a5fe:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800a602:	f107 0208 	add.w	r2, r7, #8
 800a606:	4413      	add	r3, r2
 800a608:	f897 20b8 	ldrb.w	r2, [r7, #184]	@ 0xb8
 800a60c:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 800a610:	4618      	mov	r0, r3
 800a612:	f004 f8fd 	bl	800e810 <memcpy>
  indx += att_val_len;
 800a616:	f897 20a7 	ldrb.w	r2, [r7, #167]	@ 0xa7
 800a61a:	f897 30b8 	ldrb.w	r3, [r7, #184]	@ 0xb8
 800a61e:	4413      	add	r3, r2
 800a620:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a624:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800a628:	2218      	movs	r2, #24
 800a62a:	2100      	movs	r1, #0
 800a62c:	4618      	mov	r0, r3
 800a62e:	f003 fe74 	bl	800e31a <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800a632:	233f      	movs	r3, #63	@ 0x3f
 800a634:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
  rq.ocf = OCF_GATT_WRITE_RESPONSE;
 800a638:	f44f 7393 	mov.w	r3, #294	@ 0x126
 800a63c:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
  rq.cparam = (void *)buffer;
 800a640:	f107 0308 	add.w	r3, r7, #8
 800a644:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  rq.clen = indx;
 800a648:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800a64c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  rq.rparam = &status;
 800a650:	f107 038b 	add.w	r3, r7, #139	@ 0x8b
 800a654:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  rq.rlen = 1;
 800a658:	2301      	movs	r3, #1
 800a65a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 800a65e:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800a662:	2100      	movs	r1, #0
 800a664:	4618      	mov	r0, r3
 800a666:	f000 fab1 	bl	800abcc <hci_send_req>
 800a66a:	4603      	mov	r3, r0
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	da01      	bge.n	800a674 <aci_gatt_write_response+0x128>
    return BLE_STATUS_TIMEOUT;
 800a670:	23ff      	movs	r3, #255	@ 0xff
 800a672:	e007      	b.n	800a684 <aci_gatt_write_response+0x138>

  if (status) {
 800a674:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d002      	beq.n	800a682 <aci_gatt_write_response+0x136>
    return status;
 800a67c:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 800a680:	e000      	b.n	800a684 <aci_gatt_write_response+0x138>
  }

  return 0;
 800a682:	2300      	movs	r3, #0
}
 800a684:	4618      	mov	r0, r3
 800a686:	37ac      	adds	r7, #172	@ 0xac
 800a688:	46bd      	mov	sp, r7
 800a68a:	bd90      	pop	{r4, r7, pc}

0800a68c <aci_gatt_allow_read>:

tBleStatus aci_gatt_allow_read(uint16_t conn_handle)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b08a      	sub	sp, #40	@ 0x28
 800a690:	af00      	add	r7, sp, #0
 800a692:	4603      	mov	r3, r0
 800a694:	80fb      	strh	r3, [r7, #6]
    struct hci_request rq;
    gatt_allow_read_cp cp;
    uint8_t status;
    
    cp.conn_handle = htobs(conn_handle);
 800a696:	88fb      	ldrh	r3, [r7, #6]
 800a698:	81bb      	strh	r3, [r7, #12]

    BLUENRG_memset(&rq, 0, sizeof(rq));
 800a69a:	f107 0310 	add.w	r3, r7, #16
 800a69e:	2218      	movs	r2, #24
 800a6a0:	2100      	movs	r1, #0
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	f003 fe39 	bl	800e31a <memset>
    rq.ogf = OGF_VENDOR_CMD;
 800a6a8:	233f      	movs	r3, #63	@ 0x3f
 800a6aa:	823b      	strh	r3, [r7, #16]
    rq.ocf = OCF_GATT_ALLOW_READ;
 800a6ac:	f240 1327 	movw	r3, #295	@ 0x127
 800a6b0:	827b      	strh	r3, [r7, #18]
    rq.cparam = &cp;
 800a6b2:	f107 030c 	add.w	r3, r7, #12
 800a6b6:	61bb      	str	r3, [r7, #24]
    rq.clen = GATT_ALLOW_READ_CP_SIZE;
 800a6b8:	2302      	movs	r3, #2
 800a6ba:	61fb      	str	r3, [r7, #28]
    rq.rparam = &status;
 800a6bc:	f107 030b 	add.w	r3, r7, #11
 800a6c0:	623b      	str	r3, [r7, #32]
    rq.rlen = 1;
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	627b      	str	r3, [r7, #36]	@ 0x24

    if (hci_send_req(&rq, FALSE) < 0)
 800a6c6:	f107 0310 	add.w	r3, r7, #16
 800a6ca:	2100      	movs	r1, #0
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	f000 fa7d 	bl	800abcc <hci_send_req>
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	da01      	bge.n	800a6dc <aci_gatt_allow_read+0x50>
      return BLE_STATUS_TIMEOUT;
 800a6d8:	23ff      	movs	r3, #255	@ 0xff
 800a6da:	e000      	b.n	800a6de <aci_gatt_allow_read+0x52>

    return status;
 800a6dc:	7afb      	ldrb	r3, [r7, #11]
}
 800a6de:	4618      	mov	r0, r3
 800a6e0:	3728      	adds	r7, #40	@ 0x28
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bd80      	pop	{r7, pc}

0800a6e6 <aci_hal_read_config_data>:

  return status;
}

tBleStatus aci_hal_read_config_data(uint8_t offset, uint16_t data_len, uint8_t *data_len_out_p, uint8_t *data)
{
 800a6e6:	b580      	push	{r7, lr}
 800a6e8:	b0ac      	sub	sp, #176	@ 0xb0
 800a6ea:	af00      	add	r7, sp, #0
 800a6ec:	60ba      	str	r2, [r7, #8]
 800a6ee:	607b      	str	r3, [r7, #4]
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	73fb      	strb	r3, [r7, #15]
 800a6f4:	460b      	mov	r3, r1
 800a6f6:	81bb      	strh	r3, [r7, #12]
  struct hci_request rq;
  hal_read_config_data_cp cp;
  hal_read_config_data_rp rp;
  
  cp.offset = offset;
 800a6f8:	7bfb      	ldrb	r3, [r7, #15]
 800a6fa:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a6fe:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800a702:	2218      	movs	r2, #24
 800a704:	2100      	movs	r1, #0
 800a706:	4618      	mov	r0, r3
 800a708:	f003 fe07 	bl	800e31a <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800a70c:	233f      	movs	r3, #63	@ 0x3f
 800a70e:	f8a7 3098 	strh.w	r3, [r7, #152]	@ 0x98
  rq.ocf = OCF_HAL_READ_CONFIG_DATA;
 800a712:	230d      	movs	r3, #13
 800a714:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
  rq.cparam = &cp;
 800a718:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800a71c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  rq.clen = sizeof(cp);
 800a720:	2301      	movs	r3, #1
 800a722:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  rq.rparam = &rp;
 800a726:	f107 0314 	add.w	r3, r7, #20
 800a72a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  rq.rlen = sizeof(rp);
 800a72e:	2380      	movs	r3, #128	@ 0x80
 800a730:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  
  if (hci_send_req(&rq, FALSE) < 0)
 800a734:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800a738:	2100      	movs	r1, #0
 800a73a:	4618      	mov	r0, r3
 800a73c:	f000 fa46 	bl	800abcc <hci_send_req>
 800a740:	4603      	mov	r3, r0
 800a742:	2b00      	cmp	r3, #0
 800a744:	da01      	bge.n	800a74a <aci_hal_read_config_data+0x64>
    return BLE_STATUS_TIMEOUT;
 800a746:	23ff      	movs	r3, #255	@ 0xff
 800a748:	e01e      	b.n	800a788 <aci_hal_read_config_data+0xa2>
  
  if(rp.status)
 800a74a:	7d3b      	ldrb	r3, [r7, #20]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d001      	beq.n	800a754 <aci_hal_read_config_data+0x6e>
    return rp.status;
 800a750:	7d3b      	ldrb	r3, [r7, #20]
 800a752:	e019      	b.n	800a788 <aci_hal_read_config_data+0xa2>
  
  *data_len_out_p = rq.rlen-1;
 800a754:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a758:	b2db      	uxtb	r3, r3
 800a75a:	3b01      	subs	r3, #1
 800a75c:	b2da      	uxtb	r2, r3
 800a75e:	68bb      	ldr	r3, [r7, #8]
 800a760:	701a      	strb	r2, [r3, #0]
  
  BLUENRG_memcpy(data, rp.data, MIN(data_len, *data_len_out_p));
 800a762:	68bb      	ldr	r3, [r7, #8]
 800a764:	781b      	ldrb	r3, [r3, #0]
 800a766:	461a      	mov	r2, r3
 800a768:	89bb      	ldrh	r3, [r7, #12]
 800a76a:	4293      	cmp	r3, r2
 800a76c:	d201      	bcs.n	800a772 <aci_hal_read_config_data+0x8c>
 800a76e:	89ba      	ldrh	r2, [r7, #12]
 800a770:	e002      	b.n	800a778 <aci_hal_read_config_data+0x92>
 800a772:	68bb      	ldr	r3, [r7, #8]
 800a774:	781b      	ldrb	r3, [r3, #0]
 800a776:	461a      	mov	r2, r3
 800a778:	f107 0314 	add.w	r3, r7, #20
 800a77c:	3301      	adds	r3, #1
 800a77e:	4619      	mov	r1, r3
 800a780:	6878      	ldr	r0, [r7, #4]
 800a782:	f004 f845 	bl	800e810 <memcpy>
  
  return 0;
 800a786:	2300      	movs	r3, #0
}
 800a788:	4618      	mov	r0, r3
 800a78a:	37b0      	adds	r7, #176	@ 0xb0
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bd80      	pop	{r7, pc}

0800a790 <aci_hal_set_tx_power_level>:

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b08a      	sub	sp, #40	@ 0x28
 800a794:	af00      	add	r7, sp, #0
 800a796:	4603      	mov	r3, r0
 800a798:	460a      	mov	r2, r1
 800a79a:	71fb      	strb	r3, [r7, #7]
 800a79c:	4613      	mov	r3, r2
 800a79e:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  hal_set_tx_power_level_cp cp;    
  uint8_t status;
    
  cp.en_high_power = en_high_power;
 800a7a0:	79fb      	ldrb	r3, [r7, #7]
 800a7a2:	733b      	strb	r3, [r7, #12]
  cp.pa_level = pa_level;
 800a7a4:	79bb      	ldrb	r3, [r7, #6]
 800a7a6:	737b      	strb	r3, [r7, #13]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a7a8:	f107 0310 	add.w	r3, r7, #16
 800a7ac:	2218      	movs	r2, #24
 800a7ae:	2100      	movs	r1, #0
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	f003 fdb2 	bl	800e31a <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800a7b6:	233f      	movs	r3, #63	@ 0x3f
 800a7b8:	823b      	strh	r3, [r7, #16]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
 800a7ba:	230f      	movs	r3, #15
 800a7bc:	827b      	strh	r3, [r7, #18]
  rq.cparam = &cp;
 800a7be:	f107 030c 	add.w	r3, r7, #12
 800a7c2:	61bb      	str	r3, [r7, #24]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 800a7c4:	2302      	movs	r3, #2
 800a7c6:	61fb      	str	r3, [r7, #28]
  rq.rparam = &status;
 800a7c8:	f107 030b 	add.w	r3, r7, #11
 800a7cc:	623b      	str	r3, [r7, #32]
  rq.rlen = 1;
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	627b      	str	r3, [r7, #36]	@ 0x24

  if (hci_send_req(&rq, FALSE) < 0)
 800a7d2:	f107 0310 	add.w	r3, r7, #16
 800a7d6:	2100      	movs	r1, #0
 800a7d8:	4618      	mov	r0, r3
 800a7da:	f000 f9f7 	bl	800abcc <hci_send_req>
 800a7de:	4603      	mov	r3, r0
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	da01      	bge.n	800a7e8 <aci_hal_set_tx_power_level+0x58>
    return BLE_STATUS_TIMEOUT;
 800a7e4:	23ff      	movs	r3, #255	@ 0xff
 800a7e6:	e000      	b.n	800a7ea <aci_hal_set_tx_power_level+0x5a>

  return status;
 800a7e8:	7afb      	ldrb	r3, [r7, #11]
}
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	3728      	adds	r7, #40	@ 0x28
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bd80      	pop	{r7, pc}

0800a7f2 <getBlueNRGVersion>:
#include "hci.h"
#include "hci_le.h"
#include "string.h"

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 800a7f2:	b590      	push	{r4, r7, lr}
 800a7f4:	b089      	sub	sp, #36	@ 0x24
 800a7f6:	af02      	add	r7, sp, #8
 800a7f8:	6078      	str	r0, [r7, #4]
 800a7fa:	6039      	str	r1, [r7, #0]
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 800a7fc:	f107 0410 	add.w	r4, r7, #16
 800a800:	f107 0215 	add.w	r2, r7, #21
 800a804:	f107 0112 	add.w	r1, r7, #18
 800a808:	f107 0016 	add.w	r0, r7, #22
 800a80c:	f107 030e 	add.w	r3, r7, #14
 800a810:	9300      	str	r3, [sp, #0]
 800a812:	4623      	mov	r3, r4
 800a814:	f000 f853 	bl	800a8be <hci_le_read_local_version>
 800a818:	4603      	mov	r3, r0
 800a81a:	75fb      	strb	r3, [r7, #23]
                                     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 800a81c:	7dfb      	ldrb	r3, [r7, #23]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d126      	bne.n	800a870 <getBlueNRGVersion+0x7e>
    *hwVersion = hci_revision >> 8;
 800a822:	8a7b      	ldrh	r3, [r7, #18]
 800a824:	0a1b      	lsrs	r3, r3, #8
 800a826:	b29b      	uxth	r3, r3
 800a828:	b2da      	uxtb	r2, r3
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	701a      	strb	r2, [r3, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
 800a82e:	8a7b      	ldrh	r3, [r7, #18]
 800a830:	021b      	lsls	r3, r3, #8
 800a832:	b29a      	uxth	r2, r3
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	801a      	strh	r2, [r3, #0]
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	881b      	ldrh	r3, [r3, #0]
 800a83c:	b21a      	sxth	r2, r3
 800a83e:	89fb      	ldrh	r3, [r7, #14]
 800a840:	091b      	lsrs	r3, r3, #4
 800a842:	b29b      	uxth	r3, r3
 800a844:	011b      	lsls	r3, r3, #4
 800a846:	b21b      	sxth	r3, r3
 800a848:	b2db      	uxtb	r3, r3
 800a84a:	b21b      	sxth	r3, r3
 800a84c:	4313      	orrs	r3, r2
 800a84e:	b21b      	sxth	r3, r3
 800a850:	b29a      	uxth	r2, r3
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	801a      	strh	r2, [r3, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	881b      	ldrh	r3, [r3, #0]
 800a85a:	b21a      	sxth	r2, r3
 800a85c:	89fb      	ldrh	r3, [r7, #14]
 800a85e:	b21b      	sxth	r3, r3
 800a860:	f003 030f 	and.w	r3, r3, #15
 800a864:	b21b      	sxth	r3, r3
 800a866:	4313      	orrs	r3, r2
 800a868:	b21b      	sxth	r3, r3
 800a86a:	b29a      	uxth	r2, r3
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	801a      	strh	r2, [r3, #0]
  }
  return status;
 800a870:	7dfb      	ldrb	r3, [r7, #23]
}
 800a872:	4618      	mov	r0, r3
 800a874:	371c      	adds	r7, #28
 800a876:	46bd      	mov	sp, r7
 800a878:	bd90      	pop	{r4, r7, pc}

0800a87a <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 800a87a:	b580      	push	{r7, lr}
 800a87c:	b088      	sub	sp, #32
 800a87e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a880:	f107 0308 	add.w	r3, r7, #8
 800a884:	2218      	movs	r2, #24
 800a886:	2100      	movs	r1, #0
 800a888:	4618      	mov	r0, r3
 800a88a:	f003 fd46 	bl	800e31a <memset>
  rq.ogf = OGF_HOST_CTL;
 800a88e:	2303      	movs	r3, #3
 800a890:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_RESET;
 800a892:	2303      	movs	r3, #3
 800a894:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800a896:	1dfb      	adds	r3, r7, #7
 800a898:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800a89a:	2301      	movs	r3, #1
 800a89c:	61fb      	str	r3, [r7, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 800a89e:	f107 0308 	add.w	r3, r7, #8
 800a8a2:	2100      	movs	r1, #0
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	f000 f991 	bl	800abcc <hci_send_req>
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	da01      	bge.n	800a8b4 <hci_reset+0x3a>
    return BLE_STATUS_TIMEOUT;
 800a8b0:	23ff      	movs	r3, #255	@ 0xff
 800a8b2:	e000      	b.n	800a8b6 <hci_reset+0x3c>
  
  return status;  
 800a8b4:	79fb      	ldrb	r3, [r7, #7]
}
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	3720      	adds	r7, #32
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	bd80      	pop	{r7, pc}

0800a8be <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 800a8be:	b580      	push	{r7, lr}
 800a8c0:	b08e      	sub	sp, #56	@ 0x38
 800a8c2:	af00      	add	r7, sp, #0
 800a8c4:	60f8      	str	r0, [r7, #12]
 800a8c6:	60b9      	str	r1, [r7, #8]
 800a8c8:	607a      	str	r2, [r7, #4]
 800a8ca:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  read_local_version_rp resp;
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800a8cc:	f107 0314 	add.w	r3, r7, #20
 800a8d0:	2209      	movs	r2, #9
 800a8d2:	2100      	movs	r1, #0
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	f003 fd20 	bl	800e31a <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a8da:	f107 0320 	add.w	r3, r7, #32
 800a8de:	2218      	movs	r2, #24
 800a8e0:	2100      	movs	r1, #0
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	f003 fd19 	bl	800e31a <memset>
  rq.ogf = OGF_INFO_PARAM;
 800a8e8:	2304      	movs	r3, #4
 800a8ea:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_READ_LOCAL_VERSION;
 800a8ec:	2301      	movs	r3, #1
 800a8ee:	847b      	strh	r3, [r7, #34]	@ 0x22
  rq.cparam = NULL;
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  rq.clen = 0;
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  rq.rparam = &resp;
 800a8f8:	f107 0314 	add.w	r3, r7, #20
 800a8fc:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 800a8fe:	2309      	movs	r3, #9
 800a900:	637b      	str	r3, [r7, #52]	@ 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 800a902:	f107 0320 	add.w	r3, r7, #32
 800a906:	2100      	movs	r1, #0
 800a908:	4618      	mov	r0, r3
 800a90a:	f000 f95f 	bl	800abcc <hci_send_req>
 800a90e:	4603      	mov	r3, r0
 800a910:	2b00      	cmp	r3, #0
 800a912:	da01      	bge.n	800a918 <hci_le_read_local_version+0x5a>
    return BLE_STATUS_TIMEOUT;
 800a914:	23ff      	movs	r3, #255	@ 0xff
 800a916:	e018      	b.n	800a94a <hci_le_read_local_version+0x8c>
  
  if (resp.status) {
 800a918:	7d3b      	ldrb	r3, [r7, #20]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d001      	beq.n	800a922 <hci_le_read_local_version+0x64>
    return resp.status;
 800a91e:	7d3b      	ldrb	r3, [r7, #20]
 800a920:	e013      	b.n	800a94a <hci_le_read_local_version+0x8c>
  }
  
  
  *hci_version = resp.hci_version;
 800a922:	7d7a      	ldrb	r2, [r7, #21]
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	701a      	strb	r2, [r3, #0]
  *hci_revision =  btohs(resp.hci_revision);
 800a928:	8afa      	ldrh	r2, [r7, #22]
 800a92a:	68bb      	ldr	r3, [r7, #8]
 800a92c:	801a      	strh	r2, [r3, #0]
  *lmp_pal_version = resp.lmp_pal_version;
 800a92e:	7e3a      	ldrb	r2, [r7, #24]
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	701a      	strb	r2, [r3, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 800a934:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 800a938:	b29a      	uxth	r2, r3
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	801a      	strh	r2, [r3, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 800a93e:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 800a942:	b29a      	uxth	r2, r3
 800a944:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a946:	801a      	strh	r2, [r3, #0]
  
  return 0;
 800a948:	2300      	movs	r3, #0
}
 800a94a:	4618      	mov	r0, r3
 800a94c:	3738      	adds	r7, #56	@ 0x38
 800a94e:	46bd      	mov	sp, r7
 800a950:	bd80      	pop	{r7, pc}

0800a952 <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 800a952:	b580      	push	{r7, lr}
 800a954:	b092      	sub	sp, #72	@ 0x48
 800a956:	af00      	add	r7, sp, #0
 800a958:	4603      	mov	r3, r0
 800a95a:	6039      	str	r1, [r7, #0]
 800a95c:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 800a95e:	f107 0310 	add.w	r3, r7, #16
 800a962:	2220      	movs	r2, #32
 800a964:	2100      	movs	r1, #0
 800a966:	4618      	mov	r0, r3
 800a968:	f003 fcd7 	bl	800e31a <memset>
  scan_resp_cp.length = length;
 800a96c:	79fb      	ldrb	r3, [r7, #7]
 800a96e:	743b      	strb	r3, [r7, #16]
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 800a970:	79fb      	ldrb	r3, [r7, #7]
 800a972:	2b1f      	cmp	r3, #31
 800a974:	bf28      	it	cs
 800a976:	231f      	movcs	r3, #31
 800a978:	b2db      	uxtb	r3, r3
 800a97a:	461a      	mov	r2, r3
 800a97c:	f107 0310 	add.w	r3, r7, #16
 800a980:	3301      	adds	r3, #1
 800a982:	6839      	ldr	r1, [r7, #0]
 800a984:	4618      	mov	r0, r3
 800a986:	f003 ff43 	bl	800e810 <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a98a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800a98e:	2218      	movs	r2, #24
 800a990:	2100      	movs	r1, #0
 800a992:	4618      	mov	r0, r3
 800a994:	f003 fcc1 	bl	800e31a <memset>
  rq.ogf = OGF_LE_CTL;
 800a998:	2308      	movs	r3, #8
 800a99a:	863b      	strh	r3, [r7, #48]	@ 0x30
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 800a99c:	2309      	movs	r3, #9
 800a99e:	867b      	strh	r3, [r7, #50]	@ 0x32
  rq.cparam = &scan_resp_cp;
 800a9a0:	f107 0310 	add.w	r3, r7, #16
 800a9a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 800a9a6:	2320      	movs	r3, #32
 800a9a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.rparam = &status;
 800a9aa:	f107 030f 	add.w	r3, r7, #15
 800a9ae:	643b      	str	r3, [r7, #64]	@ 0x40
  rq.rlen = 1;
 800a9b0:	2301      	movs	r3, #1
 800a9b2:	647b      	str	r3, [r7, #68]	@ 0x44
  
  if (hci_send_req(&rq, FALSE) < 0)
 800a9b4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800a9b8:	2100      	movs	r1, #0
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	f000 f906 	bl	800abcc <hci_send_req>
 800a9c0:	4603      	mov	r3, r0
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	da01      	bge.n	800a9ca <hci_le_set_scan_resp_data+0x78>
    return BLE_STATUS_TIMEOUT;
 800a9c6:	23ff      	movs	r3, #255	@ 0xff
 800a9c8:	e000      	b.n	800a9cc <hci_le_set_scan_resp_data+0x7a>
  
  return status;
 800a9ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	3748      	adds	r7, #72	@ 0x48
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	bd80      	pop	{r7, pc}

0800a9d4 <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 800a9d4:	b480      	push	{r7}
 800a9d6:	b085      	sub	sp, #20
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	3308      	adds	r3, #8
 800a9e0:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	781b      	ldrb	r3, [r3, #0]
 800a9e6:	2b04      	cmp	r3, #4
 800a9e8:	d001      	beq.n	800a9ee <verify_packet+0x1a>
    return 1; /* Incorrect type */
 800a9ea:	2301      	movs	r3, #1
 800a9ec:	e00c      	b.n	800aa08 <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	3302      	adds	r3, #2
 800a9f2:	781b      	ldrb	r3, [r3, #0]
 800a9f4:	461a      	mov	r2, r3
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800a9fc:	3b03      	subs	r3, #3
 800a9fe:	429a      	cmp	r2, r3
 800aa00:	d001      	beq.n	800aa06 <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 800aa02:	2302      	movs	r3, #2
 800aa04:	e000      	b.n	800aa08 <verify_packet+0x34>
  
  return 0;      
 800aa06:	2300      	movs	r3, #0
}
 800aa08:	4618      	mov	r0, r3
 800aa0a:	3714      	adds	r7, #20
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa12:	4770      	bx	lr

0800aa14 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b0a6      	sub	sp, #152	@ 0x98
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	607b      	str	r3, [r7, #4]
 800aa1c:	4603      	mov	r3, r0
 800aa1e:	81fb      	strh	r3, [r7, #14]
 800aa20:	460b      	mov	r3, r1
 800aa22:	81bb      	strh	r3, [r7, #12]
 800aa24:	4613      	mov	r3, r2
 800aa26:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 800aa28:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800aa2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aa30:	b21a      	sxth	r2, r3
 800aa32:	89fb      	ldrh	r3, [r7, #14]
 800aa34:	029b      	lsls	r3, r3, #10
 800aa36:	b21b      	sxth	r3, r3
 800aa38:	4313      	orrs	r3, r2
 800aa3a:	b21b      	sxth	r3, r3
 800aa3c:	b29b      	uxth	r3, r3
 800aa3e:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 800aa40:	7afb      	ldrb	r3, [r7, #11]
 800aa42:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 800aa44:	2301      	movs	r3, #1
 800aa46:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 800aa48:	f107 0318 	add.w	r3, r7, #24
 800aa4c:	3301      	adds	r3, #1
 800aa4e:	461a      	mov	r2, r3
 800aa50:	f107 0314 	add.w	r3, r7, #20
 800aa54:	8819      	ldrh	r1, [r3, #0]
 800aa56:	789b      	ldrb	r3, [r3, #2]
 800aa58:	8011      	strh	r1, [r2, #0]
 800aa5a:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 800aa5c:	f107 0318 	add.w	r3, r7, #24
 800aa60:	3304      	adds	r3, #4
 800aa62:	7afa      	ldrb	r2, [r7, #11]
 800aa64:	6879      	ldr	r1, [r7, #4]
 800aa66:	4618      	mov	r0, r3
 800aa68:	f003 fed2 	bl	800e810 <memcpy>
  
  if (hciContext.io.Send)
 800aa6c:	4b08      	ldr	r3, [pc, #32]	@ (800aa90 <send_cmd+0x7c>)
 800aa6e:	691b      	ldr	r3, [r3, #16]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d009      	beq.n	800aa88 <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 800aa74:	4b06      	ldr	r3, [pc, #24]	@ (800aa90 <send_cmd+0x7c>)
 800aa76:	691b      	ldr	r3, [r3, #16]
 800aa78:	7afa      	ldrb	r2, [r7, #11]
 800aa7a:	b292      	uxth	r2, r2
 800aa7c:	3204      	adds	r2, #4
 800aa7e:	b291      	uxth	r1, r2
 800aa80:	f107 0218 	add.w	r2, r7, #24
 800aa84:	4610      	mov	r0, r2
 800aa86:	4798      	blx	r3
  }
}
 800aa88:	bf00      	nop
 800aa8a:	3798      	adds	r7, #152	@ 0x98
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	bd80      	pop	{r7, pc}
 800aa90:	20003ca0 	.word	0x20003ca0

0800aa94 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b084      	sub	sp, #16
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
 800aa9c:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 800aa9e:	e00a      	b.n	800aab6 <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 800aaa0:	f107 030c 	add.w	r3, r7, #12
 800aaa4:	4619      	mov	r1, r3
 800aaa6:	6838      	ldr	r0, [r7, #0]
 800aaa8:	f000 fae8 	bl	800b07c <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	4619      	mov	r1, r3
 800aab0:	6878      	ldr	r0, [r7, #4]
 800aab2:	f000 fa4f 	bl	800af54 <list_insert_head>
  while (!list_is_empty(src_list))
 800aab6:	6838      	ldr	r0, [r7, #0]
 800aab8:	f000 fa2a 	bl	800af10 <list_is_empty>
 800aabc:	4603      	mov	r3, r0
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d0ee      	beq.n	800aaa0 <move_list+0xc>
  }
}
 800aac2:	bf00      	nop
 800aac4:	bf00      	nop
 800aac6:	3710      	adds	r7, #16
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bd80      	pop	{r7, pc}

0800aacc <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b082      	sub	sp, #8
 800aad0:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800aad2:	e009      	b.n	800aae8 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 800aad4:	1d3b      	adds	r3, r7, #4
 800aad6:	4619      	mov	r1, r3
 800aad8:	4809      	ldr	r0, [pc, #36]	@ (800ab00 <free_event_list+0x34>)
 800aada:	f000 faa8 	bl	800b02e <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	4619      	mov	r1, r3
 800aae2:	4808      	ldr	r0, [pc, #32]	@ (800ab04 <free_event_list+0x38>)
 800aae4:	f000 fa5c 	bl	800afa0 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800aae8:	4806      	ldr	r0, [pc, #24]	@ (800ab04 <free_event_list+0x38>)
 800aaea:	f000 faee 	bl	800b0ca <list_get_size>
 800aaee:	4603      	mov	r3, r0
 800aaf0:	2b01      	cmp	r3, #1
 800aaf2:	ddef      	ble.n	800aad4 <free_event_list+0x8>
  }
}
 800aaf4:	bf00      	nop
 800aaf6:	bf00      	nop
 800aaf8:	3708      	adds	r7, #8
 800aafa:	46bd      	mov	sp, r7
 800aafc:	bd80      	pop	{r7, pc}
 800aafe:	bf00      	nop
 800ab00:	200039dc 	.word	0x200039dc
 800ab04:	200039d4 	.word	0x200039d4

0800ab08 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b084      	sub	sp, #16
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
 800ab10:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d002      	beq.n	800ab1e <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 800ab18:	4a18      	ldr	r2, [pc, #96]	@ (800ab7c <hci_init+0x74>)
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 800ab1e:	4818      	ldr	r0, [pc, #96]	@ (800ab80 <hci_init+0x78>)
 800ab20:	f000 f9e6 	bl	800aef0 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 800ab24:	4817      	ldr	r0, [pc, #92]	@ (800ab84 <hci_init+0x7c>)
 800ab26:	f000 f9e3 	bl	800aef0 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 800ab2a:	f7f8 fbb3 	bl	8003294 <hci_tl_lowlevel_init>
    
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800ab2e:	2300      	movs	r3, #0
 800ab30:	73fb      	strb	r3, [r7, #15]
 800ab32:	e00c      	b.n	800ab4e <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 800ab34:	7bfb      	ldrb	r3, [r7, #15]
 800ab36:	228c      	movs	r2, #140	@ 0x8c
 800ab38:	fb02 f303 	mul.w	r3, r2, r3
 800ab3c:	4a12      	ldr	r2, [pc, #72]	@ (800ab88 <hci_init+0x80>)
 800ab3e:	4413      	add	r3, r2
 800ab40:	4619      	mov	r1, r3
 800ab42:	480f      	ldr	r0, [pc, #60]	@ (800ab80 <hci_init+0x78>)
 800ab44:	f000 fa2c 	bl	800afa0 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800ab48:	7bfb      	ldrb	r3, [r7, #15]
 800ab4a:	3301      	adds	r3, #1
 800ab4c:	73fb      	strb	r3, [r7, #15]
 800ab4e:	7bfb      	ldrb	r3, [r7, #15]
 800ab50:	2b04      	cmp	r3, #4
 800ab52:	d9ef      	bls.n	800ab34 <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 800ab54:	4b09      	ldr	r3, [pc, #36]	@ (800ab7c <hci_init+0x74>)
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d003      	beq.n	800ab64 <hci_init+0x5c>
 800ab5c:	4b07      	ldr	r3, [pc, #28]	@ (800ab7c <hci_init+0x74>)
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	2000      	movs	r0, #0
 800ab62:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 800ab64:	4b05      	ldr	r3, [pc, #20]	@ (800ab7c <hci_init+0x74>)
 800ab66:	689b      	ldr	r3, [r3, #8]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d002      	beq.n	800ab72 <hci_init+0x6a>
 800ab6c:	4b03      	ldr	r3, [pc, #12]	@ (800ab7c <hci_init+0x74>)
 800ab6e:	689b      	ldr	r3, [r3, #8]
 800ab70:	4798      	blx	r3
}
 800ab72:	bf00      	nop
 800ab74:	3710      	adds	r7, #16
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}
 800ab7a:	bf00      	nop
 800ab7c:	20003ca0 	.word	0x20003ca0
 800ab80:	200039d4 	.word	0x200039d4
 800ab84:	200039dc 	.word	0x200039dc
 800ab88:	200039e4 	.word	0x200039e4

0800ab8c <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 800ab8c:	b480      	push	{r7}
 800ab8e:	b083      	sub	sp, #12
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	4a0b      	ldr	r2, [pc, #44]	@ (800abc8 <hci_register_io_bus+0x3c>)
 800ab9a:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	68db      	ldr	r3, [r3, #12]
 800aba0:	4a09      	ldr	r2, [pc, #36]	@ (800abc8 <hci_register_io_bus+0x3c>)
 800aba2:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	691b      	ldr	r3, [r3, #16]
 800aba8:	4a07      	ldr	r2, [pc, #28]	@ (800abc8 <hci_register_io_bus+0x3c>)
 800abaa:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	699b      	ldr	r3, [r3, #24]
 800abb0:	4a05      	ldr	r2, [pc, #20]	@ (800abc8 <hci_register_io_bus+0x3c>)
 800abb2:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	689b      	ldr	r3, [r3, #8]
 800abb8:	4a03      	ldr	r2, [pc, #12]	@ (800abc8 <hci_register_io_bus+0x3c>)
 800abba:	6093      	str	r3, [r2, #8]
}
 800abbc:	bf00      	nop
 800abbe:	370c      	adds	r7, #12
 800abc0:	46bd      	mov	sp, r7
 800abc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc6:	4770      	bx	lr
 800abc8:	20003ca0 	.word	0x20003ca0

0800abcc <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b08e      	sub	sp, #56	@ 0x38
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
 800abd4:	460b      	mov	r3, r1
 800abd6:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	885b      	ldrh	r3, [r3, #2]
 800abdc:	b21b      	sxth	r3, r3
 800abde:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800abe2:	b21a      	sxth	r2, r3
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	881b      	ldrh	r3, [r3, #0]
 800abe8:	029b      	lsls	r3, r3, #10
 800abea:	b21b      	sxth	r3, r3
 800abec:	4313      	orrs	r3, r2
 800abee:	b21b      	sxth	r3, r3
 800abf0:	86fb      	strh	r3, [r7, #54]	@ 0x36
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 800abf2:	2300      	movs	r3, #0
 800abf4:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 800abf6:	f107 0308 	add.w	r3, r7, #8
 800abfa:	4618      	mov	r0, r3
 800abfc:	f000 f978 	bl	800aef0 <list_init_head>

  free_event_list();
 800ac00:	f7ff ff64 	bl	800aacc <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	8818      	ldrh	r0, [r3, #0]
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	8859      	ldrh	r1, [r3, #2]
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	68db      	ldr	r3, [r3, #12]
 800ac10:	b2da      	uxtb	r2, r3
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	689b      	ldr	r3, [r3, #8]
 800ac16:	f7ff fefd 	bl	800aa14 <send_cmd>
  
  if (async)
 800ac1a:	78fb      	ldrb	r3, [r7, #3]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d001      	beq.n	800ac24 <hci_send_req+0x58>
  {
    return 0;
 800ac20:	2300      	movs	r3, #0
 800ac22:	e0e2      	b.n	800adea <hci_send_req+0x21e>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 800ac24:	f7fa face 	bl	80051c4 <HAL_GetTick>
 800ac28:	6338      	str	r0, [r7, #48]	@ 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800ac2a:	f7fa facb 	bl	80051c4 <HAL_GetTick>
 800ac2e:	4602      	mov	r2, r0
 800ac30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac32:	1ad3      	subs	r3, r2, r3
 800ac34:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ac38:	f200 80b3 	bhi.w	800ada2 <hci_send_req+0x1d6>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 800ac3c:	486d      	ldr	r0, [pc, #436]	@ (800adf4 <hci_send_req+0x228>)
 800ac3e:	f000 f967 	bl	800af10 <list_is_empty>
 800ac42:	4603      	mov	r3, r0
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d000      	beq.n	800ac4a <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800ac48:	e7ef      	b.n	800ac2a <hci_send_req+0x5e>
      {
        break;
 800ac4a:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 800ac4c:	f107 0310 	add.w	r3, r7, #16
 800ac50:	4619      	mov	r1, r3
 800ac52:	4868      	ldr	r0, [pc, #416]	@ (800adf4 <hci_send_req+0x228>)
 800ac54:	f000 f9eb 	bl	800b02e <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 800ac58:	693b      	ldr	r3, [r7, #16]
 800ac5a:	3308      	adds	r3, #8
 800ac5c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 800ac5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac60:	781b      	ldrb	r3, [r3, #0]
 800ac62:	2b04      	cmp	r3, #4
 800ac64:	d17f      	bne.n	800ad66 <hci_send_req+0x19a>
    {
      event_pckt = (void *)(hci_hdr->data);
 800ac66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac68:	3301      	adds	r3, #1
 800ac6a:	62bb      	str	r3, [r7, #40]	@ 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 800ac6c:	693b      	ldr	r3, [r7, #16]
 800ac6e:	3308      	adds	r3, #8
 800ac70:	3303      	adds	r3, #3
 800ac72:	627b      	str	r3, [r7, #36]	@ 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 800ac74:	693b      	ldr	r3, [r7, #16]
 800ac76:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800ac7a:	3b03      	subs	r3, #3
 800ac7c:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 800ac7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac80:	781b      	ldrb	r3, [r3, #0]
 800ac82:	2b3e      	cmp	r3, #62	@ 0x3e
 800ac84:	d04c      	beq.n	800ad20 <hci_send_req+0x154>
 800ac86:	2b3e      	cmp	r3, #62	@ 0x3e
 800ac88:	dc68      	bgt.n	800ad5c <hci_send_req+0x190>
 800ac8a:	2b10      	cmp	r3, #16
 800ac8c:	f000 808b 	beq.w	800ada6 <hci_send_req+0x1da>
 800ac90:	2b10      	cmp	r3, #16
 800ac92:	dc63      	bgt.n	800ad5c <hci_send_req+0x190>
 800ac94:	2b0e      	cmp	r3, #14
 800ac96:	d023      	beq.n	800ace0 <hci_send_req+0x114>
 800ac98:	2b0f      	cmp	r3, #15
 800ac9a:	d15f      	bne.n	800ad5c <hci_send_req+0x190>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 800ac9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac9e:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 800aca0:	69bb      	ldr	r3, [r7, #24]
 800aca2:	885b      	ldrh	r3, [r3, #2]
 800aca4:	b29b      	uxth	r3, r3
 800aca6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800aca8:	429a      	cmp	r2, r3
 800acaa:	d17e      	bne.n	800adaa <hci_send_req+0x1de>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	685b      	ldr	r3, [r3, #4]
 800acb0:	2b0f      	cmp	r3, #15
 800acb2:	d004      	beq.n	800acbe <hci_send_req+0xf2>
          if (cs->status) {
 800acb4:	69bb      	ldr	r3, [r7, #24]
 800acb6:	781b      	ldrb	r3, [r3, #0]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d051      	beq.n	800ad60 <hci_send_req+0x194>
            goto failed;
 800acbc:	e078      	b.n	800adb0 <hci_send_req+0x1e4>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	695a      	ldr	r2, [r3, #20]
 800acc2:	6a3b      	ldr	r3, [r7, #32]
 800acc4:	429a      	cmp	r2, r3
 800acc6:	bf28      	it	cs
 800acc8:	461a      	movcs	r2, r3
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6918      	ldr	r0, [r3, #16]
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	695b      	ldr	r3, [r3, #20]
 800acd6:	461a      	mov	r2, r3
 800acd8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800acda:	f003 fd99 	bl	800e810 <memcpy>
        goto done;
 800acde:	e078      	b.n	800add2 <hci_send_req+0x206>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 800ace0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ace2:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 800ace4:	697b      	ldr	r3, [r7, #20]
 800ace6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800acea:	b29b      	uxth	r3, r3
 800acec:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800acee:	429a      	cmp	r2, r3
 800acf0:	d15d      	bne.n	800adae <hci_send_req+0x1e2>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 800acf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acf4:	3303      	adds	r3, #3
 800acf6:	627b      	str	r3, [r7, #36]	@ 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 800acf8:	6a3b      	ldr	r3, [r7, #32]
 800acfa:	3b03      	subs	r3, #3
 800acfc:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	695a      	ldr	r2, [r3, #20]
 800ad02:	6a3b      	ldr	r3, [r7, #32]
 800ad04:	429a      	cmp	r2, r3
 800ad06:	bf28      	it	cs
 800ad08:	461a      	movcs	r2, r3
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	6918      	ldr	r0, [r3, #16]
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	695b      	ldr	r3, [r3, #20]
 800ad16:	461a      	mov	r2, r3
 800ad18:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ad1a:	f003 fd79 	bl	800e810 <memcpy>
        goto done;
 800ad1e:	e058      	b.n	800add2 <hci_send_req+0x206>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 800ad20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad22:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 800ad24:	69fb      	ldr	r3, [r7, #28]
 800ad26:	781b      	ldrb	r3, [r3, #0]
 800ad28:	461a      	mov	r2, r3
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	685b      	ldr	r3, [r3, #4]
 800ad2e:	429a      	cmp	r2, r3
 800ad30:	d118      	bne.n	800ad64 <hci_send_req+0x198>
          break;
      
        len -= 1;
 800ad32:	6a3b      	ldr	r3, [r7, #32]
 800ad34:	3b01      	subs	r3, #1
 800ad36:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	695a      	ldr	r2, [r3, #20]
 800ad3c:	6a3b      	ldr	r3, [r7, #32]
 800ad3e:	429a      	cmp	r2, r3
 800ad40:	bf28      	it	cs
 800ad42:	461a      	movcs	r2, r3
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	6918      	ldr	r0, [r3, #16]
 800ad4c:	69fb      	ldr	r3, [r7, #28]
 800ad4e:	1c59      	adds	r1, r3, #1
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	695b      	ldr	r3, [r3, #20]
 800ad54:	461a      	mov	r2, r3
 800ad56:	f003 fd5b 	bl	800e810 <memcpy>
        goto done;
 800ad5a:	e03a      	b.n	800add2 <hci_send_req+0x206>
      
      case EVT_HARDWARE_ERROR:            
        goto failed;
      
      default:      
        break;
 800ad5c:	bf00      	nop
 800ad5e:	e002      	b.n	800ad66 <hci_send_req+0x19a>
          break;
 800ad60:	bf00      	nop
 800ad62:	e000      	b.n	800ad66 <hci_send_req+0x19a>
          break;
 800ad64:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 800ad66:	4824      	ldr	r0, [pc, #144]	@ (800adf8 <hci_send_req+0x22c>)
 800ad68:	f000 f8d2 	bl	800af10 <list_is_empty>
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d00d      	beq.n	800ad8e <hci_send_req+0x1c2>
 800ad72:	4820      	ldr	r0, [pc, #128]	@ (800adf4 <hci_send_req+0x228>)
 800ad74:	f000 f8cc 	bl	800af10 <list_is_empty>
 800ad78:	4603      	mov	r3, r0
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d007      	beq.n	800ad8e <hci_send_req+0x1c2>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800ad7e:	693b      	ldr	r3, [r7, #16]
 800ad80:	4619      	mov	r1, r3
 800ad82:	481d      	ldr	r0, [pc, #116]	@ (800adf8 <hci_send_req+0x22c>)
 800ad84:	f000 f90c 	bl	800afa0 <list_insert_tail>
      hciReadPacket=NULL;
 800ad88:	2300      	movs	r3, #0
 800ad8a:	613b      	str	r3, [r7, #16]
 800ad8c:	e008      	b.n	800ada0 <hci_send_req+0x1d4>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 800ad8e:	693a      	ldr	r2, [r7, #16]
 800ad90:	f107 0308 	add.w	r3, r7, #8
 800ad94:	4611      	mov	r1, r2
 800ad96:	4618      	mov	r0, r3
 800ad98:	f000 f902 	bl	800afa0 <list_insert_tail>
      hciReadPacket=NULL;
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	613b      	str	r3, [r7, #16]
  {
 800ada0:	e740      	b.n	800ac24 <hci_send_req+0x58>
        goto failed;
 800ada2:	bf00      	nop
 800ada4:	e004      	b.n	800adb0 <hci_send_req+0x1e4>
        goto failed;
 800ada6:	bf00      	nop
 800ada8:	e002      	b.n	800adb0 <hci_send_req+0x1e4>
          goto failed;
 800adaa:	bf00      	nop
 800adac:	e000      	b.n	800adb0 <hci_send_req+0x1e4>
          goto failed;
 800adae:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 800adb0:	693b      	ldr	r3, [r7, #16]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d004      	beq.n	800adc0 <hci_send_req+0x1f4>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800adb6:	693b      	ldr	r3, [r7, #16]
 800adb8:	4619      	mov	r1, r3
 800adba:	480f      	ldr	r0, [pc, #60]	@ (800adf8 <hci_send_req+0x22c>)
 800adbc:	f000 f8ca 	bl	800af54 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800adc0:	f107 0308 	add.w	r3, r7, #8
 800adc4:	4619      	mov	r1, r3
 800adc6:	480b      	ldr	r0, [pc, #44]	@ (800adf4 <hci_send_req+0x228>)
 800adc8:	f7ff fe64 	bl	800aa94 <move_list>

  return -1;
 800adcc:	f04f 33ff 	mov.w	r3, #4294967295
 800add0:	e00b      	b.n	800adea <hci_send_req+0x21e>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 800add2:	693b      	ldr	r3, [r7, #16]
 800add4:	4619      	mov	r1, r3
 800add6:	4808      	ldr	r0, [pc, #32]	@ (800adf8 <hci_send_req+0x22c>)
 800add8:	f000 f8bc 	bl	800af54 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800addc:	f107 0308 	add.w	r3, r7, #8
 800ade0:	4619      	mov	r1, r3
 800ade2:	4804      	ldr	r0, [pc, #16]	@ (800adf4 <hci_send_req+0x228>)
 800ade4:	f7ff fe56 	bl	800aa94 <move_list>

  return 0;
 800ade8:	2300      	movs	r3, #0
}
 800adea:	4618      	mov	r0, r3
 800adec:	3738      	adds	r7, #56	@ 0x38
 800adee:	46bd      	mov	sp, r7
 800adf0:	bd80      	pop	{r7, pc}
 800adf2:	bf00      	nop
 800adf4:	200039dc 	.word	0x200039dc
 800adf8:	200039d4 	.word	0x200039d4

0800adfc <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b082      	sub	sp, #8
 800ae00:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 800ae02:	2300      	movs	r3, #0
 800ae04:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800ae06:	e013      	b.n	800ae30 <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 800ae08:	1d3b      	adds	r3, r7, #4
 800ae0a:	4619      	mov	r1, r3
 800ae0c:	480e      	ldr	r0, [pc, #56]	@ (800ae48 <hci_user_evt_proc+0x4c>)
 800ae0e:	f000 f90e 	bl	800b02e <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800ae12:	4b0e      	ldr	r3, [pc, #56]	@ (800ae4c <hci_user_evt_proc+0x50>)
 800ae14:	69db      	ldr	r3, [r3, #28]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d005      	beq.n	800ae26 <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 800ae1a:	4b0c      	ldr	r3, [pc, #48]	@ (800ae4c <hci_user_evt_proc+0x50>)
 800ae1c:	69db      	ldr	r3, [r3, #28]
 800ae1e:	687a      	ldr	r2, [r7, #4]
 800ae20:	3208      	adds	r2, #8
 800ae22:	4610      	mov	r0, r2
 800ae24:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	4619      	mov	r1, r3
 800ae2a:	4809      	ldr	r0, [pc, #36]	@ (800ae50 <hci_user_evt_proc+0x54>)
 800ae2c:	f000 f8b8 	bl	800afa0 <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800ae30:	4805      	ldr	r0, [pc, #20]	@ (800ae48 <hci_user_evt_proc+0x4c>)
 800ae32:	f000 f86d 	bl	800af10 <list_is_empty>
 800ae36:	4603      	mov	r3, r0
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d0e5      	beq.n	800ae08 <hci_user_evt_proc+0xc>
  }
}
 800ae3c:	bf00      	nop
 800ae3e:	bf00      	nop
 800ae40:	3708      	adds	r7, #8
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bd80      	pop	{r7, pc}
 800ae46:	bf00      	nop
 800ae48:	200039dc 	.word	0x200039dc
 800ae4c:	20003ca0 	.word	0x20003ca0
 800ae50:	200039d4 	.word	0x200039d4

0800ae54 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b086      	sub	sp, #24
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 800ae60:	2300      	movs	r3, #0
 800ae62:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 800ae64:	481f      	ldr	r0, [pc, #124]	@ (800aee4 <hci_notify_asynch_evt+0x90>)
 800ae66:	f000 f853 	bl	800af10 <list_is_empty>
 800ae6a:	4603      	mov	r3, r0
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d132      	bne.n	800aed6 <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 800ae70:	f107 030c 	add.w	r3, r7, #12
 800ae74:	4619      	mov	r1, r3
 800ae76:	481b      	ldr	r0, [pc, #108]	@ (800aee4 <hci_notify_asynch_evt+0x90>)
 800ae78:	f000 f8d9 	bl	800b02e <list_remove_head>
    
    if (hciContext.io.Receive)
 800ae7c:	4b1a      	ldr	r3, [pc, #104]	@ (800aee8 <hci_notify_asynch_evt+0x94>)
 800ae7e:	68db      	ldr	r3, [r3, #12]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d02a      	beq.n	800aeda <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 800ae84:	4b18      	ldr	r3, [pc, #96]	@ (800aee8 <hci_notify_asynch_evt+0x94>)
 800ae86:	68db      	ldr	r3, [r3, #12]
 800ae88:	68fa      	ldr	r2, [r7, #12]
 800ae8a:	3208      	adds	r2, #8
 800ae8c:	2180      	movs	r1, #128	@ 0x80
 800ae8e:	4610      	mov	r0, r2
 800ae90:	4798      	blx	r3
 800ae92:	4603      	mov	r3, r0
 800ae94:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 800ae96:	7cfb      	ldrb	r3, [r7, #19]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d016      	beq.n	800aeca <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	7cfa      	ldrb	r2, [r7, #19]
 800aea0:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
        if (verify_packet(hciReadPacket) == 0)
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	4618      	mov	r0, r3
 800aea8:	f7ff fd94 	bl	800a9d4 <verify_packet>
 800aeac:	4603      	mov	r3, r0
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d105      	bne.n	800aebe <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	4619      	mov	r1, r3
 800aeb6:	480d      	ldr	r0, [pc, #52]	@ (800aeec <hci_notify_asynch_evt+0x98>)
 800aeb8:	f000 f872 	bl	800afa0 <list_insert_tail>
 800aebc:	e00d      	b.n	800aeda <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	4619      	mov	r1, r3
 800aec2:	4808      	ldr	r0, [pc, #32]	@ (800aee4 <hci_notify_asynch_evt+0x90>)
 800aec4:	f000 f846 	bl	800af54 <list_insert_head>
 800aec8:	e007      	b.n	800aeda <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	4619      	mov	r1, r3
 800aece:	4805      	ldr	r0, [pc, #20]	@ (800aee4 <hci_notify_asynch_evt+0x90>)
 800aed0:	f000 f840 	bl	800af54 <list_insert_head>
 800aed4:	e001      	b.n	800aeda <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 800aed6:	2301      	movs	r3, #1
 800aed8:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800aeda:	697b      	ldr	r3, [r7, #20]

}
 800aedc:	4618      	mov	r0, r3
 800aede:	3718      	adds	r7, #24
 800aee0:	46bd      	mov	sp, r7
 800aee2:	bd80      	pop	{r7, pc}
 800aee4:	200039d4 	.word	0x200039d4
 800aee8:	20003ca0 	.word	0x20003ca0
 800aeec:	200039dc 	.word	0x200039dc

0800aef0 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 800aef0:	b480      	push	{r7}
 800aef2:	b083      	sub	sp, #12
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	687a      	ldr	r2, [r7, #4]
 800aefc:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	687a      	ldr	r2, [r7, #4]
 800af02:	605a      	str	r2, [r3, #4]
}
 800af04:	bf00      	nop
 800af06:	370c      	adds	r7, #12
 800af08:	46bd      	mov	sp, r7
 800af0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0e:	4770      	bx	lr

0800af10 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 800af10:	b480      	push	{r7}
 800af12:	b087      	sub	sp, #28
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800af18:	f3ef 8310 	mrs	r3, PRIMASK
 800af1c:	60fb      	str	r3, [r7, #12]
  return(result);
 800af1e:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800af20:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800af22:	b672      	cpsid	i
}
 800af24:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	687a      	ldr	r2, [r7, #4]
 800af2c:	429a      	cmp	r2, r3
 800af2e:	d102      	bne.n	800af36 <list_is_empty+0x26>
  {
    return_value = 1;
 800af30:	2301      	movs	r3, #1
 800af32:	75fb      	strb	r3, [r7, #23]
 800af34:	e001      	b.n	800af3a <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 800af36:	2300      	movs	r3, #0
 800af38:	75fb      	strb	r3, [r7, #23]
 800af3a:	693b      	ldr	r3, [r7, #16]
 800af3c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af3e:	68bb      	ldr	r3, [r7, #8]
 800af40:	f383 8810 	msr	PRIMASK, r3
}
 800af44:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 800af46:	7dfb      	ldrb	r3, [r7, #23]
}
 800af48:	4618      	mov	r0, r3
 800af4a:	371c      	adds	r7, #28
 800af4c:	46bd      	mov	sp, r7
 800af4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af52:	4770      	bx	lr

0800af54 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 800af54:	b480      	push	{r7}
 800af56:	b087      	sub	sp, #28
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
 800af5c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800af5e:	f3ef 8310 	mrs	r3, PRIMASK
 800af62:	60fb      	str	r3, [r7, #12]
  return(result);
 800af64:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800af66:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800af68:	b672      	cpsid	i
}
 800af6a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681a      	ldr	r2, [r3, #0]
 800af70:	683b      	ldr	r3, [r7, #0]
 800af72:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	687a      	ldr	r2, [r7, #4]
 800af78:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	683a      	ldr	r2, [r7, #0]
 800af7e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	683a      	ldr	r2, [r7, #0]
 800af86:	605a      	str	r2, [r3, #4]
 800af88:	697b      	ldr	r3, [r7, #20]
 800af8a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af8c:	693b      	ldr	r3, [r7, #16]
 800af8e:	f383 8810 	msr	PRIMASK, r3
}
 800af92:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800af94:	bf00      	nop
 800af96:	371c      	adds	r7, #28
 800af98:	46bd      	mov	sp, r7
 800af9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9e:	4770      	bx	lr

0800afa0 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 800afa0:	b480      	push	{r7}
 800afa2:	b087      	sub	sp, #28
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
 800afa8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800afaa:	f3ef 8310 	mrs	r3, PRIMASK
 800afae:	60fb      	str	r3, [r7, #12]
  return(result);
 800afb0:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800afb2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800afb4:	b672      	cpsid	i
}
 800afb6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 800afb8:	683b      	ldr	r3, [r7, #0]
 800afba:	687a      	ldr	r2, [r7, #4]
 800afbc:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	685a      	ldr	r2, [r3, #4]
 800afc2:	683b      	ldr	r3, [r7, #0]
 800afc4:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	683a      	ldr	r2, [r7, #0]
 800afca:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	685b      	ldr	r3, [r3, #4]
 800afd0:	683a      	ldr	r2, [r7, #0]
 800afd2:	601a      	str	r2, [r3, #0]
 800afd4:	697b      	ldr	r3, [r7, #20]
 800afd6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800afd8:	693b      	ldr	r3, [r7, #16]
 800afda:	f383 8810 	msr	PRIMASK, r3
}
 800afde:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800afe0:	bf00      	nop
 800afe2:	371c      	adds	r7, #28
 800afe4:	46bd      	mov	sp, r7
 800afe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afea:	4770      	bx	lr

0800afec <list_remove_node>:

void list_remove_node (tListNode * node)
{
 800afec:	b480      	push	{r7}
 800afee:	b087      	sub	sp, #28
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aff4:	f3ef 8310 	mrs	r3, PRIMASK
 800aff8:	60fb      	str	r3, [r7, #12]
  return(result);
 800affa:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800affc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800affe:	b672      	cpsid	i
}
 800b000:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	685b      	ldr	r3, [r3, #4]
 800b006:	687a      	ldr	r2, [r7, #4]
 800b008:	6812      	ldr	r2, [r2, #0]
 800b00a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	687a      	ldr	r2, [r7, #4]
 800b012:	6852      	ldr	r2, [r2, #4]
 800b014:	605a      	str	r2, [r3, #4]
 800b016:	697b      	ldr	r3, [r7, #20]
 800b018:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b01a:	693b      	ldr	r3, [r7, #16]
 800b01c:	f383 8810 	msr	PRIMASK, r3
}
 800b020:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800b022:	bf00      	nop
 800b024:	371c      	adds	r7, #28
 800b026:	46bd      	mov	sp, r7
 800b028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02c:	4770      	bx	lr

0800b02e <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 800b02e:	b580      	push	{r7, lr}
 800b030:	b086      	sub	sp, #24
 800b032:	af00      	add	r7, sp, #0
 800b034:	6078      	str	r0, [r7, #4]
 800b036:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b038:	f3ef 8310 	mrs	r3, PRIMASK
 800b03c:	60fb      	str	r3, [r7, #12]
  return(result);
 800b03e:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b040:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b042:	b672      	cpsid	i
}
 800b044:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681a      	ldr	r2, [r3, #0]
 800b04a:	683b      	ldr	r3, [r7, #0]
 800b04c:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	4618      	mov	r0, r3
 800b054:	f7ff ffca 	bl	800afec <list_remove_node>
  (*node)->next = NULL;
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	2200      	movs	r2, #0
 800b05e:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	2200      	movs	r2, #0
 800b066:	605a      	str	r2, [r3, #4]
 800b068:	697b      	ldr	r3, [r7, #20]
 800b06a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b06c:	693b      	ldr	r3, [r7, #16]
 800b06e:	f383 8810 	msr	PRIMASK, r3
}
 800b072:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800b074:	bf00      	nop
 800b076:	3718      	adds	r7, #24
 800b078:	46bd      	mov	sp, r7
 800b07a:	bd80      	pop	{r7, pc}

0800b07c <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b086      	sub	sp, #24
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
 800b084:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b086:	f3ef 8310 	mrs	r3, PRIMASK
 800b08a:	60fb      	str	r3, [r7, #12]
  return(result);
 800b08c:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b08e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b090:	b672      	cpsid	i
}
 800b092:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	685a      	ldr	r2, [r3, #4]
 800b098:	683b      	ldr	r3, [r7, #0]
 800b09a:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	685b      	ldr	r3, [r3, #4]
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	f7ff ffa3 	bl	800afec <list_remove_node>
  (*node)->next = NULL;
 800b0a6:	683b      	ldr	r3, [r7, #0]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	605a      	str	r2, [r3, #4]
 800b0b6:	697b      	ldr	r3, [r7, #20]
 800b0b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b0ba:	693b      	ldr	r3, [r7, #16]
 800b0bc:	f383 8810 	msr	PRIMASK, r3
}
 800b0c0:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800b0c2:	bf00      	nop
 800b0c4:	3718      	adds	r7, #24
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	bd80      	pop	{r7, pc}

0800b0ca <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 800b0ca:	b480      	push	{r7}
 800b0cc:	b089      	sub	sp, #36	@ 0x24
 800b0ce:	af00      	add	r7, sp, #0
 800b0d0:	6078      	str	r0, [r7, #4]
  int size = 0;
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b0d6:	f3ef 8310 	mrs	r3, PRIMASK
 800b0da:	613b      	str	r3, [r7, #16]
  return(result);
 800b0dc:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b0de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b0e0:	b672      	cpsid	i
}
 800b0e2:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800b0ea:	e005      	b.n	800b0f8 <list_get_size+0x2e>
  {
    size++;
 800b0ec:	69fb      	ldr	r3, [r7, #28]
 800b0ee:	3301      	adds	r3, #1
 800b0f0:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 800b0f2:	69bb      	ldr	r3, [r7, #24]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800b0f8:	69ba      	ldr	r2, [r7, #24]
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	429a      	cmp	r2, r3
 800b0fe:	d1f5      	bne.n	800b0ec <list_get_size+0x22>
 800b100:	697b      	ldr	r3, [r7, #20]
 800b102:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	f383 8810 	msr	PRIMASK, r3
}
 800b10a:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 800b10c:	69fb      	ldr	r3, [r7, #28]
}
 800b10e:	4618      	mov	r0, r3
 800b110:	3724      	adds	r7, #36	@ 0x24
 800b112:	46bd      	mov	sp, r7
 800b114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b118:	4770      	bx	lr

0800b11a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b11a:	b480      	push	{r7}
 800b11c:	b085      	sub	sp, #20
 800b11e:	af00      	add	r7, sp, #0
 800b120:	4603      	mov	r3, r0
 800b122:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b124:	2300      	movs	r3, #0
 800b126:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b128:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b12c:	2b84      	cmp	r3, #132	@ 0x84
 800b12e:	d005      	beq.n	800b13c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b130:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	4413      	add	r3, r2
 800b138:	3303      	adds	r3, #3
 800b13a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b13c:	68fb      	ldr	r3, [r7, #12]
}
 800b13e:	4618      	mov	r0, r3
 800b140:	3714      	adds	r7, #20
 800b142:	46bd      	mov	sp, r7
 800b144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b148:	4770      	bx	lr

0800b14a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b14a:	b580      	push	{r7, lr}
 800b14c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b14e:	f000 fae5 	bl	800b71c <vTaskStartScheduler>
  
  return osOK;
 800b152:	2300      	movs	r3, #0
}
 800b154:	4618      	mov	r0, r3
 800b156:	bd80      	pop	{r7, pc}

0800b158 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b158:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b15a:	b089      	sub	sp, #36	@ 0x24
 800b15c:	af04      	add	r7, sp, #16
 800b15e:	6078      	str	r0, [r7, #4]
 800b160:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	695b      	ldr	r3, [r3, #20]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d020      	beq.n	800b1ac <osThreadCreate+0x54>
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	699b      	ldr	r3, [r3, #24]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d01c      	beq.n	800b1ac <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	685c      	ldr	r4, [r3, #4]
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	691e      	ldr	r6, [r3, #16]
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b184:	4618      	mov	r0, r3
 800b186:	f7ff ffc8 	bl	800b11a <makeFreeRtosPriority>
 800b18a:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	695b      	ldr	r3, [r3, #20]
 800b190:	687a      	ldr	r2, [r7, #4]
 800b192:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b194:	9202      	str	r2, [sp, #8]
 800b196:	9301      	str	r3, [sp, #4]
 800b198:	9100      	str	r1, [sp, #0]
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	4632      	mov	r2, r6
 800b19e:	4629      	mov	r1, r5
 800b1a0:	4620      	mov	r0, r4
 800b1a2:	f000 f8ed 	bl	800b380 <xTaskCreateStatic>
 800b1a6:	4603      	mov	r3, r0
 800b1a8:	60fb      	str	r3, [r7, #12]
 800b1aa:	e01c      	b.n	800b1e6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	685c      	ldr	r4, [r3, #4]
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b1b8:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	f7ff ffaa 	bl	800b11a <makeFreeRtosPriority>
 800b1c6:	4602      	mov	r2, r0
 800b1c8:	f107 030c 	add.w	r3, r7, #12
 800b1cc:	9301      	str	r3, [sp, #4]
 800b1ce:	9200      	str	r2, [sp, #0]
 800b1d0:	683b      	ldr	r3, [r7, #0]
 800b1d2:	4632      	mov	r2, r6
 800b1d4:	4629      	mov	r1, r5
 800b1d6:	4620      	mov	r0, r4
 800b1d8:	f000 f932 	bl	800b440 <xTaskCreate>
 800b1dc:	4603      	mov	r3, r0
 800b1de:	2b01      	cmp	r3, #1
 800b1e0:	d001      	beq.n	800b1e6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	e000      	b.n	800b1e8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b1e6:	68fb      	ldr	r3, [r7, #12]
}
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	3714      	adds	r7, #20
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b1f0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b084      	sub	sp, #16
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d001      	beq.n	800b206 <osDelay+0x16>
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	e000      	b.n	800b208 <osDelay+0x18>
 800b206:	2301      	movs	r3, #1
 800b208:	4618      	mov	r0, r3
 800b20a:	f000 fa51 	bl	800b6b0 <vTaskDelay>
  
  return osOK;
 800b20e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b210:	4618      	mov	r0, r3
 800b212:	3710      	adds	r7, #16
 800b214:	46bd      	mov	sp, r7
 800b216:	bd80      	pop	{r7, pc}

0800b218 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b218:	b480      	push	{r7}
 800b21a:	b083      	sub	sp, #12
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	f103 0208 	add.w	r2, r3, #8
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	f04f 32ff 	mov.w	r2, #4294967295
 800b230:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	f103 0208 	add.w	r2, r3, #8
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	f103 0208 	add.w	r2, r3, #8
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	2200      	movs	r2, #0
 800b24a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b24c:	bf00      	nop
 800b24e:	370c      	adds	r7, #12
 800b250:	46bd      	mov	sp, r7
 800b252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b256:	4770      	bx	lr

0800b258 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b258:	b480      	push	{r7}
 800b25a:	b083      	sub	sp, #12
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	2200      	movs	r2, #0
 800b264:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b266:	bf00      	nop
 800b268:	370c      	adds	r7, #12
 800b26a:	46bd      	mov	sp, r7
 800b26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b270:	4770      	bx	lr

0800b272 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b272:	b480      	push	{r7}
 800b274:	b085      	sub	sp, #20
 800b276:	af00      	add	r7, sp, #0
 800b278:	6078      	str	r0, [r7, #4]
 800b27a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	685b      	ldr	r3, [r3, #4]
 800b280:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b282:	683b      	ldr	r3, [r7, #0]
 800b284:	68fa      	ldr	r2, [r7, #12]
 800b286:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	689a      	ldr	r2, [r3, #8]
 800b28c:	683b      	ldr	r3, [r7, #0]
 800b28e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	689b      	ldr	r3, [r3, #8]
 800b294:	683a      	ldr	r2, [r7, #0]
 800b296:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	683a      	ldr	r2, [r7, #0]
 800b29c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b29e:	683b      	ldr	r3, [r7, #0]
 800b2a0:	687a      	ldr	r2, [r7, #4]
 800b2a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	1c5a      	adds	r2, r3, #1
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	601a      	str	r2, [r3, #0]
}
 800b2ae:	bf00      	nop
 800b2b0:	3714      	adds	r7, #20
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b8:	4770      	bx	lr

0800b2ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b2ba:	b480      	push	{r7}
 800b2bc:	b085      	sub	sp, #20
 800b2be:	af00      	add	r7, sp, #0
 800b2c0:	6078      	str	r0, [r7, #4]
 800b2c2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b2c4:	683b      	ldr	r3, [r7, #0]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b2ca:	68bb      	ldr	r3, [r7, #8]
 800b2cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2d0:	d103      	bne.n	800b2da <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	691b      	ldr	r3, [r3, #16]
 800b2d6:	60fb      	str	r3, [r7, #12]
 800b2d8:	e00c      	b.n	800b2f4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	3308      	adds	r3, #8
 800b2de:	60fb      	str	r3, [r7, #12]
 800b2e0:	e002      	b.n	800b2e8 <vListInsert+0x2e>
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	685b      	ldr	r3, [r3, #4]
 800b2e6:	60fb      	str	r3, [r7, #12]
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	685b      	ldr	r3, [r3, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	68ba      	ldr	r2, [r7, #8]
 800b2f0:	429a      	cmp	r2, r3
 800b2f2:	d2f6      	bcs.n	800b2e2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	685a      	ldr	r2, [r3, #4]
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	685b      	ldr	r3, [r3, #4]
 800b300:	683a      	ldr	r2, [r7, #0]
 800b302:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	68fa      	ldr	r2, [r7, #12]
 800b308:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	683a      	ldr	r2, [r7, #0]
 800b30e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b310:	683b      	ldr	r3, [r7, #0]
 800b312:	687a      	ldr	r2, [r7, #4]
 800b314:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	1c5a      	adds	r2, r3, #1
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	601a      	str	r2, [r3, #0]
}
 800b320:	bf00      	nop
 800b322:	3714      	adds	r7, #20
 800b324:	46bd      	mov	sp, r7
 800b326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32a:	4770      	bx	lr

0800b32c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b32c:	b480      	push	{r7}
 800b32e:	b085      	sub	sp, #20
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	691b      	ldr	r3, [r3, #16]
 800b338:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	685b      	ldr	r3, [r3, #4]
 800b33e:	687a      	ldr	r2, [r7, #4]
 800b340:	6892      	ldr	r2, [r2, #8]
 800b342:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	689b      	ldr	r3, [r3, #8]
 800b348:	687a      	ldr	r2, [r7, #4]
 800b34a:	6852      	ldr	r2, [r2, #4]
 800b34c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	685b      	ldr	r3, [r3, #4]
 800b352:	687a      	ldr	r2, [r7, #4]
 800b354:	429a      	cmp	r2, r3
 800b356:	d103      	bne.n	800b360 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	689a      	ldr	r2, [r3, #8]
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2200      	movs	r2, #0
 800b364:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	1e5a      	subs	r2, r3, #1
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	681b      	ldr	r3, [r3, #0]
}
 800b374:	4618      	mov	r0, r3
 800b376:	3714      	adds	r7, #20
 800b378:	46bd      	mov	sp, r7
 800b37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37e:	4770      	bx	lr

0800b380 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b380:	b580      	push	{r7, lr}
 800b382:	b08e      	sub	sp, #56	@ 0x38
 800b384:	af04      	add	r7, sp, #16
 800b386:	60f8      	str	r0, [r7, #12]
 800b388:	60b9      	str	r1, [r7, #8]
 800b38a:	607a      	str	r2, [r7, #4]
 800b38c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b38e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b390:	2b00      	cmp	r3, #0
 800b392:	d10b      	bne.n	800b3ac <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b398:	f383 8811 	msr	BASEPRI, r3
 800b39c:	f3bf 8f6f 	isb	sy
 800b3a0:	f3bf 8f4f 	dsb	sy
 800b3a4:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b3a6:	bf00      	nop
 800b3a8:	bf00      	nop
 800b3aa:	e7fd      	b.n	800b3a8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b3ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d10b      	bne.n	800b3ca <xTaskCreateStatic+0x4a>
	__asm volatile
 800b3b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3b6:	f383 8811 	msr	BASEPRI, r3
 800b3ba:	f3bf 8f6f 	isb	sy
 800b3be:	f3bf 8f4f 	dsb	sy
 800b3c2:	61fb      	str	r3, [r7, #28]
}
 800b3c4:	bf00      	nop
 800b3c6:	bf00      	nop
 800b3c8:	e7fd      	b.n	800b3c6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b3ca:	2354      	movs	r3, #84	@ 0x54
 800b3cc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b3ce:	693b      	ldr	r3, [r7, #16]
 800b3d0:	2b54      	cmp	r3, #84	@ 0x54
 800b3d2:	d00b      	beq.n	800b3ec <xTaskCreateStatic+0x6c>
	__asm volatile
 800b3d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3d8:	f383 8811 	msr	BASEPRI, r3
 800b3dc:	f3bf 8f6f 	isb	sy
 800b3e0:	f3bf 8f4f 	dsb	sy
 800b3e4:	61bb      	str	r3, [r7, #24]
}
 800b3e6:	bf00      	nop
 800b3e8:	bf00      	nop
 800b3ea:	e7fd      	b.n	800b3e8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b3ec:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b3ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d01e      	beq.n	800b432 <xTaskCreateStatic+0xb2>
 800b3f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d01b      	beq.n	800b432 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b3fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3fc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b3fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b400:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b402:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b406:	2202      	movs	r2, #2
 800b408:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b40c:	2300      	movs	r3, #0
 800b40e:	9303      	str	r3, [sp, #12]
 800b410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b412:	9302      	str	r3, [sp, #8]
 800b414:	f107 0314 	add.w	r3, r7, #20
 800b418:	9301      	str	r3, [sp, #4]
 800b41a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b41c:	9300      	str	r3, [sp, #0]
 800b41e:	683b      	ldr	r3, [r7, #0]
 800b420:	687a      	ldr	r2, [r7, #4]
 800b422:	68b9      	ldr	r1, [r7, #8]
 800b424:	68f8      	ldr	r0, [r7, #12]
 800b426:	f000 f850 	bl	800b4ca <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b42a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b42c:	f000 f8d6 	bl	800b5dc <prvAddNewTaskToReadyList>
 800b430:	e001      	b.n	800b436 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800b432:	2300      	movs	r3, #0
 800b434:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b436:	697b      	ldr	r3, [r7, #20]
	}
 800b438:	4618      	mov	r0, r3
 800b43a:	3728      	adds	r7, #40	@ 0x28
 800b43c:	46bd      	mov	sp, r7
 800b43e:	bd80      	pop	{r7, pc}

0800b440 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b440:	b580      	push	{r7, lr}
 800b442:	b08c      	sub	sp, #48	@ 0x30
 800b444:	af04      	add	r7, sp, #16
 800b446:	60f8      	str	r0, [r7, #12]
 800b448:	60b9      	str	r1, [r7, #8]
 800b44a:	603b      	str	r3, [r7, #0]
 800b44c:	4613      	mov	r3, r2
 800b44e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b450:	88fb      	ldrh	r3, [r7, #6]
 800b452:	009b      	lsls	r3, r3, #2
 800b454:	4618      	mov	r0, r3
 800b456:	f000 feef 	bl	800c238 <pvPortMalloc>
 800b45a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b45c:	697b      	ldr	r3, [r7, #20]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d00e      	beq.n	800b480 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b462:	2054      	movs	r0, #84	@ 0x54
 800b464:	f000 fee8 	bl	800c238 <pvPortMalloc>
 800b468:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b46a:	69fb      	ldr	r3, [r7, #28]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d003      	beq.n	800b478 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b470:	69fb      	ldr	r3, [r7, #28]
 800b472:	697a      	ldr	r2, [r7, #20]
 800b474:	631a      	str	r2, [r3, #48]	@ 0x30
 800b476:	e005      	b.n	800b484 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b478:	6978      	ldr	r0, [r7, #20]
 800b47a:	f000 ffab 	bl	800c3d4 <vPortFree>
 800b47e:	e001      	b.n	800b484 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b480:	2300      	movs	r3, #0
 800b482:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b484:	69fb      	ldr	r3, [r7, #28]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d017      	beq.n	800b4ba <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b48a:	69fb      	ldr	r3, [r7, #28]
 800b48c:	2200      	movs	r2, #0
 800b48e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b492:	88fa      	ldrh	r2, [r7, #6]
 800b494:	2300      	movs	r3, #0
 800b496:	9303      	str	r3, [sp, #12]
 800b498:	69fb      	ldr	r3, [r7, #28]
 800b49a:	9302      	str	r3, [sp, #8]
 800b49c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b49e:	9301      	str	r3, [sp, #4]
 800b4a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4a2:	9300      	str	r3, [sp, #0]
 800b4a4:	683b      	ldr	r3, [r7, #0]
 800b4a6:	68b9      	ldr	r1, [r7, #8]
 800b4a8:	68f8      	ldr	r0, [r7, #12]
 800b4aa:	f000 f80e 	bl	800b4ca <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b4ae:	69f8      	ldr	r0, [r7, #28]
 800b4b0:	f000 f894 	bl	800b5dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b4b4:	2301      	movs	r3, #1
 800b4b6:	61bb      	str	r3, [r7, #24]
 800b4b8:	e002      	b.n	800b4c0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b4ba:	f04f 33ff 	mov.w	r3, #4294967295
 800b4be:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b4c0:	69bb      	ldr	r3, [r7, #24]
	}
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	3720      	adds	r7, #32
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	bd80      	pop	{r7, pc}

0800b4ca <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b4ca:	b580      	push	{r7, lr}
 800b4cc:	b088      	sub	sp, #32
 800b4ce:	af00      	add	r7, sp, #0
 800b4d0:	60f8      	str	r0, [r7, #12]
 800b4d2:	60b9      	str	r1, [r7, #8]
 800b4d4:	607a      	str	r2, [r7, #4]
 800b4d6:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b4d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b4e2:	3b01      	subs	r3, #1
 800b4e4:	009b      	lsls	r3, r3, #2
 800b4e6:	4413      	add	r3, r2
 800b4e8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b4ea:	69bb      	ldr	r3, [r7, #24]
 800b4ec:	f023 0307 	bic.w	r3, r3, #7
 800b4f0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b4f2:	69bb      	ldr	r3, [r7, #24]
 800b4f4:	f003 0307 	and.w	r3, r3, #7
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d00b      	beq.n	800b514 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800b4fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b500:	f383 8811 	msr	BASEPRI, r3
 800b504:	f3bf 8f6f 	isb	sy
 800b508:	f3bf 8f4f 	dsb	sy
 800b50c:	617b      	str	r3, [r7, #20]
}
 800b50e:	bf00      	nop
 800b510:	bf00      	nop
 800b512:	e7fd      	b.n	800b510 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b514:	68bb      	ldr	r3, [r7, #8]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d01f      	beq.n	800b55a <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b51a:	2300      	movs	r3, #0
 800b51c:	61fb      	str	r3, [r7, #28]
 800b51e:	e012      	b.n	800b546 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b520:	68ba      	ldr	r2, [r7, #8]
 800b522:	69fb      	ldr	r3, [r7, #28]
 800b524:	4413      	add	r3, r2
 800b526:	7819      	ldrb	r1, [r3, #0]
 800b528:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b52a:	69fb      	ldr	r3, [r7, #28]
 800b52c:	4413      	add	r3, r2
 800b52e:	3334      	adds	r3, #52	@ 0x34
 800b530:	460a      	mov	r2, r1
 800b532:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b534:	68ba      	ldr	r2, [r7, #8]
 800b536:	69fb      	ldr	r3, [r7, #28]
 800b538:	4413      	add	r3, r2
 800b53a:	781b      	ldrb	r3, [r3, #0]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d006      	beq.n	800b54e <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b540:	69fb      	ldr	r3, [r7, #28]
 800b542:	3301      	adds	r3, #1
 800b544:	61fb      	str	r3, [r7, #28]
 800b546:	69fb      	ldr	r3, [r7, #28]
 800b548:	2b0f      	cmp	r3, #15
 800b54a:	d9e9      	bls.n	800b520 <prvInitialiseNewTask+0x56>
 800b54c:	e000      	b.n	800b550 <prvInitialiseNewTask+0x86>
			{
				break;
 800b54e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b552:	2200      	movs	r2, #0
 800b554:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b558:	e003      	b.n	800b562 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b55a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b55c:	2200      	movs	r2, #0
 800b55e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b564:	2b06      	cmp	r3, #6
 800b566:	d901      	bls.n	800b56c <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b568:	2306      	movs	r3, #6
 800b56a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b56c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b56e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b570:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b574:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b576:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b57a:	2200      	movs	r2, #0
 800b57c:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b57e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b580:	3304      	adds	r3, #4
 800b582:	4618      	mov	r0, r3
 800b584:	f7ff fe68 	bl	800b258 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b58a:	3318      	adds	r3, #24
 800b58c:	4618      	mov	r0, r3
 800b58e:	f7ff fe63 	bl	800b258 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b594:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b596:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b59a:	f1c3 0207 	rsb	r2, r3, #7
 800b59e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5a0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b5a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b5a6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b5a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b5ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5b0:	2200      	movs	r2, #0
 800b5b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b5b6:	683a      	ldr	r2, [r7, #0]
 800b5b8:	68f9      	ldr	r1, [r7, #12]
 800b5ba:	69b8      	ldr	r0, [r7, #24]
 800b5bc:	f000 fc2c 	bl	800be18 <pxPortInitialiseStack>
 800b5c0:	4602      	mov	r2, r0
 800b5c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5c4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b5c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d002      	beq.n	800b5d2 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b5cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b5d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b5d2:	bf00      	nop
 800b5d4:	3720      	adds	r7, #32
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	bd80      	pop	{r7, pc}
	...

0800b5dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b082      	sub	sp, #8
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b5e4:	f000 fd48 	bl	800c078 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b5e8:	4b2a      	ldr	r3, [pc, #168]	@ (800b694 <prvAddNewTaskToReadyList+0xb8>)
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	3301      	adds	r3, #1
 800b5ee:	4a29      	ldr	r2, [pc, #164]	@ (800b694 <prvAddNewTaskToReadyList+0xb8>)
 800b5f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b5f2:	4b29      	ldr	r3, [pc, #164]	@ (800b698 <prvAddNewTaskToReadyList+0xbc>)
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d109      	bne.n	800b60e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b5fa:	4a27      	ldr	r2, [pc, #156]	@ (800b698 <prvAddNewTaskToReadyList+0xbc>)
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b600:	4b24      	ldr	r3, [pc, #144]	@ (800b694 <prvAddNewTaskToReadyList+0xb8>)
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	2b01      	cmp	r3, #1
 800b606:	d110      	bne.n	800b62a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b608:	f000 fac4 	bl	800bb94 <prvInitialiseTaskLists>
 800b60c:	e00d      	b.n	800b62a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b60e:	4b23      	ldr	r3, [pc, #140]	@ (800b69c <prvAddNewTaskToReadyList+0xc0>)
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d109      	bne.n	800b62a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b616:	4b20      	ldr	r3, [pc, #128]	@ (800b698 <prvAddNewTaskToReadyList+0xbc>)
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b620:	429a      	cmp	r2, r3
 800b622:	d802      	bhi.n	800b62a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b624:	4a1c      	ldr	r2, [pc, #112]	@ (800b698 <prvAddNewTaskToReadyList+0xbc>)
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b62a:	4b1d      	ldr	r3, [pc, #116]	@ (800b6a0 <prvAddNewTaskToReadyList+0xc4>)
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	3301      	adds	r3, #1
 800b630:	4a1b      	ldr	r2, [pc, #108]	@ (800b6a0 <prvAddNewTaskToReadyList+0xc4>)
 800b632:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b638:	2201      	movs	r2, #1
 800b63a:	409a      	lsls	r2, r3
 800b63c:	4b19      	ldr	r3, [pc, #100]	@ (800b6a4 <prvAddNewTaskToReadyList+0xc8>)
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	4313      	orrs	r3, r2
 800b642:	4a18      	ldr	r2, [pc, #96]	@ (800b6a4 <prvAddNewTaskToReadyList+0xc8>)
 800b644:	6013      	str	r3, [r2, #0]
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b64a:	4613      	mov	r3, r2
 800b64c:	009b      	lsls	r3, r3, #2
 800b64e:	4413      	add	r3, r2
 800b650:	009b      	lsls	r3, r3, #2
 800b652:	4a15      	ldr	r2, [pc, #84]	@ (800b6a8 <prvAddNewTaskToReadyList+0xcc>)
 800b654:	441a      	add	r2, r3
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	3304      	adds	r3, #4
 800b65a:	4619      	mov	r1, r3
 800b65c:	4610      	mov	r0, r2
 800b65e:	f7ff fe08 	bl	800b272 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b662:	f000 fd3b 	bl	800c0dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b666:	4b0d      	ldr	r3, [pc, #52]	@ (800b69c <prvAddNewTaskToReadyList+0xc0>)
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d00e      	beq.n	800b68c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b66e:	4b0a      	ldr	r3, [pc, #40]	@ (800b698 <prvAddNewTaskToReadyList+0xbc>)
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b678:	429a      	cmp	r2, r3
 800b67a:	d207      	bcs.n	800b68c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b67c:	4b0b      	ldr	r3, [pc, #44]	@ (800b6ac <prvAddNewTaskToReadyList+0xd0>)
 800b67e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b682:	601a      	str	r2, [r3, #0]
 800b684:	f3bf 8f4f 	dsb	sy
 800b688:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b68c:	bf00      	nop
 800b68e:	3708      	adds	r7, #8
 800b690:	46bd      	mov	sp, r7
 800b692:	bd80      	pop	{r7, pc}
 800b694:	20003dc0 	.word	0x20003dc0
 800b698:	20003cc0 	.word	0x20003cc0
 800b69c:	20003dcc 	.word	0x20003dcc
 800b6a0:	20003ddc 	.word	0x20003ddc
 800b6a4:	20003dc8 	.word	0x20003dc8
 800b6a8:	20003cc4 	.word	0x20003cc4
 800b6ac:	e000ed04 	.word	0xe000ed04

0800b6b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b084      	sub	sp, #16
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d018      	beq.n	800b6f4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b6c2:	4b14      	ldr	r3, [pc, #80]	@ (800b714 <vTaskDelay+0x64>)
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d00b      	beq.n	800b6e2 <vTaskDelay+0x32>
	__asm volatile
 800b6ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6ce:	f383 8811 	msr	BASEPRI, r3
 800b6d2:	f3bf 8f6f 	isb	sy
 800b6d6:	f3bf 8f4f 	dsb	sy
 800b6da:	60bb      	str	r3, [r7, #8]
}
 800b6dc:	bf00      	nop
 800b6de:	bf00      	nop
 800b6e0:	e7fd      	b.n	800b6de <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b6e2:	f000 f87d 	bl	800b7e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b6e6:	2100      	movs	r1, #0
 800b6e8:	6878      	ldr	r0, [r7, #4]
 800b6ea:	f000 fb2f 	bl	800bd4c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b6ee:	f000 f885 	bl	800b7fc <xTaskResumeAll>
 800b6f2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d107      	bne.n	800b70a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b6fa:	4b07      	ldr	r3, [pc, #28]	@ (800b718 <vTaskDelay+0x68>)
 800b6fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b700:	601a      	str	r2, [r3, #0]
 800b702:	f3bf 8f4f 	dsb	sy
 800b706:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b70a:	bf00      	nop
 800b70c:	3710      	adds	r7, #16
 800b70e:	46bd      	mov	sp, r7
 800b710:	bd80      	pop	{r7, pc}
 800b712:	bf00      	nop
 800b714:	20003de8 	.word	0x20003de8
 800b718:	e000ed04 	.word	0xe000ed04

0800b71c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b08a      	sub	sp, #40	@ 0x28
 800b720:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b722:	2300      	movs	r3, #0
 800b724:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b726:	2300      	movs	r3, #0
 800b728:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b72a:	463a      	mov	r2, r7
 800b72c:	1d39      	adds	r1, r7, #4
 800b72e:	f107 0308 	add.w	r3, r7, #8
 800b732:	4618      	mov	r0, r3
 800b734:	f7f7 fdfa 	bl	800332c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b738:	6839      	ldr	r1, [r7, #0]
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	68ba      	ldr	r2, [r7, #8]
 800b73e:	9202      	str	r2, [sp, #8]
 800b740:	9301      	str	r3, [sp, #4]
 800b742:	2300      	movs	r3, #0
 800b744:	9300      	str	r3, [sp, #0]
 800b746:	2300      	movs	r3, #0
 800b748:	460a      	mov	r2, r1
 800b74a:	491f      	ldr	r1, [pc, #124]	@ (800b7c8 <vTaskStartScheduler+0xac>)
 800b74c:	481f      	ldr	r0, [pc, #124]	@ (800b7cc <vTaskStartScheduler+0xb0>)
 800b74e:	f7ff fe17 	bl	800b380 <xTaskCreateStatic>
 800b752:	4603      	mov	r3, r0
 800b754:	4a1e      	ldr	r2, [pc, #120]	@ (800b7d0 <vTaskStartScheduler+0xb4>)
 800b756:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b758:	4b1d      	ldr	r3, [pc, #116]	@ (800b7d0 <vTaskStartScheduler+0xb4>)
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d002      	beq.n	800b766 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b760:	2301      	movs	r3, #1
 800b762:	617b      	str	r3, [r7, #20]
 800b764:	e001      	b.n	800b76a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b766:	2300      	movs	r3, #0
 800b768:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b76a:	697b      	ldr	r3, [r7, #20]
 800b76c:	2b01      	cmp	r3, #1
 800b76e:	d116      	bne.n	800b79e <vTaskStartScheduler+0x82>
	__asm volatile
 800b770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b774:	f383 8811 	msr	BASEPRI, r3
 800b778:	f3bf 8f6f 	isb	sy
 800b77c:	f3bf 8f4f 	dsb	sy
 800b780:	613b      	str	r3, [r7, #16]
}
 800b782:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b784:	4b13      	ldr	r3, [pc, #76]	@ (800b7d4 <vTaskStartScheduler+0xb8>)
 800b786:	f04f 32ff 	mov.w	r2, #4294967295
 800b78a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b78c:	4b12      	ldr	r3, [pc, #72]	@ (800b7d8 <vTaskStartScheduler+0xbc>)
 800b78e:	2201      	movs	r2, #1
 800b790:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b792:	4b12      	ldr	r3, [pc, #72]	@ (800b7dc <vTaskStartScheduler+0xc0>)
 800b794:	2200      	movs	r2, #0
 800b796:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b798:	f000 fbca 	bl	800bf30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b79c:	e00f      	b.n	800b7be <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b79e:	697b      	ldr	r3, [r7, #20]
 800b7a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7a4:	d10b      	bne.n	800b7be <vTaskStartScheduler+0xa2>
	__asm volatile
 800b7a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7aa:	f383 8811 	msr	BASEPRI, r3
 800b7ae:	f3bf 8f6f 	isb	sy
 800b7b2:	f3bf 8f4f 	dsb	sy
 800b7b6:	60fb      	str	r3, [r7, #12]
}
 800b7b8:	bf00      	nop
 800b7ba:	bf00      	nop
 800b7bc:	e7fd      	b.n	800b7ba <vTaskStartScheduler+0x9e>
}
 800b7be:	bf00      	nop
 800b7c0:	3718      	adds	r7, #24
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	bd80      	pop	{r7, pc}
 800b7c6:	bf00      	nop
 800b7c8:	08012610 	.word	0x08012610
 800b7cc:	0800bb65 	.word	0x0800bb65
 800b7d0:	20003de4 	.word	0x20003de4
 800b7d4:	20003de0 	.word	0x20003de0
 800b7d8:	20003dcc 	.word	0x20003dcc
 800b7dc:	20003dc4 	.word	0x20003dc4

0800b7e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b7e0:	b480      	push	{r7}
 800b7e2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b7e4:	4b04      	ldr	r3, [pc, #16]	@ (800b7f8 <vTaskSuspendAll+0x18>)
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	3301      	adds	r3, #1
 800b7ea:	4a03      	ldr	r2, [pc, #12]	@ (800b7f8 <vTaskSuspendAll+0x18>)
 800b7ec:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b7ee:	bf00      	nop
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f6:	4770      	bx	lr
 800b7f8:	20003de8 	.word	0x20003de8

0800b7fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b084      	sub	sp, #16
 800b800:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b802:	2300      	movs	r3, #0
 800b804:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b806:	2300      	movs	r3, #0
 800b808:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b80a:	4b42      	ldr	r3, [pc, #264]	@ (800b914 <xTaskResumeAll+0x118>)
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d10b      	bne.n	800b82a <xTaskResumeAll+0x2e>
	__asm volatile
 800b812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b816:	f383 8811 	msr	BASEPRI, r3
 800b81a:	f3bf 8f6f 	isb	sy
 800b81e:	f3bf 8f4f 	dsb	sy
 800b822:	603b      	str	r3, [r7, #0]
}
 800b824:	bf00      	nop
 800b826:	bf00      	nop
 800b828:	e7fd      	b.n	800b826 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b82a:	f000 fc25 	bl	800c078 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b82e:	4b39      	ldr	r3, [pc, #228]	@ (800b914 <xTaskResumeAll+0x118>)
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	3b01      	subs	r3, #1
 800b834:	4a37      	ldr	r2, [pc, #220]	@ (800b914 <xTaskResumeAll+0x118>)
 800b836:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b838:	4b36      	ldr	r3, [pc, #216]	@ (800b914 <xTaskResumeAll+0x118>)
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d161      	bne.n	800b904 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b840:	4b35      	ldr	r3, [pc, #212]	@ (800b918 <xTaskResumeAll+0x11c>)
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d05d      	beq.n	800b904 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b848:	e02e      	b.n	800b8a8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b84a:	4b34      	ldr	r3, [pc, #208]	@ (800b91c <xTaskResumeAll+0x120>)
 800b84c:	68db      	ldr	r3, [r3, #12]
 800b84e:	68db      	ldr	r3, [r3, #12]
 800b850:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	3318      	adds	r3, #24
 800b856:	4618      	mov	r0, r3
 800b858:	f7ff fd68 	bl	800b32c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	3304      	adds	r3, #4
 800b860:	4618      	mov	r0, r3
 800b862:	f7ff fd63 	bl	800b32c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b86a:	2201      	movs	r2, #1
 800b86c:	409a      	lsls	r2, r3
 800b86e:	4b2c      	ldr	r3, [pc, #176]	@ (800b920 <xTaskResumeAll+0x124>)
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	4313      	orrs	r3, r2
 800b874:	4a2a      	ldr	r2, [pc, #168]	@ (800b920 <xTaskResumeAll+0x124>)
 800b876:	6013      	str	r3, [r2, #0]
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b87c:	4613      	mov	r3, r2
 800b87e:	009b      	lsls	r3, r3, #2
 800b880:	4413      	add	r3, r2
 800b882:	009b      	lsls	r3, r3, #2
 800b884:	4a27      	ldr	r2, [pc, #156]	@ (800b924 <xTaskResumeAll+0x128>)
 800b886:	441a      	add	r2, r3
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	3304      	adds	r3, #4
 800b88c:	4619      	mov	r1, r3
 800b88e:	4610      	mov	r0, r2
 800b890:	f7ff fcef 	bl	800b272 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b898:	4b23      	ldr	r3, [pc, #140]	@ (800b928 <xTaskResumeAll+0x12c>)
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b89e:	429a      	cmp	r2, r3
 800b8a0:	d302      	bcc.n	800b8a8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b8a2:	4b22      	ldr	r3, [pc, #136]	@ (800b92c <xTaskResumeAll+0x130>)
 800b8a4:	2201      	movs	r2, #1
 800b8a6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b8a8:	4b1c      	ldr	r3, [pc, #112]	@ (800b91c <xTaskResumeAll+0x120>)
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d1cc      	bne.n	800b84a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d001      	beq.n	800b8ba <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b8b6:	f000 fa0b 	bl	800bcd0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b8ba:	4b1d      	ldr	r3, [pc, #116]	@ (800b930 <xTaskResumeAll+0x134>)
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d010      	beq.n	800b8e8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b8c6:	f000 f837 	bl	800b938 <xTaskIncrementTick>
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d002      	beq.n	800b8d6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b8d0:	4b16      	ldr	r3, [pc, #88]	@ (800b92c <xTaskResumeAll+0x130>)
 800b8d2:	2201      	movs	r2, #1
 800b8d4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	3b01      	subs	r3, #1
 800b8da:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d1f1      	bne.n	800b8c6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b8e2:	4b13      	ldr	r3, [pc, #76]	@ (800b930 <xTaskResumeAll+0x134>)
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b8e8:	4b10      	ldr	r3, [pc, #64]	@ (800b92c <xTaskResumeAll+0x130>)
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d009      	beq.n	800b904 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b8f0:	2301      	movs	r3, #1
 800b8f2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b8f4:	4b0f      	ldr	r3, [pc, #60]	@ (800b934 <xTaskResumeAll+0x138>)
 800b8f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b8fa:	601a      	str	r2, [r3, #0]
 800b8fc:	f3bf 8f4f 	dsb	sy
 800b900:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b904:	f000 fbea 	bl	800c0dc <vPortExitCritical>

	return xAlreadyYielded;
 800b908:	68bb      	ldr	r3, [r7, #8]
}
 800b90a:	4618      	mov	r0, r3
 800b90c:	3710      	adds	r7, #16
 800b90e:	46bd      	mov	sp, r7
 800b910:	bd80      	pop	{r7, pc}
 800b912:	bf00      	nop
 800b914:	20003de8 	.word	0x20003de8
 800b918:	20003dc0 	.word	0x20003dc0
 800b91c:	20003d80 	.word	0x20003d80
 800b920:	20003dc8 	.word	0x20003dc8
 800b924:	20003cc4 	.word	0x20003cc4
 800b928:	20003cc0 	.word	0x20003cc0
 800b92c:	20003dd4 	.word	0x20003dd4
 800b930:	20003dd0 	.word	0x20003dd0
 800b934:	e000ed04 	.word	0xe000ed04

0800b938 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b086      	sub	sp, #24
 800b93c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b93e:	2300      	movs	r3, #0
 800b940:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b942:	4b4f      	ldr	r3, [pc, #316]	@ (800ba80 <xTaskIncrementTick+0x148>)
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	2b00      	cmp	r3, #0
 800b948:	f040 808f 	bne.w	800ba6a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b94c:	4b4d      	ldr	r3, [pc, #308]	@ (800ba84 <xTaskIncrementTick+0x14c>)
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	3301      	adds	r3, #1
 800b952:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b954:	4a4b      	ldr	r2, [pc, #300]	@ (800ba84 <xTaskIncrementTick+0x14c>)
 800b956:	693b      	ldr	r3, [r7, #16]
 800b958:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b95a:	693b      	ldr	r3, [r7, #16]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d121      	bne.n	800b9a4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b960:	4b49      	ldr	r3, [pc, #292]	@ (800ba88 <xTaskIncrementTick+0x150>)
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d00b      	beq.n	800b982 <xTaskIncrementTick+0x4a>
	__asm volatile
 800b96a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b96e:	f383 8811 	msr	BASEPRI, r3
 800b972:	f3bf 8f6f 	isb	sy
 800b976:	f3bf 8f4f 	dsb	sy
 800b97a:	603b      	str	r3, [r7, #0]
}
 800b97c:	bf00      	nop
 800b97e:	bf00      	nop
 800b980:	e7fd      	b.n	800b97e <xTaskIncrementTick+0x46>
 800b982:	4b41      	ldr	r3, [pc, #260]	@ (800ba88 <xTaskIncrementTick+0x150>)
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	60fb      	str	r3, [r7, #12]
 800b988:	4b40      	ldr	r3, [pc, #256]	@ (800ba8c <xTaskIncrementTick+0x154>)
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	4a3e      	ldr	r2, [pc, #248]	@ (800ba88 <xTaskIncrementTick+0x150>)
 800b98e:	6013      	str	r3, [r2, #0]
 800b990:	4a3e      	ldr	r2, [pc, #248]	@ (800ba8c <xTaskIncrementTick+0x154>)
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	6013      	str	r3, [r2, #0]
 800b996:	4b3e      	ldr	r3, [pc, #248]	@ (800ba90 <xTaskIncrementTick+0x158>)
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	3301      	adds	r3, #1
 800b99c:	4a3c      	ldr	r2, [pc, #240]	@ (800ba90 <xTaskIncrementTick+0x158>)
 800b99e:	6013      	str	r3, [r2, #0]
 800b9a0:	f000 f996 	bl	800bcd0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b9a4:	4b3b      	ldr	r3, [pc, #236]	@ (800ba94 <xTaskIncrementTick+0x15c>)
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	693a      	ldr	r2, [r7, #16]
 800b9aa:	429a      	cmp	r2, r3
 800b9ac:	d348      	bcc.n	800ba40 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b9ae:	4b36      	ldr	r3, [pc, #216]	@ (800ba88 <xTaskIncrementTick+0x150>)
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d104      	bne.n	800b9c2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b9b8:	4b36      	ldr	r3, [pc, #216]	@ (800ba94 <xTaskIncrementTick+0x15c>)
 800b9ba:	f04f 32ff 	mov.w	r2, #4294967295
 800b9be:	601a      	str	r2, [r3, #0]
					break;
 800b9c0:	e03e      	b.n	800ba40 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b9c2:	4b31      	ldr	r3, [pc, #196]	@ (800ba88 <xTaskIncrementTick+0x150>)
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	68db      	ldr	r3, [r3, #12]
 800b9c8:	68db      	ldr	r3, [r3, #12]
 800b9ca:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b9cc:	68bb      	ldr	r3, [r7, #8]
 800b9ce:	685b      	ldr	r3, [r3, #4]
 800b9d0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b9d2:	693a      	ldr	r2, [r7, #16]
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	429a      	cmp	r2, r3
 800b9d8:	d203      	bcs.n	800b9e2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b9da:	4a2e      	ldr	r2, [pc, #184]	@ (800ba94 <xTaskIncrementTick+0x15c>)
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b9e0:	e02e      	b.n	800ba40 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b9e2:	68bb      	ldr	r3, [r7, #8]
 800b9e4:	3304      	adds	r3, #4
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	f7ff fca0 	bl	800b32c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b9ec:	68bb      	ldr	r3, [r7, #8]
 800b9ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d004      	beq.n	800b9fe <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b9f4:	68bb      	ldr	r3, [r7, #8]
 800b9f6:	3318      	adds	r3, #24
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	f7ff fc97 	bl	800b32c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b9fe:	68bb      	ldr	r3, [r7, #8]
 800ba00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba02:	2201      	movs	r2, #1
 800ba04:	409a      	lsls	r2, r3
 800ba06:	4b24      	ldr	r3, [pc, #144]	@ (800ba98 <xTaskIncrementTick+0x160>)
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	4313      	orrs	r3, r2
 800ba0c:	4a22      	ldr	r2, [pc, #136]	@ (800ba98 <xTaskIncrementTick+0x160>)
 800ba0e:	6013      	str	r3, [r2, #0]
 800ba10:	68bb      	ldr	r3, [r7, #8]
 800ba12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba14:	4613      	mov	r3, r2
 800ba16:	009b      	lsls	r3, r3, #2
 800ba18:	4413      	add	r3, r2
 800ba1a:	009b      	lsls	r3, r3, #2
 800ba1c:	4a1f      	ldr	r2, [pc, #124]	@ (800ba9c <xTaskIncrementTick+0x164>)
 800ba1e:	441a      	add	r2, r3
 800ba20:	68bb      	ldr	r3, [r7, #8]
 800ba22:	3304      	adds	r3, #4
 800ba24:	4619      	mov	r1, r3
 800ba26:	4610      	mov	r0, r2
 800ba28:	f7ff fc23 	bl	800b272 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ba2c:	68bb      	ldr	r3, [r7, #8]
 800ba2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba30:	4b1b      	ldr	r3, [pc, #108]	@ (800baa0 <xTaskIncrementTick+0x168>)
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba36:	429a      	cmp	r2, r3
 800ba38:	d3b9      	bcc.n	800b9ae <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800ba3a:	2301      	movs	r3, #1
 800ba3c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ba3e:	e7b6      	b.n	800b9ae <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ba40:	4b17      	ldr	r3, [pc, #92]	@ (800baa0 <xTaskIncrementTick+0x168>)
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba46:	4915      	ldr	r1, [pc, #84]	@ (800ba9c <xTaskIncrementTick+0x164>)
 800ba48:	4613      	mov	r3, r2
 800ba4a:	009b      	lsls	r3, r3, #2
 800ba4c:	4413      	add	r3, r2
 800ba4e:	009b      	lsls	r3, r3, #2
 800ba50:	440b      	add	r3, r1
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	2b01      	cmp	r3, #1
 800ba56:	d901      	bls.n	800ba5c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800ba58:	2301      	movs	r3, #1
 800ba5a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ba5c:	4b11      	ldr	r3, [pc, #68]	@ (800baa4 <xTaskIncrementTick+0x16c>)
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d007      	beq.n	800ba74 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800ba64:	2301      	movs	r3, #1
 800ba66:	617b      	str	r3, [r7, #20]
 800ba68:	e004      	b.n	800ba74 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ba6a:	4b0f      	ldr	r3, [pc, #60]	@ (800baa8 <xTaskIncrementTick+0x170>)
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	3301      	adds	r3, #1
 800ba70:	4a0d      	ldr	r2, [pc, #52]	@ (800baa8 <xTaskIncrementTick+0x170>)
 800ba72:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ba74:	697b      	ldr	r3, [r7, #20]
}
 800ba76:	4618      	mov	r0, r3
 800ba78:	3718      	adds	r7, #24
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	bd80      	pop	{r7, pc}
 800ba7e:	bf00      	nop
 800ba80:	20003de8 	.word	0x20003de8
 800ba84:	20003dc4 	.word	0x20003dc4
 800ba88:	20003d78 	.word	0x20003d78
 800ba8c:	20003d7c 	.word	0x20003d7c
 800ba90:	20003dd8 	.word	0x20003dd8
 800ba94:	20003de0 	.word	0x20003de0
 800ba98:	20003dc8 	.word	0x20003dc8
 800ba9c:	20003cc4 	.word	0x20003cc4
 800baa0:	20003cc0 	.word	0x20003cc0
 800baa4:	20003dd4 	.word	0x20003dd4
 800baa8:	20003dd0 	.word	0x20003dd0

0800baac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800baac:	b480      	push	{r7}
 800baae:	b087      	sub	sp, #28
 800bab0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bab2:	4b27      	ldr	r3, [pc, #156]	@ (800bb50 <vTaskSwitchContext+0xa4>)
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d003      	beq.n	800bac2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800baba:	4b26      	ldr	r3, [pc, #152]	@ (800bb54 <vTaskSwitchContext+0xa8>)
 800babc:	2201      	movs	r2, #1
 800babe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bac0:	e040      	b.n	800bb44 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800bac2:	4b24      	ldr	r3, [pc, #144]	@ (800bb54 <vTaskSwitchContext+0xa8>)
 800bac4:	2200      	movs	r2, #0
 800bac6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bac8:	4b23      	ldr	r3, [pc, #140]	@ (800bb58 <vTaskSwitchContext+0xac>)
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	fab3 f383 	clz	r3, r3
 800bad4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800bad6:	7afb      	ldrb	r3, [r7, #11]
 800bad8:	f1c3 031f 	rsb	r3, r3, #31
 800badc:	617b      	str	r3, [r7, #20]
 800bade:	491f      	ldr	r1, [pc, #124]	@ (800bb5c <vTaskSwitchContext+0xb0>)
 800bae0:	697a      	ldr	r2, [r7, #20]
 800bae2:	4613      	mov	r3, r2
 800bae4:	009b      	lsls	r3, r3, #2
 800bae6:	4413      	add	r3, r2
 800bae8:	009b      	lsls	r3, r3, #2
 800baea:	440b      	add	r3, r1
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d10b      	bne.n	800bb0a <vTaskSwitchContext+0x5e>
	__asm volatile
 800baf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800baf6:	f383 8811 	msr	BASEPRI, r3
 800bafa:	f3bf 8f6f 	isb	sy
 800bafe:	f3bf 8f4f 	dsb	sy
 800bb02:	607b      	str	r3, [r7, #4]
}
 800bb04:	bf00      	nop
 800bb06:	bf00      	nop
 800bb08:	e7fd      	b.n	800bb06 <vTaskSwitchContext+0x5a>
 800bb0a:	697a      	ldr	r2, [r7, #20]
 800bb0c:	4613      	mov	r3, r2
 800bb0e:	009b      	lsls	r3, r3, #2
 800bb10:	4413      	add	r3, r2
 800bb12:	009b      	lsls	r3, r3, #2
 800bb14:	4a11      	ldr	r2, [pc, #68]	@ (800bb5c <vTaskSwitchContext+0xb0>)
 800bb16:	4413      	add	r3, r2
 800bb18:	613b      	str	r3, [r7, #16]
 800bb1a:	693b      	ldr	r3, [r7, #16]
 800bb1c:	685b      	ldr	r3, [r3, #4]
 800bb1e:	685a      	ldr	r2, [r3, #4]
 800bb20:	693b      	ldr	r3, [r7, #16]
 800bb22:	605a      	str	r2, [r3, #4]
 800bb24:	693b      	ldr	r3, [r7, #16]
 800bb26:	685a      	ldr	r2, [r3, #4]
 800bb28:	693b      	ldr	r3, [r7, #16]
 800bb2a:	3308      	adds	r3, #8
 800bb2c:	429a      	cmp	r2, r3
 800bb2e:	d104      	bne.n	800bb3a <vTaskSwitchContext+0x8e>
 800bb30:	693b      	ldr	r3, [r7, #16]
 800bb32:	685b      	ldr	r3, [r3, #4]
 800bb34:	685a      	ldr	r2, [r3, #4]
 800bb36:	693b      	ldr	r3, [r7, #16]
 800bb38:	605a      	str	r2, [r3, #4]
 800bb3a:	693b      	ldr	r3, [r7, #16]
 800bb3c:	685b      	ldr	r3, [r3, #4]
 800bb3e:	68db      	ldr	r3, [r3, #12]
 800bb40:	4a07      	ldr	r2, [pc, #28]	@ (800bb60 <vTaskSwitchContext+0xb4>)
 800bb42:	6013      	str	r3, [r2, #0]
}
 800bb44:	bf00      	nop
 800bb46:	371c      	adds	r7, #28
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4e:	4770      	bx	lr
 800bb50:	20003de8 	.word	0x20003de8
 800bb54:	20003dd4 	.word	0x20003dd4
 800bb58:	20003dc8 	.word	0x20003dc8
 800bb5c:	20003cc4 	.word	0x20003cc4
 800bb60:	20003cc0 	.word	0x20003cc0

0800bb64 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b082      	sub	sp, #8
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bb6c:	f000 f852 	bl	800bc14 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bb70:	4b06      	ldr	r3, [pc, #24]	@ (800bb8c <prvIdleTask+0x28>)
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	2b01      	cmp	r3, #1
 800bb76:	d9f9      	bls.n	800bb6c <prvIdleTask+0x8>
			{
				taskYIELD();
 800bb78:	4b05      	ldr	r3, [pc, #20]	@ (800bb90 <prvIdleTask+0x2c>)
 800bb7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bb7e:	601a      	str	r2, [r3, #0]
 800bb80:	f3bf 8f4f 	dsb	sy
 800bb84:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bb88:	e7f0      	b.n	800bb6c <prvIdleTask+0x8>
 800bb8a:	bf00      	nop
 800bb8c:	20003cc4 	.word	0x20003cc4
 800bb90:	e000ed04 	.word	0xe000ed04

0800bb94 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bb94:	b580      	push	{r7, lr}
 800bb96:	b082      	sub	sp, #8
 800bb98:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	607b      	str	r3, [r7, #4]
 800bb9e:	e00c      	b.n	800bbba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bba0:	687a      	ldr	r2, [r7, #4]
 800bba2:	4613      	mov	r3, r2
 800bba4:	009b      	lsls	r3, r3, #2
 800bba6:	4413      	add	r3, r2
 800bba8:	009b      	lsls	r3, r3, #2
 800bbaa:	4a12      	ldr	r2, [pc, #72]	@ (800bbf4 <prvInitialiseTaskLists+0x60>)
 800bbac:	4413      	add	r3, r2
 800bbae:	4618      	mov	r0, r3
 800bbb0:	f7ff fb32 	bl	800b218 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	3301      	adds	r3, #1
 800bbb8:	607b      	str	r3, [r7, #4]
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	2b06      	cmp	r3, #6
 800bbbe:	d9ef      	bls.n	800bba0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bbc0:	480d      	ldr	r0, [pc, #52]	@ (800bbf8 <prvInitialiseTaskLists+0x64>)
 800bbc2:	f7ff fb29 	bl	800b218 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bbc6:	480d      	ldr	r0, [pc, #52]	@ (800bbfc <prvInitialiseTaskLists+0x68>)
 800bbc8:	f7ff fb26 	bl	800b218 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bbcc:	480c      	ldr	r0, [pc, #48]	@ (800bc00 <prvInitialiseTaskLists+0x6c>)
 800bbce:	f7ff fb23 	bl	800b218 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bbd2:	480c      	ldr	r0, [pc, #48]	@ (800bc04 <prvInitialiseTaskLists+0x70>)
 800bbd4:	f7ff fb20 	bl	800b218 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bbd8:	480b      	ldr	r0, [pc, #44]	@ (800bc08 <prvInitialiseTaskLists+0x74>)
 800bbda:	f7ff fb1d 	bl	800b218 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bbde:	4b0b      	ldr	r3, [pc, #44]	@ (800bc0c <prvInitialiseTaskLists+0x78>)
 800bbe0:	4a05      	ldr	r2, [pc, #20]	@ (800bbf8 <prvInitialiseTaskLists+0x64>)
 800bbe2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bbe4:	4b0a      	ldr	r3, [pc, #40]	@ (800bc10 <prvInitialiseTaskLists+0x7c>)
 800bbe6:	4a05      	ldr	r2, [pc, #20]	@ (800bbfc <prvInitialiseTaskLists+0x68>)
 800bbe8:	601a      	str	r2, [r3, #0]
}
 800bbea:	bf00      	nop
 800bbec:	3708      	adds	r7, #8
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	bd80      	pop	{r7, pc}
 800bbf2:	bf00      	nop
 800bbf4:	20003cc4 	.word	0x20003cc4
 800bbf8:	20003d50 	.word	0x20003d50
 800bbfc:	20003d64 	.word	0x20003d64
 800bc00:	20003d80 	.word	0x20003d80
 800bc04:	20003d94 	.word	0x20003d94
 800bc08:	20003dac 	.word	0x20003dac
 800bc0c:	20003d78 	.word	0x20003d78
 800bc10:	20003d7c 	.word	0x20003d7c

0800bc14 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b082      	sub	sp, #8
 800bc18:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bc1a:	e019      	b.n	800bc50 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bc1c:	f000 fa2c 	bl	800c078 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc20:	4b10      	ldr	r3, [pc, #64]	@ (800bc64 <prvCheckTasksWaitingTermination+0x50>)
 800bc22:	68db      	ldr	r3, [r3, #12]
 800bc24:	68db      	ldr	r3, [r3, #12]
 800bc26:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	3304      	adds	r3, #4
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	f7ff fb7d 	bl	800b32c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bc32:	4b0d      	ldr	r3, [pc, #52]	@ (800bc68 <prvCheckTasksWaitingTermination+0x54>)
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	3b01      	subs	r3, #1
 800bc38:	4a0b      	ldr	r2, [pc, #44]	@ (800bc68 <prvCheckTasksWaitingTermination+0x54>)
 800bc3a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bc3c:	4b0b      	ldr	r3, [pc, #44]	@ (800bc6c <prvCheckTasksWaitingTermination+0x58>)
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	3b01      	subs	r3, #1
 800bc42:	4a0a      	ldr	r2, [pc, #40]	@ (800bc6c <prvCheckTasksWaitingTermination+0x58>)
 800bc44:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bc46:	f000 fa49 	bl	800c0dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bc4a:	6878      	ldr	r0, [r7, #4]
 800bc4c:	f000 f810 	bl	800bc70 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bc50:	4b06      	ldr	r3, [pc, #24]	@ (800bc6c <prvCheckTasksWaitingTermination+0x58>)
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d1e1      	bne.n	800bc1c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bc58:	bf00      	nop
 800bc5a:	bf00      	nop
 800bc5c:	3708      	adds	r7, #8
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	bd80      	pop	{r7, pc}
 800bc62:	bf00      	nop
 800bc64:	20003d94 	.word	0x20003d94
 800bc68:	20003dc0 	.word	0x20003dc0
 800bc6c:	20003da8 	.word	0x20003da8

0800bc70 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b084      	sub	sp, #16
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d108      	bne.n	800bc94 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc86:	4618      	mov	r0, r3
 800bc88:	f000 fba4 	bl	800c3d4 <vPortFree>
				vPortFree( pxTCB );
 800bc8c:	6878      	ldr	r0, [r7, #4]
 800bc8e:	f000 fba1 	bl	800c3d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bc92:	e019      	b.n	800bcc8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800bc9a:	2b01      	cmp	r3, #1
 800bc9c:	d103      	bne.n	800bca6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bc9e:	6878      	ldr	r0, [r7, #4]
 800bca0:	f000 fb98 	bl	800c3d4 <vPortFree>
	}
 800bca4:	e010      	b.n	800bcc8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800bcac:	2b02      	cmp	r3, #2
 800bcae:	d00b      	beq.n	800bcc8 <prvDeleteTCB+0x58>
	__asm volatile
 800bcb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcb4:	f383 8811 	msr	BASEPRI, r3
 800bcb8:	f3bf 8f6f 	isb	sy
 800bcbc:	f3bf 8f4f 	dsb	sy
 800bcc0:	60fb      	str	r3, [r7, #12]
}
 800bcc2:	bf00      	nop
 800bcc4:	bf00      	nop
 800bcc6:	e7fd      	b.n	800bcc4 <prvDeleteTCB+0x54>
	}
 800bcc8:	bf00      	nop
 800bcca:	3710      	adds	r7, #16
 800bccc:	46bd      	mov	sp, r7
 800bcce:	bd80      	pop	{r7, pc}

0800bcd0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bcd0:	b480      	push	{r7}
 800bcd2:	b083      	sub	sp, #12
 800bcd4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bcd6:	4b0c      	ldr	r3, [pc, #48]	@ (800bd08 <prvResetNextTaskUnblockTime+0x38>)
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d104      	bne.n	800bcea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bce0:	4b0a      	ldr	r3, [pc, #40]	@ (800bd0c <prvResetNextTaskUnblockTime+0x3c>)
 800bce2:	f04f 32ff 	mov.w	r2, #4294967295
 800bce6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bce8:	e008      	b.n	800bcfc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bcea:	4b07      	ldr	r3, [pc, #28]	@ (800bd08 <prvResetNextTaskUnblockTime+0x38>)
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	68db      	ldr	r3, [r3, #12]
 800bcf0:	68db      	ldr	r3, [r3, #12]
 800bcf2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	685b      	ldr	r3, [r3, #4]
 800bcf8:	4a04      	ldr	r2, [pc, #16]	@ (800bd0c <prvResetNextTaskUnblockTime+0x3c>)
 800bcfa:	6013      	str	r3, [r2, #0]
}
 800bcfc:	bf00      	nop
 800bcfe:	370c      	adds	r7, #12
 800bd00:	46bd      	mov	sp, r7
 800bd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd06:	4770      	bx	lr
 800bd08:	20003d78 	.word	0x20003d78
 800bd0c:	20003de0 	.word	0x20003de0

0800bd10 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bd10:	b480      	push	{r7}
 800bd12:	b083      	sub	sp, #12
 800bd14:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bd16:	4b0b      	ldr	r3, [pc, #44]	@ (800bd44 <xTaskGetSchedulerState+0x34>)
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d102      	bne.n	800bd24 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bd1e:	2301      	movs	r3, #1
 800bd20:	607b      	str	r3, [r7, #4]
 800bd22:	e008      	b.n	800bd36 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bd24:	4b08      	ldr	r3, [pc, #32]	@ (800bd48 <xTaskGetSchedulerState+0x38>)
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d102      	bne.n	800bd32 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bd2c:	2302      	movs	r3, #2
 800bd2e:	607b      	str	r3, [r7, #4]
 800bd30:	e001      	b.n	800bd36 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bd32:	2300      	movs	r3, #0
 800bd34:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bd36:	687b      	ldr	r3, [r7, #4]
	}
 800bd38:	4618      	mov	r0, r3
 800bd3a:	370c      	adds	r7, #12
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd42:	4770      	bx	lr
 800bd44:	20003dcc 	.word	0x20003dcc
 800bd48:	20003de8 	.word	0x20003de8

0800bd4c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b084      	sub	sp, #16
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
 800bd54:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bd56:	4b29      	ldr	r3, [pc, #164]	@ (800bdfc <prvAddCurrentTaskToDelayedList+0xb0>)
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bd5c:	4b28      	ldr	r3, [pc, #160]	@ (800be00 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	3304      	adds	r3, #4
 800bd62:	4618      	mov	r0, r3
 800bd64:	f7ff fae2 	bl	800b32c <uxListRemove>
 800bd68:	4603      	mov	r3, r0
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d10b      	bne.n	800bd86 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800bd6e:	4b24      	ldr	r3, [pc, #144]	@ (800be00 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd74:	2201      	movs	r2, #1
 800bd76:	fa02 f303 	lsl.w	r3, r2, r3
 800bd7a:	43da      	mvns	r2, r3
 800bd7c:	4b21      	ldr	r3, [pc, #132]	@ (800be04 <prvAddCurrentTaskToDelayedList+0xb8>)
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	4013      	ands	r3, r2
 800bd82:	4a20      	ldr	r2, [pc, #128]	@ (800be04 <prvAddCurrentTaskToDelayedList+0xb8>)
 800bd84:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd8c:	d10a      	bne.n	800bda4 <prvAddCurrentTaskToDelayedList+0x58>
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d007      	beq.n	800bda4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bd94:	4b1a      	ldr	r3, [pc, #104]	@ (800be00 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	3304      	adds	r3, #4
 800bd9a:	4619      	mov	r1, r3
 800bd9c:	481a      	ldr	r0, [pc, #104]	@ (800be08 <prvAddCurrentTaskToDelayedList+0xbc>)
 800bd9e:	f7ff fa68 	bl	800b272 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bda2:	e026      	b.n	800bdf2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bda4:	68fa      	ldr	r2, [r7, #12]
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	4413      	add	r3, r2
 800bdaa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bdac:	4b14      	ldr	r3, [pc, #80]	@ (800be00 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	68ba      	ldr	r2, [r7, #8]
 800bdb2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bdb4:	68ba      	ldr	r2, [r7, #8]
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	429a      	cmp	r2, r3
 800bdba:	d209      	bcs.n	800bdd0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bdbc:	4b13      	ldr	r3, [pc, #76]	@ (800be0c <prvAddCurrentTaskToDelayedList+0xc0>)
 800bdbe:	681a      	ldr	r2, [r3, #0]
 800bdc0:	4b0f      	ldr	r3, [pc, #60]	@ (800be00 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	3304      	adds	r3, #4
 800bdc6:	4619      	mov	r1, r3
 800bdc8:	4610      	mov	r0, r2
 800bdca:	f7ff fa76 	bl	800b2ba <vListInsert>
}
 800bdce:	e010      	b.n	800bdf2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bdd0:	4b0f      	ldr	r3, [pc, #60]	@ (800be10 <prvAddCurrentTaskToDelayedList+0xc4>)
 800bdd2:	681a      	ldr	r2, [r3, #0]
 800bdd4:	4b0a      	ldr	r3, [pc, #40]	@ (800be00 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	3304      	adds	r3, #4
 800bdda:	4619      	mov	r1, r3
 800bddc:	4610      	mov	r0, r2
 800bdde:	f7ff fa6c 	bl	800b2ba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bde2:	4b0c      	ldr	r3, [pc, #48]	@ (800be14 <prvAddCurrentTaskToDelayedList+0xc8>)
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	68ba      	ldr	r2, [r7, #8]
 800bde8:	429a      	cmp	r2, r3
 800bdea:	d202      	bcs.n	800bdf2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800bdec:	4a09      	ldr	r2, [pc, #36]	@ (800be14 <prvAddCurrentTaskToDelayedList+0xc8>)
 800bdee:	68bb      	ldr	r3, [r7, #8]
 800bdf0:	6013      	str	r3, [r2, #0]
}
 800bdf2:	bf00      	nop
 800bdf4:	3710      	adds	r7, #16
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	bd80      	pop	{r7, pc}
 800bdfa:	bf00      	nop
 800bdfc:	20003dc4 	.word	0x20003dc4
 800be00:	20003cc0 	.word	0x20003cc0
 800be04:	20003dc8 	.word	0x20003dc8
 800be08:	20003dac 	.word	0x20003dac
 800be0c:	20003d7c 	.word	0x20003d7c
 800be10:	20003d78 	.word	0x20003d78
 800be14:	20003de0 	.word	0x20003de0

0800be18 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800be18:	b480      	push	{r7}
 800be1a:	b085      	sub	sp, #20
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	60f8      	str	r0, [r7, #12]
 800be20:	60b9      	str	r1, [r7, #8]
 800be22:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	3b04      	subs	r3, #4
 800be28:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800be30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	3b04      	subs	r3, #4
 800be36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800be38:	68bb      	ldr	r3, [r7, #8]
 800be3a:	f023 0201 	bic.w	r2, r3, #1
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	3b04      	subs	r3, #4
 800be46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800be48:	4a0c      	ldr	r2, [pc, #48]	@ (800be7c <pxPortInitialiseStack+0x64>)
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	3b14      	subs	r3, #20
 800be52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800be54:	687a      	ldr	r2, [r7, #4]
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	3b04      	subs	r3, #4
 800be5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	f06f 0202 	mvn.w	r2, #2
 800be66:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	3b20      	subs	r3, #32
 800be6c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800be6e:	68fb      	ldr	r3, [r7, #12]
}
 800be70:	4618      	mov	r0, r3
 800be72:	3714      	adds	r7, #20
 800be74:	46bd      	mov	sp, r7
 800be76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7a:	4770      	bx	lr
 800be7c:	0800be81 	.word	0x0800be81

0800be80 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800be80:	b480      	push	{r7}
 800be82:	b085      	sub	sp, #20
 800be84:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800be86:	2300      	movs	r3, #0
 800be88:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800be8a:	4b13      	ldr	r3, [pc, #76]	@ (800bed8 <prvTaskExitError+0x58>)
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be92:	d00b      	beq.n	800beac <prvTaskExitError+0x2c>
	__asm volatile
 800be94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be98:	f383 8811 	msr	BASEPRI, r3
 800be9c:	f3bf 8f6f 	isb	sy
 800bea0:	f3bf 8f4f 	dsb	sy
 800bea4:	60fb      	str	r3, [r7, #12]
}
 800bea6:	bf00      	nop
 800bea8:	bf00      	nop
 800beaa:	e7fd      	b.n	800bea8 <prvTaskExitError+0x28>
	__asm volatile
 800beac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800beb0:	f383 8811 	msr	BASEPRI, r3
 800beb4:	f3bf 8f6f 	isb	sy
 800beb8:	f3bf 8f4f 	dsb	sy
 800bebc:	60bb      	str	r3, [r7, #8]
}
 800bebe:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bec0:	bf00      	nop
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d0fc      	beq.n	800bec2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bec8:	bf00      	nop
 800beca:	bf00      	nop
 800becc:	3714      	adds	r7, #20
 800bece:	46bd      	mov	sp, r7
 800bed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed4:	4770      	bx	lr
 800bed6:	bf00      	nop
 800bed8:	20000564 	.word	0x20000564
 800bedc:	00000000 	.word	0x00000000

0800bee0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bee0:	4b07      	ldr	r3, [pc, #28]	@ (800bf00 <pxCurrentTCBConst2>)
 800bee2:	6819      	ldr	r1, [r3, #0]
 800bee4:	6808      	ldr	r0, [r1, #0]
 800bee6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beea:	f380 8809 	msr	PSP, r0
 800beee:	f3bf 8f6f 	isb	sy
 800bef2:	f04f 0000 	mov.w	r0, #0
 800bef6:	f380 8811 	msr	BASEPRI, r0
 800befa:	4770      	bx	lr
 800befc:	f3af 8000 	nop.w

0800bf00 <pxCurrentTCBConst2>:
 800bf00:	20003cc0 	.word	0x20003cc0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bf04:	bf00      	nop
 800bf06:	bf00      	nop

0800bf08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bf08:	4808      	ldr	r0, [pc, #32]	@ (800bf2c <prvPortStartFirstTask+0x24>)
 800bf0a:	6800      	ldr	r0, [r0, #0]
 800bf0c:	6800      	ldr	r0, [r0, #0]
 800bf0e:	f380 8808 	msr	MSP, r0
 800bf12:	f04f 0000 	mov.w	r0, #0
 800bf16:	f380 8814 	msr	CONTROL, r0
 800bf1a:	b662      	cpsie	i
 800bf1c:	b661      	cpsie	f
 800bf1e:	f3bf 8f4f 	dsb	sy
 800bf22:	f3bf 8f6f 	isb	sy
 800bf26:	df00      	svc	0
 800bf28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bf2a:	bf00      	nop
 800bf2c:	e000ed08 	.word	0xe000ed08

0800bf30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b086      	sub	sp, #24
 800bf34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bf36:	4b47      	ldr	r3, [pc, #284]	@ (800c054 <xPortStartScheduler+0x124>)
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	4a47      	ldr	r2, [pc, #284]	@ (800c058 <xPortStartScheduler+0x128>)
 800bf3c:	4293      	cmp	r3, r2
 800bf3e:	d10b      	bne.n	800bf58 <xPortStartScheduler+0x28>
	__asm volatile
 800bf40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf44:	f383 8811 	msr	BASEPRI, r3
 800bf48:	f3bf 8f6f 	isb	sy
 800bf4c:	f3bf 8f4f 	dsb	sy
 800bf50:	613b      	str	r3, [r7, #16]
}
 800bf52:	bf00      	nop
 800bf54:	bf00      	nop
 800bf56:	e7fd      	b.n	800bf54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bf58:	4b3e      	ldr	r3, [pc, #248]	@ (800c054 <xPortStartScheduler+0x124>)
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	4a3f      	ldr	r2, [pc, #252]	@ (800c05c <xPortStartScheduler+0x12c>)
 800bf5e:	4293      	cmp	r3, r2
 800bf60:	d10b      	bne.n	800bf7a <xPortStartScheduler+0x4a>
	__asm volatile
 800bf62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf66:	f383 8811 	msr	BASEPRI, r3
 800bf6a:	f3bf 8f6f 	isb	sy
 800bf6e:	f3bf 8f4f 	dsb	sy
 800bf72:	60fb      	str	r3, [r7, #12]
}
 800bf74:	bf00      	nop
 800bf76:	bf00      	nop
 800bf78:	e7fd      	b.n	800bf76 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bf7a:	4b39      	ldr	r3, [pc, #228]	@ (800c060 <xPortStartScheduler+0x130>)
 800bf7c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bf7e:	697b      	ldr	r3, [r7, #20]
 800bf80:	781b      	ldrb	r3, [r3, #0]
 800bf82:	b2db      	uxtb	r3, r3
 800bf84:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bf86:	697b      	ldr	r3, [r7, #20]
 800bf88:	22ff      	movs	r2, #255	@ 0xff
 800bf8a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bf8c:	697b      	ldr	r3, [r7, #20]
 800bf8e:	781b      	ldrb	r3, [r3, #0]
 800bf90:	b2db      	uxtb	r3, r3
 800bf92:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bf94:	78fb      	ldrb	r3, [r7, #3]
 800bf96:	b2db      	uxtb	r3, r3
 800bf98:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800bf9c:	b2da      	uxtb	r2, r3
 800bf9e:	4b31      	ldr	r3, [pc, #196]	@ (800c064 <xPortStartScheduler+0x134>)
 800bfa0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bfa2:	4b31      	ldr	r3, [pc, #196]	@ (800c068 <xPortStartScheduler+0x138>)
 800bfa4:	2207      	movs	r2, #7
 800bfa6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bfa8:	e009      	b.n	800bfbe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800bfaa:	4b2f      	ldr	r3, [pc, #188]	@ (800c068 <xPortStartScheduler+0x138>)
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	3b01      	subs	r3, #1
 800bfb0:	4a2d      	ldr	r2, [pc, #180]	@ (800c068 <xPortStartScheduler+0x138>)
 800bfb2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bfb4:	78fb      	ldrb	r3, [r7, #3]
 800bfb6:	b2db      	uxtb	r3, r3
 800bfb8:	005b      	lsls	r3, r3, #1
 800bfba:	b2db      	uxtb	r3, r3
 800bfbc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bfbe:	78fb      	ldrb	r3, [r7, #3]
 800bfc0:	b2db      	uxtb	r3, r3
 800bfc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bfc6:	2b80      	cmp	r3, #128	@ 0x80
 800bfc8:	d0ef      	beq.n	800bfaa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bfca:	4b27      	ldr	r3, [pc, #156]	@ (800c068 <xPortStartScheduler+0x138>)
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	f1c3 0307 	rsb	r3, r3, #7
 800bfd2:	2b04      	cmp	r3, #4
 800bfd4:	d00b      	beq.n	800bfee <xPortStartScheduler+0xbe>
	__asm volatile
 800bfd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfda:	f383 8811 	msr	BASEPRI, r3
 800bfde:	f3bf 8f6f 	isb	sy
 800bfe2:	f3bf 8f4f 	dsb	sy
 800bfe6:	60bb      	str	r3, [r7, #8]
}
 800bfe8:	bf00      	nop
 800bfea:	bf00      	nop
 800bfec:	e7fd      	b.n	800bfea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bfee:	4b1e      	ldr	r3, [pc, #120]	@ (800c068 <xPortStartScheduler+0x138>)
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	021b      	lsls	r3, r3, #8
 800bff4:	4a1c      	ldr	r2, [pc, #112]	@ (800c068 <xPortStartScheduler+0x138>)
 800bff6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bff8:	4b1b      	ldr	r3, [pc, #108]	@ (800c068 <xPortStartScheduler+0x138>)
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c000:	4a19      	ldr	r2, [pc, #100]	@ (800c068 <xPortStartScheduler+0x138>)
 800c002:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	b2da      	uxtb	r2, r3
 800c008:	697b      	ldr	r3, [r7, #20]
 800c00a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c00c:	4b17      	ldr	r3, [pc, #92]	@ (800c06c <xPortStartScheduler+0x13c>)
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	4a16      	ldr	r2, [pc, #88]	@ (800c06c <xPortStartScheduler+0x13c>)
 800c012:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c016:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c018:	4b14      	ldr	r3, [pc, #80]	@ (800c06c <xPortStartScheduler+0x13c>)
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	4a13      	ldr	r2, [pc, #76]	@ (800c06c <xPortStartScheduler+0x13c>)
 800c01e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c022:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c024:	f000 f8da 	bl	800c1dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c028:	4b11      	ldr	r3, [pc, #68]	@ (800c070 <xPortStartScheduler+0x140>)
 800c02a:	2200      	movs	r2, #0
 800c02c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c02e:	f000 f8f9 	bl	800c224 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c032:	4b10      	ldr	r3, [pc, #64]	@ (800c074 <xPortStartScheduler+0x144>)
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	4a0f      	ldr	r2, [pc, #60]	@ (800c074 <xPortStartScheduler+0x144>)
 800c038:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c03c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c03e:	f7ff ff63 	bl	800bf08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c042:	f7ff fd33 	bl	800baac <vTaskSwitchContext>
	prvTaskExitError();
 800c046:	f7ff ff1b 	bl	800be80 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c04a:	2300      	movs	r3, #0
}
 800c04c:	4618      	mov	r0, r3
 800c04e:	3718      	adds	r7, #24
 800c050:	46bd      	mov	sp, r7
 800c052:	bd80      	pop	{r7, pc}
 800c054:	e000ed00 	.word	0xe000ed00
 800c058:	410fc271 	.word	0x410fc271
 800c05c:	410fc270 	.word	0x410fc270
 800c060:	e000e400 	.word	0xe000e400
 800c064:	20003dec 	.word	0x20003dec
 800c068:	20003df0 	.word	0x20003df0
 800c06c:	e000ed20 	.word	0xe000ed20
 800c070:	20000564 	.word	0x20000564
 800c074:	e000ef34 	.word	0xe000ef34

0800c078 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c078:	b480      	push	{r7}
 800c07a:	b083      	sub	sp, #12
 800c07c:	af00      	add	r7, sp, #0
	__asm volatile
 800c07e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c082:	f383 8811 	msr	BASEPRI, r3
 800c086:	f3bf 8f6f 	isb	sy
 800c08a:	f3bf 8f4f 	dsb	sy
 800c08e:	607b      	str	r3, [r7, #4]
}
 800c090:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c092:	4b10      	ldr	r3, [pc, #64]	@ (800c0d4 <vPortEnterCritical+0x5c>)
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	3301      	adds	r3, #1
 800c098:	4a0e      	ldr	r2, [pc, #56]	@ (800c0d4 <vPortEnterCritical+0x5c>)
 800c09a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c09c:	4b0d      	ldr	r3, [pc, #52]	@ (800c0d4 <vPortEnterCritical+0x5c>)
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	2b01      	cmp	r3, #1
 800c0a2:	d110      	bne.n	800c0c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c0a4:	4b0c      	ldr	r3, [pc, #48]	@ (800c0d8 <vPortEnterCritical+0x60>)
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	b2db      	uxtb	r3, r3
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d00b      	beq.n	800c0c6 <vPortEnterCritical+0x4e>
	__asm volatile
 800c0ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0b2:	f383 8811 	msr	BASEPRI, r3
 800c0b6:	f3bf 8f6f 	isb	sy
 800c0ba:	f3bf 8f4f 	dsb	sy
 800c0be:	603b      	str	r3, [r7, #0]
}
 800c0c0:	bf00      	nop
 800c0c2:	bf00      	nop
 800c0c4:	e7fd      	b.n	800c0c2 <vPortEnterCritical+0x4a>
	}
}
 800c0c6:	bf00      	nop
 800c0c8:	370c      	adds	r7, #12
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d0:	4770      	bx	lr
 800c0d2:	bf00      	nop
 800c0d4:	20000564 	.word	0x20000564
 800c0d8:	e000ed04 	.word	0xe000ed04

0800c0dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c0dc:	b480      	push	{r7}
 800c0de:	b083      	sub	sp, #12
 800c0e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c0e2:	4b12      	ldr	r3, [pc, #72]	@ (800c12c <vPortExitCritical+0x50>)
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d10b      	bne.n	800c102 <vPortExitCritical+0x26>
	__asm volatile
 800c0ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0ee:	f383 8811 	msr	BASEPRI, r3
 800c0f2:	f3bf 8f6f 	isb	sy
 800c0f6:	f3bf 8f4f 	dsb	sy
 800c0fa:	607b      	str	r3, [r7, #4]
}
 800c0fc:	bf00      	nop
 800c0fe:	bf00      	nop
 800c100:	e7fd      	b.n	800c0fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c102:	4b0a      	ldr	r3, [pc, #40]	@ (800c12c <vPortExitCritical+0x50>)
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	3b01      	subs	r3, #1
 800c108:	4a08      	ldr	r2, [pc, #32]	@ (800c12c <vPortExitCritical+0x50>)
 800c10a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c10c:	4b07      	ldr	r3, [pc, #28]	@ (800c12c <vPortExitCritical+0x50>)
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d105      	bne.n	800c120 <vPortExitCritical+0x44>
 800c114:	2300      	movs	r3, #0
 800c116:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c11e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c120:	bf00      	nop
 800c122:	370c      	adds	r7, #12
 800c124:	46bd      	mov	sp, r7
 800c126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12a:	4770      	bx	lr
 800c12c:	20000564 	.word	0x20000564

0800c130 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c130:	f3ef 8009 	mrs	r0, PSP
 800c134:	f3bf 8f6f 	isb	sy
 800c138:	4b15      	ldr	r3, [pc, #84]	@ (800c190 <pxCurrentTCBConst>)
 800c13a:	681a      	ldr	r2, [r3, #0]
 800c13c:	f01e 0f10 	tst.w	lr, #16
 800c140:	bf08      	it	eq
 800c142:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c146:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c14a:	6010      	str	r0, [r2, #0]
 800c14c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c150:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c154:	f380 8811 	msr	BASEPRI, r0
 800c158:	f3bf 8f4f 	dsb	sy
 800c15c:	f3bf 8f6f 	isb	sy
 800c160:	f7ff fca4 	bl	800baac <vTaskSwitchContext>
 800c164:	f04f 0000 	mov.w	r0, #0
 800c168:	f380 8811 	msr	BASEPRI, r0
 800c16c:	bc09      	pop	{r0, r3}
 800c16e:	6819      	ldr	r1, [r3, #0]
 800c170:	6808      	ldr	r0, [r1, #0]
 800c172:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c176:	f01e 0f10 	tst.w	lr, #16
 800c17a:	bf08      	it	eq
 800c17c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c180:	f380 8809 	msr	PSP, r0
 800c184:	f3bf 8f6f 	isb	sy
 800c188:	4770      	bx	lr
 800c18a:	bf00      	nop
 800c18c:	f3af 8000 	nop.w

0800c190 <pxCurrentTCBConst>:
 800c190:	20003cc0 	.word	0x20003cc0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c194:	bf00      	nop
 800c196:	bf00      	nop

0800c198 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b082      	sub	sp, #8
 800c19c:	af00      	add	r7, sp, #0
	__asm volatile
 800c19e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1a2:	f383 8811 	msr	BASEPRI, r3
 800c1a6:	f3bf 8f6f 	isb	sy
 800c1aa:	f3bf 8f4f 	dsb	sy
 800c1ae:	607b      	str	r3, [r7, #4]
}
 800c1b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c1b2:	f7ff fbc1 	bl	800b938 <xTaskIncrementTick>
 800c1b6:	4603      	mov	r3, r0
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d003      	beq.n	800c1c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c1bc:	4b06      	ldr	r3, [pc, #24]	@ (800c1d8 <xPortSysTickHandler+0x40>)
 800c1be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c1c2:	601a      	str	r2, [r3, #0]
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c1c8:	683b      	ldr	r3, [r7, #0]
 800c1ca:	f383 8811 	msr	BASEPRI, r3
}
 800c1ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c1d0:	bf00      	nop
 800c1d2:	3708      	adds	r7, #8
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	bd80      	pop	{r7, pc}
 800c1d8:	e000ed04 	.word	0xe000ed04

0800c1dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c1dc:	b480      	push	{r7}
 800c1de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c1e0:	4b0b      	ldr	r3, [pc, #44]	@ (800c210 <vPortSetupTimerInterrupt+0x34>)
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c1e6:	4b0b      	ldr	r3, [pc, #44]	@ (800c214 <vPortSetupTimerInterrupt+0x38>)
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c1ec:	4b0a      	ldr	r3, [pc, #40]	@ (800c218 <vPortSetupTimerInterrupt+0x3c>)
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	4a0a      	ldr	r2, [pc, #40]	@ (800c21c <vPortSetupTimerInterrupt+0x40>)
 800c1f2:	fba2 2303 	umull	r2, r3, r2, r3
 800c1f6:	099b      	lsrs	r3, r3, #6
 800c1f8:	4a09      	ldr	r2, [pc, #36]	@ (800c220 <vPortSetupTimerInterrupt+0x44>)
 800c1fa:	3b01      	subs	r3, #1
 800c1fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c1fe:	4b04      	ldr	r3, [pc, #16]	@ (800c210 <vPortSetupTimerInterrupt+0x34>)
 800c200:	2207      	movs	r2, #7
 800c202:	601a      	str	r2, [r3, #0]
}
 800c204:	bf00      	nop
 800c206:	46bd      	mov	sp, r7
 800c208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20c:	4770      	bx	lr
 800c20e:	bf00      	nop
 800c210:	e000e010 	.word	0xe000e010
 800c214:	e000e018 	.word	0xe000e018
 800c218:	20000510 	.word	0x20000510
 800c21c:	10624dd3 	.word	0x10624dd3
 800c220:	e000e014 	.word	0xe000e014

0800c224 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c224:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c234 <vPortEnableVFP+0x10>
 800c228:	6801      	ldr	r1, [r0, #0]
 800c22a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c22e:	6001      	str	r1, [r0, #0]
 800c230:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c232:	bf00      	nop
 800c234:	e000ed88 	.word	0xe000ed88

0800c238 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b08a      	sub	sp, #40	@ 0x28
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c240:	2300      	movs	r3, #0
 800c242:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c244:	f7ff facc 	bl	800b7e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c248:	4b5c      	ldr	r3, [pc, #368]	@ (800c3bc <pvPortMalloc+0x184>)
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d101      	bne.n	800c254 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c250:	f000 f924 	bl	800c49c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c254:	4b5a      	ldr	r3, [pc, #360]	@ (800c3c0 <pvPortMalloc+0x188>)
 800c256:	681a      	ldr	r2, [r3, #0]
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	4013      	ands	r3, r2
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	f040 8095 	bne.w	800c38c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d01e      	beq.n	800c2a6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c268:	2208      	movs	r2, #8
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	4413      	add	r3, r2
 800c26e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	f003 0307 	and.w	r3, r3, #7
 800c276:	2b00      	cmp	r3, #0
 800c278:	d015      	beq.n	800c2a6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	f023 0307 	bic.w	r3, r3, #7
 800c280:	3308      	adds	r3, #8
 800c282:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	f003 0307 	and.w	r3, r3, #7
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d00b      	beq.n	800c2a6 <pvPortMalloc+0x6e>
	__asm volatile
 800c28e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c292:	f383 8811 	msr	BASEPRI, r3
 800c296:	f3bf 8f6f 	isb	sy
 800c29a:	f3bf 8f4f 	dsb	sy
 800c29e:	617b      	str	r3, [r7, #20]
}
 800c2a0:	bf00      	nop
 800c2a2:	bf00      	nop
 800c2a4:	e7fd      	b.n	800c2a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d06f      	beq.n	800c38c <pvPortMalloc+0x154>
 800c2ac:	4b45      	ldr	r3, [pc, #276]	@ (800c3c4 <pvPortMalloc+0x18c>)
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	687a      	ldr	r2, [r7, #4]
 800c2b2:	429a      	cmp	r2, r3
 800c2b4:	d86a      	bhi.n	800c38c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c2b6:	4b44      	ldr	r3, [pc, #272]	@ (800c3c8 <pvPortMalloc+0x190>)
 800c2b8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c2ba:	4b43      	ldr	r3, [pc, #268]	@ (800c3c8 <pvPortMalloc+0x190>)
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c2c0:	e004      	b.n	800c2cc <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c2c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2c4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c2c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c2cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2ce:	685b      	ldr	r3, [r3, #4]
 800c2d0:	687a      	ldr	r2, [r7, #4]
 800c2d2:	429a      	cmp	r2, r3
 800c2d4:	d903      	bls.n	800c2de <pvPortMalloc+0xa6>
 800c2d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d1f1      	bne.n	800c2c2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c2de:	4b37      	ldr	r3, [pc, #220]	@ (800c3bc <pvPortMalloc+0x184>)
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c2e4:	429a      	cmp	r2, r3
 800c2e6:	d051      	beq.n	800c38c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c2e8:	6a3b      	ldr	r3, [r7, #32]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	2208      	movs	r2, #8
 800c2ee:	4413      	add	r3, r2
 800c2f0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c2f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2f4:	681a      	ldr	r2, [r3, #0]
 800c2f6:	6a3b      	ldr	r3, [r7, #32]
 800c2f8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c2fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2fc:	685a      	ldr	r2, [r3, #4]
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	1ad2      	subs	r2, r2, r3
 800c302:	2308      	movs	r3, #8
 800c304:	005b      	lsls	r3, r3, #1
 800c306:	429a      	cmp	r2, r3
 800c308:	d920      	bls.n	800c34c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c30a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	4413      	add	r3, r2
 800c310:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c312:	69bb      	ldr	r3, [r7, #24]
 800c314:	f003 0307 	and.w	r3, r3, #7
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d00b      	beq.n	800c334 <pvPortMalloc+0xfc>
	__asm volatile
 800c31c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c320:	f383 8811 	msr	BASEPRI, r3
 800c324:	f3bf 8f6f 	isb	sy
 800c328:	f3bf 8f4f 	dsb	sy
 800c32c:	613b      	str	r3, [r7, #16]
}
 800c32e:	bf00      	nop
 800c330:	bf00      	nop
 800c332:	e7fd      	b.n	800c330 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c336:	685a      	ldr	r2, [r3, #4]
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	1ad2      	subs	r2, r2, r3
 800c33c:	69bb      	ldr	r3, [r7, #24]
 800c33e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c342:	687a      	ldr	r2, [r7, #4]
 800c344:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c346:	69b8      	ldr	r0, [r7, #24]
 800c348:	f000 f90a 	bl	800c560 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c34c:	4b1d      	ldr	r3, [pc, #116]	@ (800c3c4 <pvPortMalloc+0x18c>)
 800c34e:	681a      	ldr	r2, [r3, #0]
 800c350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c352:	685b      	ldr	r3, [r3, #4]
 800c354:	1ad3      	subs	r3, r2, r3
 800c356:	4a1b      	ldr	r2, [pc, #108]	@ (800c3c4 <pvPortMalloc+0x18c>)
 800c358:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c35a:	4b1a      	ldr	r3, [pc, #104]	@ (800c3c4 <pvPortMalloc+0x18c>)
 800c35c:	681a      	ldr	r2, [r3, #0]
 800c35e:	4b1b      	ldr	r3, [pc, #108]	@ (800c3cc <pvPortMalloc+0x194>)
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	429a      	cmp	r2, r3
 800c364:	d203      	bcs.n	800c36e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c366:	4b17      	ldr	r3, [pc, #92]	@ (800c3c4 <pvPortMalloc+0x18c>)
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	4a18      	ldr	r2, [pc, #96]	@ (800c3cc <pvPortMalloc+0x194>)
 800c36c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c36e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c370:	685a      	ldr	r2, [r3, #4]
 800c372:	4b13      	ldr	r3, [pc, #76]	@ (800c3c0 <pvPortMalloc+0x188>)
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	431a      	orrs	r2, r3
 800c378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c37a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c37c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c37e:	2200      	movs	r2, #0
 800c380:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c382:	4b13      	ldr	r3, [pc, #76]	@ (800c3d0 <pvPortMalloc+0x198>)
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	3301      	adds	r3, #1
 800c388:	4a11      	ldr	r2, [pc, #68]	@ (800c3d0 <pvPortMalloc+0x198>)
 800c38a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c38c:	f7ff fa36 	bl	800b7fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c390:	69fb      	ldr	r3, [r7, #28]
 800c392:	f003 0307 	and.w	r3, r3, #7
 800c396:	2b00      	cmp	r3, #0
 800c398:	d00b      	beq.n	800c3b2 <pvPortMalloc+0x17a>
	__asm volatile
 800c39a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c39e:	f383 8811 	msr	BASEPRI, r3
 800c3a2:	f3bf 8f6f 	isb	sy
 800c3a6:	f3bf 8f4f 	dsb	sy
 800c3aa:	60fb      	str	r3, [r7, #12]
}
 800c3ac:	bf00      	nop
 800c3ae:	bf00      	nop
 800c3b0:	e7fd      	b.n	800c3ae <pvPortMalloc+0x176>
	return pvReturn;
 800c3b2:	69fb      	ldr	r3, [r7, #28]
}
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	3728      	adds	r7, #40	@ 0x28
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	bd80      	pop	{r7, pc}
 800c3bc:	200049b4 	.word	0x200049b4
 800c3c0:	200049c8 	.word	0x200049c8
 800c3c4:	200049b8 	.word	0x200049b8
 800c3c8:	200049ac 	.word	0x200049ac
 800c3cc:	200049bc 	.word	0x200049bc
 800c3d0:	200049c0 	.word	0x200049c0

0800c3d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	b086      	sub	sp, #24
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d04f      	beq.n	800c486 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c3e6:	2308      	movs	r3, #8
 800c3e8:	425b      	negs	r3, r3
 800c3ea:	697a      	ldr	r2, [r7, #20]
 800c3ec:	4413      	add	r3, r2
 800c3ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c3f0:	697b      	ldr	r3, [r7, #20]
 800c3f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c3f4:	693b      	ldr	r3, [r7, #16]
 800c3f6:	685a      	ldr	r2, [r3, #4]
 800c3f8:	4b25      	ldr	r3, [pc, #148]	@ (800c490 <vPortFree+0xbc>)
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	4013      	ands	r3, r2
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d10b      	bne.n	800c41a <vPortFree+0x46>
	__asm volatile
 800c402:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c406:	f383 8811 	msr	BASEPRI, r3
 800c40a:	f3bf 8f6f 	isb	sy
 800c40e:	f3bf 8f4f 	dsb	sy
 800c412:	60fb      	str	r3, [r7, #12]
}
 800c414:	bf00      	nop
 800c416:	bf00      	nop
 800c418:	e7fd      	b.n	800c416 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c41a:	693b      	ldr	r3, [r7, #16]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d00b      	beq.n	800c43a <vPortFree+0x66>
	__asm volatile
 800c422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c426:	f383 8811 	msr	BASEPRI, r3
 800c42a:	f3bf 8f6f 	isb	sy
 800c42e:	f3bf 8f4f 	dsb	sy
 800c432:	60bb      	str	r3, [r7, #8]
}
 800c434:	bf00      	nop
 800c436:	bf00      	nop
 800c438:	e7fd      	b.n	800c436 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c43a:	693b      	ldr	r3, [r7, #16]
 800c43c:	685a      	ldr	r2, [r3, #4]
 800c43e:	4b14      	ldr	r3, [pc, #80]	@ (800c490 <vPortFree+0xbc>)
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	4013      	ands	r3, r2
 800c444:	2b00      	cmp	r3, #0
 800c446:	d01e      	beq.n	800c486 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c448:	693b      	ldr	r3, [r7, #16]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d11a      	bne.n	800c486 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c450:	693b      	ldr	r3, [r7, #16]
 800c452:	685a      	ldr	r2, [r3, #4]
 800c454:	4b0e      	ldr	r3, [pc, #56]	@ (800c490 <vPortFree+0xbc>)
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	43db      	mvns	r3, r3
 800c45a:	401a      	ands	r2, r3
 800c45c:	693b      	ldr	r3, [r7, #16]
 800c45e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c460:	f7ff f9be 	bl	800b7e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c464:	693b      	ldr	r3, [r7, #16]
 800c466:	685a      	ldr	r2, [r3, #4]
 800c468:	4b0a      	ldr	r3, [pc, #40]	@ (800c494 <vPortFree+0xc0>)
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	4413      	add	r3, r2
 800c46e:	4a09      	ldr	r2, [pc, #36]	@ (800c494 <vPortFree+0xc0>)
 800c470:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c472:	6938      	ldr	r0, [r7, #16]
 800c474:	f000 f874 	bl	800c560 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c478:	4b07      	ldr	r3, [pc, #28]	@ (800c498 <vPortFree+0xc4>)
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	3301      	adds	r3, #1
 800c47e:	4a06      	ldr	r2, [pc, #24]	@ (800c498 <vPortFree+0xc4>)
 800c480:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c482:	f7ff f9bb 	bl	800b7fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c486:	bf00      	nop
 800c488:	3718      	adds	r7, #24
 800c48a:	46bd      	mov	sp, r7
 800c48c:	bd80      	pop	{r7, pc}
 800c48e:	bf00      	nop
 800c490:	200049c8 	.word	0x200049c8
 800c494:	200049b8 	.word	0x200049b8
 800c498:	200049c4 	.word	0x200049c4

0800c49c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c49c:	b480      	push	{r7}
 800c49e:	b085      	sub	sp, #20
 800c4a0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c4a2:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800c4a6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c4a8:	4b27      	ldr	r3, [pc, #156]	@ (800c548 <prvHeapInit+0xac>)
 800c4aa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	f003 0307 	and.w	r3, r3, #7
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d00c      	beq.n	800c4d0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	3307      	adds	r3, #7
 800c4ba:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	f023 0307 	bic.w	r3, r3, #7
 800c4c2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c4c4:	68ba      	ldr	r2, [r7, #8]
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	1ad3      	subs	r3, r2, r3
 800c4ca:	4a1f      	ldr	r2, [pc, #124]	@ (800c548 <prvHeapInit+0xac>)
 800c4cc:	4413      	add	r3, r2
 800c4ce:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c4d4:	4a1d      	ldr	r2, [pc, #116]	@ (800c54c <prvHeapInit+0xb0>)
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c4da:	4b1c      	ldr	r3, [pc, #112]	@ (800c54c <prvHeapInit+0xb0>)
 800c4dc:	2200      	movs	r2, #0
 800c4de:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	68ba      	ldr	r2, [r7, #8]
 800c4e4:	4413      	add	r3, r2
 800c4e6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c4e8:	2208      	movs	r2, #8
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	1a9b      	subs	r3, r3, r2
 800c4ee:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	f023 0307 	bic.w	r3, r3, #7
 800c4f6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	4a15      	ldr	r2, [pc, #84]	@ (800c550 <prvHeapInit+0xb4>)
 800c4fc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c4fe:	4b14      	ldr	r3, [pc, #80]	@ (800c550 <prvHeapInit+0xb4>)
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	2200      	movs	r2, #0
 800c504:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c506:	4b12      	ldr	r3, [pc, #72]	@ (800c550 <prvHeapInit+0xb4>)
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	2200      	movs	r2, #0
 800c50c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c512:	683b      	ldr	r3, [r7, #0]
 800c514:	68fa      	ldr	r2, [r7, #12]
 800c516:	1ad2      	subs	r2, r2, r3
 800c518:	683b      	ldr	r3, [r7, #0]
 800c51a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c51c:	4b0c      	ldr	r3, [pc, #48]	@ (800c550 <prvHeapInit+0xb4>)
 800c51e:	681a      	ldr	r2, [r3, #0]
 800c520:	683b      	ldr	r3, [r7, #0]
 800c522:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c524:	683b      	ldr	r3, [r7, #0]
 800c526:	685b      	ldr	r3, [r3, #4]
 800c528:	4a0a      	ldr	r2, [pc, #40]	@ (800c554 <prvHeapInit+0xb8>)
 800c52a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c52c:	683b      	ldr	r3, [r7, #0]
 800c52e:	685b      	ldr	r3, [r3, #4]
 800c530:	4a09      	ldr	r2, [pc, #36]	@ (800c558 <prvHeapInit+0xbc>)
 800c532:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c534:	4b09      	ldr	r3, [pc, #36]	@ (800c55c <prvHeapInit+0xc0>)
 800c536:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c53a:	601a      	str	r2, [r3, #0]
}
 800c53c:	bf00      	nop
 800c53e:	3714      	adds	r7, #20
 800c540:	46bd      	mov	sp, r7
 800c542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c546:	4770      	bx	lr
 800c548:	20003df4 	.word	0x20003df4
 800c54c:	200049ac 	.word	0x200049ac
 800c550:	200049b4 	.word	0x200049b4
 800c554:	200049bc 	.word	0x200049bc
 800c558:	200049b8 	.word	0x200049b8
 800c55c:	200049c8 	.word	0x200049c8

0800c560 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c560:	b480      	push	{r7}
 800c562:	b085      	sub	sp, #20
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c568:	4b28      	ldr	r3, [pc, #160]	@ (800c60c <prvInsertBlockIntoFreeList+0xac>)
 800c56a:	60fb      	str	r3, [r7, #12]
 800c56c:	e002      	b.n	800c574 <prvInsertBlockIntoFreeList+0x14>
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	60fb      	str	r3, [r7, #12]
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	687a      	ldr	r2, [r7, #4]
 800c57a:	429a      	cmp	r2, r3
 800c57c:	d8f7      	bhi.n	800c56e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	685b      	ldr	r3, [r3, #4]
 800c586:	68ba      	ldr	r2, [r7, #8]
 800c588:	4413      	add	r3, r2
 800c58a:	687a      	ldr	r2, [r7, #4]
 800c58c:	429a      	cmp	r2, r3
 800c58e:	d108      	bne.n	800c5a2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	685a      	ldr	r2, [r3, #4]
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	685b      	ldr	r3, [r3, #4]
 800c598:	441a      	add	r2, r3
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	685b      	ldr	r3, [r3, #4]
 800c5aa:	68ba      	ldr	r2, [r7, #8]
 800c5ac:	441a      	add	r2, r3
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	429a      	cmp	r2, r3
 800c5b4:	d118      	bne.n	800c5e8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	681a      	ldr	r2, [r3, #0]
 800c5ba:	4b15      	ldr	r3, [pc, #84]	@ (800c610 <prvInsertBlockIntoFreeList+0xb0>)
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	429a      	cmp	r2, r3
 800c5c0:	d00d      	beq.n	800c5de <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	685a      	ldr	r2, [r3, #4]
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	685b      	ldr	r3, [r3, #4]
 800c5cc:	441a      	add	r2, r3
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	681a      	ldr	r2, [r3, #0]
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	601a      	str	r2, [r3, #0]
 800c5dc:	e008      	b.n	800c5f0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c5de:	4b0c      	ldr	r3, [pc, #48]	@ (800c610 <prvInsertBlockIntoFreeList+0xb0>)
 800c5e0:	681a      	ldr	r2, [r3, #0]
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	601a      	str	r2, [r3, #0]
 800c5e6:	e003      	b.n	800c5f0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	681a      	ldr	r2, [r3, #0]
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c5f0:	68fa      	ldr	r2, [r7, #12]
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	429a      	cmp	r2, r3
 800c5f6:	d002      	beq.n	800c5fe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	687a      	ldr	r2, [r7, #4]
 800c5fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c5fe:	bf00      	nop
 800c600:	3714      	adds	r7, #20
 800c602:	46bd      	mov	sp, r7
 800c604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c608:	4770      	bx	lr
 800c60a:	bf00      	nop
 800c60c:	200049ac 	.word	0x200049ac
 800c610:	200049b4 	.word	0x200049b4

0800c614 <arm_fir_init_f32>:
 800c614:	b538      	push	{r3, r4, r5, lr}
 800c616:	9c04      	ldr	r4, [sp, #16]
 800c618:	6082      	str	r2, [r0, #8]
 800c61a:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 800c61e:	3c01      	subs	r4, #1
 800c620:	440c      	add	r4, r1
 800c622:	8001      	strh	r1, [r0, #0]
 800c624:	4605      	mov	r5, r0
 800c626:	00a2      	lsls	r2, r4, #2
 800c628:	4618      	mov	r0, r3
 800c62a:	2100      	movs	r1, #0
 800c62c:	f001 fe75 	bl	800e31a <memset>
 800c630:	6068      	str	r0, [r5, #4]
 800c632:	bd38      	pop	{r3, r4, r5, pc}

0800c634 <arm_fir_f32>:
 800c634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c638:	ed2d 8b10 	vpush	{d8-d15}
 800c63c:	b08b      	sub	sp, #44	@ 0x2c
 800c63e:	f8b0 8000 	ldrh.w	r8, [r0]
 800c642:	9003      	str	r0, [sp, #12]
 800c644:	e9d0 9001 	ldrd	r9, r0, [r0, #4]
 800c648:	461e      	mov	r6, r3
 800c64a:	9304      	str	r3, [sp, #16]
 800c64c:	f108 4380 	add.w	r3, r8, #1073741824	@ 0x40000000
 800c650:	3b01      	subs	r3, #1
 800c652:	eb09 0583 	add.w	r5, r9, r3, lsl #2
 800c656:	08f3      	lsrs	r3, r6, #3
 800c658:	9002      	str	r0, [sp, #8]
 800c65a:	9500      	str	r5, [sp, #0]
 800c65c:	9301      	str	r3, [sp, #4]
 800c65e:	f000 81f1 	beq.w	800ca44 <arm_fir_f32+0x410>
 800c662:	ea4f 04d8 	mov.w	r4, r8, lsr #3
 800c666:	f100 0620 	add.w	r6, r0, #32
 800c66a:	9405      	str	r4, [sp, #20]
 800c66c:	0164      	lsls	r4, r4, #5
 800c66e:	4420      	add	r0, r4
 800c670:	f008 0a07 	and.w	sl, r8, #7
 800c674:	9607      	str	r6, [sp, #28]
 800c676:	9006      	str	r0, [sp, #24]
 800c678:	469c      	mov	ip, r3
 800c67a:	4650      	mov	r0, sl
 800c67c:	4623      	mov	r3, r4
 800c67e:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800c682:	f8cd 8020 	str.w	r8, [sp, #32]
 800c686:	1937      	adds	r7, r6, r4
 800c688:	f109 0b1c 	add.w	fp, r9, #28
 800c68c:	f8dd e014 	ldr.w	lr, [sp, #20]
 800c690:	9209      	str	r2, [sp, #36]	@ 0x24
 800c692:	f8cd 9014 	str.w	r9, [sp, #20]
 800c696:	f101 0620 	add.w	r6, r1, #32
 800c69a:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800c69e:	9106      	str	r1, [sp, #24]
 800c6a0:	3520      	adds	r5, #32
 800c6a2:	f102 0420 	add.w	r4, r2, #32
 800c6a6:	4698      	mov	r8, r3
 800c6a8:	f856 3c20 	ldr.w	r3, [r6, #-32]
 800c6ac:	f845 3c20 	str.w	r3, [r5, #-32]
 800c6b0:	f856 3c1c 	ldr.w	r3, [r6, #-28]
 800c6b4:	f845 3c1c 	str.w	r3, [r5, #-28]
 800c6b8:	f856 3c18 	ldr.w	r3, [r6, #-24]
 800c6bc:	f845 3c18 	str.w	r3, [r5, #-24]
 800c6c0:	f856 3c14 	ldr.w	r3, [r6, #-20]
 800c6c4:	f845 3c14 	str.w	r3, [r5, #-20]
 800c6c8:	f856 3c10 	ldr.w	r3, [r6, #-16]
 800c6cc:	f845 3c10 	str.w	r3, [r5, #-16]
 800c6d0:	f856 3c0c 	ldr.w	r3, [r6, #-12]
 800c6d4:	f845 3c0c 	str.w	r3, [r5, #-12]
 800c6d8:	f856 3c08 	ldr.w	r3, [r6, #-8]
 800c6dc:	f845 3c08 	str.w	r3, [r5, #-8]
 800c6e0:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c6e4:	f845 3c04 	str.w	r3, [r5, #-4]
 800c6e8:	ed1b 2a07 	vldr	s4, [fp, #-28]	@ 0xffffffe4
 800c6ec:	ed5b 1a06 	vldr	s3, [fp, #-24]	@ 0xffffffe8
 800c6f0:	ed1b 1a05 	vldr	s2, [fp, #-20]	@ 0xffffffec
 800c6f4:	ed5b 0a04 	vldr	s1, [fp, #-16]
 800c6f8:	ed1b 0a03 	vldr	s0, [fp, #-12]
 800c6fc:	ed1b 8a02 	vldr	s16, [fp, #-8]
 800c700:	ed5b 8a01 	vldr	s17, [fp, #-4]
 800c704:	eddf 6af5 	vldr	s13, [pc, #980]	@ 800cadc <arm_fir_f32+0x4a8>
 800c708:	465a      	mov	r2, fp
 800c70a:	f1be 0f00 	cmp.w	lr, #0
 800c70e:	f000 81fe 	beq.w	800cb0e <arm_fir_f32+0x4da>
 800c712:	f10b 0120 	add.w	r1, fp, #32
 800c716:	eef0 ba66 	vmov.f32	s23, s13
 800c71a:	eeb0 6a66 	vmov.f32	s12, s13
 800c71e:	eeb0 9a66 	vmov.f32	s18, s13
 800c722:	eef0 9a66 	vmov.f32	s19, s13
 800c726:	eeb0 aa66 	vmov.f32	s20, s13
 800c72a:	eef0 aa66 	vmov.f32	s21, s13
 800c72e:	eeb0 ba66 	vmov.f32	s22, s13
 800c732:	460a      	mov	r2, r1
 800c734:	4653      	mov	r3, sl
 800c736:	ed13 7a08 	vldr	s14, [r3, #-32]	@ 0xffffffe0
 800c73a:	ed52 4a08 	vldr	s9, [r2, #-32]	@ 0xffffffe0
 800c73e:	ed53 ea07 	vldr	s29, [r3, #-28]	@ 0xffffffe4
 800c742:	ed13 ea06 	vldr	s28, [r3, #-24]	@ 0xffffffe8
 800c746:	ed53 da05 	vldr	s27, [r3, #-20]	@ 0xffffffec
 800c74a:	ed53 ca04 	vldr	s25, [r3, #-16]
 800c74e:	ed53 2a03 	vldr	s5, [r3, #-12]
 800c752:	ed13 4a02 	vldr	s8, [r3, #-8]
 800c756:	ed13 5a01 	vldr	s10, [r3, #-4]
 800c75a:	ee67 fa02 	vmul.f32	s31, s14, s4
 800c75e:	ee27 da21 	vmul.f32	s26, s14, s3
 800c762:	ed12 2a07 	vldr	s4, [r2, #-28]	@ 0xffffffe4
 800c766:	ee27 ca01 	vmul.f32	s24, s14, s2
 800c76a:	ee27 3a20 	vmul.f32	s6, s14, s1
 800c76e:	ee67 3a00 	vmul.f32	s7, s14, s0
 800c772:	ee67 5a08 	vmul.f32	s11, s14, s16
 800c776:	ee27 fa28 	vmul.f32	s30, s14, s17
 800c77a:	ee67 7a24 	vmul.f32	s15, s14, s9
 800c77e:	ee3f ba8b 	vadd.f32	s22, s31, s22
 800c782:	ee7d aa2a 	vadd.f32	s21, s26, s21
 800c786:	ee6e faa1 	vmul.f32	s31, s29, s3
 800c78a:	ee2e da81 	vmul.f32	s26, s29, s2
 800c78e:	ed52 1a06 	vldr	s3, [r2, #-24]	@ 0xffffffe8
 800c792:	ee3c aa0a 	vadd.f32	s20, s24, s20
 800c796:	ee73 9a29 	vadd.f32	s19, s6, s19
 800c79a:	ee2e caa0 	vmul.f32	s24, s29, s1
 800c79e:	ee2e 3a80 	vmul.f32	s6, s29, s0
 800c7a2:	ee33 9a89 	vadd.f32	s18, s7, s18
 800c7a6:	ee35 6a86 	vadd.f32	s12, s11, s12
 800c7aa:	ee6e 3a88 	vmul.f32	s7, s29, s16
 800c7ae:	ee6e 5aa8 	vmul.f32	s11, s29, s17
 800c7b2:	ee7f ba2b 	vadd.f32	s23, s30, s23
 800c7b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c7ba:	ee24 faae 	vmul.f32	s30, s9, s29
 800c7be:	ee6e ea82 	vmul.f32	s29, s29, s4
 800c7c2:	ee2e 7a01 	vmul.f32	s14, s28, s2
 800c7c6:	ee3f ba8b 	vadd.f32	s22, s31, s22
 800c7ca:	ed12 1a05 	vldr	s2, [r2, #-20]	@ 0xffffffec
 800c7ce:	ee7d aa2a 	vadd.f32	s21, s26, s21
 800c7d2:	ee3c aa0a 	vadd.f32	s20, s24, s20
 800c7d6:	ee2e da20 	vmul.f32	s26, s28, s1
 800c7da:	ee2e ca00 	vmul.f32	s24, s28, s0
 800c7de:	ee73 9a29 	vadd.f32	s19, s6, s19
 800c7e2:	ee33 9a89 	vadd.f32	s18, s7, s18
 800c7e6:	ee2e 3a08 	vmul.f32	s6, s28, s16
 800c7ea:	ee6e 3a28 	vmul.f32	s7, s28, s17
 800c7ee:	ee35 6a86 	vadd.f32	s12, s11, s12
 800c7f2:	ee7f ba2b 	vadd.f32	s23, s30, s23
 800c7f6:	ee64 5a8e 	vmul.f32	s11, s9, s28
 800c7fa:	ee22 fa0e 	vmul.f32	s30, s4, s28
 800c7fe:	ee7e 7aa7 	vadd.f32	s15, s29, s15
 800c802:	ee2e ea21 	vmul.f32	s28, s28, s3
 800c806:	ee6d 6aa0 	vmul.f32	s13, s27, s1
 800c80a:	ee7d aa2a 	vadd.f32	s21, s26, s21
 800c80e:	ed52 0a04 	vldr	s1, [r2, #-16]
 800c812:	ee2d da80 	vmul.f32	s26, s27, s0
 800c816:	ee37 ba0b 	vadd.f32	s22, s14, s22
 800c81a:	ee3c aa0a 	vadd.f32	s20, s24, s20
 800c81e:	ee73 9a29 	vadd.f32	s19, s6, s19
 800c822:	ee2d ca88 	vmul.f32	s24, s27, s16
 800c826:	ee2d 3aa8 	vmul.f32	s6, s27, s17
 800c82a:	ee33 9a89 	vadd.f32	s18, s7, s18
 800c82e:	ee35 6a86 	vadd.f32	s12, s11, s12
 800c832:	ee64 3aad 	vmul.f32	s7, s9, s27
 800c836:	ee62 5a2d 	vmul.f32	s11, s4, s27
 800c83a:	ee7f ba2b 	vadd.f32	s23, s30, s23
 800c83e:	ee7e 7a27 	vadd.f32	s15, s28, s15
 800c842:	ee21 faad 	vmul.f32	s30, s3, s27
 800c846:	ee6d da81 	vmul.f32	s27, s27, s2
 800c84a:	ee6c fa80 	vmul.f32	s31, s25, s0
 800c84e:	ee36 ba8b 	vadd.f32	s22, s13, s22
 800c852:	ed12 0a03 	vldr	s0, [r2, #-12]
 800c856:	ee3d da2a 	vadd.f32	s26, s26, s21
 800c85a:	ee3c aa0a 	vadd.f32	s20, s24, s20
 800c85e:	ee6c aa88 	vmul.f32	s21, s25, s16
 800c862:	ee2c caa8 	vmul.f32	s24, s25, s17
 800c866:	ee73 9a29 	vadd.f32	s19, s6, s19
 800c86a:	ee33 9a89 	vadd.f32	s18, s7, s18
 800c86e:	ee24 3aac 	vmul.f32	s6, s9, s25
 800c872:	ee62 3a2c 	vmul.f32	s7, s4, s25
 800c876:	ee35 6a86 	vadd.f32	s12, s11, s12
 800c87a:	ee7f ba2b 	vadd.f32	s23, s30, s23
 800c87e:	ee61 5aac 	vmul.f32	s11, s3, s25
 800c882:	ee21 fa2c 	vmul.f32	s30, s2, s25
 800c886:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 800c88a:	ee6c caa0 	vmul.f32	s25, s25, s1
 800c88e:	ee62 ea88 	vmul.f32	s29, s5, s16
 800c892:	ee3a da8d 	vadd.f32	s26, s21, s26
 800c896:	ed12 8a02 	vldr	s16, [r2, #-8]
 800c89a:	ee62 aaa8 	vmul.f32	s21, s5, s17
 800c89e:	ee3f ba8b 	vadd.f32	s22, s31, s22
 800c8a2:	ee3c aa0a 	vadd.f32	s20, s24, s20
 800c8a6:	ee73 9a29 	vadd.f32	s19, s6, s19
 800c8aa:	ee24 caa2 	vmul.f32	s24, s9, s5
 800c8ae:	ee22 3a22 	vmul.f32	s6, s4, s5
 800c8b2:	ee33 9a89 	vadd.f32	s18, s7, s18
 800c8b6:	ee35 6a86 	vadd.f32	s12, s11, s12
 800c8ba:	ee61 3aa2 	vmul.f32	s7, s3, s5
 800c8be:	ee61 5a22 	vmul.f32	s11, s2, s5
 800c8c2:	ee7f ba2b 	vadd.f32	s23, s30, s23
 800c8c6:	ee7c 7aa7 	vadd.f32	s15, s25, s15
 800c8ca:	ee20 faa2 	vmul.f32	s30, s1, s5
 800c8ce:	ee62 2a80 	vmul.f32	s5, s5, s0
 800c8d2:	ee7e fa8b 	vadd.f32	s31, s29, s22
 800c8d6:	ee72 7aa7 	vadd.f32	s15, s5, s15
 800c8da:	ee24 ba28 	vmul.f32	s22, s8, s17
 800c8de:	ee7a aa8d 	vadd.f32	s21, s21, s26
 800c8e2:	ee3c aa0a 	vadd.f32	s20, s24, s20
 800c8e6:	ee24 da84 	vmul.f32	s26, s9, s8
 800c8ea:	ee22 ca04 	vmul.f32	s24, s4, s8
 800c8ee:	ee73 9a29 	vadd.f32	s19, s6, s19
 800c8f2:	ee33 9a89 	vadd.f32	s18, s7, s18
 800c8f6:	ee21 3a84 	vmul.f32	s6, s3, s8
 800c8fa:	ee61 3a04 	vmul.f32	s7, s2, s8
 800c8fe:	ee35 6a86 	vadd.f32	s12, s11, s12
 800c902:	ee7f ba2b 	vadd.f32	s23, s30, s23
 800c906:	ee60 5a84 	vmul.f32	s11, s1, s8
 800c90a:	ee20 7a04 	vmul.f32	s14, s0, s8
 800c90e:	ee64 6a08 	vmul.f32	s13, s8, s16
 800c912:	ed52 8a01 	vldr	s17, [r2, #-4]
 800c916:	ee73 9a29 	vadd.f32	s19, s6, s19
 800c91a:	ee33 9a89 	vadd.f32	s18, s7, s18
 800c91e:	ee35 6a86 	vadd.f32	s12, s11, s12
 800c922:	ee37 7a2b 	vadd.f32	s14, s14, s23
 800c926:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800c92a:	ee3b ba2f 	vadd.f32	s22, s22, s31
 800c92e:	ee64 4a85 	vmul.f32	s9, s9, s10
 800c932:	ee7d aa2a 	vadd.f32	s21, s26, s21
 800c936:	ee22 4a05 	vmul.f32	s8, s4, s10
 800c93a:	ee3c aa0a 	vadd.f32	s20, s24, s20
 800c93e:	ee61 2a85 	vmul.f32	s5, s3, s10
 800c942:	ee21 3a05 	vmul.f32	s6, s2, s10
 800c946:	ee60 3a85 	vmul.f32	s7, s1, s10
 800c94a:	ee60 5a05 	vmul.f32	s11, s0, s10
 800c94e:	ee68 ba05 	vmul.f32	s23, s16, s10
 800c952:	ee65 7a28 	vmul.f32	s15, s10, s17
 800c956:	3320      	adds	r3, #32
 800c958:	429f      	cmp	r7, r3
 800c95a:	ee34 ba8b 	vadd.f32	s22, s9, s22
 800c95e:	ee74 aa2a 	vadd.f32	s21, s8, s21
 800c962:	ee32 aa8a 	vadd.f32	s20, s5, s20
 800c966:	ee73 9a29 	vadd.f32	s19, s6, s19
 800c96a:	ee33 9a89 	vadd.f32	s18, s7, s18
 800c96e:	ee35 6a86 	vadd.f32	s12, s11, s12
 800c972:	ee7b ba87 	vadd.f32	s23, s23, s14
 800c976:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800c97a:	f102 0220 	add.w	r2, r2, #32
 800c97e:	f47f aeda 	bne.w	800c736 <arm_fir_f32+0x102>
 800c982:	eb0b 0208 	add.w	r2, fp, r8
 800c986:	46cb      	mov	fp, r9
 800c988:	b3a0      	cbz	r0, 800c9f4 <arm_fir_f32+0x3c0>
 800c98a:	4603      	mov	r3, r0
 800c98c:	ecfb 7a01 	vldmia	fp!, {s15}
 800c990:	ecf2 5a01 	vldmia	r2!, {s11}
 800c994:	ee27 2a82 	vmul.f32	s4, s15, s4
 800c998:	ee67 2aa1 	vmul.f32	s5, s15, s3
 800c99c:	ee27 3a81 	vmul.f32	s6, s15, s2
 800c9a0:	ee67 3aa0 	vmul.f32	s7, s15, s1
 800c9a4:	ee27 4a80 	vmul.f32	s8, s15, s0
 800c9a8:	ee67 4a88 	vmul.f32	s9, s15, s16
 800c9ac:	ee27 5aa8 	vmul.f32	s10, s15, s17
 800c9b0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800c9b4:	3b01      	subs	r3, #1
 800c9b6:	ee3b ba02 	vadd.f32	s22, s22, s4
 800c9ba:	ee7a aaa2 	vadd.f32	s21, s21, s5
 800c9be:	eeb0 2a61 	vmov.f32	s4, s3
 800c9c2:	ee3a aa03 	vadd.f32	s20, s20, s6
 800c9c6:	eef0 1a41 	vmov.f32	s3, s2
 800c9ca:	ee79 9aa3 	vadd.f32	s19, s19, s7
 800c9ce:	eeb0 1a60 	vmov.f32	s2, s1
 800c9d2:	ee39 9a04 	vadd.f32	s18, s18, s8
 800c9d6:	eef0 0a40 	vmov.f32	s1, s0
 800c9da:	ee36 6a24 	vadd.f32	s12, s12, s9
 800c9de:	eeb0 0a48 	vmov.f32	s0, s16
 800c9e2:	ee7b ba85 	vadd.f32	s23, s23, s10
 800c9e6:	eeb0 8a68 	vmov.f32	s16, s17
 800c9ea:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800c9ee:	eef0 8a65 	vmov.f32	s17, s11
 800c9f2:	d1cb      	bne.n	800c98c <arm_fir_f32+0x358>
 800c9f4:	f1bc 0c01 	subs.w	ip, ip, #1
 800c9f8:	ed04 ba08 	vstr	s22, [r4, #-32]	@ 0xffffffe0
 800c9fc:	ed44 aa07 	vstr	s21, [r4, #-28]	@ 0xffffffe4
 800ca00:	ed04 aa06 	vstr	s20, [r4, #-24]	@ 0xffffffe8
 800ca04:	ed44 9a05 	vstr	s19, [r4, #-20]	@ 0xffffffec
 800ca08:	ed04 9a04 	vstr	s18, [r4, #-16]
 800ca0c:	ed04 6a03 	vstr	s12, [r4, #-12]
 800ca10:	ed44 ba02 	vstr	s23, [r4, #-8]
 800ca14:	ed44 6a01 	vstr	s13, [r4, #-4]
 800ca18:	f106 0620 	add.w	r6, r6, #32
 800ca1c:	f105 0520 	add.w	r5, r5, #32
 800ca20:	f104 0420 	add.w	r4, r4, #32
 800ca24:	468b      	mov	fp, r1
 800ca26:	f47f ae3f 	bne.w	800c6a8 <arm_fir_f32+0x74>
 800ca2a:	9b01      	ldr	r3, [sp, #4]
 800ca2c:	9800      	ldr	r0, [sp, #0]
 800ca2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ca30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ca34:	e9dd 9105 	ldrd	r9, r1, [sp, #20]
 800ca38:	015b      	lsls	r3, r3, #5
 800ca3a:	4418      	add	r0, r3
 800ca3c:	4419      	add	r1, r3
 800ca3e:	441a      	add	r2, r3
 800ca40:	4499      	add	r9, r3
 800ca42:	9000      	str	r0, [sp, #0]
 800ca44:	9b04      	ldr	r3, [sp, #16]
 800ca46:	f013 0707 	ands.w	r7, r3, #7
 800ca4a:	d020      	beq.n	800ca8e <arm_fir_f32+0x45a>
 800ca4c:	00bf      	lsls	r7, r7, #2
 800ca4e:	9e00      	ldr	r6, [sp, #0]
 800ca50:	f8dd e008 	ldr.w	lr, [sp, #8]
 800ca54:	eb01 0c07 	add.w	ip, r1, r7
 800ca58:	464d      	mov	r5, r9
 800ca5a:	f851 3b04 	ldr.w	r3, [r1], #4
 800ca5e:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 800cadc <arm_fir_f32+0x4a8>
 800ca62:	f846 3b04 	str.w	r3, [r6], #4
 800ca66:	4674      	mov	r4, lr
 800ca68:	4643      	mov	r3, r8
 800ca6a:	4628      	mov	r0, r5
 800ca6c:	ecf0 7a01 	vldmia	r0!, {s15}
 800ca70:	ecf4 6a01 	vldmia	r4!, {s13}
 800ca74:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ca78:	3b01      	subs	r3, #1
 800ca7a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ca7e:	d1f5      	bne.n	800ca6c <arm_fir_f32+0x438>
 800ca80:	4561      	cmp	r1, ip
 800ca82:	eca2 7a01 	vstmia	r2!, {s14}
 800ca86:	f105 0504 	add.w	r5, r5, #4
 800ca8a:	d1e6      	bne.n	800ca5a <arm_fir_f32+0x426>
 800ca8c:	44b9      	add	r9, r7
 800ca8e:	f108 38ff 	add.w	r8, r8, #4294967295
 800ca92:	9b03      	ldr	r3, [sp, #12]
 800ca94:	ea5f 0498 	movs.w	r4, r8, lsr #2
 800ca98:	685d      	ldr	r5, [r3, #4]
 800ca9a:	d021      	beq.n	800cae0 <arm_fir_f32+0x4ac>
 800ca9c:	f109 0210 	add.w	r2, r9, #16
 800caa0:	f105 0310 	add.w	r3, r5, #16
 800caa4:	4621      	mov	r1, r4
 800caa6:	f852 0c10 	ldr.w	r0, [r2, #-16]
 800caaa:	f843 0c10 	str.w	r0, [r3, #-16]
 800caae:	f852 0c0c 	ldr.w	r0, [r2, #-12]
 800cab2:	f843 0c0c 	str.w	r0, [r3, #-12]
 800cab6:	f852 0c08 	ldr.w	r0, [r2, #-8]
 800caba:	f843 0c08 	str.w	r0, [r3, #-8]
 800cabe:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800cac2:	f843 0c04 	str.w	r0, [r3, #-4]
 800cac6:	3901      	subs	r1, #1
 800cac8:	f102 0210 	add.w	r2, r2, #16
 800cacc:	f103 0310 	add.w	r3, r3, #16
 800cad0:	d1e9      	bne.n	800caa6 <arm_fir_f32+0x472>
 800cad2:	0124      	lsls	r4, r4, #4
 800cad4:	44a1      	add	r9, r4
 800cad6:	4425      	add	r5, r4
 800cad8:	e002      	b.n	800cae0 <arm_fir_f32+0x4ac>
 800cada:	bf00      	nop
 800cadc:	00000000 	.word	0x00000000
 800cae0:	f018 0803 	ands.w	r8, r8, #3
 800cae4:	d00e      	beq.n	800cb04 <arm_fir_f32+0x4d0>
 800cae6:	f8d9 3000 	ldr.w	r3, [r9]
 800caea:	602b      	str	r3, [r5, #0]
 800caec:	f1b8 0801 	subs.w	r8, r8, #1
 800caf0:	d008      	beq.n	800cb04 <arm_fir_f32+0x4d0>
 800caf2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800caf6:	606b      	str	r3, [r5, #4]
 800caf8:	f1b8 0f01 	cmp.w	r8, #1
 800cafc:	bf1c      	itt	ne
 800cafe:	f8d9 3008 	ldrne.w	r3, [r9, #8]
 800cb02:	60ab      	strne	r3, [r5, #8]
 800cb04:	b00b      	add	sp, #44	@ 0x2c
 800cb06:	ecbd 8b10 	vpop	{d8-d15}
 800cb0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb0e:	eef0 ba66 	vmov.f32	s23, s13
 800cb12:	eeb0 6a66 	vmov.f32	s12, s13
 800cb16:	eeb0 9a66 	vmov.f32	s18, s13
 800cb1a:	eef0 9a66 	vmov.f32	s19, s13
 800cb1e:	eeb0 aa66 	vmov.f32	s20, s13
 800cb22:	eef0 aa66 	vmov.f32	s21, s13
 800cb26:	eeb0 ba66 	vmov.f32	s22, s13
 800cb2a:	f8dd b008 	ldr.w	fp, [sp, #8]
 800cb2e:	f102 0120 	add.w	r1, r2, #32
 800cb32:	e729      	b.n	800c988 <arm_fir_f32+0x354>

0800cb34 <srand>:
 800cb34:	b538      	push	{r3, r4, r5, lr}
 800cb36:	4b10      	ldr	r3, [pc, #64]	@ (800cb78 <srand+0x44>)
 800cb38:	681d      	ldr	r5, [r3, #0]
 800cb3a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800cb3c:	4604      	mov	r4, r0
 800cb3e:	b9b3      	cbnz	r3, 800cb6e <srand+0x3a>
 800cb40:	2018      	movs	r0, #24
 800cb42:	f002 fd2f 	bl	800f5a4 <malloc>
 800cb46:	4602      	mov	r2, r0
 800cb48:	6328      	str	r0, [r5, #48]	@ 0x30
 800cb4a:	b920      	cbnz	r0, 800cb56 <srand+0x22>
 800cb4c:	4b0b      	ldr	r3, [pc, #44]	@ (800cb7c <srand+0x48>)
 800cb4e:	480c      	ldr	r0, [pc, #48]	@ (800cb80 <srand+0x4c>)
 800cb50:	2146      	movs	r1, #70	@ 0x46
 800cb52:	f001 fe71 	bl	800e838 <__assert_func>
 800cb56:	490b      	ldr	r1, [pc, #44]	@ (800cb84 <srand+0x50>)
 800cb58:	4b0b      	ldr	r3, [pc, #44]	@ (800cb88 <srand+0x54>)
 800cb5a:	e9c0 1300 	strd	r1, r3, [r0]
 800cb5e:	4b0b      	ldr	r3, [pc, #44]	@ (800cb8c <srand+0x58>)
 800cb60:	6083      	str	r3, [r0, #8]
 800cb62:	230b      	movs	r3, #11
 800cb64:	8183      	strh	r3, [r0, #12]
 800cb66:	2100      	movs	r1, #0
 800cb68:	2001      	movs	r0, #1
 800cb6a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800cb6e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800cb70:	2200      	movs	r2, #0
 800cb72:	611c      	str	r4, [r3, #16]
 800cb74:	615a      	str	r2, [r3, #20]
 800cb76:	bd38      	pop	{r3, r4, r5, pc}
 800cb78:	20000574 	.word	0x20000574
 800cb7c:	080126e8 	.word	0x080126e8
 800cb80:	080126ff 	.word	0x080126ff
 800cb84:	abcd330e 	.word	0xabcd330e
 800cb88:	e66d1234 	.word	0xe66d1234
 800cb8c:	0005deec 	.word	0x0005deec

0800cb90 <rand>:
 800cb90:	4b16      	ldr	r3, [pc, #88]	@ (800cbec <rand+0x5c>)
 800cb92:	b510      	push	{r4, lr}
 800cb94:	681c      	ldr	r4, [r3, #0]
 800cb96:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800cb98:	b9b3      	cbnz	r3, 800cbc8 <rand+0x38>
 800cb9a:	2018      	movs	r0, #24
 800cb9c:	f002 fd02 	bl	800f5a4 <malloc>
 800cba0:	4602      	mov	r2, r0
 800cba2:	6320      	str	r0, [r4, #48]	@ 0x30
 800cba4:	b920      	cbnz	r0, 800cbb0 <rand+0x20>
 800cba6:	4b12      	ldr	r3, [pc, #72]	@ (800cbf0 <rand+0x60>)
 800cba8:	4812      	ldr	r0, [pc, #72]	@ (800cbf4 <rand+0x64>)
 800cbaa:	2152      	movs	r1, #82	@ 0x52
 800cbac:	f001 fe44 	bl	800e838 <__assert_func>
 800cbb0:	4911      	ldr	r1, [pc, #68]	@ (800cbf8 <rand+0x68>)
 800cbb2:	4b12      	ldr	r3, [pc, #72]	@ (800cbfc <rand+0x6c>)
 800cbb4:	e9c0 1300 	strd	r1, r3, [r0]
 800cbb8:	4b11      	ldr	r3, [pc, #68]	@ (800cc00 <rand+0x70>)
 800cbba:	6083      	str	r3, [r0, #8]
 800cbbc:	230b      	movs	r3, #11
 800cbbe:	8183      	strh	r3, [r0, #12]
 800cbc0:	2100      	movs	r1, #0
 800cbc2:	2001      	movs	r0, #1
 800cbc4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800cbc8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800cbca:	480e      	ldr	r0, [pc, #56]	@ (800cc04 <rand+0x74>)
 800cbcc:	690b      	ldr	r3, [r1, #16]
 800cbce:	694c      	ldr	r4, [r1, #20]
 800cbd0:	4a0d      	ldr	r2, [pc, #52]	@ (800cc08 <rand+0x78>)
 800cbd2:	4358      	muls	r0, r3
 800cbd4:	fb02 0004 	mla	r0, r2, r4, r0
 800cbd8:	fba3 3202 	umull	r3, r2, r3, r2
 800cbdc:	3301      	adds	r3, #1
 800cbde:	eb40 0002 	adc.w	r0, r0, r2
 800cbe2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800cbe6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800cbea:	bd10      	pop	{r4, pc}
 800cbec:	20000574 	.word	0x20000574
 800cbf0:	080126e8 	.word	0x080126e8
 800cbf4:	080126ff 	.word	0x080126ff
 800cbf8:	abcd330e 	.word	0xabcd330e
 800cbfc:	e66d1234 	.word	0xe66d1234
 800cc00:	0005deec 	.word	0x0005deec
 800cc04:	5851f42d 	.word	0x5851f42d
 800cc08:	4c957f2d 	.word	0x4c957f2d

0800cc0c <__cvt>:
 800cc0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cc10:	ec57 6b10 	vmov	r6, r7, d0
 800cc14:	2f00      	cmp	r7, #0
 800cc16:	460c      	mov	r4, r1
 800cc18:	4619      	mov	r1, r3
 800cc1a:	463b      	mov	r3, r7
 800cc1c:	bfbb      	ittet	lt
 800cc1e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800cc22:	461f      	movlt	r7, r3
 800cc24:	2300      	movge	r3, #0
 800cc26:	232d      	movlt	r3, #45	@ 0x2d
 800cc28:	700b      	strb	r3, [r1, #0]
 800cc2a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cc2c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800cc30:	4691      	mov	r9, r2
 800cc32:	f023 0820 	bic.w	r8, r3, #32
 800cc36:	bfbc      	itt	lt
 800cc38:	4632      	movlt	r2, r6
 800cc3a:	4616      	movlt	r6, r2
 800cc3c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cc40:	d005      	beq.n	800cc4e <__cvt+0x42>
 800cc42:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800cc46:	d100      	bne.n	800cc4a <__cvt+0x3e>
 800cc48:	3401      	adds	r4, #1
 800cc4a:	2102      	movs	r1, #2
 800cc4c:	e000      	b.n	800cc50 <__cvt+0x44>
 800cc4e:	2103      	movs	r1, #3
 800cc50:	ab03      	add	r3, sp, #12
 800cc52:	9301      	str	r3, [sp, #4]
 800cc54:	ab02      	add	r3, sp, #8
 800cc56:	9300      	str	r3, [sp, #0]
 800cc58:	ec47 6b10 	vmov	d0, r6, r7
 800cc5c:	4653      	mov	r3, sl
 800cc5e:	4622      	mov	r2, r4
 800cc60:	f001 fe92 	bl	800e988 <_dtoa_r>
 800cc64:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800cc68:	4605      	mov	r5, r0
 800cc6a:	d119      	bne.n	800cca0 <__cvt+0x94>
 800cc6c:	f019 0f01 	tst.w	r9, #1
 800cc70:	d00e      	beq.n	800cc90 <__cvt+0x84>
 800cc72:	eb00 0904 	add.w	r9, r0, r4
 800cc76:	2200      	movs	r2, #0
 800cc78:	2300      	movs	r3, #0
 800cc7a:	4630      	mov	r0, r6
 800cc7c:	4639      	mov	r1, r7
 800cc7e:	f7f3 ff23 	bl	8000ac8 <__aeabi_dcmpeq>
 800cc82:	b108      	cbz	r0, 800cc88 <__cvt+0x7c>
 800cc84:	f8cd 900c 	str.w	r9, [sp, #12]
 800cc88:	2230      	movs	r2, #48	@ 0x30
 800cc8a:	9b03      	ldr	r3, [sp, #12]
 800cc8c:	454b      	cmp	r3, r9
 800cc8e:	d31e      	bcc.n	800ccce <__cvt+0xc2>
 800cc90:	9b03      	ldr	r3, [sp, #12]
 800cc92:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cc94:	1b5b      	subs	r3, r3, r5
 800cc96:	4628      	mov	r0, r5
 800cc98:	6013      	str	r3, [r2, #0]
 800cc9a:	b004      	add	sp, #16
 800cc9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cca0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cca4:	eb00 0904 	add.w	r9, r0, r4
 800cca8:	d1e5      	bne.n	800cc76 <__cvt+0x6a>
 800ccaa:	7803      	ldrb	r3, [r0, #0]
 800ccac:	2b30      	cmp	r3, #48	@ 0x30
 800ccae:	d10a      	bne.n	800ccc6 <__cvt+0xba>
 800ccb0:	2200      	movs	r2, #0
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	4630      	mov	r0, r6
 800ccb6:	4639      	mov	r1, r7
 800ccb8:	f7f3 ff06 	bl	8000ac8 <__aeabi_dcmpeq>
 800ccbc:	b918      	cbnz	r0, 800ccc6 <__cvt+0xba>
 800ccbe:	f1c4 0401 	rsb	r4, r4, #1
 800ccc2:	f8ca 4000 	str.w	r4, [sl]
 800ccc6:	f8da 3000 	ldr.w	r3, [sl]
 800ccca:	4499      	add	r9, r3
 800cccc:	e7d3      	b.n	800cc76 <__cvt+0x6a>
 800ccce:	1c59      	adds	r1, r3, #1
 800ccd0:	9103      	str	r1, [sp, #12]
 800ccd2:	701a      	strb	r2, [r3, #0]
 800ccd4:	e7d9      	b.n	800cc8a <__cvt+0x7e>

0800ccd6 <__exponent>:
 800ccd6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ccd8:	2900      	cmp	r1, #0
 800ccda:	bfba      	itte	lt
 800ccdc:	4249      	neglt	r1, r1
 800ccde:	232d      	movlt	r3, #45	@ 0x2d
 800cce0:	232b      	movge	r3, #43	@ 0x2b
 800cce2:	2909      	cmp	r1, #9
 800cce4:	7002      	strb	r2, [r0, #0]
 800cce6:	7043      	strb	r3, [r0, #1]
 800cce8:	dd29      	ble.n	800cd3e <__exponent+0x68>
 800ccea:	f10d 0307 	add.w	r3, sp, #7
 800ccee:	461d      	mov	r5, r3
 800ccf0:	270a      	movs	r7, #10
 800ccf2:	461a      	mov	r2, r3
 800ccf4:	fbb1 f6f7 	udiv	r6, r1, r7
 800ccf8:	fb07 1416 	mls	r4, r7, r6, r1
 800ccfc:	3430      	adds	r4, #48	@ 0x30
 800ccfe:	f802 4c01 	strb.w	r4, [r2, #-1]
 800cd02:	460c      	mov	r4, r1
 800cd04:	2c63      	cmp	r4, #99	@ 0x63
 800cd06:	f103 33ff 	add.w	r3, r3, #4294967295
 800cd0a:	4631      	mov	r1, r6
 800cd0c:	dcf1      	bgt.n	800ccf2 <__exponent+0x1c>
 800cd0e:	3130      	adds	r1, #48	@ 0x30
 800cd10:	1e94      	subs	r4, r2, #2
 800cd12:	f803 1c01 	strb.w	r1, [r3, #-1]
 800cd16:	1c41      	adds	r1, r0, #1
 800cd18:	4623      	mov	r3, r4
 800cd1a:	42ab      	cmp	r3, r5
 800cd1c:	d30a      	bcc.n	800cd34 <__exponent+0x5e>
 800cd1e:	f10d 0309 	add.w	r3, sp, #9
 800cd22:	1a9b      	subs	r3, r3, r2
 800cd24:	42ac      	cmp	r4, r5
 800cd26:	bf88      	it	hi
 800cd28:	2300      	movhi	r3, #0
 800cd2a:	3302      	adds	r3, #2
 800cd2c:	4403      	add	r3, r0
 800cd2e:	1a18      	subs	r0, r3, r0
 800cd30:	b003      	add	sp, #12
 800cd32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd34:	f813 6b01 	ldrb.w	r6, [r3], #1
 800cd38:	f801 6f01 	strb.w	r6, [r1, #1]!
 800cd3c:	e7ed      	b.n	800cd1a <__exponent+0x44>
 800cd3e:	2330      	movs	r3, #48	@ 0x30
 800cd40:	3130      	adds	r1, #48	@ 0x30
 800cd42:	7083      	strb	r3, [r0, #2]
 800cd44:	70c1      	strb	r1, [r0, #3]
 800cd46:	1d03      	adds	r3, r0, #4
 800cd48:	e7f1      	b.n	800cd2e <__exponent+0x58>
	...

0800cd4c <_printf_float>:
 800cd4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd50:	b08d      	sub	sp, #52	@ 0x34
 800cd52:	460c      	mov	r4, r1
 800cd54:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800cd58:	4616      	mov	r6, r2
 800cd5a:	461f      	mov	r7, r3
 800cd5c:	4605      	mov	r5, r0
 800cd5e:	f001 fccd 	bl	800e6fc <_localeconv_r>
 800cd62:	6803      	ldr	r3, [r0, #0]
 800cd64:	9304      	str	r3, [sp, #16]
 800cd66:	4618      	mov	r0, r3
 800cd68:	f7f3 fa82 	bl	8000270 <strlen>
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	930a      	str	r3, [sp, #40]	@ 0x28
 800cd70:	f8d8 3000 	ldr.w	r3, [r8]
 800cd74:	9005      	str	r0, [sp, #20]
 800cd76:	3307      	adds	r3, #7
 800cd78:	f023 0307 	bic.w	r3, r3, #7
 800cd7c:	f103 0208 	add.w	r2, r3, #8
 800cd80:	f894 a018 	ldrb.w	sl, [r4, #24]
 800cd84:	f8d4 b000 	ldr.w	fp, [r4]
 800cd88:	f8c8 2000 	str.w	r2, [r8]
 800cd8c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cd90:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800cd94:	9307      	str	r3, [sp, #28]
 800cd96:	f8cd 8018 	str.w	r8, [sp, #24]
 800cd9a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800cd9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cda2:	4b9c      	ldr	r3, [pc, #624]	@ (800d014 <_printf_float+0x2c8>)
 800cda4:	f04f 32ff 	mov.w	r2, #4294967295
 800cda8:	f7f3 fec0 	bl	8000b2c <__aeabi_dcmpun>
 800cdac:	bb70      	cbnz	r0, 800ce0c <_printf_float+0xc0>
 800cdae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cdb2:	4b98      	ldr	r3, [pc, #608]	@ (800d014 <_printf_float+0x2c8>)
 800cdb4:	f04f 32ff 	mov.w	r2, #4294967295
 800cdb8:	f7f3 fe9a 	bl	8000af0 <__aeabi_dcmple>
 800cdbc:	bb30      	cbnz	r0, 800ce0c <_printf_float+0xc0>
 800cdbe:	2200      	movs	r2, #0
 800cdc0:	2300      	movs	r3, #0
 800cdc2:	4640      	mov	r0, r8
 800cdc4:	4649      	mov	r1, r9
 800cdc6:	f7f3 fe89 	bl	8000adc <__aeabi_dcmplt>
 800cdca:	b110      	cbz	r0, 800cdd2 <_printf_float+0x86>
 800cdcc:	232d      	movs	r3, #45	@ 0x2d
 800cdce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cdd2:	4a91      	ldr	r2, [pc, #580]	@ (800d018 <_printf_float+0x2cc>)
 800cdd4:	4b91      	ldr	r3, [pc, #580]	@ (800d01c <_printf_float+0x2d0>)
 800cdd6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800cdda:	bf94      	ite	ls
 800cddc:	4690      	movls	r8, r2
 800cdde:	4698      	movhi	r8, r3
 800cde0:	2303      	movs	r3, #3
 800cde2:	6123      	str	r3, [r4, #16]
 800cde4:	f02b 0304 	bic.w	r3, fp, #4
 800cde8:	6023      	str	r3, [r4, #0]
 800cdea:	f04f 0900 	mov.w	r9, #0
 800cdee:	9700      	str	r7, [sp, #0]
 800cdf0:	4633      	mov	r3, r6
 800cdf2:	aa0b      	add	r2, sp, #44	@ 0x2c
 800cdf4:	4621      	mov	r1, r4
 800cdf6:	4628      	mov	r0, r5
 800cdf8:	f000 f9d2 	bl	800d1a0 <_printf_common>
 800cdfc:	3001      	adds	r0, #1
 800cdfe:	f040 808d 	bne.w	800cf1c <_printf_float+0x1d0>
 800ce02:	f04f 30ff 	mov.w	r0, #4294967295
 800ce06:	b00d      	add	sp, #52	@ 0x34
 800ce08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce0c:	4642      	mov	r2, r8
 800ce0e:	464b      	mov	r3, r9
 800ce10:	4640      	mov	r0, r8
 800ce12:	4649      	mov	r1, r9
 800ce14:	f7f3 fe8a 	bl	8000b2c <__aeabi_dcmpun>
 800ce18:	b140      	cbz	r0, 800ce2c <_printf_float+0xe0>
 800ce1a:	464b      	mov	r3, r9
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	bfbc      	itt	lt
 800ce20:	232d      	movlt	r3, #45	@ 0x2d
 800ce22:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ce26:	4a7e      	ldr	r2, [pc, #504]	@ (800d020 <_printf_float+0x2d4>)
 800ce28:	4b7e      	ldr	r3, [pc, #504]	@ (800d024 <_printf_float+0x2d8>)
 800ce2a:	e7d4      	b.n	800cdd6 <_printf_float+0x8a>
 800ce2c:	6863      	ldr	r3, [r4, #4]
 800ce2e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800ce32:	9206      	str	r2, [sp, #24]
 800ce34:	1c5a      	adds	r2, r3, #1
 800ce36:	d13b      	bne.n	800ceb0 <_printf_float+0x164>
 800ce38:	2306      	movs	r3, #6
 800ce3a:	6063      	str	r3, [r4, #4]
 800ce3c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800ce40:	2300      	movs	r3, #0
 800ce42:	6022      	str	r2, [r4, #0]
 800ce44:	9303      	str	r3, [sp, #12]
 800ce46:	ab0a      	add	r3, sp, #40	@ 0x28
 800ce48:	e9cd a301 	strd	sl, r3, [sp, #4]
 800ce4c:	ab09      	add	r3, sp, #36	@ 0x24
 800ce4e:	9300      	str	r3, [sp, #0]
 800ce50:	6861      	ldr	r1, [r4, #4]
 800ce52:	ec49 8b10 	vmov	d0, r8, r9
 800ce56:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ce5a:	4628      	mov	r0, r5
 800ce5c:	f7ff fed6 	bl	800cc0c <__cvt>
 800ce60:	9b06      	ldr	r3, [sp, #24]
 800ce62:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ce64:	2b47      	cmp	r3, #71	@ 0x47
 800ce66:	4680      	mov	r8, r0
 800ce68:	d129      	bne.n	800cebe <_printf_float+0x172>
 800ce6a:	1cc8      	adds	r0, r1, #3
 800ce6c:	db02      	blt.n	800ce74 <_printf_float+0x128>
 800ce6e:	6863      	ldr	r3, [r4, #4]
 800ce70:	4299      	cmp	r1, r3
 800ce72:	dd41      	ble.n	800cef8 <_printf_float+0x1ac>
 800ce74:	f1aa 0a02 	sub.w	sl, sl, #2
 800ce78:	fa5f fa8a 	uxtb.w	sl, sl
 800ce7c:	3901      	subs	r1, #1
 800ce7e:	4652      	mov	r2, sl
 800ce80:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ce84:	9109      	str	r1, [sp, #36]	@ 0x24
 800ce86:	f7ff ff26 	bl	800ccd6 <__exponent>
 800ce8a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ce8c:	1813      	adds	r3, r2, r0
 800ce8e:	2a01      	cmp	r2, #1
 800ce90:	4681      	mov	r9, r0
 800ce92:	6123      	str	r3, [r4, #16]
 800ce94:	dc02      	bgt.n	800ce9c <_printf_float+0x150>
 800ce96:	6822      	ldr	r2, [r4, #0]
 800ce98:	07d2      	lsls	r2, r2, #31
 800ce9a:	d501      	bpl.n	800cea0 <_printf_float+0x154>
 800ce9c:	3301      	adds	r3, #1
 800ce9e:	6123      	str	r3, [r4, #16]
 800cea0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d0a2      	beq.n	800cdee <_printf_float+0xa2>
 800cea8:	232d      	movs	r3, #45	@ 0x2d
 800ceaa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ceae:	e79e      	b.n	800cdee <_printf_float+0xa2>
 800ceb0:	9a06      	ldr	r2, [sp, #24]
 800ceb2:	2a47      	cmp	r2, #71	@ 0x47
 800ceb4:	d1c2      	bne.n	800ce3c <_printf_float+0xf0>
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d1c0      	bne.n	800ce3c <_printf_float+0xf0>
 800ceba:	2301      	movs	r3, #1
 800cebc:	e7bd      	b.n	800ce3a <_printf_float+0xee>
 800cebe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800cec2:	d9db      	bls.n	800ce7c <_printf_float+0x130>
 800cec4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800cec8:	d118      	bne.n	800cefc <_printf_float+0x1b0>
 800ceca:	2900      	cmp	r1, #0
 800cecc:	6863      	ldr	r3, [r4, #4]
 800cece:	dd0b      	ble.n	800cee8 <_printf_float+0x19c>
 800ced0:	6121      	str	r1, [r4, #16]
 800ced2:	b913      	cbnz	r3, 800ceda <_printf_float+0x18e>
 800ced4:	6822      	ldr	r2, [r4, #0]
 800ced6:	07d0      	lsls	r0, r2, #31
 800ced8:	d502      	bpl.n	800cee0 <_printf_float+0x194>
 800ceda:	3301      	adds	r3, #1
 800cedc:	440b      	add	r3, r1
 800cede:	6123      	str	r3, [r4, #16]
 800cee0:	65a1      	str	r1, [r4, #88]	@ 0x58
 800cee2:	f04f 0900 	mov.w	r9, #0
 800cee6:	e7db      	b.n	800cea0 <_printf_float+0x154>
 800cee8:	b913      	cbnz	r3, 800cef0 <_printf_float+0x1a4>
 800ceea:	6822      	ldr	r2, [r4, #0]
 800ceec:	07d2      	lsls	r2, r2, #31
 800ceee:	d501      	bpl.n	800cef4 <_printf_float+0x1a8>
 800cef0:	3302      	adds	r3, #2
 800cef2:	e7f4      	b.n	800cede <_printf_float+0x192>
 800cef4:	2301      	movs	r3, #1
 800cef6:	e7f2      	b.n	800cede <_printf_float+0x192>
 800cef8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800cefc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cefe:	4299      	cmp	r1, r3
 800cf00:	db05      	blt.n	800cf0e <_printf_float+0x1c2>
 800cf02:	6823      	ldr	r3, [r4, #0]
 800cf04:	6121      	str	r1, [r4, #16]
 800cf06:	07d8      	lsls	r0, r3, #31
 800cf08:	d5ea      	bpl.n	800cee0 <_printf_float+0x194>
 800cf0a:	1c4b      	adds	r3, r1, #1
 800cf0c:	e7e7      	b.n	800cede <_printf_float+0x192>
 800cf0e:	2900      	cmp	r1, #0
 800cf10:	bfd4      	ite	le
 800cf12:	f1c1 0202 	rsble	r2, r1, #2
 800cf16:	2201      	movgt	r2, #1
 800cf18:	4413      	add	r3, r2
 800cf1a:	e7e0      	b.n	800cede <_printf_float+0x192>
 800cf1c:	6823      	ldr	r3, [r4, #0]
 800cf1e:	055a      	lsls	r2, r3, #21
 800cf20:	d407      	bmi.n	800cf32 <_printf_float+0x1e6>
 800cf22:	6923      	ldr	r3, [r4, #16]
 800cf24:	4642      	mov	r2, r8
 800cf26:	4631      	mov	r1, r6
 800cf28:	4628      	mov	r0, r5
 800cf2a:	47b8      	blx	r7
 800cf2c:	3001      	adds	r0, #1
 800cf2e:	d12b      	bne.n	800cf88 <_printf_float+0x23c>
 800cf30:	e767      	b.n	800ce02 <_printf_float+0xb6>
 800cf32:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800cf36:	f240 80dd 	bls.w	800d0f4 <_printf_float+0x3a8>
 800cf3a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800cf3e:	2200      	movs	r2, #0
 800cf40:	2300      	movs	r3, #0
 800cf42:	f7f3 fdc1 	bl	8000ac8 <__aeabi_dcmpeq>
 800cf46:	2800      	cmp	r0, #0
 800cf48:	d033      	beq.n	800cfb2 <_printf_float+0x266>
 800cf4a:	4a37      	ldr	r2, [pc, #220]	@ (800d028 <_printf_float+0x2dc>)
 800cf4c:	2301      	movs	r3, #1
 800cf4e:	4631      	mov	r1, r6
 800cf50:	4628      	mov	r0, r5
 800cf52:	47b8      	blx	r7
 800cf54:	3001      	adds	r0, #1
 800cf56:	f43f af54 	beq.w	800ce02 <_printf_float+0xb6>
 800cf5a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800cf5e:	4543      	cmp	r3, r8
 800cf60:	db02      	blt.n	800cf68 <_printf_float+0x21c>
 800cf62:	6823      	ldr	r3, [r4, #0]
 800cf64:	07d8      	lsls	r0, r3, #31
 800cf66:	d50f      	bpl.n	800cf88 <_printf_float+0x23c>
 800cf68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cf6c:	4631      	mov	r1, r6
 800cf6e:	4628      	mov	r0, r5
 800cf70:	47b8      	blx	r7
 800cf72:	3001      	adds	r0, #1
 800cf74:	f43f af45 	beq.w	800ce02 <_printf_float+0xb6>
 800cf78:	f04f 0900 	mov.w	r9, #0
 800cf7c:	f108 38ff 	add.w	r8, r8, #4294967295
 800cf80:	f104 0a1a 	add.w	sl, r4, #26
 800cf84:	45c8      	cmp	r8, r9
 800cf86:	dc09      	bgt.n	800cf9c <_printf_float+0x250>
 800cf88:	6823      	ldr	r3, [r4, #0]
 800cf8a:	079b      	lsls	r3, r3, #30
 800cf8c:	f100 8103 	bmi.w	800d196 <_printf_float+0x44a>
 800cf90:	68e0      	ldr	r0, [r4, #12]
 800cf92:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cf94:	4298      	cmp	r0, r3
 800cf96:	bfb8      	it	lt
 800cf98:	4618      	movlt	r0, r3
 800cf9a:	e734      	b.n	800ce06 <_printf_float+0xba>
 800cf9c:	2301      	movs	r3, #1
 800cf9e:	4652      	mov	r2, sl
 800cfa0:	4631      	mov	r1, r6
 800cfa2:	4628      	mov	r0, r5
 800cfa4:	47b8      	blx	r7
 800cfa6:	3001      	adds	r0, #1
 800cfa8:	f43f af2b 	beq.w	800ce02 <_printf_float+0xb6>
 800cfac:	f109 0901 	add.w	r9, r9, #1
 800cfb0:	e7e8      	b.n	800cf84 <_printf_float+0x238>
 800cfb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	dc39      	bgt.n	800d02c <_printf_float+0x2e0>
 800cfb8:	4a1b      	ldr	r2, [pc, #108]	@ (800d028 <_printf_float+0x2dc>)
 800cfba:	2301      	movs	r3, #1
 800cfbc:	4631      	mov	r1, r6
 800cfbe:	4628      	mov	r0, r5
 800cfc0:	47b8      	blx	r7
 800cfc2:	3001      	adds	r0, #1
 800cfc4:	f43f af1d 	beq.w	800ce02 <_printf_float+0xb6>
 800cfc8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800cfcc:	ea59 0303 	orrs.w	r3, r9, r3
 800cfd0:	d102      	bne.n	800cfd8 <_printf_float+0x28c>
 800cfd2:	6823      	ldr	r3, [r4, #0]
 800cfd4:	07d9      	lsls	r1, r3, #31
 800cfd6:	d5d7      	bpl.n	800cf88 <_printf_float+0x23c>
 800cfd8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cfdc:	4631      	mov	r1, r6
 800cfde:	4628      	mov	r0, r5
 800cfe0:	47b8      	blx	r7
 800cfe2:	3001      	adds	r0, #1
 800cfe4:	f43f af0d 	beq.w	800ce02 <_printf_float+0xb6>
 800cfe8:	f04f 0a00 	mov.w	sl, #0
 800cfec:	f104 0b1a 	add.w	fp, r4, #26
 800cff0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cff2:	425b      	negs	r3, r3
 800cff4:	4553      	cmp	r3, sl
 800cff6:	dc01      	bgt.n	800cffc <_printf_float+0x2b0>
 800cff8:	464b      	mov	r3, r9
 800cffa:	e793      	b.n	800cf24 <_printf_float+0x1d8>
 800cffc:	2301      	movs	r3, #1
 800cffe:	465a      	mov	r2, fp
 800d000:	4631      	mov	r1, r6
 800d002:	4628      	mov	r0, r5
 800d004:	47b8      	blx	r7
 800d006:	3001      	adds	r0, #1
 800d008:	f43f aefb 	beq.w	800ce02 <_printf_float+0xb6>
 800d00c:	f10a 0a01 	add.w	sl, sl, #1
 800d010:	e7ee      	b.n	800cff0 <_printf_float+0x2a4>
 800d012:	bf00      	nop
 800d014:	7fefffff 	.word	0x7fefffff
 800d018:	08012757 	.word	0x08012757
 800d01c:	0801275b 	.word	0x0801275b
 800d020:	0801275f 	.word	0x0801275f
 800d024:	08012763 	.word	0x08012763
 800d028:	08012767 	.word	0x08012767
 800d02c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d02e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d032:	4553      	cmp	r3, sl
 800d034:	bfa8      	it	ge
 800d036:	4653      	movge	r3, sl
 800d038:	2b00      	cmp	r3, #0
 800d03a:	4699      	mov	r9, r3
 800d03c:	dc36      	bgt.n	800d0ac <_printf_float+0x360>
 800d03e:	f04f 0b00 	mov.w	fp, #0
 800d042:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d046:	f104 021a 	add.w	r2, r4, #26
 800d04a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d04c:	9306      	str	r3, [sp, #24]
 800d04e:	eba3 0309 	sub.w	r3, r3, r9
 800d052:	455b      	cmp	r3, fp
 800d054:	dc31      	bgt.n	800d0ba <_printf_float+0x36e>
 800d056:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d058:	459a      	cmp	sl, r3
 800d05a:	dc3a      	bgt.n	800d0d2 <_printf_float+0x386>
 800d05c:	6823      	ldr	r3, [r4, #0]
 800d05e:	07da      	lsls	r2, r3, #31
 800d060:	d437      	bmi.n	800d0d2 <_printf_float+0x386>
 800d062:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d064:	ebaa 0903 	sub.w	r9, sl, r3
 800d068:	9b06      	ldr	r3, [sp, #24]
 800d06a:	ebaa 0303 	sub.w	r3, sl, r3
 800d06e:	4599      	cmp	r9, r3
 800d070:	bfa8      	it	ge
 800d072:	4699      	movge	r9, r3
 800d074:	f1b9 0f00 	cmp.w	r9, #0
 800d078:	dc33      	bgt.n	800d0e2 <_printf_float+0x396>
 800d07a:	f04f 0800 	mov.w	r8, #0
 800d07e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d082:	f104 0b1a 	add.w	fp, r4, #26
 800d086:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d088:	ebaa 0303 	sub.w	r3, sl, r3
 800d08c:	eba3 0309 	sub.w	r3, r3, r9
 800d090:	4543      	cmp	r3, r8
 800d092:	f77f af79 	ble.w	800cf88 <_printf_float+0x23c>
 800d096:	2301      	movs	r3, #1
 800d098:	465a      	mov	r2, fp
 800d09a:	4631      	mov	r1, r6
 800d09c:	4628      	mov	r0, r5
 800d09e:	47b8      	blx	r7
 800d0a0:	3001      	adds	r0, #1
 800d0a2:	f43f aeae 	beq.w	800ce02 <_printf_float+0xb6>
 800d0a6:	f108 0801 	add.w	r8, r8, #1
 800d0aa:	e7ec      	b.n	800d086 <_printf_float+0x33a>
 800d0ac:	4642      	mov	r2, r8
 800d0ae:	4631      	mov	r1, r6
 800d0b0:	4628      	mov	r0, r5
 800d0b2:	47b8      	blx	r7
 800d0b4:	3001      	adds	r0, #1
 800d0b6:	d1c2      	bne.n	800d03e <_printf_float+0x2f2>
 800d0b8:	e6a3      	b.n	800ce02 <_printf_float+0xb6>
 800d0ba:	2301      	movs	r3, #1
 800d0bc:	4631      	mov	r1, r6
 800d0be:	4628      	mov	r0, r5
 800d0c0:	9206      	str	r2, [sp, #24]
 800d0c2:	47b8      	blx	r7
 800d0c4:	3001      	adds	r0, #1
 800d0c6:	f43f ae9c 	beq.w	800ce02 <_printf_float+0xb6>
 800d0ca:	9a06      	ldr	r2, [sp, #24]
 800d0cc:	f10b 0b01 	add.w	fp, fp, #1
 800d0d0:	e7bb      	b.n	800d04a <_printf_float+0x2fe>
 800d0d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d0d6:	4631      	mov	r1, r6
 800d0d8:	4628      	mov	r0, r5
 800d0da:	47b8      	blx	r7
 800d0dc:	3001      	adds	r0, #1
 800d0de:	d1c0      	bne.n	800d062 <_printf_float+0x316>
 800d0e0:	e68f      	b.n	800ce02 <_printf_float+0xb6>
 800d0e2:	9a06      	ldr	r2, [sp, #24]
 800d0e4:	464b      	mov	r3, r9
 800d0e6:	4442      	add	r2, r8
 800d0e8:	4631      	mov	r1, r6
 800d0ea:	4628      	mov	r0, r5
 800d0ec:	47b8      	blx	r7
 800d0ee:	3001      	adds	r0, #1
 800d0f0:	d1c3      	bne.n	800d07a <_printf_float+0x32e>
 800d0f2:	e686      	b.n	800ce02 <_printf_float+0xb6>
 800d0f4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d0f8:	f1ba 0f01 	cmp.w	sl, #1
 800d0fc:	dc01      	bgt.n	800d102 <_printf_float+0x3b6>
 800d0fe:	07db      	lsls	r3, r3, #31
 800d100:	d536      	bpl.n	800d170 <_printf_float+0x424>
 800d102:	2301      	movs	r3, #1
 800d104:	4642      	mov	r2, r8
 800d106:	4631      	mov	r1, r6
 800d108:	4628      	mov	r0, r5
 800d10a:	47b8      	blx	r7
 800d10c:	3001      	adds	r0, #1
 800d10e:	f43f ae78 	beq.w	800ce02 <_printf_float+0xb6>
 800d112:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d116:	4631      	mov	r1, r6
 800d118:	4628      	mov	r0, r5
 800d11a:	47b8      	blx	r7
 800d11c:	3001      	adds	r0, #1
 800d11e:	f43f ae70 	beq.w	800ce02 <_printf_float+0xb6>
 800d122:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d126:	2200      	movs	r2, #0
 800d128:	2300      	movs	r3, #0
 800d12a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d12e:	f7f3 fccb 	bl	8000ac8 <__aeabi_dcmpeq>
 800d132:	b9c0      	cbnz	r0, 800d166 <_printf_float+0x41a>
 800d134:	4653      	mov	r3, sl
 800d136:	f108 0201 	add.w	r2, r8, #1
 800d13a:	4631      	mov	r1, r6
 800d13c:	4628      	mov	r0, r5
 800d13e:	47b8      	blx	r7
 800d140:	3001      	adds	r0, #1
 800d142:	d10c      	bne.n	800d15e <_printf_float+0x412>
 800d144:	e65d      	b.n	800ce02 <_printf_float+0xb6>
 800d146:	2301      	movs	r3, #1
 800d148:	465a      	mov	r2, fp
 800d14a:	4631      	mov	r1, r6
 800d14c:	4628      	mov	r0, r5
 800d14e:	47b8      	blx	r7
 800d150:	3001      	adds	r0, #1
 800d152:	f43f ae56 	beq.w	800ce02 <_printf_float+0xb6>
 800d156:	f108 0801 	add.w	r8, r8, #1
 800d15a:	45d0      	cmp	r8, sl
 800d15c:	dbf3      	blt.n	800d146 <_printf_float+0x3fa>
 800d15e:	464b      	mov	r3, r9
 800d160:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d164:	e6df      	b.n	800cf26 <_printf_float+0x1da>
 800d166:	f04f 0800 	mov.w	r8, #0
 800d16a:	f104 0b1a 	add.w	fp, r4, #26
 800d16e:	e7f4      	b.n	800d15a <_printf_float+0x40e>
 800d170:	2301      	movs	r3, #1
 800d172:	4642      	mov	r2, r8
 800d174:	e7e1      	b.n	800d13a <_printf_float+0x3ee>
 800d176:	2301      	movs	r3, #1
 800d178:	464a      	mov	r2, r9
 800d17a:	4631      	mov	r1, r6
 800d17c:	4628      	mov	r0, r5
 800d17e:	47b8      	blx	r7
 800d180:	3001      	adds	r0, #1
 800d182:	f43f ae3e 	beq.w	800ce02 <_printf_float+0xb6>
 800d186:	f108 0801 	add.w	r8, r8, #1
 800d18a:	68e3      	ldr	r3, [r4, #12]
 800d18c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d18e:	1a5b      	subs	r3, r3, r1
 800d190:	4543      	cmp	r3, r8
 800d192:	dcf0      	bgt.n	800d176 <_printf_float+0x42a>
 800d194:	e6fc      	b.n	800cf90 <_printf_float+0x244>
 800d196:	f04f 0800 	mov.w	r8, #0
 800d19a:	f104 0919 	add.w	r9, r4, #25
 800d19e:	e7f4      	b.n	800d18a <_printf_float+0x43e>

0800d1a0 <_printf_common>:
 800d1a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1a4:	4616      	mov	r6, r2
 800d1a6:	4698      	mov	r8, r3
 800d1a8:	688a      	ldr	r2, [r1, #8]
 800d1aa:	690b      	ldr	r3, [r1, #16]
 800d1ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d1b0:	4293      	cmp	r3, r2
 800d1b2:	bfb8      	it	lt
 800d1b4:	4613      	movlt	r3, r2
 800d1b6:	6033      	str	r3, [r6, #0]
 800d1b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d1bc:	4607      	mov	r7, r0
 800d1be:	460c      	mov	r4, r1
 800d1c0:	b10a      	cbz	r2, 800d1c6 <_printf_common+0x26>
 800d1c2:	3301      	adds	r3, #1
 800d1c4:	6033      	str	r3, [r6, #0]
 800d1c6:	6823      	ldr	r3, [r4, #0]
 800d1c8:	0699      	lsls	r1, r3, #26
 800d1ca:	bf42      	ittt	mi
 800d1cc:	6833      	ldrmi	r3, [r6, #0]
 800d1ce:	3302      	addmi	r3, #2
 800d1d0:	6033      	strmi	r3, [r6, #0]
 800d1d2:	6825      	ldr	r5, [r4, #0]
 800d1d4:	f015 0506 	ands.w	r5, r5, #6
 800d1d8:	d106      	bne.n	800d1e8 <_printf_common+0x48>
 800d1da:	f104 0a19 	add.w	sl, r4, #25
 800d1de:	68e3      	ldr	r3, [r4, #12]
 800d1e0:	6832      	ldr	r2, [r6, #0]
 800d1e2:	1a9b      	subs	r3, r3, r2
 800d1e4:	42ab      	cmp	r3, r5
 800d1e6:	dc26      	bgt.n	800d236 <_printf_common+0x96>
 800d1e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d1ec:	6822      	ldr	r2, [r4, #0]
 800d1ee:	3b00      	subs	r3, #0
 800d1f0:	bf18      	it	ne
 800d1f2:	2301      	movne	r3, #1
 800d1f4:	0692      	lsls	r2, r2, #26
 800d1f6:	d42b      	bmi.n	800d250 <_printf_common+0xb0>
 800d1f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d1fc:	4641      	mov	r1, r8
 800d1fe:	4638      	mov	r0, r7
 800d200:	47c8      	blx	r9
 800d202:	3001      	adds	r0, #1
 800d204:	d01e      	beq.n	800d244 <_printf_common+0xa4>
 800d206:	6823      	ldr	r3, [r4, #0]
 800d208:	6922      	ldr	r2, [r4, #16]
 800d20a:	f003 0306 	and.w	r3, r3, #6
 800d20e:	2b04      	cmp	r3, #4
 800d210:	bf02      	ittt	eq
 800d212:	68e5      	ldreq	r5, [r4, #12]
 800d214:	6833      	ldreq	r3, [r6, #0]
 800d216:	1aed      	subeq	r5, r5, r3
 800d218:	68a3      	ldr	r3, [r4, #8]
 800d21a:	bf0c      	ite	eq
 800d21c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d220:	2500      	movne	r5, #0
 800d222:	4293      	cmp	r3, r2
 800d224:	bfc4      	itt	gt
 800d226:	1a9b      	subgt	r3, r3, r2
 800d228:	18ed      	addgt	r5, r5, r3
 800d22a:	2600      	movs	r6, #0
 800d22c:	341a      	adds	r4, #26
 800d22e:	42b5      	cmp	r5, r6
 800d230:	d11a      	bne.n	800d268 <_printf_common+0xc8>
 800d232:	2000      	movs	r0, #0
 800d234:	e008      	b.n	800d248 <_printf_common+0xa8>
 800d236:	2301      	movs	r3, #1
 800d238:	4652      	mov	r2, sl
 800d23a:	4641      	mov	r1, r8
 800d23c:	4638      	mov	r0, r7
 800d23e:	47c8      	blx	r9
 800d240:	3001      	adds	r0, #1
 800d242:	d103      	bne.n	800d24c <_printf_common+0xac>
 800d244:	f04f 30ff 	mov.w	r0, #4294967295
 800d248:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d24c:	3501      	adds	r5, #1
 800d24e:	e7c6      	b.n	800d1de <_printf_common+0x3e>
 800d250:	18e1      	adds	r1, r4, r3
 800d252:	1c5a      	adds	r2, r3, #1
 800d254:	2030      	movs	r0, #48	@ 0x30
 800d256:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d25a:	4422      	add	r2, r4
 800d25c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d260:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d264:	3302      	adds	r3, #2
 800d266:	e7c7      	b.n	800d1f8 <_printf_common+0x58>
 800d268:	2301      	movs	r3, #1
 800d26a:	4622      	mov	r2, r4
 800d26c:	4641      	mov	r1, r8
 800d26e:	4638      	mov	r0, r7
 800d270:	47c8      	blx	r9
 800d272:	3001      	adds	r0, #1
 800d274:	d0e6      	beq.n	800d244 <_printf_common+0xa4>
 800d276:	3601      	adds	r6, #1
 800d278:	e7d9      	b.n	800d22e <_printf_common+0x8e>
	...

0800d27c <_printf_i>:
 800d27c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d280:	7e0f      	ldrb	r7, [r1, #24]
 800d282:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d284:	2f78      	cmp	r7, #120	@ 0x78
 800d286:	4691      	mov	r9, r2
 800d288:	4680      	mov	r8, r0
 800d28a:	460c      	mov	r4, r1
 800d28c:	469a      	mov	sl, r3
 800d28e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d292:	d807      	bhi.n	800d2a4 <_printf_i+0x28>
 800d294:	2f62      	cmp	r7, #98	@ 0x62
 800d296:	d80a      	bhi.n	800d2ae <_printf_i+0x32>
 800d298:	2f00      	cmp	r7, #0
 800d29a:	f000 80d2 	beq.w	800d442 <_printf_i+0x1c6>
 800d29e:	2f58      	cmp	r7, #88	@ 0x58
 800d2a0:	f000 80b9 	beq.w	800d416 <_printf_i+0x19a>
 800d2a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d2a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d2ac:	e03a      	b.n	800d324 <_printf_i+0xa8>
 800d2ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d2b2:	2b15      	cmp	r3, #21
 800d2b4:	d8f6      	bhi.n	800d2a4 <_printf_i+0x28>
 800d2b6:	a101      	add	r1, pc, #4	@ (adr r1, 800d2bc <_printf_i+0x40>)
 800d2b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d2bc:	0800d315 	.word	0x0800d315
 800d2c0:	0800d329 	.word	0x0800d329
 800d2c4:	0800d2a5 	.word	0x0800d2a5
 800d2c8:	0800d2a5 	.word	0x0800d2a5
 800d2cc:	0800d2a5 	.word	0x0800d2a5
 800d2d0:	0800d2a5 	.word	0x0800d2a5
 800d2d4:	0800d329 	.word	0x0800d329
 800d2d8:	0800d2a5 	.word	0x0800d2a5
 800d2dc:	0800d2a5 	.word	0x0800d2a5
 800d2e0:	0800d2a5 	.word	0x0800d2a5
 800d2e4:	0800d2a5 	.word	0x0800d2a5
 800d2e8:	0800d429 	.word	0x0800d429
 800d2ec:	0800d353 	.word	0x0800d353
 800d2f0:	0800d3e3 	.word	0x0800d3e3
 800d2f4:	0800d2a5 	.word	0x0800d2a5
 800d2f8:	0800d2a5 	.word	0x0800d2a5
 800d2fc:	0800d44b 	.word	0x0800d44b
 800d300:	0800d2a5 	.word	0x0800d2a5
 800d304:	0800d353 	.word	0x0800d353
 800d308:	0800d2a5 	.word	0x0800d2a5
 800d30c:	0800d2a5 	.word	0x0800d2a5
 800d310:	0800d3eb 	.word	0x0800d3eb
 800d314:	6833      	ldr	r3, [r6, #0]
 800d316:	1d1a      	adds	r2, r3, #4
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	6032      	str	r2, [r6, #0]
 800d31c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d320:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d324:	2301      	movs	r3, #1
 800d326:	e09d      	b.n	800d464 <_printf_i+0x1e8>
 800d328:	6833      	ldr	r3, [r6, #0]
 800d32a:	6820      	ldr	r0, [r4, #0]
 800d32c:	1d19      	adds	r1, r3, #4
 800d32e:	6031      	str	r1, [r6, #0]
 800d330:	0606      	lsls	r6, r0, #24
 800d332:	d501      	bpl.n	800d338 <_printf_i+0xbc>
 800d334:	681d      	ldr	r5, [r3, #0]
 800d336:	e003      	b.n	800d340 <_printf_i+0xc4>
 800d338:	0645      	lsls	r5, r0, #25
 800d33a:	d5fb      	bpl.n	800d334 <_printf_i+0xb8>
 800d33c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d340:	2d00      	cmp	r5, #0
 800d342:	da03      	bge.n	800d34c <_printf_i+0xd0>
 800d344:	232d      	movs	r3, #45	@ 0x2d
 800d346:	426d      	negs	r5, r5
 800d348:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d34c:	4859      	ldr	r0, [pc, #356]	@ (800d4b4 <_printf_i+0x238>)
 800d34e:	230a      	movs	r3, #10
 800d350:	e011      	b.n	800d376 <_printf_i+0xfa>
 800d352:	6821      	ldr	r1, [r4, #0]
 800d354:	6833      	ldr	r3, [r6, #0]
 800d356:	0608      	lsls	r0, r1, #24
 800d358:	f853 5b04 	ldr.w	r5, [r3], #4
 800d35c:	d402      	bmi.n	800d364 <_printf_i+0xe8>
 800d35e:	0649      	lsls	r1, r1, #25
 800d360:	bf48      	it	mi
 800d362:	b2ad      	uxthmi	r5, r5
 800d364:	2f6f      	cmp	r7, #111	@ 0x6f
 800d366:	4853      	ldr	r0, [pc, #332]	@ (800d4b4 <_printf_i+0x238>)
 800d368:	6033      	str	r3, [r6, #0]
 800d36a:	bf14      	ite	ne
 800d36c:	230a      	movne	r3, #10
 800d36e:	2308      	moveq	r3, #8
 800d370:	2100      	movs	r1, #0
 800d372:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d376:	6866      	ldr	r6, [r4, #4]
 800d378:	60a6      	str	r6, [r4, #8]
 800d37a:	2e00      	cmp	r6, #0
 800d37c:	bfa2      	ittt	ge
 800d37e:	6821      	ldrge	r1, [r4, #0]
 800d380:	f021 0104 	bicge.w	r1, r1, #4
 800d384:	6021      	strge	r1, [r4, #0]
 800d386:	b90d      	cbnz	r5, 800d38c <_printf_i+0x110>
 800d388:	2e00      	cmp	r6, #0
 800d38a:	d04b      	beq.n	800d424 <_printf_i+0x1a8>
 800d38c:	4616      	mov	r6, r2
 800d38e:	fbb5 f1f3 	udiv	r1, r5, r3
 800d392:	fb03 5711 	mls	r7, r3, r1, r5
 800d396:	5dc7      	ldrb	r7, [r0, r7]
 800d398:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d39c:	462f      	mov	r7, r5
 800d39e:	42bb      	cmp	r3, r7
 800d3a0:	460d      	mov	r5, r1
 800d3a2:	d9f4      	bls.n	800d38e <_printf_i+0x112>
 800d3a4:	2b08      	cmp	r3, #8
 800d3a6:	d10b      	bne.n	800d3c0 <_printf_i+0x144>
 800d3a8:	6823      	ldr	r3, [r4, #0]
 800d3aa:	07df      	lsls	r7, r3, #31
 800d3ac:	d508      	bpl.n	800d3c0 <_printf_i+0x144>
 800d3ae:	6923      	ldr	r3, [r4, #16]
 800d3b0:	6861      	ldr	r1, [r4, #4]
 800d3b2:	4299      	cmp	r1, r3
 800d3b4:	bfde      	ittt	le
 800d3b6:	2330      	movle	r3, #48	@ 0x30
 800d3b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d3bc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d3c0:	1b92      	subs	r2, r2, r6
 800d3c2:	6122      	str	r2, [r4, #16]
 800d3c4:	f8cd a000 	str.w	sl, [sp]
 800d3c8:	464b      	mov	r3, r9
 800d3ca:	aa03      	add	r2, sp, #12
 800d3cc:	4621      	mov	r1, r4
 800d3ce:	4640      	mov	r0, r8
 800d3d0:	f7ff fee6 	bl	800d1a0 <_printf_common>
 800d3d4:	3001      	adds	r0, #1
 800d3d6:	d14a      	bne.n	800d46e <_printf_i+0x1f2>
 800d3d8:	f04f 30ff 	mov.w	r0, #4294967295
 800d3dc:	b004      	add	sp, #16
 800d3de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3e2:	6823      	ldr	r3, [r4, #0]
 800d3e4:	f043 0320 	orr.w	r3, r3, #32
 800d3e8:	6023      	str	r3, [r4, #0]
 800d3ea:	4833      	ldr	r0, [pc, #204]	@ (800d4b8 <_printf_i+0x23c>)
 800d3ec:	2778      	movs	r7, #120	@ 0x78
 800d3ee:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d3f2:	6823      	ldr	r3, [r4, #0]
 800d3f4:	6831      	ldr	r1, [r6, #0]
 800d3f6:	061f      	lsls	r7, r3, #24
 800d3f8:	f851 5b04 	ldr.w	r5, [r1], #4
 800d3fc:	d402      	bmi.n	800d404 <_printf_i+0x188>
 800d3fe:	065f      	lsls	r7, r3, #25
 800d400:	bf48      	it	mi
 800d402:	b2ad      	uxthmi	r5, r5
 800d404:	6031      	str	r1, [r6, #0]
 800d406:	07d9      	lsls	r1, r3, #31
 800d408:	bf44      	itt	mi
 800d40a:	f043 0320 	orrmi.w	r3, r3, #32
 800d40e:	6023      	strmi	r3, [r4, #0]
 800d410:	b11d      	cbz	r5, 800d41a <_printf_i+0x19e>
 800d412:	2310      	movs	r3, #16
 800d414:	e7ac      	b.n	800d370 <_printf_i+0xf4>
 800d416:	4827      	ldr	r0, [pc, #156]	@ (800d4b4 <_printf_i+0x238>)
 800d418:	e7e9      	b.n	800d3ee <_printf_i+0x172>
 800d41a:	6823      	ldr	r3, [r4, #0]
 800d41c:	f023 0320 	bic.w	r3, r3, #32
 800d420:	6023      	str	r3, [r4, #0]
 800d422:	e7f6      	b.n	800d412 <_printf_i+0x196>
 800d424:	4616      	mov	r6, r2
 800d426:	e7bd      	b.n	800d3a4 <_printf_i+0x128>
 800d428:	6833      	ldr	r3, [r6, #0]
 800d42a:	6825      	ldr	r5, [r4, #0]
 800d42c:	6961      	ldr	r1, [r4, #20]
 800d42e:	1d18      	adds	r0, r3, #4
 800d430:	6030      	str	r0, [r6, #0]
 800d432:	062e      	lsls	r6, r5, #24
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	d501      	bpl.n	800d43c <_printf_i+0x1c0>
 800d438:	6019      	str	r1, [r3, #0]
 800d43a:	e002      	b.n	800d442 <_printf_i+0x1c6>
 800d43c:	0668      	lsls	r0, r5, #25
 800d43e:	d5fb      	bpl.n	800d438 <_printf_i+0x1bc>
 800d440:	8019      	strh	r1, [r3, #0]
 800d442:	2300      	movs	r3, #0
 800d444:	6123      	str	r3, [r4, #16]
 800d446:	4616      	mov	r6, r2
 800d448:	e7bc      	b.n	800d3c4 <_printf_i+0x148>
 800d44a:	6833      	ldr	r3, [r6, #0]
 800d44c:	1d1a      	adds	r2, r3, #4
 800d44e:	6032      	str	r2, [r6, #0]
 800d450:	681e      	ldr	r6, [r3, #0]
 800d452:	6862      	ldr	r2, [r4, #4]
 800d454:	2100      	movs	r1, #0
 800d456:	4630      	mov	r0, r6
 800d458:	f7f2 feba 	bl	80001d0 <memchr>
 800d45c:	b108      	cbz	r0, 800d462 <_printf_i+0x1e6>
 800d45e:	1b80      	subs	r0, r0, r6
 800d460:	6060      	str	r0, [r4, #4]
 800d462:	6863      	ldr	r3, [r4, #4]
 800d464:	6123      	str	r3, [r4, #16]
 800d466:	2300      	movs	r3, #0
 800d468:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d46c:	e7aa      	b.n	800d3c4 <_printf_i+0x148>
 800d46e:	6923      	ldr	r3, [r4, #16]
 800d470:	4632      	mov	r2, r6
 800d472:	4649      	mov	r1, r9
 800d474:	4640      	mov	r0, r8
 800d476:	47d0      	blx	sl
 800d478:	3001      	adds	r0, #1
 800d47a:	d0ad      	beq.n	800d3d8 <_printf_i+0x15c>
 800d47c:	6823      	ldr	r3, [r4, #0]
 800d47e:	079b      	lsls	r3, r3, #30
 800d480:	d413      	bmi.n	800d4aa <_printf_i+0x22e>
 800d482:	68e0      	ldr	r0, [r4, #12]
 800d484:	9b03      	ldr	r3, [sp, #12]
 800d486:	4298      	cmp	r0, r3
 800d488:	bfb8      	it	lt
 800d48a:	4618      	movlt	r0, r3
 800d48c:	e7a6      	b.n	800d3dc <_printf_i+0x160>
 800d48e:	2301      	movs	r3, #1
 800d490:	4632      	mov	r2, r6
 800d492:	4649      	mov	r1, r9
 800d494:	4640      	mov	r0, r8
 800d496:	47d0      	blx	sl
 800d498:	3001      	adds	r0, #1
 800d49a:	d09d      	beq.n	800d3d8 <_printf_i+0x15c>
 800d49c:	3501      	adds	r5, #1
 800d49e:	68e3      	ldr	r3, [r4, #12]
 800d4a0:	9903      	ldr	r1, [sp, #12]
 800d4a2:	1a5b      	subs	r3, r3, r1
 800d4a4:	42ab      	cmp	r3, r5
 800d4a6:	dcf2      	bgt.n	800d48e <_printf_i+0x212>
 800d4a8:	e7eb      	b.n	800d482 <_printf_i+0x206>
 800d4aa:	2500      	movs	r5, #0
 800d4ac:	f104 0619 	add.w	r6, r4, #25
 800d4b0:	e7f5      	b.n	800d49e <_printf_i+0x222>
 800d4b2:	bf00      	nop
 800d4b4:	08012769 	.word	0x08012769
 800d4b8:	0801277a 	.word	0x0801277a

0800d4bc <_scanf_float>:
 800d4bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4c0:	b087      	sub	sp, #28
 800d4c2:	4617      	mov	r7, r2
 800d4c4:	9303      	str	r3, [sp, #12]
 800d4c6:	688b      	ldr	r3, [r1, #8]
 800d4c8:	1e5a      	subs	r2, r3, #1
 800d4ca:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800d4ce:	bf81      	itttt	hi
 800d4d0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800d4d4:	eb03 0b05 	addhi.w	fp, r3, r5
 800d4d8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800d4dc:	608b      	strhi	r3, [r1, #8]
 800d4de:	680b      	ldr	r3, [r1, #0]
 800d4e0:	460a      	mov	r2, r1
 800d4e2:	f04f 0500 	mov.w	r5, #0
 800d4e6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800d4ea:	f842 3b1c 	str.w	r3, [r2], #28
 800d4ee:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800d4f2:	4680      	mov	r8, r0
 800d4f4:	460c      	mov	r4, r1
 800d4f6:	bf98      	it	ls
 800d4f8:	f04f 0b00 	movls.w	fp, #0
 800d4fc:	9201      	str	r2, [sp, #4]
 800d4fe:	4616      	mov	r6, r2
 800d500:	46aa      	mov	sl, r5
 800d502:	46a9      	mov	r9, r5
 800d504:	9502      	str	r5, [sp, #8]
 800d506:	68a2      	ldr	r2, [r4, #8]
 800d508:	b152      	cbz	r2, 800d520 <_scanf_float+0x64>
 800d50a:	683b      	ldr	r3, [r7, #0]
 800d50c:	781b      	ldrb	r3, [r3, #0]
 800d50e:	2b4e      	cmp	r3, #78	@ 0x4e
 800d510:	d864      	bhi.n	800d5dc <_scanf_float+0x120>
 800d512:	2b40      	cmp	r3, #64	@ 0x40
 800d514:	d83c      	bhi.n	800d590 <_scanf_float+0xd4>
 800d516:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800d51a:	b2c8      	uxtb	r0, r1
 800d51c:	280e      	cmp	r0, #14
 800d51e:	d93a      	bls.n	800d596 <_scanf_float+0xda>
 800d520:	f1b9 0f00 	cmp.w	r9, #0
 800d524:	d003      	beq.n	800d52e <_scanf_float+0x72>
 800d526:	6823      	ldr	r3, [r4, #0]
 800d528:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d52c:	6023      	str	r3, [r4, #0]
 800d52e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d532:	f1ba 0f01 	cmp.w	sl, #1
 800d536:	f200 8117 	bhi.w	800d768 <_scanf_float+0x2ac>
 800d53a:	9b01      	ldr	r3, [sp, #4]
 800d53c:	429e      	cmp	r6, r3
 800d53e:	f200 8108 	bhi.w	800d752 <_scanf_float+0x296>
 800d542:	2001      	movs	r0, #1
 800d544:	b007      	add	sp, #28
 800d546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d54a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800d54e:	2a0d      	cmp	r2, #13
 800d550:	d8e6      	bhi.n	800d520 <_scanf_float+0x64>
 800d552:	a101      	add	r1, pc, #4	@ (adr r1, 800d558 <_scanf_float+0x9c>)
 800d554:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d558:	0800d69f 	.word	0x0800d69f
 800d55c:	0800d521 	.word	0x0800d521
 800d560:	0800d521 	.word	0x0800d521
 800d564:	0800d521 	.word	0x0800d521
 800d568:	0800d6ff 	.word	0x0800d6ff
 800d56c:	0800d6d7 	.word	0x0800d6d7
 800d570:	0800d521 	.word	0x0800d521
 800d574:	0800d521 	.word	0x0800d521
 800d578:	0800d6ad 	.word	0x0800d6ad
 800d57c:	0800d521 	.word	0x0800d521
 800d580:	0800d521 	.word	0x0800d521
 800d584:	0800d521 	.word	0x0800d521
 800d588:	0800d521 	.word	0x0800d521
 800d58c:	0800d665 	.word	0x0800d665
 800d590:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800d594:	e7db      	b.n	800d54e <_scanf_float+0x92>
 800d596:	290e      	cmp	r1, #14
 800d598:	d8c2      	bhi.n	800d520 <_scanf_float+0x64>
 800d59a:	a001      	add	r0, pc, #4	@ (adr r0, 800d5a0 <_scanf_float+0xe4>)
 800d59c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800d5a0:	0800d655 	.word	0x0800d655
 800d5a4:	0800d521 	.word	0x0800d521
 800d5a8:	0800d655 	.word	0x0800d655
 800d5ac:	0800d6eb 	.word	0x0800d6eb
 800d5b0:	0800d521 	.word	0x0800d521
 800d5b4:	0800d5fd 	.word	0x0800d5fd
 800d5b8:	0800d63b 	.word	0x0800d63b
 800d5bc:	0800d63b 	.word	0x0800d63b
 800d5c0:	0800d63b 	.word	0x0800d63b
 800d5c4:	0800d63b 	.word	0x0800d63b
 800d5c8:	0800d63b 	.word	0x0800d63b
 800d5cc:	0800d63b 	.word	0x0800d63b
 800d5d0:	0800d63b 	.word	0x0800d63b
 800d5d4:	0800d63b 	.word	0x0800d63b
 800d5d8:	0800d63b 	.word	0x0800d63b
 800d5dc:	2b6e      	cmp	r3, #110	@ 0x6e
 800d5de:	d809      	bhi.n	800d5f4 <_scanf_float+0x138>
 800d5e0:	2b60      	cmp	r3, #96	@ 0x60
 800d5e2:	d8b2      	bhi.n	800d54a <_scanf_float+0x8e>
 800d5e4:	2b54      	cmp	r3, #84	@ 0x54
 800d5e6:	d07b      	beq.n	800d6e0 <_scanf_float+0x224>
 800d5e8:	2b59      	cmp	r3, #89	@ 0x59
 800d5ea:	d199      	bne.n	800d520 <_scanf_float+0x64>
 800d5ec:	2d07      	cmp	r5, #7
 800d5ee:	d197      	bne.n	800d520 <_scanf_float+0x64>
 800d5f0:	2508      	movs	r5, #8
 800d5f2:	e02c      	b.n	800d64e <_scanf_float+0x192>
 800d5f4:	2b74      	cmp	r3, #116	@ 0x74
 800d5f6:	d073      	beq.n	800d6e0 <_scanf_float+0x224>
 800d5f8:	2b79      	cmp	r3, #121	@ 0x79
 800d5fa:	e7f6      	b.n	800d5ea <_scanf_float+0x12e>
 800d5fc:	6821      	ldr	r1, [r4, #0]
 800d5fe:	05c8      	lsls	r0, r1, #23
 800d600:	d51b      	bpl.n	800d63a <_scanf_float+0x17e>
 800d602:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800d606:	6021      	str	r1, [r4, #0]
 800d608:	f109 0901 	add.w	r9, r9, #1
 800d60c:	f1bb 0f00 	cmp.w	fp, #0
 800d610:	d003      	beq.n	800d61a <_scanf_float+0x15e>
 800d612:	3201      	adds	r2, #1
 800d614:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d618:	60a2      	str	r2, [r4, #8]
 800d61a:	68a3      	ldr	r3, [r4, #8]
 800d61c:	3b01      	subs	r3, #1
 800d61e:	60a3      	str	r3, [r4, #8]
 800d620:	6923      	ldr	r3, [r4, #16]
 800d622:	3301      	adds	r3, #1
 800d624:	6123      	str	r3, [r4, #16]
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	3b01      	subs	r3, #1
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	607b      	str	r3, [r7, #4]
 800d62e:	f340 8087 	ble.w	800d740 <_scanf_float+0x284>
 800d632:	683b      	ldr	r3, [r7, #0]
 800d634:	3301      	adds	r3, #1
 800d636:	603b      	str	r3, [r7, #0]
 800d638:	e765      	b.n	800d506 <_scanf_float+0x4a>
 800d63a:	eb1a 0105 	adds.w	r1, sl, r5
 800d63e:	f47f af6f 	bne.w	800d520 <_scanf_float+0x64>
 800d642:	6822      	ldr	r2, [r4, #0]
 800d644:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800d648:	6022      	str	r2, [r4, #0]
 800d64a:	460d      	mov	r5, r1
 800d64c:	468a      	mov	sl, r1
 800d64e:	f806 3b01 	strb.w	r3, [r6], #1
 800d652:	e7e2      	b.n	800d61a <_scanf_float+0x15e>
 800d654:	6822      	ldr	r2, [r4, #0]
 800d656:	0610      	lsls	r0, r2, #24
 800d658:	f57f af62 	bpl.w	800d520 <_scanf_float+0x64>
 800d65c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d660:	6022      	str	r2, [r4, #0]
 800d662:	e7f4      	b.n	800d64e <_scanf_float+0x192>
 800d664:	f1ba 0f00 	cmp.w	sl, #0
 800d668:	d10e      	bne.n	800d688 <_scanf_float+0x1cc>
 800d66a:	f1b9 0f00 	cmp.w	r9, #0
 800d66e:	d10e      	bne.n	800d68e <_scanf_float+0x1d2>
 800d670:	6822      	ldr	r2, [r4, #0]
 800d672:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800d676:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800d67a:	d108      	bne.n	800d68e <_scanf_float+0x1d2>
 800d67c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d680:	6022      	str	r2, [r4, #0]
 800d682:	f04f 0a01 	mov.w	sl, #1
 800d686:	e7e2      	b.n	800d64e <_scanf_float+0x192>
 800d688:	f1ba 0f02 	cmp.w	sl, #2
 800d68c:	d055      	beq.n	800d73a <_scanf_float+0x27e>
 800d68e:	2d01      	cmp	r5, #1
 800d690:	d002      	beq.n	800d698 <_scanf_float+0x1dc>
 800d692:	2d04      	cmp	r5, #4
 800d694:	f47f af44 	bne.w	800d520 <_scanf_float+0x64>
 800d698:	3501      	adds	r5, #1
 800d69a:	b2ed      	uxtb	r5, r5
 800d69c:	e7d7      	b.n	800d64e <_scanf_float+0x192>
 800d69e:	f1ba 0f01 	cmp.w	sl, #1
 800d6a2:	f47f af3d 	bne.w	800d520 <_scanf_float+0x64>
 800d6a6:	f04f 0a02 	mov.w	sl, #2
 800d6aa:	e7d0      	b.n	800d64e <_scanf_float+0x192>
 800d6ac:	b97d      	cbnz	r5, 800d6ce <_scanf_float+0x212>
 800d6ae:	f1b9 0f00 	cmp.w	r9, #0
 800d6b2:	f47f af38 	bne.w	800d526 <_scanf_float+0x6a>
 800d6b6:	6822      	ldr	r2, [r4, #0]
 800d6b8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800d6bc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800d6c0:	f040 8108 	bne.w	800d8d4 <_scanf_float+0x418>
 800d6c4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d6c8:	6022      	str	r2, [r4, #0]
 800d6ca:	2501      	movs	r5, #1
 800d6cc:	e7bf      	b.n	800d64e <_scanf_float+0x192>
 800d6ce:	2d03      	cmp	r5, #3
 800d6d0:	d0e2      	beq.n	800d698 <_scanf_float+0x1dc>
 800d6d2:	2d05      	cmp	r5, #5
 800d6d4:	e7de      	b.n	800d694 <_scanf_float+0x1d8>
 800d6d6:	2d02      	cmp	r5, #2
 800d6d8:	f47f af22 	bne.w	800d520 <_scanf_float+0x64>
 800d6dc:	2503      	movs	r5, #3
 800d6de:	e7b6      	b.n	800d64e <_scanf_float+0x192>
 800d6e0:	2d06      	cmp	r5, #6
 800d6e2:	f47f af1d 	bne.w	800d520 <_scanf_float+0x64>
 800d6e6:	2507      	movs	r5, #7
 800d6e8:	e7b1      	b.n	800d64e <_scanf_float+0x192>
 800d6ea:	6822      	ldr	r2, [r4, #0]
 800d6ec:	0591      	lsls	r1, r2, #22
 800d6ee:	f57f af17 	bpl.w	800d520 <_scanf_float+0x64>
 800d6f2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800d6f6:	6022      	str	r2, [r4, #0]
 800d6f8:	f8cd 9008 	str.w	r9, [sp, #8]
 800d6fc:	e7a7      	b.n	800d64e <_scanf_float+0x192>
 800d6fe:	6822      	ldr	r2, [r4, #0]
 800d700:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800d704:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800d708:	d006      	beq.n	800d718 <_scanf_float+0x25c>
 800d70a:	0550      	lsls	r0, r2, #21
 800d70c:	f57f af08 	bpl.w	800d520 <_scanf_float+0x64>
 800d710:	f1b9 0f00 	cmp.w	r9, #0
 800d714:	f000 80de 	beq.w	800d8d4 <_scanf_float+0x418>
 800d718:	0591      	lsls	r1, r2, #22
 800d71a:	bf58      	it	pl
 800d71c:	9902      	ldrpl	r1, [sp, #8]
 800d71e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d722:	bf58      	it	pl
 800d724:	eba9 0101 	subpl.w	r1, r9, r1
 800d728:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800d72c:	bf58      	it	pl
 800d72e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800d732:	6022      	str	r2, [r4, #0]
 800d734:	f04f 0900 	mov.w	r9, #0
 800d738:	e789      	b.n	800d64e <_scanf_float+0x192>
 800d73a:	f04f 0a03 	mov.w	sl, #3
 800d73e:	e786      	b.n	800d64e <_scanf_float+0x192>
 800d740:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800d744:	4639      	mov	r1, r7
 800d746:	4640      	mov	r0, r8
 800d748:	4798      	blx	r3
 800d74a:	2800      	cmp	r0, #0
 800d74c:	f43f aedb 	beq.w	800d506 <_scanf_float+0x4a>
 800d750:	e6e6      	b.n	800d520 <_scanf_float+0x64>
 800d752:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d756:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d75a:	463a      	mov	r2, r7
 800d75c:	4640      	mov	r0, r8
 800d75e:	4798      	blx	r3
 800d760:	6923      	ldr	r3, [r4, #16]
 800d762:	3b01      	subs	r3, #1
 800d764:	6123      	str	r3, [r4, #16]
 800d766:	e6e8      	b.n	800d53a <_scanf_float+0x7e>
 800d768:	1e6b      	subs	r3, r5, #1
 800d76a:	2b06      	cmp	r3, #6
 800d76c:	d824      	bhi.n	800d7b8 <_scanf_float+0x2fc>
 800d76e:	2d02      	cmp	r5, #2
 800d770:	d836      	bhi.n	800d7e0 <_scanf_float+0x324>
 800d772:	9b01      	ldr	r3, [sp, #4]
 800d774:	429e      	cmp	r6, r3
 800d776:	f67f aee4 	bls.w	800d542 <_scanf_float+0x86>
 800d77a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d77e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d782:	463a      	mov	r2, r7
 800d784:	4640      	mov	r0, r8
 800d786:	4798      	blx	r3
 800d788:	6923      	ldr	r3, [r4, #16]
 800d78a:	3b01      	subs	r3, #1
 800d78c:	6123      	str	r3, [r4, #16]
 800d78e:	e7f0      	b.n	800d772 <_scanf_float+0x2b6>
 800d790:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d794:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800d798:	463a      	mov	r2, r7
 800d79a:	4640      	mov	r0, r8
 800d79c:	4798      	blx	r3
 800d79e:	6923      	ldr	r3, [r4, #16]
 800d7a0:	3b01      	subs	r3, #1
 800d7a2:	6123      	str	r3, [r4, #16]
 800d7a4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d7a8:	fa5f fa8a 	uxtb.w	sl, sl
 800d7ac:	f1ba 0f02 	cmp.w	sl, #2
 800d7b0:	d1ee      	bne.n	800d790 <_scanf_float+0x2d4>
 800d7b2:	3d03      	subs	r5, #3
 800d7b4:	b2ed      	uxtb	r5, r5
 800d7b6:	1b76      	subs	r6, r6, r5
 800d7b8:	6823      	ldr	r3, [r4, #0]
 800d7ba:	05da      	lsls	r2, r3, #23
 800d7bc:	d530      	bpl.n	800d820 <_scanf_float+0x364>
 800d7be:	055b      	lsls	r3, r3, #21
 800d7c0:	d511      	bpl.n	800d7e6 <_scanf_float+0x32a>
 800d7c2:	9b01      	ldr	r3, [sp, #4]
 800d7c4:	429e      	cmp	r6, r3
 800d7c6:	f67f aebc 	bls.w	800d542 <_scanf_float+0x86>
 800d7ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d7ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d7d2:	463a      	mov	r2, r7
 800d7d4:	4640      	mov	r0, r8
 800d7d6:	4798      	blx	r3
 800d7d8:	6923      	ldr	r3, [r4, #16]
 800d7da:	3b01      	subs	r3, #1
 800d7dc:	6123      	str	r3, [r4, #16]
 800d7de:	e7f0      	b.n	800d7c2 <_scanf_float+0x306>
 800d7e0:	46aa      	mov	sl, r5
 800d7e2:	46b3      	mov	fp, r6
 800d7e4:	e7de      	b.n	800d7a4 <_scanf_float+0x2e8>
 800d7e6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800d7ea:	6923      	ldr	r3, [r4, #16]
 800d7ec:	2965      	cmp	r1, #101	@ 0x65
 800d7ee:	f103 33ff 	add.w	r3, r3, #4294967295
 800d7f2:	f106 35ff 	add.w	r5, r6, #4294967295
 800d7f6:	6123      	str	r3, [r4, #16]
 800d7f8:	d00c      	beq.n	800d814 <_scanf_float+0x358>
 800d7fa:	2945      	cmp	r1, #69	@ 0x45
 800d7fc:	d00a      	beq.n	800d814 <_scanf_float+0x358>
 800d7fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d802:	463a      	mov	r2, r7
 800d804:	4640      	mov	r0, r8
 800d806:	4798      	blx	r3
 800d808:	6923      	ldr	r3, [r4, #16]
 800d80a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800d80e:	3b01      	subs	r3, #1
 800d810:	1eb5      	subs	r5, r6, #2
 800d812:	6123      	str	r3, [r4, #16]
 800d814:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d818:	463a      	mov	r2, r7
 800d81a:	4640      	mov	r0, r8
 800d81c:	4798      	blx	r3
 800d81e:	462e      	mov	r6, r5
 800d820:	6822      	ldr	r2, [r4, #0]
 800d822:	f012 0210 	ands.w	r2, r2, #16
 800d826:	d001      	beq.n	800d82c <_scanf_float+0x370>
 800d828:	2000      	movs	r0, #0
 800d82a:	e68b      	b.n	800d544 <_scanf_float+0x88>
 800d82c:	7032      	strb	r2, [r6, #0]
 800d82e:	6823      	ldr	r3, [r4, #0]
 800d830:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800d834:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d838:	d11c      	bne.n	800d874 <_scanf_float+0x3b8>
 800d83a:	9b02      	ldr	r3, [sp, #8]
 800d83c:	454b      	cmp	r3, r9
 800d83e:	eba3 0209 	sub.w	r2, r3, r9
 800d842:	d123      	bne.n	800d88c <_scanf_float+0x3d0>
 800d844:	9901      	ldr	r1, [sp, #4]
 800d846:	2200      	movs	r2, #0
 800d848:	4640      	mov	r0, r8
 800d84a:	f003 fa15 	bl	8010c78 <_strtod_r>
 800d84e:	9b03      	ldr	r3, [sp, #12]
 800d850:	6821      	ldr	r1, [r4, #0]
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	f011 0f02 	tst.w	r1, #2
 800d858:	ec57 6b10 	vmov	r6, r7, d0
 800d85c:	f103 0204 	add.w	r2, r3, #4
 800d860:	d01f      	beq.n	800d8a2 <_scanf_float+0x3e6>
 800d862:	9903      	ldr	r1, [sp, #12]
 800d864:	600a      	str	r2, [r1, #0]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	e9c3 6700 	strd	r6, r7, [r3]
 800d86c:	68e3      	ldr	r3, [r4, #12]
 800d86e:	3301      	adds	r3, #1
 800d870:	60e3      	str	r3, [r4, #12]
 800d872:	e7d9      	b.n	800d828 <_scanf_float+0x36c>
 800d874:	9b04      	ldr	r3, [sp, #16]
 800d876:	2b00      	cmp	r3, #0
 800d878:	d0e4      	beq.n	800d844 <_scanf_float+0x388>
 800d87a:	9905      	ldr	r1, [sp, #20]
 800d87c:	230a      	movs	r3, #10
 800d87e:	3101      	adds	r1, #1
 800d880:	4640      	mov	r0, r8
 800d882:	f003 fa79 	bl	8010d78 <_strtol_r>
 800d886:	9b04      	ldr	r3, [sp, #16]
 800d888:	9e05      	ldr	r6, [sp, #20]
 800d88a:	1ac2      	subs	r2, r0, r3
 800d88c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800d890:	429e      	cmp	r6, r3
 800d892:	bf28      	it	cs
 800d894:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800d898:	4910      	ldr	r1, [pc, #64]	@ (800d8dc <_scanf_float+0x420>)
 800d89a:	4630      	mov	r0, r6
 800d89c:	f000 fbae 	bl	800dffc <siprintf>
 800d8a0:	e7d0      	b.n	800d844 <_scanf_float+0x388>
 800d8a2:	f011 0f04 	tst.w	r1, #4
 800d8a6:	9903      	ldr	r1, [sp, #12]
 800d8a8:	600a      	str	r2, [r1, #0]
 800d8aa:	d1dc      	bne.n	800d866 <_scanf_float+0x3aa>
 800d8ac:	681d      	ldr	r5, [r3, #0]
 800d8ae:	4632      	mov	r2, r6
 800d8b0:	463b      	mov	r3, r7
 800d8b2:	4630      	mov	r0, r6
 800d8b4:	4639      	mov	r1, r7
 800d8b6:	f7f3 f939 	bl	8000b2c <__aeabi_dcmpun>
 800d8ba:	b128      	cbz	r0, 800d8c8 <_scanf_float+0x40c>
 800d8bc:	4808      	ldr	r0, [pc, #32]	@ (800d8e0 <_scanf_float+0x424>)
 800d8be:	f000 ffb5 	bl	800e82c <nanf>
 800d8c2:	ed85 0a00 	vstr	s0, [r5]
 800d8c6:	e7d1      	b.n	800d86c <_scanf_float+0x3b0>
 800d8c8:	4630      	mov	r0, r6
 800d8ca:	4639      	mov	r1, r7
 800d8cc:	f7f3 f98c 	bl	8000be8 <__aeabi_d2f>
 800d8d0:	6028      	str	r0, [r5, #0]
 800d8d2:	e7cb      	b.n	800d86c <_scanf_float+0x3b0>
 800d8d4:	f04f 0900 	mov.w	r9, #0
 800d8d8:	e629      	b.n	800d52e <_scanf_float+0x72>
 800d8da:	bf00      	nop
 800d8dc:	0801278b 	.word	0x0801278b
 800d8e0:	08012e61 	.word	0x08012e61

0800d8e4 <_fclose_r>:
 800d8e4:	b570      	push	{r4, r5, r6, lr}
 800d8e6:	4605      	mov	r5, r0
 800d8e8:	460c      	mov	r4, r1
 800d8ea:	b1b1      	cbz	r1, 800d91a <_fclose_r+0x36>
 800d8ec:	b118      	cbz	r0, 800d8f6 <_fclose_r+0x12>
 800d8ee:	6a03      	ldr	r3, [r0, #32]
 800d8f0:	b90b      	cbnz	r3, 800d8f6 <_fclose_r+0x12>
 800d8f2:	f000 f9df 	bl	800dcb4 <__sinit>
 800d8f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d8f8:	07de      	lsls	r6, r3, #31
 800d8fa:	d405      	bmi.n	800d908 <_fclose_r+0x24>
 800d8fc:	89a3      	ldrh	r3, [r4, #12]
 800d8fe:	0598      	lsls	r0, r3, #22
 800d900:	d402      	bmi.n	800d908 <_fclose_r+0x24>
 800d902:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d904:	f000 ff82 	bl	800e80c <__retarget_lock_acquire_recursive>
 800d908:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d90c:	b943      	cbnz	r3, 800d920 <_fclose_r+0x3c>
 800d90e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d910:	07d9      	lsls	r1, r3, #31
 800d912:	d402      	bmi.n	800d91a <_fclose_r+0x36>
 800d914:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d916:	f000 ff7a 	bl	800e80e <__retarget_lock_release_recursive>
 800d91a:	2600      	movs	r6, #0
 800d91c:	4630      	mov	r0, r6
 800d91e:	bd70      	pop	{r4, r5, r6, pc}
 800d920:	4621      	mov	r1, r4
 800d922:	4628      	mov	r0, r5
 800d924:	f000 f83c 	bl	800d9a0 <__sflush_r>
 800d928:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800d92a:	4606      	mov	r6, r0
 800d92c:	b133      	cbz	r3, 800d93c <_fclose_r+0x58>
 800d92e:	6a21      	ldr	r1, [r4, #32]
 800d930:	4628      	mov	r0, r5
 800d932:	4798      	blx	r3
 800d934:	2800      	cmp	r0, #0
 800d936:	bfb8      	it	lt
 800d938:	f04f 36ff 	movlt.w	r6, #4294967295
 800d93c:	89a3      	ldrh	r3, [r4, #12]
 800d93e:	061a      	lsls	r2, r3, #24
 800d940:	d503      	bpl.n	800d94a <_fclose_r+0x66>
 800d942:	6921      	ldr	r1, [r4, #16]
 800d944:	4628      	mov	r0, r5
 800d946:	f001 fde3 	bl	800f510 <_free_r>
 800d94a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d94c:	b141      	cbz	r1, 800d960 <_fclose_r+0x7c>
 800d94e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d952:	4299      	cmp	r1, r3
 800d954:	d002      	beq.n	800d95c <_fclose_r+0x78>
 800d956:	4628      	mov	r0, r5
 800d958:	f001 fdda 	bl	800f510 <_free_r>
 800d95c:	2300      	movs	r3, #0
 800d95e:	6363      	str	r3, [r4, #52]	@ 0x34
 800d960:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800d962:	b121      	cbz	r1, 800d96e <_fclose_r+0x8a>
 800d964:	4628      	mov	r0, r5
 800d966:	f001 fdd3 	bl	800f510 <_free_r>
 800d96a:	2300      	movs	r3, #0
 800d96c:	64a3      	str	r3, [r4, #72]	@ 0x48
 800d96e:	f000 f943 	bl	800dbf8 <__sfp_lock_acquire>
 800d972:	2300      	movs	r3, #0
 800d974:	81a3      	strh	r3, [r4, #12]
 800d976:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d978:	07db      	lsls	r3, r3, #31
 800d97a:	d402      	bmi.n	800d982 <_fclose_r+0x9e>
 800d97c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d97e:	f000 ff46 	bl	800e80e <__retarget_lock_release_recursive>
 800d982:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d984:	f000 ff41 	bl	800e80a <__retarget_lock_close_recursive>
 800d988:	f000 f93c 	bl	800dc04 <__sfp_lock_release>
 800d98c:	e7c6      	b.n	800d91c <_fclose_r+0x38>
	...

0800d990 <fclose>:
 800d990:	4b02      	ldr	r3, [pc, #8]	@ (800d99c <fclose+0xc>)
 800d992:	4601      	mov	r1, r0
 800d994:	6818      	ldr	r0, [r3, #0]
 800d996:	f7ff bfa5 	b.w	800d8e4 <_fclose_r>
 800d99a:	bf00      	nop
 800d99c:	20000574 	.word	0x20000574

0800d9a0 <__sflush_r>:
 800d9a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d9a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9a8:	0716      	lsls	r6, r2, #28
 800d9aa:	4605      	mov	r5, r0
 800d9ac:	460c      	mov	r4, r1
 800d9ae:	d454      	bmi.n	800da5a <__sflush_r+0xba>
 800d9b0:	684b      	ldr	r3, [r1, #4]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	dc02      	bgt.n	800d9bc <__sflush_r+0x1c>
 800d9b6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	dd48      	ble.n	800da4e <__sflush_r+0xae>
 800d9bc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d9be:	2e00      	cmp	r6, #0
 800d9c0:	d045      	beq.n	800da4e <__sflush_r+0xae>
 800d9c2:	2300      	movs	r3, #0
 800d9c4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d9c8:	682f      	ldr	r7, [r5, #0]
 800d9ca:	6a21      	ldr	r1, [r4, #32]
 800d9cc:	602b      	str	r3, [r5, #0]
 800d9ce:	d030      	beq.n	800da32 <__sflush_r+0x92>
 800d9d0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d9d2:	89a3      	ldrh	r3, [r4, #12]
 800d9d4:	0759      	lsls	r1, r3, #29
 800d9d6:	d505      	bpl.n	800d9e4 <__sflush_r+0x44>
 800d9d8:	6863      	ldr	r3, [r4, #4]
 800d9da:	1ad2      	subs	r2, r2, r3
 800d9dc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d9de:	b10b      	cbz	r3, 800d9e4 <__sflush_r+0x44>
 800d9e0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d9e2:	1ad2      	subs	r2, r2, r3
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d9e8:	6a21      	ldr	r1, [r4, #32]
 800d9ea:	4628      	mov	r0, r5
 800d9ec:	47b0      	blx	r6
 800d9ee:	1c43      	adds	r3, r0, #1
 800d9f0:	89a3      	ldrh	r3, [r4, #12]
 800d9f2:	d106      	bne.n	800da02 <__sflush_r+0x62>
 800d9f4:	6829      	ldr	r1, [r5, #0]
 800d9f6:	291d      	cmp	r1, #29
 800d9f8:	d82b      	bhi.n	800da52 <__sflush_r+0xb2>
 800d9fa:	4a2a      	ldr	r2, [pc, #168]	@ (800daa4 <__sflush_r+0x104>)
 800d9fc:	410a      	asrs	r2, r1
 800d9fe:	07d6      	lsls	r6, r2, #31
 800da00:	d427      	bmi.n	800da52 <__sflush_r+0xb2>
 800da02:	2200      	movs	r2, #0
 800da04:	6062      	str	r2, [r4, #4]
 800da06:	04d9      	lsls	r1, r3, #19
 800da08:	6922      	ldr	r2, [r4, #16]
 800da0a:	6022      	str	r2, [r4, #0]
 800da0c:	d504      	bpl.n	800da18 <__sflush_r+0x78>
 800da0e:	1c42      	adds	r2, r0, #1
 800da10:	d101      	bne.n	800da16 <__sflush_r+0x76>
 800da12:	682b      	ldr	r3, [r5, #0]
 800da14:	b903      	cbnz	r3, 800da18 <__sflush_r+0x78>
 800da16:	6560      	str	r0, [r4, #84]	@ 0x54
 800da18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800da1a:	602f      	str	r7, [r5, #0]
 800da1c:	b1b9      	cbz	r1, 800da4e <__sflush_r+0xae>
 800da1e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800da22:	4299      	cmp	r1, r3
 800da24:	d002      	beq.n	800da2c <__sflush_r+0x8c>
 800da26:	4628      	mov	r0, r5
 800da28:	f001 fd72 	bl	800f510 <_free_r>
 800da2c:	2300      	movs	r3, #0
 800da2e:	6363      	str	r3, [r4, #52]	@ 0x34
 800da30:	e00d      	b.n	800da4e <__sflush_r+0xae>
 800da32:	2301      	movs	r3, #1
 800da34:	4628      	mov	r0, r5
 800da36:	47b0      	blx	r6
 800da38:	4602      	mov	r2, r0
 800da3a:	1c50      	adds	r0, r2, #1
 800da3c:	d1c9      	bne.n	800d9d2 <__sflush_r+0x32>
 800da3e:	682b      	ldr	r3, [r5, #0]
 800da40:	2b00      	cmp	r3, #0
 800da42:	d0c6      	beq.n	800d9d2 <__sflush_r+0x32>
 800da44:	2b1d      	cmp	r3, #29
 800da46:	d001      	beq.n	800da4c <__sflush_r+0xac>
 800da48:	2b16      	cmp	r3, #22
 800da4a:	d11e      	bne.n	800da8a <__sflush_r+0xea>
 800da4c:	602f      	str	r7, [r5, #0]
 800da4e:	2000      	movs	r0, #0
 800da50:	e022      	b.n	800da98 <__sflush_r+0xf8>
 800da52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800da56:	b21b      	sxth	r3, r3
 800da58:	e01b      	b.n	800da92 <__sflush_r+0xf2>
 800da5a:	690f      	ldr	r7, [r1, #16]
 800da5c:	2f00      	cmp	r7, #0
 800da5e:	d0f6      	beq.n	800da4e <__sflush_r+0xae>
 800da60:	0793      	lsls	r3, r2, #30
 800da62:	680e      	ldr	r6, [r1, #0]
 800da64:	bf08      	it	eq
 800da66:	694b      	ldreq	r3, [r1, #20]
 800da68:	600f      	str	r7, [r1, #0]
 800da6a:	bf18      	it	ne
 800da6c:	2300      	movne	r3, #0
 800da6e:	eba6 0807 	sub.w	r8, r6, r7
 800da72:	608b      	str	r3, [r1, #8]
 800da74:	f1b8 0f00 	cmp.w	r8, #0
 800da78:	dde9      	ble.n	800da4e <__sflush_r+0xae>
 800da7a:	6a21      	ldr	r1, [r4, #32]
 800da7c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800da7e:	4643      	mov	r3, r8
 800da80:	463a      	mov	r2, r7
 800da82:	4628      	mov	r0, r5
 800da84:	47b0      	blx	r6
 800da86:	2800      	cmp	r0, #0
 800da88:	dc08      	bgt.n	800da9c <__sflush_r+0xfc>
 800da8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800da92:	81a3      	strh	r3, [r4, #12]
 800da94:	f04f 30ff 	mov.w	r0, #4294967295
 800da98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da9c:	4407      	add	r7, r0
 800da9e:	eba8 0800 	sub.w	r8, r8, r0
 800daa2:	e7e7      	b.n	800da74 <__sflush_r+0xd4>
 800daa4:	dfbffffe 	.word	0xdfbffffe

0800daa8 <_fflush_r>:
 800daa8:	b538      	push	{r3, r4, r5, lr}
 800daaa:	690b      	ldr	r3, [r1, #16]
 800daac:	4605      	mov	r5, r0
 800daae:	460c      	mov	r4, r1
 800dab0:	b913      	cbnz	r3, 800dab8 <_fflush_r+0x10>
 800dab2:	2500      	movs	r5, #0
 800dab4:	4628      	mov	r0, r5
 800dab6:	bd38      	pop	{r3, r4, r5, pc}
 800dab8:	b118      	cbz	r0, 800dac2 <_fflush_r+0x1a>
 800daba:	6a03      	ldr	r3, [r0, #32]
 800dabc:	b90b      	cbnz	r3, 800dac2 <_fflush_r+0x1a>
 800dabe:	f000 f8f9 	bl	800dcb4 <__sinit>
 800dac2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d0f3      	beq.n	800dab2 <_fflush_r+0xa>
 800daca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800dacc:	07d0      	lsls	r0, r2, #31
 800dace:	d404      	bmi.n	800dada <_fflush_r+0x32>
 800dad0:	0599      	lsls	r1, r3, #22
 800dad2:	d402      	bmi.n	800dada <_fflush_r+0x32>
 800dad4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dad6:	f000 fe99 	bl	800e80c <__retarget_lock_acquire_recursive>
 800dada:	4628      	mov	r0, r5
 800dadc:	4621      	mov	r1, r4
 800dade:	f7ff ff5f 	bl	800d9a0 <__sflush_r>
 800dae2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dae4:	07da      	lsls	r2, r3, #31
 800dae6:	4605      	mov	r5, r0
 800dae8:	d4e4      	bmi.n	800dab4 <_fflush_r+0xc>
 800daea:	89a3      	ldrh	r3, [r4, #12]
 800daec:	059b      	lsls	r3, r3, #22
 800daee:	d4e1      	bmi.n	800dab4 <_fflush_r+0xc>
 800daf0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800daf2:	f000 fe8c 	bl	800e80e <__retarget_lock_release_recursive>
 800daf6:	e7dd      	b.n	800dab4 <_fflush_r+0xc>

0800daf8 <std>:
 800daf8:	2300      	movs	r3, #0
 800dafa:	b510      	push	{r4, lr}
 800dafc:	4604      	mov	r4, r0
 800dafe:	e9c0 3300 	strd	r3, r3, [r0]
 800db02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800db06:	6083      	str	r3, [r0, #8]
 800db08:	8181      	strh	r1, [r0, #12]
 800db0a:	6643      	str	r3, [r0, #100]	@ 0x64
 800db0c:	81c2      	strh	r2, [r0, #14]
 800db0e:	6183      	str	r3, [r0, #24]
 800db10:	4619      	mov	r1, r3
 800db12:	2208      	movs	r2, #8
 800db14:	305c      	adds	r0, #92	@ 0x5c
 800db16:	f000 fc00 	bl	800e31a <memset>
 800db1a:	4b0d      	ldr	r3, [pc, #52]	@ (800db50 <std+0x58>)
 800db1c:	6263      	str	r3, [r4, #36]	@ 0x24
 800db1e:	4b0d      	ldr	r3, [pc, #52]	@ (800db54 <std+0x5c>)
 800db20:	62a3      	str	r3, [r4, #40]	@ 0x28
 800db22:	4b0d      	ldr	r3, [pc, #52]	@ (800db58 <std+0x60>)
 800db24:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800db26:	4b0d      	ldr	r3, [pc, #52]	@ (800db5c <std+0x64>)
 800db28:	6323      	str	r3, [r4, #48]	@ 0x30
 800db2a:	4b0d      	ldr	r3, [pc, #52]	@ (800db60 <std+0x68>)
 800db2c:	6224      	str	r4, [r4, #32]
 800db2e:	429c      	cmp	r4, r3
 800db30:	d006      	beq.n	800db40 <std+0x48>
 800db32:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800db36:	4294      	cmp	r4, r2
 800db38:	d002      	beq.n	800db40 <std+0x48>
 800db3a:	33d0      	adds	r3, #208	@ 0xd0
 800db3c:	429c      	cmp	r4, r3
 800db3e:	d105      	bne.n	800db4c <std+0x54>
 800db40:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800db44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800db48:	f000 be5e 	b.w	800e808 <__retarget_lock_init_recursive>
 800db4c:	bd10      	pop	{r4, pc}
 800db4e:	bf00      	nop
 800db50:	0800e03d 	.word	0x0800e03d
 800db54:	0800e05f 	.word	0x0800e05f
 800db58:	0800e097 	.word	0x0800e097
 800db5c:	0800e0bb 	.word	0x0800e0bb
 800db60:	200049cc 	.word	0x200049cc

0800db64 <stdio_exit_handler>:
 800db64:	4a02      	ldr	r2, [pc, #8]	@ (800db70 <stdio_exit_handler+0xc>)
 800db66:	4903      	ldr	r1, [pc, #12]	@ (800db74 <stdio_exit_handler+0x10>)
 800db68:	4803      	ldr	r0, [pc, #12]	@ (800db78 <stdio_exit_handler+0x14>)
 800db6a:	f000 b92b 	b.w	800ddc4 <_fwalk_sglue>
 800db6e:	bf00      	nop
 800db70:	20000568 	.word	0x20000568
 800db74:	0800daa9 	.word	0x0800daa9
 800db78:	20000578 	.word	0x20000578

0800db7c <cleanup_stdio>:
 800db7c:	6841      	ldr	r1, [r0, #4]
 800db7e:	4b0c      	ldr	r3, [pc, #48]	@ (800dbb0 <cleanup_stdio+0x34>)
 800db80:	4299      	cmp	r1, r3
 800db82:	b510      	push	{r4, lr}
 800db84:	4604      	mov	r4, r0
 800db86:	d001      	beq.n	800db8c <cleanup_stdio+0x10>
 800db88:	f7ff ff8e 	bl	800daa8 <_fflush_r>
 800db8c:	68a1      	ldr	r1, [r4, #8]
 800db8e:	4b09      	ldr	r3, [pc, #36]	@ (800dbb4 <cleanup_stdio+0x38>)
 800db90:	4299      	cmp	r1, r3
 800db92:	d002      	beq.n	800db9a <cleanup_stdio+0x1e>
 800db94:	4620      	mov	r0, r4
 800db96:	f7ff ff87 	bl	800daa8 <_fflush_r>
 800db9a:	68e1      	ldr	r1, [r4, #12]
 800db9c:	4b06      	ldr	r3, [pc, #24]	@ (800dbb8 <cleanup_stdio+0x3c>)
 800db9e:	4299      	cmp	r1, r3
 800dba0:	d004      	beq.n	800dbac <cleanup_stdio+0x30>
 800dba2:	4620      	mov	r0, r4
 800dba4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dba8:	f7ff bf7e 	b.w	800daa8 <_fflush_r>
 800dbac:	bd10      	pop	{r4, pc}
 800dbae:	bf00      	nop
 800dbb0:	200049cc 	.word	0x200049cc
 800dbb4:	20004a34 	.word	0x20004a34
 800dbb8:	20004a9c 	.word	0x20004a9c

0800dbbc <global_stdio_init.part.0>:
 800dbbc:	b510      	push	{r4, lr}
 800dbbe:	4b0b      	ldr	r3, [pc, #44]	@ (800dbec <global_stdio_init.part.0+0x30>)
 800dbc0:	4c0b      	ldr	r4, [pc, #44]	@ (800dbf0 <global_stdio_init.part.0+0x34>)
 800dbc2:	4a0c      	ldr	r2, [pc, #48]	@ (800dbf4 <global_stdio_init.part.0+0x38>)
 800dbc4:	601a      	str	r2, [r3, #0]
 800dbc6:	4620      	mov	r0, r4
 800dbc8:	2200      	movs	r2, #0
 800dbca:	2104      	movs	r1, #4
 800dbcc:	f7ff ff94 	bl	800daf8 <std>
 800dbd0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800dbd4:	2201      	movs	r2, #1
 800dbd6:	2109      	movs	r1, #9
 800dbd8:	f7ff ff8e 	bl	800daf8 <std>
 800dbdc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800dbe0:	2202      	movs	r2, #2
 800dbe2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dbe6:	2112      	movs	r1, #18
 800dbe8:	f7ff bf86 	b.w	800daf8 <std>
 800dbec:	20004b04 	.word	0x20004b04
 800dbf0:	200049cc 	.word	0x200049cc
 800dbf4:	0800db65 	.word	0x0800db65

0800dbf8 <__sfp_lock_acquire>:
 800dbf8:	4801      	ldr	r0, [pc, #4]	@ (800dc00 <__sfp_lock_acquire+0x8>)
 800dbfa:	f000 be07 	b.w	800e80c <__retarget_lock_acquire_recursive>
 800dbfe:	bf00      	nop
 800dc00:	20004b0d 	.word	0x20004b0d

0800dc04 <__sfp_lock_release>:
 800dc04:	4801      	ldr	r0, [pc, #4]	@ (800dc0c <__sfp_lock_release+0x8>)
 800dc06:	f000 be02 	b.w	800e80e <__retarget_lock_release_recursive>
 800dc0a:	bf00      	nop
 800dc0c:	20004b0d 	.word	0x20004b0d

0800dc10 <__sfp>:
 800dc10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc12:	4607      	mov	r7, r0
 800dc14:	f7ff fff0 	bl	800dbf8 <__sfp_lock_acquire>
 800dc18:	4b23      	ldr	r3, [pc, #140]	@ (800dca8 <__sfp+0x98>)
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	b90b      	cbnz	r3, 800dc22 <__sfp+0x12>
 800dc1e:	f7ff ffcd 	bl	800dbbc <global_stdio_init.part.0>
 800dc22:	4e22      	ldr	r6, [pc, #136]	@ (800dcac <__sfp+0x9c>)
 800dc24:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800dc28:	3b01      	subs	r3, #1
 800dc2a:	d50f      	bpl.n	800dc4c <__sfp+0x3c>
 800dc2c:	6835      	ldr	r5, [r6, #0]
 800dc2e:	2d00      	cmp	r5, #0
 800dc30:	d137      	bne.n	800dca2 <__sfp+0x92>
 800dc32:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 800dc36:	4638      	mov	r0, r7
 800dc38:	f001 fcde 	bl	800f5f8 <_malloc_r>
 800dc3c:	4604      	mov	r4, r0
 800dc3e:	bb28      	cbnz	r0, 800dc8c <__sfp+0x7c>
 800dc40:	6030      	str	r0, [r6, #0]
 800dc42:	f7ff ffdf 	bl	800dc04 <__sfp_lock_release>
 800dc46:	230c      	movs	r3, #12
 800dc48:	603b      	str	r3, [r7, #0]
 800dc4a:	e01b      	b.n	800dc84 <__sfp+0x74>
 800dc4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800dc50:	b9d5      	cbnz	r5, 800dc88 <__sfp+0x78>
 800dc52:	4b17      	ldr	r3, [pc, #92]	@ (800dcb0 <__sfp+0xa0>)
 800dc54:	60e3      	str	r3, [r4, #12]
 800dc56:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800dc5a:	6665      	str	r5, [r4, #100]	@ 0x64
 800dc5c:	f000 fdd4 	bl	800e808 <__retarget_lock_init_recursive>
 800dc60:	f7ff ffd0 	bl	800dc04 <__sfp_lock_release>
 800dc64:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800dc68:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800dc6c:	6025      	str	r5, [r4, #0]
 800dc6e:	61a5      	str	r5, [r4, #24]
 800dc70:	2208      	movs	r2, #8
 800dc72:	4629      	mov	r1, r5
 800dc74:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 800dc78:	f000 fb4f 	bl	800e31a <memset>
 800dc7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 800dc80:	e9c4 5512 	strd	r5, r5, [r4, #72]	@ 0x48
 800dc84:	4620      	mov	r0, r4
 800dc86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc88:	3468      	adds	r4, #104	@ 0x68
 800dc8a:	e7cd      	b.n	800dc28 <__sfp+0x18>
 800dc8c:	2304      	movs	r3, #4
 800dc8e:	6005      	str	r5, [r0, #0]
 800dc90:	6043      	str	r3, [r0, #4]
 800dc92:	300c      	adds	r0, #12
 800dc94:	60a0      	str	r0, [r4, #8]
 800dc96:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 800dc9a:	4629      	mov	r1, r5
 800dc9c:	f000 fb3d 	bl	800e31a <memset>
 800dca0:	6034      	str	r4, [r6, #0]
 800dca2:	6836      	ldr	r6, [r6, #0]
 800dca4:	e7be      	b.n	800dc24 <__sfp+0x14>
 800dca6:	bf00      	nop
 800dca8:	20004b04 	.word	0x20004b04
 800dcac:	20000568 	.word	0x20000568
 800dcb0:	ffff0001 	.word	0xffff0001

0800dcb4 <__sinit>:
 800dcb4:	b510      	push	{r4, lr}
 800dcb6:	4604      	mov	r4, r0
 800dcb8:	f7ff ff9e 	bl	800dbf8 <__sfp_lock_acquire>
 800dcbc:	6a23      	ldr	r3, [r4, #32]
 800dcbe:	b11b      	cbz	r3, 800dcc8 <__sinit+0x14>
 800dcc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dcc4:	f7ff bf9e 	b.w	800dc04 <__sfp_lock_release>
 800dcc8:	4b04      	ldr	r3, [pc, #16]	@ (800dcdc <__sinit+0x28>)
 800dcca:	6223      	str	r3, [r4, #32]
 800dccc:	4b04      	ldr	r3, [pc, #16]	@ (800dce0 <__sinit+0x2c>)
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d1f5      	bne.n	800dcc0 <__sinit+0xc>
 800dcd4:	f7ff ff72 	bl	800dbbc <global_stdio_init.part.0>
 800dcd8:	e7f2      	b.n	800dcc0 <__sinit+0xc>
 800dcda:	bf00      	nop
 800dcdc:	0800db7d 	.word	0x0800db7d
 800dce0:	20004b04 	.word	0x20004b04

0800dce4 <_fopen_r>:
 800dce4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dce6:	460f      	mov	r7, r1
 800dce8:	4611      	mov	r1, r2
 800dcea:	aa01      	add	r2, sp, #4
 800dcec:	4606      	mov	r6, r0
 800dcee:	f003 fb09 	bl	8011304 <__sflags>
 800dcf2:	4605      	mov	r5, r0
 800dcf4:	b1b0      	cbz	r0, 800dd24 <_fopen_r+0x40>
 800dcf6:	4630      	mov	r0, r6
 800dcf8:	f7ff ff8a 	bl	800dc10 <__sfp>
 800dcfc:	4604      	mov	r4, r0
 800dcfe:	b188      	cbz	r0, 800dd24 <_fopen_r+0x40>
 800dd00:	4639      	mov	r1, r7
 800dd02:	9a01      	ldr	r2, [sp, #4]
 800dd04:	f44f 73db 	mov.w	r3, #438	@ 0x1b6
 800dd08:	4630      	mov	r0, r6
 800dd0a:	f000 fd1d 	bl	800e748 <_open_r>
 800dd0e:	1e07      	subs	r7, r0, #0
 800dd10:	da0c      	bge.n	800dd2c <_fopen_r+0x48>
 800dd12:	f7ff ff71 	bl	800dbf8 <__sfp_lock_acquire>
 800dd16:	2300      	movs	r3, #0
 800dd18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dd1a:	81a3      	strh	r3, [r4, #12]
 800dd1c:	f000 fd75 	bl	800e80a <__retarget_lock_close_recursive>
 800dd20:	f7ff ff70 	bl	800dc04 <__sfp_lock_release>
 800dd24:	2400      	movs	r4, #0
 800dd26:	4620      	mov	r0, r4
 800dd28:	b003      	add	sp, #12
 800dd2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd2c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dd2e:	07db      	lsls	r3, r3, #31
 800dd30:	d405      	bmi.n	800dd3e <_fopen_r+0x5a>
 800dd32:	89a3      	ldrh	r3, [r4, #12]
 800dd34:	0598      	lsls	r0, r3, #22
 800dd36:	d402      	bmi.n	800dd3e <_fopen_r+0x5a>
 800dd38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dd3a:	f000 fd67 	bl	800e80c <__retarget_lock_acquire_recursive>
 800dd3e:	4b0f      	ldr	r3, [pc, #60]	@ (800dd7c <_fopen_r+0x98>)
 800dd40:	6263      	str	r3, [r4, #36]	@ 0x24
 800dd42:	4b0f      	ldr	r3, [pc, #60]	@ (800dd80 <_fopen_r+0x9c>)
 800dd44:	62a3      	str	r3, [r4, #40]	@ 0x28
 800dd46:	b22d      	sxth	r5, r5
 800dd48:	4b0e      	ldr	r3, [pc, #56]	@ (800dd84 <_fopen_r+0xa0>)
 800dd4a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800dd4c:	05e9      	lsls	r1, r5, #23
 800dd4e:	4b0e      	ldr	r3, [pc, #56]	@ (800dd88 <_fopen_r+0xa4>)
 800dd50:	81e7      	strh	r7, [r4, #14]
 800dd52:	81a5      	strh	r5, [r4, #12]
 800dd54:	6224      	str	r4, [r4, #32]
 800dd56:	6323      	str	r3, [r4, #48]	@ 0x30
 800dd58:	d505      	bpl.n	800dd66 <_fopen_r+0x82>
 800dd5a:	2302      	movs	r3, #2
 800dd5c:	2200      	movs	r2, #0
 800dd5e:	4621      	mov	r1, r4
 800dd60:	4630      	mov	r0, r6
 800dd62:	f000 f82d 	bl	800ddc0 <_fseek_r>
 800dd66:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dd68:	07da      	lsls	r2, r3, #31
 800dd6a:	d4dc      	bmi.n	800dd26 <_fopen_r+0x42>
 800dd6c:	89a3      	ldrh	r3, [r4, #12]
 800dd6e:	059b      	lsls	r3, r3, #22
 800dd70:	d4d9      	bmi.n	800dd26 <_fopen_r+0x42>
 800dd72:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dd74:	f000 fd4b 	bl	800e80e <__retarget_lock_release_recursive>
 800dd78:	e7d5      	b.n	800dd26 <_fopen_r+0x42>
 800dd7a:	bf00      	nop
 800dd7c:	0800e03d 	.word	0x0800e03d
 800dd80:	0800e05f 	.word	0x0800e05f
 800dd84:	0800e097 	.word	0x0800e097
 800dd88:	0800e0bb 	.word	0x0800e0bb

0800dd8c <fopen>:
 800dd8c:	4b02      	ldr	r3, [pc, #8]	@ (800dd98 <fopen+0xc>)
 800dd8e:	460a      	mov	r2, r1
 800dd90:	4601      	mov	r1, r0
 800dd92:	6818      	ldr	r0, [r3, #0]
 800dd94:	f7ff bfa6 	b.w	800dce4 <_fopen_r>
 800dd98:	20000574 	.word	0x20000574

0800dd9c <fiprintf>:
 800dd9c:	b40e      	push	{r1, r2, r3}
 800dd9e:	b503      	push	{r0, r1, lr}
 800dda0:	4601      	mov	r1, r0
 800dda2:	ab03      	add	r3, sp, #12
 800dda4:	4805      	ldr	r0, [pc, #20]	@ (800ddbc <fiprintf+0x20>)
 800dda6:	f853 2b04 	ldr.w	r2, [r3], #4
 800ddaa:	6800      	ldr	r0, [r0, #0]
 800ddac:	9301      	str	r3, [sp, #4]
 800ddae:	f003 f967 	bl	8011080 <_vfiprintf_r>
 800ddb2:	b002      	add	sp, #8
 800ddb4:	f85d eb04 	ldr.w	lr, [sp], #4
 800ddb8:	b003      	add	sp, #12
 800ddba:	4770      	bx	lr
 800ddbc:	20000574 	.word	0x20000574

0800ddc0 <_fseek_r>:
 800ddc0:	f000 ba14 	b.w	800e1ec <_fseeko_r>

0800ddc4 <_fwalk_sglue>:
 800ddc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ddc8:	4607      	mov	r7, r0
 800ddca:	4688      	mov	r8, r1
 800ddcc:	4614      	mov	r4, r2
 800ddce:	2600      	movs	r6, #0
 800ddd0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ddd4:	f1b9 0901 	subs.w	r9, r9, #1
 800ddd8:	d505      	bpl.n	800dde6 <_fwalk_sglue+0x22>
 800ddda:	6824      	ldr	r4, [r4, #0]
 800dddc:	2c00      	cmp	r4, #0
 800ddde:	d1f7      	bne.n	800ddd0 <_fwalk_sglue+0xc>
 800dde0:	4630      	mov	r0, r6
 800dde2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dde6:	89ab      	ldrh	r3, [r5, #12]
 800dde8:	2b01      	cmp	r3, #1
 800ddea:	d907      	bls.n	800ddfc <_fwalk_sglue+0x38>
 800ddec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ddf0:	3301      	adds	r3, #1
 800ddf2:	d003      	beq.n	800ddfc <_fwalk_sglue+0x38>
 800ddf4:	4629      	mov	r1, r5
 800ddf6:	4638      	mov	r0, r7
 800ddf8:	47c0      	blx	r8
 800ddfa:	4306      	orrs	r6, r0
 800ddfc:	3568      	adds	r5, #104	@ 0x68
 800ddfe:	e7e9      	b.n	800ddd4 <_fwalk_sglue+0x10>

0800de00 <_perror_r>:
 800de00:	6a03      	ldr	r3, [r0, #32]
 800de02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800de04:	68c4      	ldr	r4, [r0, #12]
 800de06:	4605      	mov	r5, r0
 800de08:	460e      	mov	r6, r1
 800de0a:	b90b      	cbnz	r3, 800de10 <_perror_r+0x10>
 800de0c:	f7ff ff52 	bl	800dcb4 <__sinit>
 800de10:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800de12:	07d8      	lsls	r0, r3, #31
 800de14:	d405      	bmi.n	800de22 <_perror_r+0x22>
 800de16:	89a3      	ldrh	r3, [r4, #12]
 800de18:	0599      	lsls	r1, r3, #22
 800de1a:	d402      	bmi.n	800de22 <_perror_r+0x22>
 800de1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800de1e:	f000 fcf5 	bl	800e80c <__retarget_lock_acquire_recursive>
 800de22:	4621      	mov	r1, r4
 800de24:	4628      	mov	r0, r5
 800de26:	f7ff fe3f 	bl	800daa8 <_fflush_r>
 800de2a:	bb1e      	cbnz	r6, 800de74 <_perror_r+0x74>
 800de2c:	6829      	ldr	r1, [r5, #0]
 800de2e:	ab01      	add	r3, sp, #4
 800de30:	2201      	movs	r2, #1
 800de32:	4628      	mov	r0, r5
 800de34:	f000 fa7a 	bl	800e32c <_strerror_r>
 800de38:	4607      	mov	r7, r0
 800de3a:	2800      	cmp	r0, #0
 800de3c:	d145      	bne.n	800deca <_perror_r+0xca>
 800de3e:	4831      	ldr	r0, [pc, #196]	@ (800df04 <_perror_r+0x104>)
 800de40:	4f30      	ldr	r7, [pc, #192]	@ (800df04 <_perror_r+0x104>)
 800de42:	f7f2 fa15 	bl	8000270 <strlen>
 800de46:	4606      	mov	r6, r0
 800de48:	b156      	cbz	r6, 800de60 <_perror_r+0x60>
 800de4a:	4620      	mov	r0, r4
 800de4c:	f003 fa30 	bl	80112b0 <fileno>
 800de50:	4633      	mov	r3, r6
 800de52:	4601      	mov	r1, r0
 800de54:	463a      	mov	r2, r7
 800de56:	4628      	mov	r0, r5
 800de58:	f000 fc9a 	bl	800e790 <_write_r>
 800de5c:	2800      	cmp	r0, #0
 800de5e:	da47      	bge.n	800def0 <_perror_r+0xf0>
 800de60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de64:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800de68:	81a2      	strh	r2, [r4, #12]
 800de6a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800de6c:	07d2      	lsls	r2, r2, #31
 800de6e:	d542      	bpl.n	800def6 <_perror_r+0xf6>
 800de70:	b003      	add	sp, #12
 800de72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de74:	7833      	ldrb	r3, [r6, #0]
 800de76:	2b00      	cmp	r3, #0
 800de78:	d0d8      	beq.n	800de2c <_perror_r+0x2c>
 800de7a:	4630      	mov	r0, r6
 800de7c:	f7f2 f9f8 	bl	8000270 <strlen>
 800de80:	4607      	mov	r7, r0
 800de82:	b157      	cbz	r7, 800de9a <_perror_r+0x9a>
 800de84:	4620      	mov	r0, r4
 800de86:	f003 fa13 	bl	80112b0 <fileno>
 800de8a:	463b      	mov	r3, r7
 800de8c:	4601      	mov	r1, r0
 800de8e:	4632      	mov	r2, r6
 800de90:	4628      	mov	r0, r5
 800de92:	f000 fc7d 	bl	800e790 <_write_r>
 800de96:	2800      	cmp	r0, #0
 800de98:	da14      	bge.n	800dec4 <_perror_r+0xc4>
 800de9a:	481b      	ldr	r0, [pc, #108]	@ (800df08 <_perror_r+0x108>)
 800de9c:	4f1a      	ldr	r7, [pc, #104]	@ (800df08 <_perror_r+0x108>)
 800de9e:	f7f2 f9e7 	bl	8000270 <strlen>
 800dea2:	4606      	mov	r6, r0
 800dea4:	2e00      	cmp	r6, #0
 800dea6:	d0c1      	beq.n	800de2c <_perror_r+0x2c>
 800dea8:	4620      	mov	r0, r4
 800deaa:	f003 fa01 	bl	80112b0 <fileno>
 800deae:	4633      	mov	r3, r6
 800deb0:	4601      	mov	r1, r0
 800deb2:	463a      	mov	r2, r7
 800deb4:	4628      	mov	r0, r5
 800deb6:	f000 fc6b 	bl	800e790 <_write_r>
 800deba:	2800      	cmp	r0, #0
 800debc:	dbb6      	blt.n	800de2c <_perror_r+0x2c>
 800debe:	1a36      	subs	r6, r6, r0
 800dec0:	4407      	add	r7, r0
 800dec2:	e7ef      	b.n	800dea4 <_perror_r+0xa4>
 800dec4:	1a3f      	subs	r7, r7, r0
 800dec6:	4406      	add	r6, r0
 800dec8:	e7db      	b.n	800de82 <_perror_r+0x82>
 800deca:	f7f2 f9d1 	bl	8000270 <strlen>
 800dece:	4606      	mov	r6, r0
 800ded0:	2e00      	cmp	r6, #0
 800ded2:	d0b4      	beq.n	800de3e <_perror_r+0x3e>
 800ded4:	4620      	mov	r0, r4
 800ded6:	f003 f9eb 	bl	80112b0 <fileno>
 800deda:	4633      	mov	r3, r6
 800dedc:	4601      	mov	r1, r0
 800dede:	463a      	mov	r2, r7
 800dee0:	4628      	mov	r0, r5
 800dee2:	f000 fc55 	bl	800e790 <_write_r>
 800dee6:	2800      	cmp	r0, #0
 800dee8:	dba9      	blt.n	800de3e <_perror_r+0x3e>
 800deea:	1a36      	subs	r6, r6, r0
 800deec:	4407      	add	r7, r0
 800deee:	e7ef      	b.n	800ded0 <_perror_r+0xd0>
 800def0:	1a36      	subs	r6, r6, r0
 800def2:	4407      	add	r7, r0
 800def4:	e7a8      	b.n	800de48 <_perror_r+0x48>
 800def6:	059b      	lsls	r3, r3, #22
 800def8:	d4ba      	bmi.n	800de70 <_perror_r+0x70>
 800defa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800defc:	f000 fc87 	bl	800e80e <__retarget_lock_release_recursive>
 800df00:	e7b6      	b.n	800de70 <_perror_r+0x70>
 800df02:	bf00      	nop
 800df04:	08012e60 	.word	0x08012e60
 800df08:	08012e30 	.word	0x08012e30

0800df0c <perror>:
 800df0c:	4b02      	ldr	r3, [pc, #8]	@ (800df18 <perror+0xc>)
 800df0e:	4601      	mov	r1, r0
 800df10:	6818      	ldr	r0, [r3, #0]
 800df12:	f7ff bf75 	b.w	800de00 <_perror_r>
 800df16:	bf00      	nop
 800df18:	20000574 	.word	0x20000574

0800df1c <iprintf>:
 800df1c:	b40f      	push	{r0, r1, r2, r3}
 800df1e:	b507      	push	{r0, r1, r2, lr}
 800df20:	4906      	ldr	r1, [pc, #24]	@ (800df3c <iprintf+0x20>)
 800df22:	ab04      	add	r3, sp, #16
 800df24:	6808      	ldr	r0, [r1, #0]
 800df26:	f853 2b04 	ldr.w	r2, [r3], #4
 800df2a:	6881      	ldr	r1, [r0, #8]
 800df2c:	9301      	str	r3, [sp, #4]
 800df2e:	f003 f8a7 	bl	8011080 <_vfiprintf_r>
 800df32:	b003      	add	sp, #12
 800df34:	f85d eb04 	ldr.w	lr, [sp], #4
 800df38:	b004      	add	sp, #16
 800df3a:	4770      	bx	lr
 800df3c:	20000574 	.word	0x20000574

0800df40 <_puts_r>:
 800df40:	6a03      	ldr	r3, [r0, #32]
 800df42:	b570      	push	{r4, r5, r6, lr}
 800df44:	6884      	ldr	r4, [r0, #8]
 800df46:	4605      	mov	r5, r0
 800df48:	460e      	mov	r6, r1
 800df4a:	b90b      	cbnz	r3, 800df50 <_puts_r+0x10>
 800df4c:	f7ff feb2 	bl	800dcb4 <__sinit>
 800df50:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800df52:	07db      	lsls	r3, r3, #31
 800df54:	d405      	bmi.n	800df62 <_puts_r+0x22>
 800df56:	89a3      	ldrh	r3, [r4, #12]
 800df58:	0598      	lsls	r0, r3, #22
 800df5a:	d402      	bmi.n	800df62 <_puts_r+0x22>
 800df5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800df5e:	f000 fc55 	bl	800e80c <__retarget_lock_acquire_recursive>
 800df62:	89a3      	ldrh	r3, [r4, #12]
 800df64:	0719      	lsls	r1, r3, #28
 800df66:	d502      	bpl.n	800df6e <_puts_r+0x2e>
 800df68:	6923      	ldr	r3, [r4, #16]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d135      	bne.n	800dfda <_puts_r+0x9a>
 800df6e:	4621      	mov	r1, r4
 800df70:	4628      	mov	r0, r5
 800df72:	f000 f8e5 	bl	800e140 <__swsetup_r>
 800df76:	b380      	cbz	r0, 800dfda <_puts_r+0x9a>
 800df78:	f04f 35ff 	mov.w	r5, #4294967295
 800df7c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800df7e:	07da      	lsls	r2, r3, #31
 800df80:	d405      	bmi.n	800df8e <_puts_r+0x4e>
 800df82:	89a3      	ldrh	r3, [r4, #12]
 800df84:	059b      	lsls	r3, r3, #22
 800df86:	d402      	bmi.n	800df8e <_puts_r+0x4e>
 800df88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800df8a:	f000 fc40 	bl	800e80e <__retarget_lock_release_recursive>
 800df8e:	4628      	mov	r0, r5
 800df90:	bd70      	pop	{r4, r5, r6, pc}
 800df92:	2b00      	cmp	r3, #0
 800df94:	da04      	bge.n	800dfa0 <_puts_r+0x60>
 800df96:	69a2      	ldr	r2, [r4, #24]
 800df98:	429a      	cmp	r2, r3
 800df9a:	dc17      	bgt.n	800dfcc <_puts_r+0x8c>
 800df9c:	290a      	cmp	r1, #10
 800df9e:	d015      	beq.n	800dfcc <_puts_r+0x8c>
 800dfa0:	6823      	ldr	r3, [r4, #0]
 800dfa2:	1c5a      	adds	r2, r3, #1
 800dfa4:	6022      	str	r2, [r4, #0]
 800dfa6:	7019      	strb	r1, [r3, #0]
 800dfa8:	68a3      	ldr	r3, [r4, #8]
 800dfaa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800dfae:	3b01      	subs	r3, #1
 800dfb0:	60a3      	str	r3, [r4, #8]
 800dfb2:	2900      	cmp	r1, #0
 800dfb4:	d1ed      	bne.n	800df92 <_puts_r+0x52>
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	da11      	bge.n	800dfde <_puts_r+0x9e>
 800dfba:	4622      	mov	r2, r4
 800dfbc:	210a      	movs	r1, #10
 800dfbe:	4628      	mov	r0, r5
 800dfc0:	f000 f87f 	bl	800e0c2 <__swbuf_r>
 800dfc4:	3001      	adds	r0, #1
 800dfc6:	d0d7      	beq.n	800df78 <_puts_r+0x38>
 800dfc8:	250a      	movs	r5, #10
 800dfca:	e7d7      	b.n	800df7c <_puts_r+0x3c>
 800dfcc:	4622      	mov	r2, r4
 800dfce:	4628      	mov	r0, r5
 800dfd0:	f000 f877 	bl	800e0c2 <__swbuf_r>
 800dfd4:	3001      	adds	r0, #1
 800dfd6:	d1e7      	bne.n	800dfa8 <_puts_r+0x68>
 800dfd8:	e7ce      	b.n	800df78 <_puts_r+0x38>
 800dfda:	3e01      	subs	r6, #1
 800dfdc:	e7e4      	b.n	800dfa8 <_puts_r+0x68>
 800dfde:	6823      	ldr	r3, [r4, #0]
 800dfe0:	1c5a      	adds	r2, r3, #1
 800dfe2:	6022      	str	r2, [r4, #0]
 800dfe4:	220a      	movs	r2, #10
 800dfe6:	701a      	strb	r2, [r3, #0]
 800dfe8:	e7ee      	b.n	800dfc8 <_puts_r+0x88>
	...

0800dfec <puts>:
 800dfec:	4b02      	ldr	r3, [pc, #8]	@ (800dff8 <puts+0xc>)
 800dfee:	4601      	mov	r1, r0
 800dff0:	6818      	ldr	r0, [r3, #0]
 800dff2:	f7ff bfa5 	b.w	800df40 <_puts_r>
 800dff6:	bf00      	nop
 800dff8:	20000574 	.word	0x20000574

0800dffc <siprintf>:
 800dffc:	b40e      	push	{r1, r2, r3}
 800dffe:	b500      	push	{lr}
 800e000:	b09c      	sub	sp, #112	@ 0x70
 800e002:	ab1d      	add	r3, sp, #116	@ 0x74
 800e004:	9002      	str	r0, [sp, #8]
 800e006:	9006      	str	r0, [sp, #24]
 800e008:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e00c:	4809      	ldr	r0, [pc, #36]	@ (800e034 <siprintf+0x38>)
 800e00e:	9107      	str	r1, [sp, #28]
 800e010:	9104      	str	r1, [sp, #16]
 800e012:	4909      	ldr	r1, [pc, #36]	@ (800e038 <siprintf+0x3c>)
 800e014:	f853 2b04 	ldr.w	r2, [r3], #4
 800e018:	9105      	str	r1, [sp, #20]
 800e01a:	6800      	ldr	r0, [r0, #0]
 800e01c:	9301      	str	r3, [sp, #4]
 800e01e:	a902      	add	r1, sp, #8
 800e020:	f002 ff08 	bl	8010e34 <_svfiprintf_r>
 800e024:	9b02      	ldr	r3, [sp, #8]
 800e026:	2200      	movs	r2, #0
 800e028:	701a      	strb	r2, [r3, #0]
 800e02a:	b01c      	add	sp, #112	@ 0x70
 800e02c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e030:	b003      	add	sp, #12
 800e032:	4770      	bx	lr
 800e034:	20000574 	.word	0x20000574
 800e038:	ffff0208 	.word	0xffff0208

0800e03c <__sread>:
 800e03c:	b510      	push	{r4, lr}
 800e03e:	460c      	mov	r4, r1
 800e040:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e044:	f000 fb92 	bl	800e76c <_read_r>
 800e048:	2800      	cmp	r0, #0
 800e04a:	bfab      	itete	ge
 800e04c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e04e:	89a3      	ldrhlt	r3, [r4, #12]
 800e050:	181b      	addge	r3, r3, r0
 800e052:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e056:	bfac      	ite	ge
 800e058:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e05a:	81a3      	strhlt	r3, [r4, #12]
 800e05c:	bd10      	pop	{r4, pc}

0800e05e <__swrite>:
 800e05e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e062:	461f      	mov	r7, r3
 800e064:	898b      	ldrh	r3, [r1, #12]
 800e066:	05db      	lsls	r3, r3, #23
 800e068:	4605      	mov	r5, r0
 800e06a:	460c      	mov	r4, r1
 800e06c:	4616      	mov	r6, r2
 800e06e:	d505      	bpl.n	800e07c <__swrite+0x1e>
 800e070:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e074:	2302      	movs	r3, #2
 800e076:	2200      	movs	r2, #0
 800e078:	f000 fb54 	bl	800e724 <_lseek_r>
 800e07c:	89a3      	ldrh	r3, [r4, #12]
 800e07e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e082:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e086:	81a3      	strh	r3, [r4, #12]
 800e088:	4632      	mov	r2, r6
 800e08a:	463b      	mov	r3, r7
 800e08c:	4628      	mov	r0, r5
 800e08e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e092:	f000 bb7d 	b.w	800e790 <_write_r>

0800e096 <__sseek>:
 800e096:	b510      	push	{r4, lr}
 800e098:	460c      	mov	r4, r1
 800e09a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e09e:	f000 fb41 	bl	800e724 <_lseek_r>
 800e0a2:	1c43      	adds	r3, r0, #1
 800e0a4:	89a3      	ldrh	r3, [r4, #12]
 800e0a6:	bf15      	itete	ne
 800e0a8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e0aa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e0ae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e0b2:	81a3      	strheq	r3, [r4, #12]
 800e0b4:	bf18      	it	ne
 800e0b6:	81a3      	strhne	r3, [r4, #12]
 800e0b8:	bd10      	pop	{r4, pc}

0800e0ba <__sclose>:
 800e0ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0be:	f000 bb21 	b.w	800e704 <_close_r>

0800e0c2 <__swbuf_r>:
 800e0c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0c4:	460e      	mov	r6, r1
 800e0c6:	4614      	mov	r4, r2
 800e0c8:	4605      	mov	r5, r0
 800e0ca:	b118      	cbz	r0, 800e0d4 <__swbuf_r+0x12>
 800e0cc:	6a03      	ldr	r3, [r0, #32]
 800e0ce:	b90b      	cbnz	r3, 800e0d4 <__swbuf_r+0x12>
 800e0d0:	f7ff fdf0 	bl	800dcb4 <__sinit>
 800e0d4:	69a3      	ldr	r3, [r4, #24]
 800e0d6:	60a3      	str	r3, [r4, #8]
 800e0d8:	89a3      	ldrh	r3, [r4, #12]
 800e0da:	071a      	lsls	r2, r3, #28
 800e0dc:	d501      	bpl.n	800e0e2 <__swbuf_r+0x20>
 800e0de:	6923      	ldr	r3, [r4, #16]
 800e0e0:	b943      	cbnz	r3, 800e0f4 <__swbuf_r+0x32>
 800e0e2:	4621      	mov	r1, r4
 800e0e4:	4628      	mov	r0, r5
 800e0e6:	f000 f82b 	bl	800e140 <__swsetup_r>
 800e0ea:	b118      	cbz	r0, 800e0f4 <__swbuf_r+0x32>
 800e0ec:	f04f 37ff 	mov.w	r7, #4294967295
 800e0f0:	4638      	mov	r0, r7
 800e0f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e0f4:	6823      	ldr	r3, [r4, #0]
 800e0f6:	6922      	ldr	r2, [r4, #16]
 800e0f8:	1a98      	subs	r0, r3, r2
 800e0fa:	6963      	ldr	r3, [r4, #20]
 800e0fc:	b2f6      	uxtb	r6, r6
 800e0fe:	4283      	cmp	r3, r0
 800e100:	4637      	mov	r7, r6
 800e102:	dc05      	bgt.n	800e110 <__swbuf_r+0x4e>
 800e104:	4621      	mov	r1, r4
 800e106:	4628      	mov	r0, r5
 800e108:	f7ff fcce 	bl	800daa8 <_fflush_r>
 800e10c:	2800      	cmp	r0, #0
 800e10e:	d1ed      	bne.n	800e0ec <__swbuf_r+0x2a>
 800e110:	68a3      	ldr	r3, [r4, #8]
 800e112:	3b01      	subs	r3, #1
 800e114:	60a3      	str	r3, [r4, #8]
 800e116:	6823      	ldr	r3, [r4, #0]
 800e118:	1c5a      	adds	r2, r3, #1
 800e11a:	6022      	str	r2, [r4, #0]
 800e11c:	701e      	strb	r6, [r3, #0]
 800e11e:	6962      	ldr	r2, [r4, #20]
 800e120:	1c43      	adds	r3, r0, #1
 800e122:	429a      	cmp	r2, r3
 800e124:	d004      	beq.n	800e130 <__swbuf_r+0x6e>
 800e126:	89a3      	ldrh	r3, [r4, #12]
 800e128:	07db      	lsls	r3, r3, #31
 800e12a:	d5e1      	bpl.n	800e0f0 <__swbuf_r+0x2e>
 800e12c:	2e0a      	cmp	r6, #10
 800e12e:	d1df      	bne.n	800e0f0 <__swbuf_r+0x2e>
 800e130:	4621      	mov	r1, r4
 800e132:	4628      	mov	r0, r5
 800e134:	f7ff fcb8 	bl	800daa8 <_fflush_r>
 800e138:	2800      	cmp	r0, #0
 800e13a:	d0d9      	beq.n	800e0f0 <__swbuf_r+0x2e>
 800e13c:	e7d6      	b.n	800e0ec <__swbuf_r+0x2a>
	...

0800e140 <__swsetup_r>:
 800e140:	b538      	push	{r3, r4, r5, lr}
 800e142:	4b29      	ldr	r3, [pc, #164]	@ (800e1e8 <__swsetup_r+0xa8>)
 800e144:	4605      	mov	r5, r0
 800e146:	6818      	ldr	r0, [r3, #0]
 800e148:	460c      	mov	r4, r1
 800e14a:	b118      	cbz	r0, 800e154 <__swsetup_r+0x14>
 800e14c:	6a03      	ldr	r3, [r0, #32]
 800e14e:	b90b      	cbnz	r3, 800e154 <__swsetup_r+0x14>
 800e150:	f7ff fdb0 	bl	800dcb4 <__sinit>
 800e154:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e158:	0719      	lsls	r1, r3, #28
 800e15a:	d422      	bmi.n	800e1a2 <__swsetup_r+0x62>
 800e15c:	06da      	lsls	r2, r3, #27
 800e15e:	d407      	bmi.n	800e170 <__swsetup_r+0x30>
 800e160:	2209      	movs	r2, #9
 800e162:	602a      	str	r2, [r5, #0]
 800e164:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e168:	81a3      	strh	r3, [r4, #12]
 800e16a:	f04f 30ff 	mov.w	r0, #4294967295
 800e16e:	e033      	b.n	800e1d8 <__swsetup_r+0x98>
 800e170:	0758      	lsls	r0, r3, #29
 800e172:	d512      	bpl.n	800e19a <__swsetup_r+0x5a>
 800e174:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e176:	b141      	cbz	r1, 800e18a <__swsetup_r+0x4a>
 800e178:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e17c:	4299      	cmp	r1, r3
 800e17e:	d002      	beq.n	800e186 <__swsetup_r+0x46>
 800e180:	4628      	mov	r0, r5
 800e182:	f001 f9c5 	bl	800f510 <_free_r>
 800e186:	2300      	movs	r3, #0
 800e188:	6363      	str	r3, [r4, #52]	@ 0x34
 800e18a:	89a3      	ldrh	r3, [r4, #12]
 800e18c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e190:	81a3      	strh	r3, [r4, #12]
 800e192:	2300      	movs	r3, #0
 800e194:	6063      	str	r3, [r4, #4]
 800e196:	6923      	ldr	r3, [r4, #16]
 800e198:	6023      	str	r3, [r4, #0]
 800e19a:	89a3      	ldrh	r3, [r4, #12]
 800e19c:	f043 0308 	orr.w	r3, r3, #8
 800e1a0:	81a3      	strh	r3, [r4, #12]
 800e1a2:	6923      	ldr	r3, [r4, #16]
 800e1a4:	b94b      	cbnz	r3, 800e1ba <__swsetup_r+0x7a>
 800e1a6:	89a3      	ldrh	r3, [r4, #12]
 800e1a8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e1ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e1b0:	d003      	beq.n	800e1ba <__swsetup_r+0x7a>
 800e1b2:	4621      	mov	r1, r4
 800e1b4:	4628      	mov	r0, r5
 800e1b6:	f003 f901 	bl	80113bc <__smakebuf_r>
 800e1ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e1be:	f013 0201 	ands.w	r2, r3, #1
 800e1c2:	d00a      	beq.n	800e1da <__swsetup_r+0x9a>
 800e1c4:	2200      	movs	r2, #0
 800e1c6:	60a2      	str	r2, [r4, #8]
 800e1c8:	6962      	ldr	r2, [r4, #20]
 800e1ca:	4252      	negs	r2, r2
 800e1cc:	61a2      	str	r2, [r4, #24]
 800e1ce:	6922      	ldr	r2, [r4, #16]
 800e1d0:	b942      	cbnz	r2, 800e1e4 <__swsetup_r+0xa4>
 800e1d2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e1d6:	d1c5      	bne.n	800e164 <__swsetup_r+0x24>
 800e1d8:	bd38      	pop	{r3, r4, r5, pc}
 800e1da:	0799      	lsls	r1, r3, #30
 800e1dc:	bf58      	it	pl
 800e1de:	6962      	ldrpl	r2, [r4, #20]
 800e1e0:	60a2      	str	r2, [r4, #8]
 800e1e2:	e7f4      	b.n	800e1ce <__swsetup_r+0x8e>
 800e1e4:	2000      	movs	r0, #0
 800e1e6:	e7f7      	b.n	800e1d8 <__swsetup_r+0x98>
 800e1e8:	20000574 	.word	0x20000574

0800e1ec <_fseeko_r>:
 800e1ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e1f0:	460c      	mov	r4, r1
 800e1f2:	4690      	mov	r8, r2
 800e1f4:	461e      	mov	r6, r3
 800e1f6:	4605      	mov	r5, r0
 800e1f8:	b118      	cbz	r0, 800e202 <_fseeko_r+0x16>
 800e1fa:	6a03      	ldr	r3, [r0, #32]
 800e1fc:	b90b      	cbnz	r3, 800e202 <_fseeko_r+0x16>
 800e1fe:	f7ff fd59 	bl	800dcb4 <__sinit>
 800e202:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e204:	07d9      	lsls	r1, r3, #31
 800e206:	d405      	bmi.n	800e214 <_fseeko_r+0x28>
 800e208:	89a3      	ldrh	r3, [r4, #12]
 800e20a:	059a      	lsls	r2, r3, #22
 800e20c:	d402      	bmi.n	800e214 <_fseeko_r+0x28>
 800e20e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e210:	f000 fafc 	bl	800e80c <__retarget_lock_acquire_recursive>
 800e214:	89a3      	ldrh	r3, [r4, #12]
 800e216:	f403 7384 	and.w	r3, r3, #264	@ 0x108
 800e21a:	f5b3 7f84 	cmp.w	r3, #264	@ 0x108
 800e21e:	d103      	bne.n	800e228 <_fseeko_r+0x3c>
 800e220:	4621      	mov	r1, r4
 800e222:	4628      	mov	r0, r5
 800e224:	f7ff fc40 	bl	800daa8 <_fflush_r>
 800e228:	f8d4 902c 	ldr.w	r9, [r4, #44]	@ 0x2c
 800e22c:	f1b9 0f00 	cmp.w	r9, #0
 800e230:	d102      	bne.n	800e238 <_fseeko_r+0x4c>
 800e232:	231d      	movs	r3, #29
 800e234:	602b      	str	r3, [r5, #0]
 800e236:	e058      	b.n	800e2ea <_fseeko_r+0xfe>
 800e238:	2e01      	cmp	r6, #1
 800e23a:	d03a      	beq.n	800e2b2 <_fseeko_r+0xc6>
 800e23c:	f036 0302 	bics.w	r3, r6, #2
 800e240:	d162      	bne.n	800e308 <_fseeko_r+0x11c>
 800e242:	6923      	ldr	r3, [r4, #16]
 800e244:	b91b      	cbnz	r3, 800e24e <_fseeko_r+0x62>
 800e246:	4621      	mov	r1, r4
 800e248:	4628      	mov	r0, r5
 800e24a:	f003 f8b7 	bl	80113bc <__smakebuf_r>
 800e24e:	4621      	mov	r1, r4
 800e250:	4628      	mov	r0, r5
 800e252:	f7ff fc29 	bl	800daa8 <_fflush_r>
 800e256:	4607      	mov	r7, r0
 800e258:	2800      	cmp	r0, #0
 800e25a:	d146      	bne.n	800e2ea <_fseeko_r+0xfe>
 800e25c:	6a21      	ldr	r1, [r4, #32]
 800e25e:	4633      	mov	r3, r6
 800e260:	4642      	mov	r2, r8
 800e262:	4628      	mov	r0, r5
 800e264:	47c8      	blx	r9
 800e266:	3001      	adds	r0, #1
 800e268:	d03f      	beq.n	800e2ea <_fseeko_r+0xfe>
 800e26a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e26c:	b141      	cbz	r1, 800e280 <_fseeko_r+0x94>
 800e26e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e272:	4299      	cmp	r1, r3
 800e274:	d002      	beq.n	800e27c <_fseeko_r+0x90>
 800e276:	4628      	mov	r0, r5
 800e278:	f001 f94a 	bl	800f510 <_free_r>
 800e27c:	2300      	movs	r3, #0
 800e27e:	6363      	str	r3, [r4, #52]	@ 0x34
 800e280:	6923      	ldr	r3, [r4, #16]
 800e282:	6023      	str	r3, [r4, #0]
 800e284:	89a3      	ldrh	r3, [r4, #12]
 800e286:	2100      	movs	r1, #0
 800e288:	f423 6302 	bic.w	r3, r3, #2080	@ 0x820
 800e28c:	81a3      	strh	r3, [r4, #12]
 800e28e:	2208      	movs	r2, #8
 800e290:	6061      	str	r1, [r4, #4]
 800e292:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 800e296:	f000 f840 	bl	800e31a <memset>
 800e29a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e29c:	07da      	lsls	r2, r3, #31
 800e29e:	d405      	bmi.n	800e2ac <_fseeko_r+0xc0>
 800e2a0:	89a3      	ldrh	r3, [r4, #12]
 800e2a2:	059b      	lsls	r3, r3, #22
 800e2a4:	d402      	bmi.n	800e2ac <_fseeko_r+0xc0>
 800e2a6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e2a8:	f000 fab1 	bl	800e80e <__retarget_lock_release_recursive>
 800e2ac:	4638      	mov	r0, r7
 800e2ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e2b2:	4621      	mov	r1, r4
 800e2b4:	4628      	mov	r0, r5
 800e2b6:	f7ff fbf7 	bl	800daa8 <_fflush_r>
 800e2ba:	89a2      	ldrh	r2, [r4, #12]
 800e2bc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e2c0:	d00d      	beq.n	800e2de <_fseeko_r+0xf2>
 800e2c2:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 800e2c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e2c8:	075f      	lsls	r7, r3, #29
 800e2ca:	d514      	bpl.n	800e2f6 <_fseeko_r+0x10a>
 800e2cc:	6863      	ldr	r3, [r4, #4]
 800e2ce:	1ac0      	subs	r0, r0, r3
 800e2d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e2d2:	b10b      	cbz	r3, 800e2d8 <_fseeko_r+0xec>
 800e2d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e2d6:	1ac0      	subs	r0, r0, r3
 800e2d8:	4480      	add	r8, r0
 800e2da:	2600      	movs	r6, #0
 800e2dc:	e7b1      	b.n	800e242 <_fseeko_r+0x56>
 800e2de:	4633      	mov	r3, r6
 800e2e0:	6a21      	ldr	r1, [r4, #32]
 800e2e2:	4628      	mov	r0, r5
 800e2e4:	47c8      	blx	r9
 800e2e6:	1c43      	adds	r3, r0, #1
 800e2e8:	d1ec      	bne.n	800e2c4 <_fseeko_r+0xd8>
 800e2ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e2ec:	07d8      	lsls	r0, r3, #31
 800e2ee:	d50d      	bpl.n	800e30c <_fseeko_r+0x120>
 800e2f0:	f04f 37ff 	mov.w	r7, #4294967295
 800e2f4:	e7da      	b.n	800e2ac <_fseeko_r+0xc0>
 800e2f6:	071e      	lsls	r6, r3, #28
 800e2f8:	d5ee      	bpl.n	800e2d8 <_fseeko_r+0xec>
 800e2fa:	6823      	ldr	r3, [r4, #0]
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d0eb      	beq.n	800e2d8 <_fseeko_r+0xec>
 800e300:	6922      	ldr	r2, [r4, #16]
 800e302:	1a9b      	subs	r3, r3, r2
 800e304:	4418      	add	r0, r3
 800e306:	e7e7      	b.n	800e2d8 <_fseeko_r+0xec>
 800e308:	2316      	movs	r3, #22
 800e30a:	e793      	b.n	800e234 <_fseeko_r+0x48>
 800e30c:	89a3      	ldrh	r3, [r4, #12]
 800e30e:	0599      	lsls	r1, r3, #22
 800e310:	d4ee      	bmi.n	800e2f0 <_fseeko_r+0x104>
 800e312:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e314:	f000 fa7b 	bl	800e80e <__retarget_lock_release_recursive>
 800e318:	e7ea      	b.n	800e2f0 <_fseeko_r+0x104>

0800e31a <memset>:
 800e31a:	4402      	add	r2, r0
 800e31c:	4603      	mov	r3, r0
 800e31e:	4293      	cmp	r3, r2
 800e320:	d100      	bne.n	800e324 <memset+0xa>
 800e322:	4770      	bx	lr
 800e324:	f803 1b01 	strb.w	r1, [r3], #1
 800e328:	e7f9      	b.n	800e31e <memset+0x4>
	...

0800e32c <_strerror_r>:
 800e32c:	b510      	push	{r4, lr}
 800e32e:	4604      	mov	r4, r0
 800e330:	4608      	mov	r0, r1
 800e332:	4611      	mov	r1, r2
 800e334:	461a      	mov	r2, r3
 800e336:	288e      	cmp	r0, #142	@ 0x8e
 800e338:	f200 8130 	bhi.w	800e59c <_strerror_r+0x270>
 800e33c:	e8df f010 	tbh	[pc, r0, lsl #1]
 800e340:	0138008f 	.word	0x0138008f
 800e344:	00940092 	.word	0x00940092
 800e348:	00980096 	.word	0x00980096
 800e34c:	009c009a 	.word	0x009c009a
 800e350:	00a2009e 	.word	0x00a2009e
 800e354:	00a800a4 	.word	0x00a800a4
 800e358:	00ac00aa 	.word	0x00ac00aa
 800e35c:	012e00ae 	.word	0x012e00ae
 800e360:	00b200b0 	.word	0x00b200b0
 800e364:	00b600b4 	.word	0x00b600b4
 800e368:	00be00b8 	.word	0x00be00b8
 800e36c:	00c600c0 	.word	0x00c600c0
 800e370:	00ca00c8 	.word	0x00ca00c8
 800e374:	00ce00cc 	.word	0x00ce00cc
 800e378:	00d600d2 	.word	0x00d600d2
 800e37c:	00da00d8 	.word	0x00da00d8
 800e380:	00de00dc 	.word	0x00de00dc
 800e384:	00e200e0 	.word	0x00e200e0
 800e388:	012e00e4 	.word	0x012e00e4
 800e38c:	012e012e 	.word	0x012e012e
 800e390:	012e012e 	.word	0x012e012e
 800e394:	012e012e 	.word	0x012e012e
 800e398:	00e8012e 	.word	0x00e8012e
 800e39c:	012e00ec 	.word	0x012e00ec
 800e3a0:	012e012e 	.word	0x012e012e
 800e3a4:	012e012e 	.word	0x012e012e
 800e3a8:	012e012e 	.word	0x012e012e
 800e3ac:	012e012e 	.word	0x012e012e
 800e3b0:	012e012e 	.word	0x012e012e
 800e3b4:	012e012e 	.word	0x012e012e
 800e3b8:	010800ee 	.word	0x010800ee
 800e3bc:	00f200f0 	.word	0x00f200f0
 800e3c0:	012e012e 	.word	0x012e012e
 800e3c4:	00f4012e 	.word	0x00f4012e
 800e3c8:	012e012e 	.word	0x012e012e
 800e3cc:	00f6012e 	.word	0x00f6012e
 800e3d0:	012e012e 	.word	0x012e012e
 800e3d4:	012e00fa 	.word	0x012e00fa
 800e3d8:	00fc012e 	.word	0x00fc012e
 800e3dc:	012e012e 	.word	0x012e012e
 800e3e0:	012e012e 	.word	0x012e012e
 800e3e4:	012e012e 	.word	0x012e012e
 800e3e8:	012e012e 	.word	0x012e012e
 800e3ec:	012e012e 	.word	0x012e012e
 800e3f0:	012e00fe 	.word	0x012e00fe
 800e3f4:	01020100 	.word	0x01020100
 800e3f8:	012e0104 	.word	0x012e0104
 800e3fc:	0126012e 	.word	0x0126012e
 800e400:	012e012e 	.word	0x012e012e
 800e404:	012e012e 	.word	0x012e012e
 800e408:	012e012e 	.word	0x012e012e
 800e40c:	012e012e 	.word	0x012e012e
 800e410:	01060114 	.word	0x01060114
 800e414:	010c010a 	.word	0x010c010a
 800e418:	0110010e 	.word	0x0110010e
 800e41c:	0112012e 	.word	0x0112012e
 800e420:	011a0116 	.word	0x011a0116
 800e424:	00c200ea 	.word	0x00c200ea
 800e428:	00ba012c 	.word	0x00ba012c
 800e42c:	00bc00d0 	.word	0x00bc00d0
 800e430:	00a600a0 	.word	0x00a600a0
 800e434:	00f8012a 	.word	0x00f8012a
 800e438:	0118012e 	.word	0x0118012e
 800e43c:	011e00c4 	.word	0x011e00c4
 800e440:	012e011c 	.word	0x012e011c
 800e444:	012e012e 	.word	0x012e012e
 800e448:	012e012e 	.word	0x012e012e
 800e44c:	012e00d4 	.word	0x012e00d4
 800e450:	012e012e 	.word	0x012e012e
 800e454:	012800e6 	.word	0x012800e6
 800e458:	01220120 	.word	0x01220120
 800e45c:	0124      	.short	0x0124
 800e45e:	4b55      	ldr	r3, [pc, #340]	@ (800e5b4 <_strerror_r+0x288>)
 800e460:	4618      	mov	r0, r3
 800e462:	bd10      	pop	{r4, pc}
 800e464:	4b54      	ldr	r3, [pc, #336]	@ (800e5b8 <_strerror_r+0x28c>)
 800e466:	e7fb      	b.n	800e460 <_strerror_r+0x134>
 800e468:	4b54      	ldr	r3, [pc, #336]	@ (800e5bc <_strerror_r+0x290>)
 800e46a:	e7f9      	b.n	800e460 <_strerror_r+0x134>
 800e46c:	4b54      	ldr	r3, [pc, #336]	@ (800e5c0 <_strerror_r+0x294>)
 800e46e:	e7f7      	b.n	800e460 <_strerror_r+0x134>
 800e470:	4b54      	ldr	r3, [pc, #336]	@ (800e5c4 <_strerror_r+0x298>)
 800e472:	e7f5      	b.n	800e460 <_strerror_r+0x134>
 800e474:	4b54      	ldr	r3, [pc, #336]	@ (800e5c8 <_strerror_r+0x29c>)
 800e476:	e7f3      	b.n	800e460 <_strerror_r+0x134>
 800e478:	4b54      	ldr	r3, [pc, #336]	@ (800e5cc <_strerror_r+0x2a0>)
 800e47a:	e7f1      	b.n	800e460 <_strerror_r+0x134>
 800e47c:	4b54      	ldr	r3, [pc, #336]	@ (800e5d0 <_strerror_r+0x2a4>)
 800e47e:	e7ef      	b.n	800e460 <_strerror_r+0x134>
 800e480:	4b54      	ldr	r3, [pc, #336]	@ (800e5d4 <_strerror_r+0x2a8>)
 800e482:	e7ed      	b.n	800e460 <_strerror_r+0x134>
 800e484:	4b54      	ldr	r3, [pc, #336]	@ (800e5d8 <_strerror_r+0x2ac>)
 800e486:	e7eb      	b.n	800e460 <_strerror_r+0x134>
 800e488:	4b54      	ldr	r3, [pc, #336]	@ (800e5dc <_strerror_r+0x2b0>)
 800e48a:	e7e9      	b.n	800e460 <_strerror_r+0x134>
 800e48c:	4b54      	ldr	r3, [pc, #336]	@ (800e5e0 <_strerror_r+0x2b4>)
 800e48e:	e7e7      	b.n	800e460 <_strerror_r+0x134>
 800e490:	4b54      	ldr	r3, [pc, #336]	@ (800e5e4 <_strerror_r+0x2b8>)
 800e492:	e7e5      	b.n	800e460 <_strerror_r+0x134>
 800e494:	4b54      	ldr	r3, [pc, #336]	@ (800e5e8 <_strerror_r+0x2bc>)
 800e496:	e7e3      	b.n	800e460 <_strerror_r+0x134>
 800e498:	4b54      	ldr	r3, [pc, #336]	@ (800e5ec <_strerror_r+0x2c0>)
 800e49a:	e7e1      	b.n	800e460 <_strerror_r+0x134>
 800e49c:	4b54      	ldr	r3, [pc, #336]	@ (800e5f0 <_strerror_r+0x2c4>)
 800e49e:	e7df      	b.n	800e460 <_strerror_r+0x134>
 800e4a0:	4b54      	ldr	r3, [pc, #336]	@ (800e5f4 <_strerror_r+0x2c8>)
 800e4a2:	e7dd      	b.n	800e460 <_strerror_r+0x134>
 800e4a4:	4b54      	ldr	r3, [pc, #336]	@ (800e5f8 <_strerror_r+0x2cc>)
 800e4a6:	e7db      	b.n	800e460 <_strerror_r+0x134>
 800e4a8:	4b54      	ldr	r3, [pc, #336]	@ (800e5fc <_strerror_r+0x2d0>)
 800e4aa:	e7d9      	b.n	800e460 <_strerror_r+0x134>
 800e4ac:	4b54      	ldr	r3, [pc, #336]	@ (800e600 <_strerror_r+0x2d4>)
 800e4ae:	e7d7      	b.n	800e460 <_strerror_r+0x134>
 800e4b0:	4b54      	ldr	r3, [pc, #336]	@ (800e604 <_strerror_r+0x2d8>)
 800e4b2:	e7d5      	b.n	800e460 <_strerror_r+0x134>
 800e4b4:	4b54      	ldr	r3, [pc, #336]	@ (800e608 <_strerror_r+0x2dc>)
 800e4b6:	e7d3      	b.n	800e460 <_strerror_r+0x134>
 800e4b8:	4b54      	ldr	r3, [pc, #336]	@ (800e60c <_strerror_r+0x2e0>)
 800e4ba:	e7d1      	b.n	800e460 <_strerror_r+0x134>
 800e4bc:	4b54      	ldr	r3, [pc, #336]	@ (800e610 <_strerror_r+0x2e4>)
 800e4be:	e7cf      	b.n	800e460 <_strerror_r+0x134>
 800e4c0:	4b54      	ldr	r3, [pc, #336]	@ (800e614 <_strerror_r+0x2e8>)
 800e4c2:	e7cd      	b.n	800e460 <_strerror_r+0x134>
 800e4c4:	4b54      	ldr	r3, [pc, #336]	@ (800e618 <_strerror_r+0x2ec>)
 800e4c6:	e7cb      	b.n	800e460 <_strerror_r+0x134>
 800e4c8:	4b54      	ldr	r3, [pc, #336]	@ (800e61c <_strerror_r+0x2f0>)
 800e4ca:	e7c9      	b.n	800e460 <_strerror_r+0x134>
 800e4cc:	4b54      	ldr	r3, [pc, #336]	@ (800e620 <_strerror_r+0x2f4>)
 800e4ce:	e7c7      	b.n	800e460 <_strerror_r+0x134>
 800e4d0:	4b54      	ldr	r3, [pc, #336]	@ (800e624 <_strerror_r+0x2f8>)
 800e4d2:	e7c5      	b.n	800e460 <_strerror_r+0x134>
 800e4d4:	4b54      	ldr	r3, [pc, #336]	@ (800e628 <_strerror_r+0x2fc>)
 800e4d6:	e7c3      	b.n	800e460 <_strerror_r+0x134>
 800e4d8:	4b54      	ldr	r3, [pc, #336]	@ (800e62c <_strerror_r+0x300>)
 800e4da:	e7c1      	b.n	800e460 <_strerror_r+0x134>
 800e4dc:	4b54      	ldr	r3, [pc, #336]	@ (800e630 <_strerror_r+0x304>)
 800e4de:	e7bf      	b.n	800e460 <_strerror_r+0x134>
 800e4e0:	4b54      	ldr	r3, [pc, #336]	@ (800e634 <_strerror_r+0x308>)
 800e4e2:	e7bd      	b.n	800e460 <_strerror_r+0x134>
 800e4e4:	4b54      	ldr	r3, [pc, #336]	@ (800e638 <_strerror_r+0x30c>)
 800e4e6:	e7bb      	b.n	800e460 <_strerror_r+0x134>
 800e4e8:	4b54      	ldr	r3, [pc, #336]	@ (800e63c <_strerror_r+0x310>)
 800e4ea:	e7b9      	b.n	800e460 <_strerror_r+0x134>
 800e4ec:	4b54      	ldr	r3, [pc, #336]	@ (800e640 <_strerror_r+0x314>)
 800e4ee:	e7b7      	b.n	800e460 <_strerror_r+0x134>
 800e4f0:	4b54      	ldr	r3, [pc, #336]	@ (800e644 <_strerror_r+0x318>)
 800e4f2:	e7b5      	b.n	800e460 <_strerror_r+0x134>
 800e4f4:	4b54      	ldr	r3, [pc, #336]	@ (800e648 <_strerror_r+0x31c>)
 800e4f6:	e7b3      	b.n	800e460 <_strerror_r+0x134>
 800e4f8:	4b54      	ldr	r3, [pc, #336]	@ (800e64c <_strerror_r+0x320>)
 800e4fa:	e7b1      	b.n	800e460 <_strerror_r+0x134>
 800e4fc:	4b54      	ldr	r3, [pc, #336]	@ (800e650 <_strerror_r+0x324>)
 800e4fe:	e7af      	b.n	800e460 <_strerror_r+0x134>
 800e500:	4b54      	ldr	r3, [pc, #336]	@ (800e654 <_strerror_r+0x328>)
 800e502:	e7ad      	b.n	800e460 <_strerror_r+0x134>
 800e504:	4b54      	ldr	r3, [pc, #336]	@ (800e658 <_strerror_r+0x32c>)
 800e506:	e7ab      	b.n	800e460 <_strerror_r+0x134>
 800e508:	4b54      	ldr	r3, [pc, #336]	@ (800e65c <_strerror_r+0x330>)
 800e50a:	e7a9      	b.n	800e460 <_strerror_r+0x134>
 800e50c:	4b54      	ldr	r3, [pc, #336]	@ (800e660 <_strerror_r+0x334>)
 800e50e:	e7a7      	b.n	800e460 <_strerror_r+0x134>
 800e510:	4b54      	ldr	r3, [pc, #336]	@ (800e664 <_strerror_r+0x338>)
 800e512:	e7a5      	b.n	800e460 <_strerror_r+0x134>
 800e514:	4b54      	ldr	r3, [pc, #336]	@ (800e668 <_strerror_r+0x33c>)
 800e516:	e7a3      	b.n	800e460 <_strerror_r+0x134>
 800e518:	4b54      	ldr	r3, [pc, #336]	@ (800e66c <_strerror_r+0x340>)
 800e51a:	e7a1      	b.n	800e460 <_strerror_r+0x134>
 800e51c:	4b54      	ldr	r3, [pc, #336]	@ (800e670 <_strerror_r+0x344>)
 800e51e:	e79f      	b.n	800e460 <_strerror_r+0x134>
 800e520:	4b54      	ldr	r3, [pc, #336]	@ (800e674 <_strerror_r+0x348>)
 800e522:	e79d      	b.n	800e460 <_strerror_r+0x134>
 800e524:	4b54      	ldr	r3, [pc, #336]	@ (800e678 <_strerror_r+0x34c>)
 800e526:	e79b      	b.n	800e460 <_strerror_r+0x134>
 800e528:	4b54      	ldr	r3, [pc, #336]	@ (800e67c <_strerror_r+0x350>)
 800e52a:	e799      	b.n	800e460 <_strerror_r+0x134>
 800e52c:	4b54      	ldr	r3, [pc, #336]	@ (800e680 <_strerror_r+0x354>)
 800e52e:	e797      	b.n	800e460 <_strerror_r+0x134>
 800e530:	4b54      	ldr	r3, [pc, #336]	@ (800e684 <_strerror_r+0x358>)
 800e532:	e795      	b.n	800e460 <_strerror_r+0x134>
 800e534:	4b54      	ldr	r3, [pc, #336]	@ (800e688 <_strerror_r+0x35c>)
 800e536:	e793      	b.n	800e460 <_strerror_r+0x134>
 800e538:	4b54      	ldr	r3, [pc, #336]	@ (800e68c <_strerror_r+0x360>)
 800e53a:	e791      	b.n	800e460 <_strerror_r+0x134>
 800e53c:	4b54      	ldr	r3, [pc, #336]	@ (800e690 <_strerror_r+0x364>)
 800e53e:	e78f      	b.n	800e460 <_strerror_r+0x134>
 800e540:	4b54      	ldr	r3, [pc, #336]	@ (800e694 <_strerror_r+0x368>)
 800e542:	e78d      	b.n	800e460 <_strerror_r+0x134>
 800e544:	4b54      	ldr	r3, [pc, #336]	@ (800e698 <_strerror_r+0x36c>)
 800e546:	e78b      	b.n	800e460 <_strerror_r+0x134>
 800e548:	4b54      	ldr	r3, [pc, #336]	@ (800e69c <_strerror_r+0x370>)
 800e54a:	e789      	b.n	800e460 <_strerror_r+0x134>
 800e54c:	4b54      	ldr	r3, [pc, #336]	@ (800e6a0 <_strerror_r+0x374>)
 800e54e:	e787      	b.n	800e460 <_strerror_r+0x134>
 800e550:	4b54      	ldr	r3, [pc, #336]	@ (800e6a4 <_strerror_r+0x378>)
 800e552:	e785      	b.n	800e460 <_strerror_r+0x134>
 800e554:	4b54      	ldr	r3, [pc, #336]	@ (800e6a8 <_strerror_r+0x37c>)
 800e556:	e783      	b.n	800e460 <_strerror_r+0x134>
 800e558:	4b54      	ldr	r3, [pc, #336]	@ (800e6ac <_strerror_r+0x380>)
 800e55a:	e781      	b.n	800e460 <_strerror_r+0x134>
 800e55c:	4b54      	ldr	r3, [pc, #336]	@ (800e6b0 <_strerror_r+0x384>)
 800e55e:	e77f      	b.n	800e460 <_strerror_r+0x134>
 800e560:	4b54      	ldr	r3, [pc, #336]	@ (800e6b4 <_strerror_r+0x388>)
 800e562:	e77d      	b.n	800e460 <_strerror_r+0x134>
 800e564:	4b54      	ldr	r3, [pc, #336]	@ (800e6b8 <_strerror_r+0x38c>)
 800e566:	e77b      	b.n	800e460 <_strerror_r+0x134>
 800e568:	4b54      	ldr	r3, [pc, #336]	@ (800e6bc <_strerror_r+0x390>)
 800e56a:	e779      	b.n	800e460 <_strerror_r+0x134>
 800e56c:	4b54      	ldr	r3, [pc, #336]	@ (800e6c0 <_strerror_r+0x394>)
 800e56e:	e777      	b.n	800e460 <_strerror_r+0x134>
 800e570:	4b54      	ldr	r3, [pc, #336]	@ (800e6c4 <_strerror_r+0x398>)
 800e572:	e775      	b.n	800e460 <_strerror_r+0x134>
 800e574:	4b54      	ldr	r3, [pc, #336]	@ (800e6c8 <_strerror_r+0x39c>)
 800e576:	e773      	b.n	800e460 <_strerror_r+0x134>
 800e578:	4b54      	ldr	r3, [pc, #336]	@ (800e6cc <_strerror_r+0x3a0>)
 800e57a:	e771      	b.n	800e460 <_strerror_r+0x134>
 800e57c:	4b54      	ldr	r3, [pc, #336]	@ (800e6d0 <_strerror_r+0x3a4>)
 800e57e:	e76f      	b.n	800e460 <_strerror_r+0x134>
 800e580:	4b54      	ldr	r3, [pc, #336]	@ (800e6d4 <_strerror_r+0x3a8>)
 800e582:	e76d      	b.n	800e460 <_strerror_r+0x134>
 800e584:	4b54      	ldr	r3, [pc, #336]	@ (800e6d8 <_strerror_r+0x3ac>)
 800e586:	e76b      	b.n	800e460 <_strerror_r+0x134>
 800e588:	4b54      	ldr	r3, [pc, #336]	@ (800e6dc <_strerror_r+0x3b0>)
 800e58a:	e769      	b.n	800e460 <_strerror_r+0x134>
 800e58c:	4b54      	ldr	r3, [pc, #336]	@ (800e6e0 <_strerror_r+0x3b4>)
 800e58e:	e767      	b.n	800e460 <_strerror_r+0x134>
 800e590:	4b54      	ldr	r3, [pc, #336]	@ (800e6e4 <_strerror_r+0x3b8>)
 800e592:	e765      	b.n	800e460 <_strerror_r+0x134>
 800e594:	4b54      	ldr	r3, [pc, #336]	@ (800e6e8 <_strerror_r+0x3bc>)
 800e596:	e763      	b.n	800e460 <_strerror_r+0x134>
 800e598:	4b54      	ldr	r3, [pc, #336]	@ (800e6ec <_strerror_r+0x3c0>)
 800e59a:	e761      	b.n	800e460 <_strerror_r+0x134>
 800e59c:	2a00      	cmp	r2, #0
 800e59e:	bf08      	it	eq
 800e5a0:	4622      	moveq	r2, r4
 800e5a2:	f000 f8a9 	bl	800e6f8 <_user_strerror>
 800e5a6:	4b52      	ldr	r3, [pc, #328]	@ (800e6f0 <_strerror_r+0x3c4>)
 800e5a8:	2800      	cmp	r0, #0
 800e5aa:	bf18      	it	ne
 800e5ac:	4603      	movne	r3, r0
 800e5ae:	e757      	b.n	800e460 <_strerror_r+0x134>
 800e5b0:	4b50      	ldr	r3, [pc, #320]	@ (800e6f4 <_strerror_r+0x3c8>)
 800e5b2:	e755      	b.n	800e460 <_strerror_r+0x134>
 800e5b4:	08012790 	.word	0x08012790
 800e5b8:	080127a2 	.word	0x080127a2
 800e5bc:	080127bc 	.word	0x080127bc
 800e5c0:	080127cc 	.word	0x080127cc
 800e5c4:	080127e4 	.word	0x080127e4
 800e5c8:	080127ee 	.word	0x080127ee
 800e5cc:	08012808 	.word	0x08012808
 800e5d0:	0801281a 	.word	0x0801281a
 800e5d4:	0801282c 	.word	0x0801282c
 800e5d8:	08012845 	.word	0x08012845
 800e5dc:	08012855 	.word	0x08012855
 800e5e0:	08012861 	.word	0x08012861
 800e5e4:	0801287e 	.word	0x0801287e
 800e5e8:	08012890 	.word	0x08012890
 800e5ec:	080128a1 	.word	0x080128a1
 800e5f0:	080128b3 	.word	0x080128b3
 800e5f4:	080128bf 	.word	0x080128bf
 800e5f8:	080128d7 	.word	0x080128d7
 800e5fc:	080128e3 	.word	0x080128e3
 800e600:	080128f5 	.word	0x080128f5
 800e604:	08012904 	.word	0x08012904
 800e608:	08012914 	.word	0x08012914
 800e60c:	08012921 	.word	0x08012921
 800e610:	08012940 	.word	0x08012940
 800e614:	0801294f 	.word	0x0801294f
 800e618:	08012960 	.word	0x08012960
 800e61c:	08012984 	.word	0x08012984
 800e620:	080129a2 	.word	0x080129a2
 800e624:	080129c0 	.word	0x080129c0
 800e628:	080129e0 	.word	0x080129e0
 800e62c:	080129f7 	.word	0x080129f7
 800e630:	08012a06 	.word	0x08012a06
 800e634:	08012a15 	.word	0x08012a15
 800e638:	08012a29 	.word	0x08012a29
 800e63c:	08012a41 	.word	0x08012a41
 800e640:	08012a4f 	.word	0x08012a4f
 800e644:	08012a5c 	.word	0x08012a5c
 800e648:	08012a72 	.word	0x08012a72
 800e64c:	08012a81 	.word	0x08012a81
 800e650:	08012a8d 	.word	0x08012a8d
 800e654:	08012abc 	.word	0x08012abc
 800e658:	08012acd 	.word	0x08012acd
 800e65c:	08012ae8 	.word	0x08012ae8
 800e660:	08012afb 	.word	0x08012afb
 800e664:	08012b11 	.word	0x08012b11
 800e668:	08012b1a 	.word	0x08012b1a
 800e66c:	08012b31 	.word	0x08012b31
 800e670:	08012b39 	.word	0x08012b39
 800e674:	08012b46 	.word	0x08012b46
 800e678:	08012b5b 	.word	0x08012b5b
 800e67c:	08012b6f 	.word	0x08012b6f
 800e680:	08012b87 	.word	0x08012b87
 800e684:	08012b96 	.word	0x08012b96
 800e688:	08012ba7 	.word	0x08012ba7
 800e68c:	08012bba 	.word	0x08012bba
 800e690:	08012bc6 	.word	0x08012bc6
 800e694:	08012bdf 	.word	0x08012bdf
 800e698:	08012bf3 	.word	0x08012bf3
 800e69c:	08012c0e 	.word	0x08012c0e
 800e6a0:	08012c26 	.word	0x08012c26
 800e6a4:	08012c40 	.word	0x08012c40
 800e6a8:	08012c48 	.word	0x08012c48
 800e6ac:	08012c78 	.word	0x08012c78
 800e6b0:	08012c97 	.word	0x08012c97
 800e6b4:	08012cb6 	.word	0x08012cb6
 800e6b8:	08012ccd 	.word	0x08012ccd
 800e6bc:	08012ce0 	.word	0x08012ce0
 800e6c0:	08012cf9 	.word	0x08012cf9
 800e6c4:	08012d10 	.word	0x08012d10
 800e6c8:	08012d26 	.word	0x08012d26
 800e6cc:	08012d47 	.word	0x08012d47
 800e6d0:	08012d5f 	.word	0x08012d5f
 800e6d4:	08012d7b 	.word	0x08012d7b
 800e6d8:	08012d8e 	.word	0x08012d8e
 800e6dc:	08012da4 	.word	0x08012da4
 800e6e0:	08012db8 	.word	0x08012db8
 800e6e4:	08012dda 	.word	0x08012dda
 800e6e8:	08012e00 	.word	0x08012e00
 800e6ec:	08012e11 	.word	0x08012e11
 800e6f0:	08012e61 	.word	0x08012e61
 800e6f4:	08012798 	.word	0x08012798

0800e6f8 <_user_strerror>:
 800e6f8:	2000      	movs	r0, #0
 800e6fa:	4770      	bx	lr

0800e6fc <_localeconv_r>:
 800e6fc:	4800      	ldr	r0, [pc, #0]	@ (800e700 <_localeconv_r+0x4>)
 800e6fe:	4770      	bx	lr
 800e700:	200006b4 	.word	0x200006b4

0800e704 <_close_r>:
 800e704:	b538      	push	{r3, r4, r5, lr}
 800e706:	4d06      	ldr	r5, [pc, #24]	@ (800e720 <_close_r+0x1c>)
 800e708:	2300      	movs	r3, #0
 800e70a:	4604      	mov	r4, r0
 800e70c:	4608      	mov	r0, r1
 800e70e:	602b      	str	r3, [r5, #0]
 800e710:	f7f5 fe88 	bl	8004424 <_close>
 800e714:	1c43      	adds	r3, r0, #1
 800e716:	d102      	bne.n	800e71e <_close_r+0x1a>
 800e718:	682b      	ldr	r3, [r5, #0]
 800e71a:	b103      	cbz	r3, 800e71e <_close_r+0x1a>
 800e71c:	6023      	str	r3, [r4, #0]
 800e71e:	bd38      	pop	{r3, r4, r5, pc}
 800e720:	20004b08 	.word	0x20004b08

0800e724 <_lseek_r>:
 800e724:	b538      	push	{r3, r4, r5, lr}
 800e726:	4d07      	ldr	r5, [pc, #28]	@ (800e744 <_lseek_r+0x20>)
 800e728:	4604      	mov	r4, r0
 800e72a:	4608      	mov	r0, r1
 800e72c:	4611      	mov	r1, r2
 800e72e:	2200      	movs	r2, #0
 800e730:	602a      	str	r2, [r5, #0]
 800e732:	461a      	mov	r2, r3
 800e734:	f7f5 fe9d 	bl	8004472 <_lseek>
 800e738:	1c43      	adds	r3, r0, #1
 800e73a:	d102      	bne.n	800e742 <_lseek_r+0x1e>
 800e73c:	682b      	ldr	r3, [r5, #0]
 800e73e:	b103      	cbz	r3, 800e742 <_lseek_r+0x1e>
 800e740:	6023      	str	r3, [r4, #0]
 800e742:	bd38      	pop	{r3, r4, r5, pc}
 800e744:	20004b08 	.word	0x20004b08

0800e748 <_open_r>:
 800e748:	b538      	push	{r3, r4, r5, lr}
 800e74a:	4d07      	ldr	r5, [pc, #28]	@ (800e768 <_open_r+0x20>)
 800e74c:	4604      	mov	r4, r0
 800e74e:	4608      	mov	r0, r1
 800e750:	4611      	mov	r1, r2
 800e752:	2200      	movs	r2, #0
 800e754:	602a      	str	r2, [r5, #0]
 800e756:	461a      	mov	r2, r3
 800e758:	f7f5 fe98 	bl	800448c <_open>
 800e75c:	1c43      	adds	r3, r0, #1
 800e75e:	d102      	bne.n	800e766 <_open_r+0x1e>
 800e760:	682b      	ldr	r3, [r5, #0]
 800e762:	b103      	cbz	r3, 800e766 <_open_r+0x1e>
 800e764:	6023      	str	r3, [r4, #0]
 800e766:	bd38      	pop	{r3, r4, r5, pc}
 800e768:	20004b08 	.word	0x20004b08

0800e76c <_read_r>:
 800e76c:	b538      	push	{r3, r4, r5, lr}
 800e76e:	4d07      	ldr	r5, [pc, #28]	@ (800e78c <_read_r+0x20>)
 800e770:	4604      	mov	r4, r0
 800e772:	4608      	mov	r0, r1
 800e774:	4611      	mov	r1, r2
 800e776:	2200      	movs	r2, #0
 800e778:	602a      	str	r2, [r5, #0]
 800e77a:	461a      	mov	r2, r3
 800e77c:	f7f5 fe19 	bl	80043b2 <_read>
 800e780:	1c43      	adds	r3, r0, #1
 800e782:	d102      	bne.n	800e78a <_read_r+0x1e>
 800e784:	682b      	ldr	r3, [r5, #0]
 800e786:	b103      	cbz	r3, 800e78a <_read_r+0x1e>
 800e788:	6023      	str	r3, [r4, #0]
 800e78a:	bd38      	pop	{r3, r4, r5, pc}
 800e78c:	20004b08 	.word	0x20004b08

0800e790 <_write_r>:
 800e790:	b538      	push	{r3, r4, r5, lr}
 800e792:	4d07      	ldr	r5, [pc, #28]	@ (800e7b0 <_write_r+0x20>)
 800e794:	4604      	mov	r4, r0
 800e796:	4608      	mov	r0, r1
 800e798:	4611      	mov	r1, r2
 800e79a:	2200      	movs	r2, #0
 800e79c:	602a      	str	r2, [r5, #0]
 800e79e:	461a      	mov	r2, r3
 800e7a0:	f7f5 fe24 	bl	80043ec <_write>
 800e7a4:	1c43      	adds	r3, r0, #1
 800e7a6:	d102      	bne.n	800e7ae <_write_r+0x1e>
 800e7a8:	682b      	ldr	r3, [r5, #0]
 800e7aa:	b103      	cbz	r3, 800e7ae <_write_r+0x1e>
 800e7ac:	6023      	str	r3, [r4, #0]
 800e7ae:	bd38      	pop	{r3, r4, r5, pc}
 800e7b0:	20004b08 	.word	0x20004b08

0800e7b4 <__errno>:
 800e7b4:	4b01      	ldr	r3, [pc, #4]	@ (800e7bc <__errno+0x8>)
 800e7b6:	6818      	ldr	r0, [r3, #0]
 800e7b8:	4770      	bx	lr
 800e7ba:	bf00      	nop
 800e7bc:	20000574 	.word	0x20000574

0800e7c0 <__libc_init_array>:
 800e7c0:	b570      	push	{r4, r5, r6, lr}
 800e7c2:	4d0d      	ldr	r5, [pc, #52]	@ (800e7f8 <__libc_init_array+0x38>)
 800e7c4:	4c0d      	ldr	r4, [pc, #52]	@ (800e7fc <__libc_init_array+0x3c>)
 800e7c6:	1b64      	subs	r4, r4, r5
 800e7c8:	10a4      	asrs	r4, r4, #2
 800e7ca:	2600      	movs	r6, #0
 800e7cc:	42a6      	cmp	r6, r4
 800e7ce:	d109      	bne.n	800e7e4 <__libc_init_array+0x24>
 800e7d0:	4d0b      	ldr	r5, [pc, #44]	@ (800e800 <__libc_init_array+0x40>)
 800e7d2:	4c0c      	ldr	r4, [pc, #48]	@ (800e804 <__libc_init_array+0x44>)
 800e7d4:	f003 fd02 	bl	80121dc <_init>
 800e7d8:	1b64      	subs	r4, r4, r5
 800e7da:	10a4      	asrs	r4, r4, #2
 800e7dc:	2600      	movs	r6, #0
 800e7de:	42a6      	cmp	r6, r4
 800e7e0:	d105      	bne.n	800e7ee <__libc_init_array+0x2e>
 800e7e2:	bd70      	pop	{r4, r5, r6, pc}
 800e7e4:	f855 3b04 	ldr.w	r3, [r5], #4
 800e7e8:	4798      	blx	r3
 800e7ea:	3601      	adds	r6, #1
 800e7ec:	e7ee      	b.n	800e7cc <__libc_init_array+0xc>
 800e7ee:	f855 3b04 	ldr.w	r3, [r5], #4
 800e7f2:	4798      	blx	r3
 800e7f4:	3601      	adds	r6, #1
 800e7f6:	e7f2      	b.n	800e7de <__libc_init_array+0x1e>
 800e7f8:	0801320c 	.word	0x0801320c
 800e7fc:	0801320c 	.word	0x0801320c
 800e800:	0801320c 	.word	0x0801320c
 800e804:	08013210 	.word	0x08013210

0800e808 <__retarget_lock_init_recursive>:
 800e808:	4770      	bx	lr

0800e80a <__retarget_lock_close_recursive>:
 800e80a:	4770      	bx	lr

0800e80c <__retarget_lock_acquire_recursive>:
 800e80c:	4770      	bx	lr

0800e80e <__retarget_lock_release_recursive>:
 800e80e:	4770      	bx	lr

0800e810 <memcpy>:
 800e810:	440a      	add	r2, r1
 800e812:	4291      	cmp	r1, r2
 800e814:	f100 33ff 	add.w	r3, r0, #4294967295
 800e818:	d100      	bne.n	800e81c <memcpy+0xc>
 800e81a:	4770      	bx	lr
 800e81c:	b510      	push	{r4, lr}
 800e81e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e822:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e826:	4291      	cmp	r1, r2
 800e828:	d1f9      	bne.n	800e81e <memcpy+0xe>
 800e82a:	bd10      	pop	{r4, pc}

0800e82c <nanf>:
 800e82c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800e834 <nanf+0x8>
 800e830:	4770      	bx	lr
 800e832:	bf00      	nop
 800e834:	7fc00000 	.word	0x7fc00000

0800e838 <__assert_func>:
 800e838:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e83a:	4614      	mov	r4, r2
 800e83c:	461a      	mov	r2, r3
 800e83e:	4b09      	ldr	r3, [pc, #36]	@ (800e864 <__assert_func+0x2c>)
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	4605      	mov	r5, r0
 800e844:	68d8      	ldr	r0, [r3, #12]
 800e846:	b954      	cbnz	r4, 800e85e <__assert_func+0x26>
 800e848:	4b07      	ldr	r3, [pc, #28]	@ (800e868 <__assert_func+0x30>)
 800e84a:	461c      	mov	r4, r3
 800e84c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e850:	9100      	str	r1, [sp, #0]
 800e852:	462b      	mov	r3, r5
 800e854:	4905      	ldr	r1, [pc, #20]	@ (800e86c <__assert_func+0x34>)
 800e856:	f7ff faa1 	bl	800dd9c <fiprintf>
 800e85a:	f002 fe51 	bl	8011500 <abort>
 800e85e:	4b04      	ldr	r3, [pc, #16]	@ (800e870 <__assert_func+0x38>)
 800e860:	e7f4      	b.n	800e84c <__assert_func+0x14>
 800e862:	bf00      	nop
 800e864:	20000574 	.word	0x20000574
 800e868:	08012e61 	.word	0x08012e61
 800e86c:	08012e33 	.word	0x08012e33
 800e870:	08012e26 	.word	0x08012e26

0800e874 <quorem>:
 800e874:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e878:	6903      	ldr	r3, [r0, #16]
 800e87a:	690c      	ldr	r4, [r1, #16]
 800e87c:	42a3      	cmp	r3, r4
 800e87e:	4607      	mov	r7, r0
 800e880:	db7e      	blt.n	800e980 <quorem+0x10c>
 800e882:	3c01      	subs	r4, #1
 800e884:	f101 0814 	add.w	r8, r1, #20
 800e888:	00a3      	lsls	r3, r4, #2
 800e88a:	f100 0514 	add.w	r5, r0, #20
 800e88e:	9300      	str	r3, [sp, #0]
 800e890:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e894:	9301      	str	r3, [sp, #4]
 800e896:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e89a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e89e:	3301      	adds	r3, #1
 800e8a0:	429a      	cmp	r2, r3
 800e8a2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e8a6:	fbb2 f6f3 	udiv	r6, r2, r3
 800e8aa:	d32e      	bcc.n	800e90a <quorem+0x96>
 800e8ac:	f04f 0a00 	mov.w	sl, #0
 800e8b0:	46c4      	mov	ip, r8
 800e8b2:	46ae      	mov	lr, r5
 800e8b4:	46d3      	mov	fp, sl
 800e8b6:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e8ba:	b298      	uxth	r0, r3
 800e8bc:	fb06 a000 	mla	r0, r6, r0, sl
 800e8c0:	0c02      	lsrs	r2, r0, #16
 800e8c2:	0c1b      	lsrs	r3, r3, #16
 800e8c4:	fb06 2303 	mla	r3, r6, r3, r2
 800e8c8:	f8de 2000 	ldr.w	r2, [lr]
 800e8cc:	b280      	uxth	r0, r0
 800e8ce:	b292      	uxth	r2, r2
 800e8d0:	1a12      	subs	r2, r2, r0
 800e8d2:	445a      	add	r2, fp
 800e8d4:	f8de 0000 	ldr.w	r0, [lr]
 800e8d8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e8dc:	b29b      	uxth	r3, r3
 800e8de:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800e8e2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800e8e6:	b292      	uxth	r2, r2
 800e8e8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e8ec:	45e1      	cmp	r9, ip
 800e8ee:	f84e 2b04 	str.w	r2, [lr], #4
 800e8f2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800e8f6:	d2de      	bcs.n	800e8b6 <quorem+0x42>
 800e8f8:	9b00      	ldr	r3, [sp, #0]
 800e8fa:	58eb      	ldr	r3, [r5, r3]
 800e8fc:	b92b      	cbnz	r3, 800e90a <quorem+0x96>
 800e8fe:	9b01      	ldr	r3, [sp, #4]
 800e900:	3b04      	subs	r3, #4
 800e902:	429d      	cmp	r5, r3
 800e904:	461a      	mov	r2, r3
 800e906:	d32f      	bcc.n	800e968 <quorem+0xf4>
 800e908:	613c      	str	r4, [r7, #16]
 800e90a:	4638      	mov	r0, r7
 800e90c:	f001 f9c4 	bl	800fc98 <__mcmp>
 800e910:	2800      	cmp	r0, #0
 800e912:	db25      	blt.n	800e960 <quorem+0xec>
 800e914:	4629      	mov	r1, r5
 800e916:	2000      	movs	r0, #0
 800e918:	f858 2b04 	ldr.w	r2, [r8], #4
 800e91c:	f8d1 c000 	ldr.w	ip, [r1]
 800e920:	fa1f fe82 	uxth.w	lr, r2
 800e924:	fa1f f38c 	uxth.w	r3, ip
 800e928:	eba3 030e 	sub.w	r3, r3, lr
 800e92c:	4403      	add	r3, r0
 800e92e:	0c12      	lsrs	r2, r2, #16
 800e930:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800e934:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800e938:	b29b      	uxth	r3, r3
 800e93a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e93e:	45c1      	cmp	r9, r8
 800e940:	f841 3b04 	str.w	r3, [r1], #4
 800e944:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e948:	d2e6      	bcs.n	800e918 <quorem+0xa4>
 800e94a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e94e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e952:	b922      	cbnz	r2, 800e95e <quorem+0xea>
 800e954:	3b04      	subs	r3, #4
 800e956:	429d      	cmp	r5, r3
 800e958:	461a      	mov	r2, r3
 800e95a:	d30b      	bcc.n	800e974 <quorem+0x100>
 800e95c:	613c      	str	r4, [r7, #16]
 800e95e:	3601      	adds	r6, #1
 800e960:	4630      	mov	r0, r6
 800e962:	b003      	add	sp, #12
 800e964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e968:	6812      	ldr	r2, [r2, #0]
 800e96a:	3b04      	subs	r3, #4
 800e96c:	2a00      	cmp	r2, #0
 800e96e:	d1cb      	bne.n	800e908 <quorem+0x94>
 800e970:	3c01      	subs	r4, #1
 800e972:	e7c6      	b.n	800e902 <quorem+0x8e>
 800e974:	6812      	ldr	r2, [r2, #0]
 800e976:	3b04      	subs	r3, #4
 800e978:	2a00      	cmp	r2, #0
 800e97a:	d1ef      	bne.n	800e95c <quorem+0xe8>
 800e97c:	3c01      	subs	r4, #1
 800e97e:	e7ea      	b.n	800e956 <quorem+0xe2>
 800e980:	2000      	movs	r0, #0
 800e982:	e7ee      	b.n	800e962 <quorem+0xee>
 800e984:	0000      	movs	r0, r0
	...

0800e988 <_dtoa_r>:
 800e988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e98c:	69c7      	ldr	r7, [r0, #28]
 800e98e:	b099      	sub	sp, #100	@ 0x64
 800e990:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e994:	ec55 4b10 	vmov	r4, r5, d0
 800e998:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800e99a:	9109      	str	r1, [sp, #36]	@ 0x24
 800e99c:	4683      	mov	fp, r0
 800e99e:	920e      	str	r2, [sp, #56]	@ 0x38
 800e9a0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e9a2:	b97f      	cbnz	r7, 800e9c4 <_dtoa_r+0x3c>
 800e9a4:	2010      	movs	r0, #16
 800e9a6:	f000 fdfd 	bl	800f5a4 <malloc>
 800e9aa:	4602      	mov	r2, r0
 800e9ac:	f8cb 001c 	str.w	r0, [fp, #28]
 800e9b0:	b920      	cbnz	r0, 800e9bc <_dtoa_r+0x34>
 800e9b2:	4ba7      	ldr	r3, [pc, #668]	@ (800ec50 <_dtoa_r+0x2c8>)
 800e9b4:	21ef      	movs	r1, #239	@ 0xef
 800e9b6:	48a7      	ldr	r0, [pc, #668]	@ (800ec54 <_dtoa_r+0x2cc>)
 800e9b8:	f7ff ff3e 	bl	800e838 <__assert_func>
 800e9bc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800e9c0:	6007      	str	r7, [r0, #0]
 800e9c2:	60c7      	str	r7, [r0, #12]
 800e9c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e9c8:	6819      	ldr	r1, [r3, #0]
 800e9ca:	b159      	cbz	r1, 800e9e4 <_dtoa_r+0x5c>
 800e9cc:	685a      	ldr	r2, [r3, #4]
 800e9ce:	604a      	str	r2, [r1, #4]
 800e9d0:	2301      	movs	r3, #1
 800e9d2:	4093      	lsls	r3, r2
 800e9d4:	608b      	str	r3, [r1, #8]
 800e9d6:	4658      	mov	r0, fp
 800e9d8:	f000 feda 	bl	800f790 <_Bfree>
 800e9dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e9e0:	2200      	movs	r2, #0
 800e9e2:	601a      	str	r2, [r3, #0]
 800e9e4:	1e2b      	subs	r3, r5, #0
 800e9e6:	bfb9      	ittee	lt
 800e9e8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e9ec:	9303      	strlt	r3, [sp, #12]
 800e9ee:	2300      	movge	r3, #0
 800e9f0:	6033      	strge	r3, [r6, #0]
 800e9f2:	9f03      	ldr	r7, [sp, #12]
 800e9f4:	4b98      	ldr	r3, [pc, #608]	@ (800ec58 <_dtoa_r+0x2d0>)
 800e9f6:	bfbc      	itt	lt
 800e9f8:	2201      	movlt	r2, #1
 800e9fa:	6032      	strlt	r2, [r6, #0]
 800e9fc:	43bb      	bics	r3, r7
 800e9fe:	d112      	bne.n	800ea26 <_dtoa_r+0x9e>
 800ea00:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ea02:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ea06:	6013      	str	r3, [r2, #0]
 800ea08:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ea0c:	4323      	orrs	r3, r4
 800ea0e:	f000 854d 	beq.w	800f4ac <_dtoa_r+0xb24>
 800ea12:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ea14:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800ec6c <_dtoa_r+0x2e4>
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	f000 854f 	beq.w	800f4bc <_dtoa_r+0xb34>
 800ea1e:	f10a 0303 	add.w	r3, sl, #3
 800ea22:	f000 bd49 	b.w	800f4b8 <_dtoa_r+0xb30>
 800ea26:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ea2a:	2200      	movs	r2, #0
 800ea2c:	ec51 0b17 	vmov	r0, r1, d7
 800ea30:	2300      	movs	r3, #0
 800ea32:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800ea36:	f7f2 f847 	bl	8000ac8 <__aeabi_dcmpeq>
 800ea3a:	4680      	mov	r8, r0
 800ea3c:	b158      	cbz	r0, 800ea56 <_dtoa_r+0xce>
 800ea3e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ea40:	2301      	movs	r3, #1
 800ea42:	6013      	str	r3, [r2, #0]
 800ea44:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ea46:	b113      	cbz	r3, 800ea4e <_dtoa_r+0xc6>
 800ea48:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ea4a:	4b84      	ldr	r3, [pc, #528]	@ (800ec5c <_dtoa_r+0x2d4>)
 800ea4c:	6013      	str	r3, [r2, #0]
 800ea4e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800ec70 <_dtoa_r+0x2e8>
 800ea52:	f000 bd33 	b.w	800f4bc <_dtoa_r+0xb34>
 800ea56:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ea5a:	aa16      	add	r2, sp, #88	@ 0x58
 800ea5c:	a917      	add	r1, sp, #92	@ 0x5c
 800ea5e:	4658      	mov	r0, fp
 800ea60:	f001 fa3a 	bl	800fed8 <__d2b>
 800ea64:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800ea68:	4681      	mov	r9, r0
 800ea6a:	2e00      	cmp	r6, #0
 800ea6c:	d077      	beq.n	800eb5e <_dtoa_r+0x1d6>
 800ea6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ea70:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800ea74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ea78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ea7c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ea80:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ea84:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ea88:	4619      	mov	r1, r3
 800ea8a:	2200      	movs	r2, #0
 800ea8c:	4b74      	ldr	r3, [pc, #464]	@ (800ec60 <_dtoa_r+0x2d8>)
 800ea8e:	f7f1 fbfb 	bl	8000288 <__aeabi_dsub>
 800ea92:	a369      	add	r3, pc, #420	@ (adr r3, 800ec38 <_dtoa_r+0x2b0>)
 800ea94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea98:	f7f1 fdae 	bl	80005f8 <__aeabi_dmul>
 800ea9c:	a368      	add	r3, pc, #416	@ (adr r3, 800ec40 <_dtoa_r+0x2b8>)
 800ea9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaa2:	f7f1 fbf3 	bl	800028c <__adddf3>
 800eaa6:	4604      	mov	r4, r0
 800eaa8:	4630      	mov	r0, r6
 800eaaa:	460d      	mov	r5, r1
 800eaac:	f7f1 fd3a 	bl	8000524 <__aeabi_i2d>
 800eab0:	a365      	add	r3, pc, #404	@ (adr r3, 800ec48 <_dtoa_r+0x2c0>)
 800eab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eab6:	f7f1 fd9f 	bl	80005f8 <__aeabi_dmul>
 800eaba:	4602      	mov	r2, r0
 800eabc:	460b      	mov	r3, r1
 800eabe:	4620      	mov	r0, r4
 800eac0:	4629      	mov	r1, r5
 800eac2:	f7f1 fbe3 	bl	800028c <__adddf3>
 800eac6:	4604      	mov	r4, r0
 800eac8:	460d      	mov	r5, r1
 800eaca:	f7f2 f845 	bl	8000b58 <__aeabi_d2iz>
 800eace:	2200      	movs	r2, #0
 800ead0:	4607      	mov	r7, r0
 800ead2:	2300      	movs	r3, #0
 800ead4:	4620      	mov	r0, r4
 800ead6:	4629      	mov	r1, r5
 800ead8:	f7f2 f800 	bl	8000adc <__aeabi_dcmplt>
 800eadc:	b140      	cbz	r0, 800eaf0 <_dtoa_r+0x168>
 800eade:	4638      	mov	r0, r7
 800eae0:	f7f1 fd20 	bl	8000524 <__aeabi_i2d>
 800eae4:	4622      	mov	r2, r4
 800eae6:	462b      	mov	r3, r5
 800eae8:	f7f1 ffee 	bl	8000ac8 <__aeabi_dcmpeq>
 800eaec:	b900      	cbnz	r0, 800eaf0 <_dtoa_r+0x168>
 800eaee:	3f01      	subs	r7, #1
 800eaf0:	2f16      	cmp	r7, #22
 800eaf2:	d851      	bhi.n	800eb98 <_dtoa_r+0x210>
 800eaf4:	4b5b      	ldr	r3, [pc, #364]	@ (800ec64 <_dtoa_r+0x2dc>)
 800eaf6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800eafa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eafe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800eb02:	f7f1 ffeb 	bl	8000adc <__aeabi_dcmplt>
 800eb06:	2800      	cmp	r0, #0
 800eb08:	d048      	beq.n	800eb9c <_dtoa_r+0x214>
 800eb0a:	3f01      	subs	r7, #1
 800eb0c:	2300      	movs	r3, #0
 800eb0e:	9312      	str	r3, [sp, #72]	@ 0x48
 800eb10:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800eb12:	1b9b      	subs	r3, r3, r6
 800eb14:	1e5a      	subs	r2, r3, #1
 800eb16:	bf44      	itt	mi
 800eb18:	f1c3 0801 	rsbmi	r8, r3, #1
 800eb1c:	2300      	movmi	r3, #0
 800eb1e:	9208      	str	r2, [sp, #32]
 800eb20:	bf54      	ite	pl
 800eb22:	f04f 0800 	movpl.w	r8, #0
 800eb26:	9308      	strmi	r3, [sp, #32]
 800eb28:	2f00      	cmp	r7, #0
 800eb2a:	db39      	blt.n	800eba0 <_dtoa_r+0x218>
 800eb2c:	9b08      	ldr	r3, [sp, #32]
 800eb2e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800eb30:	443b      	add	r3, r7
 800eb32:	9308      	str	r3, [sp, #32]
 800eb34:	2300      	movs	r3, #0
 800eb36:	930a      	str	r3, [sp, #40]	@ 0x28
 800eb38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb3a:	2b09      	cmp	r3, #9
 800eb3c:	d864      	bhi.n	800ec08 <_dtoa_r+0x280>
 800eb3e:	2b05      	cmp	r3, #5
 800eb40:	bfc4      	itt	gt
 800eb42:	3b04      	subgt	r3, #4
 800eb44:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800eb46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb48:	f1a3 0302 	sub.w	r3, r3, #2
 800eb4c:	bfcc      	ite	gt
 800eb4e:	2400      	movgt	r4, #0
 800eb50:	2401      	movle	r4, #1
 800eb52:	2b03      	cmp	r3, #3
 800eb54:	d863      	bhi.n	800ec1e <_dtoa_r+0x296>
 800eb56:	e8df f003 	tbb	[pc, r3]
 800eb5a:	372a      	.short	0x372a
 800eb5c:	5535      	.short	0x5535
 800eb5e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800eb62:	441e      	add	r6, r3
 800eb64:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800eb68:	2b20      	cmp	r3, #32
 800eb6a:	bfc1      	itttt	gt
 800eb6c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800eb70:	409f      	lslgt	r7, r3
 800eb72:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800eb76:	fa24 f303 	lsrgt.w	r3, r4, r3
 800eb7a:	bfd6      	itet	le
 800eb7c:	f1c3 0320 	rsble	r3, r3, #32
 800eb80:	ea47 0003 	orrgt.w	r0, r7, r3
 800eb84:	fa04 f003 	lslle.w	r0, r4, r3
 800eb88:	f7f1 fcbc 	bl	8000504 <__aeabi_ui2d>
 800eb8c:	2201      	movs	r2, #1
 800eb8e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800eb92:	3e01      	subs	r6, #1
 800eb94:	9214      	str	r2, [sp, #80]	@ 0x50
 800eb96:	e777      	b.n	800ea88 <_dtoa_r+0x100>
 800eb98:	2301      	movs	r3, #1
 800eb9a:	e7b8      	b.n	800eb0e <_dtoa_r+0x186>
 800eb9c:	9012      	str	r0, [sp, #72]	@ 0x48
 800eb9e:	e7b7      	b.n	800eb10 <_dtoa_r+0x188>
 800eba0:	427b      	negs	r3, r7
 800eba2:	930a      	str	r3, [sp, #40]	@ 0x28
 800eba4:	2300      	movs	r3, #0
 800eba6:	eba8 0807 	sub.w	r8, r8, r7
 800ebaa:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ebac:	e7c4      	b.n	800eb38 <_dtoa_r+0x1b0>
 800ebae:	2300      	movs	r3, #0
 800ebb0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ebb2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	dc35      	bgt.n	800ec24 <_dtoa_r+0x29c>
 800ebb8:	2301      	movs	r3, #1
 800ebba:	9300      	str	r3, [sp, #0]
 800ebbc:	9307      	str	r3, [sp, #28]
 800ebbe:	461a      	mov	r2, r3
 800ebc0:	920e      	str	r2, [sp, #56]	@ 0x38
 800ebc2:	e00b      	b.n	800ebdc <_dtoa_r+0x254>
 800ebc4:	2301      	movs	r3, #1
 800ebc6:	e7f3      	b.n	800ebb0 <_dtoa_r+0x228>
 800ebc8:	2300      	movs	r3, #0
 800ebca:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ebcc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ebce:	18fb      	adds	r3, r7, r3
 800ebd0:	9300      	str	r3, [sp, #0]
 800ebd2:	3301      	adds	r3, #1
 800ebd4:	2b01      	cmp	r3, #1
 800ebd6:	9307      	str	r3, [sp, #28]
 800ebd8:	bfb8      	it	lt
 800ebda:	2301      	movlt	r3, #1
 800ebdc:	f8db 001c 	ldr.w	r0, [fp, #28]
 800ebe0:	2100      	movs	r1, #0
 800ebe2:	2204      	movs	r2, #4
 800ebe4:	f102 0514 	add.w	r5, r2, #20
 800ebe8:	429d      	cmp	r5, r3
 800ebea:	d91f      	bls.n	800ec2c <_dtoa_r+0x2a4>
 800ebec:	6041      	str	r1, [r0, #4]
 800ebee:	4658      	mov	r0, fp
 800ebf0:	f000 fd8e 	bl	800f710 <_Balloc>
 800ebf4:	4682      	mov	sl, r0
 800ebf6:	2800      	cmp	r0, #0
 800ebf8:	d13c      	bne.n	800ec74 <_dtoa_r+0x2ec>
 800ebfa:	4b1b      	ldr	r3, [pc, #108]	@ (800ec68 <_dtoa_r+0x2e0>)
 800ebfc:	4602      	mov	r2, r0
 800ebfe:	f240 11af 	movw	r1, #431	@ 0x1af
 800ec02:	e6d8      	b.n	800e9b6 <_dtoa_r+0x2e>
 800ec04:	2301      	movs	r3, #1
 800ec06:	e7e0      	b.n	800ebca <_dtoa_r+0x242>
 800ec08:	2401      	movs	r4, #1
 800ec0a:	2300      	movs	r3, #0
 800ec0c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ec0e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ec10:	f04f 33ff 	mov.w	r3, #4294967295
 800ec14:	9300      	str	r3, [sp, #0]
 800ec16:	9307      	str	r3, [sp, #28]
 800ec18:	2200      	movs	r2, #0
 800ec1a:	2312      	movs	r3, #18
 800ec1c:	e7d0      	b.n	800ebc0 <_dtoa_r+0x238>
 800ec1e:	2301      	movs	r3, #1
 800ec20:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ec22:	e7f5      	b.n	800ec10 <_dtoa_r+0x288>
 800ec24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ec26:	9300      	str	r3, [sp, #0]
 800ec28:	9307      	str	r3, [sp, #28]
 800ec2a:	e7d7      	b.n	800ebdc <_dtoa_r+0x254>
 800ec2c:	3101      	adds	r1, #1
 800ec2e:	0052      	lsls	r2, r2, #1
 800ec30:	e7d8      	b.n	800ebe4 <_dtoa_r+0x25c>
 800ec32:	bf00      	nop
 800ec34:	f3af 8000 	nop.w
 800ec38:	636f4361 	.word	0x636f4361
 800ec3c:	3fd287a7 	.word	0x3fd287a7
 800ec40:	8b60c8b3 	.word	0x8b60c8b3
 800ec44:	3fc68a28 	.word	0x3fc68a28
 800ec48:	509f79fb 	.word	0x509f79fb
 800ec4c:	3fd34413 	.word	0x3fd34413
 800ec50:	080126e8 	.word	0x080126e8
 800ec54:	08012e6f 	.word	0x08012e6f
 800ec58:	7ff00000 	.word	0x7ff00000
 800ec5c:	08012768 	.word	0x08012768
 800ec60:	3ff80000 	.word	0x3ff80000
 800ec64:	08012f68 	.word	0x08012f68
 800ec68:	08012ec7 	.word	0x08012ec7
 800ec6c:	08012e6b 	.word	0x08012e6b
 800ec70:	08012767 	.word	0x08012767
 800ec74:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ec78:	6018      	str	r0, [r3, #0]
 800ec7a:	9b07      	ldr	r3, [sp, #28]
 800ec7c:	2b0e      	cmp	r3, #14
 800ec7e:	f200 80a4 	bhi.w	800edca <_dtoa_r+0x442>
 800ec82:	2c00      	cmp	r4, #0
 800ec84:	f000 80a1 	beq.w	800edca <_dtoa_r+0x442>
 800ec88:	2f00      	cmp	r7, #0
 800ec8a:	dd33      	ble.n	800ecf4 <_dtoa_r+0x36c>
 800ec8c:	4bad      	ldr	r3, [pc, #692]	@ (800ef44 <_dtoa_r+0x5bc>)
 800ec8e:	f007 020f 	and.w	r2, r7, #15
 800ec92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ec96:	ed93 7b00 	vldr	d7, [r3]
 800ec9a:	05f8      	lsls	r0, r7, #23
 800ec9c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800eca0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800eca4:	d516      	bpl.n	800ecd4 <_dtoa_r+0x34c>
 800eca6:	4ba8      	ldr	r3, [pc, #672]	@ (800ef48 <_dtoa_r+0x5c0>)
 800eca8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ecac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ecb0:	f7f1 fdcc 	bl	800084c <__aeabi_ddiv>
 800ecb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ecb8:	f004 040f 	and.w	r4, r4, #15
 800ecbc:	2603      	movs	r6, #3
 800ecbe:	4da2      	ldr	r5, [pc, #648]	@ (800ef48 <_dtoa_r+0x5c0>)
 800ecc0:	b954      	cbnz	r4, 800ecd8 <_dtoa_r+0x350>
 800ecc2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ecc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ecca:	f7f1 fdbf 	bl	800084c <__aeabi_ddiv>
 800ecce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ecd2:	e028      	b.n	800ed26 <_dtoa_r+0x39e>
 800ecd4:	2602      	movs	r6, #2
 800ecd6:	e7f2      	b.n	800ecbe <_dtoa_r+0x336>
 800ecd8:	07e1      	lsls	r1, r4, #31
 800ecda:	d508      	bpl.n	800ecee <_dtoa_r+0x366>
 800ecdc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ece0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ece4:	f7f1 fc88 	bl	80005f8 <__aeabi_dmul>
 800ece8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ecec:	3601      	adds	r6, #1
 800ecee:	1064      	asrs	r4, r4, #1
 800ecf0:	3508      	adds	r5, #8
 800ecf2:	e7e5      	b.n	800ecc0 <_dtoa_r+0x338>
 800ecf4:	f000 80d2 	beq.w	800ee9c <_dtoa_r+0x514>
 800ecf8:	427c      	negs	r4, r7
 800ecfa:	4b92      	ldr	r3, [pc, #584]	@ (800ef44 <_dtoa_r+0x5bc>)
 800ecfc:	4d92      	ldr	r5, [pc, #584]	@ (800ef48 <_dtoa_r+0x5c0>)
 800ecfe:	f004 020f 	and.w	r2, r4, #15
 800ed02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ed06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed0a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ed0e:	f7f1 fc73 	bl	80005f8 <__aeabi_dmul>
 800ed12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ed16:	1124      	asrs	r4, r4, #4
 800ed18:	2300      	movs	r3, #0
 800ed1a:	2602      	movs	r6, #2
 800ed1c:	2c00      	cmp	r4, #0
 800ed1e:	f040 80b2 	bne.w	800ee86 <_dtoa_r+0x4fe>
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d1d3      	bne.n	800ecce <_dtoa_r+0x346>
 800ed26:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ed28:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	f000 80b7 	beq.w	800eea0 <_dtoa_r+0x518>
 800ed32:	4b86      	ldr	r3, [pc, #536]	@ (800ef4c <_dtoa_r+0x5c4>)
 800ed34:	2200      	movs	r2, #0
 800ed36:	4620      	mov	r0, r4
 800ed38:	4629      	mov	r1, r5
 800ed3a:	f7f1 fecf 	bl	8000adc <__aeabi_dcmplt>
 800ed3e:	2800      	cmp	r0, #0
 800ed40:	f000 80ae 	beq.w	800eea0 <_dtoa_r+0x518>
 800ed44:	9b07      	ldr	r3, [sp, #28]
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	f000 80aa 	beq.w	800eea0 <_dtoa_r+0x518>
 800ed4c:	9b00      	ldr	r3, [sp, #0]
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	dd37      	ble.n	800edc2 <_dtoa_r+0x43a>
 800ed52:	1e7b      	subs	r3, r7, #1
 800ed54:	9304      	str	r3, [sp, #16]
 800ed56:	4620      	mov	r0, r4
 800ed58:	4b7d      	ldr	r3, [pc, #500]	@ (800ef50 <_dtoa_r+0x5c8>)
 800ed5a:	2200      	movs	r2, #0
 800ed5c:	4629      	mov	r1, r5
 800ed5e:	f7f1 fc4b 	bl	80005f8 <__aeabi_dmul>
 800ed62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ed66:	9c00      	ldr	r4, [sp, #0]
 800ed68:	3601      	adds	r6, #1
 800ed6a:	4630      	mov	r0, r6
 800ed6c:	f7f1 fbda 	bl	8000524 <__aeabi_i2d>
 800ed70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ed74:	f7f1 fc40 	bl	80005f8 <__aeabi_dmul>
 800ed78:	4b76      	ldr	r3, [pc, #472]	@ (800ef54 <_dtoa_r+0x5cc>)
 800ed7a:	2200      	movs	r2, #0
 800ed7c:	f7f1 fa86 	bl	800028c <__adddf3>
 800ed80:	4605      	mov	r5, r0
 800ed82:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ed86:	2c00      	cmp	r4, #0
 800ed88:	f040 808d 	bne.w	800eea6 <_dtoa_r+0x51e>
 800ed8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ed90:	4b71      	ldr	r3, [pc, #452]	@ (800ef58 <_dtoa_r+0x5d0>)
 800ed92:	2200      	movs	r2, #0
 800ed94:	f7f1 fa78 	bl	8000288 <__aeabi_dsub>
 800ed98:	4602      	mov	r2, r0
 800ed9a:	460b      	mov	r3, r1
 800ed9c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800eda0:	462a      	mov	r2, r5
 800eda2:	4633      	mov	r3, r6
 800eda4:	f7f1 feb8 	bl	8000b18 <__aeabi_dcmpgt>
 800eda8:	2800      	cmp	r0, #0
 800edaa:	f040 828b 	bne.w	800f2c4 <_dtoa_r+0x93c>
 800edae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800edb2:	462a      	mov	r2, r5
 800edb4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800edb8:	f7f1 fe90 	bl	8000adc <__aeabi_dcmplt>
 800edbc:	2800      	cmp	r0, #0
 800edbe:	f040 8128 	bne.w	800f012 <_dtoa_r+0x68a>
 800edc2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800edc6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800edca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800edcc:	2b00      	cmp	r3, #0
 800edce:	f2c0 815a 	blt.w	800f086 <_dtoa_r+0x6fe>
 800edd2:	2f0e      	cmp	r7, #14
 800edd4:	f300 8157 	bgt.w	800f086 <_dtoa_r+0x6fe>
 800edd8:	4b5a      	ldr	r3, [pc, #360]	@ (800ef44 <_dtoa_r+0x5bc>)
 800edda:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800edde:	ed93 7b00 	vldr	d7, [r3]
 800ede2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	ed8d 7b00 	vstr	d7, [sp]
 800edea:	da03      	bge.n	800edf4 <_dtoa_r+0x46c>
 800edec:	9b07      	ldr	r3, [sp, #28]
 800edee:	2b00      	cmp	r3, #0
 800edf0:	f340 8101 	ble.w	800eff6 <_dtoa_r+0x66e>
 800edf4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800edf8:	4656      	mov	r6, sl
 800edfa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800edfe:	4620      	mov	r0, r4
 800ee00:	4629      	mov	r1, r5
 800ee02:	f7f1 fd23 	bl	800084c <__aeabi_ddiv>
 800ee06:	f7f1 fea7 	bl	8000b58 <__aeabi_d2iz>
 800ee0a:	4680      	mov	r8, r0
 800ee0c:	f7f1 fb8a 	bl	8000524 <__aeabi_i2d>
 800ee10:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ee14:	f7f1 fbf0 	bl	80005f8 <__aeabi_dmul>
 800ee18:	4602      	mov	r2, r0
 800ee1a:	460b      	mov	r3, r1
 800ee1c:	4620      	mov	r0, r4
 800ee1e:	4629      	mov	r1, r5
 800ee20:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ee24:	f7f1 fa30 	bl	8000288 <__aeabi_dsub>
 800ee28:	f806 4b01 	strb.w	r4, [r6], #1
 800ee2c:	9d07      	ldr	r5, [sp, #28]
 800ee2e:	eba6 040a 	sub.w	r4, r6, sl
 800ee32:	42a5      	cmp	r5, r4
 800ee34:	4602      	mov	r2, r0
 800ee36:	460b      	mov	r3, r1
 800ee38:	f040 8117 	bne.w	800f06a <_dtoa_r+0x6e2>
 800ee3c:	f7f1 fa26 	bl	800028c <__adddf3>
 800ee40:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ee44:	4604      	mov	r4, r0
 800ee46:	460d      	mov	r5, r1
 800ee48:	f7f1 fe66 	bl	8000b18 <__aeabi_dcmpgt>
 800ee4c:	2800      	cmp	r0, #0
 800ee4e:	f040 80f9 	bne.w	800f044 <_dtoa_r+0x6bc>
 800ee52:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ee56:	4620      	mov	r0, r4
 800ee58:	4629      	mov	r1, r5
 800ee5a:	f7f1 fe35 	bl	8000ac8 <__aeabi_dcmpeq>
 800ee5e:	b118      	cbz	r0, 800ee68 <_dtoa_r+0x4e0>
 800ee60:	f018 0f01 	tst.w	r8, #1
 800ee64:	f040 80ee 	bne.w	800f044 <_dtoa_r+0x6bc>
 800ee68:	4649      	mov	r1, r9
 800ee6a:	4658      	mov	r0, fp
 800ee6c:	f000 fc90 	bl	800f790 <_Bfree>
 800ee70:	2300      	movs	r3, #0
 800ee72:	7033      	strb	r3, [r6, #0]
 800ee74:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ee76:	3701      	adds	r7, #1
 800ee78:	601f      	str	r7, [r3, #0]
 800ee7a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	f000 831d 	beq.w	800f4bc <_dtoa_r+0xb34>
 800ee82:	601e      	str	r6, [r3, #0]
 800ee84:	e31a      	b.n	800f4bc <_dtoa_r+0xb34>
 800ee86:	07e2      	lsls	r2, r4, #31
 800ee88:	d505      	bpl.n	800ee96 <_dtoa_r+0x50e>
 800ee8a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ee8e:	f7f1 fbb3 	bl	80005f8 <__aeabi_dmul>
 800ee92:	3601      	adds	r6, #1
 800ee94:	2301      	movs	r3, #1
 800ee96:	1064      	asrs	r4, r4, #1
 800ee98:	3508      	adds	r5, #8
 800ee9a:	e73f      	b.n	800ed1c <_dtoa_r+0x394>
 800ee9c:	2602      	movs	r6, #2
 800ee9e:	e742      	b.n	800ed26 <_dtoa_r+0x39e>
 800eea0:	9c07      	ldr	r4, [sp, #28]
 800eea2:	9704      	str	r7, [sp, #16]
 800eea4:	e761      	b.n	800ed6a <_dtoa_r+0x3e2>
 800eea6:	4b27      	ldr	r3, [pc, #156]	@ (800ef44 <_dtoa_r+0x5bc>)
 800eea8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800eeaa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800eeae:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800eeb2:	4454      	add	r4, sl
 800eeb4:	2900      	cmp	r1, #0
 800eeb6:	d053      	beq.n	800ef60 <_dtoa_r+0x5d8>
 800eeb8:	4928      	ldr	r1, [pc, #160]	@ (800ef5c <_dtoa_r+0x5d4>)
 800eeba:	2000      	movs	r0, #0
 800eebc:	f7f1 fcc6 	bl	800084c <__aeabi_ddiv>
 800eec0:	4633      	mov	r3, r6
 800eec2:	462a      	mov	r2, r5
 800eec4:	f7f1 f9e0 	bl	8000288 <__aeabi_dsub>
 800eec8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800eecc:	4656      	mov	r6, sl
 800eece:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eed2:	f7f1 fe41 	bl	8000b58 <__aeabi_d2iz>
 800eed6:	4605      	mov	r5, r0
 800eed8:	f7f1 fb24 	bl	8000524 <__aeabi_i2d>
 800eedc:	4602      	mov	r2, r0
 800eede:	460b      	mov	r3, r1
 800eee0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eee4:	f7f1 f9d0 	bl	8000288 <__aeabi_dsub>
 800eee8:	3530      	adds	r5, #48	@ 0x30
 800eeea:	4602      	mov	r2, r0
 800eeec:	460b      	mov	r3, r1
 800eeee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800eef2:	f806 5b01 	strb.w	r5, [r6], #1
 800eef6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800eefa:	f7f1 fdef 	bl	8000adc <__aeabi_dcmplt>
 800eefe:	2800      	cmp	r0, #0
 800ef00:	d171      	bne.n	800efe6 <_dtoa_r+0x65e>
 800ef02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ef06:	4911      	ldr	r1, [pc, #68]	@ (800ef4c <_dtoa_r+0x5c4>)
 800ef08:	2000      	movs	r0, #0
 800ef0a:	f7f1 f9bd 	bl	8000288 <__aeabi_dsub>
 800ef0e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ef12:	f7f1 fde3 	bl	8000adc <__aeabi_dcmplt>
 800ef16:	2800      	cmp	r0, #0
 800ef18:	f040 8095 	bne.w	800f046 <_dtoa_r+0x6be>
 800ef1c:	42a6      	cmp	r6, r4
 800ef1e:	f43f af50 	beq.w	800edc2 <_dtoa_r+0x43a>
 800ef22:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ef26:	4b0a      	ldr	r3, [pc, #40]	@ (800ef50 <_dtoa_r+0x5c8>)
 800ef28:	2200      	movs	r2, #0
 800ef2a:	f7f1 fb65 	bl	80005f8 <__aeabi_dmul>
 800ef2e:	4b08      	ldr	r3, [pc, #32]	@ (800ef50 <_dtoa_r+0x5c8>)
 800ef30:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ef34:	2200      	movs	r2, #0
 800ef36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ef3a:	f7f1 fb5d 	bl	80005f8 <__aeabi_dmul>
 800ef3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ef42:	e7c4      	b.n	800eece <_dtoa_r+0x546>
 800ef44:	08012f68 	.word	0x08012f68
 800ef48:	08012f40 	.word	0x08012f40
 800ef4c:	3ff00000 	.word	0x3ff00000
 800ef50:	40240000 	.word	0x40240000
 800ef54:	401c0000 	.word	0x401c0000
 800ef58:	40140000 	.word	0x40140000
 800ef5c:	3fe00000 	.word	0x3fe00000
 800ef60:	4631      	mov	r1, r6
 800ef62:	4628      	mov	r0, r5
 800ef64:	f7f1 fb48 	bl	80005f8 <__aeabi_dmul>
 800ef68:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ef6c:	9415      	str	r4, [sp, #84]	@ 0x54
 800ef6e:	4656      	mov	r6, sl
 800ef70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ef74:	f7f1 fdf0 	bl	8000b58 <__aeabi_d2iz>
 800ef78:	4605      	mov	r5, r0
 800ef7a:	f7f1 fad3 	bl	8000524 <__aeabi_i2d>
 800ef7e:	4602      	mov	r2, r0
 800ef80:	460b      	mov	r3, r1
 800ef82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ef86:	f7f1 f97f 	bl	8000288 <__aeabi_dsub>
 800ef8a:	3530      	adds	r5, #48	@ 0x30
 800ef8c:	f806 5b01 	strb.w	r5, [r6], #1
 800ef90:	4602      	mov	r2, r0
 800ef92:	460b      	mov	r3, r1
 800ef94:	42a6      	cmp	r6, r4
 800ef96:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ef9a:	f04f 0200 	mov.w	r2, #0
 800ef9e:	d124      	bne.n	800efea <_dtoa_r+0x662>
 800efa0:	4bac      	ldr	r3, [pc, #688]	@ (800f254 <_dtoa_r+0x8cc>)
 800efa2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800efa6:	f7f1 f971 	bl	800028c <__adddf3>
 800efaa:	4602      	mov	r2, r0
 800efac:	460b      	mov	r3, r1
 800efae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800efb2:	f7f1 fdb1 	bl	8000b18 <__aeabi_dcmpgt>
 800efb6:	2800      	cmp	r0, #0
 800efb8:	d145      	bne.n	800f046 <_dtoa_r+0x6be>
 800efba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800efbe:	49a5      	ldr	r1, [pc, #660]	@ (800f254 <_dtoa_r+0x8cc>)
 800efc0:	2000      	movs	r0, #0
 800efc2:	f7f1 f961 	bl	8000288 <__aeabi_dsub>
 800efc6:	4602      	mov	r2, r0
 800efc8:	460b      	mov	r3, r1
 800efca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800efce:	f7f1 fd85 	bl	8000adc <__aeabi_dcmplt>
 800efd2:	2800      	cmp	r0, #0
 800efd4:	f43f aef5 	beq.w	800edc2 <_dtoa_r+0x43a>
 800efd8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800efda:	1e73      	subs	r3, r6, #1
 800efdc:	9315      	str	r3, [sp, #84]	@ 0x54
 800efde:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800efe2:	2b30      	cmp	r3, #48	@ 0x30
 800efe4:	d0f8      	beq.n	800efd8 <_dtoa_r+0x650>
 800efe6:	9f04      	ldr	r7, [sp, #16]
 800efe8:	e73e      	b.n	800ee68 <_dtoa_r+0x4e0>
 800efea:	4b9b      	ldr	r3, [pc, #620]	@ (800f258 <_dtoa_r+0x8d0>)
 800efec:	f7f1 fb04 	bl	80005f8 <__aeabi_dmul>
 800eff0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eff4:	e7bc      	b.n	800ef70 <_dtoa_r+0x5e8>
 800eff6:	d10c      	bne.n	800f012 <_dtoa_r+0x68a>
 800eff8:	4b98      	ldr	r3, [pc, #608]	@ (800f25c <_dtoa_r+0x8d4>)
 800effa:	2200      	movs	r2, #0
 800effc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f000:	f7f1 fafa 	bl	80005f8 <__aeabi_dmul>
 800f004:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f008:	f7f1 fd7c 	bl	8000b04 <__aeabi_dcmpge>
 800f00c:	2800      	cmp	r0, #0
 800f00e:	f000 8157 	beq.w	800f2c0 <_dtoa_r+0x938>
 800f012:	2400      	movs	r4, #0
 800f014:	4625      	mov	r5, r4
 800f016:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f018:	43db      	mvns	r3, r3
 800f01a:	9304      	str	r3, [sp, #16]
 800f01c:	4656      	mov	r6, sl
 800f01e:	2700      	movs	r7, #0
 800f020:	4621      	mov	r1, r4
 800f022:	4658      	mov	r0, fp
 800f024:	f000 fbb4 	bl	800f790 <_Bfree>
 800f028:	2d00      	cmp	r5, #0
 800f02a:	d0dc      	beq.n	800efe6 <_dtoa_r+0x65e>
 800f02c:	b12f      	cbz	r7, 800f03a <_dtoa_r+0x6b2>
 800f02e:	42af      	cmp	r7, r5
 800f030:	d003      	beq.n	800f03a <_dtoa_r+0x6b2>
 800f032:	4639      	mov	r1, r7
 800f034:	4658      	mov	r0, fp
 800f036:	f000 fbab 	bl	800f790 <_Bfree>
 800f03a:	4629      	mov	r1, r5
 800f03c:	4658      	mov	r0, fp
 800f03e:	f000 fba7 	bl	800f790 <_Bfree>
 800f042:	e7d0      	b.n	800efe6 <_dtoa_r+0x65e>
 800f044:	9704      	str	r7, [sp, #16]
 800f046:	4633      	mov	r3, r6
 800f048:	461e      	mov	r6, r3
 800f04a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f04e:	2a39      	cmp	r2, #57	@ 0x39
 800f050:	d107      	bne.n	800f062 <_dtoa_r+0x6da>
 800f052:	459a      	cmp	sl, r3
 800f054:	d1f8      	bne.n	800f048 <_dtoa_r+0x6c0>
 800f056:	9a04      	ldr	r2, [sp, #16]
 800f058:	3201      	adds	r2, #1
 800f05a:	9204      	str	r2, [sp, #16]
 800f05c:	2230      	movs	r2, #48	@ 0x30
 800f05e:	f88a 2000 	strb.w	r2, [sl]
 800f062:	781a      	ldrb	r2, [r3, #0]
 800f064:	3201      	adds	r2, #1
 800f066:	701a      	strb	r2, [r3, #0]
 800f068:	e7bd      	b.n	800efe6 <_dtoa_r+0x65e>
 800f06a:	4b7b      	ldr	r3, [pc, #492]	@ (800f258 <_dtoa_r+0x8d0>)
 800f06c:	2200      	movs	r2, #0
 800f06e:	f7f1 fac3 	bl	80005f8 <__aeabi_dmul>
 800f072:	2200      	movs	r2, #0
 800f074:	2300      	movs	r3, #0
 800f076:	4604      	mov	r4, r0
 800f078:	460d      	mov	r5, r1
 800f07a:	f7f1 fd25 	bl	8000ac8 <__aeabi_dcmpeq>
 800f07e:	2800      	cmp	r0, #0
 800f080:	f43f aebb 	beq.w	800edfa <_dtoa_r+0x472>
 800f084:	e6f0      	b.n	800ee68 <_dtoa_r+0x4e0>
 800f086:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f088:	2a00      	cmp	r2, #0
 800f08a:	f000 80db 	beq.w	800f244 <_dtoa_r+0x8bc>
 800f08e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f090:	2a01      	cmp	r2, #1
 800f092:	f300 80bf 	bgt.w	800f214 <_dtoa_r+0x88c>
 800f096:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800f098:	2a00      	cmp	r2, #0
 800f09a:	f000 80b7 	beq.w	800f20c <_dtoa_r+0x884>
 800f09e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800f0a2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f0a4:	4646      	mov	r6, r8
 800f0a6:	9a08      	ldr	r2, [sp, #32]
 800f0a8:	2101      	movs	r1, #1
 800f0aa:	441a      	add	r2, r3
 800f0ac:	4658      	mov	r0, fp
 800f0ae:	4498      	add	r8, r3
 800f0b0:	9208      	str	r2, [sp, #32]
 800f0b2:	f000 fc6b 	bl	800f98c <__i2b>
 800f0b6:	4605      	mov	r5, r0
 800f0b8:	b15e      	cbz	r6, 800f0d2 <_dtoa_r+0x74a>
 800f0ba:	9b08      	ldr	r3, [sp, #32]
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	dd08      	ble.n	800f0d2 <_dtoa_r+0x74a>
 800f0c0:	42b3      	cmp	r3, r6
 800f0c2:	9a08      	ldr	r2, [sp, #32]
 800f0c4:	bfa8      	it	ge
 800f0c6:	4633      	movge	r3, r6
 800f0c8:	eba8 0803 	sub.w	r8, r8, r3
 800f0cc:	1af6      	subs	r6, r6, r3
 800f0ce:	1ad3      	subs	r3, r2, r3
 800f0d0:	9308      	str	r3, [sp, #32]
 800f0d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f0d4:	b1f3      	cbz	r3, 800f114 <_dtoa_r+0x78c>
 800f0d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	f000 80b7 	beq.w	800f24c <_dtoa_r+0x8c4>
 800f0de:	b18c      	cbz	r4, 800f104 <_dtoa_r+0x77c>
 800f0e0:	4629      	mov	r1, r5
 800f0e2:	4622      	mov	r2, r4
 800f0e4:	4658      	mov	r0, fp
 800f0e6:	f000 fd11 	bl	800fb0c <__pow5mult>
 800f0ea:	464a      	mov	r2, r9
 800f0ec:	4601      	mov	r1, r0
 800f0ee:	4605      	mov	r5, r0
 800f0f0:	4658      	mov	r0, fp
 800f0f2:	f000 fc61 	bl	800f9b8 <__multiply>
 800f0f6:	4649      	mov	r1, r9
 800f0f8:	9004      	str	r0, [sp, #16]
 800f0fa:	4658      	mov	r0, fp
 800f0fc:	f000 fb48 	bl	800f790 <_Bfree>
 800f100:	9b04      	ldr	r3, [sp, #16]
 800f102:	4699      	mov	r9, r3
 800f104:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f106:	1b1a      	subs	r2, r3, r4
 800f108:	d004      	beq.n	800f114 <_dtoa_r+0x78c>
 800f10a:	4649      	mov	r1, r9
 800f10c:	4658      	mov	r0, fp
 800f10e:	f000 fcfd 	bl	800fb0c <__pow5mult>
 800f112:	4681      	mov	r9, r0
 800f114:	2101      	movs	r1, #1
 800f116:	4658      	mov	r0, fp
 800f118:	f000 fc38 	bl	800f98c <__i2b>
 800f11c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f11e:	4604      	mov	r4, r0
 800f120:	2b00      	cmp	r3, #0
 800f122:	f000 81cf 	beq.w	800f4c4 <_dtoa_r+0xb3c>
 800f126:	461a      	mov	r2, r3
 800f128:	4601      	mov	r1, r0
 800f12a:	4658      	mov	r0, fp
 800f12c:	f000 fcee 	bl	800fb0c <__pow5mult>
 800f130:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f132:	2b01      	cmp	r3, #1
 800f134:	4604      	mov	r4, r0
 800f136:	f300 8095 	bgt.w	800f264 <_dtoa_r+0x8dc>
 800f13a:	9b02      	ldr	r3, [sp, #8]
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	f040 8087 	bne.w	800f250 <_dtoa_r+0x8c8>
 800f142:	9b03      	ldr	r3, [sp, #12]
 800f144:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f148:	2b00      	cmp	r3, #0
 800f14a:	f040 8089 	bne.w	800f260 <_dtoa_r+0x8d8>
 800f14e:	9b03      	ldr	r3, [sp, #12]
 800f150:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f154:	0d1b      	lsrs	r3, r3, #20
 800f156:	051b      	lsls	r3, r3, #20
 800f158:	b12b      	cbz	r3, 800f166 <_dtoa_r+0x7de>
 800f15a:	9b08      	ldr	r3, [sp, #32]
 800f15c:	3301      	adds	r3, #1
 800f15e:	9308      	str	r3, [sp, #32]
 800f160:	f108 0801 	add.w	r8, r8, #1
 800f164:	2301      	movs	r3, #1
 800f166:	930a      	str	r3, [sp, #40]	@ 0x28
 800f168:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	f000 81b0 	beq.w	800f4d0 <_dtoa_r+0xb48>
 800f170:	6923      	ldr	r3, [r4, #16]
 800f172:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f176:	6918      	ldr	r0, [r3, #16]
 800f178:	f000 fbbc 	bl	800f8f4 <__hi0bits>
 800f17c:	f1c0 0020 	rsb	r0, r0, #32
 800f180:	9b08      	ldr	r3, [sp, #32]
 800f182:	4418      	add	r0, r3
 800f184:	f010 001f 	ands.w	r0, r0, #31
 800f188:	d077      	beq.n	800f27a <_dtoa_r+0x8f2>
 800f18a:	f1c0 0320 	rsb	r3, r0, #32
 800f18e:	2b04      	cmp	r3, #4
 800f190:	dd6b      	ble.n	800f26a <_dtoa_r+0x8e2>
 800f192:	9b08      	ldr	r3, [sp, #32]
 800f194:	f1c0 001c 	rsb	r0, r0, #28
 800f198:	4403      	add	r3, r0
 800f19a:	4480      	add	r8, r0
 800f19c:	4406      	add	r6, r0
 800f19e:	9308      	str	r3, [sp, #32]
 800f1a0:	f1b8 0f00 	cmp.w	r8, #0
 800f1a4:	dd05      	ble.n	800f1b2 <_dtoa_r+0x82a>
 800f1a6:	4649      	mov	r1, r9
 800f1a8:	4642      	mov	r2, r8
 800f1aa:	4658      	mov	r0, fp
 800f1ac:	f000 fd08 	bl	800fbc0 <__lshift>
 800f1b0:	4681      	mov	r9, r0
 800f1b2:	9b08      	ldr	r3, [sp, #32]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	dd05      	ble.n	800f1c4 <_dtoa_r+0x83c>
 800f1b8:	4621      	mov	r1, r4
 800f1ba:	461a      	mov	r2, r3
 800f1bc:	4658      	mov	r0, fp
 800f1be:	f000 fcff 	bl	800fbc0 <__lshift>
 800f1c2:	4604      	mov	r4, r0
 800f1c4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d059      	beq.n	800f27e <_dtoa_r+0x8f6>
 800f1ca:	4621      	mov	r1, r4
 800f1cc:	4648      	mov	r0, r9
 800f1ce:	f000 fd63 	bl	800fc98 <__mcmp>
 800f1d2:	2800      	cmp	r0, #0
 800f1d4:	da53      	bge.n	800f27e <_dtoa_r+0x8f6>
 800f1d6:	1e7b      	subs	r3, r7, #1
 800f1d8:	9304      	str	r3, [sp, #16]
 800f1da:	4649      	mov	r1, r9
 800f1dc:	2300      	movs	r3, #0
 800f1de:	220a      	movs	r2, #10
 800f1e0:	4658      	mov	r0, fp
 800f1e2:	f000 faf7 	bl	800f7d4 <__multadd>
 800f1e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f1e8:	4681      	mov	r9, r0
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	f000 8172 	beq.w	800f4d4 <_dtoa_r+0xb4c>
 800f1f0:	2300      	movs	r3, #0
 800f1f2:	4629      	mov	r1, r5
 800f1f4:	220a      	movs	r2, #10
 800f1f6:	4658      	mov	r0, fp
 800f1f8:	f000 faec 	bl	800f7d4 <__multadd>
 800f1fc:	9b00      	ldr	r3, [sp, #0]
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	4605      	mov	r5, r0
 800f202:	dc67      	bgt.n	800f2d4 <_dtoa_r+0x94c>
 800f204:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f206:	2b02      	cmp	r3, #2
 800f208:	dc41      	bgt.n	800f28e <_dtoa_r+0x906>
 800f20a:	e063      	b.n	800f2d4 <_dtoa_r+0x94c>
 800f20c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f20e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800f212:	e746      	b.n	800f0a2 <_dtoa_r+0x71a>
 800f214:	9b07      	ldr	r3, [sp, #28]
 800f216:	1e5c      	subs	r4, r3, #1
 800f218:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f21a:	42a3      	cmp	r3, r4
 800f21c:	bfbf      	itttt	lt
 800f21e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800f220:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800f222:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800f224:	1ae3      	sublt	r3, r4, r3
 800f226:	bfb4      	ite	lt
 800f228:	18d2      	addlt	r2, r2, r3
 800f22a:	1b1c      	subge	r4, r3, r4
 800f22c:	9b07      	ldr	r3, [sp, #28]
 800f22e:	bfbc      	itt	lt
 800f230:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800f232:	2400      	movlt	r4, #0
 800f234:	2b00      	cmp	r3, #0
 800f236:	bfb5      	itete	lt
 800f238:	eba8 0603 	sublt.w	r6, r8, r3
 800f23c:	9b07      	ldrge	r3, [sp, #28]
 800f23e:	2300      	movlt	r3, #0
 800f240:	4646      	movge	r6, r8
 800f242:	e730      	b.n	800f0a6 <_dtoa_r+0x71e>
 800f244:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f246:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800f248:	4646      	mov	r6, r8
 800f24a:	e735      	b.n	800f0b8 <_dtoa_r+0x730>
 800f24c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f24e:	e75c      	b.n	800f10a <_dtoa_r+0x782>
 800f250:	2300      	movs	r3, #0
 800f252:	e788      	b.n	800f166 <_dtoa_r+0x7de>
 800f254:	3fe00000 	.word	0x3fe00000
 800f258:	40240000 	.word	0x40240000
 800f25c:	40140000 	.word	0x40140000
 800f260:	9b02      	ldr	r3, [sp, #8]
 800f262:	e780      	b.n	800f166 <_dtoa_r+0x7de>
 800f264:	2300      	movs	r3, #0
 800f266:	930a      	str	r3, [sp, #40]	@ 0x28
 800f268:	e782      	b.n	800f170 <_dtoa_r+0x7e8>
 800f26a:	d099      	beq.n	800f1a0 <_dtoa_r+0x818>
 800f26c:	9a08      	ldr	r2, [sp, #32]
 800f26e:	331c      	adds	r3, #28
 800f270:	441a      	add	r2, r3
 800f272:	4498      	add	r8, r3
 800f274:	441e      	add	r6, r3
 800f276:	9208      	str	r2, [sp, #32]
 800f278:	e792      	b.n	800f1a0 <_dtoa_r+0x818>
 800f27a:	4603      	mov	r3, r0
 800f27c:	e7f6      	b.n	800f26c <_dtoa_r+0x8e4>
 800f27e:	9b07      	ldr	r3, [sp, #28]
 800f280:	9704      	str	r7, [sp, #16]
 800f282:	2b00      	cmp	r3, #0
 800f284:	dc20      	bgt.n	800f2c8 <_dtoa_r+0x940>
 800f286:	9300      	str	r3, [sp, #0]
 800f288:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f28a:	2b02      	cmp	r3, #2
 800f28c:	dd1e      	ble.n	800f2cc <_dtoa_r+0x944>
 800f28e:	9b00      	ldr	r3, [sp, #0]
 800f290:	2b00      	cmp	r3, #0
 800f292:	f47f aec0 	bne.w	800f016 <_dtoa_r+0x68e>
 800f296:	4621      	mov	r1, r4
 800f298:	2205      	movs	r2, #5
 800f29a:	4658      	mov	r0, fp
 800f29c:	f000 fa9a 	bl	800f7d4 <__multadd>
 800f2a0:	4601      	mov	r1, r0
 800f2a2:	4604      	mov	r4, r0
 800f2a4:	4648      	mov	r0, r9
 800f2a6:	f000 fcf7 	bl	800fc98 <__mcmp>
 800f2aa:	2800      	cmp	r0, #0
 800f2ac:	f77f aeb3 	ble.w	800f016 <_dtoa_r+0x68e>
 800f2b0:	4656      	mov	r6, sl
 800f2b2:	2331      	movs	r3, #49	@ 0x31
 800f2b4:	f806 3b01 	strb.w	r3, [r6], #1
 800f2b8:	9b04      	ldr	r3, [sp, #16]
 800f2ba:	3301      	adds	r3, #1
 800f2bc:	9304      	str	r3, [sp, #16]
 800f2be:	e6ae      	b.n	800f01e <_dtoa_r+0x696>
 800f2c0:	9c07      	ldr	r4, [sp, #28]
 800f2c2:	9704      	str	r7, [sp, #16]
 800f2c4:	4625      	mov	r5, r4
 800f2c6:	e7f3      	b.n	800f2b0 <_dtoa_r+0x928>
 800f2c8:	9b07      	ldr	r3, [sp, #28]
 800f2ca:	9300      	str	r3, [sp, #0]
 800f2cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	f000 8104 	beq.w	800f4dc <_dtoa_r+0xb54>
 800f2d4:	2e00      	cmp	r6, #0
 800f2d6:	dd05      	ble.n	800f2e4 <_dtoa_r+0x95c>
 800f2d8:	4629      	mov	r1, r5
 800f2da:	4632      	mov	r2, r6
 800f2dc:	4658      	mov	r0, fp
 800f2de:	f000 fc6f 	bl	800fbc0 <__lshift>
 800f2e2:	4605      	mov	r5, r0
 800f2e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d05a      	beq.n	800f3a0 <_dtoa_r+0xa18>
 800f2ea:	6869      	ldr	r1, [r5, #4]
 800f2ec:	4658      	mov	r0, fp
 800f2ee:	f000 fa0f 	bl	800f710 <_Balloc>
 800f2f2:	4606      	mov	r6, r0
 800f2f4:	b928      	cbnz	r0, 800f302 <_dtoa_r+0x97a>
 800f2f6:	4b84      	ldr	r3, [pc, #528]	@ (800f508 <_dtoa_r+0xb80>)
 800f2f8:	4602      	mov	r2, r0
 800f2fa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800f2fe:	f7ff bb5a 	b.w	800e9b6 <_dtoa_r+0x2e>
 800f302:	692a      	ldr	r2, [r5, #16]
 800f304:	3202      	adds	r2, #2
 800f306:	0092      	lsls	r2, r2, #2
 800f308:	f105 010c 	add.w	r1, r5, #12
 800f30c:	300c      	adds	r0, #12
 800f30e:	f7ff fa7f 	bl	800e810 <memcpy>
 800f312:	2201      	movs	r2, #1
 800f314:	4631      	mov	r1, r6
 800f316:	4658      	mov	r0, fp
 800f318:	f000 fc52 	bl	800fbc0 <__lshift>
 800f31c:	f10a 0301 	add.w	r3, sl, #1
 800f320:	9307      	str	r3, [sp, #28]
 800f322:	9b00      	ldr	r3, [sp, #0]
 800f324:	4453      	add	r3, sl
 800f326:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f328:	9b02      	ldr	r3, [sp, #8]
 800f32a:	f003 0301 	and.w	r3, r3, #1
 800f32e:	462f      	mov	r7, r5
 800f330:	930a      	str	r3, [sp, #40]	@ 0x28
 800f332:	4605      	mov	r5, r0
 800f334:	9b07      	ldr	r3, [sp, #28]
 800f336:	4621      	mov	r1, r4
 800f338:	3b01      	subs	r3, #1
 800f33a:	4648      	mov	r0, r9
 800f33c:	9300      	str	r3, [sp, #0]
 800f33e:	f7ff fa99 	bl	800e874 <quorem>
 800f342:	4639      	mov	r1, r7
 800f344:	9002      	str	r0, [sp, #8]
 800f346:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800f34a:	4648      	mov	r0, r9
 800f34c:	f000 fca4 	bl	800fc98 <__mcmp>
 800f350:	462a      	mov	r2, r5
 800f352:	9008      	str	r0, [sp, #32]
 800f354:	4621      	mov	r1, r4
 800f356:	4658      	mov	r0, fp
 800f358:	f000 fcba 	bl	800fcd0 <__mdiff>
 800f35c:	68c2      	ldr	r2, [r0, #12]
 800f35e:	4606      	mov	r6, r0
 800f360:	bb02      	cbnz	r2, 800f3a4 <_dtoa_r+0xa1c>
 800f362:	4601      	mov	r1, r0
 800f364:	4648      	mov	r0, r9
 800f366:	f000 fc97 	bl	800fc98 <__mcmp>
 800f36a:	4602      	mov	r2, r0
 800f36c:	4631      	mov	r1, r6
 800f36e:	4658      	mov	r0, fp
 800f370:	920e      	str	r2, [sp, #56]	@ 0x38
 800f372:	f000 fa0d 	bl	800f790 <_Bfree>
 800f376:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f378:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f37a:	9e07      	ldr	r6, [sp, #28]
 800f37c:	ea43 0102 	orr.w	r1, r3, r2
 800f380:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f382:	4319      	orrs	r1, r3
 800f384:	d110      	bne.n	800f3a8 <_dtoa_r+0xa20>
 800f386:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f38a:	d029      	beq.n	800f3e0 <_dtoa_r+0xa58>
 800f38c:	9b08      	ldr	r3, [sp, #32]
 800f38e:	2b00      	cmp	r3, #0
 800f390:	dd02      	ble.n	800f398 <_dtoa_r+0xa10>
 800f392:	9b02      	ldr	r3, [sp, #8]
 800f394:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800f398:	9b00      	ldr	r3, [sp, #0]
 800f39a:	f883 8000 	strb.w	r8, [r3]
 800f39e:	e63f      	b.n	800f020 <_dtoa_r+0x698>
 800f3a0:	4628      	mov	r0, r5
 800f3a2:	e7bb      	b.n	800f31c <_dtoa_r+0x994>
 800f3a4:	2201      	movs	r2, #1
 800f3a6:	e7e1      	b.n	800f36c <_dtoa_r+0x9e4>
 800f3a8:	9b08      	ldr	r3, [sp, #32]
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	db04      	blt.n	800f3b8 <_dtoa_r+0xa30>
 800f3ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f3b0:	430b      	orrs	r3, r1
 800f3b2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f3b4:	430b      	orrs	r3, r1
 800f3b6:	d120      	bne.n	800f3fa <_dtoa_r+0xa72>
 800f3b8:	2a00      	cmp	r2, #0
 800f3ba:	dded      	ble.n	800f398 <_dtoa_r+0xa10>
 800f3bc:	4649      	mov	r1, r9
 800f3be:	2201      	movs	r2, #1
 800f3c0:	4658      	mov	r0, fp
 800f3c2:	f000 fbfd 	bl	800fbc0 <__lshift>
 800f3c6:	4621      	mov	r1, r4
 800f3c8:	4681      	mov	r9, r0
 800f3ca:	f000 fc65 	bl	800fc98 <__mcmp>
 800f3ce:	2800      	cmp	r0, #0
 800f3d0:	dc03      	bgt.n	800f3da <_dtoa_r+0xa52>
 800f3d2:	d1e1      	bne.n	800f398 <_dtoa_r+0xa10>
 800f3d4:	f018 0f01 	tst.w	r8, #1
 800f3d8:	d0de      	beq.n	800f398 <_dtoa_r+0xa10>
 800f3da:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f3de:	d1d8      	bne.n	800f392 <_dtoa_r+0xa0a>
 800f3e0:	9a00      	ldr	r2, [sp, #0]
 800f3e2:	2339      	movs	r3, #57	@ 0x39
 800f3e4:	7013      	strb	r3, [r2, #0]
 800f3e6:	4633      	mov	r3, r6
 800f3e8:	461e      	mov	r6, r3
 800f3ea:	3b01      	subs	r3, #1
 800f3ec:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800f3f0:	2a39      	cmp	r2, #57	@ 0x39
 800f3f2:	d052      	beq.n	800f49a <_dtoa_r+0xb12>
 800f3f4:	3201      	adds	r2, #1
 800f3f6:	701a      	strb	r2, [r3, #0]
 800f3f8:	e612      	b.n	800f020 <_dtoa_r+0x698>
 800f3fa:	2a00      	cmp	r2, #0
 800f3fc:	dd07      	ble.n	800f40e <_dtoa_r+0xa86>
 800f3fe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f402:	d0ed      	beq.n	800f3e0 <_dtoa_r+0xa58>
 800f404:	9a00      	ldr	r2, [sp, #0]
 800f406:	f108 0301 	add.w	r3, r8, #1
 800f40a:	7013      	strb	r3, [r2, #0]
 800f40c:	e608      	b.n	800f020 <_dtoa_r+0x698>
 800f40e:	9b07      	ldr	r3, [sp, #28]
 800f410:	9a07      	ldr	r2, [sp, #28]
 800f412:	f803 8c01 	strb.w	r8, [r3, #-1]
 800f416:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f418:	4293      	cmp	r3, r2
 800f41a:	d028      	beq.n	800f46e <_dtoa_r+0xae6>
 800f41c:	4649      	mov	r1, r9
 800f41e:	2300      	movs	r3, #0
 800f420:	220a      	movs	r2, #10
 800f422:	4658      	mov	r0, fp
 800f424:	f000 f9d6 	bl	800f7d4 <__multadd>
 800f428:	42af      	cmp	r7, r5
 800f42a:	4681      	mov	r9, r0
 800f42c:	f04f 0300 	mov.w	r3, #0
 800f430:	f04f 020a 	mov.w	r2, #10
 800f434:	4639      	mov	r1, r7
 800f436:	4658      	mov	r0, fp
 800f438:	d107      	bne.n	800f44a <_dtoa_r+0xac2>
 800f43a:	f000 f9cb 	bl	800f7d4 <__multadd>
 800f43e:	4607      	mov	r7, r0
 800f440:	4605      	mov	r5, r0
 800f442:	9b07      	ldr	r3, [sp, #28]
 800f444:	3301      	adds	r3, #1
 800f446:	9307      	str	r3, [sp, #28]
 800f448:	e774      	b.n	800f334 <_dtoa_r+0x9ac>
 800f44a:	f000 f9c3 	bl	800f7d4 <__multadd>
 800f44e:	4629      	mov	r1, r5
 800f450:	4607      	mov	r7, r0
 800f452:	2300      	movs	r3, #0
 800f454:	220a      	movs	r2, #10
 800f456:	4658      	mov	r0, fp
 800f458:	f000 f9bc 	bl	800f7d4 <__multadd>
 800f45c:	4605      	mov	r5, r0
 800f45e:	e7f0      	b.n	800f442 <_dtoa_r+0xaba>
 800f460:	9b00      	ldr	r3, [sp, #0]
 800f462:	2b00      	cmp	r3, #0
 800f464:	bfcc      	ite	gt
 800f466:	461e      	movgt	r6, r3
 800f468:	2601      	movle	r6, #1
 800f46a:	4456      	add	r6, sl
 800f46c:	2700      	movs	r7, #0
 800f46e:	4649      	mov	r1, r9
 800f470:	2201      	movs	r2, #1
 800f472:	4658      	mov	r0, fp
 800f474:	f000 fba4 	bl	800fbc0 <__lshift>
 800f478:	4621      	mov	r1, r4
 800f47a:	4681      	mov	r9, r0
 800f47c:	f000 fc0c 	bl	800fc98 <__mcmp>
 800f480:	2800      	cmp	r0, #0
 800f482:	dcb0      	bgt.n	800f3e6 <_dtoa_r+0xa5e>
 800f484:	d102      	bne.n	800f48c <_dtoa_r+0xb04>
 800f486:	f018 0f01 	tst.w	r8, #1
 800f48a:	d1ac      	bne.n	800f3e6 <_dtoa_r+0xa5e>
 800f48c:	4633      	mov	r3, r6
 800f48e:	461e      	mov	r6, r3
 800f490:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f494:	2a30      	cmp	r2, #48	@ 0x30
 800f496:	d0fa      	beq.n	800f48e <_dtoa_r+0xb06>
 800f498:	e5c2      	b.n	800f020 <_dtoa_r+0x698>
 800f49a:	459a      	cmp	sl, r3
 800f49c:	d1a4      	bne.n	800f3e8 <_dtoa_r+0xa60>
 800f49e:	9b04      	ldr	r3, [sp, #16]
 800f4a0:	3301      	adds	r3, #1
 800f4a2:	9304      	str	r3, [sp, #16]
 800f4a4:	2331      	movs	r3, #49	@ 0x31
 800f4a6:	f88a 3000 	strb.w	r3, [sl]
 800f4aa:	e5b9      	b.n	800f020 <_dtoa_r+0x698>
 800f4ac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f4ae:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800f50c <_dtoa_r+0xb84>
 800f4b2:	b11b      	cbz	r3, 800f4bc <_dtoa_r+0xb34>
 800f4b4:	f10a 0308 	add.w	r3, sl, #8
 800f4b8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800f4ba:	6013      	str	r3, [r2, #0]
 800f4bc:	4650      	mov	r0, sl
 800f4be:	b019      	add	sp, #100	@ 0x64
 800f4c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f4c6:	2b01      	cmp	r3, #1
 800f4c8:	f77f ae37 	ble.w	800f13a <_dtoa_r+0x7b2>
 800f4cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f4ce:	930a      	str	r3, [sp, #40]	@ 0x28
 800f4d0:	2001      	movs	r0, #1
 800f4d2:	e655      	b.n	800f180 <_dtoa_r+0x7f8>
 800f4d4:	9b00      	ldr	r3, [sp, #0]
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	f77f aed6 	ble.w	800f288 <_dtoa_r+0x900>
 800f4dc:	4656      	mov	r6, sl
 800f4de:	4621      	mov	r1, r4
 800f4e0:	4648      	mov	r0, r9
 800f4e2:	f7ff f9c7 	bl	800e874 <quorem>
 800f4e6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800f4ea:	f806 8b01 	strb.w	r8, [r6], #1
 800f4ee:	9b00      	ldr	r3, [sp, #0]
 800f4f0:	eba6 020a 	sub.w	r2, r6, sl
 800f4f4:	4293      	cmp	r3, r2
 800f4f6:	ddb3      	ble.n	800f460 <_dtoa_r+0xad8>
 800f4f8:	4649      	mov	r1, r9
 800f4fa:	2300      	movs	r3, #0
 800f4fc:	220a      	movs	r2, #10
 800f4fe:	4658      	mov	r0, fp
 800f500:	f000 f968 	bl	800f7d4 <__multadd>
 800f504:	4681      	mov	r9, r0
 800f506:	e7ea      	b.n	800f4de <_dtoa_r+0xb56>
 800f508:	08012ec7 	.word	0x08012ec7
 800f50c:	08012e62 	.word	0x08012e62

0800f510 <_free_r>:
 800f510:	b538      	push	{r3, r4, r5, lr}
 800f512:	4605      	mov	r5, r0
 800f514:	2900      	cmp	r1, #0
 800f516:	d041      	beq.n	800f59c <_free_r+0x8c>
 800f518:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f51c:	1f0c      	subs	r4, r1, #4
 800f51e:	2b00      	cmp	r3, #0
 800f520:	bfb8      	it	lt
 800f522:	18e4      	addlt	r4, r4, r3
 800f524:	f000 f8e8 	bl	800f6f8 <__malloc_lock>
 800f528:	4a1d      	ldr	r2, [pc, #116]	@ (800f5a0 <_free_r+0x90>)
 800f52a:	6813      	ldr	r3, [r2, #0]
 800f52c:	b933      	cbnz	r3, 800f53c <_free_r+0x2c>
 800f52e:	6063      	str	r3, [r4, #4]
 800f530:	6014      	str	r4, [r2, #0]
 800f532:	4628      	mov	r0, r5
 800f534:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f538:	f000 b8e4 	b.w	800f704 <__malloc_unlock>
 800f53c:	42a3      	cmp	r3, r4
 800f53e:	d908      	bls.n	800f552 <_free_r+0x42>
 800f540:	6820      	ldr	r0, [r4, #0]
 800f542:	1821      	adds	r1, r4, r0
 800f544:	428b      	cmp	r3, r1
 800f546:	bf01      	itttt	eq
 800f548:	6819      	ldreq	r1, [r3, #0]
 800f54a:	685b      	ldreq	r3, [r3, #4]
 800f54c:	1809      	addeq	r1, r1, r0
 800f54e:	6021      	streq	r1, [r4, #0]
 800f550:	e7ed      	b.n	800f52e <_free_r+0x1e>
 800f552:	461a      	mov	r2, r3
 800f554:	685b      	ldr	r3, [r3, #4]
 800f556:	b10b      	cbz	r3, 800f55c <_free_r+0x4c>
 800f558:	42a3      	cmp	r3, r4
 800f55a:	d9fa      	bls.n	800f552 <_free_r+0x42>
 800f55c:	6811      	ldr	r1, [r2, #0]
 800f55e:	1850      	adds	r0, r2, r1
 800f560:	42a0      	cmp	r0, r4
 800f562:	d10b      	bne.n	800f57c <_free_r+0x6c>
 800f564:	6820      	ldr	r0, [r4, #0]
 800f566:	4401      	add	r1, r0
 800f568:	1850      	adds	r0, r2, r1
 800f56a:	4283      	cmp	r3, r0
 800f56c:	6011      	str	r1, [r2, #0]
 800f56e:	d1e0      	bne.n	800f532 <_free_r+0x22>
 800f570:	6818      	ldr	r0, [r3, #0]
 800f572:	685b      	ldr	r3, [r3, #4]
 800f574:	6053      	str	r3, [r2, #4]
 800f576:	4408      	add	r0, r1
 800f578:	6010      	str	r0, [r2, #0]
 800f57a:	e7da      	b.n	800f532 <_free_r+0x22>
 800f57c:	d902      	bls.n	800f584 <_free_r+0x74>
 800f57e:	230c      	movs	r3, #12
 800f580:	602b      	str	r3, [r5, #0]
 800f582:	e7d6      	b.n	800f532 <_free_r+0x22>
 800f584:	6820      	ldr	r0, [r4, #0]
 800f586:	1821      	adds	r1, r4, r0
 800f588:	428b      	cmp	r3, r1
 800f58a:	bf04      	itt	eq
 800f58c:	6819      	ldreq	r1, [r3, #0]
 800f58e:	685b      	ldreq	r3, [r3, #4]
 800f590:	6063      	str	r3, [r4, #4]
 800f592:	bf04      	itt	eq
 800f594:	1809      	addeq	r1, r1, r0
 800f596:	6021      	streq	r1, [r4, #0]
 800f598:	6054      	str	r4, [r2, #4]
 800f59a:	e7ca      	b.n	800f532 <_free_r+0x22>
 800f59c:	bd38      	pop	{r3, r4, r5, pc}
 800f59e:	bf00      	nop
 800f5a0:	20004b14 	.word	0x20004b14

0800f5a4 <malloc>:
 800f5a4:	4b02      	ldr	r3, [pc, #8]	@ (800f5b0 <malloc+0xc>)
 800f5a6:	4601      	mov	r1, r0
 800f5a8:	6818      	ldr	r0, [r3, #0]
 800f5aa:	f000 b825 	b.w	800f5f8 <_malloc_r>
 800f5ae:	bf00      	nop
 800f5b0:	20000574 	.word	0x20000574

0800f5b4 <sbrk_aligned>:
 800f5b4:	b570      	push	{r4, r5, r6, lr}
 800f5b6:	4e0f      	ldr	r6, [pc, #60]	@ (800f5f4 <sbrk_aligned+0x40>)
 800f5b8:	460c      	mov	r4, r1
 800f5ba:	6831      	ldr	r1, [r6, #0]
 800f5bc:	4605      	mov	r5, r0
 800f5be:	b911      	cbnz	r1, 800f5c6 <sbrk_aligned+0x12>
 800f5c0:	f001 ff86 	bl	80114d0 <_sbrk_r>
 800f5c4:	6030      	str	r0, [r6, #0]
 800f5c6:	4621      	mov	r1, r4
 800f5c8:	4628      	mov	r0, r5
 800f5ca:	f001 ff81 	bl	80114d0 <_sbrk_r>
 800f5ce:	1c43      	adds	r3, r0, #1
 800f5d0:	d103      	bne.n	800f5da <sbrk_aligned+0x26>
 800f5d2:	f04f 34ff 	mov.w	r4, #4294967295
 800f5d6:	4620      	mov	r0, r4
 800f5d8:	bd70      	pop	{r4, r5, r6, pc}
 800f5da:	1cc4      	adds	r4, r0, #3
 800f5dc:	f024 0403 	bic.w	r4, r4, #3
 800f5e0:	42a0      	cmp	r0, r4
 800f5e2:	d0f8      	beq.n	800f5d6 <sbrk_aligned+0x22>
 800f5e4:	1a21      	subs	r1, r4, r0
 800f5e6:	4628      	mov	r0, r5
 800f5e8:	f001 ff72 	bl	80114d0 <_sbrk_r>
 800f5ec:	3001      	adds	r0, #1
 800f5ee:	d1f2      	bne.n	800f5d6 <sbrk_aligned+0x22>
 800f5f0:	e7ef      	b.n	800f5d2 <sbrk_aligned+0x1e>
 800f5f2:	bf00      	nop
 800f5f4:	20004b10 	.word	0x20004b10

0800f5f8 <_malloc_r>:
 800f5f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f5fc:	1ccd      	adds	r5, r1, #3
 800f5fe:	f025 0503 	bic.w	r5, r5, #3
 800f602:	3508      	adds	r5, #8
 800f604:	2d0c      	cmp	r5, #12
 800f606:	bf38      	it	cc
 800f608:	250c      	movcc	r5, #12
 800f60a:	2d00      	cmp	r5, #0
 800f60c:	4606      	mov	r6, r0
 800f60e:	db01      	blt.n	800f614 <_malloc_r+0x1c>
 800f610:	42a9      	cmp	r1, r5
 800f612:	d904      	bls.n	800f61e <_malloc_r+0x26>
 800f614:	230c      	movs	r3, #12
 800f616:	6033      	str	r3, [r6, #0]
 800f618:	2000      	movs	r0, #0
 800f61a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f61e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f6f4 <_malloc_r+0xfc>
 800f622:	f000 f869 	bl	800f6f8 <__malloc_lock>
 800f626:	f8d8 3000 	ldr.w	r3, [r8]
 800f62a:	461c      	mov	r4, r3
 800f62c:	bb44      	cbnz	r4, 800f680 <_malloc_r+0x88>
 800f62e:	4629      	mov	r1, r5
 800f630:	4630      	mov	r0, r6
 800f632:	f7ff ffbf 	bl	800f5b4 <sbrk_aligned>
 800f636:	1c43      	adds	r3, r0, #1
 800f638:	4604      	mov	r4, r0
 800f63a:	d158      	bne.n	800f6ee <_malloc_r+0xf6>
 800f63c:	f8d8 4000 	ldr.w	r4, [r8]
 800f640:	4627      	mov	r7, r4
 800f642:	2f00      	cmp	r7, #0
 800f644:	d143      	bne.n	800f6ce <_malloc_r+0xd6>
 800f646:	2c00      	cmp	r4, #0
 800f648:	d04b      	beq.n	800f6e2 <_malloc_r+0xea>
 800f64a:	6823      	ldr	r3, [r4, #0]
 800f64c:	4639      	mov	r1, r7
 800f64e:	4630      	mov	r0, r6
 800f650:	eb04 0903 	add.w	r9, r4, r3
 800f654:	f001 ff3c 	bl	80114d0 <_sbrk_r>
 800f658:	4581      	cmp	r9, r0
 800f65a:	d142      	bne.n	800f6e2 <_malloc_r+0xea>
 800f65c:	6821      	ldr	r1, [r4, #0]
 800f65e:	1a6d      	subs	r5, r5, r1
 800f660:	4629      	mov	r1, r5
 800f662:	4630      	mov	r0, r6
 800f664:	f7ff ffa6 	bl	800f5b4 <sbrk_aligned>
 800f668:	3001      	adds	r0, #1
 800f66a:	d03a      	beq.n	800f6e2 <_malloc_r+0xea>
 800f66c:	6823      	ldr	r3, [r4, #0]
 800f66e:	442b      	add	r3, r5
 800f670:	6023      	str	r3, [r4, #0]
 800f672:	f8d8 3000 	ldr.w	r3, [r8]
 800f676:	685a      	ldr	r2, [r3, #4]
 800f678:	bb62      	cbnz	r2, 800f6d4 <_malloc_r+0xdc>
 800f67a:	f8c8 7000 	str.w	r7, [r8]
 800f67e:	e00f      	b.n	800f6a0 <_malloc_r+0xa8>
 800f680:	6822      	ldr	r2, [r4, #0]
 800f682:	1b52      	subs	r2, r2, r5
 800f684:	d420      	bmi.n	800f6c8 <_malloc_r+0xd0>
 800f686:	2a0b      	cmp	r2, #11
 800f688:	d917      	bls.n	800f6ba <_malloc_r+0xc2>
 800f68a:	1961      	adds	r1, r4, r5
 800f68c:	42a3      	cmp	r3, r4
 800f68e:	6025      	str	r5, [r4, #0]
 800f690:	bf18      	it	ne
 800f692:	6059      	strne	r1, [r3, #4]
 800f694:	6863      	ldr	r3, [r4, #4]
 800f696:	bf08      	it	eq
 800f698:	f8c8 1000 	streq.w	r1, [r8]
 800f69c:	5162      	str	r2, [r4, r5]
 800f69e:	604b      	str	r3, [r1, #4]
 800f6a0:	4630      	mov	r0, r6
 800f6a2:	f000 f82f 	bl	800f704 <__malloc_unlock>
 800f6a6:	f104 000b 	add.w	r0, r4, #11
 800f6aa:	1d23      	adds	r3, r4, #4
 800f6ac:	f020 0007 	bic.w	r0, r0, #7
 800f6b0:	1ac2      	subs	r2, r0, r3
 800f6b2:	bf1c      	itt	ne
 800f6b4:	1a1b      	subne	r3, r3, r0
 800f6b6:	50a3      	strne	r3, [r4, r2]
 800f6b8:	e7af      	b.n	800f61a <_malloc_r+0x22>
 800f6ba:	6862      	ldr	r2, [r4, #4]
 800f6bc:	42a3      	cmp	r3, r4
 800f6be:	bf0c      	ite	eq
 800f6c0:	f8c8 2000 	streq.w	r2, [r8]
 800f6c4:	605a      	strne	r2, [r3, #4]
 800f6c6:	e7eb      	b.n	800f6a0 <_malloc_r+0xa8>
 800f6c8:	4623      	mov	r3, r4
 800f6ca:	6864      	ldr	r4, [r4, #4]
 800f6cc:	e7ae      	b.n	800f62c <_malloc_r+0x34>
 800f6ce:	463c      	mov	r4, r7
 800f6d0:	687f      	ldr	r7, [r7, #4]
 800f6d2:	e7b6      	b.n	800f642 <_malloc_r+0x4a>
 800f6d4:	461a      	mov	r2, r3
 800f6d6:	685b      	ldr	r3, [r3, #4]
 800f6d8:	42a3      	cmp	r3, r4
 800f6da:	d1fb      	bne.n	800f6d4 <_malloc_r+0xdc>
 800f6dc:	2300      	movs	r3, #0
 800f6de:	6053      	str	r3, [r2, #4]
 800f6e0:	e7de      	b.n	800f6a0 <_malloc_r+0xa8>
 800f6e2:	230c      	movs	r3, #12
 800f6e4:	6033      	str	r3, [r6, #0]
 800f6e6:	4630      	mov	r0, r6
 800f6e8:	f000 f80c 	bl	800f704 <__malloc_unlock>
 800f6ec:	e794      	b.n	800f618 <_malloc_r+0x20>
 800f6ee:	6005      	str	r5, [r0, #0]
 800f6f0:	e7d6      	b.n	800f6a0 <_malloc_r+0xa8>
 800f6f2:	bf00      	nop
 800f6f4:	20004b14 	.word	0x20004b14

0800f6f8 <__malloc_lock>:
 800f6f8:	4801      	ldr	r0, [pc, #4]	@ (800f700 <__malloc_lock+0x8>)
 800f6fa:	f7ff b887 	b.w	800e80c <__retarget_lock_acquire_recursive>
 800f6fe:	bf00      	nop
 800f700:	20004b0c 	.word	0x20004b0c

0800f704 <__malloc_unlock>:
 800f704:	4801      	ldr	r0, [pc, #4]	@ (800f70c <__malloc_unlock+0x8>)
 800f706:	f7ff b882 	b.w	800e80e <__retarget_lock_release_recursive>
 800f70a:	bf00      	nop
 800f70c:	20004b0c 	.word	0x20004b0c

0800f710 <_Balloc>:
 800f710:	b570      	push	{r4, r5, r6, lr}
 800f712:	69c6      	ldr	r6, [r0, #28]
 800f714:	4604      	mov	r4, r0
 800f716:	460d      	mov	r5, r1
 800f718:	b976      	cbnz	r6, 800f738 <_Balloc+0x28>
 800f71a:	2010      	movs	r0, #16
 800f71c:	f7ff ff42 	bl	800f5a4 <malloc>
 800f720:	4602      	mov	r2, r0
 800f722:	61e0      	str	r0, [r4, #28]
 800f724:	b920      	cbnz	r0, 800f730 <_Balloc+0x20>
 800f726:	4b18      	ldr	r3, [pc, #96]	@ (800f788 <_Balloc+0x78>)
 800f728:	4818      	ldr	r0, [pc, #96]	@ (800f78c <_Balloc+0x7c>)
 800f72a:	216b      	movs	r1, #107	@ 0x6b
 800f72c:	f7ff f884 	bl	800e838 <__assert_func>
 800f730:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f734:	6006      	str	r6, [r0, #0]
 800f736:	60c6      	str	r6, [r0, #12]
 800f738:	69e6      	ldr	r6, [r4, #28]
 800f73a:	68f3      	ldr	r3, [r6, #12]
 800f73c:	b183      	cbz	r3, 800f760 <_Balloc+0x50>
 800f73e:	69e3      	ldr	r3, [r4, #28]
 800f740:	68db      	ldr	r3, [r3, #12]
 800f742:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f746:	b9b8      	cbnz	r0, 800f778 <_Balloc+0x68>
 800f748:	2101      	movs	r1, #1
 800f74a:	fa01 f605 	lsl.w	r6, r1, r5
 800f74e:	1d72      	adds	r2, r6, #5
 800f750:	0092      	lsls	r2, r2, #2
 800f752:	4620      	mov	r0, r4
 800f754:	f001 fedb 	bl	801150e <_calloc_r>
 800f758:	b160      	cbz	r0, 800f774 <_Balloc+0x64>
 800f75a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f75e:	e00e      	b.n	800f77e <_Balloc+0x6e>
 800f760:	2221      	movs	r2, #33	@ 0x21
 800f762:	2104      	movs	r1, #4
 800f764:	4620      	mov	r0, r4
 800f766:	f001 fed2 	bl	801150e <_calloc_r>
 800f76a:	69e3      	ldr	r3, [r4, #28]
 800f76c:	60f0      	str	r0, [r6, #12]
 800f76e:	68db      	ldr	r3, [r3, #12]
 800f770:	2b00      	cmp	r3, #0
 800f772:	d1e4      	bne.n	800f73e <_Balloc+0x2e>
 800f774:	2000      	movs	r0, #0
 800f776:	bd70      	pop	{r4, r5, r6, pc}
 800f778:	6802      	ldr	r2, [r0, #0]
 800f77a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f77e:	2300      	movs	r3, #0
 800f780:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f784:	e7f7      	b.n	800f776 <_Balloc+0x66>
 800f786:	bf00      	nop
 800f788:	080126e8 	.word	0x080126e8
 800f78c:	08012ed8 	.word	0x08012ed8

0800f790 <_Bfree>:
 800f790:	b570      	push	{r4, r5, r6, lr}
 800f792:	69c6      	ldr	r6, [r0, #28]
 800f794:	4605      	mov	r5, r0
 800f796:	460c      	mov	r4, r1
 800f798:	b976      	cbnz	r6, 800f7b8 <_Bfree+0x28>
 800f79a:	2010      	movs	r0, #16
 800f79c:	f7ff ff02 	bl	800f5a4 <malloc>
 800f7a0:	4602      	mov	r2, r0
 800f7a2:	61e8      	str	r0, [r5, #28]
 800f7a4:	b920      	cbnz	r0, 800f7b0 <_Bfree+0x20>
 800f7a6:	4b09      	ldr	r3, [pc, #36]	@ (800f7cc <_Bfree+0x3c>)
 800f7a8:	4809      	ldr	r0, [pc, #36]	@ (800f7d0 <_Bfree+0x40>)
 800f7aa:	218f      	movs	r1, #143	@ 0x8f
 800f7ac:	f7ff f844 	bl	800e838 <__assert_func>
 800f7b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f7b4:	6006      	str	r6, [r0, #0]
 800f7b6:	60c6      	str	r6, [r0, #12]
 800f7b8:	b13c      	cbz	r4, 800f7ca <_Bfree+0x3a>
 800f7ba:	69eb      	ldr	r3, [r5, #28]
 800f7bc:	6862      	ldr	r2, [r4, #4]
 800f7be:	68db      	ldr	r3, [r3, #12]
 800f7c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f7c4:	6021      	str	r1, [r4, #0]
 800f7c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f7ca:	bd70      	pop	{r4, r5, r6, pc}
 800f7cc:	080126e8 	.word	0x080126e8
 800f7d0:	08012ed8 	.word	0x08012ed8

0800f7d4 <__multadd>:
 800f7d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7d8:	690d      	ldr	r5, [r1, #16]
 800f7da:	4607      	mov	r7, r0
 800f7dc:	460c      	mov	r4, r1
 800f7de:	461e      	mov	r6, r3
 800f7e0:	f101 0c14 	add.w	ip, r1, #20
 800f7e4:	2000      	movs	r0, #0
 800f7e6:	f8dc 3000 	ldr.w	r3, [ip]
 800f7ea:	b299      	uxth	r1, r3
 800f7ec:	fb02 6101 	mla	r1, r2, r1, r6
 800f7f0:	0c1e      	lsrs	r6, r3, #16
 800f7f2:	0c0b      	lsrs	r3, r1, #16
 800f7f4:	fb02 3306 	mla	r3, r2, r6, r3
 800f7f8:	b289      	uxth	r1, r1
 800f7fa:	3001      	adds	r0, #1
 800f7fc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f800:	4285      	cmp	r5, r0
 800f802:	f84c 1b04 	str.w	r1, [ip], #4
 800f806:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f80a:	dcec      	bgt.n	800f7e6 <__multadd+0x12>
 800f80c:	b30e      	cbz	r6, 800f852 <__multadd+0x7e>
 800f80e:	68a3      	ldr	r3, [r4, #8]
 800f810:	42ab      	cmp	r3, r5
 800f812:	dc19      	bgt.n	800f848 <__multadd+0x74>
 800f814:	6861      	ldr	r1, [r4, #4]
 800f816:	4638      	mov	r0, r7
 800f818:	3101      	adds	r1, #1
 800f81a:	f7ff ff79 	bl	800f710 <_Balloc>
 800f81e:	4680      	mov	r8, r0
 800f820:	b928      	cbnz	r0, 800f82e <__multadd+0x5a>
 800f822:	4602      	mov	r2, r0
 800f824:	4b0c      	ldr	r3, [pc, #48]	@ (800f858 <__multadd+0x84>)
 800f826:	480d      	ldr	r0, [pc, #52]	@ (800f85c <__multadd+0x88>)
 800f828:	21ba      	movs	r1, #186	@ 0xba
 800f82a:	f7ff f805 	bl	800e838 <__assert_func>
 800f82e:	6922      	ldr	r2, [r4, #16]
 800f830:	3202      	adds	r2, #2
 800f832:	f104 010c 	add.w	r1, r4, #12
 800f836:	0092      	lsls	r2, r2, #2
 800f838:	300c      	adds	r0, #12
 800f83a:	f7fe ffe9 	bl	800e810 <memcpy>
 800f83e:	4621      	mov	r1, r4
 800f840:	4638      	mov	r0, r7
 800f842:	f7ff ffa5 	bl	800f790 <_Bfree>
 800f846:	4644      	mov	r4, r8
 800f848:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f84c:	3501      	adds	r5, #1
 800f84e:	615e      	str	r6, [r3, #20]
 800f850:	6125      	str	r5, [r4, #16]
 800f852:	4620      	mov	r0, r4
 800f854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f858:	08012ec7 	.word	0x08012ec7
 800f85c:	08012ed8 	.word	0x08012ed8

0800f860 <__s2b>:
 800f860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f864:	460c      	mov	r4, r1
 800f866:	4615      	mov	r5, r2
 800f868:	461f      	mov	r7, r3
 800f86a:	2209      	movs	r2, #9
 800f86c:	3308      	adds	r3, #8
 800f86e:	4606      	mov	r6, r0
 800f870:	fb93 f3f2 	sdiv	r3, r3, r2
 800f874:	2100      	movs	r1, #0
 800f876:	2201      	movs	r2, #1
 800f878:	429a      	cmp	r2, r3
 800f87a:	db09      	blt.n	800f890 <__s2b+0x30>
 800f87c:	4630      	mov	r0, r6
 800f87e:	f7ff ff47 	bl	800f710 <_Balloc>
 800f882:	b940      	cbnz	r0, 800f896 <__s2b+0x36>
 800f884:	4602      	mov	r2, r0
 800f886:	4b19      	ldr	r3, [pc, #100]	@ (800f8ec <__s2b+0x8c>)
 800f888:	4819      	ldr	r0, [pc, #100]	@ (800f8f0 <__s2b+0x90>)
 800f88a:	21d3      	movs	r1, #211	@ 0xd3
 800f88c:	f7fe ffd4 	bl	800e838 <__assert_func>
 800f890:	0052      	lsls	r2, r2, #1
 800f892:	3101      	adds	r1, #1
 800f894:	e7f0      	b.n	800f878 <__s2b+0x18>
 800f896:	9b08      	ldr	r3, [sp, #32]
 800f898:	6143      	str	r3, [r0, #20]
 800f89a:	2d09      	cmp	r5, #9
 800f89c:	f04f 0301 	mov.w	r3, #1
 800f8a0:	6103      	str	r3, [r0, #16]
 800f8a2:	dd16      	ble.n	800f8d2 <__s2b+0x72>
 800f8a4:	f104 0909 	add.w	r9, r4, #9
 800f8a8:	46c8      	mov	r8, r9
 800f8aa:	442c      	add	r4, r5
 800f8ac:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f8b0:	4601      	mov	r1, r0
 800f8b2:	3b30      	subs	r3, #48	@ 0x30
 800f8b4:	220a      	movs	r2, #10
 800f8b6:	4630      	mov	r0, r6
 800f8b8:	f7ff ff8c 	bl	800f7d4 <__multadd>
 800f8bc:	45a0      	cmp	r8, r4
 800f8be:	d1f5      	bne.n	800f8ac <__s2b+0x4c>
 800f8c0:	f1a5 0408 	sub.w	r4, r5, #8
 800f8c4:	444c      	add	r4, r9
 800f8c6:	1b2d      	subs	r5, r5, r4
 800f8c8:	1963      	adds	r3, r4, r5
 800f8ca:	42bb      	cmp	r3, r7
 800f8cc:	db04      	blt.n	800f8d8 <__s2b+0x78>
 800f8ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f8d2:	340a      	adds	r4, #10
 800f8d4:	2509      	movs	r5, #9
 800f8d6:	e7f6      	b.n	800f8c6 <__s2b+0x66>
 800f8d8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f8dc:	4601      	mov	r1, r0
 800f8de:	3b30      	subs	r3, #48	@ 0x30
 800f8e0:	220a      	movs	r2, #10
 800f8e2:	4630      	mov	r0, r6
 800f8e4:	f7ff ff76 	bl	800f7d4 <__multadd>
 800f8e8:	e7ee      	b.n	800f8c8 <__s2b+0x68>
 800f8ea:	bf00      	nop
 800f8ec:	08012ec7 	.word	0x08012ec7
 800f8f0:	08012ed8 	.word	0x08012ed8

0800f8f4 <__hi0bits>:
 800f8f4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800f8f8:	4603      	mov	r3, r0
 800f8fa:	bf36      	itet	cc
 800f8fc:	0403      	lslcc	r3, r0, #16
 800f8fe:	2000      	movcs	r0, #0
 800f900:	2010      	movcc	r0, #16
 800f902:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f906:	bf3c      	itt	cc
 800f908:	021b      	lslcc	r3, r3, #8
 800f90a:	3008      	addcc	r0, #8
 800f90c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f910:	bf3c      	itt	cc
 800f912:	011b      	lslcc	r3, r3, #4
 800f914:	3004      	addcc	r0, #4
 800f916:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f91a:	bf3c      	itt	cc
 800f91c:	009b      	lslcc	r3, r3, #2
 800f91e:	3002      	addcc	r0, #2
 800f920:	2b00      	cmp	r3, #0
 800f922:	db05      	blt.n	800f930 <__hi0bits+0x3c>
 800f924:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800f928:	f100 0001 	add.w	r0, r0, #1
 800f92c:	bf08      	it	eq
 800f92e:	2020      	moveq	r0, #32
 800f930:	4770      	bx	lr

0800f932 <__lo0bits>:
 800f932:	6803      	ldr	r3, [r0, #0]
 800f934:	4602      	mov	r2, r0
 800f936:	f013 0007 	ands.w	r0, r3, #7
 800f93a:	d00b      	beq.n	800f954 <__lo0bits+0x22>
 800f93c:	07d9      	lsls	r1, r3, #31
 800f93e:	d421      	bmi.n	800f984 <__lo0bits+0x52>
 800f940:	0798      	lsls	r0, r3, #30
 800f942:	bf49      	itett	mi
 800f944:	085b      	lsrmi	r3, r3, #1
 800f946:	089b      	lsrpl	r3, r3, #2
 800f948:	2001      	movmi	r0, #1
 800f94a:	6013      	strmi	r3, [r2, #0]
 800f94c:	bf5c      	itt	pl
 800f94e:	6013      	strpl	r3, [r2, #0]
 800f950:	2002      	movpl	r0, #2
 800f952:	4770      	bx	lr
 800f954:	b299      	uxth	r1, r3
 800f956:	b909      	cbnz	r1, 800f95c <__lo0bits+0x2a>
 800f958:	0c1b      	lsrs	r3, r3, #16
 800f95a:	2010      	movs	r0, #16
 800f95c:	b2d9      	uxtb	r1, r3
 800f95e:	b909      	cbnz	r1, 800f964 <__lo0bits+0x32>
 800f960:	3008      	adds	r0, #8
 800f962:	0a1b      	lsrs	r3, r3, #8
 800f964:	0719      	lsls	r1, r3, #28
 800f966:	bf04      	itt	eq
 800f968:	091b      	lsreq	r3, r3, #4
 800f96a:	3004      	addeq	r0, #4
 800f96c:	0799      	lsls	r1, r3, #30
 800f96e:	bf04      	itt	eq
 800f970:	089b      	lsreq	r3, r3, #2
 800f972:	3002      	addeq	r0, #2
 800f974:	07d9      	lsls	r1, r3, #31
 800f976:	d403      	bmi.n	800f980 <__lo0bits+0x4e>
 800f978:	085b      	lsrs	r3, r3, #1
 800f97a:	f100 0001 	add.w	r0, r0, #1
 800f97e:	d003      	beq.n	800f988 <__lo0bits+0x56>
 800f980:	6013      	str	r3, [r2, #0]
 800f982:	4770      	bx	lr
 800f984:	2000      	movs	r0, #0
 800f986:	4770      	bx	lr
 800f988:	2020      	movs	r0, #32
 800f98a:	4770      	bx	lr

0800f98c <__i2b>:
 800f98c:	b510      	push	{r4, lr}
 800f98e:	460c      	mov	r4, r1
 800f990:	2101      	movs	r1, #1
 800f992:	f7ff febd 	bl	800f710 <_Balloc>
 800f996:	4602      	mov	r2, r0
 800f998:	b928      	cbnz	r0, 800f9a6 <__i2b+0x1a>
 800f99a:	4b05      	ldr	r3, [pc, #20]	@ (800f9b0 <__i2b+0x24>)
 800f99c:	4805      	ldr	r0, [pc, #20]	@ (800f9b4 <__i2b+0x28>)
 800f99e:	f240 1145 	movw	r1, #325	@ 0x145
 800f9a2:	f7fe ff49 	bl	800e838 <__assert_func>
 800f9a6:	2301      	movs	r3, #1
 800f9a8:	6144      	str	r4, [r0, #20]
 800f9aa:	6103      	str	r3, [r0, #16]
 800f9ac:	bd10      	pop	{r4, pc}
 800f9ae:	bf00      	nop
 800f9b0:	08012ec7 	.word	0x08012ec7
 800f9b4:	08012ed8 	.word	0x08012ed8

0800f9b8 <__multiply>:
 800f9b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9bc:	4614      	mov	r4, r2
 800f9be:	690a      	ldr	r2, [r1, #16]
 800f9c0:	6923      	ldr	r3, [r4, #16]
 800f9c2:	429a      	cmp	r2, r3
 800f9c4:	bfa8      	it	ge
 800f9c6:	4623      	movge	r3, r4
 800f9c8:	460f      	mov	r7, r1
 800f9ca:	bfa4      	itt	ge
 800f9cc:	460c      	movge	r4, r1
 800f9ce:	461f      	movge	r7, r3
 800f9d0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800f9d4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800f9d8:	68a3      	ldr	r3, [r4, #8]
 800f9da:	6861      	ldr	r1, [r4, #4]
 800f9dc:	eb0a 0609 	add.w	r6, sl, r9
 800f9e0:	42b3      	cmp	r3, r6
 800f9e2:	b085      	sub	sp, #20
 800f9e4:	bfb8      	it	lt
 800f9e6:	3101      	addlt	r1, #1
 800f9e8:	f7ff fe92 	bl	800f710 <_Balloc>
 800f9ec:	b930      	cbnz	r0, 800f9fc <__multiply+0x44>
 800f9ee:	4602      	mov	r2, r0
 800f9f0:	4b44      	ldr	r3, [pc, #272]	@ (800fb04 <__multiply+0x14c>)
 800f9f2:	4845      	ldr	r0, [pc, #276]	@ (800fb08 <__multiply+0x150>)
 800f9f4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800f9f8:	f7fe ff1e 	bl	800e838 <__assert_func>
 800f9fc:	f100 0514 	add.w	r5, r0, #20
 800fa00:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800fa04:	462b      	mov	r3, r5
 800fa06:	2200      	movs	r2, #0
 800fa08:	4543      	cmp	r3, r8
 800fa0a:	d321      	bcc.n	800fa50 <__multiply+0x98>
 800fa0c:	f107 0114 	add.w	r1, r7, #20
 800fa10:	f104 0214 	add.w	r2, r4, #20
 800fa14:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800fa18:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800fa1c:	9302      	str	r3, [sp, #8]
 800fa1e:	1b13      	subs	r3, r2, r4
 800fa20:	3b15      	subs	r3, #21
 800fa22:	f023 0303 	bic.w	r3, r3, #3
 800fa26:	3304      	adds	r3, #4
 800fa28:	f104 0715 	add.w	r7, r4, #21
 800fa2c:	42ba      	cmp	r2, r7
 800fa2e:	bf38      	it	cc
 800fa30:	2304      	movcc	r3, #4
 800fa32:	9301      	str	r3, [sp, #4]
 800fa34:	9b02      	ldr	r3, [sp, #8]
 800fa36:	9103      	str	r1, [sp, #12]
 800fa38:	428b      	cmp	r3, r1
 800fa3a:	d80c      	bhi.n	800fa56 <__multiply+0x9e>
 800fa3c:	2e00      	cmp	r6, #0
 800fa3e:	dd03      	ble.n	800fa48 <__multiply+0x90>
 800fa40:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d05b      	beq.n	800fb00 <__multiply+0x148>
 800fa48:	6106      	str	r6, [r0, #16]
 800fa4a:	b005      	add	sp, #20
 800fa4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa50:	f843 2b04 	str.w	r2, [r3], #4
 800fa54:	e7d8      	b.n	800fa08 <__multiply+0x50>
 800fa56:	f8b1 a000 	ldrh.w	sl, [r1]
 800fa5a:	f1ba 0f00 	cmp.w	sl, #0
 800fa5e:	d024      	beq.n	800faaa <__multiply+0xf2>
 800fa60:	f104 0e14 	add.w	lr, r4, #20
 800fa64:	46a9      	mov	r9, r5
 800fa66:	f04f 0c00 	mov.w	ip, #0
 800fa6a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fa6e:	f8d9 3000 	ldr.w	r3, [r9]
 800fa72:	fa1f fb87 	uxth.w	fp, r7
 800fa76:	b29b      	uxth	r3, r3
 800fa78:	fb0a 330b 	mla	r3, sl, fp, r3
 800fa7c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800fa80:	f8d9 7000 	ldr.w	r7, [r9]
 800fa84:	4463      	add	r3, ip
 800fa86:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800fa8a:	fb0a c70b 	mla	r7, sl, fp, ip
 800fa8e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800fa92:	b29b      	uxth	r3, r3
 800fa94:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800fa98:	4572      	cmp	r2, lr
 800fa9a:	f849 3b04 	str.w	r3, [r9], #4
 800fa9e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800faa2:	d8e2      	bhi.n	800fa6a <__multiply+0xb2>
 800faa4:	9b01      	ldr	r3, [sp, #4]
 800faa6:	f845 c003 	str.w	ip, [r5, r3]
 800faaa:	9b03      	ldr	r3, [sp, #12]
 800faac:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800fab0:	3104      	adds	r1, #4
 800fab2:	f1b9 0f00 	cmp.w	r9, #0
 800fab6:	d021      	beq.n	800fafc <__multiply+0x144>
 800fab8:	682b      	ldr	r3, [r5, #0]
 800faba:	f104 0c14 	add.w	ip, r4, #20
 800fabe:	46ae      	mov	lr, r5
 800fac0:	f04f 0a00 	mov.w	sl, #0
 800fac4:	f8bc b000 	ldrh.w	fp, [ip]
 800fac8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800facc:	fb09 770b 	mla	r7, r9, fp, r7
 800fad0:	4457      	add	r7, sl
 800fad2:	b29b      	uxth	r3, r3
 800fad4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800fad8:	f84e 3b04 	str.w	r3, [lr], #4
 800fadc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fae0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fae4:	f8be 3000 	ldrh.w	r3, [lr]
 800fae8:	fb09 330a 	mla	r3, r9, sl, r3
 800faec:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800faf0:	4562      	cmp	r2, ip
 800faf2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800faf6:	d8e5      	bhi.n	800fac4 <__multiply+0x10c>
 800faf8:	9f01      	ldr	r7, [sp, #4]
 800fafa:	51eb      	str	r3, [r5, r7]
 800fafc:	3504      	adds	r5, #4
 800fafe:	e799      	b.n	800fa34 <__multiply+0x7c>
 800fb00:	3e01      	subs	r6, #1
 800fb02:	e79b      	b.n	800fa3c <__multiply+0x84>
 800fb04:	08012ec7 	.word	0x08012ec7
 800fb08:	08012ed8 	.word	0x08012ed8

0800fb0c <__pow5mult>:
 800fb0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb10:	4615      	mov	r5, r2
 800fb12:	f012 0203 	ands.w	r2, r2, #3
 800fb16:	4607      	mov	r7, r0
 800fb18:	460e      	mov	r6, r1
 800fb1a:	d007      	beq.n	800fb2c <__pow5mult+0x20>
 800fb1c:	4c25      	ldr	r4, [pc, #148]	@ (800fbb4 <__pow5mult+0xa8>)
 800fb1e:	3a01      	subs	r2, #1
 800fb20:	2300      	movs	r3, #0
 800fb22:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fb26:	f7ff fe55 	bl	800f7d4 <__multadd>
 800fb2a:	4606      	mov	r6, r0
 800fb2c:	10ad      	asrs	r5, r5, #2
 800fb2e:	d03d      	beq.n	800fbac <__pow5mult+0xa0>
 800fb30:	69fc      	ldr	r4, [r7, #28]
 800fb32:	b97c      	cbnz	r4, 800fb54 <__pow5mult+0x48>
 800fb34:	2010      	movs	r0, #16
 800fb36:	f7ff fd35 	bl	800f5a4 <malloc>
 800fb3a:	4602      	mov	r2, r0
 800fb3c:	61f8      	str	r0, [r7, #28]
 800fb3e:	b928      	cbnz	r0, 800fb4c <__pow5mult+0x40>
 800fb40:	4b1d      	ldr	r3, [pc, #116]	@ (800fbb8 <__pow5mult+0xac>)
 800fb42:	481e      	ldr	r0, [pc, #120]	@ (800fbbc <__pow5mult+0xb0>)
 800fb44:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800fb48:	f7fe fe76 	bl	800e838 <__assert_func>
 800fb4c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fb50:	6004      	str	r4, [r0, #0]
 800fb52:	60c4      	str	r4, [r0, #12]
 800fb54:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800fb58:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fb5c:	b94c      	cbnz	r4, 800fb72 <__pow5mult+0x66>
 800fb5e:	f240 2171 	movw	r1, #625	@ 0x271
 800fb62:	4638      	mov	r0, r7
 800fb64:	f7ff ff12 	bl	800f98c <__i2b>
 800fb68:	2300      	movs	r3, #0
 800fb6a:	f8c8 0008 	str.w	r0, [r8, #8]
 800fb6e:	4604      	mov	r4, r0
 800fb70:	6003      	str	r3, [r0, #0]
 800fb72:	f04f 0900 	mov.w	r9, #0
 800fb76:	07eb      	lsls	r3, r5, #31
 800fb78:	d50a      	bpl.n	800fb90 <__pow5mult+0x84>
 800fb7a:	4631      	mov	r1, r6
 800fb7c:	4622      	mov	r2, r4
 800fb7e:	4638      	mov	r0, r7
 800fb80:	f7ff ff1a 	bl	800f9b8 <__multiply>
 800fb84:	4631      	mov	r1, r6
 800fb86:	4680      	mov	r8, r0
 800fb88:	4638      	mov	r0, r7
 800fb8a:	f7ff fe01 	bl	800f790 <_Bfree>
 800fb8e:	4646      	mov	r6, r8
 800fb90:	106d      	asrs	r5, r5, #1
 800fb92:	d00b      	beq.n	800fbac <__pow5mult+0xa0>
 800fb94:	6820      	ldr	r0, [r4, #0]
 800fb96:	b938      	cbnz	r0, 800fba8 <__pow5mult+0x9c>
 800fb98:	4622      	mov	r2, r4
 800fb9a:	4621      	mov	r1, r4
 800fb9c:	4638      	mov	r0, r7
 800fb9e:	f7ff ff0b 	bl	800f9b8 <__multiply>
 800fba2:	6020      	str	r0, [r4, #0]
 800fba4:	f8c0 9000 	str.w	r9, [r0]
 800fba8:	4604      	mov	r4, r0
 800fbaa:	e7e4      	b.n	800fb76 <__pow5mult+0x6a>
 800fbac:	4630      	mov	r0, r6
 800fbae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fbb2:	bf00      	nop
 800fbb4:	08012f34 	.word	0x08012f34
 800fbb8:	080126e8 	.word	0x080126e8
 800fbbc:	08012ed8 	.word	0x08012ed8

0800fbc0 <__lshift>:
 800fbc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fbc4:	460c      	mov	r4, r1
 800fbc6:	6849      	ldr	r1, [r1, #4]
 800fbc8:	6923      	ldr	r3, [r4, #16]
 800fbca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fbce:	68a3      	ldr	r3, [r4, #8]
 800fbd0:	4607      	mov	r7, r0
 800fbd2:	4691      	mov	r9, r2
 800fbd4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fbd8:	f108 0601 	add.w	r6, r8, #1
 800fbdc:	42b3      	cmp	r3, r6
 800fbde:	db0b      	blt.n	800fbf8 <__lshift+0x38>
 800fbe0:	4638      	mov	r0, r7
 800fbe2:	f7ff fd95 	bl	800f710 <_Balloc>
 800fbe6:	4605      	mov	r5, r0
 800fbe8:	b948      	cbnz	r0, 800fbfe <__lshift+0x3e>
 800fbea:	4602      	mov	r2, r0
 800fbec:	4b28      	ldr	r3, [pc, #160]	@ (800fc90 <__lshift+0xd0>)
 800fbee:	4829      	ldr	r0, [pc, #164]	@ (800fc94 <__lshift+0xd4>)
 800fbf0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800fbf4:	f7fe fe20 	bl	800e838 <__assert_func>
 800fbf8:	3101      	adds	r1, #1
 800fbfa:	005b      	lsls	r3, r3, #1
 800fbfc:	e7ee      	b.n	800fbdc <__lshift+0x1c>
 800fbfe:	2300      	movs	r3, #0
 800fc00:	f100 0114 	add.w	r1, r0, #20
 800fc04:	f100 0210 	add.w	r2, r0, #16
 800fc08:	4618      	mov	r0, r3
 800fc0a:	4553      	cmp	r3, sl
 800fc0c:	db33      	blt.n	800fc76 <__lshift+0xb6>
 800fc0e:	6920      	ldr	r0, [r4, #16]
 800fc10:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fc14:	f104 0314 	add.w	r3, r4, #20
 800fc18:	f019 091f 	ands.w	r9, r9, #31
 800fc1c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fc20:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fc24:	d02b      	beq.n	800fc7e <__lshift+0xbe>
 800fc26:	f1c9 0e20 	rsb	lr, r9, #32
 800fc2a:	468a      	mov	sl, r1
 800fc2c:	2200      	movs	r2, #0
 800fc2e:	6818      	ldr	r0, [r3, #0]
 800fc30:	fa00 f009 	lsl.w	r0, r0, r9
 800fc34:	4310      	orrs	r0, r2
 800fc36:	f84a 0b04 	str.w	r0, [sl], #4
 800fc3a:	f853 2b04 	ldr.w	r2, [r3], #4
 800fc3e:	459c      	cmp	ip, r3
 800fc40:	fa22 f20e 	lsr.w	r2, r2, lr
 800fc44:	d8f3      	bhi.n	800fc2e <__lshift+0x6e>
 800fc46:	ebac 0304 	sub.w	r3, ip, r4
 800fc4a:	3b15      	subs	r3, #21
 800fc4c:	f023 0303 	bic.w	r3, r3, #3
 800fc50:	3304      	adds	r3, #4
 800fc52:	f104 0015 	add.w	r0, r4, #21
 800fc56:	4584      	cmp	ip, r0
 800fc58:	bf38      	it	cc
 800fc5a:	2304      	movcc	r3, #4
 800fc5c:	50ca      	str	r2, [r1, r3]
 800fc5e:	b10a      	cbz	r2, 800fc64 <__lshift+0xa4>
 800fc60:	f108 0602 	add.w	r6, r8, #2
 800fc64:	3e01      	subs	r6, #1
 800fc66:	4638      	mov	r0, r7
 800fc68:	612e      	str	r6, [r5, #16]
 800fc6a:	4621      	mov	r1, r4
 800fc6c:	f7ff fd90 	bl	800f790 <_Bfree>
 800fc70:	4628      	mov	r0, r5
 800fc72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc76:	f842 0f04 	str.w	r0, [r2, #4]!
 800fc7a:	3301      	adds	r3, #1
 800fc7c:	e7c5      	b.n	800fc0a <__lshift+0x4a>
 800fc7e:	3904      	subs	r1, #4
 800fc80:	f853 2b04 	ldr.w	r2, [r3], #4
 800fc84:	f841 2f04 	str.w	r2, [r1, #4]!
 800fc88:	459c      	cmp	ip, r3
 800fc8a:	d8f9      	bhi.n	800fc80 <__lshift+0xc0>
 800fc8c:	e7ea      	b.n	800fc64 <__lshift+0xa4>
 800fc8e:	bf00      	nop
 800fc90:	08012ec7 	.word	0x08012ec7
 800fc94:	08012ed8 	.word	0x08012ed8

0800fc98 <__mcmp>:
 800fc98:	690a      	ldr	r2, [r1, #16]
 800fc9a:	4603      	mov	r3, r0
 800fc9c:	6900      	ldr	r0, [r0, #16]
 800fc9e:	1a80      	subs	r0, r0, r2
 800fca0:	b530      	push	{r4, r5, lr}
 800fca2:	d10e      	bne.n	800fcc2 <__mcmp+0x2a>
 800fca4:	3314      	adds	r3, #20
 800fca6:	3114      	adds	r1, #20
 800fca8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800fcac:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800fcb0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800fcb4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800fcb8:	4295      	cmp	r5, r2
 800fcba:	d003      	beq.n	800fcc4 <__mcmp+0x2c>
 800fcbc:	d205      	bcs.n	800fcca <__mcmp+0x32>
 800fcbe:	f04f 30ff 	mov.w	r0, #4294967295
 800fcc2:	bd30      	pop	{r4, r5, pc}
 800fcc4:	42a3      	cmp	r3, r4
 800fcc6:	d3f3      	bcc.n	800fcb0 <__mcmp+0x18>
 800fcc8:	e7fb      	b.n	800fcc2 <__mcmp+0x2a>
 800fcca:	2001      	movs	r0, #1
 800fccc:	e7f9      	b.n	800fcc2 <__mcmp+0x2a>
	...

0800fcd0 <__mdiff>:
 800fcd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcd4:	4689      	mov	r9, r1
 800fcd6:	4606      	mov	r6, r0
 800fcd8:	4611      	mov	r1, r2
 800fcda:	4648      	mov	r0, r9
 800fcdc:	4614      	mov	r4, r2
 800fcde:	f7ff ffdb 	bl	800fc98 <__mcmp>
 800fce2:	1e05      	subs	r5, r0, #0
 800fce4:	d112      	bne.n	800fd0c <__mdiff+0x3c>
 800fce6:	4629      	mov	r1, r5
 800fce8:	4630      	mov	r0, r6
 800fcea:	f7ff fd11 	bl	800f710 <_Balloc>
 800fcee:	4602      	mov	r2, r0
 800fcf0:	b928      	cbnz	r0, 800fcfe <__mdiff+0x2e>
 800fcf2:	4b3f      	ldr	r3, [pc, #252]	@ (800fdf0 <__mdiff+0x120>)
 800fcf4:	f240 2137 	movw	r1, #567	@ 0x237
 800fcf8:	483e      	ldr	r0, [pc, #248]	@ (800fdf4 <__mdiff+0x124>)
 800fcfa:	f7fe fd9d 	bl	800e838 <__assert_func>
 800fcfe:	2301      	movs	r3, #1
 800fd00:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fd04:	4610      	mov	r0, r2
 800fd06:	b003      	add	sp, #12
 800fd08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd0c:	bfbc      	itt	lt
 800fd0e:	464b      	movlt	r3, r9
 800fd10:	46a1      	movlt	r9, r4
 800fd12:	4630      	mov	r0, r6
 800fd14:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800fd18:	bfba      	itte	lt
 800fd1a:	461c      	movlt	r4, r3
 800fd1c:	2501      	movlt	r5, #1
 800fd1e:	2500      	movge	r5, #0
 800fd20:	f7ff fcf6 	bl	800f710 <_Balloc>
 800fd24:	4602      	mov	r2, r0
 800fd26:	b918      	cbnz	r0, 800fd30 <__mdiff+0x60>
 800fd28:	4b31      	ldr	r3, [pc, #196]	@ (800fdf0 <__mdiff+0x120>)
 800fd2a:	f240 2145 	movw	r1, #581	@ 0x245
 800fd2e:	e7e3      	b.n	800fcf8 <__mdiff+0x28>
 800fd30:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800fd34:	6926      	ldr	r6, [r4, #16]
 800fd36:	60c5      	str	r5, [r0, #12]
 800fd38:	f109 0310 	add.w	r3, r9, #16
 800fd3c:	f109 0514 	add.w	r5, r9, #20
 800fd40:	f104 0e14 	add.w	lr, r4, #20
 800fd44:	f100 0b14 	add.w	fp, r0, #20
 800fd48:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800fd4c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800fd50:	9301      	str	r3, [sp, #4]
 800fd52:	46d9      	mov	r9, fp
 800fd54:	f04f 0c00 	mov.w	ip, #0
 800fd58:	9b01      	ldr	r3, [sp, #4]
 800fd5a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800fd5e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800fd62:	9301      	str	r3, [sp, #4]
 800fd64:	fa1f f38a 	uxth.w	r3, sl
 800fd68:	4619      	mov	r1, r3
 800fd6a:	b283      	uxth	r3, r0
 800fd6c:	1acb      	subs	r3, r1, r3
 800fd6e:	0c00      	lsrs	r0, r0, #16
 800fd70:	4463      	add	r3, ip
 800fd72:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800fd76:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800fd7a:	b29b      	uxth	r3, r3
 800fd7c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800fd80:	4576      	cmp	r6, lr
 800fd82:	f849 3b04 	str.w	r3, [r9], #4
 800fd86:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800fd8a:	d8e5      	bhi.n	800fd58 <__mdiff+0x88>
 800fd8c:	1b33      	subs	r3, r6, r4
 800fd8e:	3b15      	subs	r3, #21
 800fd90:	f023 0303 	bic.w	r3, r3, #3
 800fd94:	3415      	adds	r4, #21
 800fd96:	3304      	adds	r3, #4
 800fd98:	42a6      	cmp	r6, r4
 800fd9a:	bf38      	it	cc
 800fd9c:	2304      	movcc	r3, #4
 800fd9e:	441d      	add	r5, r3
 800fda0:	445b      	add	r3, fp
 800fda2:	461e      	mov	r6, r3
 800fda4:	462c      	mov	r4, r5
 800fda6:	4544      	cmp	r4, r8
 800fda8:	d30e      	bcc.n	800fdc8 <__mdiff+0xf8>
 800fdaa:	f108 0103 	add.w	r1, r8, #3
 800fdae:	1b49      	subs	r1, r1, r5
 800fdb0:	f021 0103 	bic.w	r1, r1, #3
 800fdb4:	3d03      	subs	r5, #3
 800fdb6:	45a8      	cmp	r8, r5
 800fdb8:	bf38      	it	cc
 800fdba:	2100      	movcc	r1, #0
 800fdbc:	440b      	add	r3, r1
 800fdbe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fdc2:	b191      	cbz	r1, 800fdea <__mdiff+0x11a>
 800fdc4:	6117      	str	r7, [r2, #16]
 800fdc6:	e79d      	b.n	800fd04 <__mdiff+0x34>
 800fdc8:	f854 1b04 	ldr.w	r1, [r4], #4
 800fdcc:	46e6      	mov	lr, ip
 800fdce:	0c08      	lsrs	r0, r1, #16
 800fdd0:	fa1c fc81 	uxtah	ip, ip, r1
 800fdd4:	4471      	add	r1, lr
 800fdd6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800fdda:	b289      	uxth	r1, r1
 800fddc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800fde0:	f846 1b04 	str.w	r1, [r6], #4
 800fde4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800fde8:	e7dd      	b.n	800fda6 <__mdiff+0xd6>
 800fdea:	3f01      	subs	r7, #1
 800fdec:	e7e7      	b.n	800fdbe <__mdiff+0xee>
 800fdee:	bf00      	nop
 800fdf0:	08012ec7 	.word	0x08012ec7
 800fdf4:	08012ed8 	.word	0x08012ed8

0800fdf8 <__ulp>:
 800fdf8:	b082      	sub	sp, #8
 800fdfa:	ed8d 0b00 	vstr	d0, [sp]
 800fdfe:	9a01      	ldr	r2, [sp, #4]
 800fe00:	4b0f      	ldr	r3, [pc, #60]	@ (800fe40 <__ulp+0x48>)
 800fe02:	4013      	ands	r3, r2
 800fe04:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	dc08      	bgt.n	800fe1e <__ulp+0x26>
 800fe0c:	425b      	negs	r3, r3
 800fe0e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800fe12:	ea4f 5223 	mov.w	r2, r3, asr #20
 800fe16:	da04      	bge.n	800fe22 <__ulp+0x2a>
 800fe18:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800fe1c:	4113      	asrs	r3, r2
 800fe1e:	2200      	movs	r2, #0
 800fe20:	e008      	b.n	800fe34 <__ulp+0x3c>
 800fe22:	f1a2 0314 	sub.w	r3, r2, #20
 800fe26:	2b1e      	cmp	r3, #30
 800fe28:	bfda      	itte	le
 800fe2a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800fe2e:	40da      	lsrle	r2, r3
 800fe30:	2201      	movgt	r2, #1
 800fe32:	2300      	movs	r3, #0
 800fe34:	4619      	mov	r1, r3
 800fe36:	4610      	mov	r0, r2
 800fe38:	ec41 0b10 	vmov	d0, r0, r1
 800fe3c:	b002      	add	sp, #8
 800fe3e:	4770      	bx	lr
 800fe40:	7ff00000 	.word	0x7ff00000

0800fe44 <__b2d>:
 800fe44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe48:	6906      	ldr	r6, [r0, #16]
 800fe4a:	f100 0814 	add.w	r8, r0, #20
 800fe4e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800fe52:	1f37      	subs	r7, r6, #4
 800fe54:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800fe58:	4610      	mov	r0, r2
 800fe5a:	f7ff fd4b 	bl	800f8f4 <__hi0bits>
 800fe5e:	f1c0 0320 	rsb	r3, r0, #32
 800fe62:	280a      	cmp	r0, #10
 800fe64:	600b      	str	r3, [r1, #0]
 800fe66:	491b      	ldr	r1, [pc, #108]	@ (800fed4 <__b2d+0x90>)
 800fe68:	dc15      	bgt.n	800fe96 <__b2d+0x52>
 800fe6a:	f1c0 0c0b 	rsb	ip, r0, #11
 800fe6e:	fa22 f30c 	lsr.w	r3, r2, ip
 800fe72:	45b8      	cmp	r8, r7
 800fe74:	ea43 0501 	orr.w	r5, r3, r1
 800fe78:	bf34      	ite	cc
 800fe7a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800fe7e:	2300      	movcs	r3, #0
 800fe80:	3015      	adds	r0, #21
 800fe82:	fa02 f000 	lsl.w	r0, r2, r0
 800fe86:	fa23 f30c 	lsr.w	r3, r3, ip
 800fe8a:	4303      	orrs	r3, r0
 800fe8c:	461c      	mov	r4, r3
 800fe8e:	ec45 4b10 	vmov	d0, r4, r5
 800fe92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe96:	45b8      	cmp	r8, r7
 800fe98:	bf3a      	itte	cc
 800fe9a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800fe9e:	f1a6 0708 	subcc.w	r7, r6, #8
 800fea2:	2300      	movcs	r3, #0
 800fea4:	380b      	subs	r0, #11
 800fea6:	d012      	beq.n	800fece <__b2d+0x8a>
 800fea8:	f1c0 0120 	rsb	r1, r0, #32
 800feac:	fa23 f401 	lsr.w	r4, r3, r1
 800feb0:	4082      	lsls	r2, r0
 800feb2:	4322      	orrs	r2, r4
 800feb4:	4547      	cmp	r7, r8
 800feb6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800feba:	bf8c      	ite	hi
 800febc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800fec0:	2200      	movls	r2, #0
 800fec2:	4083      	lsls	r3, r0
 800fec4:	40ca      	lsrs	r2, r1
 800fec6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800feca:	4313      	orrs	r3, r2
 800fecc:	e7de      	b.n	800fe8c <__b2d+0x48>
 800fece:	ea42 0501 	orr.w	r5, r2, r1
 800fed2:	e7db      	b.n	800fe8c <__b2d+0x48>
 800fed4:	3ff00000 	.word	0x3ff00000

0800fed8 <__d2b>:
 800fed8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fedc:	460f      	mov	r7, r1
 800fede:	2101      	movs	r1, #1
 800fee0:	ec59 8b10 	vmov	r8, r9, d0
 800fee4:	4616      	mov	r6, r2
 800fee6:	f7ff fc13 	bl	800f710 <_Balloc>
 800feea:	4604      	mov	r4, r0
 800feec:	b930      	cbnz	r0, 800fefc <__d2b+0x24>
 800feee:	4602      	mov	r2, r0
 800fef0:	4b23      	ldr	r3, [pc, #140]	@ (800ff80 <__d2b+0xa8>)
 800fef2:	4824      	ldr	r0, [pc, #144]	@ (800ff84 <__d2b+0xac>)
 800fef4:	f240 310f 	movw	r1, #783	@ 0x30f
 800fef8:	f7fe fc9e 	bl	800e838 <__assert_func>
 800fefc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ff00:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ff04:	b10d      	cbz	r5, 800ff0a <__d2b+0x32>
 800ff06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ff0a:	9301      	str	r3, [sp, #4]
 800ff0c:	f1b8 0300 	subs.w	r3, r8, #0
 800ff10:	d023      	beq.n	800ff5a <__d2b+0x82>
 800ff12:	4668      	mov	r0, sp
 800ff14:	9300      	str	r3, [sp, #0]
 800ff16:	f7ff fd0c 	bl	800f932 <__lo0bits>
 800ff1a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ff1e:	b1d0      	cbz	r0, 800ff56 <__d2b+0x7e>
 800ff20:	f1c0 0320 	rsb	r3, r0, #32
 800ff24:	fa02 f303 	lsl.w	r3, r2, r3
 800ff28:	430b      	orrs	r3, r1
 800ff2a:	40c2      	lsrs	r2, r0
 800ff2c:	6163      	str	r3, [r4, #20]
 800ff2e:	9201      	str	r2, [sp, #4]
 800ff30:	9b01      	ldr	r3, [sp, #4]
 800ff32:	61a3      	str	r3, [r4, #24]
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	bf0c      	ite	eq
 800ff38:	2201      	moveq	r2, #1
 800ff3a:	2202      	movne	r2, #2
 800ff3c:	6122      	str	r2, [r4, #16]
 800ff3e:	b1a5      	cbz	r5, 800ff6a <__d2b+0x92>
 800ff40:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ff44:	4405      	add	r5, r0
 800ff46:	603d      	str	r5, [r7, #0]
 800ff48:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ff4c:	6030      	str	r0, [r6, #0]
 800ff4e:	4620      	mov	r0, r4
 800ff50:	b003      	add	sp, #12
 800ff52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ff56:	6161      	str	r1, [r4, #20]
 800ff58:	e7ea      	b.n	800ff30 <__d2b+0x58>
 800ff5a:	a801      	add	r0, sp, #4
 800ff5c:	f7ff fce9 	bl	800f932 <__lo0bits>
 800ff60:	9b01      	ldr	r3, [sp, #4]
 800ff62:	6163      	str	r3, [r4, #20]
 800ff64:	3020      	adds	r0, #32
 800ff66:	2201      	movs	r2, #1
 800ff68:	e7e8      	b.n	800ff3c <__d2b+0x64>
 800ff6a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ff6e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ff72:	6038      	str	r0, [r7, #0]
 800ff74:	6918      	ldr	r0, [r3, #16]
 800ff76:	f7ff fcbd 	bl	800f8f4 <__hi0bits>
 800ff7a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ff7e:	e7e5      	b.n	800ff4c <__d2b+0x74>
 800ff80:	08012ec7 	.word	0x08012ec7
 800ff84:	08012ed8 	.word	0x08012ed8

0800ff88 <__ratio>:
 800ff88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff8c:	b085      	sub	sp, #20
 800ff8e:	e9cd 1000 	strd	r1, r0, [sp]
 800ff92:	a902      	add	r1, sp, #8
 800ff94:	f7ff ff56 	bl	800fe44 <__b2d>
 800ff98:	9800      	ldr	r0, [sp, #0]
 800ff9a:	a903      	add	r1, sp, #12
 800ff9c:	ec55 4b10 	vmov	r4, r5, d0
 800ffa0:	f7ff ff50 	bl	800fe44 <__b2d>
 800ffa4:	9b01      	ldr	r3, [sp, #4]
 800ffa6:	6919      	ldr	r1, [r3, #16]
 800ffa8:	9b00      	ldr	r3, [sp, #0]
 800ffaa:	691b      	ldr	r3, [r3, #16]
 800ffac:	1ac9      	subs	r1, r1, r3
 800ffae:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800ffb2:	1a9b      	subs	r3, r3, r2
 800ffb4:	ec5b ab10 	vmov	sl, fp, d0
 800ffb8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	bfce      	itee	gt
 800ffc0:	462a      	movgt	r2, r5
 800ffc2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ffc6:	465a      	movle	r2, fp
 800ffc8:	462f      	mov	r7, r5
 800ffca:	46d9      	mov	r9, fp
 800ffcc:	bfcc      	ite	gt
 800ffce:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ffd2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800ffd6:	464b      	mov	r3, r9
 800ffd8:	4652      	mov	r2, sl
 800ffda:	4620      	mov	r0, r4
 800ffdc:	4639      	mov	r1, r7
 800ffde:	f7f0 fc35 	bl	800084c <__aeabi_ddiv>
 800ffe2:	ec41 0b10 	vmov	d0, r0, r1
 800ffe6:	b005      	add	sp, #20
 800ffe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ffec <__copybits>:
 800ffec:	3901      	subs	r1, #1
 800ffee:	b570      	push	{r4, r5, r6, lr}
 800fff0:	1149      	asrs	r1, r1, #5
 800fff2:	6914      	ldr	r4, [r2, #16]
 800fff4:	3101      	adds	r1, #1
 800fff6:	f102 0314 	add.w	r3, r2, #20
 800fffa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800fffe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010002:	1f05      	subs	r5, r0, #4
 8010004:	42a3      	cmp	r3, r4
 8010006:	d30c      	bcc.n	8010022 <__copybits+0x36>
 8010008:	1aa3      	subs	r3, r4, r2
 801000a:	3b11      	subs	r3, #17
 801000c:	f023 0303 	bic.w	r3, r3, #3
 8010010:	3211      	adds	r2, #17
 8010012:	42a2      	cmp	r2, r4
 8010014:	bf88      	it	hi
 8010016:	2300      	movhi	r3, #0
 8010018:	4418      	add	r0, r3
 801001a:	2300      	movs	r3, #0
 801001c:	4288      	cmp	r0, r1
 801001e:	d305      	bcc.n	801002c <__copybits+0x40>
 8010020:	bd70      	pop	{r4, r5, r6, pc}
 8010022:	f853 6b04 	ldr.w	r6, [r3], #4
 8010026:	f845 6f04 	str.w	r6, [r5, #4]!
 801002a:	e7eb      	b.n	8010004 <__copybits+0x18>
 801002c:	f840 3b04 	str.w	r3, [r0], #4
 8010030:	e7f4      	b.n	801001c <__copybits+0x30>

08010032 <__any_on>:
 8010032:	f100 0214 	add.w	r2, r0, #20
 8010036:	6900      	ldr	r0, [r0, #16]
 8010038:	114b      	asrs	r3, r1, #5
 801003a:	4298      	cmp	r0, r3
 801003c:	b510      	push	{r4, lr}
 801003e:	db11      	blt.n	8010064 <__any_on+0x32>
 8010040:	dd0a      	ble.n	8010058 <__any_on+0x26>
 8010042:	f011 011f 	ands.w	r1, r1, #31
 8010046:	d007      	beq.n	8010058 <__any_on+0x26>
 8010048:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801004c:	fa24 f001 	lsr.w	r0, r4, r1
 8010050:	fa00 f101 	lsl.w	r1, r0, r1
 8010054:	428c      	cmp	r4, r1
 8010056:	d10b      	bne.n	8010070 <__any_on+0x3e>
 8010058:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801005c:	4293      	cmp	r3, r2
 801005e:	d803      	bhi.n	8010068 <__any_on+0x36>
 8010060:	2000      	movs	r0, #0
 8010062:	bd10      	pop	{r4, pc}
 8010064:	4603      	mov	r3, r0
 8010066:	e7f7      	b.n	8010058 <__any_on+0x26>
 8010068:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801006c:	2900      	cmp	r1, #0
 801006e:	d0f5      	beq.n	801005c <__any_on+0x2a>
 8010070:	2001      	movs	r0, #1
 8010072:	e7f6      	b.n	8010062 <__any_on+0x30>

08010074 <sulp>:
 8010074:	b570      	push	{r4, r5, r6, lr}
 8010076:	4604      	mov	r4, r0
 8010078:	460d      	mov	r5, r1
 801007a:	ec45 4b10 	vmov	d0, r4, r5
 801007e:	4616      	mov	r6, r2
 8010080:	f7ff feba 	bl	800fdf8 <__ulp>
 8010084:	ec51 0b10 	vmov	r0, r1, d0
 8010088:	b17e      	cbz	r6, 80100aa <sulp+0x36>
 801008a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801008e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8010092:	2b00      	cmp	r3, #0
 8010094:	dd09      	ble.n	80100aa <sulp+0x36>
 8010096:	051b      	lsls	r3, r3, #20
 8010098:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 801009c:	2400      	movs	r4, #0
 801009e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80100a2:	4622      	mov	r2, r4
 80100a4:	462b      	mov	r3, r5
 80100a6:	f7f0 faa7 	bl	80005f8 <__aeabi_dmul>
 80100aa:	ec41 0b10 	vmov	d0, r0, r1
 80100ae:	bd70      	pop	{r4, r5, r6, pc}

080100b0 <_strtod_l>:
 80100b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100b4:	b09f      	sub	sp, #124	@ 0x7c
 80100b6:	460c      	mov	r4, r1
 80100b8:	9217      	str	r2, [sp, #92]	@ 0x5c
 80100ba:	2200      	movs	r2, #0
 80100bc:	921a      	str	r2, [sp, #104]	@ 0x68
 80100be:	9005      	str	r0, [sp, #20]
 80100c0:	f04f 0a00 	mov.w	sl, #0
 80100c4:	f04f 0b00 	mov.w	fp, #0
 80100c8:	460a      	mov	r2, r1
 80100ca:	9219      	str	r2, [sp, #100]	@ 0x64
 80100cc:	7811      	ldrb	r1, [r2, #0]
 80100ce:	292b      	cmp	r1, #43	@ 0x2b
 80100d0:	d04a      	beq.n	8010168 <_strtod_l+0xb8>
 80100d2:	d838      	bhi.n	8010146 <_strtod_l+0x96>
 80100d4:	290d      	cmp	r1, #13
 80100d6:	d832      	bhi.n	801013e <_strtod_l+0x8e>
 80100d8:	2908      	cmp	r1, #8
 80100da:	d832      	bhi.n	8010142 <_strtod_l+0x92>
 80100dc:	2900      	cmp	r1, #0
 80100de:	d03b      	beq.n	8010158 <_strtod_l+0xa8>
 80100e0:	2200      	movs	r2, #0
 80100e2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80100e4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80100e6:	782a      	ldrb	r2, [r5, #0]
 80100e8:	2a30      	cmp	r2, #48	@ 0x30
 80100ea:	f040 80b3 	bne.w	8010254 <_strtod_l+0x1a4>
 80100ee:	786a      	ldrb	r2, [r5, #1]
 80100f0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80100f4:	2a58      	cmp	r2, #88	@ 0x58
 80100f6:	d16e      	bne.n	80101d6 <_strtod_l+0x126>
 80100f8:	9302      	str	r3, [sp, #8]
 80100fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80100fc:	9301      	str	r3, [sp, #4]
 80100fe:	ab1a      	add	r3, sp, #104	@ 0x68
 8010100:	9300      	str	r3, [sp, #0]
 8010102:	4a8e      	ldr	r2, [pc, #568]	@ (801033c <_strtod_l+0x28c>)
 8010104:	9805      	ldr	r0, [sp, #20]
 8010106:	ab1b      	add	r3, sp, #108	@ 0x6c
 8010108:	a919      	add	r1, sp, #100	@ 0x64
 801010a:	f001 fa7b 	bl	8011604 <__gethex>
 801010e:	f010 060f 	ands.w	r6, r0, #15
 8010112:	4604      	mov	r4, r0
 8010114:	d005      	beq.n	8010122 <_strtod_l+0x72>
 8010116:	2e06      	cmp	r6, #6
 8010118:	d128      	bne.n	801016c <_strtod_l+0xbc>
 801011a:	3501      	adds	r5, #1
 801011c:	2300      	movs	r3, #0
 801011e:	9519      	str	r5, [sp, #100]	@ 0x64
 8010120:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010122:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8010124:	2b00      	cmp	r3, #0
 8010126:	f040 858e 	bne.w	8010c46 <_strtod_l+0xb96>
 801012a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801012c:	b1cb      	cbz	r3, 8010162 <_strtod_l+0xb2>
 801012e:	4652      	mov	r2, sl
 8010130:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8010134:	ec43 2b10 	vmov	d0, r2, r3
 8010138:	b01f      	add	sp, #124	@ 0x7c
 801013a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801013e:	2920      	cmp	r1, #32
 8010140:	d1ce      	bne.n	80100e0 <_strtod_l+0x30>
 8010142:	3201      	adds	r2, #1
 8010144:	e7c1      	b.n	80100ca <_strtod_l+0x1a>
 8010146:	292d      	cmp	r1, #45	@ 0x2d
 8010148:	d1ca      	bne.n	80100e0 <_strtod_l+0x30>
 801014a:	2101      	movs	r1, #1
 801014c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801014e:	1c51      	adds	r1, r2, #1
 8010150:	9119      	str	r1, [sp, #100]	@ 0x64
 8010152:	7852      	ldrb	r2, [r2, #1]
 8010154:	2a00      	cmp	r2, #0
 8010156:	d1c5      	bne.n	80100e4 <_strtod_l+0x34>
 8010158:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801015a:	9419      	str	r4, [sp, #100]	@ 0x64
 801015c:	2b00      	cmp	r3, #0
 801015e:	f040 8570 	bne.w	8010c42 <_strtod_l+0xb92>
 8010162:	4652      	mov	r2, sl
 8010164:	465b      	mov	r3, fp
 8010166:	e7e5      	b.n	8010134 <_strtod_l+0x84>
 8010168:	2100      	movs	r1, #0
 801016a:	e7ef      	b.n	801014c <_strtod_l+0x9c>
 801016c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801016e:	b13a      	cbz	r2, 8010180 <_strtod_l+0xd0>
 8010170:	2135      	movs	r1, #53	@ 0x35
 8010172:	a81c      	add	r0, sp, #112	@ 0x70
 8010174:	f7ff ff3a 	bl	800ffec <__copybits>
 8010178:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801017a:	9805      	ldr	r0, [sp, #20]
 801017c:	f7ff fb08 	bl	800f790 <_Bfree>
 8010180:	3e01      	subs	r6, #1
 8010182:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8010184:	2e04      	cmp	r6, #4
 8010186:	d806      	bhi.n	8010196 <_strtod_l+0xe6>
 8010188:	e8df f006 	tbb	[pc, r6]
 801018c:	201d0314 	.word	0x201d0314
 8010190:	14          	.byte	0x14
 8010191:	00          	.byte	0x00
 8010192:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8010196:	05e1      	lsls	r1, r4, #23
 8010198:	bf48      	it	mi
 801019a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 801019e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80101a2:	0d1b      	lsrs	r3, r3, #20
 80101a4:	051b      	lsls	r3, r3, #20
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d1bb      	bne.n	8010122 <_strtod_l+0x72>
 80101aa:	f7fe fb03 	bl	800e7b4 <__errno>
 80101ae:	2322      	movs	r3, #34	@ 0x22
 80101b0:	6003      	str	r3, [r0, #0]
 80101b2:	e7b6      	b.n	8010122 <_strtod_l+0x72>
 80101b4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80101b8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80101bc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80101c0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80101c4:	e7e7      	b.n	8010196 <_strtod_l+0xe6>
 80101c6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8010344 <_strtod_l+0x294>
 80101ca:	e7e4      	b.n	8010196 <_strtod_l+0xe6>
 80101cc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80101d0:	f04f 3aff 	mov.w	sl, #4294967295
 80101d4:	e7df      	b.n	8010196 <_strtod_l+0xe6>
 80101d6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80101d8:	1c5a      	adds	r2, r3, #1
 80101da:	9219      	str	r2, [sp, #100]	@ 0x64
 80101dc:	785b      	ldrb	r3, [r3, #1]
 80101de:	2b30      	cmp	r3, #48	@ 0x30
 80101e0:	d0f9      	beq.n	80101d6 <_strtod_l+0x126>
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d09d      	beq.n	8010122 <_strtod_l+0x72>
 80101e6:	2301      	movs	r3, #1
 80101e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80101ea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80101ec:	930c      	str	r3, [sp, #48]	@ 0x30
 80101ee:	2300      	movs	r3, #0
 80101f0:	9308      	str	r3, [sp, #32]
 80101f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80101f4:	461f      	mov	r7, r3
 80101f6:	220a      	movs	r2, #10
 80101f8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80101fa:	7805      	ldrb	r5, [r0, #0]
 80101fc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8010200:	b2d9      	uxtb	r1, r3
 8010202:	2909      	cmp	r1, #9
 8010204:	d928      	bls.n	8010258 <_strtod_l+0x1a8>
 8010206:	494e      	ldr	r1, [pc, #312]	@ (8010340 <_strtod_l+0x290>)
 8010208:	2201      	movs	r2, #1
 801020a:	f001 f92d 	bl	8011468 <strncmp>
 801020e:	2800      	cmp	r0, #0
 8010210:	d032      	beq.n	8010278 <_strtod_l+0x1c8>
 8010212:	2000      	movs	r0, #0
 8010214:	462a      	mov	r2, r5
 8010216:	4681      	mov	r9, r0
 8010218:	463d      	mov	r5, r7
 801021a:	4603      	mov	r3, r0
 801021c:	2a65      	cmp	r2, #101	@ 0x65
 801021e:	d001      	beq.n	8010224 <_strtod_l+0x174>
 8010220:	2a45      	cmp	r2, #69	@ 0x45
 8010222:	d114      	bne.n	801024e <_strtod_l+0x19e>
 8010224:	b91d      	cbnz	r5, 801022e <_strtod_l+0x17e>
 8010226:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010228:	4302      	orrs	r2, r0
 801022a:	d095      	beq.n	8010158 <_strtod_l+0xa8>
 801022c:	2500      	movs	r5, #0
 801022e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8010230:	1c62      	adds	r2, r4, #1
 8010232:	9219      	str	r2, [sp, #100]	@ 0x64
 8010234:	7862      	ldrb	r2, [r4, #1]
 8010236:	2a2b      	cmp	r2, #43	@ 0x2b
 8010238:	d077      	beq.n	801032a <_strtod_l+0x27a>
 801023a:	2a2d      	cmp	r2, #45	@ 0x2d
 801023c:	d07b      	beq.n	8010336 <_strtod_l+0x286>
 801023e:	f04f 0c00 	mov.w	ip, #0
 8010242:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8010246:	2909      	cmp	r1, #9
 8010248:	f240 8082 	bls.w	8010350 <_strtod_l+0x2a0>
 801024c:	9419      	str	r4, [sp, #100]	@ 0x64
 801024e:	f04f 0800 	mov.w	r8, #0
 8010252:	e0a2      	b.n	801039a <_strtod_l+0x2ea>
 8010254:	2300      	movs	r3, #0
 8010256:	e7c7      	b.n	80101e8 <_strtod_l+0x138>
 8010258:	2f08      	cmp	r7, #8
 801025a:	bfd5      	itete	le
 801025c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 801025e:	9908      	ldrgt	r1, [sp, #32]
 8010260:	fb02 3301 	mlale	r3, r2, r1, r3
 8010264:	fb02 3301 	mlagt	r3, r2, r1, r3
 8010268:	f100 0001 	add.w	r0, r0, #1
 801026c:	bfd4      	ite	le
 801026e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8010270:	9308      	strgt	r3, [sp, #32]
 8010272:	3701      	adds	r7, #1
 8010274:	9019      	str	r0, [sp, #100]	@ 0x64
 8010276:	e7bf      	b.n	80101f8 <_strtod_l+0x148>
 8010278:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801027a:	1c5a      	adds	r2, r3, #1
 801027c:	9219      	str	r2, [sp, #100]	@ 0x64
 801027e:	785a      	ldrb	r2, [r3, #1]
 8010280:	b37f      	cbz	r7, 80102e2 <_strtod_l+0x232>
 8010282:	4681      	mov	r9, r0
 8010284:	463d      	mov	r5, r7
 8010286:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 801028a:	2b09      	cmp	r3, #9
 801028c:	d912      	bls.n	80102b4 <_strtod_l+0x204>
 801028e:	2301      	movs	r3, #1
 8010290:	e7c4      	b.n	801021c <_strtod_l+0x16c>
 8010292:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010294:	1c5a      	adds	r2, r3, #1
 8010296:	9219      	str	r2, [sp, #100]	@ 0x64
 8010298:	785a      	ldrb	r2, [r3, #1]
 801029a:	3001      	adds	r0, #1
 801029c:	2a30      	cmp	r2, #48	@ 0x30
 801029e:	d0f8      	beq.n	8010292 <_strtod_l+0x1e2>
 80102a0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80102a4:	2b08      	cmp	r3, #8
 80102a6:	f200 84d3 	bhi.w	8010c50 <_strtod_l+0xba0>
 80102aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80102ac:	930c      	str	r3, [sp, #48]	@ 0x30
 80102ae:	4681      	mov	r9, r0
 80102b0:	2000      	movs	r0, #0
 80102b2:	4605      	mov	r5, r0
 80102b4:	3a30      	subs	r2, #48	@ 0x30
 80102b6:	f100 0301 	add.w	r3, r0, #1
 80102ba:	d02a      	beq.n	8010312 <_strtod_l+0x262>
 80102bc:	4499      	add	r9, r3
 80102be:	eb00 0c05 	add.w	ip, r0, r5
 80102c2:	462b      	mov	r3, r5
 80102c4:	210a      	movs	r1, #10
 80102c6:	4563      	cmp	r3, ip
 80102c8:	d10d      	bne.n	80102e6 <_strtod_l+0x236>
 80102ca:	1c69      	adds	r1, r5, #1
 80102cc:	4401      	add	r1, r0
 80102ce:	4428      	add	r0, r5
 80102d0:	2808      	cmp	r0, #8
 80102d2:	dc16      	bgt.n	8010302 <_strtod_l+0x252>
 80102d4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80102d6:	230a      	movs	r3, #10
 80102d8:	fb03 2300 	mla	r3, r3, r0, r2
 80102dc:	930a      	str	r3, [sp, #40]	@ 0x28
 80102de:	2300      	movs	r3, #0
 80102e0:	e018      	b.n	8010314 <_strtod_l+0x264>
 80102e2:	4638      	mov	r0, r7
 80102e4:	e7da      	b.n	801029c <_strtod_l+0x1ec>
 80102e6:	2b08      	cmp	r3, #8
 80102e8:	f103 0301 	add.w	r3, r3, #1
 80102ec:	dc03      	bgt.n	80102f6 <_strtod_l+0x246>
 80102ee:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80102f0:	434e      	muls	r6, r1
 80102f2:	960a      	str	r6, [sp, #40]	@ 0x28
 80102f4:	e7e7      	b.n	80102c6 <_strtod_l+0x216>
 80102f6:	2b10      	cmp	r3, #16
 80102f8:	bfde      	ittt	le
 80102fa:	9e08      	ldrle	r6, [sp, #32]
 80102fc:	434e      	mulle	r6, r1
 80102fe:	9608      	strle	r6, [sp, #32]
 8010300:	e7e1      	b.n	80102c6 <_strtod_l+0x216>
 8010302:	280f      	cmp	r0, #15
 8010304:	dceb      	bgt.n	80102de <_strtod_l+0x22e>
 8010306:	9808      	ldr	r0, [sp, #32]
 8010308:	230a      	movs	r3, #10
 801030a:	fb03 2300 	mla	r3, r3, r0, r2
 801030e:	9308      	str	r3, [sp, #32]
 8010310:	e7e5      	b.n	80102de <_strtod_l+0x22e>
 8010312:	4629      	mov	r1, r5
 8010314:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010316:	1c50      	adds	r0, r2, #1
 8010318:	9019      	str	r0, [sp, #100]	@ 0x64
 801031a:	7852      	ldrb	r2, [r2, #1]
 801031c:	4618      	mov	r0, r3
 801031e:	460d      	mov	r5, r1
 8010320:	e7b1      	b.n	8010286 <_strtod_l+0x1d6>
 8010322:	f04f 0900 	mov.w	r9, #0
 8010326:	2301      	movs	r3, #1
 8010328:	e77d      	b.n	8010226 <_strtod_l+0x176>
 801032a:	f04f 0c00 	mov.w	ip, #0
 801032e:	1ca2      	adds	r2, r4, #2
 8010330:	9219      	str	r2, [sp, #100]	@ 0x64
 8010332:	78a2      	ldrb	r2, [r4, #2]
 8010334:	e785      	b.n	8010242 <_strtod_l+0x192>
 8010336:	f04f 0c01 	mov.w	ip, #1
 801033a:	e7f8      	b.n	801032e <_strtod_l+0x27e>
 801033c:	08013048 	.word	0x08013048
 8010340:	08013030 	.word	0x08013030
 8010344:	7ff00000 	.word	0x7ff00000
 8010348:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801034a:	1c51      	adds	r1, r2, #1
 801034c:	9119      	str	r1, [sp, #100]	@ 0x64
 801034e:	7852      	ldrb	r2, [r2, #1]
 8010350:	2a30      	cmp	r2, #48	@ 0x30
 8010352:	d0f9      	beq.n	8010348 <_strtod_l+0x298>
 8010354:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8010358:	2908      	cmp	r1, #8
 801035a:	f63f af78 	bhi.w	801024e <_strtod_l+0x19e>
 801035e:	3a30      	subs	r2, #48	@ 0x30
 8010360:	920e      	str	r2, [sp, #56]	@ 0x38
 8010362:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010364:	920f      	str	r2, [sp, #60]	@ 0x3c
 8010366:	f04f 080a 	mov.w	r8, #10
 801036a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801036c:	1c56      	adds	r6, r2, #1
 801036e:	9619      	str	r6, [sp, #100]	@ 0x64
 8010370:	7852      	ldrb	r2, [r2, #1]
 8010372:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8010376:	f1be 0f09 	cmp.w	lr, #9
 801037a:	d939      	bls.n	80103f0 <_strtod_l+0x340>
 801037c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801037e:	1a76      	subs	r6, r6, r1
 8010380:	2e08      	cmp	r6, #8
 8010382:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8010386:	dc03      	bgt.n	8010390 <_strtod_l+0x2e0>
 8010388:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801038a:	4588      	cmp	r8, r1
 801038c:	bfa8      	it	ge
 801038e:	4688      	movge	r8, r1
 8010390:	f1bc 0f00 	cmp.w	ip, #0
 8010394:	d001      	beq.n	801039a <_strtod_l+0x2ea>
 8010396:	f1c8 0800 	rsb	r8, r8, #0
 801039a:	2d00      	cmp	r5, #0
 801039c:	d14e      	bne.n	801043c <_strtod_l+0x38c>
 801039e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80103a0:	4308      	orrs	r0, r1
 80103a2:	f47f aebe 	bne.w	8010122 <_strtod_l+0x72>
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	f47f aed6 	bne.w	8010158 <_strtod_l+0xa8>
 80103ac:	2a69      	cmp	r2, #105	@ 0x69
 80103ae:	d028      	beq.n	8010402 <_strtod_l+0x352>
 80103b0:	dc25      	bgt.n	80103fe <_strtod_l+0x34e>
 80103b2:	2a49      	cmp	r2, #73	@ 0x49
 80103b4:	d025      	beq.n	8010402 <_strtod_l+0x352>
 80103b6:	2a4e      	cmp	r2, #78	@ 0x4e
 80103b8:	f47f aece 	bne.w	8010158 <_strtod_l+0xa8>
 80103bc:	499b      	ldr	r1, [pc, #620]	@ (801062c <_strtod_l+0x57c>)
 80103be:	a819      	add	r0, sp, #100	@ 0x64
 80103c0:	f001 fb42 	bl	8011a48 <__match>
 80103c4:	2800      	cmp	r0, #0
 80103c6:	f43f aec7 	beq.w	8010158 <_strtod_l+0xa8>
 80103ca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80103cc:	781b      	ldrb	r3, [r3, #0]
 80103ce:	2b28      	cmp	r3, #40	@ 0x28
 80103d0:	d12e      	bne.n	8010430 <_strtod_l+0x380>
 80103d2:	4997      	ldr	r1, [pc, #604]	@ (8010630 <_strtod_l+0x580>)
 80103d4:	aa1c      	add	r2, sp, #112	@ 0x70
 80103d6:	a819      	add	r0, sp, #100	@ 0x64
 80103d8:	f001 fb4a 	bl	8011a70 <__hexnan>
 80103dc:	2805      	cmp	r0, #5
 80103de:	d127      	bne.n	8010430 <_strtod_l+0x380>
 80103e0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80103e2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80103e6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80103ea:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80103ee:	e698      	b.n	8010122 <_strtod_l+0x72>
 80103f0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80103f2:	fb08 2101 	mla	r1, r8, r1, r2
 80103f6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80103fa:	920e      	str	r2, [sp, #56]	@ 0x38
 80103fc:	e7b5      	b.n	801036a <_strtod_l+0x2ba>
 80103fe:	2a6e      	cmp	r2, #110	@ 0x6e
 8010400:	e7da      	b.n	80103b8 <_strtod_l+0x308>
 8010402:	498c      	ldr	r1, [pc, #560]	@ (8010634 <_strtod_l+0x584>)
 8010404:	a819      	add	r0, sp, #100	@ 0x64
 8010406:	f001 fb1f 	bl	8011a48 <__match>
 801040a:	2800      	cmp	r0, #0
 801040c:	f43f aea4 	beq.w	8010158 <_strtod_l+0xa8>
 8010410:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010412:	4989      	ldr	r1, [pc, #548]	@ (8010638 <_strtod_l+0x588>)
 8010414:	3b01      	subs	r3, #1
 8010416:	a819      	add	r0, sp, #100	@ 0x64
 8010418:	9319      	str	r3, [sp, #100]	@ 0x64
 801041a:	f001 fb15 	bl	8011a48 <__match>
 801041e:	b910      	cbnz	r0, 8010426 <_strtod_l+0x376>
 8010420:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010422:	3301      	adds	r3, #1
 8010424:	9319      	str	r3, [sp, #100]	@ 0x64
 8010426:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8010648 <_strtod_l+0x598>
 801042a:	f04f 0a00 	mov.w	sl, #0
 801042e:	e678      	b.n	8010122 <_strtod_l+0x72>
 8010430:	4882      	ldr	r0, [pc, #520]	@ (801063c <_strtod_l+0x58c>)
 8010432:	f001 f85d 	bl	80114f0 <nan>
 8010436:	ec5b ab10 	vmov	sl, fp, d0
 801043a:	e672      	b.n	8010122 <_strtod_l+0x72>
 801043c:	eba8 0309 	sub.w	r3, r8, r9
 8010440:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010442:	9309      	str	r3, [sp, #36]	@ 0x24
 8010444:	2f00      	cmp	r7, #0
 8010446:	bf08      	it	eq
 8010448:	462f      	moveq	r7, r5
 801044a:	2d10      	cmp	r5, #16
 801044c:	462c      	mov	r4, r5
 801044e:	bfa8      	it	ge
 8010450:	2410      	movge	r4, #16
 8010452:	f7f0 f857 	bl	8000504 <__aeabi_ui2d>
 8010456:	2d09      	cmp	r5, #9
 8010458:	4682      	mov	sl, r0
 801045a:	468b      	mov	fp, r1
 801045c:	dc13      	bgt.n	8010486 <_strtod_l+0x3d6>
 801045e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010460:	2b00      	cmp	r3, #0
 8010462:	f43f ae5e 	beq.w	8010122 <_strtod_l+0x72>
 8010466:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010468:	dd78      	ble.n	801055c <_strtod_l+0x4ac>
 801046a:	2b16      	cmp	r3, #22
 801046c:	dc5f      	bgt.n	801052e <_strtod_l+0x47e>
 801046e:	4974      	ldr	r1, [pc, #464]	@ (8010640 <_strtod_l+0x590>)
 8010470:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010474:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010478:	4652      	mov	r2, sl
 801047a:	465b      	mov	r3, fp
 801047c:	f7f0 f8bc 	bl	80005f8 <__aeabi_dmul>
 8010480:	4682      	mov	sl, r0
 8010482:	468b      	mov	fp, r1
 8010484:	e64d      	b.n	8010122 <_strtod_l+0x72>
 8010486:	4b6e      	ldr	r3, [pc, #440]	@ (8010640 <_strtod_l+0x590>)
 8010488:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801048c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8010490:	f7f0 f8b2 	bl	80005f8 <__aeabi_dmul>
 8010494:	4682      	mov	sl, r0
 8010496:	9808      	ldr	r0, [sp, #32]
 8010498:	468b      	mov	fp, r1
 801049a:	f7f0 f833 	bl	8000504 <__aeabi_ui2d>
 801049e:	4602      	mov	r2, r0
 80104a0:	460b      	mov	r3, r1
 80104a2:	4650      	mov	r0, sl
 80104a4:	4659      	mov	r1, fp
 80104a6:	f7ef fef1 	bl	800028c <__adddf3>
 80104aa:	2d0f      	cmp	r5, #15
 80104ac:	4682      	mov	sl, r0
 80104ae:	468b      	mov	fp, r1
 80104b0:	ddd5      	ble.n	801045e <_strtod_l+0x3ae>
 80104b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80104b4:	1b2c      	subs	r4, r5, r4
 80104b6:	441c      	add	r4, r3
 80104b8:	2c00      	cmp	r4, #0
 80104ba:	f340 8096 	ble.w	80105ea <_strtod_l+0x53a>
 80104be:	f014 030f 	ands.w	r3, r4, #15
 80104c2:	d00a      	beq.n	80104da <_strtod_l+0x42a>
 80104c4:	495e      	ldr	r1, [pc, #376]	@ (8010640 <_strtod_l+0x590>)
 80104c6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80104ca:	4652      	mov	r2, sl
 80104cc:	465b      	mov	r3, fp
 80104ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80104d2:	f7f0 f891 	bl	80005f8 <__aeabi_dmul>
 80104d6:	4682      	mov	sl, r0
 80104d8:	468b      	mov	fp, r1
 80104da:	f034 040f 	bics.w	r4, r4, #15
 80104de:	d073      	beq.n	80105c8 <_strtod_l+0x518>
 80104e0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80104e4:	dd48      	ble.n	8010578 <_strtod_l+0x4c8>
 80104e6:	2400      	movs	r4, #0
 80104e8:	46a0      	mov	r8, r4
 80104ea:	940a      	str	r4, [sp, #40]	@ 0x28
 80104ec:	46a1      	mov	r9, r4
 80104ee:	9a05      	ldr	r2, [sp, #20]
 80104f0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8010648 <_strtod_l+0x598>
 80104f4:	2322      	movs	r3, #34	@ 0x22
 80104f6:	6013      	str	r3, [r2, #0]
 80104f8:	f04f 0a00 	mov.w	sl, #0
 80104fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80104fe:	2b00      	cmp	r3, #0
 8010500:	f43f ae0f 	beq.w	8010122 <_strtod_l+0x72>
 8010504:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010506:	9805      	ldr	r0, [sp, #20]
 8010508:	f7ff f942 	bl	800f790 <_Bfree>
 801050c:	9805      	ldr	r0, [sp, #20]
 801050e:	4649      	mov	r1, r9
 8010510:	f7ff f93e 	bl	800f790 <_Bfree>
 8010514:	9805      	ldr	r0, [sp, #20]
 8010516:	4641      	mov	r1, r8
 8010518:	f7ff f93a 	bl	800f790 <_Bfree>
 801051c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801051e:	9805      	ldr	r0, [sp, #20]
 8010520:	f7ff f936 	bl	800f790 <_Bfree>
 8010524:	9805      	ldr	r0, [sp, #20]
 8010526:	4621      	mov	r1, r4
 8010528:	f7ff f932 	bl	800f790 <_Bfree>
 801052c:	e5f9      	b.n	8010122 <_strtod_l+0x72>
 801052e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010530:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8010534:	4293      	cmp	r3, r2
 8010536:	dbbc      	blt.n	80104b2 <_strtod_l+0x402>
 8010538:	4c41      	ldr	r4, [pc, #260]	@ (8010640 <_strtod_l+0x590>)
 801053a:	f1c5 050f 	rsb	r5, r5, #15
 801053e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8010542:	4652      	mov	r2, sl
 8010544:	465b      	mov	r3, fp
 8010546:	e9d1 0100 	ldrd	r0, r1, [r1]
 801054a:	f7f0 f855 	bl	80005f8 <__aeabi_dmul>
 801054e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010550:	1b5d      	subs	r5, r3, r5
 8010552:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8010556:	e9d4 2300 	ldrd	r2, r3, [r4]
 801055a:	e78f      	b.n	801047c <_strtod_l+0x3cc>
 801055c:	3316      	adds	r3, #22
 801055e:	dba8      	blt.n	80104b2 <_strtod_l+0x402>
 8010560:	4b37      	ldr	r3, [pc, #220]	@ (8010640 <_strtod_l+0x590>)
 8010562:	eba9 0808 	sub.w	r8, r9, r8
 8010566:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 801056a:	e9d8 2300 	ldrd	r2, r3, [r8]
 801056e:	4650      	mov	r0, sl
 8010570:	4659      	mov	r1, fp
 8010572:	f7f0 f96b 	bl	800084c <__aeabi_ddiv>
 8010576:	e783      	b.n	8010480 <_strtod_l+0x3d0>
 8010578:	4b32      	ldr	r3, [pc, #200]	@ (8010644 <_strtod_l+0x594>)
 801057a:	9308      	str	r3, [sp, #32]
 801057c:	2300      	movs	r3, #0
 801057e:	1124      	asrs	r4, r4, #4
 8010580:	4650      	mov	r0, sl
 8010582:	4659      	mov	r1, fp
 8010584:	461e      	mov	r6, r3
 8010586:	2c01      	cmp	r4, #1
 8010588:	dc21      	bgt.n	80105ce <_strtod_l+0x51e>
 801058a:	b10b      	cbz	r3, 8010590 <_strtod_l+0x4e0>
 801058c:	4682      	mov	sl, r0
 801058e:	468b      	mov	fp, r1
 8010590:	492c      	ldr	r1, [pc, #176]	@ (8010644 <_strtod_l+0x594>)
 8010592:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8010596:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 801059a:	4652      	mov	r2, sl
 801059c:	465b      	mov	r3, fp
 801059e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80105a2:	f7f0 f829 	bl	80005f8 <__aeabi_dmul>
 80105a6:	4b28      	ldr	r3, [pc, #160]	@ (8010648 <_strtod_l+0x598>)
 80105a8:	460a      	mov	r2, r1
 80105aa:	400b      	ands	r3, r1
 80105ac:	4927      	ldr	r1, [pc, #156]	@ (801064c <_strtod_l+0x59c>)
 80105ae:	428b      	cmp	r3, r1
 80105b0:	4682      	mov	sl, r0
 80105b2:	d898      	bhi.n	80104e6 <_strtod_l+0x436>
 80105b4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80105b8:	428b      	cmp	r3, r1
 80105ba:	bf86      	itte	hi
 80105bc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8010650 <_strtod_l+0x5a0>
 80105c0:	f04f 3aff 	movhi.w	sl, #4294967295
 80105c4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80105c8:	2300      	movs	r3, #0
 80105ca:	9308      	str	r3, [sp, #32]
 80105cc:	e07a      	b.n	80106c4 <_strtod_l+0x614>
 80105ce:	07e2      	lsls	r2, r4, #31
 80105d0:	d505      	bpl.n	80105de <_strtod_l+0x52e>
 80105d2:	9b08      	ldr	r3, [sp, #32]
 80105d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105d8:	f7f0 f80e 	bl	80005f8 <__aeabi_dmul>
 80105dc:	2301      	movs	r3, #1
 80105de:	9a08      	ldr	r2, [sp, #32]
 80105e0:	3208      	adds	r2, #8
 80105e2:	3601      	adds	r6, #1
 80105e4:	1064      	asrs	r4, r4, #1
 80105e6:	9208      	str	r2, [sp, #32]
 80105e8:	e7cd      	b.n	8010586 <_strtod_l+0x4d6>
 80105ea:	d0ed      	beq.n	80105c8 <_strtod_l+0x518>
 80105ec:	4264      	negs	r4, r4
 80105ee:	f014 020f 	ands.w	r2, r4, #15
 80105f2:	d00a      	beq.n	801060a <_strtod_l+0x55a>
 80105f4:	4b12      	ldr	r3, [pc, #72]	@ (8010640 <_strtod_l+0x590>)
 80105f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80105fa:	4650      	mov	r0, sl
 80105fc:	4659      	mov	r1, fp
 80105fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010602:	f7f0 f923 	bl	800084c <__aeabi_ddiv>
 8010606:	4682      	mov	sl, r0
 8010608:	468b      	mov	fp, r1
 801060a:	1124      	asrs	r4, r4, #4
 801060c:	d0dc      	beq.n	80105c8 <_strtod_l+0x518>
 801060e:	2c1f      	cmp	r4, #31
 8010610:	dd20      	ble.n	8010654 <_strtod_l+0x5a4>
 8010612:	2400      	movs	r4, #0
 8010614:	46a0      	mov	r8, r4
 8010616:	940a      	str	r4, [sp, #40]	@ 0x28
 8010618:	46a1      	mov	r9, r4
 801061a:	9a05      	ldr	r2, [sp, #20]
 801061c:	2322      	movs	r3, #34	@ 0x22
 801061e:	f04f 0a00 	mov.w	sl, #0
 8010622:	f04f 0b00 	mov.w	fp, #0
 8010626:	6013      	str	r3, [r2, #0]
 8010628:	e768      	b.n	80104fc <_strtod_l+0x44c>
 801062a:	bf00      	nop
 801062c:	08012764 	.word	0x08012764
 8010630:	08013034 	.word	0x08013034
 8010634:	0801275c 	.word	0x0801275c
 8010638:	08012e65 	.word	0x08012e65
 801063c:	08012e61 	.word	0x08012e61
 8010640:	08012f68 	.word	0x08012f68
 8010644:	08012f40 	.word	0x08012f40
 8010648:	7ff00000 	.word	0x7ff00000
 801064c:	7ca00000 	.word	0x7ca00000
 8010650:	7fefffff 	.word	0x7fefffff
 8010654:	f014 0310 	ands.w	r3, r4, #16
 8010658:	bf18      	it	ne
 801065a:	236a      	movne	r3, #106	@ 0x6a
 801065c:	4ea9      	ldr	r6, [pc, #676]	@ (8010904 <_strtod_l+0x854>)
 801065e:	9308      	str	r3, [sp, #32]
 8010660:	4650      	mov	r0, sl
 8010662:	4659      	mov	r1, fp
 8010664:	2300      	movs	r3, #0
 8010666:	07e2      	lsls	r2, r4, #31
 8010668:	d504      	bpl.n	8010674 <_strtod_l+0x5c4>
 801066a:	e9d6 2300 	ldrd	r2, r3, [r6]
 801066e:	f7ef ffc3 	bl	80005f8 <__aeabi_dmul>
 8010672:	2301      	movs	r3, #1
 8010674:	1064      	asrs	r4, r4, #1
 8010676:	f106 0608 	add.w	r6, r6, #8
 801067a:	d1f4      	bne.n	8010666 <_strtod_l+0x5b6>
 801067c:	b10b      	cbz	r3, 8010682 <_strtod_l+0x5d2>
 801067e:	4682      	mov	sl, r0
 8010680:	468b      	mov	fp, r1
 8010682:	9b08      	ldr	r3, [sp, #32]
 8010684:	b1b3      	cbz	r3, 80106b4 <_strtod_l+0x604>
 8010686:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801068a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 801068e:	2b00      	cmp	r3, #0
 8010690:	4659      	mov	r1, fp
 8010692:	dd0f      	ble.n	80106b4 <_strtod_l+0x604>
 8010694:	2b1f      	cmp	r3, #31
 8010696:	dd55      	ble.n	8010744 <_strtod_l+0x694>
 8010698:	2b34      	cmp	r3, #52	@ 0x34
 801069a:	bfde      	ittt	le
 801069c:	f04f 33ff 	movle.w	r3, #4294967295
 80106a0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80106a4:	4093      	lslle	r3, r2
 80106a6:	f04f 0a00 	mov.w	sl, #0
 80106aa:	bfcc      	ite	gt
 80106ac:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80106b0:	ea03 0b01 	andle.w	fp, r3, r1
 80106b4:	2200      	movs	r2, #0
 80106b6:	2300      	movs	r3, #0
 80106b8:	4650      	mov	r0, sl
 80106ba:	4659      	mov	r1, fp
 80106bc:	f7f0 fa04 	bl	8000ac8 <__aeabi_dcmpeq>
 80106c0:	2800      	cmp	r0, #0
 80106c2:	d1a6      	bne.n	8010612 <_strtod_l+0x562>
 80106c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80106c6:	9300      	str	r3, [sp, #0]
 80106c8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80106ca:	9805      	ldr	r0, [sp, #20]
 80106cc:	462b      	mov	r3, r5
 80106ce:	463a      	mov	r2, r7
 80106d0:	f7ff f8c6 	bl	800f860 <__s2b>
 80106d4:	900a      	str	r0, [sp, #40]	@ 0x28
 80106d6:	2800      	cmp	r0, #0
 80106d8:	f43f af05 	beq.w	80104e6 <_strtod_l+0x436>
 80106dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80106de:	2a00      	cmp	r2, #0
 80106e0:	eba9 0308 	sub.w	r3, r9, r8
 80106e4:	bfa8      	it	ge
 80106e6:	2300      	movge	r3, #0
 80106e8:	9312      	str	r3, [sp, #72]	@ 0x48
 80106ea:	2400      	movs	r4, #0
 80106ec:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80106f0:	9316      	str	r3, [sp, #88]	@ 0x58
 80106f2:	46a0      	mov	r8, r4
 80106f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80106f6:	9805      	ldr	r0, [sp, #20]
 80106f8:	6859      	ldr	r1, [r3, #4]
 80106fa:	f7ff f809 	bl	800f710 <_Balloc>
 80106fe:	4681      	mov	r9, r0
 8010700:	2800      	cmp	r0, #0
 8010702:	f43f aef4 	beq.w	80104ee <_strtod_l+0x43e>
 8010706:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010708:	691a      	ldr	r2, [r3, #16]
 801070a:	3202      	adds	r2, #2
 801070c:	f103 010c 	add.w	r1, r3, #12
 8010710:	0092      	lsls	r2, r2, #2
 8010712:	300c      	adds	r0, #12
 8010714:	f7fe f87c 	bl	800e810 <memcpy>
 8010718:	ec4b ab10 	vmov	d0, sl, fp
 801071c:	9805      	ldr	r0, [sp, #20]
 801071e:	aa1c      	add	r2, sp, #112	@ 0x70
 8010720:	a91b      	add	r1, sp, #108	@ 0x6c
 8010722:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8010726:	f7ff fbd7 	bl	800fed8 <__d2b>
 801072a:	901a      	str	r0, [sp, #104]	@ 0x68
 801072c:	2800      	cmp	r0, #0
 801072e:	f43f aede 	beq.w	80104ee <_strtod_l+0x43e>
 8010732:	9805      	ldr	r0, [sp, #20]
 8010734:	2101      	movs	r1, #1
 8010736:	f7ff f929 	bl	800f98c <__i2b>
 801073a:	4680      	mov	r8, r0
 801073c:	b948      	cbnz	r0, 8010752 <_strtod_l+0x6a2>
 801073e:	f04f 0800 	mov.w	r8, #0
 8010742:	e6d4      	b.n	80104ee <_strtod_l+0x43e>
 8010744:	f04f 32ff 	mov.w	r2, #4294967295
 8010748:	fa02 f303 	lsl.w	r3, r2, r3
 801074c:	ea03 0a0a 	and.w	sl, r3, sl
 8010750:	e7b0      	b.n	80106b4 <_strtod_l+0x604>
 8010752:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8010754:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8010756:	2d00      	cmp	r5, #0
 8010758:	bfab      	itete	ge
 801075a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 801075c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 801075e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8010760:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8010762:	bfac      	ite	ge
 8010764:	18ef      	addge	r7, r5, r3
 8010766:	1b5e      	sublt	r6, r3, r5
 8010768:	9b08      	ldr	r3, [sp, #32]
 801076a:	1aed      	subs	r5, r5, r3
 801076c:	4415      	add	r5, r2
 801076e:	4b66      	ldr	r3, [pc, #408]	@ (8010908 <_strtod_l+0x858>)
 8010770:	3d01      	subs	r5, #1
 8010772:	429d      	cmp	r5, r3
 8010774:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8010778:	da50      	bge.n	801081c <_strtod_l+0x76c>
 801077a:	1b5b      	subs	r3, r3, r5
 801077c:	2b1f      	cmp	r3, #31
 801077e:	eba2 0203 	sub.w	r2, r2, r3
 8010782:	f04f 0101 	mov.w	r1, #1
 8010786:	dc3d      	bgt.n	8010804 <_strtod_l+0x754>
 8010788:	fa01 f303 	lsl.w	r3, r1, r3
 801078c:	9313      	str	r3, [sp, #76]	@ 0x4c
 801078e:	2300      	movs	r3, #0
 8010790:	9310      	str	r3, [sp, #64]	@ 0x40
 8010792:	18bd      	adds	r5, r7, r2
 8010794:	9b08      	ldr	r3, [sp, #32]
 8010796:	42af      	cmp	r7, r5
 8010798:	4416      	add	r6, r2
 801079a:	441e      	add	r6, r3
 801079c:	463b      	mov	r3, r7
 801079e:	bfa8      	it	ge
 80107a0:	462b      	movge	r3, r5
 80107a2:	42b3      	cmp	r3, r6
 80107a4:	bfa8      	it	ge
 80107a6:	4633      	movge	r3, r6
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	bfc2      	ittt	gt
 80107ac:	1aed      	subgt	r5, r5, r3
 80107ae:	1af6      	subgt	r6, r6, r3
 80107b0:	1aff      	subgt	r7, r7, r3
 80107b2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	dd16      	ble.n	80107e6 <_strtod_l+0x736>
 80107b8:	4641      	mov	r1, r8
 80107ba:	9805      	ldr	r0, [sp, #20]
 80107bc:	461a      	mov	r2, r3
 80107be:	f7ff f9a5 	bl	800fb0c <__pow5mult>
 80107c2:	4680      	mov	r8, r0
 80107c4:	2800      	cmp	r0, #0
 80107c6:	d0ba      	beq.n	801073e <_strtod_l+0x68e>
 80107c8:	4601      	mov	r1, r0
 80107ca:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80107cc:	9805      	ldr	r0, [sp, #20]
 80107ce:	f7ff f8f3 	bl	800f9b8 <__multiply>
 80107d2:	900e      	str	r0, [sp, #56]	@ 0x38
 80107d4:	2800      	cmp	r0, #0
 80107d6:	f43f ae8a 	beq.w	80104ee <_strtod_l+0x43e>
 80107da:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80107dc:	9805      	ldr	r0, [sp, #20]
 80107de:	f7fe ffd7 	bl	800f790 <_Bfree>
 80107e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80107e4:	931a      	str	r3, [sp, #104]	@ 0x68
 80107e6:	2d00      	cmp	r5, #0
 80107e8:	dc1d      	bgt.n	8010826 <_strtod_l+0x776>
 80107ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	dd23      	ble.n	8010838 <_strtod_l+0x788>
 80107f0:	4649      	mov	r1, r9
 80107f2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80107f4:	9805      	ldr	r0, [sp, #20]
 80107f6:	f7ff f989 	bl	800fb0c <__pow5mult>
 80107fa:	4681      	mov	r9, r0
 80107fc:	b9e0      	cbnz	r0, 8010838 <_strtod_l+0x788>
 80107fe:	f04f 0900 	mov.w	r9, #0
 8010802:	e674      	b.n	80104ee <_strtod_l+0x43e>
 8010804:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8010808:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 801080c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8010810:	35e2      	adds	r5, #226	@ 0xe2
 8010812:	fa01 f305 	lsl.w	r3, r1, r5
 8010816:	9310      	str	r3, [sp, #64]	@ 0x40
 8010818:	9113      	str	r1, [sp, #76]	@ 0x4c
 801081a:	e7ba      	b.n	8010792 <_strtod_l+0x6e2>
 801081c:	2300      	movs	r3, #0
 801081e:	9310      	str	r3, [sp, #64]	@ 0x40
 8010820:	2301      	movs	r3, #1
 8010822:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010824:	e7b5      	b.n	8010792 <_strtod_l+0x6e2>
 8010826:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010828:	9805      	ldr	r0, [sp, #20]
 801082a:	462a      	mov	r2, r5
 801082c:	f7ff f9c8 	bl	800fbc0 <__lshift>
 8010830:	901a      	str	r0, [sp, #104]	@ 0x68
 8010832:	2800      	cmp	r0, #0
 8010834:	d1d9      	bne.n	80107ea <_strtod_l+0x73a>
 8010836:	e65a      	b.n	80104ee <_strtod_l+0x43e>
 8010838:	2e00      	cmp	r6, #0
 801083a:	dd07      	ble.n	801084c <_strtod_l+0x79c>
 801083c:	4649      	mov	r1, r9
 801083e:	9805      	ldr	r0, [sp, #20]
 8010840:	4632      	mov	r2, r6
 8010842:	f7ff f9bd 	bl	800fbc0 <__lshift>
 8010846:	4681      	mov	r9, r0
 8010848:	2800      	cmp	r0, #0
 801084a:	d0d8      	beq.n	80107fe <_strtod_l+0x74e>
 801084c:	2f00      	cmp	r7, #0
 801084e:	dd08      	ble.n	8010862 <_strtod_l+0x7b2>
 8010850:	4641      	mov	r1, r8
 8010852:	9805      	ldr	r0, [sp, #20]
 8010854:	463a      	mov	r2, r7
 8010856:	f7ff f9b3 	bl	800fbc0 <__lshift>
 801085a:	4680      	mov	r8, r0
 801085c:	2800      	cmp	r0, #0
 801085e:	f43f ae46 	beq.w	80104ee <_strtod_l+0x43e>
 8010862:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010864:	9805      	ldr	r0, [sp, #20]
 8010866:	464a      	mov	r2, r9
 8010868:	f7ff fa32 	bl	800fcd0 <__mdiff>
 801086c:	4604      	mov	r4, r0
 801086e:	2800      	cmp	r0, #0
 8010870:	f43f ae3d 	beq.w	80104ee <_strtod_l+0x43e>
 8010874:	68c3      	ldr	r3, [r0, #12]
 8010876:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010878:	2300      	movs	r3, #0
 801087a:	60c3      	str	r3, [r0, #12]
 801087c:	4641      	mov	r1, r8
 801087e:	f7ff fa0b 	bl	800fc98 <__mcmp>
 8010882:	2800      	cmp	r0, #0
 8010884:	da46      	bge.n	8010914 <_strtod_l+0x864>
 8010886:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010888:	ea53 030a 	orrs.w	r3, r3, sl
 801088c:	d16c      	bne.n	8010968 <_strtod_l+0x8b8>
 801088e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010892:	2b00      	cmp	r3, #0
 8010894:	d168      	bne.n	8010968 <_strtod_l+0x8b8>
 8010896:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801089a:	0d1b      	lsrs	r3, r3, #20
 801089c:	051b      	lsls	r3, r3, #20
 801089e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80108a2:	d961      	bls.n	8010968 <_strtod_l+0x8b8>
 80108a4:	6963      	ldr	r3, [r4, #20]
 80108a6:	b913      	cbnz	r3, 80108ae <_strtod_l+0x7fe>
 80108a8:	6923      	ldr	r3, [r4, #16]
 80108aa:	2b01      	cmp	r3, #1
 80108ac:	dd5c      	ble.n	8010968 <_strtod_l+0x8b8>
 80108ae:	4621      	mov	r1, r4
 80108b0:	2201      	movs	r2, #1
 80108b2:	9805      	ldr	r0, [sp, #20]
 80108b4:	f7ff f984 	bl	800fbc0 <__lshift>
 80108b8:	4641      	mov	r1, r8
 80108ba:	4604      	mov	r4, r0
 80108bc:	f7ff f9ec 	bl	800fc98 <__mcmp>
 80108c0:	2800      	cmp	r0, #0
 80108c2:	dd51      	ble.n	8010968 <_strtod_l+0x8b8>
 80108c4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80108c8:	9a08      	ldr	r2, [sp, #32]
 80108ca:	0d1b      	lsrs	r3, r3, #20
 80108cc:	051b      	lsls	r3, r3, #20
 80108ce:	2a00      	cmp	r2, #0
 80108d0:	d06b      	beq.n	80109aa <_strtod_l+0x8fa>
 80108d2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80108d6:	d868      	bhi.n	80109aa <_strtod_l+0x8fa>
 80108d8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80108dc:	f67f ae9d 	bls.w	801061a <_strtod_l+0x56a>
 80108e0:	4b0a      	ldr	r3, [pc, #40]	@ (801090c <_strtod_l+0x85c>)
 80108e2:	4650      	mov	r0, sl
 80108e4:	4659      	mov	r1, fp
 80108e6:	2200      	movs	r2, #0
 80108e8:	f7ef fe86 	bl	80005f8 <__aeabi_dmul>
 80108ec:	4b08      	ldr	r3, [pc, #32]	@ (8010910 <_strtod_l+0x860>)
 80108ee:	400b      	ands	r3, r1
 80108f0:	4682      	mov	sl, r0
 80108f2:	468b      	mov	fp, r1
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	f47f ae05 	bne.w	8010504 <_strtod_l+0x454>
 80108fa:	9a05      	ldr	r2, [sp, #20]
 80108fc:	2322      	movs	r3, #34	@ 0x22
 80108fe:	6013      	str	r3, [r2, #0]
 8010900:	e600      	b.n	8010504 <_strtod_l+0x454>
 8010902:	bf00      	nop
 8010904:	08013060 	.word	0x08013060
 8010908:	fffffc02 	.word	0xfffffc02
 801090c:	39500000 	.word	0x39500000
 8010910:	7ff00000 	.word	0x7ff00000
 8010914:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8010918:	d165      	bne.n	80109e6 <_strtod_l+0x936>
 801091a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801091c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010920:	b35a      	cbz	r2, 801097a <_strtod_l+0x8ca>
 8010922:	4a9f      	ldr	r2, [pc, #636]	@ (8010ba0 <_strtod_l+0xaf0>)
 8010924:	4293      	cmp	r3, r2
 8010926:	d12b      	bne.n	8010980 <_strtod_l+0x8d0>
 8010928:	9b08      	ldr	r3, [sp, #32]
 801092a:	4651      	mov	r1, sl
 801092c:	b303      	cbz	r3, 8010970 <_strtod_l+0x8c0>
 801092e:	4b9d      	ldr	r3, [pc, #628]	@ (8010ba4 <_strtod_l+0xaf4>)
 8010930:	465a      	mov	r2, fp
 8010932:	4013      	ands	r3, r2
 8010934:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8010938:	f04f 32ff 	mov.w	r2, #4294967295
 801093c:	d81b      	bhi.n	8010976 <_strtod_l+0x8c6>
 801093e:	0d1b      	lsrs	r3, r3, #20
 8010940:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8010944:	fa02 f303 	lsl.w	r3, r2, r3
 8010948:	4299      	cmp	r1, r3
 801094a:	d119      	bne.n	8010980 <_strtod_l+0x8d0>
 801094c:	4b96      	ldr	r3, [pc, #600]	@ (8010ba8 <_strtod_l+0xaf8>)
 801094e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010950:	429a      	cmp	r2, r3
 8010952:	d102      	bne.n	801095a <_strtod_l+0x8aa>
 8010954:	3101      	adds	r1, #1
 8010956:	f43f adca 	beq.w	80104ee <_strtod_l+0x43e>
 801095a:	4b92      	ldr	r3, [pc, #584]	@ (8010ba4 <_strtod_l+0xaf4>)
 801095c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801095e:	401a      	ands	r2, r3
 8010960:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8010964:	f04f 0a00 	mov.w	sl, #0
 8010968:	9b08      	ldr	r3, [sp, #32]
 801096a:	2b00      	cmp	r3, #0
 801096c:	d1b8      	bne.n	80108e0 <_strtod_l+0x830>
 801096e:	e5c9      	b.n	8010504 <_strtod_l+0x454>
 8010970:	f04f 33ff 	mov.w	r3, #4294967295
 8010974:	e7e8      	b.n	8010948 <_strtod_l+0x898>
 8010976:	4613      	mov	r3, r2
 8010978:	e7e6      	b.n	8010948 <_strtod_l+0x898>
 801097a:	ea53 030a 	orrs.w	r3, r3, sl
 801097e:	d0a1      	beq.n	80108c4 <_strtod_l+0x814>
 8010980:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010982:	b1db      	cbz	r3, 80109bc <_strtod_l+0x90c>
 8010984:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010986:	4213      	tst	r3, r2
 8010988:	d0ee      	beq.n	8010968 <_strtod_l+0x8b8>
 801098a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801098c:	9a08      	ldr	r2, [sp, #32]
 801098e:	4650      	mov	r0, sl
 8010990:	4659      	mov	r1, fp
 8010992:	b1bb      	cbz	r3, 80109c4 <_strtod_l+0x914>
 8010994:	f7ff fb6e 	bl	8010074 <sulp>
 8010998:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801099c:	ec53 2b10 	vmov	r2, r3, d0
 80109a0:	f7ef fc74 	bl	800028c <__adddf3>
 80109a4:	4682      	mov	sl, r0
 80109a6:	468b      	mov	fp, r1
 80109a8:	e7de      	b.n	8010968 <_strtod_l+0x8b8>
 80109aa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80109ae:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80109b2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80109b6:	f04f 3aff 	mov.w	sl, #4294967295
 80109ba:	e7d5      	b.n	8010968 <_strtod_l+0x8b8>
 80109bc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80109be:	ea13 0f0a 	tst.w	r3, sl
 80109c2:	e7e1      	b.n	8010988 <_strtod_l+0x8d8>
 80109c4:	f7ff fb56 	bl	8010074 <sulp>
 80109c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80109cc:	ec53 2b10 	vmov	r2, r3, d0
 80109d0:	f7ef fc5a 	bl	8000288 <__aeabi_dsub>
 80109d4:	2200      	movs	r2, #0
 80109d6:	2300      	movs	r3, #0
 80109d8:	4682      	mov	sl, r0
 80109da:	468b      	mov	fp, r1
 80109dc:	f7f0 f874 	bl	8000ac8 <__aeabi_dcmpeq>
 80109e0:	2800      	cmp	r0, #0
 80109e2:	d0c1      	beq.n	8010968 <_strtod_l+0x8b8>
 80109e4:	e619      	b.n	801061a <_strtod_l+0x56a>
 80109e6:	4641      	mov	r1, r8
 80109e8:	4620      	mov	r0, r4
 80109ea:	f7ff facd 	bl	800ff88 <__ratio>
 80109ee:	ec57 6b10 	vmov	r6, r7, d0
 80109f2:	2200      	movs	r2, #0
 80109f4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80109f8:	4630      	mov	r0, r6
 80109fa:	4639      	mov	r1, r7
 80109fc:	f7f0 f878 	bl	8000af0 <__aeabi_dcmple>
 8010a00:	2800      	cmp	r0, #0
 8010a02:	d06f      	beq.n	8010ae4 <_strtod_l+0xa34>
 8010a04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d17a      	bne.n	8010b00 <_strtod_l+0xa50>
 8010a0a:	f1ba 0f00 	cmp.w	sl, #0
 8010a0e:	d158      	bne.n	8010ac2 <_strtod_l+0xa12>
 8010a10:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010a12:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d15a      	bne.n	8010ad0 <_strtod_l+0xa20>
 8010a1a:	4b64      	ldr	r3, [pc, #400]	@ (8010bac <_strtod_l+0xafc>)
 8010a1c:	2200      	movs	r2, #0
 8010a1e:	4630      	mov	r0, r6
 8010a20:	4639      	mov	r1, r7
 8010a22:	f7f0 f85b 	bl	8000adc <__aeabi_dcmplt>
 8010a26:	2800      	cmp	r0, #0
 8010a28:	d159      	bne.n	8010ade <_strtod_l+0xa2e>
 8010a2a:	4630      	mov	r0, r6
 8010a2c:	4639      	mov	r1, r7
 8010a2e:	4b60      	ldr	r3, [pc, #384]	@ (8010bb0 <_strtod_l+0xb00>)
 8010a30:	2200      	movs	r2, #0
 8010a32:	f7ef fde1 	bl	80005f8 <__aeabi_dmul>
 8010a36:	4606      	mov	r6, r0
 8010a38:	460f      	mov	r7, r1
 8010a3a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8010a3e:	9606      	str	r6, [sp, #24]
 8010a40:	9307      	str	r3, [sp, #28]
 8010a42:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010a46:	4d57      	ldr	r5, [pc, #348]	@ (8010ba4 <_strtod_l+0xaf4>)
 8010a48:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8010a4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010a4e:	401d      	ands	r5, r3
 8010a50:	4b58      	ldr	r3, [pc, #352]	@ (8010bb4 <_strtod_l+0xb04>)
 8010a52:	429d      	cmp	r5, r3
 8010a54:	f040 80b2 	bne.w	8010bbc <_strtod_l+0xb0c>
 8010a58:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010a5a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8010a5e:	ec4b ab10 	vmov	d0, sl, fp
 8010a62:	f7ff f9c9 	bl	800fdf8 <__ulp>
 8010a66:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010a6a:	ec51 0b10 	vmov	r0, r1, d0
 8010a6e:	f7ef fdc3 	bl	80005f8 <__aeabi_dmul>
 8010a72:	4652      	mov	r2, sl
 8010a74:	465b      	mov	r3, fp
 8010a76:	f7ef fc09 	bl	800028c <__adddf3>
 8010a7a:	460b      	mov	r3, r1
 8010a7c:	4949      	ldr	r1, [pc, #292]	@ (8010ba4 <_strtod_l+0xaf4>)
 8010a7e:	4a4e      	ldr	r2, [pc, #312]	@ (8010bb8 <_strtod_l+0xb08>)
 8010a80:	4019      	ands	r1, r3
 8010a82:	4291      	cmp	r1, r2
 8010a84:	4682      	mov	sl, r0
 8010a86:	d942      	bls.n	8010b0e <_strtod_l+0xa5e>
 8010a88:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010a8a:	4b47      	ldr	r3, [pc, #284]	@ (8010ba8 <_strtod_l+0xaf8>)
 8010a8c:	429a      	cmp	r2, r3
 8010a8e:	d103      	bne.n	8010a98 <_strtod_l+0x9e8>
 8010a90:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010a92:	3301      	adds	r3, #1
 8010a94:	f43f ad2b 	beq.w	80104ee <_strtod_l+0x43e>
 8010a98:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8010ba8 <_strtod_l+0xaf8>
 8010a9c:	f04f 3aff 	mov.w	sl, #4294967295
 8010aa0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010aa2:	9805      	ldr	r0, [sp, #20]
 8010aa4:	f7fe fe74 	bl	800f790 <_Bfree>
 8010aa8:	9805      	ldr	r0, [sp, #20]
 8010aaa:	4649      	mov	r1, r9
 8010aac:	f7fe fe70 	bl	800f790 <_Bfree>
 8010ab0:	9805      	ldr	r0, [sp, #20]
 8010ab2:	4641      	mov	r1, r8
 8010ab4:	f7fe fe6c 	bl	800f790 <_Bfree>
 8010ab8:	9805      	ldr	r0, [sp, #20]
 8010aba:	4621      	mov	r1, r4
 8010abc:	f7fe fe68 	bl	800f790 <_Bfree>
 8010ac0:	e618      	b.n	80106f4 <_strtod_l+0x644>
 8010ac2:	f1ba 0f01 	cmp.w	sl, #1
 8010ac6:	d103      	bne.n	8010ad0 <_strtod_l+0xa20>
 8010ac8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	f43f ada5 	beq.w	801061a <_strtod_l+0x56a>
 8010ad0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8010b80 <_strtod_l+0xad0>
 8010ad4:	4f35      	ldr	r7, [pc, #212]	@ (8010bac <_strtod_l+0xafc>)
 8010ad6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010ada:	2600      	movs	r6, #0
 8010adc:	e7b1      	b.n	8010a42 <_strtod_l+0x992>
 8010ade:	4f34      	ldr	r7, [pc, #208]	@ (8010bb0 <_strtod_l+0xb00>)
 8010ae0:	2600      	movs	r6, #0
 8010ae2:	e7aa      	b.n	8010a3a <_strtod_l+0x98a>
 8010ae4:	4b32      	ldr	r3, [pc, #200]	@ (8010bb0 <_strtod_l+0xb00>)
 8010ae6:	4630      	mov	r0, r6
 8010ae8:	4639      	mov	r1, r7
 8010aea:	2200      	movs	r2, #0
 8010aec:	f7ef fd84 	bl	80005f8 <__aeabi_dmul>
 8010af0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010af2:	4606      	mov	r6, r0
 8010af4:	460f      	mov	r7, r1
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d09f      	beq.n	8010a3a <_strtod_l+0x98a>
 8010afa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8010afe:	e7a0      	b.n	8010a42 <_strtod_l+0x992>
 8010b00:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8010b88 <_strtod_l+0xad8>
 8010b04:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010b08:	ec57 6b17 	vmov	r6, r7, d7
 8010b0c:	e799      	b.n	8010a42 <_strtod_l+0x992>
 8010b0e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8010b12:	9b08      	ldr	r3, [sp, #32]
 8010b14:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d1c1      	bne.n	8010aa0 <_strtod_l+0x9f0>
 8010b1c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010b20:	0d1b      	lsrs	r3, r3, #20
 8010b22:	051b      	lsls	r3, r3, #20
 8010b24:	429d      	cmp	r5, r3
 8010b26:	d1bb      	bne.n	8010aa0 <_strtod_l+0x9f0>
 8010b28:	4630      	mov	r0, r6
 8010b2a:	4639      	mov	r1, r7
 8010b2c:	f7f0 f8c4 	bl	8000cb8 <__aeabi_d2lz>
 8010b30:	f7ef fd34 	bl	800059c <__aeabi_l2d>
 8010b34:	4602      	mov	r2, r0
 8010b36:	460b      	mov	r3, r1
 8010b38:	4630      	mov	r0, r6
 8010b3a:	4639      	mov	r1, r7
 8010b3c:	f7ef fba4 	bl	8000288 <__aeabi_dsub>
 8010b40:	460b      	mov	r3, r1
 8010b42:	4602      	mov	r2, r0
 8010b44:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8010b48:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8010b4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010b4e:	ea46 060a 	orr.w	r6, r6, sl
 8010b52:	431e      	orrs	r6, r3
 8010b54:	d06f      	beq.n	8010c36 <_strtod_l+0xb86>
 8010b56:	a30e      	add	r3, pc, #56	@ (adr r3, 8010b90 <_strtod_l+0xae0>)
 8010b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b5c:	f7ef ffbe 	bl	8000adc <__aeabi_dcmplt>
 8010b60:	2800      	cmp	r0, #0
 8010b62:	f47f accf 	bne.w	8010504 <_strtod_l+0x454>
 8010b66:	a30c      	add	r3, pc, #48	@ (adr r3, 8010b98 <_strtod_l+0xae8>)
 8010b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b6c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010b70:	f7ef ffd2 	bl	8000b18 <__aeabi_dcmpgt>
 8010b74:	2800      	cmp	r0, #0
 8010b76:	d093      	beq.n	8010aa0 <_strtod_l+0x9f0>
 8010b78:	e4c4      	b.n	8010504 <_strtod_l+0x454>
 8010b7a:	bf00      	nop
 8010b7c:	f3af 8000 	nop.w
 8010b80:	00000000 	.word	0x00000000
 8010b84:	bff00000 	.word	0xbff00000
 8010b88:	00000000 	.word	0x00000000
 8010b8c:	3ff00000 	.word	0x3ff00000
 8010b90:	94a03595 	.word	0x94a03595
 8010b94:	3fdfffff 	.word	0x3fdfffff
 8010b98:	35afe535 	.word	0x35afe535
 8010b9c:	3fe00000 	.word	0x3fe00000
 8010ba0:	000fffff 	.word	0x000fffff
 8010ba4:	7ff00000 	.word	0x7ff00000
 8010ba8:	7fefffff 	.word	0x7fefffff
 8010bac:	3ff00000 	.word	0x3ff00000
 8010bb0:	3fe00000 	.word	0x3fe00000
 8010bb4:	7fe00000 	.word	0x7fe00000
 8010bb8:	7c9fffff 	.word	0x7c9fffff
 8010bbc:	9b08      	ldr	r3, [sp, #32]
 8010bbe:	b323      	cbz	r3, 8010c0a <_strtod_l+0xb5a>
 8010bc0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8010bc4:	d821      	bhi.n	8010c0a <_strtod_l+0xb5a>
 8010bc6:	a328      	add	r3, pc, #160	@ (adr r3, 8010c68 <_strtod_l+0xbb8>)
 8010bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bcc:	4630      	mov	r0, r6
 8010bce:	4639      	mov	r1, r7
 8010bd0:	f7ef ff8e 	bl	8000af0 <__aeabi_dcmple>
 8010bd4:	b1a0      	cbz	r0, 8010c00 <_strtod_l+0xb50>
 8010bd6:	4639      	mov	r1, r7
 8010bd8:	4630      	mov	r0, r6
 8010bda:	f7ef ffe5 	bl	8000ba8 <__aeabi_d2uiz>
 8010bde:	2801      	cmp	r0, #1
 8010be0:	bf38      	it	cc
 8010be2:	2001      	movcc	r0, #1
 8010be4:	f7ef fc8e 	bl	8000504 <__aeabi_ui2d>
 8010be8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010bea:	4606      	mov	r6, r0
 8010bec:	460f      	mov	r7, r1
 8010bee:	b9fb      	cbnz	r3, 8010c30 <_strtod_l+0xb80>
 8010bf0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010bf4:	9014      	str	r0, [sp, #80]	@ 0x50
 8010bf6:	9315      	str	r3, [sp, #84]	@ 0x54
 8010bf8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8010bfc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8010c00:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010c02:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8010c06:	1b5b      	subs	r3, r3, r5
 8010c08:	9311      	str	r3, [sp, #68]	@ 0x44
 8010c0a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8010c0e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8010c12:	f7ff f8f1 	bl	800fdf8 <__ulp>
 8010c16:	4650      	mov	r0, sl
 8010c18:	ec53 2b10 	vmov	r2, r3, d0
 8010c1c:	4659      	mov	r1, fp
 8010c1e:	f7ef fceb 	bl	80005f8 <__aeabi_dmul>
 8010c22:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8010c26:	f7ef fb31 	bl	800028c <__adddf3>
 8010c2a:	4682      	mov	sl, r0
 8010c2c:	468b      	mov	fp, r1
 8010c2e:	e770      	b.n	8010b12 <_strtod_l+0xa62>
 8010c30:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8010c34:	e7e0      	b.n	8010bf8 <_strtod_l+0xb48>
 8010c36:	a30e      	add	r3, pc, #56	@ (adr r3, 8010c70 <_strtod_l+0xbc0>)
 8010c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c3c:	f7ef ff4e 	bl	8000adc <__aeabi_dcmplt>
 8010c40:	e798      	b.n	8010b74 <_strtod_l+0xac4>
 8010c42:	2300      	movs	r3, #0
 8010c44:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010c46:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8010c48:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010c4a:	6013      	str	r3, [r2, #0]
 8010c4c:	f7ff ba6d 	b.w	801012a <_strtod_l+0x7a>
 8010c50:	2a65      	cmp	r2, #101	@ 0x65
 8010c52:	f43f ab66 	beq.w	8010322 <_strtod_l+0x272>
 8010c56:	2a45      	cmp	r2, #69	@ 0x45
 8010c58:	f43f ab63 	beq.w	8010322 <_strtod_l+0x272>
 8010c5c:	2301      	movs	r3, #1
 8010c5e:	f7ff bb9e 	b.w	801039e <_strtod_l+0x2ee>
 8010c62:	bf00      	nop
 8010c64:	f3af 8000 	nop.w
 8010c68:	ffc00000 	.word	0xffc00000
 8010c6c:	41dfffff 	.word	0x41dfffff
 8010c70:	94a03595 	.word	0x94a03595
 8010c74:	3fcfffff 	.word	0x3fcfffff

08010c78 <_strtod_r>:
 8010c78:	4b01      	ldr	r3, [pc, #4]	@ (8010c80 <_strtod_r+0x8>)
 8010c7a:	f7ff ba19 	b.w	80100b0 <_strtod_l>
 8010c7e:	bf00      	nop
 8010c80:	200005c4 	.word	0x200005c4

08010c84 <_strtol_l.constprop.0>:
 8010c84:	2b24      	cmp	r3, #36	@ 0x24
 8010c86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c8a:	4686      	mov	lr, r0
 8010c8c:	4690      	mov	r8, r2
 8010c8e:	d801      	bhi.n	8010c94 <_strtol_l.constprop.0+0x10>
 8010c90:	2b01      	cmp	r3, #1
 8010c92:	d106      	bne.n	8010ca2 <_strtol_l.constprop.0+0x1e>
 8010c94:	f7fd fd8e 	bl	800e7b4 <__errno>
 8010c98:	2316      	movs	r3, #22
 8010c9a:	6003      	str	r3, [r0, #0]
 8010c9c:	2000      	movs	r0, #0
 8010c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ca2:	4834      	ldr	r0, [pc, #208]	@ (8010d74 <_strtol_l.constprop.0+0xf0>)
 8010ca4:	460d      	mov	r5, r1
 8010ca6:	462a      	mov	r2, r5
 8010ca8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010cac:	5d06      	ldrb	r6, [r0, r4]
 8010cae:	f016 0608 	ands.w	r6, r6, #8
 8010cb2:	d1f8      	bne.n	8010ca6 <_strtol_l.constprop.0+0x22>
 8010cb4:	2c2d      	cmp	r4, #45	@ 0x2d
 8010cb6:	d12d      	bne.n	8010d14 <_strtol_l.constprop.0+0x90>
 8010cb8:	782c      	ldrb	r4, [r5, #0]
 8010cba:	2601      	movs	r6, #1
 8010cbc:	1c95      	adds	r5, r2, #2
 8010cbe:	f033 0210 	bics.w	r2, r3, #16
 8010cc2:	d109      	bne.n	8010cd8 <_strtol_l.constprop.0+0x54>
 8010cc4:	2c30      	cmp	r4, #48	@ 0x30
 8010cc6:	d12a      	bne.n	8010d1e <_strtol_l.constprop.0+0x9a>
 8010cc8:	782a      	ldrb	r2, [r5, #0]
 8010cca:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8010cce:	2a58      	cmp	r2, #88	@ 0x58
 8010cd0:	d125      	bne.n	8010d1e <_strtol_l.constprop.0+0x9a>
 8010cd2:	786c      	ldrb	r4, [r5, #1]
 8010cd4:	2310      	movs	r3, #16
 8010cd6:	3502      	adds	r5, #2
 8010cd8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8010cdc:	f10c 3cff 	add.w	ip, ip, #4294967295
 8010ce0:	2200      	movs	r2, #0
 8010ce2:	fbbc f9f3 	udiv	r9, ip, r3
 8010ce6:	4610      	mov	r0, r2
 8010ce8:	fb03 ca19 	mls	sl, r3, r9, ip
 8010cec:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8010cf0:	2f09      	cmp	r7, #9
 8010cf2:	d81b      	bhi.n	8010d2c <_strtol_l.constprop.0+0xa8>
 8010cf4:	463c      	mov	r4, r7
 8010cf6:	42a3      	cmp	r3, r4
 8010cf8:	dd27      	ble.n	8010d4a <_strtol_l.constprop.0+0xc6>
 8010cfa:	1c57      	adds	r7, r2, #1
 8010cfc:	d007      	beq.n	8010d0e <_strtol_l.constprop.0+0x8a>
 8010cfe:	4581      	cmp	r9, r0
 8010d00:	d320      	bcc.n	8010d44 <_strtol_l.constprop.0+0xc0>
 8010d02:	d101      	bne.n	8010d08 <_strtol_l.constprop.0+0x84>
 8010d04:	45a2      	cmp	sl, r4
 8010d06:	db1d      	blt.n	8010d44 <_strtol_l.constprop.0+0xc0>
 8010d08:	fb00 4003 	mla	r0, r0, r3, r4
 8010d0c:	2201      	movs	r2, #1
 8010d0e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010d12:	e7eb      	b.n	8010cec <_strtol_l.constprop.0+0x68>
 8010d14:	2c2b      	cmp	r4, #43	@ 0x2b
 8010d16:	bf04      	itt	eq
 8010d18:	782c      	ldrbeq	r4, [r5, #0]
 8010d1a:	1c95      	addeq	r5, r2, #2
 8010d1c:	e7cf      	b.n	8010cbe <_strtol_l.constprop.0+0x3a>
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d1da      	bne.n	8010cd8 <_strtol_l.constprop.0+0x54>
 8010d22:	2c30      	cmp	r4, #48	@ 0x30
 8010d24:	bf0c      	ite	eq
 8010d26:	2308      	moveq	r3, #8
 8010d28:	230a      	movne	r3, #10
 8010d2a:	e7d5      	b.n	8010cd8 <_strtol_l.constprop.0+0x54>
 8010d2c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8010d30:	2f19      	cmp	r7, #25
 8010d32:	d801      	bhi.n	8010d38 <_strtol_l.constprop.0+0xb4>
 8010d34:	3c37      	subs	r4, #55	@ 0x37
 8010d36:	e7de      	b.n	8010cf6 <_strtol_l.constprop.0+0x72>
 8010d38:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8010d3c:	2f19      	cmp	r7, #25
 8010d3e:	d804      	bhi.n	8010d4a <_strtol_l.constprop.0+0xc6>
 8010d40:	3c57      	subs	r4, #87	@ 0x57
 8010d42:	e7d8      	b.n	8010cf6 <_strtol_l.constprop.0+0x72>
 8010d44:	f04f 32ff 	mov.w	r2, #4294967295
 8010d48:	e7e1      	b.n	8010d0e <_strtol_l.constprop.0+0x8a>
 8010d4a:	1c53      	adds	r3, r2, #1
 8010d4c:	d108      	bne.n	8010d60 <_strtol_l.constprop.0+0xdc>
 8010d4e:	2322      	movs	r3, #34	@ 0x22
 8010d50:	f8ce 3000 	str.w	r3, [lr]
 8010d54:	4660      	mov	r0, ip
 8010d56:	f1b8 0f00 	cmp.w	r8, #0
 8010d5a:	d0a0      	beq.n	8010c9e <_strtol_l.constprop.0+0x1a>
 8010d5c:	1e69      	subs	r1, r5, #1
 8010d5e:	e006      	b.n	8010d6e <_strtol_l.constprop.0+0xea>
 8010d60:	b106      	cbz	r6, 8010d64 <_strtol_l.constprop.0+0xe0>
 8010d62:	4240      	negs	r0, r0
 8010d64:	f1b8 0f00 	cmp.w	r8, #0
 8010d68:	d099      	beq.n	8010c9e <_strtol_l.constprop.0+0x1a>
 8010d6a:	2a00      	cmp	r2, #0
 8010d6c:	d1f6      	bne.n	8010d5c <_strtol_l.constprop.0+0xd8>
 8010d6e:	f8c8 1000 	str.w	r1, [r8]
 8010d72:	e794      	b.n	8010c9e <_strtol_l.constprop.0+0x1a>
 8010d74:	08013089 	.word	0x08013089

08010d78 <_strtol_r>:
 8010d78:	f7ff bf84 	b.w	8010c84 <_strtol_l.constprop.0>

08010d7c <__ssputs_r>:
 8010d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d80:	688e      	ldr	r6, [r1, #8]
 8010d82:	461f      	mov	r7, r3
 8010d84:	42be      	cmp	r6, r7
 8010d86:	680b      	ldr	r3, [r1, #0]
 8010d88:	4682      	mov	sl, r0
 8010d8a:	460c      	mov	r4, r1
 8010d8c:	4690      	mov	r8, r2
 8010d8e:	d82d      	bhi.n	8010dec <__ssputs_r+0x70>
 8010d90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010d94:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010d98:	d026      	beq.n	8010de8 <__ssputs_r+0x6c>
 8010d9a:	6965      	ldr	r5, [r4, #20]
 8010d9c:	6909      	ldr	r1, [r1, #16]
 8010d9e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010da2:	eba3 0901 	sub.w	r9, r3, r1
 8010da6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010daa:	1c7b      	adds	r3, r7, #1
 8010dac:	444b      	add	r3, r9
 8010dae:	106d      	asrs	r5, r5, #1
 8010db0:	429d      	cmp	r5, r3
 8010db2:	bf38      	it	cc
 8010db4:	461d      	movcc	r5, r3
 8010db6:	0553      	lsls	r3, r2, #21
 8010db8:	d527      	bpl.n	8010e0a <__ssputs_r+0x8e>
 8010dba:	4629      	mov	r1, r5
 8010dbc:	f7fe fc1c 	bl	800f5f8 <_malloc_r>
 8010dc0:	4606      	mov	r6, r0
 8010dc2:	b360      	cbz	r0, 8010e1e <__ssputs_r+0xa2>
 8010dc4:	6921      	ldr	r1, [r4, #16]
 8010dc6:	464a      	mov	r2, r9
 8010dc8:	f7fd fd22 	bl	800e810 <memcpy>
 8010dcc:	89a3      	ldrh	r3, [r4, #12]
 8010dce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010dd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010dd6:	81a3      	strh	r3, [r4, #12]
 8010dd8:	6126      	str	r6, [r4, #16]
 8010dda:	6165      	str	r5, [r4, #20]
 8010ddc:	444e      	add	r6, r9
 8010dde:	eba5 0509 	sub.w	r5, r5, r9
 8010de2:	6026      	str	r6, [r4, #0]
 8010de4:	60a5      	str	r5, [r4, #8]
 8010de6:	463e      	mov	r6, r7
 8010de8:	42be      	cmp	r6, r7
 8010dea:	d900      	bls.n	8010dee <__ssputs_r+0x72>
 8010dec:	463e      	mov	r6, r7
 8010dee:	6820      	ldr	r0, [r4, #0]
 8010df0:	4632      	mov	r2, r6
 8010df2:	4641      	mov	r1, r8
 8010df4:	f000 fb1e 	bl	8011434 <memmove>
 8010df8:	68a3      	ldr	r3, [r4, #8]
 8010dfa:	1b9b      	subs	r3, r3, r6
 8010dfc:	60a3      	str	r3, [r4, #8]
 8010dfe:	6823      	ldr	r3, [r4, #0]
 8010e00:	4433      	add	r3, r6
 8010e02:	6023      	str	r3, [r4, #0]
 8010e04:	2000      	movs	r0, #0
 8010e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e0a:	462a      	mov	r2, r5
 8010e0c:	f000 fedd 	bl	8011bca <_realloc_r>
 8010e10:	4606      	mov	r6, r0
 8010e12:	2800      	cmp	r0, #0
 8010e14:	d1e0      	bne.n	8010dd8 <__ssputs_r+0x5c>
 8010e16:	6921      	ldr	r1, [r4, #16]
 8010e18:	4650      	mov	r0, sl
 8010e1a:	f7fe fb79 	bl	800f510 <_free_r>
 8010e1e:	230c      	movs	r3, #12
 8010e20:	f8ca 3000 	str.w	r3, [sl]
 8010e24:	89a3      	ldrh	r3, [r4, #12]
 8010e26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010e2a:	81a3      	strh	r3, [r4, #12]
 8010e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8010e30:	e7e9      	b.n	8010e06 <__ssputs_r+0x8a>
	...

08010e34 <_svfiprintf_r>:
 8010e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e38:	4698      	mov	r8, r3
 8010e3a:	898b      	ldrh	r3, [r1, #12]
 8010e3c:	061b      	lsls	r3, r3, #24
 8010e3e:	b09d      	sub	sp, #116	@ 0x74
 8010e40:	4607      	mov	r7, r0
 8010e42:	460d      	mov	r5, r1
 8010e44:	4614      	mov	r4, r2
 8010e46:	d510      	bpl.n	8010e6a <_svfiprintf_r+0x36>
 8010e48:	690b      	ldr	r3, [r1, #16]
 8010e4a:	b973      	cbnz	r3, 8010e6a <_svfiprintf_r+0x36>
 8010e4c:	2140      	movs	r1, #64	@ 0x40
 8010e4e:	f7fe fbd3 	bl	800f5f8 <_malloc_r>
 8010e52:	6028      	str	r0, [r5, #0]
 8010e54:	6128      	str	r0, [r5, #16]
 8010e56:	b930      	cbnz	r0, 8010e66 <_svfiprintf_r+0x32>
 8010e58:	230c      	movs	r3, #12
 8010e5a:	603b      	str	r3, [r7, #0]
 8010e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8010e60:	b01d      	add	sp, #116	@ 0x74
 8010e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e66:	2340      	movs	r3, #64	@ 0x40
 8010e68:	616b      	str	r3, [r5, #20]
 8010e6a:	2300      	movs	r3, #0
 8010e6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8010e6e:	2320      	movs	r3, #32
 8010e70:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010e74:	f8cd 800c 	str.w	r8, [sp, #12]
 8010e78:	2330      	movs	r3, #48	@ 0x30
 8010e7a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011018 <_svfiprintf_r+0x1e4>
 8010e7e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010e82:	f04f 0901 	mov.w	r9, #1
 8010e86:	4623      	mov	r3, r4
 8010e88:	469a      	mov	sl, r3
 8010e8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010e8e:	b10a      	cbz	r2, 8010e94 <_svfiprintf_r+0x60>
 8010e90:	2a25      	cmp	r2, #37	@ 0x25
 8010e92:	d1f9      	bne.n	8010e88 <_svfiprintf_r+0x54>
 8010e94:	ebba 0b04 	subs.w	fp, sl, r4
 8010e98:	d00b      	beq.n	8010eb2 <_svfiprintf_r+0x7e>
 8010e9a:	465b      	mov	r3, fp
 8010e9c:	4622      	mov	r2, r4
 8010e9e:	4629      	mov	r1, r5
 8010ea0:	4638      	mov	r0, r7
 8010ea2:	f7ff ff6b 	bl	8010d7c <__ssputs_r>
 8010ea6:	3001      	adds	r0, #1
 8010ea8:	f000 80a7 	beq.w	8010ffa <_svfiprintf_r+0x1c6>
 8010eac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010eae:	445a      	add	r2, fp
 8010eb0:	9209      	str	r2, [sp, #36]	@ 0x24
 8010eb2:	f89a 3000 	ldrb.w	r3, [sl]
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	f000 809f 	beq.w	8010ffa <_svfiprintf_r+0x1c6>
 8010ebc:	2300      	movs	r3, #0
 8010ebe:	f04f 32ff 	mov.w	r2, #4294967295
 8010ec2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010ec6:	f10a 0a01 	add.w	sl, sl, #1
 8010eca:	9304      	str	r3, [sp, #16]
 8010ecc:	9307      	str	r3, [sp, #28]
 8010ece:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010ed2:	931a      	str	r3, [sp, #104]	@ 0x68
 8010ed4:	4654      	mov	r4, sl
 8010ed6:	2205      	movs	r2, #5
 8010ed8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010edc:	484e      	ldr	r0, [pc, #312]	@ (8011018 <_svfiprintf_r+0x1e4>)
 8010ede:	f7ef f977 	bl	80001d0 <memchr>
 8010ee2:	9a04      	ldr	r2, [sp, #16]
 8010ee4:	b9d8      	cbnz	r0, 8010f1e <_svfiprintf_r+0xea>
 8010ee6:	06d0      	lsls	r0, r2, #27
 8010ee8:	bf44      	itt	mi
 8010eea:	2320      	movmi	r3, #32
 8010eec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010ef0:	0711      	lsls	r1, r2, #28
 8010ef2:	bf44      	itt	mi
 8010ef4:	232b      	movmi	r3, #43	@ 0x2b
 8010ef6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010efa:	f89a 3000 	ldrb.w	r3, [sl]
 8010efe:	2b2a      	cmp	r3, #42	@ 0x2a
 8010f00:	d015      	beq.n	8010f2e <_svfiprintf_r+0xfa>
 8010f02:	9a07      	ldr	r2, [sp, #28]
 8010f04:	4654      	mov	r4, sl
 8010f06:	2000      	movs	r0, #0
 8010f08:	f04f 0c0a 	mov.w	ip, #10
 8010f0c:	4621      	mov	r1, r4
 8010f0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010f12:	3b30      	subs	r3, #48	@ 0x30
 8010f14:	2b09      	cmp	r3, #9
 8010f16:	d94b      	bls.n	8010fb0 <_svfiprintf_r+0x17c>
 8010f18:	b1b0      	cbz	r0, 8010f48 <_svfiprintf_r+0x114>
 8010f1a:	9207      	str	r2, [sp, #28]
 8010f1c:	e014      	b.n	8010f48 <_svfiprintf_r+0x114>
 8010f1e:	eba0 0308 	sub.w	r3, r0, r8
 8010f22:	fa09 f303 	lsl.w	r3, r9, r3
 8010f26:	4313      	orrs	r3, r2
 8010f28:	9304      	str	r3, [sp, #16]
 8010f2a:	46a2      	mov	sl, r4
 8010f2c:	e7d2      	b.n	8010ed4 <_svfiprintf_r+0xa0>
 8010f2e:	9b03      	ldr	r3, [sp, #12]
 8010f30:	1d19      	adds	r1, r3, #4
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	9103      	str	r1, [sp, #12]
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	bfbb      	ittet	lt
 8010f3a:	425b      	neglt	r3, r3
 8010f3c:	f042 0202 	orrlt.w	r2, r2, #2
 8010f40:	9307      	strge	r3, [sp, #28]
 8010f42:	9307      	strlt	r3, [sp, #28]
 8010f44:	bfb8      	it	lt
 8010f46:	9204      	strlt	r2, [sp, #16]
 8010f48:	7823      	ldrb	r3, [r4, #0]
 8010f4a:	2b2e      	cmp	r3, #46	@ 0x2e
 8010f4c:	d10a      	bne.n	8010f64 <_svfiprintf_r+0x130>
 8010f4e:	7863      	ldrb	r3, [r4, #1]
 8010f50:	2b2a      	cmp	r3, #42	@ 0x2a
 8010f52:	d132      	bne.n	8010fba <_svfiprintf_r+0x186>
 8010f54:	9b03      	ldr	r3, [sp, #12]
 8010f56:	1d1a      	adds	r2, r3, #4
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	9203      	str	r2, [sp, #12]
 8010f5c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010f60:	3402      	adds	r4, #2
 8010f62:	9305      	str	r3, [sp, #20]
 8010f64:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011028 <_svfiprintf_r+0x1f4>
 8010f68:	7821      	ldrb	r1, [r4, #0]
 8010f6a:	2203      	movs	r2, #3
 8010f6c:	4650      	mov	r0, sl
 8010f6e:	f7ef f92f 	bl	80001d0 <memchr>
 8010f72:	b138      	cbz	r0, 8010f84 <_svfiprintf_r+0x150>
 8010f74:	9b04      	ldr	r3, [sp, #16]
 8010f76:	eba0 000a 	sub.w	r0, r0, sl
 8010f7a:	2240      	movs	r2, #64	@ 0x40
 8010f7c:	4082      	lsls	r2, r0
 8010f7e:	4313      	orrs	r3, r2
 8010f80:	3401      	adds	r4, #1
 8010f82:	9304      	str	r3, [sp, #16]
 8010f84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f88:	4824      	ldr	r0, [pc, #144]	@ (801101c <_svfiprintf_r+0x1e8>)
 8010f8a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010f8e:	2206      	movs	r2, #6
 8010f90:	f7ef f91e 	bl	80001d0 <memchr>
 8010f94:	2800      	cmp	r0, #0
 8010f96:	d036      	beq.n	8011006 <_svfiprintf_r+0x1d2>
 8010f98:	4b21      	ldr	r3, [pc, #132]	@ (8011020 <_svfiprintf_r+0x1ec>)
 8010f9a:	bb1b      	cbnz	r3, 8010fe4 <_svfiprintf_r+0x1b0>
 8010f9c:	9b03      	ldr	r3, [sp, #12]
 8010f9e:	3307      	adds	r3, #7
 8010fa0:	f023 0307 	bic.w	r3, r3, #7
 8010fa4:	3308      	adds	r3, #8
 8010fa6:	9303      	str	r3, [sp, #12]
 8010fa8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010faa:	4433      	add	r3, r6
 8010fac:	9309      	str	r3, [sp, #36]	@ 0x24
 8010fae:	e76a      	b.n	8010e86 <_svfiprintf_r+0x52>
 8010fb0:	fb0c 3202 	mla	r2, ip, r2, r3
 8010fb4:	460c      	mov	r4, r1
 8010fb6:	2001      	movs	r0, #1
 8010fb8:	e7a8      	b.n	8010f0c <_svfiprintf_r+0xd8>
 8010fba:	2300      	movs	r3, #0
 8010fbc:	3401      	adds	r4, #1
 8010fbe:	9305      	str	r3, [sp, #20]
 8010fc0:	4619      	mov	r1, r3
 8010fc2:	f04f 0c0a 	mov.w	ip, #10
 8010fc6:	4620      	mov	r0, r4
 8010fc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010fcc:	3a30      	subs	r2, #48	@ 0x30
 8010fce:	2a09      	cmp	r2, #9
 8010fd0:	d903      	bls.n	8010fda <_svfiprintf_r+0x1a6>
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d0c6      	beq.n	8010f64 <_svfiprintf_r+0x130>
 8010fd6:	9105      	str	r1, [sp, #20]
 8010fd8:	e7c4      	b.n	8010f64 <_svfiprintf_r+0x130>
 8010fda:	fb0c 2101 	mla	r1, ip, r1, r2
 8010fde:	4604      	mov	r4, r0
 8010fe0:	2301      	movs	r3, #1
 8010fe2:	e7f0      	b.n	8010fc6 <_svfiprintf_r+0x192>
 8010fe4:	ab03      	add	r3, sp, #12
 8010fe6:	9300      	str	r3, [sp, #0]
 8010fe8:	462a      	mov	r2, r5
 8010fea:	4b0e      	ldr	r3, [pc, #56]	@ (8011024 <_svfiprintf_r+0x1f0>)
 8010fec:	a904      	add	r1, sp, #16
 8010fee:	4638      	mov	r0, r7
 8010ff0:	f7fb feac 	bl	800cd4c <_printf_float>
 8010ff4:	1c42      	adds	r2, r0, #1
 8010ff6:	4606      	mov	r6, r0
 8010ff8:	d1d6      	bne.n	8010fa8 <_svfiprintf_r+0x174>
 8010ffa:	89ab      	ldrh	r3, [r5, #12]
 8010ffc:	065b      	lsls	r3, r3, #25
 8010ffe:	f53f af2d 	bmi.w	8010e5c <_svfiprintf_r+0x28>
 8011002:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011004:	e72c      	b.n	8010e60 <_svfiprintf_r+0x2c>
 8011006:	ab03      	add	r3, sp, #12
 8011008:	9300      	str	r3, [sp, #0]
 801100a:	462a      	mov	r2, r5
 801100c:	4b05      	ldr	r3, [pc, #20]	@ (8011024 <_svfiprintf_r+0x1f0>)
 801100e:	a904      	add	r1, sp, #16
 8011010:	4638      	mov	r0, r7
 8011012:	f7fc f933 	bl	800d27c <_printf_i>
 8011016:	e7ed      	b.n	8010ff4 <_svfiprintf_r+0x1c0>
 8011018:	08013189 	.word	0x08013189
 801101c:	08013193 	.word	0x08013193
 8011020:	0800cd4d 	.word	0x0800cd4d
 8011024:	08010d7d 	.word	0x08010d7d
 8011028:	0801318f 	.word	0x0801318f

0801102c <__sfputc_r>:
 801102c:	6893      	ldr	r3, [r2, #8]
 801102e:	3b01      	subs	r3, #1
 8011030:	2b00      	cmp	r3, #0
 8011032:	b410      	push	{r4}
 8011034:	6093      	str	r3, [r2, #8]
 8011036:	da08      	bge.n	801104a <__sfputc_r+0x1e>
 8011038:	6994      	ldr	r4, [r2, #24]
 801103a:	42a3      	cmp	r3, r4
 801103c:	db01      	blt.n	8011042 <__sfputc_r+0x16>
 801103e:	290a      	cmp	r1, #10
 8011040:	d103      	bne.n	801104a <__sfputc_r+0x1e>
 8011042:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011046:	f7fd b83c 	b.w	800e0c2 <__swbuf_r>
 801104a:	6813      	ldr	r3, [r2, #0]
 801104c:	1c58      	adds	r0, r3, #1
 801104e:	6010      	str	r0, [r2, #0]
 8011050:	7019      	strb	r1, [r3, #0]
 8011052:	4608      	mov	r0, r1
 8011054:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011058:	4770      	bx	lr

0801105a <__sfputs_r>:
 801105a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801105c:	4606      	mov	r6, r0
 801105e:	460f      	mov	r7, r1
 8011060:	4614      	mov	r4, r2
 8011062:	18d5      	adds	r5, r2, r3
 8011064:	42ac      	cmp	r4, r5
 8011066:	d101      	bne.n	801106c <__sfputs_r+0x12>
 8011068:	2000      	movs	r0, #0
 801106a:	e007      	b.n	801107c <__sfputs_r+0x22>
 801106c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011070:	463a      	mov	r2, r7
 8011072:	4630      	mov	r0, r6
 8011074:	f7ff ffda 	bl	801102c <__sfputc_r>
 8011078:	1c43      	adds	r3, r0, #1
 801107a:	d1f3      	bne.n	8011064 <__sfputs_r+0xa>
 801107c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011080 <_vfiprintf_r>:
 8011080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011084:	460d      	mov	r5, r1
 8011086:	b09d      	sub	sp, #116	@ 0x74
 8011088:	4614      	mov	r4, r2
 801108a:	4698      	mov	r8, r3
 801108c:	4606      	mov	r6, r0
 801108e:	b118      	cbz	r0, 8011098 <_vfiprintf_r+0x18>
 8011090:	6a03      	ldr	r3, [r0, #32]
 8011092:	b90b      	cbnz	r3, 8011098 <_vfiprintf_r+0x18>
 8011094:	f7fc fe0e 	bl	800dcb4 <__sinit>
 8011098:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801109a:	07d9      	lsls	r1, r3, #31
 801109c:	d405      	bmi.n	80110aa <_vfiprintf_r+0x2a>
 801109e:	89ab      	ldrh	r3, [r5, #12]
 80110a0:	059a      	lsls	r2, r3, #22
 80110a2:	d402      	bmi.n	80110aa <_vfiprintf_r+0x2a>
 80110a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80110a6:	f7fd fbb1 	bl	800e80c <__retarget_lock_acquire_recursive>
 80110aa:	89ab      	ldrh	r3, [r5, #12]
 80110ac:	071b      	lsls	r3, r3, #28
 80110ae:	d501      	bpl.n	80110b4 <_vfiprintf_r+0x34>
 80110b0:	692b      	ldr	r3, [r5, #16]
 80110b2:	b99b      	cbnz	r3, 80110dc <_vfiprintf_r+0x5c>
 80110b4:	4629      	mov	r1, r5
 80110b6:	4630      	mov	r0, r6
 80110b8:	f7fd f842 	bl	800e140 <__swsetup_r>
 80110bc:	b170      	cbz	r0, 80110dc <_vfiprintf_r+0x5c>
 80110be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80110c0:	07dc      	lsls	r4, r3, #31
 80110c2:	d504      	bpl.n	80110ce <_vfiprintf_r+0x4e>
 80110c4:	f04f 30ff 	mov.w	r0, #4294967295
 80110c8:	b01d      	add	sp, #116	@ 0x74
 80110ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110ce:	89ab      	ldrh	r3, [r5, #12]
 80110d0:	0598      	lsls	r0, r3, #22
 80110d2:	d4f7      	bmi.n	80110c4 <_vfiprintf_r+0x44>
 80110d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80110d6:	f7fd fb9a 	bl	800e80e <__retarget_lock_release_recursive>
 80110da:	e7f3      	b.n	80110c4 <_vfiprintf_r+0x44>
 80110dc:	2300      	movs	r3, #0
 80110de:	9309      	str	r3, [sp, #36]	@ 0x24
 80110e0:	2320      	movs	r3, #32
 80110e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80110e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80110ea:	2330      	movs	r3, #48	@ 0x30
 80110ec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801129c <_vfiprintf_r+0x21c>
 80110f0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80110f4:	f04f 0901 	mov.w	r9, #1
 80110f8:	4623      	mov	r3, r4
 80110fa:	469a      	mov	sl, r3
 80110fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011100:	b10a      	cbz	r2, 8011106 <_vfiprintf_r+0x86>
 8011102:	2a25      	cmp	r2, #37	@ 0x25
 8011104:	d1f9      	bne.n	80110fa <_vfiprintf_r+0x7a>
 8011106:	ebba 0b04 	subs.w	fp, sl, r4
 801110a:	d00b      	beq.n	8011124 <_vfiprintf_r+0xa4>
 801110c:	465b      	mov	r3, fp
 801110e:	4622      	mov	r2, r4
 8011110:	4629      	mov	r1, r5
 8011112:	4630      	mov	r0, r6
 8011114:	f7ff ffa1 	bl	801105a <__sfputs_r>
 8011118:	3001      	adds	r0, #1
 801111a:	f000 80a7 	beq.w	801126c <_vfiprintf_r+0x1ec>
 801111e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011120:	445a      	add	r2, fp
 8011122:	9209      	str	r2, [sp, #36]	@ 0x24
 8011124:	f89a 3000 	ldrb.w	r3, [sl]
 8011128:	2b00      	cmp	r3, #0
 801112a:	f000 809f 	beq.w	801126c <_vfiprintf_r+0x1ec>
 801112e:	2300      	movs	r3, #0
 8011130:	f04f 32ff 	mov.w	r2, #4294967295
 8011134:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011138:	f10a 0a01 	add.w	sl, sl, #1
 801113c:	9304      	str	r3, [sp, #16]
 801113e:	9307      	str	r3, [sp, #28]
 8011140:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011144:	931a      	str	r3, [sp, #104]	@ 0x68
 8011146:	4654      	mov	r4, sl
 8011148:	2205      	movs	r2, #5
 801114a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801114e:	4853      	ldr	r0, [pc, #332]	@ (801129c <_vfiprintf_r+0x21c>)
 8011150:	f7ef f83e 	bl	80001d0 <memchr>
 8011154:	9a04      	ldr	r2, [sp, #16]
 8011156:	b9d8      	cbnz	r0, 8011190 <_vfiprintf_r+0x110>
 8011158:	06d1      	lsls	r1, r2, #27
 801115a:	bf44      	itt	mi
 801115c:	2320      	movmi	r3, #32
 801115e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011162:	0713      	lsls	r3, r2, #28
 8011164:	bf44      	itt	mi
 8011166:	232b      	movmi	r3, #43	@ 0x2b
 8011168:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801116c:	f89a 3000 	ldrb.w	r3, [sl]
 8011170:	2b2a      	cmp	r3, #42	@ 0x2a
 8011172:	d015      	beq.n	80111a0 <_vfiprintf_r+0x120>
 8011174:	9a07      	ldr	r2, [sp, #28]
 8011176:	4654      	mov	r4, sl
 8011178:	2000      	movs	r0, #0
 801117a:	f04f 0c0a 	mov.w	ip, #10
 801117e:	4621      	mov	r1, r4
 8011180:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011184:	3b30      	subs	r3, #48	@ 0x30
 8011186:	2b09      	cmp	r3, #9
 8011188:	d94b      	bls.n	8011222 <_vfiprintf_r+0x1a2>
 801118a:	b1b0      	cbz	r0, 80111ba <_vfiprintf_r+0x13a>
 801118c:	9207      	str	r2, [sp, #28]
 801118e:	e014      	b.n	80111ba <_vfiprintf_r+0x13a>
 8011190:	eba0 0308 	sub.w	r3, r0, r8
 8011194:	fa09 f303 	lsl.w	r3, r9, r3
 8011198:	4313      	orrs	r3, r2
 801119a:	9304      	str	r3, [sp, #16]
 801119c:	46a2      	mov	sl, r4
 801119e:	e7d2      	b.n	8011146 <_vfiprintf_r+0xc6>
 80111a0:	9b03      	ldr	r3, [sp, #12]
 80111a2:	1d19      	adds	r1, r3, #4
 80111a4:	681b      	ldr	r3, [r3, #0]
 80111a6:	9103      	str	r1, [sp, #12]
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	bfbb      	ittet	lt
 80111ac:	425b      	neglt	r3, r3
 80111ae:	f042 0202 	orrlt.w	r2, r2, #2
 80111b2:	9307      	strge	r3, [sp, #28]
 80111b4:	9307      	strlt	r3, [sp, #28]
 80111b6:	bfb8      	it	lt
 80111b8:	9204      	strlt	r2, [sp, #16]
 80111ba:	7823      	ldrb	r3, [r4, #0]
 80111bc:	2b2e      	cmp	r3, #46	@ 0x2e
 80111be:	d10a      	bne.n	80111d6 <_vfiprintf_r+0x156>
 80111c0:	7863      	ldrb	r3, [r4, #1]
 80111c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80111c4:	d132      	bne.n	801122c <_vfiprintf_r+0x1ac>
 80111c6:	9b03      	ldr	r3, [sp, #12]
 80111c8:	1d1a      	adds	r2, r3, #4
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	9203      	str	r2, [sp, #12]
 80111ce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80111d2:	3402      	adds	r4, #2
 80111d4:	9305      	str	r3, [sp, #20]
 80111d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80112ac <_vfiprintf_r+0x22c>
 80111da:	7821      	ldrb	r1, [r4, #0]
 80111dc:	2203      	movs	r2, #3
 80111de:	4650      	mov	r0, sl
 80111e0:	f7ee fff6 	bl	80001d0 <memchr>
 80111e4:	b138      	cbz	r0, 80111f6 <_vfiprintf_r+0x176>
 80111e6:	9b04      	ldr	r3, [sp, #16]
 80111e8:	eba0 000a 	sub.w	r0, r0, sl
 80111ec:	2240      	movs	r2, #64	@ 0x40
 80111ee:	4082      	lsls	r2, r0
 80111f0:	4313      	orrs	r3, r2
 80111f2:	3401      	adds	r4, #1
 80111f4:	9304      	str	r3, [sp, #16]
 80111f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80111fa:	4829      	ldr	r0, [pc, #164]	@ (80112a0 <_vfiprintf_r+0x220>)
 80111fc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011200:	2206      	movs	r2, #6
 8011202:	f7ee ffe5 	bl	80001d0 <memchr>
 8011206:	2800      	cmp	r0, #0
 8011208:	d03f      	beq.n	801128a <_vfiprintf_r+0x20a>
 801120a:	4b26      	ldr	r3, [pc, #152]	@ (80112a4 <_vfiprintf_r+0x224>)
 801120c:	bb1b      	cbnz	r3, 8011256 <_vfiprintf_r+0x1d6>
 801120e:	9b03      	ldr	r3, [sp, #12]
 8011210:	3307      	adds	r3, #7
 8011212:	f023 0307 	bic.w	r3, r3, #7
 8011216:	3308      	adds	r3, #8
 8011218:	9303      	str	r3, [sp, #12]
 801121a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801121c:	443b      	add	r3, r7
 801121e:	9309      	str	r3, [sp, #36]	@ 0x24
 8011220:	e76a      	b.n	80110f8 <_vfiprintf_r+0x78>
 8011222:	fb0c 3202 	mla	r2, ip, r2, r3
 8011226:	460c      	mov	r4, r1
 8011228:	2001      	movs	r0, #1
 801122a:	e7a8      	b.n	801117e <_vfiprintf_r+0xfe>
 801122c:	2300      	movs	r3, #0
 801122e:	3401      	adds	r4, #1
 8011230:	9305      	str	r3, [sp, #20]
 8011232:	4619      	mov	r1, r3
 8011234:	f04f 0c0a 	mov.w	ip, #10
 8011238:	4620      	mov	r0, r4
 801123a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801123e:	3a30      	subs	r2, #48	@ 0x30
 8011240:	2a09      	cmp	r2, #9
 8011242:	d903      	bls.n	801124c <_vfiprintf_r+0x1cc>
 8011244:	2b00      	cmp	r3, #0
 8011246:	d0c6      	beq.n	80111d6 <_vfiprintf_r+0x156>
 8011248:	9105      	str	r1, [sp, #20]
 801124a:	e7c4      	b.n	80111d6 <_vfiprintf_r+0x156>
 801124c:	fb0c 2101 	mla	r1, ip, r1, r2
 8011250:	4604      	mov	r4, r0
 8011252:	2301      	movs	r3, #1
 8011254:	e7f0      	b.n	8011238 <_vfiprintf_r+0x1b8>
 8011256:	ab03      	add	r3, sp, #12
 8011258:	9300      	str	r3, [sp, #0]
 801125a:	462a      	mov	r2, r5
 801125c:	4b12      	ldr	r3, [pc, #72]	@ (80112a8 <_vfiprintf_r+0x228>)
 801125e:	a904      	add	r1, sp, #16
 8011260:	4630      	mov	r0, r6
 8011262:	f7fb fd73 	bl	800cd4c <_printf_float>
 8011266:	4607      	mov	r7, r0
 8011268:	1c78      	adds	r0, r7, #1
 801126a:	d1d6      	bne.n	801121a <_vfiprintf_r+0x19a>
 801126c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801126e:	07d9      	lsls	r1, r3, #31
 8011270:	d405      	bmi.n	801127e <_vfiprintf_r+0x1fe>
 8011272:	89ab      	ldrh	r3, [r5, #12]
 8011274:	059a      	lsls	r2, r3, #22
 8011276:	d402      	bmi.n	801127e <_vfiprintf_r+0x1fe>
 8011278:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801127a:	f7fd fac8 	bl	800e80e <__retarget_lock_release_recursive>
 801127e:	89ab      	ldrh	r3, [r5, #12]
 8011280:	065b      	lsls	r3, r3, #25
 8011282:	f53f af1f 	bmi.w	80110c4 <_vfiprintf_r+0x44>
 8011286:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011288:	e71e      	b.n	80110c8 <_vfiprintf_r+0x48>
 801128a:	ab03      	add	r3, sp, #12
 801128c:	9300      	str	r3, [sp, #0]
 801128e:	462a      	mov	r2, r5
 8011290:	4b05      	ldr	r3, [pc, #20]	@ (80112a8 <_vfiprintf_r+0x228>)
 8011292:	a904      	add	r1, sp, #16
 8011294:	4630      	mov	r0, r6
 8011296:	f7fb fff1 	bl	800d27c <_printf_i>
 801129a:	e7e4      	b.n	8011266 <_vfiprintf_r+0x1e6>
 801129c:	08013189 	.word	0x08013189
 80112a0:	08013193 	.word	0x08013193
 80112a4:	0800cd4d 	.word	0x0800cd4d
 80112a8:	0801105b 	.word	0x0801105b
 80112ac:	0801318f 	.word	0x0801318f

080112b0 <fileno>:
 80112b0:	b538      	push	{r3, r4, r5, lr}
 80112b2:	4d13      	ldr	r5, [pc, #76]	@ (8011300 <fileno+0x50>)
 80112b4:	4604      	mov	r4, r0
 80112b6:	6828      	ldr	r0, [r5, #0]
 80112b8:	b118      	cbz	r0, 80112c2 <fileno+0x12>
 80112ba:	6a03      	ldr	r3, [r0, #32]
 80112bc:	b90b      	cbnz	r3, 80112c2 <fileno+0x12>
 80112be:	f7fc fcf9 	bl	800dcb4 <__sinit>
 80112c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80112c4:	07d8      	lsls	r0, r3, #31
 80112c6:	d405      	bmi.n	80112d4 <fileno+0x24>
 80112c8:	89a3      	ldrh	r3, [r4, #12]
 80112ca:	0599      	lsls	r1, r3, #22
 80112cc:	d402      	bmi.n	80112d4 <fileno+0x24>
 80112ce:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80112d0:	f7fd fa9c 	bl	800e80c <__retarget_lock_acquire_recursive>
 80112d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80112d8:	b15b      	cbz	r3, 80112f2 <fileno+0x42>
 80112da:	f9b4 500e 	ldrsh.w	r5, [r4, #14]
 80112de:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80112e0:	07d2      	lsls	r2, r2, #31
 80112e2:	d404      	bmi.n	80112ee <fileno+0x3e>
 80112e4:	059b      	lsls	r3, r3, #22
 80112e6:	d402      	bmi.n	80112ee <fileno+0x3e>
 80112e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80112ea:	f7fd fa90 	bl	800e80e <__retarget_lock_release_recursive>
 80112ee:	4628      	mov	r0, r5
 80112f0:	bd38      	pop	{r3, r4, r5, pc}
 80112f2:	682a      	ldr	r2, [r5, #0]
 80112f4:	2109      	movs	r1, #9
 80112f6:	6011      	str	r1, [r2, #0]
 80112f8:	f04f 35ff 	mov.w	r5, #4294967295
 80112fc:	e7ef      	b.n	80112de <fileno+0x2e>
 80112fe:	bf00      	nop
 8011300:	20000574 	.word	0x20000574

08011304 <__sflags>:
 8011304:	780b      	ldrb	r3, [r1, #0]
 8011306:	2b72      	cmp	r3, #114	@ 0x72
 8011308:	b530      	push	{r4, r5, lr}
 801130a:	d022      	beq.n	8011352 <__sflags+0x4e>
 801130c:	2b77      	cmp	r3, #119	@ 0x77
 801130e:	d024      	beq.n	801135a <__sflags+0x56>
 8011310:	2b61      	cmp	r3, #97	@ 0x61
 8011312:	d027      	beq.n	8011364 <__sflags+0x60>
 8011314:	2316      	movs	r3, #22
 8011316:	6003      	str	r3, [r0, #0]
 8011318:	2000      	movs	r0, #0
 801131a:	bd30      	pop	{r4, r5, pc}
 801131c:	2d62      	cmp	r5, #98	@ 0x62
 801131e:	d012      	beq.n	8011346 <__sflags+0x42>
 8011320:	2d78      	cmp	r5, #120	@ 0x78
 8011322:	d013      	beq.n	801134c <__sflags+0x48>
 8011324:	2d2b      	cmp	r5, #43	@ 0x2b
 8011326:	d107      	bne.n	8011338 <__sflags+0x34>
 8011328:	f020 001c 	bic.w	r0, r0, #28
 801132c:	f023 0303 	bic.w	r3, r3, #3
 8011330:	f040 0010 	orr.w	r0, r0, #16
 8011334:	f043 0302 	orr.w	r3, r3, #2
 8011338:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 801133c:	2d00      	cmp	r5, #0
 801133e:	d1ed      	bne.n	801131c <__sflags+0x18>
 8011340:	4323      	orrs	r3, r4
 8011342:	6013      	str	r3, [r2, #0]
 8011344:	e7e9      	b.n	801131a <__sflags+0x16>
 8011346:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801134a:	e7f5      	b.n	8011338 <__sflags+0x34>
 801134c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8011350:	e7f2      	b.n	8011338 <__sflags+0x34>
 8011352:	2400      	movs	r4, #0
 8011354:	4623      	mov	r3, r4
 8011356:	2004      	movs	r0, #4
 8011358:	e7ee      	b.n	8011338 <__sflags+0x34>
 801135a:	f44f 64c0 	mov.w	r4, #1536	@ 0x600
 801135e:	2301      	movs	r3, #1
 8011360:	2008      	movs	r0, #8
 8011362:	e7e9      	b.n	8011338 <__sflags+0x34>
 8011364:	f44f 7402 	mov.w	r4, #520	@ 0x208
 8011368:	2301      	movs	r3, #1
 801136a:	f44f 7084 	mov.w	r0, #264	@ 0x108
 801136e:	e7e3      	b.n	8011338 <__sflags+0x34>

08011370 <__swhatbuf_r>:
 8011370:	b570      	push	{r4, r5, r6, lr}
 8011372:	460c      	mov	r4, r1
 8011374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011378:	2900      	cmp	r1, #0
 801137a:	b096      	sub	sp, #88	@ 0x58
 801137c:	4615      	mov	r5, r2
 801137e:	461e      	mov	r6, r3
 8011380:	da0d      	bge.n	801139e <__swhatbuf_r+0x2e>
 8011382:	89a3      	ldrh	r3, [r4, #12]
 8011384:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011388:	f04f 0100 	mov.w	r1, #0
 801138c:	bf14      	ite	ne
 801138e:	2340      	movne	r3, #64	@ 0x40
 8011390:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011394:	2000      	movs	r0, #0
 8011396:	6031      	str	r1, [r6, #0]
 8011398:	602b      	str	r3, [r5, #0]
 801139a:	b016      	add	sp, #88	@ 0x58
 801139c:	bd70      	pop	{r4, r5, r6, pc}
 801139e:	466a      	mov	r2, sp
 80113a0:	f000 f874 	bl	801148c <_fstat_r>
 80113a4:	2800      	cmp	r0, #0
 80113a6:	dbec      	blt.n	8011382 <__swhatbuf_r+0x12>
 80113a8:	9901      	ldr	r1, [sp, #4]
 80113aa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80113ae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80113b2:	4259      	negs	r1, r3
 80113b4:	4159      	adcs	r1, r3
 80113b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80113ba:	e7eb      	b.n	8011394 <__swhatbuf_r+0x24>

080113bc <__smakebuf_r>:
 80113bc:	898b      	ldrh	r3, [r1, #12]
 80113be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80113c0:	079d      	lsls	r5, r3, #30
 80113c2:	4606      	mov	r6, r0
 80113c4:	460c      	mov	r4, r1
 80113c6:	d507      	bpl.n	80113d8 <__smakebuf_r+0x1c>
 80113c8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80113cc:	6023      	str	r3, [r4, #0]
 80113ce:	6123      	str	r3, [r4, #16]
 80113d0:	2301      	movs	r3, #1
 80113d2:	6163      	str	r3, [r4, #20]
 80113d4:	b003      	add	sp, #12
 80113d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80113d8:	ab01      	add	r3, sp, #4
 80113da:	466a      	mov	r2, sp
 80113dc:	f7ff ffc8 	bl	8011370 <__swhatbuf_r>
 80113e0:	9f00      	ldr	r7, [sp, #0]
 80113e2:	4605      	mov	r5, r0
 80113e4:	4639      	mov	r1, r7
 80113e6:	4630      	mov	r0, r6
 80113e8:	f7fe f906 	bl	800f5f8 <_malloc_r>
 80113ec:	b948      	cbnz	r0, 8011402 <__smakebuf_r+0x46>
 80113ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80113f2:	059a      	lsls	r2, r3, #22
 80113f4:	d4ee      	bmi.n	80113d4 <__smakebuf_r+0x18>
 80113f6:	f023 0303 	bic.w	r3, r3, #3
 80113fa:	f043 0302 	orr.w	r3, r3, #2
 80113fe:	81a3      	strh	r3, [r4, #12]
 8011400:	e7e2      	b.n	80113c8 <__smakebuf_r+0xc>
 8011402:	89a3      	ldrh	r3, [r4, #12]
 8011404:	6020      	str	r0, [r4, #0]
 8011406:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801140a:	81a3      	strh	r3, [r4, #12]
 801140c:	9b01      	ldr	r3, [sp, #4]
 801140e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011412:	b15b      	cbz	r3, 801142c <__smakebuf_r+0x70>
 8011414:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011418:	4630      	mov	r0, r6
 801141a:	f000 f849 	bl	80114b0 <_isatty_r>
 801141e:	b128      	cbz	r0, 801142c <__smakebuf_r+0x70>
 8011420:	89a3      	ldrh	r3, [r4, #12]
 8011422:	f023 0303 	bic.w	r3, r3, #3
 8011426:	f043 0301 	orr.w	r3, r3, #1
 801142a:	81a3      	strh	r3, [r4, #12]
 801142c:	89a3      	ldrh	r3, [r4, #12]
 801142e:	431d      	orrs	r5, r3
 8011430:	81a5      	strh	r5, [r4, #12]
 8011432:	e7cf      	b.n	80113d4 <__smakebuf_r+0x18>

08011434 <memmove>:
 8011434:	4288      	cmp	r0, r1
 8011436:	b510      	push	{r4, lr}
 8011438:	eb01 0402 	add.w	r4, r1, r2
 801143c:	d902      	bls.n	8011444 <memmove+0x10>
 801143e:	4284      	cmp	r4, r0
 8011440:	4623      	mov	r3, r4
 8011442:	d807      	bhi.n	8011454 <memmove+0x20>
 8011444:	1e43      	subs	r3, r0, #1
 8011446:	42a1      	cmp	r1, r4
 8011448:	d008      	beq.n	801145c <memmove+0x28>
 801144a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801144e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011452:	e7f8      	b.n	8011446 <memmove+0x12>
 8011454:	4402      	add	r2, r0
 8011456:	4601      	mov	r1, r0
 8011458:	428a      	cmp	r2, r1
 801145a:	d100      	bne.n	801145e <memmove+0x2a>
 801145c:	bd10      	pop	{r4, pc}
 801145e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011462:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011466:	e7f7      	b.n	8011458 <memmove+0x24>

08011468 <strncmp>:
 8011468:	b510      	push	{r4, lr}
 801146a:	b16a      	cbz	r2, 8011488 <strncmp+0x20>
 801146c:	3901      	subs	r1, #1
 801146e:	1884      	adds	r4, r0, r2
 8011470:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011474:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011478:	429a      	cmp	r2, r3
 801147a:	d103      	bne.n	8011484 <strncmp+0x1c>
 801147c:	42a0      	cmp	r0, r4
 801147e:	d001      	beq.n	8011484 <strncmp+0x1c>
 8011480:	2a00      	cmp	r2, #0
 8011482:	d1f5      	bne.n	8011470 <strncmp+0x8>
 8011484:	1ad0      	subs	r0, r2, r3
 8011486:	bd10      	pop	{r4, pc}
 8011488:	4610      	mov	r0, r2
 801148a:	e7fc      	b.n	8011486 <strncmp+0x1e>

0801148c <_fstat_r>:
 801148c:	b538      	push	{r3, r4, r5, lr}
 801148e:	4d07      	ldr	r5, [pc, #28]	@ (80114ac <_fstat_r+0x20>)
 8011490:	2300      	movs	r3, #0
 8011492:	4604      	mov	r4, r0
 8011494:	4608      	mov	r0, r1
 8011496:	4611      	mov	r1, r2
 8011498:	602b      	str	r3, [r5, #0]
 801149a:	f7f2 ffcf 	bl	800443c <_fstat>
 801149e:	1c43      	adds	r3, r0, #1
 80114a0:	d102      	bne.n	80114a8 <_fstat_r+0x1c>
 80114a2:	682b      	ldr	r3, [r5, #0]
 80114a4:	b103      	cbz	r3, 80114a8 <_fstat_r+0x1c>
 80114a6:	6023      	str	r3, [r4, #0]
 80114a8:	bd38      	pop	{r3, r4, r5, pc}
 80114aa:	bf00      	nop
 80114ac:	20004b08 	.word	0x20004b08

080114b0 <_isatty_r>:
 80114b0:	b538      	push	{r3, r4, r5, lr}
 80114b2:	4d06      	ldr	r5, [pc, #24]	@ (80114cc <_isatty_r+0x1c>)
 80114b4:	2300      	movs	r3, #0
 80114b6:	4604      	mov	r4, r0
 80114b8:	4608      	mov	r0, r1
 80114ba:	602b      	str	r3, [r5, #0]
 80114bc:	f7f2 ffce 	bl	800445c <_isatty>
 80114c0:	1c43      	adds	r3, r0, #1
 80114c2:	d102      	bne.n	80114ca <_isatty_r+0x1a>
 80114c4:	682b      	ldr	r3, [r5, #0]
 80114c6:	b103      	cbz	r3, 80114ca <_isatty_r+0x1a>
 80114c8:	6023      	str	r3, [r4, #0]
 80114ca:	bd38      	pop	{r3, r4, r5, pc}
 80114cc:	20004b08 	.word	0x20004b08

080114d0 <_sbrk_r>:
 80114d0:	b538      	push	{r3, r4, r5, lr}
 80114d2:	4d06      	ldr	r5, [pc, #24]	@ (80114ec <_sbrk_r+0x1c>)
 80114d4:	2300      	movs	r3, #0
 80114d6:	4604      	mov	r4, r0
 80114d8:	4608      	mov	r0, r1
 80114da:	602b      	str	r3, [r5, #0]
 80114dc:	f7f2 ffe4 	bl	80044a8 <_sbrk>
 80114e0:	1c43      	adds	r3, r0, #1
 80114e2:	d102      	bne.n	80114ea <_sbrk_r+0x1a>
 80114e4:	682b      	ldr	r3, [r5, #0]
 80114e6:	b103      	cbz	r3, 80114ea <_sbrk_r+0x1a>
 80114e8:	6023      	str	r3, [r4, #0]
 80114ea:	bd38      	pop	{r3, r4, r5, pc}
 80114ec:	20004b08 	.word	0x20004b08

080114f0 <nan>:
 80114f0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80114f8 <nan+0x8>
 80114f4:	4770      	bx	lr
 80114f6:	bf00      	nop
 80114f8:	00000000 	.word	0x00000000
 80114fc:	7ff80000 	.word	0x7ff80000

08011500 <abort>:
 8011500:	b508      	push	{r3, lr}
 8011502:	2006      	movs	r0, #6
 8011504:	f000 fbc4 	bl	8011c90 <raise>
 8011508:	2001      	movs	r0, #1
 801150a:	f7f2 ff47 	bl	800439c <_exit>

0801150e <_calloc_r>:
 801150e:	b570      	push	{r4, r5, r6, lr}
 8011510:	fba1 5402 	umull	r5, r4, r1, r2
 8011514:	b93c      	cbnz	r4, 8011526 <_calloc_r+0x18>
 8011516:	4629      	mov	r1, r5
 8011518:	f7fe f86e 	bl	800f5f8 <_malloc_r>
 801151c:	4606      	mov	r6, r0
 801151e:	b928      	cbnz	r0, 801152c <_calloc_r+0x1e>
 8011520:	2600      	movs	r6, #0
 8011522:	4630      	mov	r0, r6
 8011524:	bd70      	pop	{r4, r5, r6, pc}
 8011526:	220c      	movs	r2, #12
 8011528:	6002      	str	r2, [r0, #0]
 801152a:	e7f9      	b.n	8011520 <_calloc_r+0x12>
 801152c:	462a      	mov	r2, r5
 801152e:	4621      	mov	r1, r4
 8011530:	f7fc fef3 	bl	800e31a <memset>
 8011534:	e7f5      	b.n	8011522 <_calloc_r+0x14>

08011536 <rshift>:
 8011536:	6903      	ldr	r3, [r0, #16]
 8011538:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801153c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011540:	ea4f 1261 	mov.w	r2, r1, asr #5
 8011544:	f100 0414 	add.w	r4, r0, #20
 8011548:	dd45      	ble.n	80115d6 <rshift+0xa0>
 801154a:	f011 011f 	ands.w	r1, r1, #31
 801154e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8011552:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8011556:	d10c      	bne.n	8011572 <rshift+0x3c>
 8011558:	f100 0710 	add.w	r7, r0, #16
 801155c:	4629      	mov	r1, r5
 801155e:	42b1      	cmp	r1, r6
 8011560:	d334      	bcc.n	80115cc <rshift+0x96>
 8011562:	1a9b      	subs	r3, r3, r2
 8011564:	009b      	lsls	r3, r3, #2
 8011566:	1eea      	subs	r2, r5, #3
 8011568:	4296      	cmp	r6, r2
 801156a:	bf38      	it	cc
 801156c:	2300      	movcc	r3, #0
 801156e:	4423      	add	r3, r4
 8011570:	e015      	b.n	801159e <rshift+0x68>
 8011572:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8011576:	f1c1 0820 	rsb	r8, r1, #32
 801157a:	40cf      	lsrs	r7, r1
 801157c:	f105 0e04 	add.w	lr, r5, #4
 8011580:	46a1      	mov	r9, r4
 8011582:	4576      	cmp	r6, lr
 8011584:	46f4      	mov	ip, lr
 8011586:	d815      	bhi.n	80115b4 <rshift+0x7e>
 8011588:	1a9a      	subs	r2, r3, r2
 801158a:	0092      	lsls	r2, r2, #2
 801158c:	3a04      	subs	r2, #4
 801158e:	3501      	adds	r5, #1
 8011590:	42ae      	cmp	r6, r5
 8011592:	bf38      	it	cc
 8011594:	2200      	movcc	r2, #0
 8011596:	18a3      	adds	r3, r4, r2
 8011598:	50a7      	str	r7, [r4, r2]
 801159a:	b107      	cbz	r7, 801159e <rshift+0x68>
 801159c:	3304      	adds	r3, #4
 801159e:	1b1a      	subs	r2, r3, r4
 80115a0:	42a3      	cmp	r3, r4
 80115a2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80115a6:	bf08      	it	eq
 80115a8:	2300      	moveq	r3, #0
 80115aa:	6102      	str	r2, [r0, #16]
 80115ac:	bf08      	it	eq
 80115ae:	6143      	streq	r3, [r0, #20]
 80115b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80115b4:	f8dc c000 	ldr.w	ip, [ip]
 80115b8:	fa0c fc08 	lsl.w	ip, ip, r8
 80115bc:	ea4c 0707 	orr.w	r7, ip, r7
 80115c0:	f849 7b04 	str.w	r7, [r9], #4
 80115c4:	f85e 7b04 	ldr.w	r7, [lr], #4
 80115c8:	40cf      	lsrs	r7, r1
 80115ca:	e7da      	b.n	8011582 <rshift+0x4c>
 80115cc:	f851 cb04 	ldr.w	ip, [r1], #4
 80115d0:	f847 cf04 	str.w	ip, [r7, #4]!
 80115d4:	e7c3      	b.n	801155e <rshift+0x28>
 80115d6:	4623      	mov	r3, r4
 80115d8:	e7e1      	b.n	801159e <rshift+0x68>

080115da <__hexdig_fun>:
 80115da:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80115de:	2b09      	cmp	r3, #9
 80115e0:	d802      	bhi.n	80115e8 <__hexdig_fun+0xe>
 80115e2:	3820      	subs	r0, #32
 80115e4:	b2c0      	uxtb	r0, r0
 80115e6:	4770      	bx	lr
 80115e8:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80115ec:	2b05      	cmp	r3, #5
 80115ee:	d801      	bhi.n	80115f4 <__hexdig_fun+0x1a>
 80115f0:	3847      	subs	r0, #71	@ 0x47
 80115f2:	e7f7      	b.n	80115e4 <__hexdig_fun+0xa>
 80115f4:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80115f8:	2b05      	cmp	r3, #5
 80115fa:	d801      	bhi.n	8011600 <__hexdig_fun+0x26>
 80115fc:	3827      	subs	r0, #39	@ 0x27
 80115fe:	e7f1      	b.n	80115e4 <__hexdig_fun+0xa>
 8011600:	2000      	movs	r0, #0
 8011602:	4770      	bx	lr

08011604 <__gethex>:
 8011604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011608:	b085      	sub	sp, #20
 801160a:	468a      	mov	sl, r1
 801160c:	9302      	str	r3, [sp, #8]
 801160e:	680b      	ldr	r3, [r1, #0]
 8011610:	9001      	str	r0, [sp, #4]
 8011612:	4690      	mov	r8, r2
 8011614:	1c9c      	adds	r4, r3, #2
 8011616:	46a1      	mov	r9, r4
 8011618:	f814 0b01 	ldrb.w	r0, [r4], #1
 801161c:	2830      	cmp	r0, #48	@ 0x30
 801161e:	d0fa      	beq.n	8011616 <__gethex+0x12>
 8011620:	eba9 0303 	sub.w	r3, r9, r3
 8011624:	f1a3 0b02 	sub.w	fp, r3, #2
 8011628:	f7ff ffd7 	bl	80115da <__hexdig_fun>
 801162c:	4605      	mov	r5, r0
 801162e:	2800      	cmp	r0, #0
 8011630:	d168      	bne.n	8011704 <__gethex+0x100>
 8011632:	49a0      	ldr	r1, [pc, #640]	@ (80118b4 <__gethex+0x2b0>)
 8011634:	2201      	movs	r2, #1
 8011636:	4648      	mov	r0, r9
 8011638:	f7ff ff16 	bl	8011468 <strncmp>
 801163c:	4607      	mov	r7, r0
 801163e:	2800      	cmp	r0, #0
 8011640:	d167      	bne.n	8011712 <__gethex+0x10e>
 8011642:	f899 0001 	ldrb.w	r0, [r9, #1]
 8011646:	4626      	mov	r6, r4
 8011648:	f7ff ffc7 	bl	80115da <__hexdig_fun>
 801164c:	2800      	cmp	r0, #0
 801164e:	d062      	beq.n	8011716 <__gethex+0x112>
 8011650:	4623      	mov	r3, r4
 8011652:	7818      	ldrb	r0, [r3, #0]
 8011654:	2830      	cmp	r0, #48	@ 0x30
 8011656:	4699      	mov	r9, r3
 8011658:	f103 0301 	add.w	r3, r3, #1
 801165c:	d0f9      	beq.n	8011652 <__gethex+0x4e>
 801165e:	f7ff ffbc 	bl	80115da <__hexdig_fun>
 8011662:	fab0 f580 	clz	r5, r0
 8011666:	096d      	lsrs	r5, r5, #5
 8011668:	f04f 0b01 	mov.w	fp, #1
 801166c:	464a      	mov	r2, r9
 801166e:	4616      	mov	r6, r2
 8011670:	3201      	adds	r2, #1
 8011672:	7830      	ldrb	r0, [r6, #0]
 8011674:	f7ff ffb1 	bl	80115da <__hexdig_fun>
 8011678:	2800      	cmp	r0, #0
 801167a:	d1f8      	bne.n	801166e <__gethex+0x6a>
 801167c:	498d      	ldr	r1, [pc, #564]	@ (80118b4 <__gethex+0x2b0>)
 801167e:	2201      	movs	r2, #1
 8011680:	4630      	mov	r0, r6
 8011682:	f7ff fef1 	bl	8011468 <strncmp>
 8011686:	2800      	cmp	r0, #0
 8011688:	d13f      	bne.n	801170a <__gethex+0x106>
 801168a:	b944      	cbnz	r4, 801169e <__gethex+0x9a>
 801168c:	1c74      	adds	r4, r6, #1
 801168e:	4622      	mov	r2, r4
 8011690:	4616      	mov	r6, r2
 8011692:	3201      	adds	r2, #1
 8011694:	7830      	ldrb	r0, [r6, #0]
 8011696:	f7ff ffa0 	bl	80115da <__hexdig_fun>
 801169a:	2800      	cmp	r0, #0
 801169c:	d1f8      	bne.n	8011690 <__gethex+0x8c>
 801169e:	1ba4      	subs	r4, r4, r6
 80116a0:	00a7      	lsls	r7, r4, #2
 80116a2:	7833      	ldrb	r3, [r6, #0]
 80116a4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80116a8:	2b50      	cmp	r3, #80	@ 0x50
 80116aa:	d13e      	bne.n	801172a <__gethex+0x126>
 80116ac:	7873      	ldrb	r3, [r6, #1]
 80116ae:	2b2b      	cmp	r3, #43	@ 0x2b
 80116b0:	d033      	beq.n	801171a <__gethex+0x116>
 80116b2:	2b2d      	cmp	r3, #45	@ 0x2d
 80116b4:	d034      	beq.n	8011720 <__gethex+0x11c>
 80116b6:	1c71      	adds	r1, r6, #1
 80116b8:	2400      	movs	r4, #0
 80116ba:	7808      	ldrb	r0, [r1, #0]
 80116bc:	f7ff ff8d 	bl	80115da <__hexdig_fun>
 80116c0:	1e43      	subs	r3, r0, #1
 80116c2:	b2db      	uxtb	r3, r3
 80116c4:	2b18      	cmp	r3, #24
 80116c6:	d830      	bhi.n	801172a <__gethex+0x126>
 80116c8:	f1a0 0210 	sub.w	r2, r0, #16
 80116cc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80116d0:	f7ff ff83 	bl	80115da <__hexdig_fun>
 80116d4:	f100 3cff 	add.w	ip, r0, #4294967295
 80116d8:	fa5f fc8c 	uxtb.w	ip, ip
 80116dc:	f1bc 0f18 	cmp.w	ip, #24
 80116e0:	f04f 030a 	mov.w	r3, #10
 80116e4:	d91e      	bls.n	8011724 <__gethex+0x120>
 80116e6:	b104      	cbz	r4, 80116ea <__gethex+0xe6>
 80116e8:	4252      	negs	r2, r2
 80116ea:	4417      	add	r7, r2
 80116ec:	f8ca 1000 	str.w	r1, [sl]
 80116f0:	b1ed      	cbz	r5, 801172e <__gethex+0x12a>
 80116f2:	f1bb 0f00 	cmp.w	fp, #0
 80116f6:	bf0c      	ite	eq
 80116f8:	2506      	moveq	r5, #6
 80116fa:	2500      	movne	r5, #0
 80116fc:	4628      	mov	r0, r5
 80116fe:	b005      	add	sp, #20
 8011700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011704:	2500      	movs	r5, #0
 8011706:	462c      	mov	r4, r5
 8011708:	e7b0      	b.n	801166c <__gethex+0x68>
 801170a:	2c00      	cmp	r4, #0
 801170c:	d1c7      	bne.n	801169e <__gethex+0x9a>
 801170e:	4627      	mov	r7, r4
 8011710:	e7c7      	b.n	80116a2 <__gethex+0x9e>
 8011712:	464e      	mov	r6, r9
 8011714:	462f      	mov	r7, r5
 8011716:	2501      	movs	r5, #1
 8011718:	e7c3      	b.n	80116a2 <__gethex+0x9e>
 801171a:	2400      	movs	r4, #0
 801171c:	1cb1      	adds	r1, r6, #2
 801171e:	e7cc      	b.n	80116ba <__gethex+0xb6>
 8011720:	2401      	movs	r4, #1
 8011722:	e7fb      	b.n	801171c <__gethex+0x118>
 8011724:	fb03 0002 	mla	r0, r3, r2, r0
 8011728:	e7ce      	b.n	80116c8 <__gethex+0xc4>
 801172a:	4631      	mov	r1, r6
 801172c:	e7de      	b.n	80116ec <__gethex+0xe8>
 801172e:	eba6 0309 	sub.w	r3, r6, r9
 8011732:	3b01      	subs	r3, #1
 8011734:	4629      	mov	r1, r5
 8011736:	2b07      	cmp	r3, #7
 8011738:	dc0a      	bgt.n	8011750 <__gethex+0x14c>
 801173a:	9801      	ldr	r0, [sp, #4]
 801173c:	f7fd ffe8 	bl	800f710 <_Balloc>
 8011740:	4604      	mov	r4, r0
 8011742:	b940      	cbnz	r0, 8011756 <__gethex+0x152>
 8011744:	4b5c      	ldr	r3, [pc, #368]	@ (80118b8 <__gethex+0x2b4>)
 8011746:	4602      	mov	r2, r0
 8011748:	21e4      	movs	r1, #228	@ 0xe4
 801174a:	485c      	ldr	r0, [pc, #368]	@ (80118bc <__gethex+0x2b8>)
 801174c:	f7fd f874 	bl	800e838 <__assert_func>
 8011750:	3101      	adds	r1, #1
 8011752:	105b      	asrs	r3, r3, #1
 8011754:	e7ef      	b.n	8011736 <__gethex+0x132>
 8011756:	f100 0a14 	add.w	sl, r0, #20
 801175a:	2300      	movs	r3, #0
 801175c:	4655      	mov	r5, sl
 801175e:	469b      	mov	fp, r3
 8011760:	45b1      	cmp	r9, r6
 8011762:	d337      	bcc.n	80117d4 <__gethex+0x1d0>
 8011764:	f845 bb04 	str.w	fp, [r5], #4
 8011768:	eba5 050a 	sub.w	r5, r5, sl
 801176c:	10ad      	asrs	r5, r5, #2
 801176e:	6125      	str	r5, [r4, #16]
 8011770:	4658      	mov	r0, fp
 8011772:	f7fe f8bf 	bl	800f8f4 <__hi0bits>
 8011776:	016d      	lsls	r5, r5, #5
 8011778:	f8d8 6000 	ldr.w	r6, [r8]
 801177c:	1a2d      	subs	r5, r5, r0
 801177e:	42b5      	cmp	r5, r6
 8011780:	dd54      	ble.n	801182c <__gethex+0x228>
 8011782:	1bad      	subs	r5, r5, r6
 8011784:	4629      	mov	r1, r5
 8011786:	4620      	mov	r0, r4
 8011788:	f7fe fc53 	bl	8010032 <__any_on>
 801178c:	4681      	mov	r9, r0
 801178e:	b178      	cbz	r0, 80117b0 <__gethex+0x1ac>
 8011790:	1e6b      	subs	r3, r5, #1
 8011792:	1159      	asrs	r1, r3, #5
 8011794:	f003 021f 	and.w	r2, r3, #31
 8011798:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801179c:	f04f 0901 	mov.w	r9, #1
 80117a0:	fa09 f202 	lsl.w	r2, r9, r2
 80117a4:	420a      	tst	r2, r1
 80117a6:	d003      	beq.n	80117b0 <__gethex+0x1ac>
 80117a8:	454b      	cmp	r3, r9
 80117aa:	dc36      	bgt.n	801181a <__gethex+0x216>
 80117ac:	f04f 0902 	mov.w	r9, #2
 80117b0:	4629      	mov	r1, r5
 80117b2:	4620      	mov	r0, r4
 80117b4:	f7ff febf 	bl	8011536 <rshift>
 80117b8:	442f      	add	r7, r5
 80117ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80117be:	42bb      	cmp	r3, r7
 80117c0:	da42      	bge.n	8011848 <__gethex+0x244>
 80117c2:	9801      	ldr	r0, [sp, #4]
 80117c4:	4621      	mov	r1, r4
 80117c6:	f7fd ffe3 	bl	800f790 <_Bfree>
 80117ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80117cc:	2300      	movs	r3, #0
 80117ce:	6013      	str	r3, [r2, #0]
 80117d0:	25a3      	movs	r5, #163	@ 0xa3
 80117d2:	e793      	b.n	80116fc <__gethex+0xf8>
 80117d4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80117d8:	2a2e      	cmp	r2, #46	@ 0x2e
 80117da:	d012      	beq.n	8011802 <__gethex+0x1fe>
 80117dc:	2b20      	cmp	r3, #32
 80117de:	d104      	bne.n	80117ea <__gethex+0x1e6>
 80117e0:	f845 bb04 	str.w	fp, [r5], #4
 80117e4:	f04f 0b00 	mov.w	fp, #0
 80117e8:	465b      	mov	r3, fp
 80117ea:	7830      	ldrb	r0, [r6, #0]
 80117ec:	9303      	str	r3, [sp, #12]
 80117ee:	f7ff fef4 	bl	80115da <__hexdig_fun>
 80117f2:	9b03      	ldr	r3, [sp, #12]
 80117f4:	f000 000f 	and.w	r0, r0, #15
 80117f8:	4098      	lsls	r0, r3
 80117fa:	ea4b 0b00 	orr.w	fp, fp, r0
 80117fe:	3304      	adds	r3, #4
 8011800:	e7ae      	b.n	8011760 <__gethex+0x15c>
 8011802:	45b1      	cmp	r9, r6
 8011804:	d8ea      	bhi.n	80117dc <__gethex+0x1d8>
 8011806:	492b      	ldr	r1, [pc, #172]	@ (80118b4 <__gethex+0x2b0>)
 8011808:	9303      	str	r3, [sp, #12]
 801180a:	2201      	movs	r2, #1
 801180c:	4630      	mov	r0, r6
 801180e:	f7ff fe2b 	bl	8011468 <strncmp>
 8011812:	9b03      	ldr	r3, [sp, #12]
 8011814:	2800      	cmp	r0, #0
 8011816:	d1e1      	bne.n	80117dc <__gethex+0x1d8>
 8011818:	e7a2      	b.n	8011760 <__gethex+0x15c>
 801181a:	1ea9      	subs	r1, r5, #2
 801181c:	4620      	mov	r0, r4
 801181e:	f7fe fc08 	bl	8010032 <__any_on>
 8011822:	2800      	cmp	r0, #0
 8011824:	d0c2      	beq.n	80117ac <__gethex+0x1a8>
 8011826:	f04f 0903 	mov.w	r9, #3
 801182a:	e7c1      	b.n	80117b0 <__gethex+0x1ac>
 801182c:	da09      	bge.n	8011842 <__gethex+0x23e>
 801182e:	1b75      	subs	r5, r6, r5
 8011830:	4621      	mov	r1, r4
 8011832:	9801      	ldr	r0, [sp, #4]
 8011834:	462a      	mov	r2, r5
 8011836:	f7fe f9c3 	bl	800fbc0 <__lshift>
 801183a:	1b7f      	subs	r7, r7, r5
 801183c:	4604      	mov	r4, r0
 801183e:	f100 0a14 	add.w	sl, r0, #20
 8011842:	f04f 0900 	mov.w	r9, #0
 8011846:	e7b8      	b.n	80117ba <__gethex+0x1b6>
 8011848:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801184c:	42bd      	cmp	r5, r7
 801184e:	dd6f      	ble.n	8011930 <__gethex+0x32c>
 8011850:	1bed      	subs	r5, r5, r7
 8011852:	42ae      	cmp	r6, r5
 8011854:	dc34      	bgt.n	80118c0 <__gethex+0x2bc>
 8011856:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801185a:	2b02      	cmp	r3, #2
 801185c:	d022      	beq.n	80118a4 <__gethex+0x2a0>
 801185e:	2b03      	cmp	r3, #3
 8011860:	d024      	beq.n	80118ac <__gethex+0x2a8>
 8011862:	2b01      	cmp	r3, #1
 8011864:	d115      	bne.n	8011892 <__gethex+0x28e>
 8011866:	42ae      	cmp	r6, r5
 8011868:	d113      	bne.n	8011892 <__gethex+0x28e>
 801186a:	2e01      	cmp	r6, #1
 801186c:	d10b      	bne.n	8011886 <__gethex+0x282>
 801186e:	9a02      	ldr	r2, [sp, #8]
 8011870:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011874:	6013      	str	r3, [r2, #0]
 8011876:	2301      	movs	r3, #1
 8011878:	6123      	str	r3, [r4, #16]
 801187a:	f8ca 3000 	str.w	r3, [sl]
 801187e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011880:	2562      	movs	r5, #98	@ 0x62
 8011882:	601c      	str	r4, [r3, #0]
 8011884:	e73a      	b.n	80116fc <__gethex+0xf8>
 8011886:	1e71      	subs	r1, r6, #1
 8011888:	4620      	mov	r0, r4
 801188a:	f7fe fbd2 	bl	8010032 <__any_on>
 801188e:	2800      	cmp	r0, #0
 8011890:	d1ed      	bne.n	801186e <__gethex+0x26a>
 8011892:	9801      	ldr	r0, [sp, #4]
 8011894:	4621      	mov	r1, r4
 8011896:	f7fd ff7b 	bl	800f790 <_Bfree>
 801189a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801189c:	2300      	movs	r3, #0
 801189e:	6013      	str	r3, [r2, #0]
 80118a0:	2550      	movs	r5, #80	@ 0x50
 80118a2:	e72b      	b.n	80116fc <__gethex+0xf8>
 80118a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d1f3      	bne.n	8011892 <__gethex+0x28e>
 80118aa:	e7e0      	b.n	801186e <__gethex+0x26a>
 80118ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	d1dd      	bne.n	801186e <__gethex+0x26a>
 80118b2:	e7ee      	b.n	8011892 <__gethex+0x28e>
 80118b4:	08013030 	.word	0x08013030
 80118b8:	08012ec7 	.word	0x08012ec7
 80118bc:	080131a2 	.word	0x080131a2
 80118c0:	1e6f      	subs	r7, r5, #1
 80118c2:	f1b9 0f00 	cmp.w	r9, #0
 80118c6:	d130      	bne.n	801192a <__gethex+0x326>
 80118c8:	b127      	cbz	r7, 80118d4 <__gethex+0x2d0>
 80118ca:	4639      	mov	r1, r7
 80118cc:	4620      	mov	r0, r4
 80118ce:	f7fe fbb0 	bl	8010032 <__any_on>
 80118d2:	4681      	mov	r9, r0
 80118d4:	117a      	asrs	r2, r7, #5
 80118d6:	2301      	movs	r3, #1
 80118d8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80118dc:	f007 071f 	and.w	r7, r7, #31
 80118e0:	40bb      	lsls	r3, r7
 80118e2:	4213      	tst	r3, r2
 80118e4:	4629      	mov	r1, r5
 80118e6:	4620      	mov	r0, r4
 80118e8:	bf18      	it	ne
 80118ea:	f049 0902 	orrne.w	r9, r9, #2
 80118ee:	f7ff fe22 	bl	8011536 <rshift>
 80118f2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80118f6:	1b76      	subs	r6, r6, r5
 80118f8:	2502      	movs	r5, #2
 80118fa:	f1b9 0f00 	cmp.w	r9, #0
 80118fe:	d047      	beq.n	8011990 <__gethex+0x38c>
 8011900:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011904:	2b02      	cmp	r3, #2
 8011906:	d015      	beq.n	8011934 <__gethex+0x330>
 8011908:	2b03      	cmp	r3, #3
 801190a:	d017      	beq.n	801193c <__gethex+0x338>
 801190c:	2b01      	cmp	r3, #1
 801190e:	d109      	bne.n	8011924 <__gethex+0x320>
 8011910:	f019 0f02 	tst.w	r9, #2
 8011914:	d006      	beq.n	8011924 <__gethex+0x320>
 8011916:	f8da 3000 	ldr.w	r3, [sl]
 801191a:	ea49 0903 	orr.w	r9, r9, r3
 801191e:	f019 0f01 	tst.w	r9, #1
 8011922:	d10e      	bne.n	8011942 <__gethex+0x33e>
 8011924:	f045 0510 	orr.w	r5, r5, #16
 8011928:	e032      	b.n	8011990 <__gethex+0x38c>
 801192a:	f04f 0901 	mov.w	r9, #1
 801192e:	e7d1      	b.n	80118d4 <__gethex+0x2d0>
 8011930:	2501      	movs	r5, #1
 8011932:	e7e2      	b.n	80118fa <__gethex+0x2f6>
 8011934:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011936:	f1c3 0301 	rsb	r3, r3, #1
 801193a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801193c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801193e:	2b00      	cmp	r3, #0
 8011940:	d0f0      	beq.n	8011924 <__gethex+0x320>
 8011942:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011946:	f104 0314 	add.w	r3, r4, #20
 801194a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801194e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011952:	f04f 0c00 	mov.w	ip, #0
 8011956:	4618      	mov	r0, r3
 8011958:	f853 2b04 	ldr.w	r2, [r3], #4
 801195c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011960:	d01b      	beq.n	801199a <__gethex+0x396>
 8011962:	3201      	adds	r2, #1
 8011964:	6002      	str	r2, [r0, #0]
 8011966:	2d02      	cmp	r5, #2
 8011968:	f104 0314 	add.w	r3, r4, #20
 801196c:	d13c      	bne.n	80119e8 <__gethex+0x3e4>
 801196e:	f8d8 2000 	ldr.w	r2, [r8]
 8011972:	3a01      	subs	r2, #1
 8011974:	42b2      	cmp	r2, r6
 8011976:	d109      	bne.n	801198c <__gethex+0x388>
 8011978:	1171      	asrs	r1, r6, #5
 801197a:	2201      	movs	r2, #1
 801197c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011980:	f006 061f 	and.w	r6, r6, #31
 8011984:	fa02 f606 	lsl.w	r6, r2, r6
 8011988:	421e      	tst	r6, r3
 801198a:	d13a      	bne.n	8011a02 <__gethex+0x3fe>
 801198c:	f045 0520 	orr.w	r5, r5, #32
 8011990:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011992:	601c      	str	r4, [r3, #0]
 8011994:	9b02      	ldr	r3, [sp, #8]
 8011996:	601f      	str	r7, [r3, #0]
 8011998:	e6b0      	b.n	80116fc <__gethex+0xf8>
 801199a:	4299      	cmp	r1, r3
 801199c:	f843 cc04 	str.w	ip, [r3, #-4]
 80119a0:	d8d9      	bhi.n	8011956 <__gethex+0x352>
 80119a2:	68a3      	ldr	r3, [r4, #8]
 80119a4:	459b      	cmp	fp, r3
 80119a6:	db17      	blt.n	80119d8 <__gethex+0x3d4>
 80119a8:	6861      	ldr	r1, [r4, #4]
 80119aa:	9801      	ldr	r0, [sp, #4]
 80119ac:	3101      	adds	r1, #1
 80119ae:	f7fd feaf 	bl	800f710 <_Balloc>
 80119b2:	4681      	mov	r9, r0
 80119b4:	b918      	cbnz	r0, 80119be <__gethex+0x3ba>
 80119b6:	4b1a      	ldr	r3, [pc, #104]	@ (8011a20 <__gethex+0x41c>)
 80119b8:	4602      	mov	r2, r0
 80119ba:	2184      	movs	r1, #132	@ 0x84
 80119bc:	e6c5      	b.n	801174a <__gethex+0x146>
 80119be:	6922      	ldr	r2, [r4, #16]
 80119c0:	3202      	adds	r2, #2
 80119c2:	f104 010c 	add.w	r1, r4, #12
 80119c6:	0092      	lsls	r2, r2, #2
 80119c8:	300c      	adds	r0, #12
 80119ca:	f7fc ff21 	bl	800e810 <memcpy>
 80119ce:	4621      	mov	r1, r4
 80119d0:	9801      	ldr	r0, [sp, #4]
 80119d2:	f7fd fedd 	bl	800f790 <_Bfree>
 80119d6:	464c      	mov	r4, r9
 80119d8:	6923      	ldr	r3, [r4, #16]
 80119da:	1c5a      	adds	r2, r3, #1
 80119dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80119e0:	6122      	str	r2, [r4, #16]
 80119e2:	2201      	movs	r2, #1
 80119e4:	615a      	str	r2, [r3, #20]
 80119e6:	e7be      	b.n	8011966 <__gethex+0x362>
 80119e8:	6922      	ldr	r2, [r4, #16]
 80119ea:	455a      	cmp	r2, fp
 80119ec:	dd0b      	ble.n	8011a06 <__gethex+0x402>
 80119ee:	2101      	movs	r1, #1
 80119f0:	4620      	mov	r0, r4
 80119f2:	f7ff fda0 	bl	8011536 <rshift>
 80119f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80119fa:	3701      	adds	r7, #1
 80119fc:	42bb      	cmp	r3, r7
 80119fe:	f6ff aee0 	blt.w	80117c2 <__gethex+0x1be>
 8011a02:	2501      	movs	r5, #1
 8011a04:	e7c2      	b.n	801198c <__gethex+0x388>
 8011a06:	f016 061f 	ands.w	r6, r6, #31
 8011a0a:	d0fa      	beq.n	8011a02 <__gethex+0x3fe>
 8011a0c:	4453      	add	r3, sl
 8011a0e:	f1c6 0620 	rsb	r6, r6, #32
 8011a12:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8011a16:	f7fd ff6d 	bl	800f8f4 <__hi0bits>
 8011a1a:	42b0      	cmp	r0, r6
 8011a1c:	dbe7      	blt.n	80119ee <__gethex+0x3ea>
 8011a1e:	e7f0      	b.n	8011a02 <__gethex+0x3fe>
 8011a20:	08012ec7 	.word	0x08012ec7

08011a24 <L_shift>:
 8011a24:	f1c2 0208 	rsb	r2, r2, #8
 8011a28:	0092      	lsls	r2, r2, #2
 8011a2a:	b570      	push	{r4, r5, r6, lr}
 8011a2c:	f1c2 0620 	rsb	r6, r2, #32
 8011a30:	6843      	ldr	r3, [r0, #4]
 8011a32:	6804      	ldr	r4, [r0, #0]
 8011a34:	fa03 f506 	lsl.w	r5, r3, r6
 8011a38:	432c      	orrs	r4, r5
 8011a3a:	40d3      	lsrs	r3, r2
 8011a3c:	6004      	str	r4, [r0, #0]
 8011a3e:	f840 3f04 	str.w	r3, [r0, #4]!
 8011a42:	4288      	cmp	r0, r1
 8011a44:	d3f4      	bcc.n	8011a30 <L_shift+0xc>
 8011a46:	bd70      	pop	{r4, r5, r6, pc}

08011a48 <__match>:
 8011a48:	b530      	push	{r4, r5, lr}
 8011a4a:	6803      	ldr	r3, [r0, #0]
 8011a4c:	3301      	adds	r3, #1
 8011a4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011a52:	b914      	cbnz	r4, 8011a5a <__match+0x12>
 8011a54:	6003      	str	r3, [r0, #0]
 8011a56:	2001      	movs	r0, #1
 8011a58:	bd30      	pop	{r4, r5, pc}
 8011a5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011a5e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8011a62:	2d19      	cmp	r5, #25
 8011a64:	bf98      	it	ls
 8011a66:	3220      	addls	r2, #32
 8011a68:	42a2      	cmp	r2, r4
 8011a6a:	d0f0      	beq.n	8011a4e <__match+0x6>
 8011a6c:	2000      	movs	r0, #0
 8011a6e:	e7f3      	b.n	8011a58 <__match+0x10>

08011a70 <__hexnan>:
 8011a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a74:	680b      	ldr	r3, [r1, #0]
 8011a76:	6801      	ldr	r1, [r0, #0]
 8011a78:	115e      	asrs	r6, r3, #5
 8011a7a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011a7e:	f013 031f 	ands.w	r3, r3, #31
 8011a82:	b087      	sub	sp, #28
 8011a84:	bf18      	it	ne
 8011a86:	3604      	addne	r6, #4
 8011a88:	2500      	movs	r5, #0
 8011a8a:	1f37      	subs	r7, r6, #4
 8011a8c:	4682      	mov	sl, r0
 8011a8e:	4690      	mov	r8, r2
 8011a90:	9301      	str	r3, [sp, #4]
 8011a92:	f846 5c04 	str.w	r5, [r6, #-4]
 8011a96:	46b9      	mov	r9, r7
 8011a98:	463c      	mov	r4, r7
 8011a9a:	9502      	str	r5, [sp, #8]
 8011a9c:	46ab      	mov	fp, r5
 8011a9e:	784a      	ldrb	r2, [r1, #1]
 8011aa0:	1c4b      	adds	r3, r1, #1
 8011aa2:	9303      	str	r3, [sp, #12]
 8011aa4:	b342      	cbz	r2, 8011af8 <__hexnan+0x88>
 8011aa6:	4610      	mov	r0, r2
 8011aa8:	9105      	str	r1, [sp, #20]
 8011aaa:	9204      	str	r2, [sp, #16]
 8011aac:	f7ff fd95 	bl	80115da <__hexdig_fun>
 8011ab0:	2800      	cmp	r0, #0
 8011ab2:	d151      	bne.n	8011b58 <__hexnan+0xe8>
 8011ab4:	9a04      	ldr	r2, [sp, #16]
 8011ab6:	9905      	ldr	r1, [sp, #20]
 8011ab8:	2a20      	cmp	r2, #32
 8011aba:	d818      	bhi.n	8011aee <__hexnan+0x7e>
 8011abc:	9b02      	ldr	r3, [sp, #8]
 8011abe:	459b      	cmp	fp, r3
 8011ac0:	dd13      	ble.n	8011aea <__hexnan+0x7a>
 8011ac2:	454c      	cmp	r4, r9
 8011ac4:	d206      	bcs.n	8011ad4 <__hexnan+0x64>
 8011ac6:	2d07      	cmp	r5, #7
 8011ac8:	dc04      	bgt.n	8011ad4 <__hexnan+0x64>
 8011aca:	462a      	mov	r2, r5
 8011acc:	4649      	mov	r1, r9
 8011ace:	4620      	mov	r0, r4
 8011ad0:	f7ff ffa8 	bl	8011a24 <L_shift>
 8011ad4:	4544      	cmp	r4, r8
 8011ad6:	d952      	bls.n	8011b7e <__hexnan+0x10e>
 8011ad8:	2300      	movs	r3, #0
 8011ada:	f1a4 0904 	sub.w	r9, r4, #4
 8011ade:	f844 3c04 	str.w	r3, [r4, #-4]
 8011ae2:	f8cd b008 	str.w	fp, [sp, #8]
 8011ae6:	464c      	mov	r4, r9
 8011ae8:	461d      	mov	r5, r3
 8011aea:	9903      	ldr	r1, [sp, #12]
 8011aec:	e7d7      	b.n	8011a9e <__hexnan+0x2e>
 8011aee:	2a29      	cmp	r2, #41	@ 0x29
 8011af0:	d157      	bne.n	8011ba2 <__hexnan+0x132>
 8011af2:	3102      	adds	r1, #2
 8011af4:	f8ca 1000 	str.w	r1, [sl]
 8011af8:	f1bb 0f00 	cmp.w	fp, #0
 8011afc:	d051      	beq.n	8011ba2 <__hexnan+0x132>
 8011afe:	454c      	cmp	r4, r9
 8011b00:	d206      	bcs.n	8011b10 <__hexnan+0xa0>
 8011b02:	2d07      	cmp	r5, #7
 8011b04:	dc04      	bgt.n	8011b10 <__hexnan+0xa0>
 8011b06:	462a      	mov	r2, r5
 8011b08:	4649      	mov	r1, r9
 8011b0a:	4620      	mov	r0, r4
 8011b0c:	f7ff ff8a 	bl	8011a24 <L_shift>
 8011b10:	4544      	cmp	r4, r8
 8011b12:	d936      	bls.n	8011b82 <__hexnan+0x112>
 8011b14:	f1a8 0204 	sub.w	r2, r8, #4
 8011b18:	4623      	mov	r3, r4
 8011b1a:	f853 1b04 	ldr.w	r1, [r3], #4
 8011b1e:	f842 1f04 	str.w	r1, [r2, #4]!
 8011b22:	429f      	cmp	r7, r3
 8011b24:	d2f9      	bcs.n	8011b1a <__hexnan+0xaa>
 8011b26:	1b3b      	subs	r3, r7, r4
 8011b28:	f023 0303 	bic.w	r3, r3, #3
 8011b2c:	3304      	adds	r3, #4
 8011b2e:	3401      	adds	r4, #1
 8011b30:	3e03      	subs	r6, #3
 8011b32:	42b4      	cmp	r4, r6
 8011b34:	bf88      	it	hi
 8011b36:	2304      	movhi	r3, #4
 8011b38:	4443      	add	r3, r8
 8011b3a:	2200      	movs	r2, #0
 8011b3c:	f843 2b04 	str.w	r2, [r3], #4
 8011b40:	429f      	cmp	r7, r3
 8011b42:	d2fb      	bcs.n	8011b3c <__hexnan+0xcc>
 8011b44:	683b      	ldr	r3, [r7, #0]
 8011b46:	b91b      	cbnz	r3, 8011b50 <__hexnan+0xe0>
 8011b48:	4547      	cmp	r7, r8
 8011b4a:	d128      	bne.n	8011b9e <__hexnan+0x12e>
 8011b4c:	2301      	movs	r3, #1
 8011b4e:	603b      	str	r3, [r7, #0]
 8011b50:	2005      	movs	r0, #5
 8011b52:	b007      	add	sp, #28
 8011b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b58:	3501      	adds	r5, #1
 8011b5a:	2d08      	cmp	r5, #8
 8011b5c:	f10b 0b01 	add.w	fp, fp, #1
 8011b60:	dd06      	ble.n	8011b70 <__hexnan+0x100>
 8011b62:	4544      	cmp	r4, r8
 8011b64:	d9c1      	bls.n	8011aea <__hexnan+0x7a>
 8011b66:	2300      	movs	r3, #0
 8011b68:	f844 3c04 	str.w	r3, [r4, #-4]
 8011b6c:	2501      	movs	r5, #1
 8011b6e:	3c04      	subs	r4, #4
 8011b70:	6822      	ldr	r2, [r4, #0]
 8011b72:	f000 000f 	and.w	r0, r0, #15
 8011b76:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8011b7a:	6020      	str	r0, [r4, #0]
 8011b7c:	e7b5      	b.n	8011aea <__hexnan+0x7a>
 8011b7e:	2508      	movs	r5, #8
 8011b80:	e7b3      	b.n	8011aea <__hexnan+0x7a>
 8011b82:	9b01      	ldr	r3, [sp, #4]
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d0dd      	beq.n	8011b44 <__hexnan+0xd4>
 8011b88:	f1c3 0320 	rsb	r3, r3, #32
 8011b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8011b90:	40da      	lsrs	r2, r3
 8011b92:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8011b96:	4013      	ands	r3, r2
 8011b98:	f846 3c04 	str.w	r3, [r6, #-4]
 8011b9c:	e7d2      	b.n	8011b44 <__hexnan+0xd4>
 8011b9e:	3f04      	subs	r7, #4
 8011ba0:	e7d0      	b.n	8011b44 <__hexnan+0xd4>
 8011ba2:	2004      	movs	r0, #4
 8011ba4:	e7d5      	b.n	8011b52 <__hexnan+0xe2>

08011ba6 <__ascii_mbtowc>:
 8011ba6:	b082      	sub	sp, #8
 8011ba8:	b901      	cbnz	r1, 8011bac <__ascii_mbtowc+0x6>
 8011baa:	a901      	add	r1, sp, #4
 8011bac:	b142      	cbz	r2, 8011bc0 <__ascii_mbtowc+0x1a>
 8011bae:	b14b      	cbz	r3, 8011bc4 <__ascii_mbtowc+0x1e>
 8011bb0:	7813      	ldrb	r3, [r2, #0]
 8011bb2:	600b      	str	r3, [r1, #0]
 8011bb4:	7812      	ldrb	r2, [r2, #0]
 8011bb6:	1e10      	subs	r0, r2, #0
 8011bb8:	bf18      	it	ne
 8011bba:	2001      	movne	r0, #1
 8011bbc:	b002      	add	sp, #8
 8011bbe:	4770      	bx	lr
 8011bc0:	4610      	mov	r0, r2
 8011bc2:	e7fb      	b.n	8011bbc <__ascii_mbtowc+0x16>
 8011bc4:	f06f 0001 	mvn.w	r0, #1
 8011bc8:	e7f8      	b.n	8011bbc <__ascii_mbtowc+0x16>

08011bca <_realloc_r>:
 8011bca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011bce:	4680      	mov	r8, r0
 8011bd0:	4615      	mov	r5, r2
 8011bd2:	460c      	mov	r4, r1
 8011bd4:	b921      	cbnz	r1, 8011be0 <_realloc_r+0x16>
 8011bd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011bda:	4611      	mov	r1, r2
 8011bdc:	f7fd bd0c 	b.w	800f5f8 <_malloc_r>
 8011be0:	b92a      	cbnz	r2, 8011bee <_realloc_r+0x24>
 8011be2:	f7fd fc95 	bl	800f510 <_free_r>
 8011be6:	2400      	movs	r4, #0
 8011be8:	4620      	mov	r0, r4
 8011bea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011bee:	f000 f86b 	bl	8011cc8 <_malloc_usable_size_r>
 8011bf2:	4285      	cmp	r5, r0
 8011bf4:	4606      	mov	r6, r0
 8011bf6:	d802      	bhi.n	8011bfe <_realloc_r+0x34>
 8011bf8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8011bfc:	d8f4      	bhi.n	8011be8 <_realloc_r+0x1e>
 8011bfe:	4629      	mov	r1, r5
 8011c00:	4640      	mov	r0, r8
 8011c02:	f7fd fcf9 	bl	800f5f8 <_malloc_r>
 8011c06:	4607      	mov	r7, r0
 8011c08:	2800      	cmp	r0, #0
 8011c0a:	d0ec      	beq.n	8011be6 <_realloc_r+0x1c>
 8011c0c:	42b5      	cmp	r5, r6
 8011c0e:	462a      	mov	r2, r5
 8011c10:	4621      	mov	r1, r4
 8011c12:	bf28      	it	cs
 8011c14:	4632      	movcs	r2, r6
 8011c16:	f7fc fdfb 	bl	800e810 <memcpy>
 8011c1a:	4621      	mov	r1, r4
 8011c1c:	4640      	mov	r0, r8
 8011c1e:	f7fd fc77 	bl	800f510 <_free_r>
 8011c22:	463c      	mov	r4, r7
 8011c24:	e7e0      	b.n	8011be8 <_realloc_r+0x1e>

08011c26 <__ascii_wctomb>:
 8011c26:	4603      	mov	r3, r0
 8011c28:	4608      	mov	r0, r1
 8011c2a:	b141      	cbz	r1, 8011c3e <__ascii_wctomb+0x18>
 8011c2c:	2aff      	cmp	r2, #255	@ 0xff
 8011c2e:	d904      	bls.n	8011c3a <__ascii_wctomb+0x14>
 8011c30:	228a      	movs	r2, #138	@ 0x8a
 8011c32:	601a      	str	r2, [r3, #0]
 8011c34:	f04f 30ff 	mov.w	r0, #4294967295
 8011c38:	4770      	bx	lr
 8011c3a:	700a      	strb	r2, [r1, #0]
 8011c3c:	2001      	movs	r0, #1
 8011c3e:	4770      	bx	lr

08011c40 <_raise_r>:
 8011c40:	291f      	cmp	r1, #31
 8011c42:	b538      	push	{r3, r4, r5, lr}
 8011c44:	4605      	mov	r5, r0
 8011c46:	460c      	mov	r4, r1
 8011c48:	d904      	bls.n	8011c54 <_raise_r+0x14>
 8011c4a:	2316      	movs	r3, #22
 8011c4c:	6003      	str	r3, [r0, #0]
 8011c4e:	f04f 30ff 	mov.w	r0, #4294967295
 8011c52:	bd38      	pop	{r3, r4, r5, pc}
 8011c54:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011c56:	b112      	cbz	r2, 8011c5e <_raise_r+0x1e>
 8011c58:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011c5c:	b94b      	cbnz	r3, 8011c72 <_raise_r+0x32>
 8011c5e:	4628      	mov	r0, r5
 8011c60:	f000 f830 	bl	8011cc4 <_getpid_r>
 8011c64:	4622      	mov	r2, r4
 8011c66:	4601      	mov	r1, r0
 8011c68:	4628      	mov	r0, r5
 8011c6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011c6e:	f000 b817 	b.w	8011ca0 <_kill_r>
 8011c72:	2b01      	cmp	r3, #1
 8011c74:	d00a      	beq.n	8011c8c <_raise_r+0x4c>
 8011c76:	1c59      	adds	r1, r3, #1
 8011c78:	d103      	bne.n	8011c82 <_raise_r+0x42>
 8011c7a:	2316      	movs	r3, #22
 8011c7c:	6003      	str	r3, [r0, #0]
 8011c7e:	2001      	movs	r0, #1
 8011c80:	e7e7      	b.n	8011c52 <_raise_r+0x12>
 8011c82:	2100      	movs	r1, #0
 8011c84:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011c88:	4620      	mov	r0, r4
 8011c8a:	4798      	blx	r3
 8011c8c:	2000      	movs	r0, #0
 8011c8e:	e7e0      	b.n	8011c52 <_raise_r+0x12>

08011c90 <raise>:
 8011c90:	4b02      	ldr	r3, [pc, #8]	@ (8011c9c <raise+0xc>)
 8011c92:	4601      	mov	r1, r0
 8011c94:	6818      	ldr	r0, [r3, #0]
 8011c96:	f7ff bfd3 	b.w	8011c40 <_raise_r>
 8011c9a:	bf00      	nop
 8011c9c:	20000574 	.word	0x20000574

08011ca0 <_kill_r>:
 8011ca0:	b538      	push	{r3, r4, r5, lr}
 8011ca2:	4d07      	ldr	r5, [pc, #28]	@ (8011cc0 <_kill_r+0x20>)
 8011ca4:	2300      	movs	r3, #0
 8011ca6:	4604      	mov	r4, r0
 8011ca8:	4608      	mov	r0, r1
 8011caa:	4611      	mov	r1, r2
 8011cac:	602b      	str	r3, [r5, #0]
 8011cae:	f7f2 fb65 	bl	800437c <_kill>
 8011cb2:	1c43      	adds	r3, r0, #1
 8011cb4:	d102      	bne.n	8011cbc <_kill_r+0x1c>
 8011cb6:	682b      	ldr	r3, [r5, #0]
 8011cb8:	b103      	cbz	r3, 8011cbc <_kill_r+0x1c>
 8011cba:	6023      	str	r3, [r4, #0]
 8011cbc:	bd38      	pop	{r3, r4, r5, pc}
 8011cbe:	bf00      	nop
 8011cc0:	20004b08 	.word	0x20004b08

08011cc4 <_getpid_r>:
 8011cc4:	f7f2 bb52 	b.w	800436c <_getpid>

08011cc8 <_malloc_usable_size_r>:
 8011cc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011ccc:	1f18      	subs	r0, r3, #4
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	bfbc      	itt	lt
 8011cd2:	580b      	ldrlt	r3, [r1, r0]
 8011cd4:	18c0      	addlt	r0, r0, r3
 8011cd6:	4770      	bx	lr

08011cd8 <log10>:
 8011cd8:	b538      	push	{r3, r4, r5, lr}
 8011cda:	ed2d 8b02 	vpush	{d8}
 8011cde:	ec55 4b10 	vmov	r4, r5, d0
 8011ce2:	f000 f839 	bl	8011d58 <__ieee754_log10>
 8011ce6:	4622      	mov	r2, r4
 8011ce8:	462b      	mov	r3, r5
 8011cea:	4620      	mov	r0, r4
 8011cec:	4629      	mov	r1, r5
 8011cee:	eeb0 8a40 	vmov.f32	s16, s0
 8011cf2:	eef0 8a60 	vmov.f32	s17, s1
 8011cf6:	f7ee ff19 	bl	8000b2c <__aeabi_dcmpun>
 8011cfa:	b998      	cbnz	r0, 8011d24 <log10+0x4c>
 8011cfc:	2200      	movs	r2, #0
 8011cfe:	2300      	movs	r3, #0
 8011d00:	4620      	mov	r0, r4
 8011d02:	4629      	mov	r1, r5
 8011d04:	f7ee fef4 	bl	8000af0 <__aeabi_dcmple>
 8011d08:	b160      	cbz	r0, 8011d24 <log10+0x4c>
 8011d0a:	2200      	movs	r2, #0
 8011d0c:	2300      	movs	r3, #0
 8011d0e:	4620      	mov	r0, r4
 8011d10:	4629      	mov	r1, r5
 8011d12:	f7ee fed9 	bl	8000ac8 <__aeabi_dcmpeq>
 8011d16:	b160      	cbz	r0, 8011d32 <log10+0x5a>
 8011d18:	f7fc fd4c 	bl	800e7b4 <__errno>
 8011d1c:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 8011d48 <log10+0x70>
 8011d20:	2322      	movs	r3, #34	@ 0x22
 8011d22:	6003      	str	r3, [r0, #0]
 8011d24:	eeb0 0a48 	vmov.f32	s0, s16
 8011d28:	eef0 0a68 	vmov.f32	s1, s17
 8011d2c:	ecbd 8b02 	vpop	{d8}
 8011d30:	bd38      	pop	{r3, r4, r5, pc}
 8011d32:	f7fc fd3f 	bl	800e7b4 <__errno>
 8011d36:	ecbd 8b02 	vpop	{d8}
 8011d3a:	2321      	movs	r3, #33	@ 0x21
 8011d3c:	6003      	str	r3, [r0, #0]
 8011d3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011d42:	4803      	ldr	r0, [pc, #12]	@ (8011d50 <log10+0x78>)
 8011d44:	f7ff bbd4 	b.w	80114f0 <nan>
 8011d48:	00000000 	.word	0x00000000
 8011d4c:	fff00000 	.word	0xfff00000
 8011d50:	08012e61 	.word	0x08012e61
 8011d54:	00000000 	.word	0x00000000

08011d58 <__ieee754_log10>:
 8011d58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011d5c:	ec55 4b10 	vmov	r4, r5, d0
 8011d60:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 8011d64:	ed2d 8b02 	vpush	{d8}
 8011d68:	462b      	mov	r3, r5
 8011d6a:	da2e      	bge.n	8011dca <__ieee754_log10+0x72>
 8011d6c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8011d70:	4322      	orrs	r2, r4
 8011d72:	d10b      	bne.n	8011d8c <__ieee754_log10+0x34>
 8011d74:	493a      	ldr	r1, [pc, #232]	@ (8011e60 <__ieee754_log10+0x108>)
 8011d76:	2200      	movs	r2, #0
 8011d78:	2300      	movs	r3, #0
 8011d7a:	2000      	movs	r0, #0
 8011d7c:	f7ee fd66 	bl	800084c <__aeabi_ddiv>
 8011d80:	ecbd 8b02 	vpop	{d8}
 8011d84:	ec41 0b10 	vmov	d0, r0, r1
 8011d88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011d8c:	2d00      	cmp	r5, #0
 8011d8e:	da07      	bge.n	8011da0 <__ieee754_log10+0x48>
 8011d90:	4622      	mov	r2, r4
 8011d92:	4620      	mov	r0, r4
 8011d94:	4629      	mov	r1, r5
 8011d96:	f7ee fa77 	bl	8000288 <__aeabi_dsub>
 8011d9a:	2200      	movs	r2, #0
 8011d9c:	2300      	movs	r3, #0
 8011d9e:	e7ed      	b.n	8011d7c <__ieee754_log10+0x24>
 8011da0:	4b30      	ldr	r3, [pc, #192]	@ (8011e64 <__ieee754_log10+0x10c>)
 8011da2:	2200      	movs	r2, #0
 8011da4:	4620      	mov	r0, r4
 8011da6:	4629      	mov	r1, r5
 8011da8:	f7ee fc26 	bl	80005f8 <__aeabi_dmul>
 8011dac:	f06f 0235 	mvn.w	r2, #53	@ 0x35
 8011db0:	4604      	mov	r4, r0
 8011db2:	460d      	mov	r5, r1
 8011db4:	460b      	mov	r3, r1
 8011db6:	492c      	ldr	r1, [pc, #176]	@ (8011e68 <__ieee754_log10+0x110>)
 8011db8:	428b      	cmp	r3, r1
 8011dba:	dd08      	ble.n	8011dce <__ieee754_log10+0x76>
 8011dbc:	4622      	mov	r2, r4
 8011dbe:	462b      	mov	r3, r5
 8011dc0:	4620      	mov	r0, r4
 8011dc2:	4629      	mov	r1, r5
 8011dc4:	f7ee fa62 	bl	800028c <__adddf3>
 8011dc8:	e7da      	b.n	8011d80 <__ieee754_log10+0x28>
 8011dca:	2200      	movs	r2, #0
 8011dcc:	e7f3      	b.n	8011db6 <__ieee754_log10+0x5e>
 8011dce:	1518      	asrs	r0, r3, #20
 8011dd0:	f2a0 30ff 	subw	r0, r0, #1023	@ 0x3ff
 8011dd4:	4410      	add	r0, r2
 8011dd6:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 8011dda:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8011dde:	f3c3 0813 	ubfx	r8, r3, #0, #20
 8011de2:	f7ee fb9f 	bl	8000524 <__aeabi_i2d>
 8011de6:	f5c9 737f 	rsb	r3, r9, #1020	@ 0x3fc
 8011dea:	3303      	adds	r3, #3
 8011dec:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 8011df0:	a315      	add	r3, pc, #84	@ (adr r3, 8011e48 <__ieee754_log10+0xf0>)
 8011df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011df6:	ec45 4b18 	vmov	d8, r4, r5
 8011dfa:	4606      	mov	r6, r0
 8011dfc:	460f      	mov	r7, r1
 8011dfe:	f7ee fbfb 	bl	80005f8 <__aeabi_dmul>
 8011e02:	eeb0 0a48 	vmov.f32	s0, s16
 8011e06:	eef0 0a68 	vmov.f32	s1, s17
 8011e0a:	4604      	mov	r4, r0
 8011e0c:	460d      	mov	r5, r1
 8011e0e:	f000 f82f 	bl	8011e70 <__ieee754_log>
 8011e12:	a30f      	add	r3, pc, #60	@ (adr r3, 8011e50 <__ieee754_log10+0xf8>)
 8011e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e18:	ec51 0b10 	vmov	r0, r1, d0
 8011e1c:	f7ee fbec 	bl	80005f8 <__aeabi_dmul>
 8011e20:	4622      	mov	r2, r4
 8011e22:	462b      	mov	r3, r5
 8011e24:	f7ee fa32 	bl	800028c <__adddf3>
 8011e28:	a30b      	add	r3, pc, #44	@ (adr r3, 8011e58 <__ieee754_log10+0x100>)
 8011e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e2e:	4604      	mov	r4, r0
 8011e30:	460d      	mov	r5, r1
 8011e32:	4630      	mov	r0, r6
 8011e34:	4639      	mov	r1, r7
 8011e36:	f7ee fbdf 	bl	80005f8 <__aeabi_dmul>
 8011e3a:	4602      	mov	r2, r0
 8011e3c:	460b      	mov	r3, r1
 8011e3e:	4620      	mov	r0, r4
 8011e40:	4629      	mov	r1, r5
 8011e42:	e7bf      	b.n	8011dc4 <__ieee754_log10+0x6c>
 8011e44:	f3af 8000 	nop.w
 8011e48:	11f12b36 	.word	0x11f12b36
 8011e4c:	3d59fef3 	.word	0x3d59fef3
 8011e50:	1526e50e 	.word	0x1526e50e
 8011e54:	3fdbcb7b 	.word	0x3fdbcb7b
 8011e58:	509f6000 	.word	0x509f6000
 8011e5c:	3fd34413 	.word	0x3fd34413
 8011e60:	c3500000 	.word	0xc3500000
 8011e64:	43500000 	.word	0x43500000
 8011e68:	7fefffff 	.word	0x7fefffff
 8011e6c:	00000000 	.word	0x00000000

08011e70 <__ieee754_log>:
 8011e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e74:	ec51 0b10 	vmov	r0, r1, d0
 8011e78:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8011e7c:	b087      	sub	sp, #28
 8011e7e:	460d      	mov	r5, r1
 8011e80:	da26      	bge.n	8011ed0 <__ieee754_log+0x60>
 8011e82:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8011e86:	4303      	orrs	r3, r0
 8011e88:	4602      	mov	r2, r0
 8011e8a:	d10a      	bne.n	8011ea2 <__ieee754_log+0x32>
 8011e8c:	49ce      	ldr	r1, [pc, #824]	@ (80121c8 <__ieee754_log+0x358>)
 8011e8e:	2200      	movs	r2, #0
 8011e90:	2300      	movs	r3, #0
 8011e92:	2000      	movs	r0, #0
 8011e94:	f7ee fcda 	bl	800084c <__aeabi_ddiv>
 8011e98:	ec41 0b10 	vmov	d0, r0, r1
 8011e9c:	b007      	add	sp, #28
 8011e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ea2:	2900      	cmp	r1, #0
 8011ea4:	da05      	bge.n	8011eb2 <__ieee754_log+0x42>
 8011ea6:	460b      	mov	r3, r1
 8011ea8:	f7ee f9ee 	bl	8000288 <__aeabi_dsub>
 8011eac:	2200      	movs	r2, #0
 8011eae:	2300      	movs	r3, #0
 8011eb0:	e7f0      	b.n	8011e94 <__ieee754_log+0x24>
 8011eb2:	4bc6      	ldr	r3, [pc, #792]	@ (80121cc <__ieee754_log+0x35c>)
 8011eb4:	2200      	movs	r2, #0
 8011eb6:	f7ee fb9f 	bl	80005f8 <__aeabi_dmul>
 8011eba:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 8011ebe:	460d      	mov	r5, r1
 8011ec0:	4ac3      	ldr	r2, [pc, #780]	@ (80121d0 <__ieee754_log+0x360>)
 8011ec2:	4295      	cmp	r5, r2
 8011ec4:	dd06      	ble.n	8011ed4 <__ieee754_log+0x64>
 8011ec6:	4602      	mov	r2, r0
 8011ec8:	460b      	mov	r3, r1
 8011eca:	f7ee f9df 	bl	800028c <__adddf3>
 8011ece:	e7e3      	b.n	8011e98 <__ieee754_log+0x28>
 8011ed0:	2300      	movs	r3, #0
 8011ed2:	e7f5      	b.n	8011ec0 <__ieee754_log+0x50>
 8011ed4:	152c      	asrs	r4, r5, #20
 8011ed6:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 8011eda:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8011ede:	441c      	add	r4, r3
 8011ee0:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 8011ee4:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 8011ee8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8011eec:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 8011ef0:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 8011ef4:	ea42 0105 	orr.w	r1, r2, r5
 8011ef8:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8011efc:	2200      	movs	r2, #0
 8011efe:	4bb5      	ldr	r3, [pc, #724]	@ (80121d4 <__ieee754_log+0x364>)
 8011f00:	f7ee f9c2 	bl	8000288 <__aeabi_dsub>
 8011f04:	1cab      	adds	r3, r5, #2
 8011f06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011f0a:	2b02      	cmp	r3, #2
 8011f0c:	4682      	mov	sl, r0
 8011f0e:	468b      	mov	fp, r1
 8011f10:	f04f 0200 	mov.w	r2, #0
 8011f14:	dc53      	bgt.n	8011fbe <__ieee754_log+0x14e>
 8011f16:	2300      	movs	r3, #0
 8011f18:	f7ee fdd6 	bl	8000ac8 <__aeabi_dcmpeq>
 8011f1c:	b1d0      	cbz	r0, 8011f54 <__ieee754_log+0xe4>
 8011f1e:	2c00      	cmp	r4, #0
 8011f20:	f000 8120 	beq.w	8012164 <__ieee754_log+0x2f4>
 8011f24:	4620      	mov	r0, r4
 8011f26:	f7ee fafd 	bl	8000524 <__aeabi_i2d>
 8011f2a:	a391      	add	r3, pc, #580	@ (adr r3, 8012170 <__ieee754_log+0x300>)
 8011f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f30:	4606      	mov	r6, r0
 8011f32:	460f      	mov	r7, r1
 8011f34:	f7ee fb60 	bl	80005f8 <__aeabi_dmul>
 8011f38:	a38f      	add	r3, pc, #572	@ (adr r3, 8012178 <__ieee754_log+0x308>)
 8011f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f3e:	4604      	mov	r4, r0
 8011f40:	460d      	mov	r5, r1
 8011f42:	4630      	mov	r0, r6
 8011f44:	4639      	mov	r1, r7
 8011f46:	f7ee fb57 	bl	80005f8 <__aeabi_dmul>
 8011f4a:	4602      	mov	r2, r0
 8011f4c:	460b      	mov	r3, r1
 8011f4e:	4620      	mov	r0, r4
 8011f50:	4629      	mov	r1, r5
 8011f52:	e7ba      	b.n	8011eca <__ieee754_log+0x5a>
 8011f54:	a38a      	add	r3, pc, #552	@ (adr r3, 8012180 <__ieee754_log+0x310>)
 8011f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f5a:	4650      	mov	r0, sl
 8011f5c:	4659      	mov	r1, fp
 8011f5e:	f7ee fb4b 	bl	80005f8 <__aeabi_dmul>
 8011f62:	4602      	mov	r2, r0
 8011f64:	460b      	mov	r3, r1
 8011f66:	2000      	movs	r0, #0
 8011f68:	499b      	ldr	r1, [pc, #620]	@ (80121d8 <__ieee754_log+0x368>)
 8011f6a:	f7ee f98d 	bl	8000288 <__aeabi_dsub>
 8011f6e:	4652      	mov	r2, sl
 8011f70:	4606      	mov	r6, r0
 8011f72:	460f      	mov	r7, r1
 8011f74:	465b      	mov	r3, fp
 8011f76:	4650      	mov	r0, sl
 8011f78:	4659      	mov	r1, fp
 8011f7a:	f7ee fb3d 	bl	80005f8 <__aeabi_dmul>
 8011f7e:	4602      	mov	r2, r0
 8011f80:	460b      	mov	r3, r1
 8011f82:	4630      	mov	r0, r6
 8011f84:	4639      	mov	r1, r7
 8011f86:	f7ee fb37 	bl	80005f8 <__aeabi_dmul>
 8011f8a:	4606      	mov	r6, r0
 8011f8c:	460f      	mov	r7, r1
 8011f8e:	b914      	cbnz	r4, 8011f96 <__ieee754_log+0x126>
 8011f90:	4632      	mov	r2, r6
 8011f92:	463b      	mov	r3, r7
 8011f94:	e0a0      	b.n	80120d8 <__ieee754_log+0x268>
 8011f96:	4620      	mov	r0, r4
 8011f98:	f7ee fac4 	bl	8000524 <__aeabi_i2d>
 8011f9c:	a374      	add	r3, pc, #464	@ (adr r3, 8012170 <__ieee754_log+0x300>)
 8011f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fa2:	4680      	mov	r8, r0
 8011fa4:	4689      	mov	r9, r1
 8011fa6:	f7ee fb27 	bl	80005f8 <__aeabi_dmul>
 8011faa:	a373      	add	r3, pc, #460	@ (adr r3, 8012178 <__ieee754_log+0x308>)
 8011fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fb0:	4604      	mov	r4, r0
 8011fb2:	460d      	mov	r5, r1
 8011fb4:	4640      	mov	r0, r8
 8011fb6:	4649      	mov	r1, r9
 8011fb8:	f7ee fb1e 	bl	80005f8 <__aeabi_dmul>
 8011fbc:	e0a5      	b.n	801210a <__ieee754_log+0x29a>
 8011fbe:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8011fc2:	f7ee f963 	bl	800028c <__adddf3>
 8011fc6:	4602      	mov	r2, r0
 8011fc8:	460b      	mov	r3, r1
 8011fca:	4650      	mov	r0, sl
 8011fcc:	4659      	mov	r1, fp
 8011fce:	f7ee fc3d 	bl	800084c <__aeabi_ddiv>
 8011fd2:	e9cd 0100 	strd	r0, r1, [sp]
 8011fd6:	4620      	mov	r0, r4
 8011fd8:	f7ee faa4 	bl	8000524 <__aeabi_i2d>
 8011fdc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011fe0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011fe4:	4610      	mov	r0, r2
 8011fe6:	4619      	mov	r1, r3
 8011fe8:	f7ee fb06 	bl	80005f8 <__aeabi_dmul>
 8011fec:	4602      	mov	r2, r0
 8011fee:	460b      	mov	r3, r1
 8011ff0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011ff4:	f7ee fb00 	bl	80005f8 <__aeabi_dmul>
 8011ff8:	a363      	add	r3, pc, #396	@ (adr r3, 8012188 <__ieee754_log+0x318>)
 8011ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ffe:	4680      	mov	r8, r0
 8012000:	4689      	mov	r9, r1
 8012002:	f7ee faf9 	bl	80005f8 <__aeabi_dmul>
 8012006:	a362      	add	r3, pc, #392	@ (adr r3, 8012190 <__ieee754_log+0x320>)
 8012008:	e9d3 2300 	ldrd	r2, r3, [r3]
 801200c:	f7ee f93e 	bl	800028c <__adddf3>
 8012010:	4642      	mov	r2, r8
 8012012:	464b      	mov	r3, r9
 8012014:	f7ee faf0 	bl	80005f8 <__aeabi_dmul>
 8012018:	a35f      	add	r3, pc, #380	@ (adr r3, 8012198 <__ieee754_log+0x328>)
 801201a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801201e:	f7ee f935 	bl	800028c <__adddf3>
 8012022:	4642      	mov	r2, r8
 8012024:	464b      	mov	r3, r9
 8012026:	f7ee fae7 	bl	80005f8 <__aeabi_dmul>
 801202a:	a35d      	add	r3, pc, #372	@ (adr r3, 80121a0 <__ieee754_log+0x330>)
 801202c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012030:	f7ee f92c 	bl	800028c <__adddf3>
 8012034:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012038:	f7ee fade 	bl	80005f8 <__aeabi_dmul>
 801203c:	a35a      	add	r3, pc, #360	@ (adr r3, 80121a8 <__ieee754_log+0x338>)
 801203e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012042:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012046:	4640      	mov	r0, r8
 8012048:	4649      	mov	r1, r9
 801204a:	f7ee fad5 	bl	80005f8 <__aeabi_dmul>
 801204e:	a358      	add	r3, pc, #352	@ (adr r3, 80121b0 <__ieee754_log+0x340>)
 8012050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012054:	f7ee f91a 	bl	800028c <__adddf3>
 8012058:	4642      	mov	r2, r8
 801205a:	464b      	mov	r3, r9
 801205c:	f7ee facc 	bl	80005f8 <__aeabi_dmul>
 8012060:	a355      	add	r3, pc, #340	@ (adr r3, 80121b8 <__ieee754_log+0x348>)
 8012062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012066:	f7ee f911 	bl	800028c <__adddf3>
 801206a:	4642      	mov	r2, r8
 801206c:	464b      	mov	r3, r9
 801206e:	f7ee fac3 	bl	80005f8 <__aeabi_dmul>
 8012072:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 8012076:	4602      	mov	r2, r0
 8012078:	460b      	mov	r3, r1
 801207a:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 801207e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012082:	f7ee f903 	bl	800028c <__adddf3>
 8012086:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 801208a:	3551      	adds	r5, #81	@ 0x51
 801208c:	4335      	orrs	r5, r6
 801208e:	2d00      	cmp	r5, #0
 8012090:	4680      	mov	r8, r0
 8012092:	4689      	mov	r9, r1
 8012094:	dd48      	ble.n	8012128 <__ieee754_log+0x2b8>
 8012096:	4b50      	ldr	r3, [pc, #320]	@ (80121d8 <__ieee754_log+0x368>)
 8012098:	2200      	movs	r2, #0
 801209a:	4650      	mov	r0, sl
 801209c:	4659      	mov	r1, fp
 801209e:	f7ee faab 	bl	80005f8 <__aeabi_dmul>
 80120a2:	4652      	mov	r2, sl
 80120a4:	465b      	mov	r3, fp
 80120a6:	f7ee faa7 	bl	80005f8 <__aeabi_dmul>
 80120aa:	4602      	mov	r2, r0
 80120ac:	460b      	mov	r3, r1
 80120ae:	4606      	mov	r6, r0
 80120b0:	460f      	mov	r7, r1
 80120b2:	4640      	mov	r0, r8
 80120b4:	4649      	mov	r1, r9
 80120b6:	f7ee f8e9 	bl	800028c <__adddf3>
 80120ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80120be:	f7ee fa9b 	bl	80005f8 <__aeabi_dmul>
 80120c2:	4680      	mov	r8, r0
 80120c4:	4689      	mov	r9, r1
 80120c6:	b964      	cbnz	r4, 80120e2 <__ieee754_log+0x272>
 80120c8:	4602      	mov	r2, r0
 80120ca:	460b      	mov	r3, r1
 80120cc:	4630      	mov	r0, r6
 80120ce:	4639      	mov	r1, r7
 80120d0:	f7ee f8da 	bl	8000288 <__aeabi_dsub>
 80120d4:	4602      	mov	r2, r0
 80120d6:	460b      	mov	r3, r1
 80120d8:	4650      	mov	r0, sl
 80120da:	4659      	mov	r1, fp
 80120dc:	f7ee f8d4 	bl	8000288 <__aeabi_dsub>
 80120e0:	e6da      	b.n	8011e98 <__ieee754_log+0x28>
 80120e2:	a323      	add	r3, pc, #140	@ (adr r3, 8012170 <__ieee754_log+0x300>)
 80120e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80120ec:	f7ee fa84 	bl	80005f8 <__aeabi_dmul>
 80120f0:	a321      	add	r3, pc, #132	@ (adr r3, 8012178 <__ieee754_log+0x308>)
 80120f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120f6:	4604      	mov	r4, r0
 80120f8:	460d      	mov	r5, r1
 80120fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80120fe:	f7ee fa7b 	bl	80005f8 <__aeabi_dmul>
 8012102:	4642      	mov	r2, r8
 8012104:	464b      	mov	r3, r9
 8012106:	f7ee f8c1 	bl	800028c <__adddf3>
 801210a:	4602      	mov	r2, r0
 801210c:	460b      	mov	r3, r1
 801210e:	4630      	mov	r0, r6
 8012110:	4639      	mov	r1, r7
 8012112:	f7ee f8b9 	bl	8000288 <__aeabi_dsub>
 8012116:	4652      	mov	r2, sl
 8012118:	465b      	mov	r3, fp
 801211a:	f7ee f8b5 	bl	8000288 <__aeabi_dsub>
 801211e:	4602      	mov	r2, r0
 8012120:	460b      	mov	r3, r1
 8012122:	4620      	mov	r0, r4
 8012124:	4629      	mov	r1, r5
 8012126:	e7d9      	b.n	80120dc <__ieee754_log+0x26c>
 8012128:	4602      	mov	r2, r0
 801212a:	460b      	mov	r3, r1
 801212c:	4650      	mov	r0, sl
 801212e:	4659      	mov	r1, fp
 8012130:	f7ee f8aa 	bl	8000288 <__aeabi_dsub>
 8012134:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012138:	f7ee fa5e 	bl	80005f8 <__aeabi_dmul>
 801213c:	4606      	mov	r6, r0
 801213e:	460f      	mov	r7, r1
 8012140:	2c00      	cmp	r4, #0
 8012142:	f43f af25 	beq.w	8011f90 <__ieee754_log+0x120>
 8012146:	a30a      	add	r3, pc, #40	@ (adr r3, 8012170 <__ieee754_log+0x300>)
 8012148:	e9d3 2300 	ldrd	r2, r3, [r3]
 801214c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012150:	f7ee fa52 	bl	80005f8 <__aeabi_dmul>
 8012154:	a308      	add	r3, pc, #32	@ (adr r3, 8012178 <__ieee754_log+0x308>)
 8012156:	e9d3 2300 	ldrd	r2, r3, [r3]
 801215a:	4604      	mov	r4, r0
 801215c:	460d      	mov	r5, r1
 801215e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012162:	e729      	b.n	8011fb8 <__ieee754_log+0x148>
 8012164:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 80121c0 <__ieee754_log+0x350>
 8012168:	e698      	b.n	8011e9c <__ieee754_log+0x2c>
 801216a:	bf00      	nop
 801216c:	f3af 8000 	nop.w
 8012170:	fee00000 	.word	0xfee00000
 8012174:	3fe62e42 	.word	0x3fe62e42
 8012178:	35793c76 	.word	0x35793c76
 801217c:	3dea39ef 	.word	0x3dea39ef
 8012180:	55555555 	.word	0x55555555
 8012184:	3fd55555 	.word	0x3fd55555
 8012188:	df3e5244 	.word	0xdf3e5244
 801218c:	3fc2f112 	.word	0x3fc2f112
 8012190:	96cb03de 	.word	0x96cb03de
 8012194:	3fc74664 	.word	0x3fc74664
 8012198:	94229359 	.word	0x94229359
 801219c:	3fd24924 	.word	0x3fd24924
 80121a0:	55555593 	.word	0x55555593
 80121a4:	3fe55555 	.word	0x3fe55555
 80121a8:	d078c69f 	.word	0xd078c69f
 80121ac:	3fc39a09 	.word	0x3fc39a09
 80121b0:	1d8e78af 	.word	0x1d8e78af
 80121b4:	3fcc71c5 	.word	0x3fcc71c5
 80121b8:	9997fa04 	.word	0x9997fa04
 80121bc:	3fd99999 	.word	0x3fd99999
	...
 80121c8:	c3500000 	.word	0xc3500000
 80121cc:	43500000 	.word	0x43500000
 80121d0:	7fefffff 	.word	0x7fefffff
 80121d4:	3ff00000 	.word	0x3ff00000
 80121d8:	3fe00000 	.word	0x3fe00000

080121dc <_init>:
 80121dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121de:	bf00      	nop
 80121e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80121e2:	bc08      	pop	{r3}
 80121e4:	469e      	mov	lr, r3
 80121e6:	4770      	bx	lr

080121e8 <_fini>:
 80121e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121ea:	bf00      	nop
 80121ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80121ee:	bc08      	pop	{r3}
 80121f0:	469e      	mov	lr, r3
 80121f2:	4770      	bx	lr
