
WiFi_Client_Server.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c580  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d7c  0800c710  0800c710  0000d710  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d48c  0800d48c  0000f21c  2**0
                  CONTENTS
  4 .ARM          00000008  0800d48c  0800d48c  0000e48c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d494  0800d494  0000f21c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d494  0800d494  0000e494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d498  0800d498  0000e498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000021c  20000000  0800d49c  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  0000f21c  2**0
                  CONTENTS
 10 .bss          00000bc4  2000021c  2000021c  0000f21c  2**2
                  ALLOC
 11 ._user_heap_stack 00017000  20000de0  20000de0  0000f21c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f21c  2**0
                  CONTENTS, READONLY
 13 .debug_line   00017d73  00000000  00000000  0000f24c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 000000bb  00000000  00000000  00026fbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   000142f9  00000000  00000000  0002707a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00002d5b  00000000  00000000  0003b373  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001320  00000000  00000000  0003e0d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2870  00000000  00000000  0003f3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000ed0  00000000  00000000  00131c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00028a6f  00000000  00000000  00132b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0015b59f  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000066f8  00000000  00000000  0015b5e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000021c 	.word	0x2000021c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c6f8 	.word	0x0800c6f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000220 	.word	0x20000220
 80001cc:	0800c6f8 	.word	0x0800c6f8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000fe4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800101c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fe8:	f002 f9fc 	bl	80033e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fec:	480c      	ldr	r0, [pc, #48]	@ (8001020 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fee:	490d      	ldr	r1, [pc, #52]	@ (8001024 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ff0:	4a0d      	ldr	r2, [pc, #52]	@ (8001028 <LoopForever+0xe>)
  movs r3, #0
 8000ff2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ff4:	e002      	b.n	8000ffc <LoopCopyDataInit>

08000ff6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ff6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ff8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ffa:	3304      	adds	r3, #4

08000ffc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ffc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ffe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001000:	d3f9      	bcc.n	8000ff6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001002:	4a0a      	ldr	r2, [pc, #40]	@ (800102c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001004:	4c0a      	ldr	r4, [pc, #40]	@ (8001030 <LoopForever+0x16>)
  movs r3, #0
 8001006:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001008:	e001      	b.n	800100e <LoopFillZerobss>

0800100a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800100a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800100c:	3204      	adds	r2, #4

0800100e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800100e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001010:	d3fb      	bcc.n	800100a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001012:	f008 f899 	bl	8009148 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001016:	f000 f80f 	bl	8001038 <main>

0800101a <LoopForever>:

LoopForever:
    b LoopForever
 800101a:	e7fe      	b.n	800101a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800101c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001020:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001024:	2000021c 	.word	0x2000021c
  ldr r2, =_sidata
 8001028:	0800d49c 	.word	0x0800d49c
  ldr r2, =_sbss
 800102c:	2000021c 	.word	0x2000021c
  ldr r4, =_ebss
 8001030:	20000de0 	.word	0x20000de0

08001034 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001034:	e7fe      	b.n	8001034 <ADC1_2_IRQHandler>
	...

08001038 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8001038:	b5b0      	push	{r4, r5, r7, lr}
 800103a:	f5ad 5d1d 	sub.w	sp, sp, #10048	@ 0x2740
 800103e:	b086      	sub	sp, #24
 8001040:	af04      	add	r7, sp, #16
  uint8_t  MAC_Addr[6] = {0};
 8001042:	2300      	movs	r3, #0
 8001044:	f507 521c 	add.w	r2, r7, #9984	@ 0x2700
 8001048:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 800104c:	6013      	str	r3, [r2, #0]
 800104e:	2300      	movs	r3, #0
 8001050:	f507 521c 	add.w	r2, r7, #9984	@ 0x2700
 8001054:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 8001058:	8013      	strh	r3, [r2, #0]
  uint8_t  IP_Addr[4] = {0};
 800105a:	2300      	movs	r3, #0
 800105c:	f507 521c 	add.w	r2, r7, #9984	@ 0x2700
 8001060:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8001064:	6013      	str	r3, [r2, #0]
  uint8_t TxData[] = "STM32 : Hello!\n";
 8001066:	4ba6      	ldr	r3, [pc, #664]	@ (8001300 <main+0x2c8>)
 8001068:	f507 541c 	add.w	r4, r7, #9984	@ 0x2700
 800106c:	f104 0420 	add.w	r4, r4, #32
 8001070:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001072:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  int32_t Socket = -1;
 8001076:	f04f 33ff 	mov.w	r3, #4294967295
 800107a:	f507 521d 	add.w	r2, r7, #10048	@ 0x2740
 800107e:	f102 0204 	add.w	r2, r2, #4
 8001082:	6013      	str	r3, [r2, #0]
  uint16_t Datalen;
  int32_t ret;
  int16_t Trials = CONNECTION_TRIAL_MAX;
 8001084:	230a      	movs	r3, #10
 8001086:	f507 521d 	add.w	r2, r7, #10048	@ 0x2740
 800108a:	f102 0202 	add.w	r2, r2, #2
 800108e:	8013      	strh	r3, [r2, #0]

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001090:	f002 f9de 	bl	8003450 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8001094:	f000 f9c6 	bl	8001424 <SystemClock_Config>
  /* Configure LED2 */
  BSP_LED_Init(LED2);
 8001098:	2000      	movs	r0, #0
 800109a:	f001 fe35 	bl	8002d08 <BSP_LED_Init>
  BSP_COM_Init(COM1, &hDiscoUart);
 800109e:	4999      	ldr	r1, [pc, #612]	@ (8001304 <main+0x2cc>)
 80010a0:	2000      	movs	r0, #0
 80010a2:	f001 fe77 	bl	8002d94 <BSP_COM_Init>

#if defined (TERMINAL_USE)
  /* Initialize all configured peripherals */
  hDiscoUart.Instance = DISCOVERY_COM1;
 80010a6:	4b97      	ldr	r3, [pc, #604]	@ (8001304 <main+0x2cc>)
 80010a8:	4a97      	ldr	r2, [pc, #604]	@ (8001308 <main+0x2d0>)
 80010aa:	601a      	str	r2, [r3, #0]
  hDiscoUart.Init.BaudRate = 115200;
 80010ac:	4b95      	ldr	r3, [pc, #596]	@ (8001304 <main+0x2cc>)
 80010ae:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010b2:	605a      	str	r2, [r3, #4]
  hDiscoUart.Init.WordLength = UART_WORDLENGTH_8B;
 80010b4:	4b93      	ldr	r3, [pc, #588]	@ (8001304 <main+0x2cc>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	609a      	str	r2, [r3, #8]
  hDiscoUart.Init.StopBits = UART_STOPBITS_1;
 80010ba:	4b92      	ldr	r3, [pc, #584]	@ (8001304 <main+0x2cc>)
 80010bc:	2200      	movs	r2, #0
 80010be:	60da      	str	r2, [r3, #12]
  hDiscoUart.Init.Parity = UART_PARITY_NONE;
 80010c0:	4b90      	ldr	r3, [pc, #576]	@ (8001304 <main+0x2cc>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	611a      	str	r2, [r3, #16]
  hDiscoUart.Init.Mode = UART_MODE_TX_RX;
 80010c6:	4b8f      	ldr	r3, [pc, #572]	@ (8001304 <main+0x2cc>)
 80010c8:	220c      	movs	r2, #12
 80010ca:	615a      	str	r2, [r3, #20]
  hDiscoUart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010cc:	4b8d      	ldr	r3, [pc, #564]	@ (8001304 <main+0x2cc>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	619a      	str	r2, [r3, #24]
  hDiscoUart.Init.OverSampling = UART_OVERSAMPLING_16;
 80010d2:	4b8c      	ldr	r3, [pc, #560]	@ (8001304 <main+0x2cc>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	61da      	str	r2, [r3, #28]
  hDiscoUart.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010d8:	4b8a      	ldr	r3, [pc, #552]	@ (8001304 <main+0x2cc>)
 80010da:	2200      	movs	r2, #0
 80010dc:	621a      	str	r2, [r3, #32]
  hDiscoUart.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010de:	4b89      	ldr	r3, [pc, #548]	@ (8001304 <main+0x2cc>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	625a      	str	r2, [r3, #36]	@ 0x24

  BSP_COM_Init(COM1, &hDiscoUart);
 80010e4:	4987      	ldr	r1, [pc, #540]	@ (8001304 <main+0x2cc>)
 80010e6:	2000      	movs	r0, #0
 80010e8:	f001 fe54 	bl	8002d94 <BSP_COM_Init>
#endif /* TERMINAL_USE */

  TERMOUT("****** WIFI Module in TCP Client mode demonstration ****** \n\n");
 80010ec:	4887      	ldr	r0, [pc, #540]	@ (800130c <main+0x2d4>)
 80010ee:	f007 fe07 	bl	8008d00 <puts>
  TERMOUT("TCP Client Instructions :\n");
 80010f2:	4887      	ldr	r0, [pc, #540]	@ (8001310 <main+0x2d8>)
 80010f4:	f007 fe04 	bl	8008d00 <puts>
  TERMOUT("1- Make sure your Phone is connected to the same network that\n");
 80010f8:	4886      	ldr	r0, [pc, #536]	@ (8001314 <main+0x2dc>)
 80010fa:	f007 fe01 	bl	8008d00 <puts>
  TERMOUT("   you configured using the Configuration Access Point.\n");
 80010fe:	4886      	ldr	r0, [pc, #536]	@ (8001318 <main+0x2e0>)
 8001100:	f007 fdfe 	bl	8008d00 <puts>
  TERMOUT("2- Create a server by using the android application TCP Server\n");
 8001104:	4885      	ldr	r0, [pc, #532]	@ (800131c <main+0x2e4>)
 8001106:	f007 fdfb 	bl	8008d00 <puts>
  TERMOUT("   with port(8002).\n");
 800110a:	4885      	ldr	r0, [pc, #532]	@ (8001320 <main+0x2e8>)
 800110c:	f007 fdf8 	bl	8008d00 <puts>
  TERMOUT("3- Get the Network Name or IP Address of your Android from the step 2.\n\n");
 8001110:	4884      	ldr	r0, [pc, #528]	@ (8001324 <main+0x2ec>)
 8001112:	f007 fdf5 	bl	8008d00 <puts>



  /*Initialize  WIFI module */
  if(WIFI_Init() ==  WIFI_STATUS_OK)
 8001116:	f001 fd07 	bl	8002b28 <WIFI_Init>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	f040 80cc 	bne.w	80012ba <main+0x282>
  {
    TERMOUT("> WIFI Module Initialized.\n");
 8001122:	4881      	ldr	r0, [pc, #516]	@ (8001328 <main+0x2f0>)
 8001124:	f007 fdec 	bl	8008d00 <puts>
    if(WIFI_GetMAC_Address(MAC_Addr, sizeof(MAC_Addr)) == WIFI_STATUS_OK)
 8001128:	f507 531c 	add.w	r3, r7, #9984	@ 0x2700
 800112c:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8001130:	2106      	movs	r1, #6
 8001132:	4618      	mov	r0, r3
 8001134:	f001 fd46 	bl	8002bc4 <WIFI_GetMAC_Address>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d12a      	bne.n	8001194 <main+0x15c>
    {
      TERMOUT("> es-wifi module MAC Address : %X:%X:%X:%X:%X:%X\n",
 800113e:	f507 531c 	add.w	r3, r7, #9984	@ 0x2700
 8001142:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	4618      	mov	r0, r3
 800114a:	f507 531c 	add.w	r3, r7, #9984	@ 0x2700
 800114e:	f103 0335 	add.w	r3, r3, #53	@ 0x35
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	461c      	mov	r4, r3
 8001156:	f507 531c 	add.w	r3, r7, #9984	@ 0x2700
 800115a:	f103 0336 	add.w	r3, r3, #54	@ 0x36
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	461d      	mov	r5, r3
 8001162:	f507 531c 	add.w	r3, r7, #9984	@ 0x2700
 8001166:	f103 0337 	add.w	r3, r3, #55	@ 0x37
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	f507 521c 	add.w	r2, r7, #9984	@ 0x2700
 8001170:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 8001174:	7812      	ldrb	r2, [r2, #0]
 8001176:	f507 511c 	add.w	r1, r7, #9984	@ 0x2700
 800117a:	f101 0139 	add.w	r1, r1, #57	@ 0x39
 800117e:	7809      	ldrb	r1, [r1, #0]
 8001180:	9102      	str	r1, [sp, #8]
 8001182:	9201      	str	r2, [sp, #4]
 8001184:	9300      	str	r3, [sp, #0]
 8001186:	462b      	mov	r3, r5
 8001188:	4622      	mov	r2, r4
 800118a:	4601      	mov	r1, r0
 800118c:	4867      	ldr	r0, [pc, #412]	@ (800132c <main+0x2f4>)
 800118e:	f007 fd4f 	bl	8008c30 <iprintf>
 8001192:	e005      	b.n	80011a0 <main+0x168>
               MAC_Addr[4],
               MAC_Addr[5]);
    }
    else
    {
      TERMOUT("> ERROR : CANNOT get MAC address\n");
 8001194:	4866      	ldr	r0, [pc, #408]	@ (8001330 <main+0x2f8>)
 8001196:	f007 fdb3 	bl	8008d00 <puts>
      BSP_LED_On(LED2);
 800119a:	2000      	movs	r0, #0
 800119c:	f001 fde4 	bl	8002d68 <BSP_LED_On>
    }

    if( WIFI_Connect(SSID, PASSWORD, WIFI_ECN_WPA2_PSK) == WIFI_STATUS_OK)
 80011a0:	2203      	movs	r2, #3
 80011a2:	4964      	ldr	r1, [pc, #400]	@ (8001334 <main+0x2fc>)
 80011a4:	4864      	ldr	r0, [pc, #400]	@ (8001338 <main+0x300>)
 80011a6:	f001 fceb 	bl	8002b80 <WIFI_Connect>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d17d      	bne.n	80012ac <main+0x274>
    {
      TERMOUT("> es-wifi module connected \n");
 80011b0:	4862      	ldr	r0, [pc, #392]	@ (800133c <main+0x304>)
 80011b2:	f007 fda5 	bl	8008d00 <puts>
      if(WIFI_GetIP_Address(IP_Addr, sizeof(IP_Addr)) == WIFI_STATUS_OK)
 80011b6:	f507 531c 	add.w	r3, r7, #9984	@ 0x2700
 80011ba:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 80011be:	2104      	movs	r1, #4
 80011c0:	4618      	mov	r0, r3
 80011c2:	f001 fd1f 	bl	8002c04 <WIFI_GetIP_Address>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d168      	bne.n	800129e <main+0x266>
      {
        TERMOUT("> es-wifi module got IP Address : %d.%d.%d.%d\n",
 80011cc:	f507 531c 	add.w	r3, r7, #9984	@ 0x2700
 80011d0:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	4619      	mov	r1, r3
 80011d8:	f507 531c 	add.w	r3, r7, #9984	@ 0x2700
 80011dc:	f103 0331 	add.w	r3, r3, #49	@ 0x31
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	461a      	mov	r2, r3
 80011e4:	f507 531c 	add.w	r3, r7, #9984	@ 0x2700
 80011e8:	f103 0332 	add.w	r3, r3, #50	@ 0x32
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f507 531c 	add.w	r3, r7, #9984	@ 0x2700
 80011f4:	f103 0333 	add.w	r3, r3, #51	@ 0x33
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	9300      	str	r3, [sp, #0]
 80011fc:	4603      	mov	r3, r0
 80011fe:	4850      	ldr	r0, [pc, #320]	@ (8001340 <main+0x308>)
 8001200:	f007 fd16 	bl	8008c30 <iprintf>
               IP_Addr[0],
               IP_Addr[1],
               IP_Addr[2],
               IP_Addr[3]);

        TERMOUT("> Trying to connect to Server: %d.%d.%d.%d:%d ...\n",
 8001204:	4b4f      	ldr	r3, [pc, #316]	@ (8001344 <main+0x30c>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	4619      	mov	r1, r3
 800120a:	4b4e      	ldr	r3, [pc, #312]	@ (8001344 <main+0x30c>)
 800120c:	785b      	ldrb	r3, [r3, #1]
 800120e:	4618      	mov	r0, r3
 8001210:	4b4c      	ldr	r3, [pc, #304]	@ (8001344 <main+0x30c>)
 8001212:	789b      	ldrb	r3, [r3, #2]
 8001214:	461c      	mov	r4, r3
 8001216:	4b4b      	ldr	r3, [pc, #300]	@ (8001344 <main+0x30c>)
 8001218:	78db      	ldrb	r3, [r3, #3]
 800121a:	461a      	mov	r2, r3
 800121c:	f641 7342 	movw	r3, #8002	@ 0x1f42
 8001220:	9301      	str	r3, [sp, #4]
 8001222:	9200      	str	r2, [sp, #0]
 8001224:	4623      	mov	r3, r4
 8001226:	4602      	mov	r2, r0
 8001228:	4847      	ldr	r0, [pc, #284]	@ (8001348 <main+0x310>)
 800122a:	f007 fd01 	bl	8008c30 <iprintf>
               RemoteIP[1],
               RemoteIP[2],
               RemoteIP[3],
							 RemotePORT);

        while (Trials--)
 800122e:	e017      	b.n	8001260 <main+0x228>
        {
          if( WIFI_OpenClientConnection(0, WIFI_TCP_PROTOCOL, "TCP_CLIENT", RemoteIP, RemotePORT, 0) == WIFI_STATUS_OK)
 8001230:	2300      	movs	r3, #0
 8001232:	9301      	str	r3, [sp, #4]
 8001234:	f641 7342 	movw	r3, #8002	@ 0x1f42
 8001238:	9300      	str	r3, [sp, #0]
 800123a:	4b42      	ldr	r3, [pc, #264]	@ (8001344 <main+0x30c>)
 800123c:	4a43      	ldr	r2, [pc, #268]	@ (800134c <main+0x314>)
 800123e:	2100      	movs	r1, #0
 8001240:	2000      	movs	r0, #0
 8001242:	f001 fd03 	bl	8002c4c <WIFI_OpenClientConnection>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d109      	bne.n	8001260 <main+0x228>
          {
            TERMOUT("> TCP Connection opened successfully.\n");
 800124c:	4840      	ldr	r0, [pc, #256]	@ (8001350 <main+0x318>)
 800124e:	f007 fd57 	bl	8008d00 <puts>
            Socket = 0;
 8001252:	2300      	movs	r3, #0
 8001254:	f507 521d 	add.w	r2, r7, #10048	@ 0x2740
 8001258:	f102 0204 	add.w	r2, r2, #4
 800125c:	6013      	str	r3, [r2, #0]
            break;
 800125e:	e00f      	b.n	8001280 <main+0x248>
        while (Trials--)
 8001260:	f507 531d 	add.w	r3, r7, #10048	@ 0x2740
 8001264:	f103 0302 	add.w	r3, r3, #2
 8001268:	f9b3 3000 	ldrsh.w	r3, [r3]
 800126c:	b29a      	uxth	r2, r3
 800126e:	3a01      	subs	r2, #1
 8001270:	b292      	uxth	r2, r2
 8001272:	f507 511d 	add.w	r1, r7, #10048	@ 0x2740
 8001276:	f101 0102 	add.w	r1, r1, #2
 800127a:	800a      	strh	r2, [r1, #0]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d1d7      	bne.n	8001230 <main+0x1f8>
          }
        }
        if(Socket == -1)
 8001280:	f507 531d 	add.w	r3, r7, #10048	@ 0x2740
 8001284:	f103 0304 	add.w	r3, r3, #4
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800128e:	d11a      	bne.n	80012c6 <main+0x28e>
        {
          TERMOUT("> ERROR : Cannot open Connection\n");
 8001290:	4830      	ldr	r0, [pc, #192]	@ (8001354 <main+0x31c>)
 8001292:	f007 fd35 	bl	8008d00 <puts>
          BSP_LED_On(LED2);
 8001296:	2000      	movs	r0, #0
 8001298:	f001 fd66 	bl	8002d68 <BSP_LED_On>
 800129c:	e013      	b.n	80012c6 <main+0x28e>
        }
      }
      else
      {
        TERMOUT("> ERROR : es-wifi module CANNOT get IP address\n");
 800129e:	482e      	ldr	r0, [pc, #184]	@ (8001358 <main+0x320>)
 80012a0:	f007 fd2e 	bl	8008d00 <puts>
        BSP_LED_On(LED2);
 80012a4:	2000      	movs	r0, #0
 80012a6:	f001 fd5f 	bl	8002d68 <BSP_LED_On>
 80012aa:	e00c      	b.n	80012c6 <main+0x28e>
      }
    }
    else
    {
      TERMOUT("> ERROR : es-wifi module NOT connected\n");
 80012ac:	482b      	ldr	r0, [pc, #172]	@ (800135c <main+0x324>)
 80012ae:	f007 fd27 	bl	8008d00 <puts>
      BSP_LED_On(LED2);
 80012b2:	2000      	movs	r0, #0
 80012b4:	f001 fd58 	bl	8002d68 <BSP_LED_On>
 80012b8:	e005      	b.n	80012c6 <main+0x28e>
    }
  }
  else
  {
    TERMOUT("> ERROR : WIFI Module cannot be initialized.\n");
 80012ba:	4829      	ldr	r0, [pc, #164]	@ (8001360 <main+0x328>)
 80012bc:	f007 fd20 	bl	8008d00 <puts>
    BSP_LED_On(LED2);
 80012c0:	2000      	movs	r0, #0
 80012c2:	f001 fd51 	bl	8002d68 <BSP_LED_On>
  }

  BSP_COM_Init(COM1, &hDiscoUart);
 80012c6:	490f      	ldr	r1, [pc, #60]	@ (8001304 <main+0x2cc>)
 80012c8:	2000      	movs	r0, #0
 80012ca:	f001 fd63 	bl	8002d94 <BSP_COM_Init>
  BSP_ACCELERO_Init();
 80012ce:	f001 ff1d 	bl	800310c <BSP_ACCELERO_Init>
  ret = WIFI_OpenClientConnection(0, WIFI_TCP_PROTOCOL, "MyConnection", RemoteIP, RemotePORT, 0);
 80012d2:	2300      	movs	r3, #0
 80012d4:	9301      	str	r3, [sp, #4]
 80012d6:	f641 7342 	movw	r3, #8002	@ 0x1f42
 80012da:	9300      	str	r3, [sp, #0]
 80012dc:	4b19      	ldr	r3, [pc, #100]	@ (8001344 <main+0x30c>)
 80012de:	4a21      	ldr	r2, [pc, #132]	@ (8001364 <main+0x32c>)
 80012e0:	2100      	movs	r1, #0
 80012e2:	2000      	movs	r0, #0
 80012e4:	f001 fcb2 	bl	8002c4c <WIFI_OpenClientConnection>
 80012e8:	4603      	mov	r3, r0
 80012ea:	f507 521c 	add.w	r2, r7, #9984	@ 0x2700
 80012ee:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 80012f2:	6013      	str	r3, [r2, #0]
  while (1) {
        // 存储加速度传感器数据
          // 用于存储发送数据
      for(uint16_t i = 0; i < 10000; i++){
 80012f4:	2300      	movs	r3, #0
 80012f6:	f507 521d 	add.w	r2, r7, #10048	@ 0x2740
 80012fa:	8013      	strh	r3, [r2, #0]
 80012fc:	e085      	b.n	800140a <main+0x3d2>
 80012fe:	bf00      	nop
 8001300:	0800ca90 	.word	0x0800ca90
 8001304:	20000c04 	.word	0x20000c04
 8001308:	40013800 	.word	0x40013800
 800130c:	0800c710 	.word	0x0800c710
 8001310:	0800c750 	.word	0x0800c750
 8001314:	0800c76c 	.word	0x0800c76c
 8001318:	0800c7ac 	.word	0x0800c7ac
 800131c:	0800c7e4 	.word	0x0800c7e4
 8001320:	0800c824 	.word	0x0800c824
 8001324:	0800c838 	.word	0x0800c838
 8001328:	0800c880 	.word	0x0800c880
 800132c:	0800c89c 	.word	0x0800c89c
 8001330:	0800c8d0 	.word	0x0800c8d0
 8001334:	0800c8f4 	.word	0x0800c8f4
 8001338:	0800c900 	.word	0x0800c900
 800133c:	0800c908 	.word	0x0800c908
 8001340:	0800c924 	.word	0x0800c924
 8001344:	20000000 	.word	0x20000000
 8001348:	0800c954 	.word	0x0800c954
 800134c:	0800c988 	.word	0x0800c988
 8001350:	0800c994 	.word	0x0800c994
 8001354:	0800c9bc 	.word	0x0800c9bc
 8001358:	0800c9e0 	.word	0x0800c9e0
 800135c:	0800ca10 	.word	0x0800ca10
 8001360:	0800ca38 	.word	0x0800ca38
 8001364:	0800ca68 	.word	0x0800ca68
          // 获取加速度数据
    	  int16_t pDataXYZ[3];
    	  char buffer[10000];
          BSP_ACCELERO_AccGetXYZ(pDataXYZ);
 8001368:	f507 531c 	add.w	r3, r7, #9984	@ 0x2700
 800136c:	f103 0318 	add.w	r3, r3, #24
 8001370:	4618      	mov	r0, r3
 8001372:	f001 ff09 	bl	8003188 <BSP_ACCELERO_AccGetXYZ>

          // 将数据格式化为字符串并保存到 buffer 中
          snprintf(buffer, sizeof(buffer), "X: %d Y: %d Z: %d \n", pDataXYZ[0], pDataXYZ[1], pDataXYZ[2]);
 8001376:	f507 531c 	add.w	r3, r7, #9984	@ 0x2700
 800137a:	f103 0318 	add.w	r3, r3, #24
 800137e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001382:	4619      	mov	r1, r3
 8001384:	f507 531c 	add.w	r3, r7, #9984	@ 0x2700
 8001388:	f103 031a 	add.w	r3, r3, #26
 800138c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001390:	f507 521c 	add.w	r2, r7, #9984	@ 0x2700
 8001394:	f102 021c 	add.w	r2, r2, #28
 8001398:	f9b2 2000 	ldrsh.w	r2, [r2]
 800139c:	f107 0008 	add.w	r0, r7, #8
 80013a0:	3804      	subs	r0, #4
 80013a2:	9201      	str	r2, [sp, #4]
 80013a4:	9300      	str	r3, [sp, #0]
 80013a6:	460b      	mov	r3, r1
 80013a8:	4a1c      	ldr	r2, [pc, #112]	@ (800141c <main+0x3e4>)
 80013aa:	f242 7110 	movw	r1, #10000	@ 0x2710
 80013ae:	f007 fcaf 	bl	8008d10 <sniprintf>

          // 打印数据到终端
          TERMOUT("%s", buffer);
 80013b2:	f107 0308 	add.w	r3, r7, #8
 80013b6:	3b04      	subs	r3, #4
 80013b8:	4619      	mov	r1, r3
 80013ba:	4819      	ldr	r0, [pc, #100]	@ (8001420 <main+0x3e8>)
 80013bc:	f007 fc38 	bl	8008c30 <iprintf>

          // 发送数据
          uint16_t Datalen;
          WIFI_SendData(Socket, (uint8_t *)buffer, strlen(buffer), &Datalen, WIFI_WRITE_TIMEOUT);
 80013c0:	f507 531d 	add.w	r3, r7, #10048	@ 0x2740
 80013c4:	f103 0304 	add.w	r3, r3, #4
 80013c8:	681c      	ldr	r4, [r3, #0]
 80013ca:	f107 0308 	add.w	r3, r7, #8
 80013ce:	3b04      	subs	r3, #4
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7fe ff4d 	bl	8000270 <strlen>
 80013d6:	4603      	mov	r3, r0
 80013d8:	b29a      	uxth	r2, r3
 80013da:	f507 531c 	add.w	r3, r7, #9984	@ 0x2700
 80013de:	f103 0316 	add.w	r3, r3, #22
 80013e2:	f107 0108 	add.w	r1, r7, #8
 80013e6:	3904      	subs	r1, #4
 80013e8:	f242 7010 	movw	r0, #10000	@ 0x2710
 80013ec:	9000      	str	r0, [sp, #0]
 80013ee:	4620      	mov	r0, r4
 80013f0:	f001 fc68 	bl	8002cc4 <WIFI_SendData>

          // 等待一段时间再发送下一组数据 (例如每秒发送一次)
          HAL_Delay(1000);
 80013f4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80013f8:	f002 f8a6 	bl	8003548 <HAL_Delay>
      for(uint16_t i = 0; i < 10000; i++){
 80013fc:	f507 531d 	add.w	r3, r7, #10048	@ 0x2740
 8001400:	881b      	ldrh	r3, [r3, #0]
 8001402:	3301      	adds	r3, #1
 8001404:	f507 521d 	add.w	r2, r7, #10048	@ 0x2740
 8001408:	8013      	strh	r3, [r2, #0]
 800140a:	f507 531d 	add.w	r3, r7, #10048	@ 0x2740
 800140e:	881b      	ldrh	r3, [r3, #0]
 8001410:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001414:	4293      	cmp	r3, r2
 8001416:	d9a7      	bls.n	8001368 <main+0x330>
 8001418:	e76c      	b.n	80012f4 <main+0x2bc>
 800141a:	bf00      	nop
 800141c:	0800ca78 	.word	0x0800ca78
 8001420:	0800ca8c 	.word	0x0800ca8c

08001424 <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b096      	sub	sp, #88	@ 0x58
 8001428:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* MSI is enabled after System reset, activate PLL with MSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800142a:	2310      	movs	r3, #16
 800142c:	603b      	str	r3, [r7, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800142e:	2301      	movs	r3, #1
 8001430:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001432:	2360      	movs	r3, #96	@ 0x60
 8001434:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001436:	2300      	movs	r3, #0
 8001438:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800143a:	2302      	movs	r3, #2
 800143c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800143e:	2301      	movs	r3, #1
 8001440:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001442:	2301      	movs	r3, #1
 8001444:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001446:	2328      	movs	r3, #40	@ 0x28
 8001448:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLR = 2;
 800144a:	2302      	movs	r3, #2
 800144c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = 7;
 800144e:	2307      	movs	r3, #7
 8001450:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001452:	2304      	movs	r3, #4
 8001454:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001456:	463b      	mov	r3, r7
 8001458:	4618      	mov	r0, r3
 800145a:	f003 fa05 	bl	8004868 <HAL_RCC_OscConfig>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <SystemClock_Config+0x44>
  {
    /* Initialization Error */
    while(1);
 8001464:	bf00      	nop
 8001466:	e7fd      	b.n	8001464 <SystemClock_Config+0x40>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8001468:	230f      	movs	r3, #15
 800146a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800146c:	2303      	movs	r3, #3
 800146e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001470:	2300      	movs	r3, #0
 8001472:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001474:	2300      	movs	r3, #0
 8001476:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001478:	2300      	movs	r3, #0
 800147a:	657b      	str	r3, [r7, #84]	@ 0x54
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800147c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001480:	2104      	movs	r1, #4
 8001482:	4618      	mov	r0, r3
 8001484:	f003 fdcc 	bl	8005020 <HAL_RCC_ClockConfig>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <SystemClock_Config+0x6e>
  {
    /* Initialization Error */
    while(1);
 800148e:	bf00      	nop
 8001490:	e7fd      	b.n	800148e <SystemClock_Config+0x6a>
  }
}
 8001492:	bf00      	nop
 8001494:	3758      	adds	r7, #88	@ 0x58
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
	...

0800149c <__io_putchar>:
  * @brief  Retargets the C library TERMOUT function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&hDiscoUart, (uint8_t *)&ch, 1, 0xFFFF);
 80014a4:	1d39      	adds	r1, r7, #4
 80014a6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80014aa:	2201      	movs	r2, #1
 80014ac:	4808      	ldr	r0, [pc, #32]	@ (80014d0 <__io_putchar+0x34>)
 80014ae:	f005 ff36 	bl	800731e <HAL_UART_Transmit>
  HAL_StatusTypeDef status = HAL_UART_Transmit(&hDiscoUart, (uint8_t *)&ch, 1, 0xFFFF);
 80014b2:	1d39      	adds	r1, r7, #4
 80014b4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80014b8:	2201      	movs	r2, #1
 80014ba:	4805      	ldr	r0, [pc, #20]	@ (80014d0 <__io_putchar+0x34>)
 80014bc:	f005 ff2f 	bl	800731e <HAL_UART_Transmit>
 80014c0:	4603      	mov	r3, r0
 80014c2:	73fb      	strb	r3, [r7, #15]
  return ch;
 80014c4:	687b      	ldr	r3, [r7, #4]
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3710      	adds	r7, #16
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	20000c04 	.word	0x20000c04

080014d4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 80014de:	88fb      	ldrh	r3, [r7, #6]
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d102      	bne.n	80014ea <HAL_GPIO_EXTI_Callback+0x16>
  {
    case (GPIO_PIN_1):
    {
      SPI_WIFI_ISR();
 80014e4:	f001 fb10 	bl	8002b08 <SPI_WIFI_ISR>
      break;
 80014e8:	e000      	b.n	80014ec <HAL_GPIO_EXTI_Callback+0x18>
    }
    default:
    {
      break;
 80014ea:	bf00      	nop
    }
  }
}
 80014ec:	bf00      	nop
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <SPI3_IRQHandler>:

void SPI3_IRQHandler(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi);
 80014f8:	4802      	ldr	r0, [pc, #8]	@ (8001504 <SPI3_IRQHandler+0x10>)
 80014fa:	f005 f841 	bl	8006580 <HAL_SPI_IRQHandler>
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	2000023c 	.word	0x2000023c

08001508 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
}
 800150c:	bf00      	nop
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr

08001516 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001516:	b480      	push	{r7}
 8001518:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800151a:	bf00      	nop
 800151c:	e7fd      	b.n	800151a <HardFault_Handler+0x4>

0800151e <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001522:	bf00      	nop
 8001524:	e7fd      	b.n	8001522 <MemManage_Handler+0x4>

08001526 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001526:	b480      	push	{r7}
 8001528:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800152a:	bf00      	nop
 800152c:	e7fd      	b.n	800152a <BusFault_Handler+0x4>

0800152e <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800152e:	b480      	push	{r7}
 8001530:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001532:	bf00      	nop
 8001534:	e7fd      	b.n	8001532 <UsageFault_Handler+0x4>

08001536 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001536:	b480      	push	{r7}
 8001538:	af00      	add	r7, sp, #0
}
 800153a:	bf00      	nop
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
}
 8001548:	bf00      	nop
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001552:	b480      	push	{r7}
 8001554:	af00      	add	r7, sp, #0
}
 8001556:	bf00      	nop
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8001564:	f001 ffd0 	bl	8003508 <HAL_IncTick>
}
 8001568:	bf00      	nop
 800156a:	bd80      	pop	{r7, pc}

0800156c <EXTI1_IRQHandler>:
  * @brief  This function handles external lines 1interrupt request.
  * @param  None
  * @retval None
  */
void EXTI1_IRQHandler(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
 HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001570:	2002      	movs	r0, #2
 8001572:	f002 fb39 	bl	8003be8 <HAL_GPIO_EXTI_IRQHandler>
}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}

0800157a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800157a:	b480      	push	{r7}
 800157c:	af00      	add	r7, sp, #0
  return 1;
 800157e:	2301      	movs	r3, #1
}
 8001580:	4618      	mov	r0, r3
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr

0800158a <_kill>:

int _kill(int pid, int sig)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b082      	sub	sp, #8
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
 8001592:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001594:	f007 fdd2 	bl	800913c <__errno>
 8001598:	4603      	mov	r3, r0
 800159a:	2216      	movs	r2, #22
 800159c:	601a      	str	r2, [r3, #0]
  return -1;
 800159e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <_exit>:

void _exit (int status)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b082      	sub	sp, #8
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80015b2:	f04f 31ff 	mov.w	r1, #4294967295
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f7ff ffe7 	bl	800158a <_kill>
  while (1) {}    /* Make sure we hang here */
 80015bc:	bf00      	nop
 80015be:	e7fd      	b.n	80015bc <_exit+0x12>

080015c0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b086      	sub	sp, #24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015cc:	2300      	movs	r3, #0
 80015ce:	617b      	str	r3, [r7, #20]
 80015d0:	e00a      	b.n	80015e8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015d2:	f3af 8000 	nop.w
 80015d6:	4601      	mov	r1, r0
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	1c5a      	adds	r2, r3, #1
 80015dc:	60ba      	str	r2, [r7, #8]
 80015de:	b2ca      	uxtb	r2, r1
 80015e0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	3301      	adds	r3, #1
 80015e6:	617b      	str	r3, [r7, #20]
 80015e8:	697a      	ldr	r2, [r7, #20]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	dbf0      	blt.n	80015d2 <_read+0x12>
  }

  return len;
 80015f0:	687b      	ldr	r3, [r7, #4]
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3718      	adds	r7, #24
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b086      	sub	sp, #24
 80015fe:	af00      	add	r7, sp, #0
 8001600:	60f8      	str	r0, [r7, #12]
 8001602:	60b9      	str	r1, [r7, #8]
 8001604:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001606:	2300      	movs	r3, #0
 8001608:	617b      	str	r3, [r7, #20]
 800160a:	e009      	b.n	8001620 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	1c5a      	adds	r2, r3, #1
 8001610:	60ba      	str	r2, [r7, #8]
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff ff41 	bl	800149c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	3301      	adds	r3, #1
 800161e:	617b      	str	r3, [r7, #20]
 8001620:	697a      	ldr	r2, [r7, #20]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	429a      	cmp	r2, r3
 8001626:	dbf1      	blt.n	800160c <_write+0x12>
  }
  return len;
 8001628:	687b      	ldr	r3, [r7, #4]
}
 800162a:	4618      	mov	r0, r3
 800162c:	3718      	adds	r7, #24
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <_close>:

int _close(int file)
{
 8001632:	b480      	push	{r7}
 8001634:	b083      	sub	sp, #12
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800163a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800163e:	4618      	mov	r0, r3
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr

0800164a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800164a:	b480      	push	{r7}
 800164c:	b083      	sub	sp, #12
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
 8001652:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800165a:	605a      	str	r2, [r3, #4]
  return 0;
 800165c:	2300      	movs	r3, #0
}
 800165e:	4618      	mov	r0, r3
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr

0800166a <_isatty>:

int _isatty(int file)
{
 800166a:	b480      	push	{r7}
 800166c:	b083      	sub	sp, #12
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001672:	2301      	movs	r3, #1
}
 8001674:	4618      	mov	r0, r3
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	3714      	adds	r7, #20
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
	...

0800169c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b086      	sub	sp, #24
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016a4:	4a14      	ldr	r2, [pc, #80]	@ (80016f8 <_sbrk+0x5c>)
 80016a6:	4b15      	ldr	r3, [pc, #84]	@ (80016fc <_sbrk+0x60>)
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016b0:	4b13      	ldr	r3, [pc, #76]	@ (8001700 <_sbrk+0x64>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d102      	bne.n	80016be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016b8:	4b11      	ldr	r3, [pc, #68]	@ (8001700 <_sbrk+0x64>)
 80016ba:	4a12      	ldr	r2, [pc, #72]	@ (8001704 <_sbrk+0x68>)
 80016bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016be:	4b10      	ldr	r3, [pc, #64]	@ (8001700 <_sbrk+0x64>)
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4413      	add	r3, r2
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d207      	bcs.n	80016dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016cc:	f007 fd36 	bl	800913c <__errno>
 80016d0:	4603      	mov	r3, r0
 80016d2:	220c      	movs	r2, #12
 80016d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016d6:	f04f 33ff 	mov.w	r3, #4294967295
 80016da:	e009      	b.n	80016f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016dc:	4b08      	ldr	r3, [pc, #32]	@ (8001700 <_sbrk+0x64>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016e2:	4b07      	ldr	r3, [pc, #28]	@ (8001700 <_sbrk+0x64>)
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4413      	add	r3, r2
 80016ea:	4a05      	ldr	r2, [pc, #20]	@ (8001700 <_sbrk+0x64>)
 80016ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016ee:	68fb      	ldr	r3, [r7, #12]
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3718      	adds	r7, #24
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	20018000 	.word	0x20018000
 80016fc:	00007000 	.word	0x00007000
 8001700:	20000238 	.word	0x20000238
 8001704:	20000de0 	.word	0x20000de0

08001708 <Hex2Num>:
  * @brief  Convert char in Hex format to integer.
  * @param  a: character to convert
  * @retval integer value.
  */
static  uint8_t Hex2Num(char a)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	71fb      	strb	r3, [r7, #7]
    if (a >= '0' && a <= '9') {                             /* Char is num */
 8001712:	79fb      	ldrb	r3, [r7, #7]
 8001714:	2b2f      	cmp	r3, #47	@ 0x2f
 8001716:	d906      	bls.n	8001726 <Hex2Num+0x1e>
 8001718:	79fb      	ldrb	r3, [r7, #7]
 800171a:	2b39      	cmp	r3, #57	@ 0x39
 800171c:	d803      	bhi.n	8001726 <Hex2Num+0x1e>
        return a - '0';
 800171e:	79fb      	ldrb	r3, [r7, #7]
 8001720:	3b30      	subs	r3, #48	@ 0x30
 8001722:	b2db      	uxtb	r3, r3
 8001724:	e014      	b.n	8001750 <Hex2Num+0x48>
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 8001726:	79fb      	ldrb	r3, [r7, #7]
 8001728:	2b60      	cmp	r3, #96	@ 0x60
 800172a:	d906      	bls.n	800173a <Hex2Num+0x32>
 800172c:	79fb      	ldrb	r3, [r7, #7]
 800172e:	2b66      	cmp	r3, #102	@ 0x66
 8001730:	d803      	bhi.n	800173a <Hex2Num+0x32>
        return (a - 'a') + 10;
 8001732:	79fb      	ldrb	r3, [r7, #7]
 8001734:	3b57      	subs	r3, #87	@ 0x57
 8001736:	b2db      	uxtb	r3, r3
 8001738:	e00a      	b.n	8001750 <Hex2Num+0x48>
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 800173a:	79fb      	ldrb	r3, [r7, #7]
 800173c:	2b40      	cmp	r3, #64	@ 0x40
 800173e:	d906      	bls.n	800174e <Hex2Num+0x46>
 8001740:	79fb      	ldrb	r3, [r7, #7]
 8001742:	2b46      	cmp	r3, #70	@ 0x46
 8001744:	d803      	bhi.n	800174e <Hex2Num+0x46>
        return (a - 'A') + 10;
 8001746:	79fb      	ldrb	r3, [r7, #7]
 8001748:	3b37      	subs	r3, #55	@ 0x37
 800174a:	b2db      	uxtb	r3, r3
 800174c:	e000      	b.n	8001750 <Hex2Num+0x48>
    }

    return 0;
 800174e:	2300      	movs	r3, #0
}
 8001750:	4618      	mov	r0, r3
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <ParseHexNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval Hex value.
  */
static uint8_t ParseHexNumber(const char *ptr, uint8_t *cnt)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
    uint8_t sum = 0;
 8001766:	2300      	movs	r3, #0
 8001768:	73fb      	strb	r3, [r7, #15]
    uint8_t done_count = 0;
 800176a:	2300      	movs	r3, #0
 800176c:	73bb      	strb	r3, [r7, #14]

    while (CHARISHEXNUM(*ptr) && (done_count < 2)) {       /* Parse number */
 800176e:	e012      	b.n	8001796 <ParseHexNumber+0x3a>
        sum <<= 4;
 8001770:	7bfb      	ldrb	r3, [r7, #15]
 8001772:	011b      	lsls	r3, r3, #4
 8001774:	73fb      	strb	r3, [r7, #15]
        sum += Hex2Num(*ptr);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff ffc4 	bl	8001708 <Hex2Num>
 8001780:	4603      	mov	r3, r0
 8001782:	461a      	mov	r2, r3
 8001784:	7bfb      	ldrb	r3, [r7, #15]
 8001786:	4413      	add	r3, r2
 8001788:	73fb      	strb	r3, [r7, #15]
        ptr++;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	3301      	adds	r3, #1
 800178e:	607b      	str	r3, [r7, #4]
        done_count++;
 8001790:	7bbb      	ldrb	r3, [r7, #14]
 8001792:	3301      	adds	r3, #1
 8001794:	73bb      	strb	r3, [r7, #14]
    while (CHARISHEXNUM(*ptr) && (done_count < 2)) {       /* Parse number */
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	2b2f      	cmp	r3, #47	@ 0x2f
 800179c:	d903      	bls.n	80017a6 <ParseHexNumber+0x4a>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	2b39      	cmp	r3, #57	@ 0x39
 80017a4:	d90f      	bls.n	80017c6 <ParseHexNumber+0x6a>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	2b60      	cmp	r3, #96	@ 0x60
 80017ac:	d903      	bls.n	80017b6 <ParseHexNumber+0x5a>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	2b66      	cmp	r3, #102	@ 0x66
 80017b4:	d907      	bls.n	80017c6 <ParseHexNumber+0x6a>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	2b40      	cmp	r3, #64	@ 0x40
 80017bc:	d906      	bls.n	80017cc <ParseHexNumber+0x70>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	2b46      	cmp	r3, #70	@ 0x46
 80017c4:	d802      	bhi.n	80017cc <ParseHexNumber+0x70>
 80017c6:	7bbb      	ldrb	r3, [r7, #14]
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d9d1      	bls.n	8001770 <ParseHexNumber+0x14>
    }

    if (cnt != NULL) {                                      /* Save number of characters used for number */
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d002      	beq.n	80017d8 <ParseHexNumber+0x7c>
        *cnt = done_count;
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	7bba      	ldrb	r2, [r7, #14]
 80017d6:	701a      	strb	r2, [r3, #0]
    }
    return sum;                                             /* Return number */
 80017d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3710      	adds	r7, #16
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(const char *ptr, uint8_t *cnt)
{
 80017e2:	b480      	push	{r7}
 80017e4:	b085      	sub	sp, #20
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
 80017ea:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0;
 80017ec:	2300      	movs	r3, #0
 80017ee:	73fb      	strb	r3, [r7, #15]
    uint8_t done_count = 0;
 80017f0:	2300      	movs	r3, #0
 80017f2:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 80017f4:	2300      	movs	r3, #0
 80017f6:	60bb      	str	r3, [r7, #8]

    if (*ptr == '-') {                                      /* Check for minus character */
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	2b2d      	cmp	r3, #45	@ 0x2d
 80017fe:	d119      	bne.n	8001834 <ParseNumber+0x52>
        minus = 1;
 8001800:	2301      	movs	r3, #1
 8001802:	73fb      	strb	r3, [r7, #15]
        ptr++;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	3301      	adds	r3, #1
 8001808:	607b      	str	r3, [r7, #4]
        done_count++;
 800180a:	7bbb      	ldrb	r3, [r7, #14]
 800180c:	3301      	adds	r3, #1
 800180e:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) {                               /* Parse number */
 8001810:	e010      	b.n	8001834 <ParseNumber+0x52>
        sum = 10 * sum + CHAR2NUM(*ptr);
 8001812:	68ba      	ldr	r2, [r7, #8]
 8001814:	4613      	mov	r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	4413      	add	r3, r2
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	461a      	mov	r2, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	3b30      	subs	r3, #48	@ 0x30
 8001824:	4413      	add	r3, r2
 8001826:	60bb      	str	r3, [r7, #8]
        ptr++;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	3301      	adds	r3, #1
 800182c:	607b      	str	r3, [r7, #4]
        done_count++;
 800182e:	7bbb      	ldrb	r3, [r7, #14]
 8001830:	3301      	adds	r3, #1
 8001832:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) {                               /* Parse number */
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	2b2f      	cmp	r3, #47	@ 0x2f
 800183a:	d903      	bls.n	8001844 <ParseNumber+0x62>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	2b39      	cmp	r3, #57	@ 0x39
 8001842:	d9e6      	bls.n	8001812 <ParseNumber+0x30>
    }
    if (cnt != NULL) {                                      /* Save number of characters used for number */
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d002      	beq.n	8001850 <ParseNumber+0x6e>
        *cnt = done_count;
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	7bba      	ldrb	r2, [r7, #14]
 800184e:	701a      	strb	r2, [r3, #0]
    }
    if (minus) {                                            /* Minus detected */
 8001850:	7bfb      	ldrb	r3, [r7, #15]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d002      	beq.n	800185c <ParseNumber+0x7a>
        return 0 - sum;
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	425b      	negs	r3, r3
 800185a:	e000      	b.n	800185e <ParseNumber+0x7c>
    }
    return sum;                                             /* Return number */
 800185c:	68bb      	ldr	r3, [r7, #8]
}
 800185e:	4618      	mov	r0, r3
 8001860:	3714      	adds	r7, #20
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr

0800186a <ParseMAC>:
  * @param  Mac: pointer to MAC-48 array
  * @param  MacSize: the size of the MAC array
  * @retval None.
  */
static void ParseMAC(const char *ptr, uint8_t Mac[], size_t MacSize)
{
 800186a:	b590      	push	{r4, r7, lr}
 800186c:	b087      	sub	sp, #28
 800186e:	af00      	add	r7, sp, #0
 8001870:	60f8      	str	r0, [r7, #12]
 8001872:	60b9      	str	r1, [r7, #8]
 8001874:	607a      	str	r2, [r7, #4]
  uint8_t hex_8bits_count = 0;
 8001876:	2300      	movs	r3, #0
 8001878:	75fb      	strb	r3, [r7, #23]

  if ((ptr != NULL) && (Mac != NULL))
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d027      	beq.n	80018d0 <ParseMAC+0x66>
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d024      	beq.n	80018d0 <ParseMAC+0x66>
  {
    while ((hex_8bits_count < MacSize) && (hex_8bits_count < 6) && (*ptr)) {
 8001886:	e018      	b.n	80018ba <ParseMAC+0x50>
    uint8_t done_count = 1;
 8001888:	2301      	movs	r3, #1
 800188a:	75bb      	strb	r3, [r7, #22]
    if (*ptr != ':')
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	2b3a      	cmp	r3, #58	@ 0x3a
 8001892:	d00d      	beq.n	80018b0 <ParseMAC+0x46>
    {
      Mac[hex_8bits_count++] = ParseHexNumber(ptr, &done_count);
 8001894:	7dfb      	ldrb	r3, [r7, #23]
 8001896:	1c5a      	adds	r2, r3, #1
 8001898:	75fa      	strb	r2, [r7, #23]
 800189a:	461a      	mov	r2, r3
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	189c      	adds	r4, r3, r2
 80018a0:	f107 0316 	add.w	r3, r7, #22
 80018a4:	4619      	mov	r1, r3
 80018a6:	68f8      	ldr	r0, [r7, #12]
 80018a8:	f7ff ff58 	bl	800175c <ParseHexNumber>
 80018ac:	4603      	mov	r3, r0
 80018ae:	7023      	strb	r3, [r4, #0]
    }
    ptr = ptr + done_count;
 80018b0:	7dbb      	ldrb	r3, [r7, #22]
 80018b2:	461a      	mov	r2, r3
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	4413      	add	r3, r2
 80018b8:	60fb      	str	r3, [r7, #12]
    while ((hex_8bits_count < MacSize) && (hex_8bits_count < 6) && (*ptr)) {
 80018ba:	7dfb      	ldrb	r3, [r7, #23]
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d906      	bls.n	80018d0 <ParseMAC+0x66>
 80018c2:	7dfb      	ldrb	r3, [r7, #23]
 80018c4:	2b05      	cmp	r3, #5
 80018c6:	d803      	bhi.n	80018d0 <ParseMAC+0x66>
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d1db      	bne.n	8001888 <ParseMAC+0x1e>
   }
  }
}
 80018d0:	bf00      	nop
 80018d2:	371c      	adds	r7, #28
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd90      	pop	{r4, r7, pc}

080018d8 <ParseIP>:
  * @param  IpAdrr: pointer to IPv4 array
  * @param  IpAdrrSize: the size of IP array
  * @retval None.
  */
static void ParseIP(const char *ptr, uint8_t IpAdrr[], size_t IpAdrrSize)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b086      	sub	sp, #24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	60b9      	str	r1, [r7, #8]
 80018e2:	607a      	str	r2, [r7, #4]
  uint8_t hex_8bits_count = 0;
 80018e4:	2300      	movs	r3, #0
 80018e6:	75fb      	strb	r3, [r7, #23]

  if ((ptr != NULL) && (IpAdrr != NULL) && (4 <= IpAdrrSize))
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d027      	beq.n	800193e <ParseIP+0x66>
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d024      	beq.n	800193e <ParseIP+0x66>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2b03      	cmp	r3, #3
 80018f8:	d921      	bls.n	800193e <ParseIP+0x66>
  {
    while ((hex_8bits_count < 4) && (*ptr != 0)) {
 80018fa:	e019      	b.n	8001930 <ParseIP+0x58>
    uint8_t done_count = 1;
 80018fc:	2301      	movs	r3, #1
 80018fe:	75bb      	strb	r3, [r7, #22]
    if (*ptr != '.')
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	2b2e      	cmp	r3, #46	@ 0x2e
 8001906:	d00e      	beq.n	8001926 <ParseIP+0x4e>
    {
      IpAdrr[hex_8bits_count++] = (uint8_t)ParseNumber(ptr, &done_count);
 8001908:	f107 0316 	add.w	r3, r7, #22
 800190c:	4619      	mov	r1, r3
 800190e:	68f8      	ldr	r0, [r7, #12]
 8001910:	f7ff ff67 	bl	80017e2 <ParseNumber>
 8001914:	4601      	mov	r1, r0
 8001916:	7dfb      	ldrb	r3, [r7, #23]
 8001918:	1c5a      	adds	r2, r3, #1
 800191a:	75fa      	strb	r2, [r7, #23]
 800191c:	461a      	mov	r2, r3
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	4413      	add	r3, r2
 8001922:	b2ca      	uxtb	r2, r1
 8001924:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + done_count;
 8001926:	7dbb      	ldrb	r3, [r7, #22]
 8001928:	461a      	mov	r2, r3
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	4413      	add	r3, r2
 800192e:	60fb      	str	r3, [r7, #12]
    while ((hex_8bits_count < 4) && (*ptr != 0)) {
 8001930:	7dfb      	ldrb	r3, [r7, #23]
 8001932:	2b03      	cmp	r3, #3
 8001934:	d803      	bhi.n	800193e <ParseIP+0x66>
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d1de      	bne.n	80018fc <ParseIP+0x24>
   }
  }
}
 800193e:	bf00      	nop
 8001940:	3718      	adds	r7, #24
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
	...

08001948 <AT_ParseInfo>:
  * @param  Obj: pointer to module handle
  * @param  pdata: A string from the WiFi device
  * @retval None.
  */
static void AT_ParseInfo(ES_WIFIObject_t *Obj, uint8_t *pdata)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	6039      	str	r1, [r7, #0]
  char *ptr;
  uint8_t num = 0;
 8001952:	2300      	movs	r3, #0
 8001954:	72fb      	strb	r3, [r7, #11]

  ptr = strtok((char *)pdata + 2, ",");
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	3302      	adds	r3, #2
 800195a:	4940      	ldr	r1, [pc, #256]	@ (8001a5c <AT_ParseInfo+0x114>)
 800195c:	4618      	mov	r0, r3
 800195e:	f007 fb31 	bl	8008fc4 <strtok>
 8001962:	60f8      	str	r0, [r7, #12]

  while (ptr != NULL){
 8001964:	e071      	b.n	8001a4a <AT_ParseInfo+0x102>
    switch (num++) {
 8001966:	7afb      	ldrb	r3, [r7, #11]
 8001968:	1c5a      	adds	r2, r3, #1
 800196a:	72fa      	strb	r2, [r7, #11]
 800196c:	2b06      	cmp	r3, #6
 800196e:	d866      	bhi.n	8001a3e <AT_ParseInfo+0xf6>
 8001970:	a201      	add	r2, pc, #4	@ (adr r2, 8001978 <AT_ParseInfo+0x30>)
 8001972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001976:	bf00      	nop
 8001978:	08001995 	.word	0x08001995
 800197c:	080019a9 	.word	0x080019a9
 8001980:	080019c1 	.word	0x080019c1
 8001984:	080019d9 	.word	0x080019d9
 8001988:	080019f1 	.word	0x080019f1
 800198c:	08001a09 	.word	0x08001a09
 8001990:	08001a1d 	.word	0x08001a1d
    case 0:
      strncpy((char *)Obj->Product_ID, ptr, sizeof(Obj->Product_ID) - 1);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	221f      	movs	r2, #31
 8001998:	68f9      	ldr	r1, [r7, #12]
 800199a:	4618      	mov	r0, r3
 800199c:	f007 fafe 	bl	8008f9c <strncpy>
      Obj->Product_ID[sizeof(Obj->Product_ID) - 1] = '\0';
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2200      	movs	r2, #0
 80019a4:	77da      	strb	r2, [r3, #31]
      break;
 80019a6:	e04b      	b.n	8001a40 <AT_ParseInfo+0xf8>

    case 1:
      strncpy((char *)Obj->FW_Rev, ptr, sizeof(Obj->FW_Rev) - 1);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	3320      	adds	r3, #32
 80019ac:	2217      	movs	r2, #23
 80019ae:	68f9      	ldr	r1, [r7, #12]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f007 faf3 	bl	8008f9c <strncpy>
      Obj->FW_Rev[sizeof(Obj->FW_Rev) - 1] = '\0';
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2200      	movs	r2, #0
 80019ba:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
      break;
 80019be:	e03f      	b.n	8001a40 <AT_ParseInfo+0xf8>

    case 2:
      strncpy((char *)Obj->API_Rev, ptr, sizeof(Obj->API_Rev) - 1);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	3338      	adds	r3, #56	@ 0x38
 80019c4:	220f      	movs	r2, #15
 80019c6:	68f9      	ldr	r1, [r7, #12]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f007 fae7 	bl	8008f9c <strncpy>
      Obj->API_Rev[sizeof(Obj->API_Rev) - 1] = '\0';
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
      break;
 80019d6:	e033      	b.n	8001a40 <AT_ParseInfo+0xf8>

    case 3:
      strncpy((char *)Obj->Stack_Rev, ptr, sizeof(Obj->Stack_Rev) - 1);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	3348      	adds	r3, #72	@ 0x48
 80019dc:	220f      	movs	r2, #15
 80019de:	68f9      	ldr	r1, [r7, #12]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f007 fadb 	bl	8008f9c <strncpy>
      Obj->Stack_Rev[sizeof(Obj->Stack_Rev) - 1] = '\0';
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	f883 2057 	strb.w	r2, [r3, #87]	@ 0x57
      break;
 80019ee:	e027      	b.n	8001a40 <AT_ParseInfo+0xf8>

    case 4:
      strncpy((char *)Obj->RTOS_Rev, ptr, sizeof(Obj->RTOS_Rev) - 1);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	3358      	adds	r3, #88	@ 0x58
 80019f4:	220f      	movs	r2, #15
 80019f6:	68f9      	ldr	r1, [r7, #12]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f007 facf 	bl	8008f9c <strncpy>
      Obj->RTOS_Rev[sizeof(Obj->RTOS_Rev) - 1] = '\0';
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      break;
 8001a06:	e01b      	b.n	8001a40 <AT_ParseInfo+0xf8>

    case 5:
      Obj->CPU_Clock = (uint32_t)ParseNumber(ptr, NULL);
 8001a08:	2100      	movs	r1, #0
 8001a0a:	68f8      	ldr	r0, [r7, #12]
 8001a0c:	f7ff fee9 	bl	80017e2 <ParseNumber>
 8001a10:	4603      	mov	r3, r0
 8001a12:	461a      	mov	r2, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      break;
 8001a1a:	e011      	b.n	8001a40 <AT_ParseInfo+0xf8>

    case 6:
      ptr = strtok(ptr, "\r");
 8001a1c:	4910      	ldr	r1, [pc, #64]	@ (8001a60 <AT_ParseInfo+0x118>)
 8001a1e:	68f8      	ldr	r0, [r7, #12]
 8001a20:	f007 fad0 	bl	8008fc4 <strtok>
 8001a24:	60f8      	str	r0, [r7, #12]
      strncpy((char *)Obj->Product_Name, ptr, sizeof(Obj->Product_Name) - 1);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	3368      	adds	r3, #104	@ 0x68
 8001a2a:	221f      	movs	r2, #31
 8001a2c:	68f9      	ldr	r1, [r7, #12]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f007 fab4 	bl	8008f9c <strncpy>
      Obj->Product_Name[sizeof(Obj->Product_Name) - 1] = '\0';
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2200      	movs	r2, #0
 8001a38:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
      break;
 8001a3c:	e000      	b.n	8001a40 <AT_ParseInfo+0xf8>

    default: break;
 8001a3e:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8001a40:	4906      	ldr	r1, [pc, #24]	@ (8001a5c <AT_ParseInfo+0x114>)
 8001a42:	2000      	movs	r0, #0
 8001a44:	f007 fabe 	bl	8008fc4 <strtok>
 8001a48:	60f8      	str	r0, [r7, #12]
  while (ptr != NULL){
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d18a      	bne.n	8001966 <AT_ParseInfo+0x1e>
  }
}
 8001a50:	bf00      	nop
 8001a52:	bf00      	nop
 8001a54:	3710      	adds	r7, #16
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	0800cad0 	.word	0x0800cad0
 8001a60:	0800cad4 	.word	0x0800cad4

08001a64 <AT_ParseConnSettings>:
  * @param  pdata: A string from the WiFi device
  * @param  NetSettings: settings
  * @retval None.
  */
static void AT_ParseConnSettings(char *pdata, ES_WIFI_Network_t *NetSettings)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
  uint8_t num = 0;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	73fb      	strb	r3, [r7, #15]
  char *ptr;

  ptr = strtok(pdata + 2, ",");
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	3302      	adds	r3, #2
 8001a76:	4959      	ldr	r1, [pc, #356]	@ (8001bdc <AT_ParseConnSettings+0x178>)
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f007 faa3 	bl	8008fc4 <strtok>
 8001a7e:	60b8      	str	r0, [r7, #8]

  while (ptr != NULL) {
 8001a80:	e0a2      	b.n	8001bc8 <AT_ParseConnSettings+0x164>
    switch (num++) {
 8001a82:	7bfb      	ldrb	r3, [r7, #15]
 8001a84:	1c5a      	adds	r2, r3, #1
 8001a86:	73fa      	strb	r2, [r7, #15]
 8001a88:	2b0b      	cmp	r3, #11
 8001a8a:	f200 808c 	bhi.w	8001ba6 <AT_ParseConnSettings+0x142>
 8001a8e:	a201      	add	r2, pc, #4	@ (adr r2, 8001a94 <AT_ParseConnSettings+0x30>)
 8001a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a94:	08001ac5 	.word	0x08001ac5
 8001a98:	08001adb 	.word	0x08001adb
 8001a9c:	08001af3 	.word	0x08001af3
 8001aa0:	08001b07 	.word	0x08001b07
 8001aa4:	08001b1b 	.word	0x08001b1b
 8001aa8:	08001b2f 	.word	0x08001b2f
 8001aac:	08001b3f 	.word	0x08001b3f
 8001ab0:	08001b4f 	.word	0x08001b4f
 8001ab4:	08001b5f 	.word	0x08001b5f
 8001ab8:	08001b6f 	.word	0x08001b6f
 8001abc:	08001b7f 	.word	0x08001b7f
 8001ac0:	08001b93 	.word	0x08001b93
    case 0:
      strncpy((char *)NetSettings->SSID,  ptr, sizeof(NetSettings->SSID) - 1);
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	2220      	movs	r2, #32
 8001ac8:	68b9      	ldr	r1, [r7, #8]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f007 fa66 	bl	8008f9c <strncpy>
      NetSettings->SSID[sizeof(NetSettings->SSID) - 1] = '\0';
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f883 2020 	strb.w	r2, [r3, #32]
      break;
 8001ad8:	e066      	b.n	8001ba8 <AT_ParseConnSettings+0x144>

    case 1:
      strncpy((char *)NetSettings->pswd, ptr, sizeof(NetSettings->pswd) - 1);
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	3321      	adds	r3, #33	@ 0x21
 8001ade:	2220      	movs	r2, #32
 8001ae0:	68b9      	ldr	r1, [r7, #8]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f007 fa5a 	bl	8008f9c <strncpy>
      NetSettings->pswd[sizeof(NetSettings->pswd) - 1] = '\0';
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	2200      	movs	r2, #0
 8001aec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      break;
 8001af0:	e05a      	b.n	8001ba8 <AT_ParseConnSettings+0x144>

    case 2:
      NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 8001af2:	2100      	movs	r1, #0
 8001af4:	68b8      	ldr	r0, [r7, #8]
 8001af6:	f7ff fe74 	bl	80017e2 <ParseNumber>
 8001afa:	4603      	mov	r3, r0
 8001afc:	b2da      	uxtb	r2, r3
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        break;
 8001b04:	e050      	b.n	8001ba8 <AT_ParseConnSettings+0x144>

    case 3:
      NetSettings->DHCP_IsEnabled = (uint8_t)ParseNumber(ptr, NULL);
 8001b06:	2100      	movs	r1, #0
 8001b08:	68b8      	ldr	r0, [r7, #8]
 8001b0a:	f7ff fe6a 	bl	80017e2 <ParseNumber>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	b2da      	uxtb	r2, r3
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      break;
 8001b18:	e046      	b.n	8001ba8 <AT_ParseConnSettings+0x144>

    case 4:
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	68b8      	ldr	r0, [r7, #8]
 8001b1e:	f7ff fe60 	bl	80017e2 <ParseNumber>
 8001b22:	4603      	mov	r3, r0
 8001b24:	b2da      	uxtb	r2, r3
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
      break;
 8001b2c:	e03c      	b.n	8001ba8 <AT_ParseConnSettings+0x144>

    case 5:
      ParseIP(ptr, NetSettings->IP_Addr, sizeof(NetSettings->IP_Addr));
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	3348      	adds	r3, #72	@ 0x48
 8001b32:	2204      	movs	r2, #4
 8001b34:	4619      	mov	r1, r3
 8001b36:	68b8      	ldr	r0, [r7, #8]
 8001b38:	f7ff fece 	bl	80018d8 <ParseIP>
      break;
 8001b3c:	e034      	b.n	8001ba8 <AT_ParseConnSettings+0x144>

    case 6:
      ParseIP(ptr, NetSettings->IP_Mask, sizeof(NetSettings->IP_Mask));
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	334c      	adds	r3, #76	@ 0x4c
 8001b42:	2204      	movs	r2, #4
 8001b44:	4619      	mov	r1, r3
 8001b46:	68b8      	ldr	r0, [r7, #8]
 8001b48:	f7ff fec6 	bl	80018d8 <ParseIP>
      break;
 8001b4c:	e02c      	b.n	8001ba8 <AT_ParseConnSettings+0x144>

    case 7:
      ParseIP(ptr, NetSettings->Gateway_Addr, sizeof(NetSettings->Gateway_Addr));
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	3350      	adds	r3, #80	@ 0x50
 8001b52:	2204      	movs	r2, #4
 8001b54:	4619      	mov	r1, r3
 8001b56:	68b8      	ldr	r0, [r7, #8]
 8001b58:	f7ff febe 	bl	80018d8 <ParseIP>
      break;
 8001b5c:	e024      	b.n	8001ba8 <AT_ParseConnSettings+0x144>

    case 8:
      ParseIP(ptr, NetSettings->DNS1, sizeof(NetSettings->DNS1));
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	3354      	adds	r3, #84	@ 0x54
 8001b62:	2204      	movs	r2, #4
 8001b64:	4619      	mov	r1, r3
 8001b66:	68b8      	ldr	r0, [r7, #8]
 8001b68:	f7ff feb6 	bl	80018d8 <ParseIP>
      break;
 8001b6c:	e01c      	b.n	8001ba8 <AT_ParseConnSettings+0x144>

    case 9:
      ParseIP(ptr, NetSettings->DNS2, sizeof(NetSettings->DNS2));
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	3358      	adds	r3, #88	@ 0x58
 8001b72:	2204      	movs	r2, #4
 8001b74:	4619      	mov	r1, r3
 8001b76:	68b8      	ldr	r0, [r7, #8]
 8001b78:	f7ff feae 	bl	80018d8 <ParseIP>
      break;
 8001b7c:	e014      	b.n	8001ba8 <AT_ParseConnSettings+0x144>

    case 10:
      NetSettings->JoinRetries = (uint8_t)ParseNumber(ptr, NULL);
 8001b7e:	2100      	movs	r1, #0
 8001b80:	68b8      	ldr	r0, [r7, #8]
 8001b82:	f7ff fe2e 	bl	80017e2 <ParseNumber>
 8001b86:	4603      	mov	r3, r0
 8001b88:	b2da      	uxtb	r2, r3
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      break;
 8001b90:	e00a      	b.n	8001ba8 <AT_ParseConnSettings+0x144>

    case 11:
      NetSettings->AutoConnect = (uint8_t)ParseNumber(ptr, NULL);
 8001b92:	2100      	movs	r1, #0
 8001b94:	68b8      	ldr	r0, [r7, #8]
 8001b96:	f7ff fe24 	bl	80017e2 <ParseNumber>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	b2da      	uxtb	r2, r3
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
      break;
 8001ba4:	e000      	b.n	8001ba8 <AT_ParseConnSettings+0x144>

    default:
      break;
 8001ba6:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8001ba8:	490c      	ldr	r1, [pc, #48]	@ (8001bdc <AT_ParseConnSettings+0x178>)
 8001baa:	2000      	movs	r0, #0
 8001bac:	f007 fa0a 	bl	8008fc4 <strtok>
 8001bb0:	60b8      	str	r0, [r7, #8]
    if ((ptr != NULL) && (ptr[-1] == ','))
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d007      	beq.n	8001bc8 <AT_ParseConnSettings+0x164>
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	2b2c      	cmp	r3, #44	@ 0x2c
 8001bc0:	d102      	bne.n	8001bc8 <AT_ParseConnSettings+0x164>
    { /* Ignore empty fields */
      num++;
 8001bc2:	7bfb      	ldrb	r3, [r7, #15]
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	73fb      	strb	r3, [r7, #15]
  while (ptr != NULL) {
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	f47f af59 	bne.w	8001a82 <AT_ParseConnSettings+0x1e>
    }
  }
}
 8001bd0:	bf00      	nop
 8001bd2:	bf00      	nop
 8001bd4:	3710      	adds	r7, #16
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	0800cad0 	.word	0x0800cad0

08001be0 <AT_ExecuteCommand>:
  * @param  cmd: pointer to the command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, const uint8_t *cmd, uint8_t *pdata)
{
 8001be0:	b590      	push	{r4, r7, lr}
 8001be2:	b087      	sub	sp, #28
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	607a      	str	r2, [r7, #4]
  int ret = 0;
 8001bec:	2300      	movs	r3, #0
 8001bee:	613b      	str	r3, [r7, #16]
  int16_t recv_len = 0;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	82fb      	strh	r3, [r7, #22]

  LOCK_WIFI();

  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d056      	beq.n	8001cac <AT_ExecuteCommand+0xcc>
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d051      	beq.n	8001cac <AT_ExecuteCommand+0xcc>

  ret = Obj->fops.IO_Send(cmd, strlen((const char *)cmd), Obj->Timeout);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	f8d3 4120 	ldr.w	r4, [r3, #288]	@ 0x120
 8001c0e:	68b8      	ldr	r0, [r7, #8]
 8001c10:	f7fe fb2e 	bl	8000270 <strlen>
 8001c14:	4603      	mov	r3, r0
 8001c16:	b299      	uxth	r1, r3
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	@ 0x8f8
 8001c1e:	461a      	mov	r2, r3
 8001c20:	68b8      	ldr	r0, [r7, #8]
 8001c22:	47a0      	blx	r4
 8001c24:	4603      	mov	r3, r0
 8001c26:	613b      	str	r3, [r7, #16]

  if( ret > 0)
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	dd3e      	ble.n	8001cac <AT_ExecuteCommand+0xcc>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8001c34:	68fa      	ldr	r2, [r7, #12]
 8001c36:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	@ 0x8f8
 8001c3a:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	4798      	blx	r3
 8001c42:	4603      	mov	r3, r0
 8001c44:	82fb      	strh	r3, [r7, #22]
    if ((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE))
 8001c46:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	dd27      	ble.n	8001c9e <AT_ExecuteCommand+0xbe>
 8001c4e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001c52:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001c56:	dc22      	bgt.n	8001c9e <AT_ExecuteCommand+0xbe>
    {
      if (recv_len == ES_WIFI_DATA_SIZE)
 8001c58:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001c5c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001c60:	d105      	bne.n	8001c6e <AT_ExecuteCommand+0x8e>
      {
        /* ES_WIFI_DATA_SIZE maybe too small !! */
        recv_len--;
 8001c62:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	3b01      	subs	r3, #1
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	82fb      	strh	r3, [r7, #22]
      }
      *(pdata + recv_len) = 0;
 8001c6e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	4413      	add	r3, r2
 8001c76:	2200      	movs	r2, #0
 8001c78:	701a      	strb	r2, [r3, #0]

      if (strstr((char *)pdata, AT_OK_STRING))
 8001c7a:	490f      	ldr	r1, [pc, #60]	@ (8001cb8 <AT_ExecuteCommand+0xd8>)
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f007 f9fd 	bl	800907c <strstr>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <AT_ExecuteCommand+0xac>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_OK;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	e010      	b.n	8001cae <AT_ExecuteCommand+0xce>
      }
      else if (strstr((char *)pdata, AT_ERROR_STRING))
 8001c8c:	490b      	ldr	r1, [pc, #44]	@ (8001cbc <AT_ExecuteCommand+0xdc>)
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f007 f9f4 	bl	800907c <strstr>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <AT_ExecuteCommand+0xbe>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8001c9a:	2305      	movs	r3, #5
 8001c9c:	e007      	b.n	8001cae <AT_ExecuteCommand+0xce>
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER)
 8001c9e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001ca2:	f113 0f04 	cmn.w	r3, #4
 8001ca6:	d101      	bne.n	8001cac <AT_ExecuteCommand+0xcc>
    {
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_MODULE_CRASH;
 8001ca8:	2306      	movs	r3, #6
 8001caa:	e000      	b.n	8001cae <AT_ExecuteCommand+0xce>
    }
   }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 8001cac:	2304      	movs	r3, #4
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	371c      	adds	r7, #28
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd90      	pop	{r4, r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	0800cae8 	.word	0x0800cae8
 8001cbc:	0800caf4 	.word	0x0800caf4

08001cc0 <AT_RequestSendData>:
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd,
                                           const uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b086      	sub	sp, #24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	60b9      	str	r1, [r7, #8]
 8001cca:	607a      	str	r2, [r7, #4]
 8001ccc:	807b      	strh	r3, [r7, #2]
  int16_t send_len = 0;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	82fb      	strh	r3, [r7, #22]
  int16_t recv_len = 0;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	82bb      	strh	r3, [r7, #20]
  uint16_t cmd_len = 0;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	827b      	strh	r3, [r7, #18]
  uint16_t n;

  LOCK_WIFI();

  cmd_len = strlen((char*)cmd);
 8001cda:	68b8      	ldr	r0, [r7, #8]
 8001cdc:	f7fe fac8 	bl	8000270 <strlen>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	827b      	strh	r3, [r7, #18]

  /* Can send only even number of byte on first send. */
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 8001ce4:	8a7b      	ldrh	r3, [r7, #18]
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <AT_RequestSendData+0x32>
 8001cee:	2302      	movs	r3, #2
 8001cf0:	e05d      	b.n	8001dae <AT_RequestSendData+0xee>

  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d057      	beq.n	8001dac <AT_RequestSendData+0xec>
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d052      	beq.n	8001dac <AT_RequestSendData+0xec>

  n = Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8001d0c:	68fa      	ldr	r2, [r7, #12]
 8001d0e:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	@ 0x8f8
 8001d12:	8a79      	ldrh	r1, [r7, #18]
 8001d14:	68b8      	ldr	r0, [r7, #8]
 8001d16:	4798      	blx	r3
 8001d18:	4603      	mov	r3, r0
 8001d1a:	823b      	strh	r3, [r7, #16]
  if (n == cmd_len)
 8001d1c:	8a3a      	ldrh	r2, [r7, #16]
 8001d1e:	8a7b      	ldrh	r3, [r7, #18]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d143      	bne.n	8001dac <AT_RequestSendData+0xec>
  {
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8001d2a:	68fa      	ldr	r2, [r7, #12]
 8001d2c:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	@ 0x8f8
 8001d30:	8879      	ldrh	r1, [r7, #2]
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	4798      	blx	r3
 8001d36:	4603      	mov	r3, r0
 8001d38:	82fb      	strh	r3, [r7, #22]
    if (send_len == len)
 8001d3a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001d3e:	887b      	ldrh	r3, [r7, #2]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d131      	bne.n	8001da8 <AT_RequestSendData+0xe8>
    {
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8001d4a:	68fa      	ldr	r2, [r7, #12]
 8001d4c:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	@ 0x8f8
 8001d50:	2100      	movs	r1, #0
 8001d52:	6a38      	ldr	r0, [r7, #32]
 8001d54:	4798      	blx	r3
 8001d56:	4603      	mov	r3, r0
 8001d58:	82bb      	strh	r3, [r7, #20]
      if (recv_len > 0)
 8001d5a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	dd19      	ble.n	8001d96 <AT_RequestSendData+0xd6>
      {
        *(pdata + recv_len) = 0;
 8001d62:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001d66:	6a3a      	ldr	r2, [r7, #32]
 8001d68:	4413      	add	r3, r2
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	701a      	strb	r2, [r3, #0]
        if(strstr((char *)pdata, AT_OK_STRING))
 8001d6e:	4912      	ldr	r1, [pc, #72]	@ (8001db8 <AT_RequestSendData+0xf8>)
 8001d70:	6a38      	ldr	r0, [r7, #32]
 8001d72:	f007 f983 	bl	800907c <strstr>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <AT_RequestSendData+0xc0>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_OK;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	e016      	b.n	8001dae <AT_RequestSendData+0xee>
        }
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 8001d80:	490e      	ldr	r1, [pc, #56]	@ (8001dbc <AT_RequestSendData+0xfc>)
 8001d82:	6a38      	ldr	r0, [r7, #32]
 8001d84:	f007 f97a 	bl	800907c <strstr>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <AT_RequestSendData+0xd2>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8001d8e:	2305      	movs	r3, #5
 8001d90:	e00d      	b.n	8001dae <AT_RequestSendData+0xee>
        }
        else
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_ERROR;
 8001d92:	2302      	movs	r3, #2
 8001d94:	e00b      	b.n	8001dae <AT_RequestSendData+0xee>
        }
      }
      UNLOCK_WIFI();
      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER)
 8001d96:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001d9a:	f113 0f04 	cmn.w	r3, #4
 8001d9e:	d101      	bne.n	8001da4 <AT_RequestSendData+0xe4>
      {
        return ES_WIFI_STATUS_MODULE_CRASH;
 8001da0:	2306      	movs	r3, #6
 8001da2:	e004      	b.n	8001dae <AT_RequestSendData+0xee>
      }
      return ES_WIFI_STATUS_ERROR;
 8001da4:	2302      	movs	r3, #2
 8001da6:	e002      	b.n	8001dae <AT_RequestSendData+0xee>
    }
    else
    {
      return ES_WIFI_STATUS_ERROR;
 8001da8:	2302      	movs	r3, #2
 8001daa:	e000      	b.n	8001dae <AT_RequestSendData+0xee>
    }
  }
 }
  return ES_WIFI_STATUS_IO_ERROR;
 8001dac:	2304      	movs	r3, #4
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3718      	adds	r7, #24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	0800cae8 	.word	0x0800cae8
 8001dbc:	0800caf4 	.word	0x0800caf4

08001dc0 <ES_WIFI_Init>:
  * @brief  Initialize the WIFI module.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8001dc8:	2302      	movs	r3, #2
 8001dca:	73fb      	strb	r3, [r7, #15]

  LOCK_WIFI();

  Obj->Timeout = ES_WIFI_TIMEOUT;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f247 5230 	movw	r2, #30000	@ 0x7530
 8001dd2:	f8c3 28f8 	str.w	r2, [r3, #2296]	@ 0x8f8

  if (Obj->fops.IO_Init != NULL) {
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d01b      	beq.n	8001e18 <ES_WIFI_Init+0x58>

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8001de6:	2000      	movs	r0, #0
 8001de8:	4798      	blx	r3
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d113      	bne.n	8001e18 <ES_WIFI_Init+0x58>
  {
    ret = AT_ExecuteCommand(Obj,(const uint8_t*)"I?\r\n", Obj->CmdData);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001df6:	461a      	mov	r2, r3
 8001df8:	490a      	ldr	r1, [pc, #40]	@ (8001e24 <ES_WIFI_Init+0x64>)
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f7ff fef0 	bl	8001be0 <AT_ExecuteCommand>
 8001e00:	4603      	mov	r3, r0
 8001e02:	73fb      	strb	r3, [r7, #15]

    if(ret == ES_WIFI_STATUS_OK)
 8001e04:	7bfb      	ldrb	r3, [r7, #15]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d106      	bne.n	8001e18 <ES_WIFI_Init+0x58>
    {
      AT_ParseInfo(Obj, Obj->CmdData);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001e10:	4619      	mov	r1, r3
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f7ff fd98 	bl	8001948 <AT_ParseInfo>
    }
   }
  }

  UNLOCK_WIFI();
  return ret;
 8001e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3710      	adds	r7, #16
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	0800cb04 	.word	0x0800cb04

08001e28 <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func IO_Receive)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b085      	sub	sp, #20
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	607a      	str	r2, [r7, #4]
 8001e34:	603b      	str	r3, [r7, #0]
  if (!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d00b      	beq.n	8001e54 <ES_WIFI_RegisterBusIO+0x2c>
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d008      	beq.n	8001e54 <ES_WIFI_RegisterBusIO+0x2c>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d005      	beq.n	8001e54 <ES_WIFI_RegisterBusIO+0x2c>
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d002      	beq.n	8001e54 <ES_WIFI_RegisterBusIO+0x2c>
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d101      	bne.n	8001e58 <ES_WIFI_RegisterBusIO+0x30>
  {
    return ES_WIFI_STATUS_ERROR;
 8001e54:	2302      	movs	r3, #2
 8001e56:	e014      	b.n	8001e82 <ES_WIFI_RegisterBusIO+0x5a>
  }

  Obj->fops.IO_Init = IO_Init;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	68ba      	ldr	r2, [r7, #8]
 8001e5c:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
  Obj->fops.IO_DeInit = IO_DeInit;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
  Obj->fops.IO_Send = IO_Send;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	69ba      	ldr	r2, [r7, #24]
 8001e6c:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
  Obj->fops.IO_Receive = IO_Receive;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	69fa      	ldr	r2, [r7, #28]
 8001e74:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
  Obj->fops.IO_Delay = IO_Delay;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	683a      	ldr	r2, [r7, #0]
 8001e7c:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  return ES_WIFI_STATUS_OK;
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3714      	adds	r7, #20
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
	...

08001e90 <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char *SSID,
                                 const char *Password,
                                 ES_WIFI_SecurityType_t SecType)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b086      	sub	sp, #24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	607a      	str	r2, [r7, #4]
 8001e9c:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, "C1=%s\r", SSID);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001ea4:	68ba      	ldr	r2, [r7, #8]
 8001ea6:	4932      	ldr	r1, [pc, #200]	@ (8001f70 <ES_WIFI_Connect+0xe0>)
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f006 ff65 	bl	8008d78 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001eba:	461a      	mov	r2, r3
 8001ebc:	68f8      	ldr	r0, [r7, #12]
 8001ebe:	f7ff fe8f 	bl	8001be0 <AT_ExecuteCommand>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 8001ec6:	7dfb      	ldrb	r3, [r7, #23]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d14b      	bne.n	8001f64 <ES_WIFI_Connect+0xd4>
  {
    sprintf((char *)Obj->CmdData, "C2=%s\r", Password);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	4927      	ldr	r1, [pc, #156]	@ (8001f74 <ES_WIFI_Connect+0xe4>)
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f006 ff4e 	bl	8008d78 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001ee8:	461a      	mov	r2, r3
 8001eea:	68f8      	ldr	r0, [r7, #12]
 8001eec:	f7ff fe78 	bl	8001be0 <AT_ExecuteCommand>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	75fb      	strb	r3, [r7, #23]

    if(ret == ES_WIFI_STATUS_OK)
 8001ef4:	7dfb      	ldrb	r3, [r7, #23]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d134      	bne.n	8001f64 <ES_WIFI_Connect+0xd4>
    {
      Obj->Security = SecType;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	78fa      	ldrb	r2, [r7, #3]
 8001efe:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
      sprintf((char *)Obj->CmdData, "C3=%d\r", (uint8_t)SecType);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001f08:	78fa      	ldrb	r2, [r7, #3]
 8001f0a:	491b      	ldr	r1, [pc, #108]	@ (8001f78 <ES_WIFI_Connect+0xe8>)
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f006 ff33 	bl	8008d78 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001f1e:	461a      	mov	r2, r3
 8001f20:	68f8      	ldr	r0, [r7, #12]
 8001f22:	f7ff fe5d 	bl	8001be0 <AT_ExecuteCommand>
 8001f26:	4603      	mov	r3, r0
 8001f28:	75fb      	strb	r3, [r7, #23]

      if(ret == ES_WIFI_STATUS_OK)
 8001f2a:	7dfb      	ldrb	r3, [r7, #23]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d119      	bne.n	8001f64 <ES_WIFI_Connect+0xd4>
      {
        sprintf((char *)Obj->CmdData, "C0\r");
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001f36:	4911      	ldr	r1, [pc, #68]	@ (8001f7c <ES_WIFI_Connect+0xec>)
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f006 ff1d 	bl	8008d78 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	68f8      	ldr	r0, [r7, #12]
 8001f4e:	f7ff fe47 	bl	8001be0 <AT_ExecuteCommand>
 8001f52:	4603      	mov	r3, r0
 8001f54:	75fb      	strb	r3, [r7, #23]
        if(ret == ES_WIFI_STATUS_OK)
 8001f56:	7dfb      	ldrb	r3, [r7, #23]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d103      	bne.n	8001f64 <ES_WIFI_Connect+0xd4>
        {
           Obj->NetSettings.IsConnected = 1;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 20d2 	strb.w	r2, [r3, #210]	@ 0xd2
        }
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
 8001f64:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3718      	adds	r7, #24
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	0800cb1c 	.word	0x0800cb1c
 8001f74:	0800cb24 	.word	0x0800cb24
 8001f78:	0800cb2c 	.word	0x0800cb2c
 8001f7c:	0800cb34 	.word	0x0800cb34

08001f80 <ES_WIFI_IsConnected>:
  * @brief  Check whether the module is connected to an access point.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
uint8_t ES_WIFI_IsConnected(ES_WIFIObject_t *Obj)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char *)Obj->CmdData, "CS\r");
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001f8e:	4913      	ldr	r1, [pc, #76]	@ (8001fdc <ES_WIFI_IsConnected+0x5c>)
 8001f90:	4618      	mov	r0, r3
 8001f92:	f006 fef1 	bl	8008d78 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f7ff fe1b 	bl	8001be0 <AT_ExecuteCommand>
 8001faa:	4603      	mov	r3, r0
 8001fac:	73fb      	strb	r3, [r7, #15]
  if (ret == ES_WIFI_STATUS_OK)
 8001fae:	7bfb      	ldrb	r3, [r7, #15]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d10b      	bne.n	8001fcc <ES_WIFI_IsConnected+0x4c>
  {
    Obj->NetSettings.IsConnected = (Obj->CmdData[2] == '1') ? 1 : 0;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f893 312a 	ldrb.w	r3, [r3, #298]	@ 0x12a
 8001fba:	2b31      	cmp	r3, #49	@ 0x31
 8001fbc:	bf0c      	ite	eq
 8001fbe:	2301      	moveq	r3, #1
 8001fc0:	2300      	movne	r3, #0
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f883 20d2 	strb.w	r2, [r3, #210]	@ 0xd2
  }

  UNLOCK_WIFI();

  return Obj->NetSettings.IsConnected;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f893 30d2 	ldrb.w	r3, [r3, #210]	@ 0xd2
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3710      	adds	r7, #16
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	0800cb38 	.word	0x0800cb38

08001fe0 <ES_WIFI_GetNetworkSettings>:
  * @brief  Update given object module with the network settings.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char *)Obj->CmdData, "C?\r");
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001fee:	4910      	ldr	r1, [pc, #64]	@ (8002030 <ES_WIFI_GetNetworkSettings+0x50>)
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f006 fec1 	bl	8008d78 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002002:	461a      	mov	r2, r3
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f7ff fdeb 	bl	8001be0 <AT_ExecuteCommand>
 800200a:	4603      	mov	r3, r0
 800200c:	73fb      	strb	r3, [r7, #15]

  if(ret == ES_WIFI_STATUS_OK)
 800200e:	7bfb      	ldrb	r3, [r7, #15]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d108      	bne.n	8002026 <ES_WIFI_GetNetworkSettings+0x46>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f503 7294 	add.w	r2, r3, #296	@ 0x128
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	338d      	adds	r3, #141	@ 0x8d
 800201e:	4619      	mov	r1, r3
 8002020:	4610      	mov	r0, r2
 8002022:	f7ff fd1f 	bl	8001a64 <AT_ParseConnSettings>
  }

  UNLOCK_WIFI();

  return ret;
 8002026:	7bfb      	ldrb	r3, [r7, #15]
}
 8002028:	4618      	mov	r0, r3
 800202a:	3710      	adds	r7, #16
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	0800cb40 	.word	0x0800cb40

08002034 <ES_WIFI_GetMACAddress>:
  * @param  mac: pointer to the MAC address array.
  * @param  MacLength: length of the MAC address array.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetMACAddress(ES_WIFIObject_t *Obj, uint8_t *mac, uint8_t MacLength)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b086      	sub	sp, #24
 8002038:	af00      	add	r7, sp, #0
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	60b9      	str	r1, [r7, #8]
 800203e:	4613      	mov	r3, r2
 8002040:	71fb      	strb	r3, [r7, #7]
  ES_WIFI_Status_t ret;
  char *ptr;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, "Z5\r");
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002048:	4913      	ldr	r1, [pc, #76]	@ (8002098 <ES_WIFI_GetMACAddress+0x64>)
 800204a:	4618      	mov	r0, r3
 800204c:	f006 fe94 	bl	8008d78 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800205c:	461a      	mov	r2, r3
 800205e:	68f8      	ldr	r0, [r7, #12]
 8002060:	f7ff fdbe 	bl	8001be0 <AT_ExecuteCommand>
 8002064:	4603      	mov	r3, r0
 8002066:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 8002068:	7dfb      	ldrb	r3, [r7, #23]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d10e      	bne.n	800208c <ES_WIFI_GetMACAddress+0x58>
  {
    ptr = strtok((char *)(Obj->CmdData + 2), "\r\n");
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002074:	3302      	adds	r3, #2
 8002076:	4909      	ldr	r1, [pc, #36]	@ (800209c <ES_WIFI_GetMACAddress+0x68>)
 8002078:	4618      	mov	r0, r3
 800207a:	f006 ffa3 	bl	8008fc4 <strtok>
 800207e:	6138      	str	r0, [r7, #16]
    ParseMAC(ptr, mac, MacLength);
 8002080:	79fb      	ldrb	r3, [r7, #7]
 8002082:	461a      	mov	r2, r3
 8002084:	68b9      	ldr	r1, [r7, #8]
 8002086:	6938      	ldr	r0, [r7, #16]
 8002088:	f7ff fbef 	bl	800186a <ParseMAC>
  }

  UNLOCK_WIFI();

  return ret;
 800208c:	7dfb      	ldrb	r3, [r7, #23]
}
 800208e:	4618      	mov	r0, r3
 8002090:	3718      	adds	r7, #24
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	0800cb90 	.word	0x0800cb90
 800209c:	0800cb94 	.word	0x0800cb94

080020a0 <ES_WIFI_StartClientConnection>:
  * @param  Obj: pointer to the module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 80020a0:	b590      	push	{r4, r7, lr}
 80020a2:	b087      	sub	sp, #28
 80020a4:	af02      	add	r7, sp, #8
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 80020aa:	2300      	movs	r3, #0
 80020ac:	73fb      	strb	r3, [r7, #15]

  if ( ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)) && (conn->RemotePort == 0) ) return ES_WIFI_STATUS_ERROR;
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d003      	beq.n	80020be <ES_WIFI_StartClientConnection+0x1e>
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	2b03      	cmp	r3, #3
 80020bc:	d105      	bne.n	80020ca <ES_WIFI_StartClientConnection+0x2a>
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	885b      	ldrh	r3, [r3, #2]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <ES_WIFI_StartClientConnection+0x2a>
 80020c6:	2302      	movs	r3, #2
 80020c8:	e0c1      	b.n	800224e <ES_WIFI_StartClientConnection+0x1ae>

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	785b      	ldrb	r3, [r3, #1]
 80020d4:	461a      	mov	r2, r3
 80020d6:	4960      	ldr	r1, [pc, #384]	@ (8002258 <ES_WIFI_StartClientConnection+0x1b8>)
 80020d8:	f006 fe4e 	bl	8008d78 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80020e8:	461a      	mov	r2, r3
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f7ff fd78 	bl	8001be0 <AT_ExecuteCommand>
 80020f0:	4603      	mov	r3, r0
 80020f2:	73fb      	strb	r3, [r7, #15]

  if (ret == ES_WIFI_STATUS_OK)
 80020f4:	7bfb      	ldrb	r3, [r7, #15]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d114      	bne.n	8002124 <ES_WIFI_StartClientConnection+0x84>
  {
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	461a      	mov	r2, r3
 8002106:	4955      	ldr	r1, [pc, #340]	@ (800225c <ES_WIFI_StartClientConnection+0x1bc>)
 8002108:	f006 fe36 	bl	8008d78 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002118:	461a      	mov	r2, r3
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f7ff fd60 	bl	8001be0 <AT_ExecuteCommand>
 8002120:	4603      	mov	r3, r0
 8002122:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 8002124:	7bfb      	ldrb	r3, [r7, #15]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d114      	bne.n	8002154 <ES_WIFI_StartClientConnection+0xb4>
  {
    sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	889b      	ldrh	r3, [r3, #4]
 8002134:	461a      	mov	r2, r3
 8002136:	494a      	ldr	r1, [pc, #296]	@ (8002260 <ES_WIFI_StartClientConnection+0x1c0>)
 8002138:	f006 fe1e 	bl	8008d78 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002148:	461a      	mov	r2, r3
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f7ff fd48 	bl	8001be0 <AT_ExecuteCommand>
 8002150:	4603      	mov	r3, r0
 8002152:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK)&& ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 8002154:	7bfb      	ldrb	r3, [r7, #15]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d11c      	bne.n	8002194 <ES_WIFI_StartClientConnection+0xf4>
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d003      	beq.n	800216a <ES_WIFI_StartClientConnection+0xca>
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	2b03      	cmp	r3, #3
 8002168:	d114      	bne.n	8002194 <ES_WIFI_StartClientConnection+0xf4>
  {
    sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	885b      	ldrh	r3, [r3, #2]
 8002174:	461a      	mov	r2, r3
 8002176:	493b      	ldr	r1, [pc, #236]	@ (8002264 <ES_WIFI_StartClientConnection+0x1c4>)
 8002178:	f006 fdfe 	bl	8008d78 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002188:	461a      	mov	r2, r3
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f7ff fd28 	bl	8001be0 <AT_ExecuteCommand>
 8002190:	4603      	mov	r3, r0
 8002192:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 8002194:	7bfb      	ldrb	r3, [r7, #15]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d128      	bne.n	80021ec <ES_WIFI_StartClientConnection+0x14c>
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d003      	beq.n	80021aa <ES_WIFI_StartClientConnection+0x10a>
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	2b03      	cmp	r3, #3
 80021a8:	d120      	bne.n	80021ec <ES_WIFI_StartClientConnection+0x14c>
  {
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	799b      	ldrb	r3, [r3, #6]
 80021b4:	4619      	mov	r1, r3
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	79db      	ldrb	r3, [r3, #7]
 80021ba:	461c      	mov	r4, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	7a1b      	ldrb	r3, [r3, #8]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 80021c0:	461a      	mov	r2, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	7a5b      	ldrb	r3, [r3, #9]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 80021c6:	9301      	str	r3, [sp, #4]
 80021c8:	9200      	str	r2, [sp, #0]
 80021ca:	4623      	mov	r3, r4
 80021cc:	460a      	mov	r2, r1
 80021ce:	4926      	ldr	r1, [pc, #152]	@ (8002268 <ES_WIFI_StartClientConnection+0x1c8>)
 80021d0:	f006 fdd2 	bl	8008d78 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80021e0:	461a      	mov	r2, r3
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f7ff fcfc 	bl	8001be0 <AT_ExecuteCommand>
 80021e8:	4603      	mov	r3, r0
 80021ea:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && (conn->Type == ES_WIFI_TCP_SSL_CONNECTION))
 80021ec:	7bfb      	ldrb	r3, [r7, #15]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d116      	bne.n	8002220 <ES_WIFI_StartClientConnection+0x180>
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	2b03      	cmp	r3, #3
 80021f8:	d112      	bne.n	8002220 <ES_WIFI_StartClientConnection+0x180>
  {
    sprintf((char*)Obj->CmdData,"P9=2\r");
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002200:	491a      	ldr	r1, [pc, #104]	@ (800226c <ES_WIFI_StartClientConnection+0x1cc>)
 8002202:	4618      	mov	r0, r3
 8002204:	f006 fdb8 	bl	8008d78 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002214:	461a      	mov	r2, r3
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f7ff fce2 	bl	8001be0 <AT_ExecuteCommand>
 800221c:	4603      	mov	r3, r0
 800221e:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 8002220:	7bfb      	ldrb	r3, [r7, #15]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d112      	bne.n	800224c <ES_WIFI_StartClientConnection+0x1ac>
  {
    sprintf((char*)Obj->CmdData,"P6=1\r");
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800222c:	4910      	ldr	r1, [pc, #64]	@ (8002270 <ES_WIFI_StartClientConnection+0x1d0>)
 800222e:	4618      	mov	r0, r3
 8002230:	f006 fda2 	bl	8008d78 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002240:	461a      	mov	r2, r3
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f7ff fccc 	bl	8001be0 <AT_ExecuteCommand>
 8002248:	4603      	mov	r3, r0
 800224a:	73fb      	strb	r3, [r7, #15]
  }

  UNLOCK_WIFI();
  return ret;
 800224c:	7bfb      	ldrb	r3, [r7, #15]
}
 800224e:	4618      	mov	r0, r3
 8002250:	3714      	adds	r7, #20
 8002252:	46bd      	mov	sp, r7
 8002254:	bd90      	pop	{r4, r7, pc}
 8002256:	bf00      	nop
 8002258:	0800cbf8 	.word	0x0800cbf8
 800225c:	0800cc00 	.word	0x0800cc00
 8002260:	0800cc08 	.word	0x0800cc08
 8002264:	0800cc10 	.word	0x0800cc10
 8002268:	0800cc18 	.word	0x0800cc18
 800226c:	0800cc28 	.word	0x0800cc28
 8002270:	0800cc30 	.word	0x0800cc30

08002274 <ES_WIFI_SendData>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket,
                                  const uint8_t *pdata, uint16_t Reqlen,
                                  uint16_t *SentLen, uint32_t Timeout)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b088      	sub	sp, #32
 8002278:	af02      	add	r7, sp, #8
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	607a      	str	r2, [r7, #4]
 800227e:	461a      	mov	r2, r3
 8002280:	460b      	mov	r3, r1
 8002282:	72fb      	strb	r3, [r7, #11]
 8002284:	4613      	mov	r3, r2
 8002286:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8002288:	2302      	movs	r3, #2
 800228a:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 800228c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800228e:	2b00      	cmp	r3, #0
 8002290:	d102      	bne.n	8002298 <ES_WIFI_SendData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT;
 8002292:	2301      	movs	r3, #1
 8002294:	617b      	str	r3, [r7, #20]
 8002296:	e001      	b.n	800229c <ES_WIFI_SendData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 8002298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800229a:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();

  if (Reqlen >= ES_WIFI_PAYLOAD_SIZE)
 800229c:	893b      	ldrh	r3, [r7, #8]
 800229e:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 80022a2:	d302      	bcc.n	80022aa <ES_WIFI_SendData+0x36>
  {
    Reqlen = ES_WIFI_PAYLOAD_SIZE;
 80022a4:	f44f 6396 	mov.w	r3, #1200	@ 0x4b0
 80022a8:	813b      	strh	r3, [r7, #8]
  }

  *SentLen = Reqlen;
 80022aa:	6a3b      	ldr	r3, [r7, #32]
 80022ac:	893a      	ldrh	r2, [r7, #8]
 80022ae:	801a      	strh	r2, [r3, #0]
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80022b6:	7afa      	ldrb	r2, [r7, #11]
 80022b8:	4942      	ldr	r1, [pc, #264]	@ (80023c4 <ES_WIFI_SendData+0x150>)
 80022ba:	4618      	mov	r0, r3
 80022bc:	f006 fd5c 	bl	8008d78 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80022cc:	461a      	mov	r2, r3
 80022ce:	68f8      	ldr	r0, [r7, #12]
 80022d0:	f7ff fc86 	bl	8001be0 <AT_ExecuteCommand>
 80022d4:	4603      	mov	r3, r0
 80022d6:	74fb      	strb	r3, [r7, #19]
  if (ret == ES_WIFI_STATUS_OK)
 80022d8:	7cfb      	ldrb	r3, [r7, #19]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d15e      	bne.n	800239c <ES_WIFI_SendData+0x128>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",wkgTimeOut);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80022e4:	697a      	ldr	r2, [r7, #20]
 80022e6:	4938      	ldr	r1, [pc, #224]	@ (80023c8 <ES_WIFI_SendData+0x154>)
 80022e8:	4618      	mov	r0, r3
 80022ea:	f006 fd45 	bl	8008d78 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80022fa:	461a      	mov	r2, r3
 80022fc:	68f8      	ldr	r0, [r7, #12]
 80022fe:	f7ff fc6f 	bl	8001be0 <AT_ExecuteCommand>
 8002302:	4603      	mov	r3, r0
 8002304:	74fb      	strb	r3, [r7, #19]

    if (ret == ES_WIFI_STATUS_OK)
 8002306:	7cfb      	ldrb	r3, [r7, #19]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d13d      	bne.n	8002388 <ES_WIFI_SendData+0x114>
    {
      sprintf((char *)Obj->CmdData, "S3=%04d\r", Reqlen);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002312:	893a      	ldrh	r2, [r7, #8]
 8002314:	492d      	ldr	r1, [pc, #180]	@ (80023cc <ES_WIFI_SendData+0x158>)
 8002316:	4618      	mov	r0, r3
 8002318:	f006 fd2e 	bl	8008d78 <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002328:	893a      	ldrh	r2, [r7, #8]
 800232a:	9300      	str	r3, [sp, #0]
 800232c:	4613      	mov	r3, r2
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	68f8      	ldr	r0, [r7, #12]
 8002332:	f7ff fcc5 	bl	8001cc0 <AT_RequestSendData>
 8002336:	4603      	mov	r3, r0
 8002338:	74fb      	strb	r3, [r7, #19]

      if (ret == ES_WIFI_STATUS_OK)
 800233a:	7cfb      	ldrb	r3, [r7, #19]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d119      	bne.n	8002374 <ES_WIFI_SendData+0x100>
      {
        if (strstr((char *)Obj->CmdData, "-1\r\n"))
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002346:	4922      	ldr	r1, [pc, #136]	@ (80023d0 <ES_WIFI_SendData+0x15c>)
 8002348:	4618      	mov	r0, r3
 800234a:	f006 fe97 	bl	800907c <strstr>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d02c      	beq.n	80023ae <ES_WIFI_SendData+0x13a>
        {
          DEBUG("Send Data detect error %s\n", (char *)Obj->CmdData);
 8002354:	f640 1201 	movw	r2, #2305	@ 0x901
 8002358:	491e      	ldr	r1, [pc, #120]	@ (80023d4 <ES_WIFI_SendData+0x160>)
 800235a:	481f      	ldr	r0, [pc, #124]	@ (80023d8 <ES_WIFI_SendData+0x164>)
 800235c:	f006 fc68 	bl	8008c30 <iprintf>
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002366:	4619      	mov	r1, r3
 8002368:	481c      	ldr	r0, [pc, #112]	@ (80023dc <ES_WIFI_SendData+0x168>)
 800236a:	f006 fc61 	bl	8008c30 <iprintf>
          ret = ES_WIFI_STATUS_ERROR;
 800236e:	2302      	movs	r3, #2
 8002370:	74fb      	strb	r3, [r7, #19]
 8002372:	e01c      	b.n	80023ae <ES_WIFI_SendData+0x13a>
        }
      }
      else
      {
        DEBUG("Send Data command failed\n");
 8002374:	f640 1207 	movw	r2, #2311	@ 0x907
 8002378:	4916      	ldr	r1, [pc, #88]	@ (80023d4 <ES_WIFI_SendData+0x160>)
 800237a:	4817      	ldr	r0, [pc, #92]	@ (80023d8 <ES_WIFI_SendData+0x164>)
 800237c:	f006 fc58 	bl	8008c30 <iprintf>
 8002380:	4817      	ldr	r0, [pc, #92]	@ (80023e0 <ES_WIFI_SendData+0x16c>)
 8002382:	f006 fcbd 	bl	8008d00 <puts>
 8002386:	e012      	b.n	80023ae <ES_WIFI_SendData+0x13a>
      }
    }
    else
    {
      DEBUG("S2 command failed\n");
 8002388:	f640 120c 	movw	r2, #2316	@ 0x90c
 800238c:	4911      	ldr	r1, [pc, #68]	@ (80023d4 <ES_WIFI_SendData+0x160>)
 800238e:	4812      	ldr	r0, [pc, #72]	@ (80023d8 <ES_WIFI_SendData+0x164>)
 8002390:	f006 fc4e 	bl	8008c30 <iprintf>
 8002394:	4813      	ldr	r0, [pc, #76]	@ (80023e4 <ES_WIFI_SendData+0x170>)
 8002396:	f006 fcb3 	bl	8008d00 <puts>
 800239a:	e008      	b.n	80023ae <ES_WIFI_SendData+0x13a>
    }
  }
  else
  {
   DEBUG("P0 command failed\n");
 800239c:	f640 1211 	movw	r2, #2321	@ 0x911
 80023a0:	490c      	ldr	r1, [pc, #48]	@ (80023d4 <ES_WIFI_SendData+0x160>)
 80023a2:	480d      	ldr	r0, [pc, #52]	@ (80023d8 <ES_WIFI_SendData+0x164>)
 80023a4:	f006 fc44 	bl	8008c30 <iprintf>
 80023a8:	480f      	ldr	r0, [pc, #60]	@ (80023e8 <ES_WIFI_SendData+0x174>)
 80023aa:	f006 fca9 	bl	8008d00 <puts>
  }

  if (ret == ES_WIFI_STATUS_ERROR)
 80023ae:	7cfb      	ldrb	r3, [r7, #19]
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d102      	bne.n	80023ba <ES_WIFI_SendData+0x146>
  {
    *SentLen = 0;
 80023b4:	6a3b      	ldr	r3, [r7, #32]
 80023b6:	2200      	movs	r2, #0
 80023b8:	801a      	strh	r2, [r3, #0]
  }

  UNLOCK_WIFI();

  return ret;
 80023ba:	7cfb      	ldrb	r3, [r7, #19]
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3718      	adds	r7, #24
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	0800cbf8 	.word	0x0800cbf8
 80023c8:	0800ce10 	.word	0x0800ce10
 80023cc:	0800ce18 	.word	0x0800ce18
 80023d0:	0800ce24 	.word	0x0800ce24
 80023d4:	0800cc88 	.word	0x0800cc88
 80023d8:	0800cd04 	.word	0x0800cd04
 80023dc:	0800ce2c 	.word	0x0800ce2c
 80023e0:	0800ce48 	.word	0x0800ce48
 80023e4:	0800ce64 	.word	0x0800ce64
 80023e8:	0800ce78 	.word	0x0800ce78

080023ec <SPI_WIFI_MspInit>:
  * @brief  Initialize SPI MSP
  * @param  hspi: SPI handle
  * @retval None
  */
void SPI_WIFI_MspInit(SPI_HandleTypeDef* hspi)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b08c      	sub	sp, #48	@ 0x30
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_Init;

  __HAL_RCC_SPI3_CLK_ENABLE();
 80023f4:	4b57      	ldr	r3, [pc, #348]	@ (8002554 <SPI_WIFI_MspInit+0x168>)
 80023f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023f8:	4a56      	ldr	r2, [pc, #344]	@ (8002554 <SPI_WIFI_MspInit+0x168>)
 80023fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80023fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8002400:	4b54      	ldr	r3, [pc, #336]	@ (8002554 <SPI_WIFI_MspInit+0x168>)
 8002402:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002404:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002408:	61bb      	str	r3, [r7, #24]
 800240a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800240c:	4b51      	ldr	r3, [pc, #324]	@ (8002554 <SPI_WIFI_MspInit+0x168>)
 800240e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002410:	4a50      	ldr	r2, [pc, #320]	@ (8002554 <SPI_WIFI_MspInit+0x168>)
 8002412:	f043 0302 	orr.w	r3, r3, #2
 8002416:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002418:	4b4e      	ldr	r3, [pc, #312]	@ (8002554 <SPI_WIFI_MspInit+0x168>)
 800241a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800241c:	f003 0302 	and.w	r3, r3, #2
 8002420:	617b      	str	r3, [r7, #20]
 8002422:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002424:	4b4b      	ldr	r3, [pc, #300]	@ (8002554 <SPI_WIFI_MspInit+0x168>)
 8002426:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002428:	4a4a      	ldr	r2, [pc, #296]	@ (8002554 <SPI_WIFI_MspInit+0x168>)
 800242a:	f043 0304 	orr.w	r3, r3, #4
 800242e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002430:	4b48      	ldr	r3, [pc, #288]	@ (8002554 <SPI_WIFI_MspInit+0x168>)
 8002432:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002434:	f003 0304 	and.w	r3, r3, #4
 8002438:	613b      	str	r3, [r7, #16]
 800243a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800243c:	4b45      	ldr	r3, [pc, #276]	@ (8002554 <SPI_WIFI_MspInit+0x168>)
 800243e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002440:	4a44      	ldr	r2, [pc, #272]	@ (8002554 <SPI_WIFI_MspInit+0x168>)
 8002442:	f043 0310 	orr.w	r3, r3, #16
 8002446:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002448:	4b42      	ldr	r3, [pc, #264]	@ (8002554 <SPI_WIFI_MspInit+0x168>)
 800244a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800244c:	f003 0310 	and.w	r3, r3, #16
 8002450:	60fb      	str	r3, [r7, #12]
 8002452:	68fb      	ldr	r3, [r7, #12]

  /* configure Wake up pin */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 8002454:	2200      	movs	r2, #0
 8002456:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800245a:	483f      	ldr	r0, [pc, #252]	@ (8002558 <SPI_WIFI_MspInit+0x16c>)
 800245c:	f001 fbac 	bl	8003bb8 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_13;
 8002460:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002464:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8002466:	2301      	movs	r3, #1
 8002468:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800246a:	2300      	movs	r3, #0
 800246c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 800246e:	2300      	movs	r3, #0
 8002470:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 8002472:	f107 031c 	add.w	r3, r7, #28
 8002476:	4619      	mov	r1, r3
 8002478:	4837      	ldr	r0, [pc, #220]	@ (8002558 <SPI_WIFI_MspInit+0x16c>)
 800247a:	f001 f9db 	bl	8003834 <HAL_GPIO_Init>

  /* configure Data ready pin */
  GPIO_Init.Pin       = GPIO_PIN_1;
 800247e:	2302      	movs	r3, #2
 8002480:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 8002482:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002486:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8002488:	2300      	movs	r3, #0
 800248a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 800248c:	2300      	movs	r3, #0
 800248e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8002490:	f107 031c 	add.w	r3, r7, #28
 8002494:	4619      	mov	r1, r3
 8002496:	4831      	ldr	r0, [pc, #196]	@ (800255c <SPI_WIFI_MspInit+0x170>)
 8002498:	f001 f9cc 	bl	8003834 <HAL_GPIO_Init>

  /* configure Reset pin */
  GPIO_Init.Pin       = GPIO_PIN_8;
 800249c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80024a0:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80024a2:	2301      	movs	r3, #1
 80024a4:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80024a6:	2300      	movs	r3, #0
 80024a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 80024aa:	2300      	movs	r3, #0
 80024ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init.Alternate = 0;
 80024ae:	2300      	movs	r3, #0
 80024b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 80024b2:	f107 031c 	add.w	r3, r7, #28
 80024b6:	4619      	mov	r1, r3
 80024b8:	4828      	ldr	r0, [pc, #160]	@ (800255c <SPI_WIFI_MspInit+0x170>)
 80024ba:	f001 f9bb 	bl	8003834 <HAL_GPIO_Init>

  /* configure SPI NSS pin pin */
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET );
 80024be:	2201      	movs	r2, #1
 80024c0:	2101      	movs	r1, #1
 80024c2:	4826      	ldr	r0, [pc, #152]	@ (800255c <SPI_WIFI_MspInit+0x170>)
 80024c4:	f001 fb78 	bl	8003bb8 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       =  GPIO_PIN_0;
 80024c8:	2301      	movs	r3, #1
 80024ca:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80024cc:	2301      	movs	r3, #1
 80024ce:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80024d0:	2300      	movs	r3, #0
 80024d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 80024d4:	2301      	movs	r3, #1
 80024d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 80024d8:	f107 031c 	add.w	r3, r7, #28
 80024dc:	4619      	mov	r1, r3
 80024de:	481f      	ldr	r0, [pc, #124]	@ (800255c <SPI_WIFI_MspInit+0x170>)
 80024e0:	f001 f9a8 	bl	8003834 <HAL_GPIO_Init>

  /* configure SPI CLK pin */
  GPIO_Init.Pin       =  GPIO_PIN_10;
 80024e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80024e8:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 80024ea:	2302      	movs	r3, #2
 80024ec:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80024ee:	2300      	movs	r3, #0
 80024f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 80024f2:	2301      	movs	r3, #1
 80024f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 80024f6:	2306      	movs	r3, #6
 80024f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 80024fa:	f107 031c 	add.w	r3, r7, #28
 80024fe:	4619      	mov	r1, r3
 8002500:	4817      	ldr	r0, [pc, #92]	@ (8002560 <SPI_WIFI_MspInit+0x174>)
 8002502:	f001 f997 	bl	8003834 <HAL_GPIO_Init>

  /* configure SPI MOSI pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
 8002506:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800250a:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800250c:	2302      	movs	r3, #2
 800250e:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8002510:	2300      	movs	r3, #0
 8002512:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8002514:	2301      	movs	r3, #1
 8002516:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8002518:	2306      	movs	r3, #6
 800251a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 800251c:	f107 031c 	add.w	r3, r7, #28
 8002520:	4619      	mov	r1, r3
 8002522:	480f      	ldr	r0, [pc, #60]	@ (8002560 <SPI_WIFI_MspInit+0x174>)
 8002524:	f001 f986 	bl	8003834 <HAL_GPIO_Init>

  /* configure SPI MISO pin */
  GPIO_Init.Pin       = GPIO_PIN_11;
 8002528:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800252c:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800252e:	2302      	movs	r3, #2
 8002530:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_PULLUP;
 8002532:	2301      	movs	r3, #1
 8002534:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8002536:	2301      	movs	r3, #1
 8002538:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 800253a:	2306      	movs	r3, #6
 800253c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 800253e:	f107 031c 	add.w	r3, r7, #28
 8002542:	4619      	mov	r1, r3
 8002544:	4806      	ldr	r0, [pc, #24]	@ (8002560 <SPI_WIFI_MspInit+0x174>)
 8002546:	f001 f975 	bl	8003834 <HAL_GPIO_Init>
}
 800254a:	bf00      	nop
 800254c:	3730      	adds	r7, #48	@ 0x30
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	40021000 	.word	0x40021000
 8002558:	48000400 	.word	0x48000400
 800255c:	48001000 	.word	0x48001000
 8002560:	48000800 	.word	0x48000800

08002564 <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(uint16_t mode)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	4603      	mov	r3, r0
 800256c:	80fb      	strh	r3, [r7, #6]
  int8_t  rc=0;
 800256e:	2300      	movs	r3, #0
 8002570:	73fb      	strb	r3, [r7, #15]

  if (mode == ES_WIFI_INIT)
 8002572:	88fb      	ldrh	r3, [r7, #6]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d145      	bne.n	8002604 <SPI_WIFI_Init+0xa0>
  {
    hspi.Instance               = SPI3;
 8002578:	4b27      	ldr	r3, [pc, #156]	@ (8002618 <SPI_WIFI_Init+0xb4>)
 800257a:	4a28      	ldr	r2, [pc, #160]	@ (800261c <SPI_WIFI_Init+0xb8>)
 800257c:	601a      	str	r2, [r3, #0]
    SPI_WIFI_MspInit(&hspi);
 800257e:	4826      	ldr	r0, [pc, #152]	@ (8002618 <SPI_WIFI_Init+0xb4>)
 8002580:	f7ff ff34 	bl	80023ec <SPI_WIFI_MspInit>

    hspi.Init.Mode              = SPI_MODE_MASTER;
 8002584:	4b24      	ldr	r3, [pc, #144]	@ (8002618 <SPI_WIFI_Init+0xb4>)
 8002586:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800258a:	605a      	str	r2, [r3, #4]
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 800258c:	4b22      	ldr	r3, [pc, #136]	@ (8002618 <SPI_WIFI_Init+0xb4>)
 800258e:	2200      	movs	r2, #0
 8002590:	609a      	str	r2, [r3, #8]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 8002592:	4b21      	ldr	r3, [pc, #132]	@ (8002618 <SPI_WIFI_Init+0xb4>)
 8002594:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 8002598:	60da      	str	r2, [r3, #12]
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 800259a:	4b1f      	ldr	r3, [pc, #124]	@ (8002618 <SPI_WIFI_Init+0xb4>)
 800259c:	2200      	movs	r2, #0
 800259e:	611a      	str	r2, [r3, #16]
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 80025a0:	4b1d      	ldr	r3, [pc, #116]	@ (8002618 <SPI_WIFI_Init+0xb4>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	615a      	str	r2, [r3, #20]
    hspi.Init.NSS               = SPI_NSS_SOFT;
 80025a6:	4b1c      	ldr	r3, [pc, #112]	@ (8002618 <SPI_WIFI_Init+0xb4>)
 80025a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80025ac:	619a      	str	r2, [r3, #24]
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 80025ae:	4b1a      	ldr	r3, [pc, #104]	@ (8002618 <SPI_WIFI_Init+0xb4>)
 80025b0:	2210      	movs	r2, #16
 80025b2:	61da      	str	r2, [r3, #28]
    hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 80025b4:	4b18      	ldr	r3, [pc, #96]	@ (8002618 <SPI_WIFI_Init+0xb4>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	621a      	str	r2, [r3, #32]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 80025ba:	4b17      	ldr	r3, [pc, #92]	@ (8002618 <SPI_WIFI_Init+0xb4>)
 80025bc:	2200      	movs	r2, #0
 80025be:	625a      	str	r2, [r3, #36]	@ 0x24
    hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 80025c0:	4b15      	ldr	r3, [pc, #84]	@ (8002618 <SPI_WIFI_Init+0xb4>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	629a      	str	r2, [r3, #40]	@ 0x28
    hspi.Init.CRCPolynomial     = 0;
 80025c6:	4b14      	ldr	r3, [pc, #80]	@ (8002618 <SPI_WIFI_Init+0xb4>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 80025cc:	4812      	ldr	r0, [pc, #72]	@ (8002618 <SPI_WIFI_Init+0xb4>)
 80025ce:	f002 ff4b 	bl	8005468 <HAL_SPI_Init>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d002      	beq.n	80025de <SPI_WIFI_Init+0x7a>
    {
      return -1;
 80025d8:	f04f 33ff 	mov.w	r3, #4294967295
 80025dc:	e018      	b.n	8002610 <SPI_WIFI_Init+0xac>
    }

     /* Enable Interrupt for Data Ready pin , GPIO_PIN1 */
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, SPI_INTERFACE_PRIO, 0x00);
 80025de:	2200      	movs	r2, #0
 80025e0:	2100      	movs	r1, #0
 80025e2:	2007      	movs	r0, #7
 80025e4:	f001 f8af 	bl	8003746 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 80025e8:	2007      	movs	r0, #7
 80025ea:	f001 f8c8 	bl	800377e <HAL_NVIC_EnableIRQ>

     /* Enable Interrupt for SPI tx and rx */
     HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, SPI_INTERFACE_PRIO, 0);
 80025ee:	2200      	movs	r2, #0
 80025f0:	2100      	movs	r1, #0
 80025f2:	2033      	movs	r0, #51	@ 0x33
 80025f4:	f001 f8a7 	bl	8003746 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
 80025f8:	2033      	movs	r0, #51	@ 0x33
 80025fa:	f001 f8c0 	bl	800377e <HAL_NVIC_EnableIRQ>
    SEM_WAIT(cmddata_rdy_rising_sem, 1);
    SEM_WAIT(spi_rx_sem, 1);
    SEM_WAIT(spi_tx_sem, 1);
#endif /* WIFI_USE_CMSIS_OS */
    /* first call used for calibration */
    SPI_WIFI_DelayUs(10);
 80025fe:	200a      	movs	r0, #10
 8002600:	f000 fa08 	bl	8002a14 <SPI_WIFI_DelayUs>
  }

  rc = SPI_WIFI_ResetModule();
 8002604:	f000 f80c 	bl	8002620 <SPI_WIFI_ResetModule>
 8002608:	4603      	mov	r3, r0
 800260a:	73fb      	strb	r3, [r7, #15]

  return rc;
 800260c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002610:	4618      	mov	r0, r3
 8002612:	3710      	adds	r7, #16
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	2000023c 	.word	0x2000023c
 800261c:	40003c00 	.word	0x40003c00

08002620 <SPI_WIFI_ResetModule>:


int8_t SPI_WIFI_ResetModule(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
  uint32_t tickstart = HAL_GetTick();
 8002626:	f000 ff83 	bl	8003530 <HAL_GetTick>
 800262a:	60b8      	str	r0, [r7, #8]
  uint8_t Prompt[6];
  uint8_t count = 0;
 800262c:	2300      	movs	r3, #0
 800262e:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef  Status;

  WIFI_RESET_MODULE();
 8002630:	2200      	movs	r2, #0
 8002632:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002636:	4835      	ldr	r0, [pc, #212]	@ (800270c <SPI_WIFI_ResetModule+0xec>)
 8002638:	f001 fabe 	bl	8003bb8 <HAL_GPIO_WritePin>
 800263c:	200a      	movs	r0, #10
 800263e:	f000 ff83 	bl	8003548 <HAL_Delay>
 8002642:	2201      	movs	r2, #1
 8002644:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002648:	4830      	ldr	r0, [pc, #192]	@ (800270c <SPI_WIFI_ResetModule+0xec>)
 800264a:	f001 fab5 	bl	8003bb8 <HAL_GPIO_WritePin>
 800264e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002652:	f000 ff79 	bl	8003548 <HAL_Delay>
  WIFI_ENABLE_NSS();
 8002656:	2200      	movs	r2, #0
 8002658:	2101      	movs	r1, #1
 800265a:	482c      	ldr	r0, [pc, #176]	@ (800270c <SPI_WIFI_ResetModule+0xec>)
 800265c:	f001 faac 	bl	8003bb8 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8002660:	200f      	movs	r0, #15
 8002662:	f000 f9d7 	bl	8002a14 <SPI_WIFI_DelayUs>

  while (WIFI_IS_CMDDATA_READY())
 8002666:	e02b      	b.n	80026c0 <SPI_WIFI_ResetModule+0xa0>
  {
    if (count > 4)
 8002668:	7bfb      	ldrb	r3, [r7, #15]
 800266a:	2b04      	cmp	r3, #4
 800266c:	d907      	bls.n	800267e <SPI_WIFI_ResetModule+0x5e>
    {
      WIFI_DISABLE_NSS();
 800266e:	2201      	movs	r2, #1
 8002670:	2101      	movs	r1, #1
 8002672:	4826      	ldr	r0, [pc, #152]	@ (800270c <SPI_WIFI_ResetModule+0xec>)
 8002674:	f001 faa0 	bl	8003bb8 <HAL_GPIO_WritePin>
      return -1;
 8002678:	f04f 33ff 	mov.w	r3, #4294967295
 800267c:	e042      	b.n	8002704 <SPI_WIFI_ResetModule+0xe4>
    }
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 800267e:	7bfb      	ldrb	r3, [r7, #15]
 8002680:	463a      	mov	r2, r7
 8002682:	18d1      	adds	r1, r2, r3
 8002684:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002688:	2201      	movs	r2, #1
 800268a:	4821      	ldr	r0, [pc, #132]	@ (8002710 <SPI_WIFI_ResetModule+0xf0>)
 800268c:	f002 fff4 	bl	8005678 <HAL_SPI_Receive>
 8002690:	4603      	mov	r3, r0
 8002692:	71fb      	strb	r3, [r7, #7]
    count += 2;
 8002694:	7bfb      	ldrb	r3, [r7, #15]
 8002696:	3302      	adds	r3, #2
 8002698:	73fb      	strb	r3, [r7, #15]
    if (((HAL_GetTick() - tickstart) > 0xFFFF) || (Status != HAL_OK))
 800269a:	f000 ff49 	bl	8003530 <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026a8:	d202      	bcs.n	80026b0 <SPI_WIFI_ResetModule+0x90>
 80026aa:	79fb      	ldrb	r3, [r7, #7]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d007      	beq.n	80026c0 <SPI_WIFI_ResetModule+0xa0>
    {
      WIFI_DISABLE_NSS();
 80026b0:	2201      	movs	r2, #1
 80026b2:	2101      	movs	r1, #1
 80026b4:	4815      	ldr	r0, [pc, #84]	@ (800270c <SPI_WIFI_ResetModule+0xec>)
 80026b6:	f001 fa7f 	bl	8003bb8 <HAL_GPIO_WritePin>
      return -1;
 80026ba:	f04f 33ff 	mov.w	r3, #4294967295
 80026be:	e021      	b.n	8002704 <SPI_WIFI_ResetModule+0xe4>
  while (WIFI_IS_CMDDATA_READY())
 80026c0:	2102      	movs	r1, #2
 80026c2:	4812      	ldr	r0, [pc, #72]	@ (800270c <SPI_WIFI_ResetModule+0xec>)
 80026c4:	f001 fa60 	bl	8003b88 <HAL_GPIO_ReadPin>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d0cc      	beq.n	8002668 <SPI_WIFI_ResetModule+0x48>
    }
  }

  WIFI_DISABLE_NSS();
 80026ce:	2201      	movs	r2, #1
 80026d0:	2101      	movs	r1, #1
 80026d2:	480e      	ldr	r0, [pc, #56]	@ (800270c <SPI_WIFI_ResetModule+0xec>)
 80026d4:	f001 fa70 	bl	8003bb8 <HAL_GPIO_WritePin>

  if ((Prompt[0] != 0x15) || (Prompt[1] != 0x15) || (Prompt[2] != '\r') ||
 80026d8:	783b      	ldrb	r3, [r7, #0]
 80026da:	2b15      	cmp	r3, #21
 80026dc:	d10e      	bne.n	80026fc <SPI_WIFI_ResetModule+0xdc>
 80026de:	787b      	ldrb	r3, [r7, #1]
 80026e0:	2b15      	cmp	r3, #21
 80026e2:	d10b      	bne.n	80026fc <SPI_WIFI_ResetModule+0xdc>
 80026e4:	78bb      	ldrb	r3, [r7, #2]
 80026e6:	2b0d      	cmp	r3, #13
 80026e8:	d108      	bne.n	80026fc <SPI_WIFI_ResetModule+0xdc>
      (Prompt[3] != '\n') || (Prompt[4] != '>') || (Prompt[5] != ' '))
 80026ea:	78fb      	ldrb	r3, [r7, #3]
  if ((Prompt[0] != 0x15) || (Prompt[1] != 0x15) || (Prompt[2] != '\r') ||
 80026ec:	2b0a      	cmp	r3, #10
 80026ee:	d105      	bne.n	80026fc <SPI_WIFI_ResetModule+0xdc>
      (Prompt[3] != '\n') || (Prompt[4] != '>') || (Prompt[5] != ' '))
 80026f0:	793b      	ldrb	r3, [r7, #4]
 80026f2:	2b3e      	cmp	r3, #62	@ 0x3e
 80026f4:	d102      	bne.n	80026fc <SPI_WIFI_ResetModule+0xdc>
 80026f6:	797b      	ldrb	r3, [r7, #5]
 80026f8:	2b20      	cmp	r3, #32
 80026fa:	d002      	beq.n	8002702 <SPI_WIFI_ResetModule+0xe2>
  {
    return -1;
 80026fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002700:	e000      	b.n	8002704 <SPI_WIFI_ResetModule+0xe4>
  }
  return 0;
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	3710      	adds	r7, #16
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	48001000 	.word	0x48001000
 8002710:	2000023c 	.word	0x2000023c

08002714 <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval 0
  */
int8_t SPI_WIFI_DeInit(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit( &hspi );
 8002718:	4802      	ldr	r0, [pc, #8]	@ (8002724 <SPI_WIFI_DeInit+0x10>)
 800271a:	f002 ff71 	bl	8005600 <HAL_SPI_DeInit>
  osMutexDelete(es_wifi_mutex);
  osSemaphoreDelete(spi_tx_sem);
  osSemaphoreDelete(spi_rx_sem);
  osSemaphoreDelete(cmddata_rdy_rising_sem);
#endif /* WIFI_USE_CMSIS_OS */
  return 0;
 800271e:	2300      	movs	r3, #0
}
 8002720:	4618      	mov	r0, r3
 8002722:	bd80      	pop	{r7, pc}
 8002724:	2000023c 	.word	0x2000023c

08002728 <wait_cmddata_rdy_high>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */
static int wait_cmddata_rdy_high(int timeout)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  int tickstart = HAL_GetTick();
 8002730:	f000 fefe 	bl	8003530 <HAL_GetTick>
 8002734:	4603      	mov	r3, r0
 8002736:	60fb      	str	r3, [r7, #12]
  while (WIFI_IS_CMDDATA_READY() == 0)
 8002738:	e00a      	b.n	8002750 <wait_cmddata_rdy_high+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800273a:	f000 fef9 	bl	8003530 <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	1ad2      	subs	r2, r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	429a      	cmp	r2, r3
 8002748:	d902      	bls.n	8002750 <wait_cmddata_rdy_high+0x28>
    {
      return -1;
 800274a:	f04f 33ff 	mov.w	r3, #4294967295
 800274e:	e007      	b.n	8002760 <wait_cmddata_rdy_high+0x38>
  while (WIFI_IS_CMDDATA_READY() == 0)
 8002750:	2102      	movs	r1, #2
 8002752:	4805      	ldr	r0, [pc, #20]	@ (8002768 <wait_cmddata_rdy_high+0x40>)
 8002754:	f001 fa18 	bl	8003b88 <HAL_GPIO_ReadPin>
 8002758:	4603      	mov	r3, r0
 800275a:	2b01      	cmp	r3, #1
 800275c:	d1ed      	bne.n	800273a <wait_cmddata_rdy_high+0x12>
    }
  }
  return 0;
 800275e:	2300      	movs	r3, #0
}
 8002760:	4618      	mov	r0, r3
 8002762:	3710      	adds	r7, #16
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	48001000 	.word	0x48001000

0800276c <wait_cmddata_rdy_rising_event>:


static int wait_cmddata_rdy_rising_event(int timeout)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(cmddata_rdy_rising_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8002774:	f000 fedc 	bl	8003530 <HAL_GetTick>
 8002778:	4603      	mov	r3, r0
 800277a:	60fb      	str	r3, [r7, #12]
  while (cmddata_rdy_rising_event == 1)
 800277c:	e00a      	b.n	8002794 <wait_cmddata_rdy_rising_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800277e:	f000 fed7 	bl	8003530 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	1ad2      	subs	r2, r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	429a      	cmp	r2, r3
 800278c:	d902      	bls.n	8002794 <wait_cmddata_rdy_rising_event+0x28>
    {
      return -1;
 800278e:	f04f 33ff 	mov.w	r3, #4294967295
 8002792:	e004      	b.n	800279e <wait_cmddata_rdy_rising_event+0x32>
  while (cmddata_rdy_rising_event == 1)
 8002794:	4b04      	ldr	r3, [pc, #16]	@ (80027a8 <wait_cmddata_rdy_rising_event+0x3c>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2b01      	cmp	r3, #1
 800279a:	d0f0      	beq.n	800277e <wait_cmddata_rdy_rising_event+0x12>
    }
  }
  return 0;
 800279c:	2300      	movs	r3, #0
#endif /* SEM_WAIT */
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3710      	adds	r7, #16
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	200002a8 	.word	0x200002a8

080027ac <wait_spi_rx_event>:


static int wait_spi_rx_event(int timeout)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_rx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 80027b4:	f000 febc 	bl	8003530 <HAL_GetTick>
 80027b8:	4603      	mov	r3, r0
 80027ba:	60fb      	str	r3, [r7, #12]
  while (spi_rx_event == 1)
 80027bc:	e00a      	b.n	80027d4 <wait_spi_rx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 80027be:	f000 feb7 	bl	8003530 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	1ad2      	subs	r2, r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d902      	bls.n	80027d4 <wait_spi_rx_event+0x28>
    {
      return -1;
 80027ce:	f04f 33ff 	mov.w	r3, #4294967295
 80027d2:	e004      	b.n	80027de <wait_spi_rx_event+0x32>
  while (spi_rx_event == 1)
 80027d4:	4b04      	ldr	r3, [pc, #16]	@ (80027e8 <wait_spi_rx_event+0x3c>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d0f0      	beq.n	80027be <wait_spi_rx_event+0x12>
    }
  }
  return 0;
 80027dc:	2300      	movs	r3, #0
#endif /* SEM_WAIT */
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	200002a0 	.word	0x200002a0

080027ec <wait_spi_tx_event>:


static int wait_spi_tx_event(int timeout)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_tx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 80027f4:	f000 fe9c 	bl	8003530 <HAL_GetTick>
 80027f8:	4603      	mov	r3, r0
 80027fa:	60fb      	str	r3, [r7, #12]
  while (spi_tx_event == 1)
 80027fc:	e00a      	b.n	8002814 <wait_spi_tx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 80027fe:	f000 fe97 	bl	8003530 <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	1ad2      	subs	r2, r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	429a      	cmp	r2, r3
 800280c:	d902      	bls.n	8002814 <wait_spi_tx_event+0x28>
    {
      return -1;
 800280e:	f04f 33ff 	mov.w	r3, #4294967295
 8002812:	e004      	b.n	800281e <wait_spi_tx_event+0x32>
  while (spi_tx_event == 1)
 8002814:	4b04      	ldr	r3, [pc, #16]	@ (8002828 <wait_spi_tx_event+0x3c>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2b01      	cmp	r3, #1
 800281a:	d0f0      	beq.n	80027fe <wait_spi_tx_event+0x12>
    }
  }
  return 0;
 800281c:	2300      	movs	r3, #0
#endif /* SEM_WAIT */
}
 800281e:	4618      	mov	r0, r3
 8002820:	3710      	adds	r7, #16
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	200002a4 	.word	0x200002a4

0800282c <SPI_WIFI_ReceiveData>:


int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b086      	sub	sp, #24
 8002830:	af00      	add	r7, sp, #0
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	460b      	mov	r3, r1
 8002836:	607a      	str	r2, [r7, #4]
 8002838:	817b      	strh	r3, [r7, #10]
  int16_t length = 0;
 800283a:	2300      	movs	r3, #0
 800283c:	82fb      	strh	r3, [r7, #22]
  uint8_t tmp[2];

  WIFI_DISABLE_NSS();
 800283e:	2201      	movs	r2, #1
 8002840:	2101      	movs	r1, #1
 8002842:	4834      	ldr	r0, [pc, #208]	@ (8002914 <SPI_WIFI_ReceiveData+0xe8>)
 8002844:	f001 f9b8 	bl	8003bb8 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  SPI_WIFI_DelayUs(3);
 8002848:	2003      	movs	r0, #3
 800284a:	f000 f8e3 	bl	8002a14 <SPI_WIFI_DelayUs>

  if (wait_cmddata_rdy_rising_event(timeout) < 0)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4618      	mov	r0, r3
 8002852:	f7ff ff8b 	bl	800276c <wait_cmddata_rdy_rising_event>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	da02      	bge.n	8002862 <SPI_WIFI_ReceiveData+0x36>
  {
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 800285c:	f06f 0302 	mvn.w	r3, #2
 8002860:	e054      	b.n	800290c <SPI_WIFI_ReceiveData+0xe0>
  }

  LOCK_SPI();
  WIFI_ENABLE_NSS();
 8002862:	2200      	movs	r2, #0
 8002864:	2101      	movs	r1, #1
 8002866:	482b      	ldr	r0, [pc, #172]	@ (8002914 <SPI_WIFI_ReceiveData+0xe8>)
 8002868:	f001 f9a6 	bl	8003bb8 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 800286c:	200f      	movs	r0, #15
 800286e:	f000 f8d1 	bl	8002a14 <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 8002872:	e03d      	b.n	80028f0 <SPI_WIFI_ReceiveData+0xc4>
  {
    if ((length < len) || (!len))
 8002874:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002878:	897b      	ldrh	r3, [r7, #10]
 800287a:	429a      	cmp	r2, r3
 800287c:	db02      	blt.n	8002884 <SPI_WIFI_ReceiveData+0x58>
 800287e:	897b      	ldrh	r3, [r7, #10]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d13c      	bne.n	80028fe <SPI_WIFI_ReceiveData+0xd2>
    {
      spi_rx_event = 1;
 8002884:	4b24      	ldr	r3, [pc, #144]	@ (8002918 <SPI_WIFI_ReceiveData+0xec>)
 8002886:	2201      	movs	r2, #1
 8002888:	601a      	str	r2, [r3, #0]
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 800288a:	f107 0314 	add.w	r3, r7, #20
 800288e:	2201      	movs	r2, #1
 8002890:	4619      	mov	r1, r3
 8002892:	4822      	ldr	r0, [pc, #136]	@ (800291c <SPI_WIFI_ReceiveData+0xf0>)
 8002894:	f003 fcd0 	bl	8006238 <HAL_SPI_Receive_IT>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d007      	beq.n	80028ae <SPI_WIFI_ReceiveData+0x82>
        WIFI_DISABLE_NSS();
 800289e:	2201      	movs	r2, #1
 80028a0:	2101      	movs	r1, #1
 80028a2:	481c      	ldr	r0, [pc, #112]	@ (8002914 <SPI_WIFI_ReceiveData+0xe8>)
 80028a4:	f001 f988 	bl	8003bb8 <HAL_GPIO_WritePin>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_SPI_FAILED;
 80028a8:	f04f 33ff 	mov.w	r3, #4294967295
 80028ac:	e02e      	b.n	800290c <SPI_WIFI_ReceiveData+0xe0>
      }

      wait_spi_rx_event(timeout);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7ff ff7b 	bl	80027ac <wait_spi_rx_event>

      pData[0] = tmp[0];
 80028b6:	7d3a      	ldrb	r2, [r7, #20]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	701a      	strb	r2, [r3, #0]
      pData[1] = tmp[1];
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	3301      	adds	r3, #1
 80028c0:	7d7a      	ldrb	r2, [r7, #21]
 80028c2:	701a      	strb	r2, [r3, #0]
      length += 2;
 80028c4:	8afb      	ldrh	r3, [r7, #22]
 80028c6:	3302      	adds	r3, #2
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	82fb      	strh	r3, [r7, #22]
      pData  += 2;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	3302      	adds	r3, #2
 80028d0:	60fb      	str	r3, [r7, #12]

      if (length >= ES_WIFI_DATA_SIZE) {
 80028d2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80028d6:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80028da:	db09      	blt.n	80028f0 <SPI_WIFI_ReceiveData+0xc4>
        WIFI_DISABLE_NSS();
 80028dc:	2201      	movs	r2, #1
 80028de:	2101      	movs	r1, #1
 80028e0:	480c      	ldr	r0, [pc, #48]	@ (8002914 <SPI_WIFI_ReceiveData+0xe8>)
 80028e2:	f001 f969 	bl	8003bb8 <HAL_GPIO_WritePin>
        SPI_WIFI_ResetModule();
 80028e6:	f7ff fe9b 	bl	8002620 <SPI_WIFI_ResetModule>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 80028ea:	f06f 0303 	mvn.w	r3, #3
 80028ee:	e00d      	b.n	800290c <SPI_WIFI_ReceiveData+0xe0>
  while (WIFI_IS_CMDDATA_READY())
 80028f0:	2102      	movs	r1, #2
 80028f2:	4808      	ldr	r0, [pc, #32]	@ (8002914 <SPI_WIFI_ReceiveData+0xe8>)
 80028f4:	f001 f948 	bl	8003b88 <HAL_GPIO_ReadPin>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d0ba      	beq.n	8002874 <SPI_WIFI_ReceiveData+0x48>
    else
    {
      break;
    }
  }
  WIFI_DISABLE_NSS();
 80028fe:	2201      	movs	r2, #1
 8002900:	2101      	movs	r1, #1
 8002902:	4804      	ldr	r0, [pc, #16]	@ (8002914 <SPI_WIFI_ReceiveData+0xe8>)
 8002904:	f001 f958 	bl	8003bb8 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  return length;
 8002908:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 800290c:	4618      	mov	r0, r3
 800290e:	3718      	adds	r7, #24
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	48001000 	.word	0x48001000
 8002918:	200002a0 	.word	0x200002a0
 800291c:	2000023c 	.word	0x2000023c

08002920 <SPI_WIFI_SendData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData(const uint8_t *pdata, uint16_t len, uint32_t timeout)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b086      	sub	sp, #24
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	460b      	mov	r3, r1
 800292a:	607a      	str	r2, [r7, #4]
 800292c:	817b      	strh	r3, [r7, #10]
  uint8_t Padding[2];

  if (wait_cmddata_rdy_high(timeout) < 0)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4618      	mov	r0, r3
 8002932:	f7ff fef9 	bl	8002728 <wait_cmddata_rdy_high>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	da02      	bge.n	8002942 <SPI_WIFI_SendData+0x22>
  {
    return ES_WIFI_ERROR_SPI_FAILED;
 800293c:	f04f 33ff 	mov.w	r3, #4294967295
 8002940:	e04f      	b.n	80029e2 <SPI_WIFI_SendData+0xc2>
  }

  /* arm to detect rising event */
  cmddata_rdy_rising_event = 1;
 8002942:	4b2a      	ldr	r3, [pc, #168]	@ (80029ec <SPI_WIFI_SendData+0xcc>)
 8002944:	2201      	movs	r2, #1
 8002946:	601a      	str	r2, [r3, #0]
  LOCK_SPI();
  WIFI_ENABLE_NSS();
 8002948:	2200      	movs	r2, #0
 800294a:	2101      	movs	r1, #1
 800294c:	4828      	ldr	r0, [pc, #160]	@ (80029f0 <SPI_WIFI_SendData+0xd0>)
 800294e:	f001 f933 	bl	8003bb8 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8002952:	200f      	movs	r0, #15
 8002954:	f000 f85e 	bl	8002a14 <SPI_WIFI_DelayUs>
  if (len > 1)
 8002958:	897b      	ldrh	r3, [r7, #10]
 800295a:	2b01      	cmp	r3, #1
 800295c:	d919      	bls.n	8002992 <SPI_WIFI_SendData+0x72>
  {
    spi_tx_event = 1;
 800295e:	4b25      	ldr	r3, [pc, #148]	@ (80029f4 <SPI_WIFI_SendData+0xd4>)
 8002960:	2201      	movs	r2, #1
 8002962:	601a      	str	r2, [r3, #0]
    if (HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len / 2) != HAL_OK)
 8002964:	897b      	ldrh	r3, [r7, #10]
 8002966:	085b      	lsrs	r3, r3, #1
 8002968:	b29b      	uxth	r3, r3
 800296a:	461a      	mov	r2, r3
 800296c:	68f9      	ldr	r1, [r7, #12]
 800296e:	4822      	ldr	r0, [pc, #136]	@ (80029f8 <SPI_WIFI_SendData+0xd8>)
 8002970:	f003 fbc6 	bl	8006100 <HAL_SPI_Transmit_IT>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d007      	beq.n	800298a <SPI_WIFI_SendData+0x6a>
    {
      WIFI_DISABLE_NSS();
 800297a:	2201      	movs	r2, #1
 800297c:	2101      	movs	r1, #1
 800297e:	481c      	ldr	r0, [pc, #112]	@ (80029f0 <SPI_WIFI_SendData+0xd0>)
 8002980:	f001 f91a 	bl	8003bb8 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8002984:	f04f 33ff 	mov.w	r3, #4294967295
 8002988:	e02b      	b.n	80029e2 <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4618      	mov	r0, r3
 800298e:	f7ff ff2d 	bl	80027ec <wait_spi_tx_event>
  }

  if (len & 1)
 8002992:	897b      	ldrh	r3, [r7, #10]
 8002994:	f003 0301 	and.w	r3, r3, #1
 8002998:	2b00      	cmp	r3, #0
 800299a:	d020      	beq.n	80029de <SPI_WIFI_SendData+0xbe>
  {
    Padding[0] = pdata[len - 1];
 800299c:	897b      	ldrh	r3, [r7, #10]
 800299e:	3b01      	subs	r3, #1
 80029a0:	68fa      	ldr	r2, [r7, #12]
 80029a2:	4413      	add	r3, r2
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	753b      	strb	r3, [r7, #20]
    Padding[1] = '\n';
 80029a8:	230a      	movs	r3, #10
 80029aa:	757b      	strb	r3, [r7, #21]

    spi_tx_event=1;
 80029ac:	4b11      	ldr	r3, [pc, #68]	@ (80029f4 <SPI_WIFI_SendData+0xd4>)
 80029ae:	2201      	movs	r2, #1
 80029b0:	601a      	str	r2, [r3, #0]
    if (HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 80029b2:	f107 0314 	add.w	r3, r7, #20
 80029b6:	2201      	movs	r2, #1
 80029b8:	4619      	mov	r1, r3
 80029ba:	480f      	ldr	r0, [pc, #60]	@ (80029f8 <SPI_WIFI_SendData+0xd8>)
 80029bc:	f003 fba0 	bl	8006100 <HAL_SPI_Transmit_IT>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d007      	beq.n	80029d6 <SPI_WIFI_SendData+0xb6>
    {
      WIFI_DISABLE_NSS();
 80029c6:	2201      	movs	r2, #1
 80029c8:	2101      	movs	r1, #1
 80029ca:	4809      	ldr	r0, [pc, #36]	@ (80029f0 <SPI_WIFI_SendData+0xd0>)
 80029cc:	f001 f8f4 	bl	8003bb8 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 80029d0:	f04f 33ff 	mov.w	r3, #4294967295
 80029d4:	e005      	b.n	80029e2 <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4618      	mov	r0, r3
 80029da:	f7ff ff07 	bl	80027ec <wait_spi_tx_event>
  }
  return len;
 80029de:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3718      	adds	r7, #24
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	200002a8 	.word	0x200002a8
 80029f0:	48001000 	.word	0x48001000
 80029f4:	200002a4 	.word	0x200002a4
 80029f8:	2000023c 	.word	0x2000023c

080029fc <SPI_WIFI_Delay>:
  * @brief  Delay
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f000 fd9f 	bl	8003548 <HAL_Delay>
}
 8002a0a:	bf00      	nop
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
	...

08002a14 <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b086      	sub	sp, #24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  volatile        uint32_t ct = 0;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	60bb      	str	r3, [r7, #8]
  uint32_t        loop_per_us = 0;
 8002a20:	2300      	movs	r3, #0
 8002a22:	617b      	str	r3, [r7, #20]
  static uint32_t cycle_per_loop = 0;

  /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
  /* 10 cycle for STM32L4 */
  if (cycle_per_loop == 0)
 8002a24:	4b20      	ldr	r3, [pc, #128]	@ (8002aa8 <SPI_WIFI_DelayUs+0x94>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d122      	bne.n	8002a72 <SPI_WIFI_DelayUs+0x5e>
  {
     uint32_t cycle_per_ms = (SystemCoreClock / 1000UL);
 8002a2c:	4b1f      	ldr	r3, [pc, #124]	@ (8002aac <SPI_WIFI_DelayUs+0x98>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a1f      	ldr	r2, [pc, #124]	@ (8002ab0 <SPI_WIFI_DelayUs+0x9c>)
 8002a32:	fba2 2303 	umull	r2, r3, r2, r3
 8002a36:	099b      	lsrs	r3, r3, #6
 8002a38:	613b      	str	r3, [r7, #16]
     uint32_t t = 0;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	60fb      	str	r3, [r7, #12]
     ct = cycle_per_ms;
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	60bb      	str	r3, [r7, #8]
     t = HAL_GetTick();
 8002a42:	f000 fd75 	bl	8003530 <HAL_GetTick>
 8002a46:	60f8      	str	r0, [r7, #12]
     while(ct) ct--;
 8002a48:	e002      	b.n	8002a50 <SPI_WIFI_DelayUs+0x3c>
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	3b01      	subs	r3, #1
 8002a4e:	60bb      	str	r3, [r7, #8]
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1f9      	bne.n	8002a4a <SPI_WIFI_DelayUs+0x36>
     cycle_per_loop = HAL_GetTick() - t;
 8002a56:	f000 fd6b 	bl	8003530 <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	4a11      	ldr	r2, [pc, #68]	@ (8002aa8 <SPI_WIFI_DelayUs+0x94>)
 8002a62:	6013      	str	r3, [r2, #0]
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 8002a64:	4b10      	ldr	r3, [pc, #64]	@ (8002aa8 <SPI_WIFI_DelayUs+0x94>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d102      	bne.n	8002a72 <SPI_WIFI_DelayUs+0x5e>
 8002a6c:	4b0e      	ldr	r3, [pc, #56]	@ (8002aa8 <SPI_WIFI_DelayUs+0x94>)
 8002a6e:	2201      	movs	r2, #1
 8002a70:	601a      	str	r2, [r3, #0]
  }

  loop_per_us = SystemCoreClock/1000000UL/cycle_per_loop;
 8002a72:	4b0e      	ldr	r3, [pc, #56]	@ (8002aac <SPI_WIFI_DelayUs+0x98>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a0f      	ldr	r2, [pc, #60]	@ (8002ab4 <SPI_WIFI_DelayUs+0xa0>)
 8002a78:	fba2 2303 	umull	r2, r3, r2, r3
 8002a7c:	0c9a      	lsrs	r2, r3, #18
 8002a7e:	4b0a      	ldr	r3, [pc, #40]	@ (8002aa8 <SPI_WIFI_DelayUs+0x94>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a86:	617b      	str	r3, [r7, #20]
  ct = n * loop_per_us;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	697a      	ldr	r2, [r7, #20]
 8002a8c:	fb02 f303 	mul.w	r3, r2, r3
 8002a90:	60bb      	str	r3, [r7, #8]
  while(ct) ct--;
 8002a92:	e002      	b.n	8002a9a <SPI_WIFI_DelayUs+0x86>
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	3b01      	subs	r3, #1
 8002a98:	60bb      	str	r3, [r7, #8]
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d1f9      	bne.n	8002a94 <SPI_WIFI_DelayUs+0x80>
  return;
 8002aa0:	bf00      	nop
}
 8002aa2:	3718      	adds	r7, #24
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	200002ac 	.word	0x200002ac
 8002aac:	20000048 	.word	0x20000048
 8002ab0:	10624dd3 	.word	0x10624dd3
 8002ab4:	431bde83 	.word	0x431bde83

08002ab8 <HAL_SPI_RxCpltCallback>:
  *               the configuration information for the SPI module.
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  if (spi_rx_event)
 8002ac0:	4b06      	ldr	r3, [pc, #24]	@ (8002adc <HAL_SPI_RxCpltCallback+0x24>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d002      	beq.n	8002ace <HAL_SPI_RxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event = 0;
 8002ac8:	4b04      	ldr	r3, [pc, #16]	@ (8002adc <HAL_SPI_RxCpltCallback+0x24>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	601a      	str	r2, [r3, #0]
  }
}
 8002ace:	bf00      	nop
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	200002a0 	.word	0x200002a0

08002ae0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  if (spi_tx_event)
 8002ae8:	4b06      	ldr	r3, [pc, #24]	@ (8002b04 <HAL_SPI_TxCpltCallback+0x24>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d002      	beq.n	8002af6 <HAL_SPI_TxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event = 0;
 8002af0:	4b04      	ldr	r3, [pc, #16]	@ (8002b04 <HAL_SPI_TxCpltCallback+0x24>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	601a      	str	r2, [r3, #0]
  }
}
 8002af6:	bf00      	nop
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	200002a4 	.word	0x200002a4

08002b08 <SPI_WIFI_ISR>:
  * @brief  Interrupt handler for CMDDATARDY input signal
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
   if (cmddata_rdy_rising_event == 1)
 8002b0c:	4b05      	ldr	r3, [pc, #20]	@ (8002b24 <SPI_WIFI_ISR+0x1c>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d102      	bne.n	8002b1a <SPI_WIFI_ISR+0x12>
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event = 0;
 8002b14:	4b03      	ldr	r3, [pc, #12]	@ (8002b24 <SPI_WIFI_ISR+0x1c>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	601a      	str	r2, [r3, #0]
   }
}
 8002b1a:	bf00      	nop
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr
 8002b24:	200002a8 	.word	0x200002a8

08002b28 <WIFI_Init>:
  * @brief  Initialize the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af02      	add	r7, sp, #8
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	71fb      	strb	r3, [r7, #7]

  if(ES_WIFI_RegisterBusIO(&EsWifiObj,
 8002b32:	4b0d      	ldr	r3, [pc, #52]	@ (8002b68 <WIFI_Init+0x40>)
 8002b34:	9301      	str	r3, [sp, #4]
 8002b36:	4b0d      	ldr	r3, [pc, #52]	@ (8002b6c <WIFI_Init+0x44>)
 8002b38:	9300      	str	r3, [sp, #0]
 8002b3a:	4b0d      	ldr	r3, [pc, #52]	@ (8002b70 <WIFI_Init+0x48>)
 8002b3c:	4a0d      	ldr	r2, [pc, #52]	@ (8002b74 <WIFI_Init+0x4c>)
 8002b3e:	490e      	ldr	r1, [pc, #56]	@ (8002b78 <WIFI_Init+0x50>)
 8002b40:	480e      	ldr	r0, [pc, #56]	@ (8002b7c <WIFI_Init+0x54>)
 8002b42:	f7ff f971 	bl	8001e28 <ES_WIFI_RegisterBusIO>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d107      	bne.n	8002b5c <WIFI_Init+0x34>
                           SPI_WIFI_DeInit,
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8002b4c:	480b      	ldr	r0, [pc, #44]	@ (8002b7c <WIFI_Init+0x54>)
 8002b4e:	f7ff f937 	bl	8001dc0 <ES_WIFI_Init>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d101      	bne.n	8002b5c <WIFI_Init+0x34>
    {
      ret = WIFI_STATUS_OK;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	71fb      	strb	r3, [r7, #7]
    }
  }
  return ret;
 8002b5c:	79fb      	ldrb	r3, [r7, #7]
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3708      	adds	r7, #8
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	0800282d 	.word	0x0800282d
 8002b6c:	08002921 	.word	0x08002921
 8002b70:	080029fd 	.word	0x080029fd
 8002b74:	08002715 	.word	0x08002715
 8002b78:	08002565 	.word	0x08002565
 8002b7c:	200002b0 	.word	0x200002b0

08002b80 <WIFI_Connect>:
  * @param  Password : Password string
  * @param  ecn : Encryption type
  * @retval Operation status
  */
WIFI_Status_t WIFI_Connect(const char* SSID, const char* Password, WIFI_Ecn_t ecn)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b086      	sub	sp, #24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	71fb      	strb	r3, [r7, #7]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 8002b92:	79fb      	ldrb	r3, [r7, #7]
 8002b94:	68ba      	ldr	r2, [r7, #8]
 8002b96:	68f9      	ldr	r1, [r7, #12]
 8002b98:	4809      	ldr	r0, [pc, #36]	@ (8002bc0 <WIFI_Connect+0x40>)
 8002b9a:	f7ff f979 	bl	8001e90 <ES_WIFI_Connect>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d107      	bne.n	8002bb4 <WIFI_Connect+0x34>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8002ba4:	4806      	ldr	r0, [pc, #24]	@ (8002bc0 <WIFI_Connect+0x40>)
 8002ba6:	f7ff fa1b 	bl	8001fe0 <ES_WIFI_GetNetworkSettings>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d101      	bne.n	8002bb4 <WIFI_Connect+0x34>
    {
       ret = WIFI_STATUS_OK;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	75fb      	strb	r3, [r7, #23]
    }
  }
  return ret;
 8002bb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3718      	adds	r7, #24
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	200002b0 	.word	0x200002b0

08002bc4 <WIFI_GetMAC_Address>:
/**
  * @brief  This function retrieves the WiFi interface's MAC address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetMAC_Address(uint8_t *mac, uint8_t MacLength)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	460b      	mov	r3, r1
 8002bce:	70fb      	strb	r3, [r7, #3]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	73fb      	strb	r3, [r7, #15]

  if ((mac != NULL) && (0 < MacLength))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00d      	beq.n	8002bf6 <WIFI_GetMAC_Address+0x32>
 8002bda:	78fb      	ldrb	r3, [r7, #3]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d00a      	beq.n	8002bf6 <WIFI_GetMAC_Address+0x32>
  {
    if(ES_WIFI_GetMACAddress(&EsWifiObj, mac, MacLength) == ES_WIFI_STATUS_OK)
 8002be0:	78fb      	ldrb	r3, [r7, #3]
 8002be2:	461a      	mov	r2, r3
 8002be4:	6879      	ldr	r1, [r7, #4]
 8002be6:	4806      	ldr	r0, [pc, #24]	@ (8002c00 <WIFI_GetMAC_Address+0x3c>)
 8002be8:	f7ff fa24 	bl	8002034 <ES_WIFI_GetMACAddress>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d101      	bne.n	8002bf6 <WIFI_GetMAC_Address+0x32>
    {
      ret = WIFI_STATUS_OK;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 8002bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3710      	adds	r7, #16
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	200002b0 	.word	0x200002b0

08002c04 <WIFI_GetIP_Address>:
/**
  * @brief  This function retrieves the WiFi interface's IP address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetIP_Address(uint8_t *ipaddr, uint8_t IpAddrLength)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	70fb      	strb	r3, [r7, #3]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	73fb      	strb	r3, [r7, #15]

  if ((ipaddr != NULL) && (4 <= IpAddrLength))
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d010      	beq.n	8002c3c <WIFI_GetIP_Address+0x38>
 8002c1a:	78fb      	ldrb	r3, [r7, #3]
 8002c1c:	2b03      	cmp	r3, #3
 8002c1e:	d90d      	bls.n	8002c3c <WIFI_GetIP_Address+0x38>
  {
    if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 8002c20:	4809      	ldr	r0, [pc, #36]	@ (8002c48 <WIFI_GetIP_Address+0x44>)
 8002c22:	f7ff f9ad 	bl	8001f80 <ES_WIFI_IsConnected>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d107      	bne.n	8002c3c <WIFI_GetIP_Address+0x38>
    {
      memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 8002c2c:	4b06      	ldr	r3, [pc, #24]	@ (8002c48 <WIFI_GetIP_Address+0x44>)
 8002c2e:	f8d3 30d5 	ldr.w	r3, [r3, #213]	@ 0xd5
 8002c32:	461a      	mov	r2, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	601a      	str	r2, [r3, #0]
      ret = WIFI_STATUS_OK;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 8002c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3710      	adds	r7, #16
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	200002b0 	.word	0x200002b0

08002c4c <WIFI_OpenClientConnection>:
  * @param  local_port : Local port
  * @retval Operation status
  */
WIFI_Status_t WIFI_OpenClientConnection(uint32_t socket, WIFI_Protocol_t type, const char *name,
                                        const uint8_t *ipaddr, uint16_t port, uint16_t local_port)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b08a      	sub	sp, #40	@ 0x28
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	607a      	str	r2, [r7, #4]
 8002c56:	603b      	str	r3, [r7, #0]
 8002c58:	460b      	mov	r3, r1
 8002c5a:	72fb      	strb	r3, [r7, #11]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  ES_WIFI_Conn_t conn;

  conn.Number = (uint8_t)socket;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	747b      	strb	r3, [r7, #17]
  conn.RemotePort = port;
 8002c68:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002c6a:	827b      	strh	r3, [r7, #18]
  conn.LocalPort = local_port;
 8002c6c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8002c6e:	82bb      	strh	r3, [r7, #20]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8002c70:	7afb      	ldrb	r3, [r7, #11]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	bf14      	ite	ne
 8002c76:	2301      	movne	r3, #1
 8002c78:	2300      	moveq	r3, #0
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	743b      	strb	r3, [r7, #16]
  conn.RemoteIP[0] = ipaddr[0];
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	75bb      	strb	r3, [r7, #22]
  conn.RemoteIP[1] = ipaddr[1];
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	3301      	adds	r3, #1
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	75fb      	strb	r3, [r7, #23]
  conn.RemoteIP[2] = ipaddr[2];
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	3302      	adds	r3, #2
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	763b      	strb	r3, [r7, #24]
  conn.RemoteIP[3] = ipaddr[3];
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	3303      	adds	r3, #3
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	767b      	strb	r3, [r7, #25]

  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8002c9c:	f107 0310 	add.w	r3, r7, #16
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	4807      	ldr	r0, [pc, #28]	@ (8002cc0 <WIFI_OpenClientConnection+0x74>)
 8002ca4:	f7ff f9fc 	bl	80020a0 <ES_WIFI_StartClientConnection>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d102      	bne.n	8002cb4 <WIFI_OpenClientConnection+0x68>
  {
    ret = WIFI_STATUS_OK;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  return ret;
 8002cb4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3728      	adds	r7, #40	@ 0x28
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	200002b0 	.word	0x200002b0

08002cc4 <WIFI_SendData>:
  * @param  Timeout : Socket write timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendData(uint32_t socket, const uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen,
                            uint32_t Timeout)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b088      	sub	sp, #32
 8002cc8:	af02      	add	r7, sp, #8
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	603b      	str	r3, [r7, #0]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	80fb      	strh	r3, [r7, #6]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	75fb      	strb	r3, [r7, #23]

    if (ES_WIFI_SendData(&EsWifiObj, (uint8_t)socket, pdata, Reqlen, SentDatalen, Timeout) == ES_WIFI_STATUS_OK)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	b2d9      	uxtb	r1, r3
 8002cdc:	88fa      	ldrh	r2, [r7, #6]
 8002cde:	6a3b      	ldr	r3, [r7, #32]
 8002ce0:	9301      	str	r3, [sp, #4]
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	9300      	str	r3, [sp, #0]
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	68ba      	ldr	r2, [r7, #8]
 8002cea:	4806      	ldr	r0, [pc, #24]	@ (8002d04 <WIFI_SendData+0x40>)
 8002cec:	f7ff fac2 	bl	8002274 <ES_WIFI_SendData>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d101      	bne.n	8002cfa <WIFI_SendData+0x36>
    {
      ret = WIFI_STATUS_OK;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	75fb      	strb	r3, [r7, #23]
    }

  return ret;
 8002cfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3718      	adds	r7, #24
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	200002b0 	.word	0x200002b0

08002d08 <BSP_LED_Init>:
  * @param  Led  LED to be initialized. 
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b088      	sub	sp, #32
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	4603      	mov	r3, r0
 8002d10:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;
  
  LEDx_GPIO_CLK_ENABLE(Led);
 8002d12:	79fb      	ldrb	r3, [r7, #7]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d10b      	bne.n	8002d30 <BSP_LED_Init+0x28>
 8002d18:	4b11      	ldr	r3, [pc, #68]	@ (8002d60 <BSP_LED_Init+0x58>)
 8002d1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d1c:	4a10      	ldr	r2, [pc, #64]	@ (8002d60 <BSP_LED_Init+0x58>)
 8002d1e:	f043 0302 	orr.w	r3, r3, #2
 8002d22:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d24:	4b0e      	ldr	r3, [pc, #56]	@ (8002d60 <BSP_LED_Init+0x58>)
 8002d26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	60bb      	str	r3, [r7, #8]
 8002d2e:	68bb      	ldr	r3, [r7, #8]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
 8002d30:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002d34:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002d36:	2301      	movs	r3, #1
 8002d38:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d3e:	2302      	movs	r3, #2
 8002d40:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 8002d42:	79fb      	ldrb	r3, [r7, #7]
 8002d44:	4a07      	ldr	r2, [pc, #28]	@ (8002d64 <BSP_LED_Init+0x5c>)
 8002d46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d4a:	f107 020c 	add.w	r2, r7, #12
 8002d4e:	4611      	mov	r1, r2
 8002d50:	4618      	mov	r0, r3
 8002d52:	f000 fd6f 	bl	8003834 <HAL_GPIO_Init>
}
 8002d56:	bf00      	nop
 8002d58:	3720      	adds	r7, #32
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	40021000 	.word	0x40021000
 8002d64:	20000004 	.word	0x20000004

08002d68 <BSP_LED_On>:
  * @param  Led  LED to be set on 
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	4603      	mov	r3, r0
 8002d70:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8002d72:	79fb      	ldrb	r3, [r7, #7]
 8002d74:	4a06      	ldr	r2, [pc, #24]	@ (8002d90 <BSP_LED_On+0x28>)
 8002d76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d7a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002d7e:	b291      	uxth	r1, r2
 8002d80:	2201      	movs	r2, #1
 8002d82:	4618      	mov	r0, r3
 8002d84:	f000 ff18 	bl	8003bb8 <HAL_GPIO_WritePin>
}
 8002d88:	bf00      	nop
 8002d8a:	3708      	adds	r7, #8
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	20000004 	.word	0x20000004

08002d94 <BSP_COM_Init>:
  *                @arg  COM1 
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains the
  *                configuration information for the specified USART peripheral.
  */
void BSP_COM_Init(COM_TypeDef COM, UART_HandleTypeDef *huart)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b08a      	sub	sp, #40	@ 0x28
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	6039      	str	r1, [r7, #0]
 8002d9e:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable GPIO clock */
  DISCOVERY_COMx_TX_GPIO_CLK_ENABLE(COM);
 8002da0:	79fb      	ldrb	r3, [r7, #7]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d10b      	bne.n	8002dbe <BSP_COM_Init+0x2a>
 8002da6:	4b2d      	ldr	r3, [pc, #180]	@ (8002e5c <BSP_COM_Init+0xc8>)
 8002da8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002daa:	4a2c      	ldr	r2, [pc, #176]	@ (8002e5c <BSP_COM_Init+0xc8>)
 8002dac:	f043 0302 	orr.w	r3, r3, #2
 8002db0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002db2:	4b2a      	ldr	r3, [pc, #168]	@ (8002e5c <BSP_COM_Init+0xc8>)
 8002db4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	613b      	str	r3, [r7, #16]
 8002dbc:	693b      	ldr	r3, [r7, #16]
  DISCOVERY_COMx_RX_GPIO_CLK_ENABLE(COM);
 8002dbe:	79fb      	ldrb	r3, [r7, #7]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d10b      	bne.n	8002ddc <BSP_COM_Init+0x48>
 8002dc4:	4b25      	ldr	r3, [pc, #148]	@ (8002e5c <BSP_COM_Init+0xc8>)
 8002dc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dc8:	4a24      	ldr	r2, [pc, #144]	@ (8002e5c <BSP_COM_Init+0xc8>)
 8002dca:	f043 0302 	orr.w	r3, r3, #2
 8002dce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002dd0:	4b22      	ldr	r3, [pc, #136]	@ (8002e5c <BSP_COM_Init+0xc8>)
 8002dd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dd4:	f003 0302 	and.w	r3, r3, #2
 8002dd8:	60fb      	str	r3, [r7, #12]
 8002dda:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  DISCOVERY_COMx_CLK_ENABLE(COM);
 8002ddc:	79fb      	ldrb	r3, [r7, #7]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10b      	bne.n	8002dfa <BSP_COM_Init+0x66>
 8002de2:	4b1e      	ldr	r3, [pc, #120]	@ (8002e5c <BSP_COM_Init+0xc8>)
 8002de4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002de6:	4a1d      	ldr	r2, [pc, #116]	@ (8002e5c <BSP_COM_Init+0xc8>)
 8002de8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002dec:	6613      	str	r3, [r2, #96]	@ 0x60
 8002dee:	4b1b      	ldr	r3, [pc, #108]	@ (8002e5c <BSP_COM_Init+0xc8>)
 8002df0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002df2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002df6:	60bb      	str	r3, [r7, #8]
 8002df8:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM_TX_PIN[COM];
 8002dfa:	2340      	movs	r3, #64	@ 0x40
 8002dfc:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002dfe:	2302      	movs	r3, #2
 8002e00:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e02:	2302      	movs	r3, #2
 8002e04:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8002e06:	2300      	movs	r3, #0
 8002e08:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM_TX_AF[COM];
 8002e0a:	2307      	movs	r3, #7
 8002e0c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 8002e0e:	79fb      	ldrb	r3, [r7, #7]
 8002e10:	4a13      	ldr	r2, [pc, #76]	@ (8002e60 <BSP_COM_Init+0xcc>)
 8002e12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e16:	f107 0214 	add.w	r2, r7, #20
 8002e1a:	4611      	mov	r1, r2
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f000 fd09 	bl	8003834 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM_RX_PIN[COM];
 8002e22:	2380      	movs	r3, #128	@ 0x80
 8002e24:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002e26:	2302      	movs	r3, #2
 8002e28:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM_RX_AF[COM];
 8002e2a:	2307      	movs	r3, #7
 8002e2c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 8002e2e:	79fb      	ldrb	r3, [r7, #7]
 8002e30:	4a0c      	ldr	r2, [pc, #48]	@ (8002e64 <BSP_COM_Init+0xd0>)
 8002e32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e36:	f107 0214 	add.w	r2, r7, #20
 8002e3a:	4611      	mov	r1, r2
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f000 fcf9 	bl	8003834 <HAL_GPIO_Init>

  /* USART configuration */
  huart->Instance = COM_USART[COM];
 8002e42:	79fb      	ldrb	r3, [r7, #7]
 8002e44:	4a08      	ldr	r2, [pc, #32]	@ (8002e68 <BSP_COM_Init+0xd4>)
 8002e46:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	601a      	str	r2, [r3, #0]
  HAL_UART_Init(huart);
 8002e4e:	6838      	ldr	r0, [r7, #0]
 8002e50:	f004 fa0d 	bl	800726e <HAL_UART_Init>
}
 8002e54:	bf00      	nop
 8002e56:	3728      	adds	r7, #40	@ 0x28
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	40021000 	.word	0x40021000
 8002e60:	2000000c 	.word	0x2000000c
 8002e64:	20000010 	.word	0x20000010
 8002e68:	20000008 	.word	0x20000008

08002e6c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b08a      	sub	sp, #40	@ 0x28
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002e74:	4b27      	ldr	r3, [pc, #156]	@ (8002f14 <I2Cx_MspInit+0xa8>)
 8002e76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e78:	4a26      	ldr	r2, [pc, #152]	@ (8002f14 <I2Cx_MspInit+0xa8>)
 8002e7a:	f043 0302 	orr.w	r3, r3, #2
 8002e7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e80:	4b24      	ldr	r3, [pc, #144]	@ (8002f14 <I2Cx_MspInit+0xa8>)
 8002e82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e84:	f003 0302 	and.w	r3, r3, #2
 8002e88:	613b      	str	r3, [r7, #16]
 8002e8a:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8002e8c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002e90:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002e92:	2312      	movs	r3, #18
 8002e94:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8002e96:	2301      	movs	r3, #1
 8002e98:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8002e9e:	2304      	movs	r3, #4
 8002ea0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002ea2:	f107 0314 	add.w	r3, r7, #20
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	481b      	ldr	r0, [pc, #108]	@ (8002f18 <I2Cx_MspInit+0xac>)
 8002eaa:	f000 fcc3 	bl	8003834 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002eae:	f107 0314 	add.w	r3, r7, #20
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	4818      	ldr	r0, [pc, #96]	@ (8002f18 <I2Cx_MspInit+0xac>)
 8002eb6:	f000 fcbd 	bl	8003834 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8002eba:	4b16      	ldr	r3, [pc, #88]	@ (8002f14 <I2Cx_MspInit+0xa8>)
 8002ebc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ebe:	4a15      	ldr	r2, [pc, #84]	@ (8002f14 <I2Cx_MspInit+0xa8>)
 8002ec0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002ec4:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ec6:	4b13      	ldr	r3, [pc, #76]	@ (8002f14 <I2Cx_MspInit+0xa8>)
 8002ec8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ece:	60fb      	str	r3, [r7, #12]
 8002ed0:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8002ed2:	4b10      	ldr	r3, [pc, #64]	@ (8002f14 <I2Cx_MspInit+0xa8>)
 8002ed4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ed6:	4a0f      	ldr	r2, [pc, #60]	@ (8002f14 <I2Cx_MspInit+0xa8>)
 8002ed8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002edc:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8002ede:	4b0d      	ldr	r3, [pc, #52]	@ (8002f14 <I2Cx_MspInit+0xa8>)
 8002ee0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ee2:	4a0c      	ldr	r2, [pc, #48]	@ (8002f14 <I2Cx_MspInit+0xa8>)
 8002ee4:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002ee8:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8002eea:	2200      	movs	r2, #0
 8002eec:	210f      	movs	r1, #15
 8002eee:	2021      	movs	r0, #33	@ 0x21
 8002ef0:	f000 fc29 	bl	8003746 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8002ef4:	2021      	movs	r0, #33	@ 0x21
 8002ef6:	f000 fc42 	bl	800377e <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8002efa:	2200      	movs	r2, #0
 8002efc:	210f      	movs	r1, #15
 8002efe:	2022      	movs	r0, #34	@ 0x22
 8002f00:	f000 fc21 	bl	8003746 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8002f04:	2022      	movs	r0, #34	@ 0x22
 8002f06:	f000 fc3a 	bl	800377e <HAL_NVIC_EnableIRQ>
}
 8002f0a:	bf00      	nop
 8002f0c:	3728      	adds	r7, #40	@ 0x28
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	40021000 	.word	0x40021000
 8002f18:	48000400 	.word	0x48000400

08002f1c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4a12      	ldr	r2, [pc, #72]	@ (8002f70 <I2Cx_Init+0x54>)
 8002f28:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a11      	ldr	r2, [pc, #68]	@ (8002f74 <I2Cx_Init+0x58>)
 8002f2e:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f7ff ff89 	bl	8002e6c <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 fe5c 	bl	8003c18 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8002f60:	2100      	movs	r1, #0
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f001 fc26 	bl	80047b4 <HAL_I2CEx_ConfigAnalogFilter>
}
 8002f68:	bf00      	nop
 8002f6a:	3708      	adds	r7, #8
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	40005800 	.word	0x40005800
 8002f74:	00702681 	.word	0x00702681

08002f78 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b08a      	sub	sp, #40	@ 0x28
 8002f7c:	af04      	add	r7, sp, #16
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	4608      	mov	r0, r1
 8002f82:	4611      	mov	r1, r2
 8002f84:	461a      	mov	r2, r3
 8002f86:	4603      	mov	r3, r0
 8002f88:	72fb      	strb	r3, [r7, #11]
 8002f8a:	460b      	mov	r3, r1
 8002f8c:	813b      	strh	r3, [r7, #8]
 8002f8e:	4613      	mov	r3, r2
 8002f90:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002f92:	2300      	movs	r3, #0
 8002f94:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002f96:	7afb      	ldrb	r3, [r7, #11]
 8002f98:	b299      	uxth	r1, r3
 8002f9a:	88f8      	ldrh	r0, [r7, #6]
 8002f9c:	893a      	ldrh	r2, [r7, #8]
 8002f9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002fa2:	9302      	str	r3, [sp, #8]
 8002fa4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002fa6:	9301      	str	r3, [sp, #4]
 8002fa8:	6a3b      	ldr	r3, [r7, #32]
 8002faa:	9300      	str	r3, [sp, #0]
 8002fac:	4603      	mov	r3, r0
 8002fae:	68f8      	ldr	r0, [r7, #12]
 8002fb0:	f001 f824 	bl	8003ffc <HAL_I2C_Mem_Read>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002fb8:	7dfb      	ldrb	r3, [r7, #23]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d004      	beq.n	8002fc8 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8002fbe:	7afb      	ldrb	r3, [r7, #11]
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	68f8      	ldr	r0, [r7, #12]
 8002fc4:	f000 f832 	bl	800302c <I2Cx_Error>
  }
  return status;
 8002fc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3718      	adds	r7, #24
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b08a      	sub	sp, #40	@ 0x28
 8002fd6:	af04      	add	r7, sp, #16
 8002fd8:	60f8      	str	r0, [r7, #12]
 8002fda:	4608      	mov	r0, r1
 8002fdc:	4611      	mov	r1, r2
 8002fde:	461a      	mov	r2, r3
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	72fb      	strb	r3, [r7, #11]
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	813b      	strh	r3, [r7, #8]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002fec:	2300      	movs	r3, #0
 8002fee:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002ff0:	7afb      	ldrb	r3, [r7, #11]
 8002ff2:	b299      	uxth	r1, r3
 8002ff4:	88f8      	ldrh	r0, [r7, #6]
 8002ff6:	893a      	ldrh	r2, [r7, #8]
 8002ff8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ffc:	9302      	str	r3, [sp, #8]
 8002ffe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003000:	9301      	str	r3, [sp, #4]
 8003002:	6a3b      	ldr	r3, [r7, #32]
 8003004:	9300      	str	r3, [sp, #0]
 8003006:	4603      	mov	r3, r0
 8003008:	68f8      	ldr	r0, [r7, #12]
 800300a:	f000 fee3 	bl	8003dd4 <HAL_I2C_Mem_Write>
 800300e:	4603      	mov	r3, r0
 8003010:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8003012:	7dfb      	ldrb	r3, [r7, #23]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d004      	beq.n	8003022 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8003018:	7afb      	ldrb	r3, [r7, #11]
 800301a:	4619      	mov	r1, r3
 800301c:	68f8      	ldr	r0, [r7, #12]
 800301e:	f000 f805 	bl	800302c <I2Cx_Error>
  }
  return status;
 8003022:	7dfb      	ldrb	r3, [r7, #23]
}
 8003024:	4618      	mov	r0, r3
 8003026:	3718      	adds	r7, #24
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	460b      	mov	r3, r1
 8003036:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f000 fe88 	bl	8003d4e <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f7ff ff6c 	bl	8002f1c <I2Cx_Init>
}
 8003044:	bf00      	nop
 8003046:	3708      	adds	r7, #8
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8003050:	4802      	ldr	r0, [pc, #8]	@ (800305c <SENSOR_IO_Init+0x10>)
 8003052:	f7ff ff63 	bl	8002f1c <I2Cx_Init>
}
 8003056:	bf00      	nop
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	20000bb0 	.word	0x20000bb0

08003060 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af02      	add	r7, sp, #8
 8003066:	4603      	mov	r3, r0
 8003068:	71fb      	strb	r3, [r7, #7]
 800306a:	460b      	mov	r3, r1
 800306c:	71bb      	strb	r3, [r7, #6]
 800306e:	4613      	mov	r3, r2
 8003070:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8003072:	79bb      	ldrb	r3, [r7, #6]
 8003074:	b29a      	uxth	r2, r3
 8003076:	79f9      	ldrb	r1, [r7, #7]
 8003078:	2301      	movs	r3, #1
 800307a:	9301      	str	r3, [sp, #4]
 800307c:	1d7b      	adds	r3, r7, #5
 800307e:	9300      	str	r3, [sp, #0]
 8003080:	2301      	movs	r3, #1
 8003082:	4803      	ldr	r0, [pc, #12]	@ (8003090 <SENSOR_IO_Write+0x30>)
 8003084:	f7ff ffa5 	bl	8002fd2 <I2Cx_WriteMultiple>
}
 8003088:	bf00      	nop
 800308a:	3708      	adds	r7, #8
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	20000bb0 	.word	0x20000bb0

08003094 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b086      	sub	sp, #24
 8003098:	af02      	add	r7, sp, #8
 800309a:	4603      	mov	r3, r0
 800309c:	460a      	mov	r2, r1
 800309e:	71fb      	strb	r3, [r7, #7]
 80030a0:	4613      	mov	r3, r2
 80030a2:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80030a4:	2300      	movs	r3, #0
 80030a6:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80030a8:	79bb      	ldrb	r3, [r7, #6]
 80030aa:	b29a      	uxth	r2, r3
 80030ac:	79f9      	ldrb	r1, [r7, #7]
 80030ae:	2301      	movs	r3, #1
 80030b0:	9301      	str	r3, [sp, #4]
 80030b2:	f107 030f 	add.w	r3, r7, #15
 80030b6:	9300      	str	r3, [sp, #0]
 80030b8:	2301      	movs	r3, #1
 80030ba:	4804      	ldr	r0, [pc, #16]	@ (80030cc <SENSOR_IO_Read+0x38>)
 80030bc:	f7ff ff5c 	bl	8002f78 <I2Cx_ReadMultiple>

  return read_value;
 80030c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3710      	adds	r7, #16
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	20000bb0 	.word	0x20000bb0

080030d0 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af02      	add	r7, sp, #8
 80030d6:	603a      	str	r2, [r7, #0]
 80030d8:	461a      	mov	r2, r3
 80030da:	4603      	mov	r3, r0
 80030dc:	71fb      	strb	r3, [r7, #7]
 80030de:	460b      	mov	r3, r1
 80030e0:	71bb      	strb	r3, [r7, #6]
 80030e2:	4613      	mov	r3, r2
 80030e4:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80030e6:	79bb      	ldrb	r3, [r7, #6]
 80030e8:	b29a      	uxth	r2, r3
 80030ea:	79f9      	ldrb	r1, [r7, #7]
 80030ec:	88bb      	ldrh	r3, [r7, #4]
 80030ee:	9301      	str	r3, [sp, #4]
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	9300      	str	r3, [sp, #0]
 80030f4:	2301      	movs	r3, #1
 80030f6:	4804      	ldr	r0, [pc, #16]	@ (8003108 <SENSOR_IO_ReadMultiple+0x38>)
 80030f8:	f7ff ff3e 	bl	8002f78 <I2Cx_ReadMultiple>
 80030fc:	4603      	mov	r3, r0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3708      	adds	r7, #8
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	20000bb0 	.word	0x20000bb0

0800310c <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8003112:	2300      	movs	r3, #0
 8003114:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8003116:	2300      	movs	r3, #0
 8003118:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 800311a:	4b19      	ldr	r3, [pc, #100]	@ (8003180 <BSP_ACCELERO_Init+0x74>)
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	4798      	blx	r3
 8003120:	4603      	mov	r3, r0
 8003122:	2b6a      	cmp	r3, #106	@ 0x6a
 8003124:	d002      	beq.n	800312c <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	73fb      	strb	r3, [r7, #15]
 800312a:	e024      	b.n	8003176 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 800312c:	4b15      	ldr	r3, [pc, #84]	@ (8003184 <BSP_ACCELERO_Init+0x78>)
 800312e:	4a14      	ldr	r2, [pc, #80]	@ (8003180 <BSP_ACCELERO_Init+0x74>)
 8003130:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8003132:	2330      	movs	r3, #48	@ 0x30
 8003134:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8003136:	2300      	movs	r3, #0
 8003138:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 800313a:	2300      	movs	r3, #0
 800313c:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 800313e:	2340      	movs	r3, #64	@ 0x40
 8003140:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8003142:	2300      	movs	r3, #0
 8003144:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8003146:	2300      	movs	r3, #0
 8003148:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 800314a:	797a      	ldrb	r2, [r7, #5]
 800314c:	7abb      	ldrb	r3, [r7, #10]
 800314e:	4313      	orrs	r3, r2
 8003150:	b2db      	uxtb	r3, r3
 8003152:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8003154:	7a3b      	ldrb	r3, [r7, #8]
 8003156:	f043 0304 	orr.w	r3, r3, #4
 800315a:	b2db      	uxtb	r3, r3
 800315c:	021b      	lsls	r3, r3, #8
 800315e:	b21a      	sxth	r2, r3
 8003160:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003164:	4313      	orrs	r3, r2
 8003166:	b21b      	sxth	r3, r3
 8003168:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 800316a:	4b06      	ldr	r3, [pc, #24]	@ (8003184 <BSP_ACCELERO_Init+0x78>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	89ba      	ldrh	r2, [r7, #12]
 8003172:	4610      	mov	r0, r2
 8003174:	4798      	blx	r3
  }  

  return ret;
 8003176:	7bfb      	ldrb	r3, [r7, #15]
}
 8003178:	4618      	mov	r0, r3
 800317a:	3710      	adds	r7, #16
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	20000014 	.word	0x20000014
 8003184:	20000c8c 	.word	0x20000c8c

08003188 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8003190:	4b08      	ldr	r3, [pc, #32]	@ (80031b4 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d009      	beq.n	80031ac <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8003198:	4b06      	ldr	r3, [pc, #24]	@ (80031b4 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d004      	beq.n	80031ac <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 80031a2:	4b04      	ldr	r3, [pc, #16]	@ (80031b4 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	4798      	blx	r3
    }
  }
}
 80031ac:	bf00      	nop
 80031ae:	3708      	adds	r7, #8
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	20000c8c 	.word	0x20000c8c

080031b8 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	4603      	mov	r3, r0
 80031c0:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80031c2:	2300      	movs	r3, #0
 80031c4:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80031c6:	2110      	movs	r1, #16
 80031c8:	20d4      	movs	r0, #212	@ 0xd4
 80031ca:	f7ff ff63 	bl	8003094 <SENSOR_IO_Read>
 80031ce:	4603      	mov	r3, r0
 80031d0:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 80031d2:	88fb      	ldrh	r3, [r7, #6]
 80031d4:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 80031d6:	7bbb      	ldrb	r3, [r7, #14]
 80031d8:	f003 0303 	and.w	r3, r3, #3
 80031dc:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 80031de:	7bba      	ldrb	r2, [r7, #14]
 80031e0:	7bfb      	ldrb	r3, [r7, #15]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 80031e6:	7bbb      	ldrb	r3, [r7, #14]
 80031e8:	461a      	mov	r2, r3
 80031ea:	2110      	movs	r1, #16
 80031ec:	20d4      	movs	r0, #212	@ 0xd4
 80031ee:	f7ff ff37 	bl	8003060 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 80031f2:	2112      	movs	r1, #18
 80031f4:	20d4      	movs	r0, #212	@ 0xd4
 80031f6:	f7ff ff4d 	bl	8003094 <SENSOR_IO_Read>
 80031fa:	4603      	mov	r3, r0
 80031fc:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 80031fe:	88fb      	ldrh	r3, [r7, #6]
 8003200:	0a1b      	lsrs	r3, r3, #8
 8003202:	b29b      	uxth	r3, r3
 8003204:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8003206:	7bbb      	ldrb	r3, [r7, #14]
 8003208:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 800320c:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 800320e:	7bba      	ldrb	r2, [r7, #14]
 8003210:	7bfb      	ldrb	r3, [r7, #15]
 8003212:	4313      	orrs	r3, r2
 8003214:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8003216:	7bbb      	ldrb	r3, [r7, #14]
 8003218:	461a      	mov	r2, r3
 800321a:	2112      	movs	r1, #18
 800321c:	20d4      	movs	r0, #212	@ 0xd4
 800321e:	f7ff ff1f 	bl	8003060 <SENSOR_IO_Write>
}
 8003222:	bf00      	nop
 8003224:	3710      	adds	r7, #16
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}

0800322a <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 800322a:	b580      	push	{r7, lr}
 800322c:	b082      	sub	sp, #8
 800322e:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8003230:	2300      	movs	r3, #0
 8003232:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8003234:	2110      	movs	r1, #16
 8003236:	20d4      	movs	r0, #212	@ 0xd4
 8003238:	f7ff ff2c 	bl	8003094 <SENSOR_IO_Read>
 800323c:	4603      	mov	r3, r0
 800323e:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8003240:	79fb      	ldrb	r3, [r7, #7]
 8003242:	f003 030f 	and.w	r3, r3, #15
 8003246:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8003248:	79fb      	ldrb	r3, [r7, #7]
 800324a:	461a      	mov	r2, r3
 800324c:	2110      	movs	r1, #16
 800324e:	20d4      	movs	r0, #212	@ 0xd4
 8003250:	f7ff ff06 	bl	8003060 <SENSOR_IO_Write>
}
 8003254:	bf00      	nop
 8003256:	3708      	adds	r7, #8
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 800325c:	b580      	push	{r7, lr}
 800325e:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8003260:	f7ff fef4 	bl	800304c <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8003264:	210f      	movs	r1, #15
 8003266:	20d4      	movs	r0, #212	@ 0xd4
 8003268:	f7ff ff14 	bl	8003094 <SENSOR_IO_Read>
 800326c:	4603      	mov	r3, r0
}
 800326e:	4618      	mov	r0, r3
 8003270:	bd80      	pop	{r7, pc}

08003272 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8003272:	b580      	push	{r7, lr}
 8003274:	b084      	sub	sp, #16
 8003276:	af00      	add	r7, sp, #0
 8003278:	4603      	mov	r3, r0
 800327a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800327c:	2300      	movs	r3, #0
 800327e:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8003280:	2115      	movs	r1, #21
 8003282:	20d4      	movs	r0, #212	@ 0xd4
 8003284:	f7ff ff06 	bl	8003094 <SENSOR_IO_Read>
 8003288:	4603      	mov	r3, r0
 800328a:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 800328c:	7bfb      	ldrb	r3, [r7, #15]
 800328e:	f023 0310 	bic.w	r3, r3, #16
 8003292:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8003294:	88fb      	ldrh	r3, [r7, #6]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d003      	beq.n	80032a2 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 800329a:	7bfb      	ldrb	r3, [r7, #15]
 800329c:	f043 0310 	orr.w	r3, r3, #16
 80032a0:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 80032a2:	7bfb      	ldrb	r3, [r7, #15]
 80032a4:	461a      	mov	r2, r3
 80032a6:	2115      	movs	r1, #21
 80032a8:	20d4      	movs	r0, #212	@ 0xd4
 80032aa:	f7ff fed9 	bl	8003060 <SENSOR_IO_Write>
}
 80032ae:	bf00      	nop
 80032b0:	3710      	adds	r7, #16
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
	...

080032b8 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b088      	sub	sp, #32
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 80032c0:	2300      	movs	r3, #0
 80032c2:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 80032c4:	2300      	movs	r3, #0
 80032c6:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80032c8:	f04f 0300 	mov.w	r3, #0
 80032cc:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80032ce:	2110      	movs	r1, #16
 80032d0:	20d4      	movs	r0, #212	@ 0xd4
 80032d2:	f7ff fedf 	bl	8003094 <SENSOR_IO_Read>
 80032d6:	4603      	mov	r3, r0
 80032d8:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 80032da:	f107 0208 	add.w	r2, r7, #8
 80032de:	2306      	movs	r3, #6
 80032e0:	2128      	movs	r1, #40	@ 0x28
 80032e2:	20d4      	movs	r0, #212	@ 0xd4
 80032e4:	f7ff fef4 	bl	80030d0 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 80032e8:	2300      	movs	r3, #0
 80032ea:	77fb      	strb	r3, [r7, #31]
 80032ec:	e01a      	b.n	8003324 <LSM6DSL_AccReadXYZ+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80032ee:	7ffb      	ldrb	r3, [r7, #31]
 80032f0:	005b      	lsls	r3, r3, #1
 80032f2:	3301      	adds	r3, #1
 80032f4:	3320      	adds	r3, #32
 80032f6:	443b      	add	r3, r7
 80032f8:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80032fc:	021b      	lsls	r3, r3, #8
 80032fe:	b29b      	uxth	r3, r3
 8003300:	7ffa      	ldrb	r2, [r7, #31]
 8003302:	0052      	lsls	r2, r2, #1
 8003304:	3220      	adds	r2, #32
 8003306:	443a      	add	r2, r7
 8003308:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 800330c:	4413      	add	r3, r2
 800330e:	b29a      	uxth	r2, r3
 8003310:	7ffb      	ldrb	r3, [r7, #31]
 8003312:	b212      	sxth	r2, r2
 8003314:	005b      	lsls	r3, r3, #1
 8003316:	3320      	adds	r3, #32
 8003318:	443b      	add	r3, r7
 800331a:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800331e:	7ffb      	ldrb	r3, [r7, #31]
 8003320:	3301      	adds	r3, #1
 8003322:	77fb      	strb	r3, [r7, #31]
 8003324:	7ffb      	ldrb	r3, [r7, #31]
 8003326:	2b02      	cmp	r3, #2
 8003328:	d9e1      	bls.n	80032ee <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 800332a:	7dfb      	ldrb	r3, [r7, #23]
 800332c:	f003 030c 	and.w	r3, r3, #12
 8003330:	2b0c      	cmp	r3, #12
 8003332:	d829      	bhi.n	8003388 <LSM6DSL_AccReadXYZ+0xd0>
 8003334:	a201      	add	r2, pc, #4	@ (adr r2, 800333c <LSM6DSL_AccReadXYZ+0x84>)
 8003336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800333a:	bf00      	nop
 800333c:	08003371 	.word	0x08003371
 8003340:	08003389 	.word	0x08003389
 8003344:	08003389 	.word	0x08003389
 8003348:	08003389 	.word	0x08003389
 800334c:	08003383 	.word	0x08003383
 8003350:	08003389 	.word	0x08003389
 8003354:	08003389 	.word	0x08003389
 8003358:	08003389 	.word	0x08003389
 800335c:	08003377 	.word	0x08003377
 8003360:	08003389 	.word	0x08003389
 8003364:	08003389 	.word	0x08003389
 8003368:	08003389 	.word	0x08003389
 800336c:	0800337d 	.word	0x0800337d
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8003370:	4b18      	ldr	r3, [pc, #96]	@ (80033d4 <LSM6DSL_AccReadXYZ+0x11c>)
 8003372:	61bb      	str	r3, [r7, #24]
    break;
 8003374:	e008      	b.n	8003388 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8003376:	4b18      	ldr	r3, [pc, #96]	@ (80033d8 <LSM6DSL_AccReadXYZ+0x120>)
 8003378:	61bb      	str	r3, [r7, #24]
    break;
 800337a:	e005      	b.n	8003388 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 800337c:	4b17      	ldr	r3, [pc, #92]	@ (80033dc <LSM6DSL_AccReadXYZ+0x124>)
 800337e:	61bb      	str	r3, [r7, #24]
    break;
 8003380:	e002      	b.n	8003388 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8003382:	4b17      	ldr	r3, [pc, #92]	@ (80033e0 <LSM6DSL_AccReadXYZ+0x128>)
 8003384:	61bb      	str	r3, [r7, #24]
    break;    
 8003386:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8003388:	2300      	movs	r3, #0
 800338a:	77fb      	strb	r3, [r7, #31]
 800338c:	e01a      	b.n	80033c4 <LSM6DSL_AccReadXYZ+0x10c>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 800338e:	7ffb      	ldrb	r3, [r7, #31]
 8003390:	005b      	lsls	r3, r3, #1
 8003392:	3320      	adds	r3, #32
 8003394:	443b      	add	r3, r7
 8003396:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 800339a:	ee07 3a90 	vmov	s15, r3
 800339e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80033a2:	edd7 7a06 	vldr	s15, [r7, #24]
 80033a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033aa:	7ffb      	ldrb	r3, [r7, #31]
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	4413      	add	r3, r2
 80033b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033b6:	ee17 2a90 	vmov	r2, s15
 80033ba:	b212      	sxth	r2, r2
 80033bc:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80033be:	7ffb      	ldrb	r3, [r7, #31]
 80033c0:	3301      	adds	r3, #1
 80033c2:	77fb      	strb	r3, [r7, #31]
 80033c4:	7ffb      	ldrb	r3, [r7, #31]
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d9e1      	bls.n	800338e <LSM6DSL_AccReadXYZ+0xd6>
  }
}
 80033ca:	bf00      	nop
 80033cc:	bf00      	nop
 80033ce:	3720      	adds	r7, #32
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	3d79db23 	.word	0x3d79db23
 80033d8:	3df9db23 	.word	0x3df9db23
 80033dc:	3e79db23 	.word	0x3e79db23
 80033e0:	3ef9db23 	.word	0x3ef9db23

080033e4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80033e4:	b480      	push	{r7}
 80033e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80033e8:	4b17      	ldr	r3, [pc, #92]	@ (8003448 <SystemInit+0x64>)
 80033ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033ee:	4a16      	ldr	r2, [pc, #88]	@ (8003448 <SystemInit+0x64>)
 80033f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80033f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80033f8:	4b14      	ldr	r3, [pc, #80]	@ (800344c <SystemInit+0x68>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a13      	ldr	r2, [pc, #76]	@ (800344c <SystemInit+0x68>)
 80033fe:	f043 0301 	orr.w	r3, r3, #1
 8003402:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003404:	4b11      	ldr	r3, [pc, #68]	@ (800344c <SystemInit+0x68>)
 8003406:	2200      	movs	r2, #0
 8003408:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 800340a:	4b10      	ldr	r3, [pc, #64]	@ (800344c <SystemInit+0x68>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a0f      	ldr	r2, [pc, #60]	@ (800344c <SystemInit+0x68>)
 8003410:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8003414:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8003418:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 800341a:	4b0c      	ldr	r3, [pc, #48]	@ (800344c <SystemInit+0x68>)
 800341c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003420:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003422:	4b0a      	ldr	r3, [pc, #40]	@ (800344c <SystemInit+0x68>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a09      	ldr	r2, [pc, #36]	@ (800344c <SystemInit+0x68>)
 8003428:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800342c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800342e:	4b07      	ldr	r3, [pc, #28]	@ (800344c <SystemInit+0x68>)
 8003430:	2200      	movs	r2, #0
 8003432:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003434:	4b04      	ldr	r3, [pc, #16]	@ (8003448 <SystemInit+0x64>)
 8003436:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800343a:	609a      	str	r2, [r3, #8]
#endif
}
 800343c:	bf00      	nop
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	e000ed00 	.word	0xe000ed00
 800344c:	40021000 	.word	0x40021000

08003450 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003456:	2300      	movs	r3, #0
 8003458:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800345a:	2003      	movs	r0, #3
 800345c:	f000 f968 	bl	8003730 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003460:	200f      	movs	r0, #15
 8003462:	f000 f815 	bl	8003490 <HAL_InitTick>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d002      	beq.n	8003472 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	71fb      	strb	r3, [r7, #7]
 8003470:	e001      	b.n	8003476 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003472:	f000 f805 	bl	8003480 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003476:	79fb      	ldrb	r3, [r7, #7]
}
 8003478:	4618      	mov	r0, r3
 800347a:	3708      	adds	r7, #8
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}

08003480 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8003480:	b480      	push	{r7}
 8003482:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8003484:	bf00      	nop
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
	...

08003490 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003498:	2300      	movs	r3, #0
 800349a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800349c:	4b17      	ldr	r3, [pc, #92]	@ (80034fc <HAL_InitTick+0x6c>)
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d023      	beq.n	80034ec <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80034a4:	4b16      	ldr	r3, [pc, #88]	@ (8003500 <HAL_InitTick+0x70>)
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	4b14      	ldr	r3, [pc, #80]	@ (80034fc <HAL_InitTick+0x6c>)
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	4619      	mov	r1, r3
 80034ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80034b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80034b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ba:	4618      	mov	r0, r3
 80034bc:	f000 f96d 	bl	800379a <HAL_SYSTICK_Config>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d10f      	bne.n	80034e6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2b0f      	cmp	r3, #15
 80034ca:	d809      	bhi.n	80034e0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034cc:	2200      	movs	r2, #0
 80034ce:	6879      	ldr	r1, [r7, #4]
 80034d0:	f04f 30ff 	mov.w	r0, #4294967295
 80034d4:	f000 f937 	bl	8003746 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80034d8:	4a0a      	ldr	r2, [pc, #40]	@ (8003504 <HAL_InitTick+0x74>)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6013      	str	r3, [r2, #0]
 80034de:	e007      	b.n	80034f0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	73fb      	strb	r3, [r7, #15]
 80034e4:	e004      	b.n	80034f0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	73fb      	strb	r3, [r7, #15]
 80034ea:	e001      	b.n	80034f0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80034f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3710      	adds	r7, #16
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	20000050 	.word	0x20000050
 8003500:	20000048 	.word	0x20000048
 8003504:	2000004c 	.word	0x2000004c

08003508 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003508:	b480      	push	{r7}
 800350a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800350c:	4b06      	ldr	r3, [pc, #24]	@ (8003528 <HAL_IncTick+0x20>)
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	461a      	mov	r2, r3
 8003512:	4b06      	ldr	r3, [pc, #24]	@ (800352c <HAL_IncTick+0x24>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4413      	add	r3, r2
 8003518:	4a04      	ldr	r2, [pc, #16]	@ (800352c <HAL_IncTick+0x24>)
 800351a:	6013      	str	r3, [r2, #0]
}
 800351c:	bf00      	nop
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	20000050 	.word	0x20000050
 800352c:	20000c90 	.word	0x20000c90

08003530 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003530:	b480      	push	{r7}
 8003532:	af00      	add	r7, sp, #0
  return uwTick;
 8003534:	4b03      	ldr	r3, [pc, #12]	@ (8003544 <HAL_GetTick+0x14>)
 8003536:	681b      	ldr	r3, [r3, #0]
}
 8003538:	4618      	mov	r0, r3
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	20000c90 	.word	0x20000c90

08003548 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003550:	f7ff ffee 	bl	8003530 <HAL_GetTick>
 8003554:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003560:	d005      	beq.n	800356e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003562:	4b0a      	ldr	r3, [pc, #40]	@ (800358c <HAL_Delay+0x44>)
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	461a      	mov	r2, r3
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	4413      	add	r3, r2
 800356c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800356e:	bf00      	nop
 8003570:	f7ff ffde 	bl	8003530 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	68fa      	ldr	r2, [r7, #12]
 800357c:	429a      	cmp	r2, r3
 800357e:	d8f7      	bhi.n	8003570 <HAL_Delay+0x28>
  {
  }
}
 8003580:	bf00      	nop
 8003582:	bf00      	nop
 8003584:	3710      	adds	r7, #16
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	20000050 	.word	0x20000050

08003590 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003590:	b480      	push	{r7}
 8003592:	b085      	sub	sp, #20
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f003 0307 	and.w	r3, r3, #7
 800359e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035a0:	4b0c      	ldr	r3, [pc, #48]	@ (80035d4 <__NVIC_SetPriorityGrouping+0x44>)
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035a6:	68ba      	ldr	r2, [r7, #8]
 80035a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80035ac:	4013      	ands	r3, r2
 80035ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80035bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035c2:	4a04      	ldr	r2, [pc, #16]	@ (80035d4 <__NVIC_SetPriorityGrouping+0x44>)
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	60d3      	str	r3, [r2, #12]
}
 80035c8:	bf00      	nop
 80035ca:	3714      	adds	r7, #20
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr
 80035d4:	e000ed00 	.word	0xe000ed00

080035d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035d8:	b480      	push	{r7}
 80035da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035dc:	4b04      	ldr	r3, [pc, #16]	@ (80035f0 <__NVIC_GetPriorityGrouping+0x18>)
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	0a1b      	lsrs	r3, r3, #8
 80035e2:	f003 0307 	and.w	r3, r3, #7
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr
 80035f0:	e000ed00 	.word	0xe000ed00

080035f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	4603      	mov	r3, r0
 80035fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003602:	2b00      	cmp	r3, #0
 8003604:	db0b      	blt.n	800361e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003606:	79fb      	ldrb	r3, [r7, #7]
 8003608:	f003 021f 	and.w	r2, r3, #31
 800360c:	4907      	ldr	r1, [pc, #28]	@ (800362c <__NVIC_EnableIRQ+0x38>)
 800360e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003612:	095b      	lsrs	r3, r3, #5
 8003614:	2001      	movs	r0, #1
 8003616:	fa00 f202 	lsl.w	r2, r0, r2
 800361a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800361e:	bf00      	nop
 8003620:	370c      	adds	r7, #12
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	e000e100 	.word	0xe000e100

08003630 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	4603      	mov	r3, r0
 8003638:	6039      	str	r1, [r7, #0]
 800363a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800363c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003640:	2b00      	cmp	r3, #0
 8003642:	db0a      	blt.n	800365a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	b2da      	uxtb	r2, r3
 8003648:	490c      	ldr	r1, [pc, #48]	@ (800367c <__NVIC_SetPriority+0x4c>)
 800364a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800364e:	0112      	lsls	r2, r2, #4
 8003650:	b2d2      	uxtb	r2, r2
 8003652:	440b      	add	r3, r1
 8003654:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003658:	e00a      	b.n	8003670 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	b2da      	uxtb	r2, r3
 800365e:	4908      	ldr	r1, [pc, #32]	@ (8003680 <__NVIC_SetPriority+0x50>)
 8003660:	79fb      	ldrb	r3, [r7, #7]
 8003662:	f003 030f 	and.w	r3, r3, #15
 8003666:	3b04      	subs	r3, #4
 8003668:	0112      	lsls	r2, r2, #4
 800366a:	b2d2      	uxtb	r2, r2
 800366c:	440b      	add	r3, r1
 800366e:	761a      	strb	r2, [r3, #24]
}
 8003670:	bf00      	nop
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr
 800367c:	e000e100 	.word	0xe000e100
 8003680:	e000ed00 	.word	0xe000ed00

08003684 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003684:	b480      	push	{r7}
 8003686:	b089      	sub	sp, #36	@ 0x24
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f003 0307 	and.w	r3, r3, #7
 8003696:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	f1c3 0307 	rsb	r3, r3, #7
 800369e:	2b04      	cmp	r3, #4
 80036a0:	bf28      	it	cs
 80036a2:	2304      	movcs	r3, #4
 80036a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	3304      	adds	r3, #4
 80036aa:	2b06      	cmp	r3, #6
 80036ac:	d902      	bls.n	80036b4 <NVIC_EncodePriority+0x30>
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	3b03      	subs	r3, #3
 80036b2:	e000      	b.n	80036b6 <NVIC_EncodePriority+0x32>
 80036b4:	2300      	movs	r3, #0
 80036b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036b8:	f04f 32ff 	mov.w	r2, #4294967295
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	fa02 f303 	lsl.w	r3, r2, r3
 80036c2:	43da      	mvns	r2, r3
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	401a      	ands	r2, r3
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036cc:	f04f 31ff 	mov.w	r1, #4294967295
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	fa01 f303 	lsl.w	r3, r1, r3
 80036d6:	43d9      	mvns	r1, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036dc:	4313      	orrs	r3, r2
         );
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3724      	adds	r7, #36	@ 0x24
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
	...

080036ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	3b01      	subs	r3, #1
 80036f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80036fc:	d301      	bcc.n	8003702 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036fe:	2301      	movs	r3, #1
 8003700:	e00f      	b.n	8003722 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003702:	4a0a      	ldr	r2, [pc, #40]	@ (800372c <SysTick_Config+0x40>)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	3b01      	subs	r3, #1
 8003708:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800370a:	210f      	movs	r1, #15
 800370c:	f04f 30ff 	mov.w	r0, #4294967295
 8003710:	f7ff ff8e 	bl	8003630 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003714:	4b05      	ldr	r3, [pc, #20]	@ (800372c <SysTick_Config+0x40>)
 8003716:	2200      	movs	r2, #0
 8003718:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800371a:	4b04      	ldr	r3, [pc, #16]	@ (800372c <SysTick_Config+0x40>)
 800371c:	2207      	movs	r2, #7
 800371e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3708      	adds	r7, #8
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	e000e010 	.word	0xe000e010

08003730 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f7ff ff29 	bl	8003590 <__NVIC_SetPriorityGrouping>
}
 800373e:	bf00      	nop
 8003740:	3708      	adds	r7, #8
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}

08003746 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003746:	b580      	push	{r7, lr}
 8003748:	b086      	sub	sp, #24
 800374a:	af00      	add	r7, sp, #0
 800374c:	4603      	mov	r3, r0
 800374e:	60b9      	str	r1, [r7, #8]
 8003750:	607a      	str	r2, [r7, #4]
 8003752:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003754:	2300      	movs	r3, #0
 8003756:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003758:	f7ff ff3e 	bl	80035d8 <__NVIC_GetPriorityGrouping>
 800375c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	68b9      	ldr	r1, [r7, #8]
 8003762:	6978      	ldr	r0, [r7, #20]
 8003764:	f7ff ff8e 	bl	8003684 <NVIC_EncodePriority>
 8003768:	4602      	mov	r2, r0
 800376a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800376e:	4611      	mov	r1, r2
 8003770:	4618      	mov	r0, r3
 8003772:	f7ff ff5d 	bl	8003630 <__NVIC_SetPriority>
}
 8003776:	bf00      	nop
 8003778:	3718      	adds	r7, #24
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}

0800377e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800377e:	b580      	push	{r7, lr}
 8003780:	b082      	sub	sp, #8
 8003782:	af00      	add	r7, sp, #0
 8003784:	4603      	mov	r3, r0
 8003786:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800378c:	4618      	mov	r0, r3
 800378e:	f7ff ff31 	bl	80035f4 <__NVIC_EnableIRQ>
}
 8003792:	bf00      	nop
 8003794:	3708      	adds	r7, #8
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}

0800379a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800379a:	b580      	push	{r7, lr}
 800379c:	b082      	sub	sp, #8
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f7ff ffa2 	bl	80036ec <SysTick_Config>
 80037a8:	4603      	mov	r3, r0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3708      	adds	r7, #8
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}

080037b2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80037b2:	b580      	push	{r7, lr}
 80037b4:	b084      	sub	sp, #16
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037ba:	2300      	movs	r3, #0
 80037bc:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d005      	beq.n	80037d6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2204      	movs	r2, #4
 80037ce:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	73fb      	strb	r3, [r7, #15]
 80037d4:	e029      	b.n	800382a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f022 020e 	bic.w	r2, r2, #14
 80037e4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f022 0201 	bic.w	r2, r2, #1
 80037f4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037fa:	f003 021c 	and.w	r2, r3, #28
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003802:	2101      	movs	r1, #1
 8003804:	fa01 f202 	lsl.w	r2, r1, r2
 8003808:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2201      	movs	r2, #1
 800380e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800381e:	2b00      	cmp	r3, #0
 8003820:	d003      	beq.n	800382a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	4798      	blx	r3
    }
  }
  return status;
 800382a:	7bfb      	ldrb	r3, [r7, #15]
}
 800382c:	4618      	mov	r0, r3
 800382e:	3710      	adds	r7, #16
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003834:	b480      	push	{r7}
 8003836:	b087      	sub	sp, #28
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800383e:	2300      	movs	r3, #0
 8003840:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003842:	e17f      	b.n	8003b44 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	2101      	movs	r1, #1
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	fa01 f303 	lsl.w	r3, r1, r3
 8003850:	4013      	ands	r3, r2
 8003852:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2b00      	cmp	r3, #0
 8003858:	f000 8171 	beq.w	8003b3e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f003 0303 	and.w	r3, r3, #3
 8003864:	2b01      	cmp	r3, #1
 8003866:	d005      	beq.n	8003874 <HAL_GPIO_Init+0x40>
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f003 0303 	and.w	r3, r3, #3
 8003870:	2b02      	cmp	r3, #2
 8003872:	d130      	bne.n	80038d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	005b      	lsls	r3, r3, #1
 800387e:	2203      	movs	r2, #3
 8003880:	fa02 f303 	lsl.w	r3, r2, r3
 8003884:	43db      	mvns	r3, r3
 8003886:	693a      	ldr	r2, [r7, #16]
 8003888:	4013      	ands	r3, r2
 800388a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	68da      	ldr	r2, [r3, #12]
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	005b      	lsls	r3, r3, #1
 8003894:	fa02 f303 	lsl.w	r3, r2, r3
 8003898:	693a      	ldr	r2, [r7, #16]
 800389a:	4313      	orrs	r3, r2
 800389c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	693a      	ldr	r2, [r7, #16]
 80038a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80038aa:	2201      	movs	r2, #1
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	fa02 f303 	lsl.w	r3, r2, r3
 80038b2:	43db      	mvns	r3, r3
 80038b4:	693a      	ldr	r2, [r7, #16]
 80038b6:	4013      	ands	r3, r2
 80038b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	091b      	lsrs	r3, r3, #4
 80038c0:	f003 0201 	and.w	r2, r3, #1
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ca:	693a      	ldr	r2, [r7, #16]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	693a      	ldr	r2, [r7, #16]
 80038d4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f003 0303 	and.w	r3, r3, #3
 80038de:	2b03      	cmp	r3, #3
 80038e0:	d118      	bne.n	8003914 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80038e8:	2201      	movs	r2, #1
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	fa02 f303 	lsl.w	r3, r2, r3
 80038f0:	43db      	mvns	r3, r3
 80038f2:	693a      	ldr	r2, [r7, #16]
 80038f4:	4013      	ands	r3, r2
 80038f6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	08db      	lsrs	r3, r3, #3
 80038fe:	f003 0201 	and.w	r2, r3, #1
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	fa02 f303 	lsl.w	r3, r2, r3
 8003908:	693a      	ldr	r2, [r7, #16]
 800390a:	4313      	orrs	r3, r2
 800390c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	693a      	ldr	r2, [r7, #16]
 8003912:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f003 0303 	and.w	r3, r3, #3
 800391c:	2b03      	cmp	r3, #3
 800391e:	d017      	beq.n	8003950 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	005b      	lsls	r3, r3, #1
 800392a:	2203      	movs	r2, #3
 800392c:	fa02 f303 	lsl.w	r3, r2, r3
 8003930:	43db      	mvns	r3, r3
 8003932:	693a      	ldr	r2, [r7, #16]
 8003934:	4013      	ands	r3, r2
 8003936:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	689a      	ldr	r2, [r3, #8]
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	005b      	lsls	r3, r3, #1
 8003940:	fa02 f303 	lsl.w	r3, r2, r3
 8003944:	693a      	ldr	r2, [r7, #16]
 8003946:	4313      	orrs	r3, r2
 8003948:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	693a      	ldr	r2, [r7, #16]
 800394e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f003 0303 	and.w	r3, r3, #3
 8003958:	2b02      	cmp	r3, #2
 800395a:	d123      	bne.n	80039a4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	08da      	lsrs	r2, r3, #3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	3208      	adds	r2, #8
 8003964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003968:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	f003 0307 	and.w	r3, r3, #7
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	220f      	movs	r2, #15
 8003974:	fa02 f303 	lsl.w	r3, r2, r3
 8003978:	43db      	mvns	r3, r3
 800397a:	693a      	ldr	r2, [r7, #16]
 800397c:	4013      	ands	r3, r2
 800397e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	691a      	ldr	r2, [r3, #16]
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	f003 0307 	and.w	r3, r3, #7
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	fa02 f303 	lsl.w	r3, r2, r3
 8003990:	693a      	ldr	r2, [r7, #16]
 8003992:	4313      	orrs	r3, r2
 8003994:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	08da      	lsrs	r2, r3, #3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	3208      	adds	r2, #8
 800399e:	6939      	ldr	r1, [r7, #16]
 80039a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	005b      	lsls	r3, r3, #1
 80039ae:	2203      	movs	r2, #3
 80039b0:	fa02 f303 	lsl.w	r3, r2, r3
 80039b4:	43db      	mvns	r3, r3
 80039b6:	693a      	ldr	r2, [r7, #16]
 80039b8:	4013      	ands	r3, r2
 80039ba:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f003 0203 	and.w	r2, r3, #3
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	005b      	lsls	r3, r3, #1
 80039c8:	fa02 f303 	lsl.w	r3, r2, r3
 80039cc:	693a      	ldr	r2, [r7, #16]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	693a      	ldr	r2, [r7, #16]
 80039d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	f000 80ac 	beq.w	8003b3e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039e6:	4b5f      	ldr	r3, [pc, #380]	@ (8003b64 <HAL_GPIO_Init+0x330>)
 80039e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039ea:	4a5e      	ldr	r2, [pc, #376]	@ (8003b64 <HAL_GPIO_Init+0x330>)
 80039ec:	f043 0301 	orr.w	r3, r3, #1
 80039f0:	6613      	str	r3, [r2, #96]	@ 0x60
 80039f2:	4b5c      	ldr	r3, [pc, #368]	@ (8003b64 <HAL_GPIO_Init+0x330>)
 80039f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039f6:	f003 0301 	and.w	r3, r3, #1
 80039fa:	60bb      	str	r3, [r7, #8]
 80039fc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80039fe:	4a5a      	ldr	r2, [pc, #360]	@ (8003b68 <HAL_GPIO_Init+0x334>)
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	089b      	lsrs	r3, r3, #2
 8003a04:	3302      	adds	r3, #2
 8003a06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	f003 0303 	and.w	r3, r3, #3
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	220f      	movs	r2, #15
 8003a16:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1a:	43db      	mvns	r3, r3
 8003a1c:	693a      	ldr	r2, [r7, #16]
 8003a1e:	4013      	ands	r3, r2
 8003a20:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003a28:	d025      	beq.n	8003a76 <HAL_GPIO_Init+0x242>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a4f      	ldr	r2, [pc, #316]	@ (8003b6c <HAL_GPIO_Init+0x338>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d01f      	beq.n	8003a72 <HAL_GPIO_Init+0x23e>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a4e      	ldr	r2, [pc, #312]	@ (8003b70 <HAL_GPIO_Init+0x33c>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d019      	beq.n	8003a6e <HAL_GPIO_Init+0x23a>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a4d      	ldr	r2, [pc, #308]	@ (8003b74 <HAL_GPIO_Init+0x340>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d013      	beq.n	8003a6a <HAL_GPIO_Init+0x236>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a4c      	ldr	r2, [pc, #304]	@ (8003b78 <HAL_GPIO_Init+0x344>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d00d      	beq.n	8003a66 <HAL_GPIO_Init+0x232>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a4b      	ldr	r2, [pc, #300]	@ (8003b7c <HAL_GPIO_Init+0x348>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d007      	beq.n	8003a62 <HAL_GPIO_Init+0x22e>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a4a      	ldr	r2, [pc, #296]	@ (8003b80 <HAL_GPIO_Init+0x34c>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d101      	bne.n	8003a5e <HAL_GPIO_Init+0x22a>
 8003a5a:	2306      	movs	r3, #6
 8003a5c:	e00c      	b.n	8003a78 <HAL_GPIO_Init+0x244>
 8003a5e:	2307      	movs	r3, #7
 8003a60:	e00a      	b.n	8003a78 <HAL_GPIO_Init+0x244>
 8003a62:	2305      	movs	r3, #5
 8003a64:	e008      	b.n	8003a78 <HAL_GPIO_Init+0x244>
 8003a66:	2304      	movs	r3, #4
 8003a68:	e006      	b.n	8003a78 <HAL_GPIO_Init+0x244>
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e004      	b.n	8003a78 <HAL_GPIO_Init+0x244>
 8003a6e:	2302      	movs	r3, #2
 8003a70:	e002      	b.n	8003a78 <HAL_GPIO_Init+0x244>
 8003a72:	2301      	movs	r3, #1
 8003a74:	e000      	b.n	8003a78 <HAL_GPIO_Init+0x244>
 8003a76:	2300      	movs	r3, #0
 8003a78:	697a      	ldr	r2, [r7, #20]
 8003a7a:	f002 0203 	and.w	r2, r2, #3
 8003a7e:	0092      	lsls	r2, r2, #2
 8003a80:	4093      	lsls	r3, r2
 8003a82:	693a      	ldr	r2, [r7, #16]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003a88:	4937      	ldr	r1, [pc, #220]	@ (8003b68 <HAL_GPIO_Init+0x334>)
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	089b      	lsrs	r3, r3, #2
 8003a8e:	3302      	adds	r3, #2
 8003a90:	693a      	ldr	r2, [r7, #16]
 8003a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003a96:	4b3b      	ldr	r3, [pc, #236]	@ (8003b84 <HAL_GPIO_Init+0x350>)
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	43db      	mvns	r3, r3
 8003aa0:	693a      	ldr	r2, [r7, #16]
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d003      	beq.n	8003aba <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003ab2:	693a      	ldr	r2, [r7, #16]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003aba:	4a32      	ldr	r2, [pc, #200]	@ (8003b84 <HAL_GPIO_Init+0x350>)
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003ac0:	4b30      	ldr	r3, [pc, #192]	@ (8003b84 <HAL_GPIO_Init+0x350>)
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	43db      	mvns	r3, r3
 8003aca:	693a      	ldr	r2, [r7, #16]
 8003acc:	4013      	ands	r3, r2
 8003ace:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d003      	beq.n	8003ae4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003adc:	693a      	ldr	r2, [r7, #16]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003ae4:	4a27      	ldr	r2, [pc, #156]	@ (8003b84 <HAL_GPIO_Init+0x350>)
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003aea:	4b26      	ldr	r3, [pc, #152]	@ (8003b84 <HAL_GPIO_Init+0x350>)
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	43db      	mvns	r3, r3
 8003af4:	693a      	ldr	r2, [r7, #16]
 8003af6:	4013      	ands	r3, r2
 8003af8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d003      	beq.n	8003b0e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003b06:	693a      	ldr	r2, [r7, #16]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003b0e:	4a1d      	ldr	r2, [pc, #116]	@ (8003b84 <HAL_GPIO_Init+0x350>)
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003b14:	4b1b      	ldr	r3, [pc, #108]	@ (8003b84 <HAL_GPIO_Init+0x350>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	43db      	mvns	r3, r3
 8003b1e:	693a      	ldr	r2, [r7, #16]
 8003b20:	4013      	ands	r3, r2
 8003b22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d003      	beq.n	8003b38 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003b30:	693a      	ldr	r2, [r7, #16]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003b38:	4a12      	ldr	r2, [pc, #72]	@ (8003b84 <HAL_GPIO_Init+0x350>)
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	3301      	adds	r3, #1
 8003b42:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	f47f ae78 	bne.w	8003844 <HAL_GPIO_Init+0x10>
  }
}
 8003b54:	bf00      	nop
 8003b56:	bf00      	nop
 8003b58:	371c      	adds	r7, #28
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	40021000 	.word	0x40021000
 8003b68:	40010000 	.word	0x40010000
 8003b6c:	48000400 	.word	0x48000400
 8003b70:	48000800 	.word	0x48000800
 8003b74:	48000c00 	.word	0x48000c00
 8003b78:	48001000 	.word	0x48001000
 8003b7c:	48001400 	.word	0x48001400
 8003b80:	48001800 	.word	0x48001800
 8003b84:	40010400 	.word	0x40010400

08003b88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b085      	sub	sp, #20
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	460b      	mov	r3, r1
 8003b92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	691a      	ldr	r2, [r3, #16]
 8003b98:	887b      	ldrh	r3, [r7, #2]
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d002      	beq.n	8003ba6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	73fb      	strb	r3, [r7, #15]
 8003ba4:	e001      	b.n	8003baa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3714      	adds	r7, #20
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	807b      	strh	r3, [r7, #2]
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003bc8:	787b      	ldrb	r3, [r7, #1]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d003      	beq.n	8003bd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003bce:	887a      	ldrh	r2, [r7, #2]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003bd4:	e002      	b.n	8003bdc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003bd6:	887a      	ldrh	r2, [r7, #2]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003bdc:	bf00      	nop
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	4603      	mov	r3, r0
 8003bf0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003bf2:	4b08      	ldr	r3, [pc, #32]	@ (8003c14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003bf4:	695a      	ldr	r2, [r3, #20]
 8003bf6:	88fb      	ldrh	r3, [r7, #6]
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d006      	beq.n	8003c0c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003bfe:	4a05      	ldr	r2, [pc, #20]	@ (8003c14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c00:	88fb      	ldrh	r3, [r7, #6]
 8003c02:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003c04:	88fb      	ldrh	r3, [r7, #6]
 8003c06:	4618      	mov	r0, r3
 8003c08:	f7fd fc64 	bl	80014d4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003c0c:	bf00      	nop
 8003c0e:	3708      	adds	r7, #8
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	40010400 	.word	0x40010400

08003c18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b082      	sub	sp, #8
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d101      	bne.n	8003c2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e08d      	b.n	8003d46 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d106      	bne.n	8003c44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 f8b4 	bl	8003dac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2224      	movs	r2, #36	@ 0x24
 8003c48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f022 0201 	bic.w	r2, r2, #1
 8003c5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685a      	ldr	r2, [r3, #4]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003c68:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	689a      	ldr	r2, [r3, #8]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003c78:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d107      	bne.n	8003c92 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	689a      	ldr	r2, [r3, #8]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003c8e:	609a      	str	r2, [r3, #8]
 8003c90:	e006      	b.n	8003ca0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	689a      	ldr	r2, [r3, #8]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003c9e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	d108      	bne.n	8003cba <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	685a      	ldr	r2, [r3, #4]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003cb6:	605a      	str	r2, [r3, #4]
 8003cb8:	e007      	b.n	8003cca <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	685a      	ldr	r2, [r3, #4]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003cc8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	6812      	ldr	r2, [r2, #0]
 8003cd4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003cd8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003cdc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68da      	ldr	r2, [r3, #12]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003cec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	691a      	ldr	r2, [r3, #16]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	695b      	ldr	r3, [r3, #20]
 8003cf6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	699b      	ldr	r3, [r3, #24]
 8003cfe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	430a      	orrs	r2, r1
 8003d06:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	69d9      	ldr	r1, [r3, #28]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6a1a      	ldr	r2, [r3, #32]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	430a      	orrs	r2, r1
 8003d16:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f042 0201 	orr.w	r2, r2, #1
 8003d26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2220      	movs	r2, #32
 8003d32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3708      	adds	r7, #8
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}

08003d4e <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003d4e:	b580      	push	{r7, lr}
 8003d50:	b082      	sub	sp, #8
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d101      	bne.n	8003d60 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e021      	b.n	8003da4 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2224      	movs	r2, #36	@ 0x24
 8003d64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f022 0201 	bic.w	r2, r2, #1
 8003d76:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f000 f821 	bl	8003dc0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003da2:	2300      	movs	r3, #0
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3708      	adds	r7, #8
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8003db4:	bf00      	nop
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8003dc8:	bf00      	nop
 8003dca:	370c      	adds	r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b088      	sub	sp, #32
 8003dd8:	af02      	add	r7, sp, #8
 8003dda:	60f8      	str	r0, [r7, #12]
 8003ddc:	4608      	mov	r0, r1
 8003dde:	4611      	mov	r1, r2
 8003de0:	461a      	mov	r2, r3
 8003de2:	4603      	mov	r3, r0
 8003de4:	817b      	strh	r3, [r7, #10]
 8003de6:	460b      	mov	r3, r1
 8003de8:	813b      	strh	r3, [r7, #8]
 8003dea:	4613      	mov	r3, r2
 8003dec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	2b20      	cmp	r3, #32
 8003df8:	f040 80f9 	bne.w	8003fee <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dfc:	6a3b      	ldr	r3, [r7, #32]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d002      	beq.n	8003e08 <HAL_I2C_Mem_Write+0x34>
 8003e02:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d105      	bne.n	8003e14 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e0e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e0ed      	b.n	8003ff0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d101      	bne.n	8003e22 <HAL_I2C_Mem_Write+0x4e>
 8003e1e:	2302      	movs	r3, #2
 8003e20:	e0e6      	b.n	8003ff0 <HAL_I2C_Mem_Write+0x21c>
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2201      	movs	r2, #1
 8003e26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003e2a:	f7ff fb81 	bl	8003530 <HAL_GetTick>
 8003e2e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	9300      	str	r3, [sp, #0]
 8003e34:	2319      	movs	r3, #25
 8003e36:	2201      	movs	r2, #1
 8003e38:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003e3c:	68f8      	ldr	r0, [r7, #12]
 8003e3e:	f000 fac3 	bl	80043c8 <I2C_WaitOnFlagUntilTimeout>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d001      	beq.n	8003e4c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e0d1      	b.n	8003ff0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2221      	movs	r2, #33	@ 0x21
 8003e50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2240      	movs	r2, #64	@ 0x40
 8003e58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6a3a      	ldr	r2, [r7, #32]
 8003e66:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003e6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2200      	movs	r2, #0
 8003e72:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e74:	88f8      	ldrh	r0, [r7, #6]
 8003e76:	893a      	ldrh	r2, [r7, #8]
 8003e78:	8979      	ldrh	r1, [r7, #10]
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	9301      	str	r3, [sp, #4]
 8003e7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e80:	9300      	str	r3, [sp, #0]
 8003e82:	4603      	mov	r3, r0
 8003e84:	68f8      	ldr	r0, [r7, #12]
 8003e86:	f000 f9d3 	bl	8004230 <I2C_RequestMemoryWrite>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d005      	beq.n	8003e9c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e0a9      	b.n	8003ff0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	2bff      	cmp	r3, #255	@ 0xff
 8003ea4:	d90e      	bls.n	8003ec4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	22ff      	movs	r2, #255	@ 0xff
 8003eaa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eb0:	b2da      	uxtb	r2, r3
 8003eb2:	8979      	ldrh	r1, [r7, #10]
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	9300      	str	r3, [sp, #0]
 8003eb8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003ebc:	68f8      	ldr	r0, [r7, #12]
 8003ebe:	f000 fc47 	bl	8004750 <I2C_TransferConfig>
 8003ec2:	e00f      	b.n	8003ee4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ec8:	b29a      	uxth	r2, r3
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ed2:	b2da      	uxtb	r2, r3
 8003ed4:	8979      	ldrh	r1, [r7, #10]
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	9300      	str	r3, [sp, #0]
 8003eda:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003ede:	68f8      	ldr	r0, [r7, #12]
 8003ee0:	f000 fc36 	bl	8004750 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ee4:	697a      	ldr	r2, [r7, #20]
 8003ee6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	f000 fac6 	bl	800447a <I2C_WaitOnTXISFlagUntilTimeout>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d001      	beq.n	8003ef8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e07b      	b.n	8003ff0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003efc:	781a      	ldrb	r2, [r3, #0]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f08:	1c5a      	adds	r2, r3, #1
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	3b01      	subs	r3, #1
 8003f16:	b29a      	uxth	r2, r3
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f20:	3b01      	subs	r3, #1
 8003f22:	b29a      	uxth	r2, r3
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d034      	beq.n	8003f9c <HAL_I2C_Mem_Write+0x1c8>
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d130      	bne.n	8003f9c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	9300      	str	r3, [sp, #0]
 8003f3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f40:	2200      	movs	r2, #0
 8003f42:	2180      	movs	r1, #128	@ 0x80
 8003f44:	68f8      	ldr	r0, [r7, #12]
 8003f46:	f000 fa3f 	bl	80043c8 <I2C_WaitOnFlagUntilTimeout>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d001      	beq.n	8003f54 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e04d      	b.n	8003ff0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	2bff      	cmp	r3, #255	@ 0xff
 8003f5c:	d90e      	bls.n	8003f7c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	22ff      	movs	r2, #255	@ 0xff
 8003f62:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f68:	b2da      	uxtb	r2, r3
 8003f6a:	8979      	ldrh	r1, [r7, #10]
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	9300      	str	r3, [sp, #0]
 8003f70:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003f74:	68f8      	ldr	r0, [r7, #12]
 8003f76:	f000 fbeb 	bl	8004750 <I2C_TransferConfig>
 8003f7a:	e00f      	b.n	8003f9c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f80:	b29a      	uxth	r2, r3
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f8a:	b2da      	uxtb	r2, r3
 8003f8c:	8979      	ldrh	r1, [r7, #10]
 8003f8e:	2300      	movs	r3, #0
 8003f90:	9300      	str	r3, [sp, #0]
 8003f92:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f96:	68f8      	ldr	r0, [r7, #12]
 8003f98:	f000 fbda 	bl	8004750 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d19e      	bne.n	8003ee4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fa6:	697a      	ldr	r2, [r7, #20]
 8003fa8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003faa:	68f8      	ldr	r0, [r7, #12]
 8003fac:	f000 faac 	bl	8004508 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d001      	beq.n	8003fba <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e01a      	b.n	8003ff0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2220      	movs	r2, #32
 8003fc0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	6859      	ldr	r1, [r3, #4]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	4b0a      	ldr	r3, [pc, #40]	@ (8003ff8 <HAL_I2C_Mem_Write+0x224>)
 8003fce:	400b      	ands	r3, r1
 8003fd0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2220      	movs	r2, #32
 8003fd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003fea:	2300      	movs	r3, #0
 8003fec:	e000      	b.n	8003ff0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003fee:	2302      	movs	r3, #2
  }
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3718      	adds	r7, #24
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	fe00e800 	.word	0xfe00e800

08003ffc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b088      	sub	sp, #32
 8004000:	af02      	add	r7, sp, #8
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	4608      	mov	r0, r1
 8004006:	4611      	mov	r1, r2
 8004008:	461a      	mov	r2, r3
 800400a:	4603      	mov	r3, r0
 800400c:	817b      	strh	r3, [r7, #10]
 800400e:	460b      	mov	r3, r1
 8004010:	813b      	strh	r3, [r7, #8]
 8004012:	4613      	mov	r3, r2
 8004014:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800401c:	b2db      	uxtb	r3, r3
 800401e:	2b20      	cmp	r3, #32
 8004020:	f040 80fd 	bne.w	800421e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004024:	6a3b      	ldr	r3, [r7, #32]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d002      	beq.n	8004030 <HAL_I2C_Mem_Read+0x34>
 800402a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800402c:	2b00      	cmp	r3, #0
 800402e:	d105      	bne.n	800403c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004036:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e0f1      	b.n	8004220 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004042:	2b01      	cmp	r3, #1
 8004044:	d101      	bne.n	800404a <HAL_I2C_Mem_Read+0x4e>
 8004046:	2302      	movs	r3, #2
 8004048:	e0ea      	b.n	8004220 <HAL_I2C_Mem_Read+0x224>
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2201      	movs	r2, #1
 800404e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004052:	f7ff fa6d 	bl	8003530 <HAL_GetTick>
 8004056:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	9300      	str	r3, [sp, #0]
 800405c:	2319      	movs	r3, #25
 800405e:	2201      	movs	r2, #1
 8004060:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004064:	68f8      	ldr	r0, [r7, #12]
 8004066:	f000 f9af 	bl	80043c8 <I2C_WaitOnFlagUntilTimeout>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d001      	beq.n	8004074 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e0d5      	b.n	8004220 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2222      	movs	r2, #34	@ 0x22
 8004078:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2240      	movs	r2, #64	@ 0x40
 8004080:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2200      	movs	r2, #0
 8004088:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6a3a      	ldr	r2, [r7, #32]
 800408e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004094:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2200      	movs	r2, #0
 800409a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800409c:	88f8      	ldrh	r0, [r7, #6]
 800409e:	893a      	ldrh	r2, [r7, #8]
 80040a0:	8979      	ldrh	r1, [r7, #10]
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	9301      	str	r3, [sp, #4]
 80040a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040a8:	9300      	str	r3, [sp, #0]
 80040aa:	4603      	mov	r3, r0
 80040ac:	68f8      	ldr	r0, [r7, #12]
 80040ae:	f000 f913 	bl	80042d8 <I2C_RequestMemoryRead>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d005      	beq.n	80040c4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e0ad      	b.n	8004220 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	2bff      	cmp	r3, #255	@ 0xff
 80040cc:	d90e      	bls.n	80040ec <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2201      	movs	r2, #1
 80040d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040d8:	b2da      	uxtb	r2, r3
 80040da:	8979      	ldrh	r1, [r7, #10]
 80040dc:	4b52      	ldr	r3, [pc, #328]	@ (8004228 <HAL_I2C_Mem_Read+0x22c>)
 80040de:	9300      	str	r3, [sp, #0]
 80040e0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80040e4:	68f8      	ldr	r0, [r7, #12]
 80040e6:	f000 fb33 	bl	8004750 <I2C_TransferConfig>
 80040ea:	e00f      	b.n	800410c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040f0:	b29a      	uxth	r2, r3
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040fa:	b2da      	uxtb	r2, r3
 80040fc:	8979      	ldrh	r1, [r7, #10]
 80040fe:	4b4a      	ldr	r3, [pc, #296]	@ (8004228 <HAL_I2C_Mem_Read+0x22c>)
 8004100:	9300      	str	r3, [sp, #0]
 8004102:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004106:	68f8      	ldr	r0, [r7, #12]
 8004108:	f000 fb22 	bl	8004750 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	9300      	str	r3, [sp, #0]
 8004110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004112:	2200      	movs	r2, #0
 8004114:	2104      	movs	r1, #4
 8004116:	68f8      	ldr	r0, [r7, #12]
 8004118:	f000 f956 	bl	80043c8 <I2C_WaitOnFlagUntilTimeout>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d001      	beq.n	8004126 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e07c      	b.n	8004220 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004130:	b2d2      	uxtb	r2, r2
 8004132:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004138:	1c5a      	adds	r2, r3, #1
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004142:	3b01      	subs	r3, #1
 8004144:	b29a      	uxth	r2, r3
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800414e:	b29b      	uxth	r3, r3
 8004150:	3b01      	subs	r3, #1
 8004152:	b29a      	uxth	r2, r3
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800415c:	b29b      	uxth	r3, r3
 800415e:	2b00      	cmp	r3, #0
 8004160:	d034      	beq.n	80041cc <HAL_I2C_Mem_Read+0x1d0>
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004166:	2b00      	cmp	r3, #0
 8004168:	d130      	bne.n	80041cc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	9300      	str	r3, [sp, #0]
 800416e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004170:	2200      	movs	r2, #0
 8004172:	2180      	movs	r1, #128	@ 0x80
 8004174:	68f8      	ldr	r0, [r7, #12]
 8004176:	f000 f927 	bl	80043c8 <I2C_WaitOnFlagUntilTimeout>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d001      	beq.n	8004184 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e04d      	b.n	8004220 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004188:	b29b      	uxth	r3, r3
 800418a:	2bff      	cmp	r3, #255	@ 0xff
 800418c:	d90e      	bls.n	80041ac <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2201      	movs	r2, #1
 8004192:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004198:	b2da      	uxtb	r2, r3
 800419a:	8979      	ldrh	r1, [r7, #10]
 800419c:	2300      	movs	r3, #0
 800419e:	9300      	str	r3, [sp, #0]
 80041a0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80041a4:	68f8      	ldr	r0, [r7, #12]
 80041a6:	f000 fad3 	bl	8004750 <I2C_TransferConfig>
 80041aa:	e00f      	b.n	80041cc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041b0:	b29a      	uxth	r2, r3
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041ba:	b2da      	uxtb	r2, r3
 80041bc:	8979      	ldrh	r1, [r7, #10]
 80041be:	2300      	movs	r3, #0
 80041c0:	9300      	str	r3, [sp, #0]
 80041c2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80041c6:	68f8      	ldr	r0, [r7, #12]
 80041c8:	f000 fac2 	bl	8004750 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d19a      	bne.n	800410c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041d6:	697a      	ldr	r2, [r7, #20]
 80041d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80041da:	68f8      	ldr	r0, [r7, #12]
 80041dc:	f000 f994 	bl	8004508 <I2C_WaitOnSTOPFlagUntilTimeout>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d001      	beq.n	80041ea <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e01a      	b.n	8004220 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2220      	movs	r2, #32
 80041f0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	6859      	ldr	r1, [r3, #4]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	4b0b      	ldr	r3, [pc, #44]	@ (800422c <HAL_I2C_Mem_Read+0x230>)
 80041fe:	400b      	ands	r3, r1
 8004200:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2220      	movs	r2, #32
 8004206:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2200      	movs	r2, #0
 800420e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800421a:	2300      	movs	r3, #0
 800421c:	e000      	b.n	8004220 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800421e:	2302      	movs	r3, #2
  }
}
 8004220:	4618      	mov	r0, r3
 8004222:	3718      	adds	r7, #24
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	80002400 	.word	0x80002400
 800422c:	fe00e800 	.word	0xfe00e800

08004230 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b086      	sub	sp, #24
 8004234:	af02      	add	r7, sp, #8
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	4608      	mov	r0, r1
 800423a:	4611      	mov	r1, r2
 800423c:	461a      	mov	r2, r3
 800423e:	4603      	mov	r3, r0
 8004240:	817b      	strh	r3, [r7, #10]
 8004242:	460b      	mov	r3, r1
 8004244:	813b      	strh	r3, [r7, #8]
 8004246:	4613      	mov	r3, r2
 8004248:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800424a:	88fb      	ldrh	r3, [r7, #6]
 800424c:	b2da      	uxtb	r2, r3
 800424e:	8979      	ldrh	r1, [r7, #10]
 8004250:	4b20      	ldr	r3, [pc, #128]	@ (80042d4 <I2C_RequestMemoryWrite+0xa4>)
 8004252:	9300      	str	r3, [sp, #0]
 8004254:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004258:	68f8      	ldr	r0, [r7, #12]
 800425a:	f000 fa79 	bl	8004750 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800425e:	69fa      	ldr	r2, [r7, #28]
 8004260:	69b9      	ldr	r1, [r7, #24]
 8004262:	68f8      	ldr	r0, [r7, #12]
 8004264:	f000 f909 	bl	800447a <I2C_WaitOnTXISFlagUntilTimeout>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d001      	beq.n	8004272 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e02c      	b.n	80042cc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004272:	88fb      	ldrh	r3, [r7, #6]
 8004274:	2b01      	cmp	r3, #1
 8004276:	d105      	bne.n	8004284 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004278:	893b      	ldrh	r3, [r7, #8]
 800427a:	b2da      	uxtb	r2, r3
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	629a      	str	r2, [r3, #40]	@ 0x28
 8004282:	e015      	b.n	80042b0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004284:	893b      	ldrh	r3, [r7, #8]
 8004286:	0a1b      	lsrs	r3, r3, #8
 8004288:	b29b      	uxth	r3, r3
 800428a:	b2da      	uxtb	r2, r3
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004292:	69fa      	ldr	r2, [r7, #28]
 8004294:	69b9      	ldr	r1, [r7, #24]
 8004296:	68f8      	ldr	r0, [r7, #12]
 8004298:	f000 f8ef 	bl	800447a <I2C_WaitOnTXISFlagUntilTimeout>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d001      	beq.n	80042a6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e012      	b.n	80042cc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80042a6:	893b      	ldrh	r3, [r7, #8]
 80042a8:	b2da      	uxtb	r2, r3
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	9300      	str	r3, [sp, #0]
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	2200      	movs	r2, #0
 80042b8:	2180      	movs	r1, #128	@ 0x80
 80042ba:	68f8      	ldr	r0, [r7, #12]
 80042bc:	f000 f884 	bl	80043c8 <I2C_WaitOnFlagUntilTimeout>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d001      	beq.n	80042ca <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e000      	b.n	80042cc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80042ca:	2300      	movs	r3, #0
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3710      	adds	r7, #16
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	80002000 	.word	0x80002000

080042d8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b086      	sub	sp, #24
 80042dc:	af02      	add	r7, sp, #8
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	4608      	mov	r0, r1
 80042e2:	4611      	mov	r1, r2
 80042e4:	461a      	mov	r2, r3
 80042e6:	4603      	mov	r3, r0
 80042e8:	817b      	strh	r3, [r7, #10]
 80042ea:	460b      	mov	r3, r1
 80042ec:	813b      	strh	r3, [r7, #8]
 80042ee:	4613      	mov	r3, r2
 80042f0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80042f2:	88fb      	ldrh	r3, [r7, #6]
 80042f4:	b2da      	uxtb	r2, r3
 80042f6:	8979      	ldrh	r1, [r7, #10]
 80042f8:	4b20      	ldr	r3, [pc, #128]	@ (800437c <I2C_RequestMemoryRead+0xa4>)
 80042fa:	9300      	str	r3, [sp, #0]
 80042fc:	2300      	movs	r3, #0
 80042fe:	68f8      	ldr	r0, [r7, #12]
 8004300:	f000 fa26 	bl	8004750 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004304:	69fa      	ldr	r2, [r7, #28]
 8004306:	69b9      	ldr	r1, [r7, #24]
 8004308:	68f8      	ldr	r0, [r7, #12]
 800430a:	f000 f8b6 	bl	800447a <I2C_WaitOnTXISFlagUntilTimeout>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d001      	beq.n	8004318 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e02c      	b.n	8004372 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004318:	88fb      	ldrh	r3, [r7, #6]
 800431a:	2b01      	cmp	r3, #1
 800431c:	d105      	bne.n	800432a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800431e:	893b      	ldrh	r3, [r7, #8]
 8004320:	b2da      	uxtb	r2, r3
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	629a      	str	r2, [r3, #40]	@ 0x28
 8004328:	e015      	b.n	8004356 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800432a:	893b      	ldrh	r3, [r7, #8]
 800432c:	0a1b      	lsrs	r3, r3, #8
 800432e:	b29b      	uxth	r3, r3
 8004330:	b2da      	uxtb	r2, r3
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004338:	69fa      	ldr	r2, [r7, #28]
 800433a:	69b9      	ldr	r1, [r7, #24]
 800433c:	68f8      	ldr	r0, [r7, #12]
 800433e:	f000 f89c 	bl	800447a <I2C_WaitOnTXISFlagUntilTimeout>
 8004342:	4603      	mov	r3, r0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d001      	beq.n	800434c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e012      	b.n	8004372 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800434c:	893b      	ldrh	r3, [r7, #8]
 800434e:	b2da      	uxtb	r2, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	9300      	str	r3, [sp, #0]
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	2200      	movs	r2, #0
 800435e:	2140      	movs	r1, #64	@ 0x40
 8004360:	68f8      	ldr	r0, [r7, #12]
 8004362:	f000 f831 	bl	80043c8 <I2C_WaitOnFlagUntilTimeout>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d001      	beq.n	8004370 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e000      	b.n	8004372 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3710      	adds	r7, #16
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	80002000 	.word	0x80002000

08004380 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	699b      	ldr	r3, [r3, #24]
 800438e:	f003 0302 	and.w	r3, r3, #2
 8004392:	2b02      	cmp	r3, #2
 8004394:	d103      	bne.n	800439e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	2200      	movs	r2, #0
 800439c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	699b      	ldr	r3, [r3, #24]
 80043a4:	f003 0301 	and.w	r3, r3, #1
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d007      	beq.n	80043bc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	699a      	ldr	r2, [r3, #24]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f042 0201 	orr.w	r2, r2, #1
 80043ba:	619a      	str	r2, [r3, #24]
  }
}
 80043bc:	bf00      	nop
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	603b      	str	r3, [r7, #0]
 80043d4:	4613      	mov	r3, r2
 80043d6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043d8:	e03b      	b.n	8004452 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80043da:	69ba      	ldr	r2, [r7, #24]
 80043dc:	6839      	ldr	r1, [r7, #0]
 80043de:	68f8      	ldr	r0, [r7, #12]
 80043e0:	f000 f8d6 	bl	8004590 <I2C_IsErrorOccurred>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d001      	beq.n	80043ee <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e041      	b.n	8004472 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043f4:	d02d      	beq.n	8004452 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043f6:	f7ff f89b 	bl	8003530 <HAL_GetTick>
 80043fa:	4602      	mov	r2, r0
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	683a      	ldr	r2, [r7, #0]
 8004402:	429a      	cmp	r2, r3
 8004404:	d302      	bcc.n	800440c <I2C_WaitOnFlagUntilTimeout+0x44>
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d122      	bne.n	8004452 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	699a      	ldr	r2, [r3, #24]
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	4013      	ands	r3, r2
 8004416:	68ba      	ldr	r2, [r7, #8]
 8004418:	429a      	cmp	r2, r3
 800441a:	bf0c      	ite	eq
 800441c:	2301      	moveq	r3, #1
 800441e:	2300      	movne	r3, #0
 8004420:	b2db      	uxtb	r3, r3
 8004422:	461a      	mov	r2, r3
 8004424:	79fb      	ldrb	r3, [r7, #7]
 8004426:	429a      	cmp	r2, r3
 8004428:	d113      	bne.n	8004452 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800442e:	f043 0220 	orr.w	r2, r3, #32
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2220      	movs	r2, #32
 800443a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e00f      	b.n	8004472 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	699a      	ldr	r2, [r3, #24]
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	4013      	ands	r3, r2
 800445c:	68ba      	ldr	r2, [r7, #8]
 800445e:	429a      	cmp	r2, r3
 8004460:	bf0c      	ite	eq
 8004462:	2301      	moveq	r3, #1
 8004464:	2300      	movne	r3, #0
 8004466:	b2db      	uxtb	r3, r3
 8004468:	461a      	mov	r2, r3
 800446a:	79fb      	ldrb	r3, [r7, #7]
 800446c:	429a      	cmp	r2, r3
 800446e:	d0b4      	beq.n	80043da <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004470:	2300      	movs	r3, #0
}
 8004472:	4618      	mov	r0, r3
 8004474:	3710      	adds	r7, #16
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}

0800447a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800447a:	b580      	push	{r7, lr}
 800447c:	b084      	sub	sp, #16
 800447e:	af00      	add	r7, sp, #0
 8004480:	60f8      	str	r0, [r7, #12]
 8004482:	60b9      	str	r1, [r7, #8]
 8004484:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004486:	e033      	b.n	80044f0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	68b9      	ldr	r1, [r7, #8]
 800448c:	68f8      	ldr	r0, [r7, #12]
 800448e:	f000 f87f 	bl	8004590 <I2C_IsErrorOccurred>
 8004492:	4603      	mov	r3, r0
 8004494:	2b00      	cmp	r3, #0
 8004496:	d001      	beq.n	800449c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e031      	b.n	8004500 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044a2:	d025      	beq.n	80044f0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044a4:	f7ff f844 	bl	8003530 <HAL_GetTick>
 80044a8:	4602      	mov	r2, r0
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	68ba      	ldr	r2, [r7, #8]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d302      	bcc.n	80044ba <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d11a      	bne.n	80044f0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	699b      	ldr	r3, [r3, #24]
 80044c0:	f003 0302 	and.w	r3, r3, #2
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	d013      	beq.n	80044f0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044cc:	f043 0220 	orr.w	r2, r3, #32
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2220      	movs	r2, #32
 80044d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2200      	movs	r2, #0
 80044e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e007      	b.n	8004500 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	699b      	ldr	r3, [r3, #24]
 80044f6:	f003 0302 	and.w	r3, r3, #2
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	d1c4      	bne.n	8004488 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80044fe:	2300      	movs	r3, #0
}
 8004500:	4618      	mov	r0, r3
 8004502:	3710      	adds	r7, #16
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004514:	e02f      	b.n	8004576 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	68b9      	ldr	r1, [r7, #8]
 800451a:	68f8      	ldr	r0, [r7, #12]
 800451c:	f000 f838 	bl	8004590 <I2C_IsErrorOccurred>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d001      	beq.n	800452a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e02d      	b.n	8004586 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800452a:	f7ff f801 	bl	8003530 <HAL_GetTick>
 800452e:	4602      	mov	r2, r0
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	68ba      	ldr	r2, [r7, #8]
 8004536:	429a      	cmp	r2, r3
 8004538:	d302      	bcc.n	8004540 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d11a      	bne.n	8004576 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	699b      	ldr	r3, [r3, #24]
 8004546:	f003 0320 	and.w	r3, r3, #32
 800454a:	2b20      	cmp	r3, #32
 800454c:	d013      	beq.n	8004576 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004552:	f043 0220 	orr.w	r2, r3, #32
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2220      	movs	r2, #32
 800455e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2200      	movs	r2, #0
 8004566:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2200      	movs	r2, #0
 800456e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e007      	b.n	8004586 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	699b      	ldr	r3, [r3, #24]
 800457c:	f003 0320 	and.w	r3, r3, #32
 8004580:	2b20      	cmp	r3, #32
 8004582:	d1c8      	bne.n	8004516 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004584:	2300      	movs	r3, #0
}
 8004586:	4618      	mov	r0, r3
 8004588:	3710      	adds	r7, #16
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
	...

08004590 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b08a      	sub	sp, #40	@ 0x28
 8004594:	af00      	add	r7, sp, #0
 8004596:	60f8      	str	r0, [r7, #12]
 8004598:	60b9      	str	r1, [r7, #8]
 800459a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800459c:	2300      	movs	r3, #0
 800459e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	699b      	ldr	r3, [r3, #24]
 80045a8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80045aa:	2300      	movs	r3, #0
 80045ac:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	f003 0310 	and.w	r3, r3, #16
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d068      	beq.n	800468e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2210      	movs	r2, #16
 80045c2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80045c4:	e049      	b.n	800465a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045cc:	d045      	beq.n	800465a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80045ce:	f7fe ffaf 	bl	8003530 <HAL_GetTick>
 80045d2:	4602      	mov	r2, r0
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	1ad3      	subs	r3, r2, r3
 80045d8:	68ba      	ldr	r2, [r7, #8]
 80045da:	429a      	cmp	r2, r3
 80045dc:	d302      	bcc.n	80045e4 <I2C_IsErrorOccurred+0x54>
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d13a      	bne.n	800465a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80045ee:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80045f6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	699b      	ldr	r3, [r3, #24]
 80045fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004602:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004606:	d121      	bne.n	800464c <I2C_IsErrorOccurred+0xbc>
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800460e:	d01d      	beq.n	800464c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004610:	7cfb      	ldrb	r3, [r7, #19]
 8004612:	2b20      	cmp	r3, #32
 8004614:	d01a      	beq.n	800464c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	685a      	ldr	r2, [r3, #4]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004624:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004626:	f7fe ff83 	bl	8003530 <HAL_GetTick>
 800462a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800462c:	e00e      	b.n	800464c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800462e:	f7fe ff7f 	bl	8003530 <HAL_GetTick>
 8004632:	4602      	mov	r2, r0
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	2b19      	cmp	r3, #25
 800463a:	d907      	bls.n	800464c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800463c:	6a3b      	ldr	r3, [r7, #32]
 800463e:	f043 0320 	orr.w	r3, r3, #32
 8004642:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800464a:	e006      	b.n	800465a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	f003 0320 	and.w	r3, r3, #32
 8004656:	2b20      	cmp	r3, #32
 8004658:	d1e9      	bne.n	800462e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	699b      	ldr	r3, [r3, #24]
 8004660:	f003 0320 	and.w	r3, r3, #32
 8004664:	2b20      	cmp	r3, #32
 8004666:	d003      	beq.n	8004670 <I2C_IsErrorOccurred+0xe0>
 8004668:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800466c:	2b00      	cmp	r3, #0
 800466e:	d0aa      	beq.n	80045c6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004670:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004674:	2b00      	cmp	r3, #0
 8004676:	d103      	bne.n	8004680 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2220      	movs	r2, #32
 800467e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004680:	6a3b      	ldr	r3, [r7, #32]
 8004682:	f043 0304 	orr.w	r3, r3, #4
 8004686:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	699b      	ldr	r3, [r3, #24]
 8004694:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800469c:	2b00      	cmp	r3, #0
 800469e:	d00b      	beq.n	80046b8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80046a0:	6a3b      	ldr	r3, [r7, #32]
 80046a2:	f043 0301 	orr.w	r3, r3, #1
 80046a6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80046b0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80046b8:	69bb      	ldr	r3, [r7, #24]
 80046ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d00b      	beq.n	80046da <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80046c2:	6a3b      	ldr	r3, [r7, #32]
 80046c4:	f043 0308 	orr.w	r3, r3, #8
 80046c8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80046d2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d00b      	beq.n	80046fc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80046e4:	6a3b      	ldr	r3, [r7, #32]
 80046e6:	f043 0302 	orr.w	r3, r3, #2
 80046ea:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80046f4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80046fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004700:	2b00      	cmp	r3, #0
 8004702:	d01c      	beq.n	800473e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004704:	68f8      	ldr	r0, [r7, #12]
 8004706:	f7ff fe3b 	bl	8004380 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	6859      	ldr	r1, [r3, #4]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	4b0d      	ldr	r3, [pc, #52]	@ (800474c <I2C_IsErrorOccurred+0x1bc>)
 8004716:	400b      	ands	r3, r1
 8004718:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800471e:	6a3b      	ldr	r3, [r7, #32]
 8004720:	431a      	orrs	r2, r3
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2220      	movs	r2, #32
 800472a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2200      	movs	r2, #0
 8004732:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2200      	movs	r2, #0
 800473a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800473e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004742:	4618      	mov	r0, r3
 8004744:	3728      	adds	r7, #40	@ 0x28
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	fe00e800 	.word	0xfe00e800

08004750 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004750:	b480      	push	{r7}
 8004752:	b087      	sub	sp, #28
 8004754:	af00      	add	r7, sp, #0
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	607b      	str	r3, [r7, #4]
 800475a:	460b      	mov	r3, r1
 800475c:	817b      	strh	r3, [r7, #10]
 800475e:	4613      	mov	r3, r2
 8004760:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004762:	897b      	ldrh	r3, [r7, #10]
 8004764:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004768:	7a7b      	ldrb	r3, [r7, #9]
 800476a:	041b      	lsls	r3, r3, #16
 800476c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004770:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004776:	6a3b      	ldr	r3, [r7, #32]
 8004778:	4313      	orrs	r3, r2
 800477a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800477e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	685a      	ldr	r2, [r3, #4]
 8004786:	6a3b      	ldr	r3, [r7, #32]
 8004788:	0d5b      	lsrs	r3, r3, #21
 800478a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800478e:	4b08      	ldr	r3, [pc, #32]	@ (80047b0 <I2C_TransferConfig+0x60>)
 8004790:	430b      	orrs	r3, r1
 8004792:	43db      	mvns	r3, r3
 8004794:	ea02 0103 	and.w	r1, r2, r3
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	697a      	ldr	r2, [r7, #20]
 800479e:	430a      	orrs	r2, r1
 80047a0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80047a2:	bf00      	nop
 80047a4:	371c      	adds	r7, #28
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop
 80047b0:	03ff63ff 	.word	0x03ff63ff

080047b4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	2b20      	cmp	r3, #32
 80047c8:	d138      	bne.n	800483c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d101      	bne.n	80047d8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80047d4:	2302      	movs	r3, #2
 80047d6:	e032      	b.n	800483e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2224      	movs	r2, #36	@ 0x24
 80047e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f022 0201 	bic.w	r2, r2, #1
 80047f6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004806:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	6819      	ldr	r1, [r3, #0]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	683a      	ldr	r2, [r7, #0]
 8004814:	430a      	orrs	r2, r1
 8004816:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f042 0201 	orr.w	r2, r2, #1
 8004826:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2220      	movs	r2, #32
 800482c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004838:	2300      	movs	r3, #0
 800483a:	e000      	b.n	800483e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800483c:	2302      	movs	r3, #2
  }
}
 800483e:	4618      	mov	r0, r3
 8004840:	370c      	adds	r7, #12
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr
	...

0800484c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800484c:	b480      	push	{r7}
 800484e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004850:	4b04      	ldr	r3, [pc, #16]	@ (8004864 <HAL_PWREx_GetVoltageRange+0x18>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004858:	4618      	mov	r0, r3
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr
 8004862:	bf00      	nop
 8004864:	40007000 	.word	0x40007000

08004868 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b088      	sub	sp, #32
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d101      	bne.n	800487a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e3ca      	b.n	8005010 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800487a:	4b97      	ldr	r3, [pc, #604]	@ (8004ad8 <HAL_RCC_OscConfig+0x270>)
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f003 030c 	and.w	r3, r3, #12
 8004882:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004884:	4b94      	ldr	r3, [pc, #592]	@ (8004ad8 <HAL_RCC_OscConfig+0x270>)
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	f003 0303 	and.w	r3, r3, #3
 800488c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0310 	and.w	r3, r3, #16
 8004896:	2b00      	cmp	r3, #0
 8004898:	f000 80e4 	beq.w	8004a64 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d007      	beq.n	80048b2 <HAL_RCC_OscConfig+0x4a>
 80048a2:	69bb      	ldr	r3, [r7, #24]
 80048a4:	2b0c      	cmp	r3, #12
 80048a6:	f040 808b 	bne.w	80049c0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	f040 8087 	bne.w	80049c0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80048b2:	4b89      	ldr	r3, [pc, #548]	@ (8004ad8 <HAL_RCC_OscConfig+0x270>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0302 	and.w	r3, r3, #2
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d005      	beq.n	80048ca <HAL_RCC_OscConfig+0x62>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	699b      	ldr	r3, [r3, #24]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d101      	bne.n	80048ca <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e3a2      	b.n	8005010 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a1a      	ldr	r2, [r3, #32]
 80048ce:	4b82      	ldr	r3, [pc, #520]	@ (8004ad8 <HAL_RCC_OscConfig+0x270>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0308 	and.w	r3, r3, #8
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d004      	beq.n	80048e4 <HAL_RCC_OscConfig+0x7c>
 80048da:	4b7f      	ldr	r3, [pc, #508]	@ (8004ad8 <HAL_RCC_OscConfig+0x270>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80048e2:	e005      	b.n	80048f0 <HAL_RCC_OscConfig+0x88>
 80048e4:	4b7c      	ldr	r3, [pc, #496]	@ (8004ad8 <HAL_RCC_OscConfig+0x270>)
 80048e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048ea:	091b      	lsrs	r3, r3, #4
 80048ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d223      	bcs.n	800493c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a1b      	ldr	r3, [r3, #32]
 80048f8:	4618      	mov	r0, r3
 80048fa:	f000 fd55 	bl	80053a8 <RCC_SetFlashLatencyFromMSIRange>
 80048fe:	4603      	mov	r3, r0
 8004900:	2b00      	cmp	r3, #0
 8004902:	d001      	beq.n	8004908 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e383      	b.n	8005010 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004908:	4b73      	ldr	r3, [pc, #460]	@ (8004ad8 <HAL_RCC_OscConfig+0x270>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a72      	ldr	r2, [pc, #456]	@ (8004ad8 <HAL_RCC_OscConfig+0x270>)
 800490e:	f043 0308 	orr.w	r3, r3, #8
 8004912:	6013      	str	r3, [r2, #0]
 8004914:	4b70      	ldr	r3, [pc, #448]	@ (8004ad8 <HAL_RCC_OscConfig+0x270>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a1b      	ldr	r3, [r3, #32]
 8004920:	496d      	ldr	r1, [pc, #436]	@ (8004ad8 <HAL_RCC_OscConfig+0x270>)
 8004922:	4313      	orrs	r3, r2
 8004924:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004926:	4b6c      	ldr	r3, [pc, #432]	@ (8004ad8 <HAL_RCC_OscConfig+0x270>)
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	69db      	ldr	r3, [r3, #28]
 8004932:	021b      	lsls	r3, r3, #8
 8004934:	4968      	ldr	r1, [pc, #416]	@ (8004ad8 <HAL_RCC_OscConfig+0x270>)
 8004936:	4313      	orrs	r3, r2
 8004938:	604b      	str	r3, [r1, #4]
 800493a:	e025      	b.n	8004988 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800493c:	4b66      	ldr	r3, [pc, #408]	@ (8004ad8 <HAL_RCC_OscConfig+0x270>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a65      	ldr	r2, [pc, #404]	@ (8004ad8 <HAL_RCC_OscConfig+0x270>)
 8004942:	f043 0308 	orr.w	r3, r3, #8
 8004946:	6013      	str	r3, [r2, #0]
 8004948:	4b63      	ldr	r3, [pc, #396]	@ (8004ad8 <HAL_RCC_OscConfig+0x270>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6a1b      	ldr	r3, [r3, #32]
 8004954:	4960      	ldr	r1, [pc, #384]	@ (8004ad8 <HAL_RCC_OscConfig+0x270>)
 8004956:	4313      	orrs	r3, r2
 8004958:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800495a:	4b5f      	ldr	r3, [pc, #380]	@ (8004ad8 <HAL_RCC_OscConfig+0x270>)
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	69db      	ldr	r3, [r3, #28]
 8004966:	021b      	lsls	r3, r3, #8
 8004968:	495b      	ldr	r1, [pc, #364]	@ (8004ad8 <HAL_RCC_OscConfig+0x270>)
 800496a:	4313      	orrs	r3, r2
 800496c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d109      	bne.n	8004988 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6a1b      	ldr	r3, [r3, #32]
 8004978:	4618      	mov	r0, r3
 800497a:	f000 fd15 	bl	80053a8 <RCC_SetFlashLatencyFromMSIRange>
 800497e:	4603      	mov	r3, r0
 8004980:	2b00      	cmp	r3, #0
 8004982:	d001      	beq.n	8004988 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e343      	b.n	8005010 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004988:	f000 fc4a 	bl	8005220 <HAL_RCC_GetSysClockFreq>
 800498c:	4602      	mov	r2, r0
 800498e:	4b52      	ldr	r3, [pc, #328]	@ (8004ad8 <HAL_RCC_OscConfig+0x270>)
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	091b      	lsrs	r3, r3, #4
 8004994:	f003 030f 	and.w	r3, r3, #15
 8004998:	4950      	ldr	r1, [pc, #320]	@ (8004adc <HAL_RCC_OscConfig+0x274>)
 800499a:	5ccb      	ldrb	r3, [r1, r3]
 800499c:	f003 031f 	and.w	r3, r3, #31
 80049a0:	fa22 f303 	lsr.w	r3, r2, r3
 80049a4:	4a4e      	ldr	r2, [pc, #312]	@ (8004ae0 <HAL_RCC_OscConfig+0x278>)
 80049a6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80049a8:	4b4e      	ldr	r3, [pc, #312]	@ (8004ae4 <HAL_RCC_OscConfig+0x27c>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4618      	mov	r0, r3
 80049ae:	f7fe fd6f 	bl	8003490 <HAL_InitTick>
 80049b2:	4603      	mov	r3, r0
 80049b4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80049b6:	7bfb      	ldrb	r3, [r7, #15]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d052      	beq.n	8004a62 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80049bc:	7bfb      	ldrb	r3, [r7, #15]
 80049be:	e327      	b.n	8005010 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	699b      	ldr	r3, [r3, #24]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d032      	beq.n	8004a2e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80049c8:	4b43      	ldr	r3, [pc, #268]	@ (8004ad8 <HAL_RCC_OscConfig+0x270>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a42      	ldr	r2, [pc, #264]	@ (8004ad8 <HAL_RCC_OscConfig+0x270>)
 80049ce:	f043 0301 	orr.w	r3, r3, #1
 80049d2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80049d4:	f7fe fdac 	bl	8003530 <HAL_GetTick>
 80049d8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80049da:	e008      	b.n	80049ee <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80049dc:	f7fe fda8 	bl	8003530 <HAL_GetTick>
 80049e0:	4602      	mov	r2, r0
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	2b02      	cmp	r3, #2
 80049e8:	d901      	bls.n	80049ee <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e310      	b.n	8005010 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80049ee:	4b3a      	ldr	r3, [pc, #232]	@ (8004ad8 <HAL_RCC_OscConfig+0x270>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0302 	and.w	r3, r3, #2
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d0f0      	beq.n	80049dc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80049fa:	4b37      	ldr	r3, [pc, #220]	@ (8004ad8 <HAL_RCC_OscConfig+0x270>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a36      	ldr	r2, [pc, #216]	@ (8004ad8 <HAL_RCC_OscConfig+0x270>)
 8004a00:	f043 0308 	orr.w	r3, r3, #8
 8004a04:	6013      	str	r3, [r2, #0]
 8004a06:	4b34      	ldr	r3, [pc, #208]	@ (8004ad8 <HAL_RCC_OscConfig+0x270>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a1b      	ldr	r3, [r3, #32]
 8004a12:	4931      	ldr	r1, [pc, #196]	@ (8004ad8 <HAL_RCC_OscConfig+0x270>)
 8004a14:	4313      	orrs	r3, r2
 8004a16:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a18:	4b2f      	ldr	r3, [pc, #188]	@ (8004ad8 <HAL_RCC_OscConfig+0x270>)
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	69db      	ldr	r3, [r3, #28]
 8004a24:	021b      	lsls	r3, r3, #8
 8004a26:	492c      	ldr	r1, [pc, #176]	@ (8004ad8 <HAL_RCC_OscConfig+0x270>)
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	604b      	str	r3, [r1, #4]
 8004a2c:	e01a      	b.n	8004a64 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004a2e:	4b2a      	ldr	r3, [pc, #168]	@ (8004ad8 <HAL_RCC_OscConfig+0x270>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a29      	ldr	r2, [pc, #164]	@ (8004ad8 <HAL_RCC_OscConfig+0x270>)
 8004a34:	f023 0301 	bic.w	r3, r3, #1
 8004a38:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004a3a:	f7fe fd79 	bl	8003530 <HAL_GetTick>
 8004a3e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004a40:	e008      	b.n	8004a54 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004a42:	f7fe fd75 	bl	8003530 <HAL_GetTick>
 8004a46:	4602      	mov	r2, r0
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	1ad3      	subs	r3, r2, r3
 8004a4c:	2b02      	cmp	r3, #2
 8004a4e:	d901      	bls.n	8004a54 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004a50:	2303      	movs	r3, #3
 8004a52:	e2dd      	b.n	8005010 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004a54:	4b20      	ldr	r3, [pc, #128]	@ (8004ad8 <HAL_RCC_OscConfig+0x270>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0302 	and.w	r3, r3, #2
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d1f0      	bne.n	8004a42 <HAL_RCC_OscConfig+0x1da>
 8004a60:	e000      	b.n	8004a64 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004a62:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0301 	and.w	r3, r3, #1
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d074      	beq.n	8004b5a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	2b08      	cmp	r3, #8
 8004a74:	d005      	beq.n	8004a82 <HAL_RCC_OscConfig+0x21a>
 8004a76:	69bb      	ldr	r3, [r7, #24]
 8004a78:	2b0c      	cmp	r3, #12
 8004a7a:	d10e      	bne.n	8004a9a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	2b03      	cmp	r3, #3
 8004a80:	d10b      	bne.n	8004a9a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a82:	4b15      	ldr	r3, [pc, #84]	@ (8004ad8 <HAL_RCC_OscConfig+0x270>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d064      	beq.n	8004b58 <HAL_RCC_OscConfig+0x2f0>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d160      	bne.n	8004b58 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e2ba      	b.n	8005010 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004aa2:	d106      	bne.n	8004ab2 <HAL_RCC_OscConfig+0x24a>
 8004aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8004ad8 <HAL_RCC_OscConfig+0x270>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a0b      	ldr	r2, [pc, #44]	@ (8004ad8 <HAL_RCC_OscConfig+0x270>)
 8004aaa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004aae:	6013      	str	r3, [r2, #0]
 8004ab0:	e026      	b.n	8004b00 <HAL_RCC_OscConfig+0x298>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004aba:	d115      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x280>
 8004abc:	4b06      	ldr	r3, [pc, #24]	@ (8004ad8 <HAL_RCC_OscConfig+0x270>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a05      	ldr	r2, [pc, #20]	@ (8004ad8 <HAL_RCC_OscConfig+0x270>)
 8004ac2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ac6:	6013      	str	r3, [r2, #0]
 8004ac8:	4b03      	ldr	r3, [pc, #12]	@ (8004ad8 <HAL_RCC_OscConfig+0x270>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a02      	ldr	r2, [pc, #8]	@ (8004ad8 <HAL_RCC_OscConfig+0x270>)
 8004ace:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ad2:	6013      	str	r3, [r2, #0]
 8004ad4:	e014      	b.n	8004b00 <HAL_RCC_OscConfig+0x298>
 8004ad6:	bf00      	nop
 8004ad8:	40021000 	.word	0x40021000
 8004adc:	0800cfbc 	.word	0x0800cfbc
 8004ae0:	20000048 	.word	0x20000048
 8004ae4:	2000004c 	.word	0x2000004c
 8004ae8:	4ba0      	ldr	r3, [pc, #640]	@ (8004d6c <HAL_RCC_OscConfig+0x504>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a9f      	ldr	r2, [pc, #636]	@ (8004d6c <HAL_RCC_OscConfig+0x504>)
 8004aee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004af2:	6013      	str	r3, [r2, #0]
 8004af4:	4b9d      	ldr	r3, [pc, #628]	@ (8004d6c <HAL_RCC_OscConfig+0x504>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a9c      	ldr	r2, [pc, #624]	@ (8004d6c <HAL_RCC_OscConfig+0x504>)
 8004afa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004afe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d013      	beq.n	8004b30 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b08:	f7fe fd12 	bl	8003530 <HAL_GetTick>
 8004b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b0e:	e008      	b.n	8004b22 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b10:	f7fe fd0e 	bl	8003530 <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	2b64      	cmp	r3, #100	@ 0x64
 8004b1c:	d901      	bls.n	8004b22 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e276      	b.n	8005010 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b22:	4b92      	ldr	r3, [pc, #584]	@ (8004d6c <HAL_RCC_OscConfig+0x504>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d0f0      	beq.n	8004b10 <HAL_RCC_OscConfig+0x2a8>
 8004b2e:	e014      	b.n	8004b5a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b30:	f7fe fcfe 	bl	8003530 <HAL_GetTick>
 8004b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b36:	e008      	b.n	8004b4a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b38:	f7fe fcfa 	bl	8003530 <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	2b64      	cmp	r3, #100	@ 0x64
 8004b44:	d901      	bls.n	8004b4a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e262      	b.n	8005010 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b4a:	4b88      	ldr	r3, [pc, #544]	@ (8004d6c <HAL_RCC_OscConfig+0x504>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d1f0      	bne.n	8004b38 <HAL_RCC_OscConfig+0x2d0>
 8004b56:	e000      	b.n	8004b5a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 0302 	and.w	r3, r3, #2
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d060      	beq.n	8004c28 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004b66:	69bb      	ldr	r3, [r7, #24]
 8004b68:	2b04      	cmp	r3, #4
 8004b6a:	d005      	beq.n	8004b78 <HAL_RCC_OscConfig+0x310>
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	2b0c      	cmp	r3, #12
 8004b70:	d119      	bne.n	8004ba6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	d116      	bne.n	8004ba6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b78:	4b7c      	ldr	r3, [pc, #496]	@ (8004d6c <HAL_RCC_OscConfig+0x504>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d005      	beq.n	8004b90 <HAL_RCC_OscConfig+0x328>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d101      	bne.n	8004b90 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e23f      	b.n	8005010 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b90:	4b76      	ldr	r3, [pc, #472]	@ (8004d6c <HAL_RCC_OscConfig+0x504>)
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	691b      	ldr	r3, [r3, #16]
 8004b9c:	061b      	lsls	r3, r3, #24
 8004b9e:	4973      	ldr	r1, [pc, #460]	@ (8004d6c <HAL_RCC_OscConfig+0x504>)
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ba4:	e040      	b.n	8004c28 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d023      	beq.n	8004bf6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bae:	4b6f      	ldr	r3, [pc, #444]	@ (8004d6c <HAL_RCC_OscConfig+0x504>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a6e      	ldr	r2, [pc, #440]	@ (8004d6c <HAL_RCC_OscConfig+0x504>)
 8004bb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bba:	f7fe fcb9 	bl	8003530 <HAL_GetTick>
 8004bbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bc0:	e008      	b.n	8004bd4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bc2:	f7fe fcb5 	bl	8003530 <HAL_GetTick>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	d901      	bls.n	8004bd4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	e21d      	b.n	8005010 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bd4:	4b65      	ldr	r3, [pc, #404]	@ (8004d6c <HAL_RCC_OscConfig+0x504>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d0f0      	beq.n	8004bc2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004be0:	4b62      	ldr	r3, [pc, #392]	@ (8004d6c <HAL_RCC_OscConfig+0x504>)
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	691b      	ldr	r3, [r3, #16]
 8004bec:	061b      	lsls	r3, r3, #24
 8004bee:	495f      	ldr	r1, [pc, #380]	@ (8004d6c <HAL_RCC_OscConfig+0x504>)
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	604b      	str	r3, [r1, #4]
 8004bf4:	e018      	b.n	8004c28 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bf6:	4b5d      	ldr	r3, [pc, #372]	@ (8004d6c <HAL_RCC_OscConfig+0x504>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a5c      	ldr	r2, [pc, #368]	@ (8004d6c <HAL_RCC_OscConfig+0x504>)
 8004bfc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c02:	f7fe fc95 	bl	8003530 <HAL_GetTick>
 8004c06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c08:	e008      	b.n	8004c1c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c0a:	f7fe fc91 	bl	8003530 <HAL_GetTick>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	2b02      	cmp	r3, #2
 8004c16:	d901      	bls.n	8004c1c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004c18:	2303      	movs	r3, #3
 8004c1a:	e1f9      	b.n	8005010 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c1c:	4b53      	ldr	r3, [pc, #332]	@ (8004d6c <HAL_RCC_OscConfig+0x504>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d1f0      	bne.n	8004c0a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 0308 	and.w	r3, r3, #8
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d03c      	beq.n	8004cae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	695b      	ldr	r3, [r3, #20]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d01c      	beq.n	8004c76 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c3c:	4b4b      	ldr	r3, [pc, #300]	@ (8004d6c <HAL_RCC_OscConfig+0x504>)
 8004c3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c42:	4a4a      	ldr	r2, [pc, #296]	@ (8004d6c <HAL_RCC_OscConfig+0x504>)
 8004c44:	f043 0301 	orr.w	r3, r3, #1
 8004c48:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c4c:	f7fe fc70 	bl	8003530 <HAL_GetTick>
 8004c50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c52:	e008      	b.n	8004c66 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c54:	f7fe fc6c 	bl	8003530 <HAL_GetTick>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	2b02      	cmp	r3, #2
 8004c60:	d901      	bls.n	8004c66 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	e1d4      	b.n	8005010 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c66:	4b41      	ldr	r3, [pc, #260]	@ (8004d6c <HAL_RCC_OscConfig+0x504>)
 8004c68:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c6c:	f003 0302 	and.w	r3, r3, #2
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d0ef      	beq.n	8004c54 <HAL_RCC_OscConfig+0x3ec>
 8004c74:	e01b      	b.n	8004cae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c76:	4b3d      	ldr	r3, [pc, #244]	@ (8004d6c <HAL_RCC_OscConfig+0x504>)
 8004c78:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c7c:	4a3b      	ldr	r2, [pc, #236]	@ (8004d6c <HAL_RCC_OscConfig+0x504>)
 8004c7e:	f023 0301 	bic.w	r3, r3, #1
 8004c82:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c86:	f7fe fc53 	bl	8003530 <HAL_GetTick>
 8004c8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c8c:	e008      	b.n	8004ca0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c8e:	f7fe fc4f 	bl	8003530 <HAL_GetTick>
 8004c92:	4602      	mov	r2, r0
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	2b02      	cmp	r3, #2
 8004c9a:	d901      	bls.n	8004ca0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004c9c:	2303      	movs	r3, #3
 8004c9e:	e1b7      	b.n	8005010 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ca0:	4b32      	ldr	r3, [pc, #200]	@ (8004d6c <HAL_RCC_OscConfig+0x504>)
 8004ca2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ca6:	f003 0302 	and.w	r3, r3, #2
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d1ef      	bne.n	8004c8e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0304 	and.w	r3, r3, #4
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	f000 80a6 	beq.w	8004e08 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004cc0:	4b2a      	ldr	r3, [pc, #168]	@ (8004d6c <HAL_RCC_OscConfig+0x504>)
 8004cc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d10d      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ccc:	4b27      	ldr	r3, [pc, #156]	@ (8004d6c <HAL_RCC_OscConfig+0x504>)
 8004cce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cd0:	4a26      	ldr	r2, [pc, #152]	@ (8004d6c <HAL_RCC_OscConfig+0x504>)
 8004cd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cd6:	6593      	str	r3, [r2, #88]	@ 0x58
 8004cd8:	4b24      	ldr	r3, [pc, #144]	@ (8004d6c <HAL_RCC_OscConfig+0x504>)
 8004cda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cdc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ce0:	60bb      	str	r3, [r7, #8]
 8004ce2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ce8:	4b21      	ldr	r3, [pc, #132]	@ (8004d70 <HAL_RCC_OscConfig+0x508>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d118      	bne.n	8004d26 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004cf4:	4b1e      	ldr	r3, [pc, #120]	@ (8004d70 <HAL_RCC_OscConfig+0x508>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a1d      	ldr	r2, [pc, #116]	@ (8004d70 <HAL_RCC_OscConfig+0x508>)
 8004cfa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cfe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d00:	f7fe fc16 	bl	8003530 <HAL_GetTick>
 8004d04:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d06:	e008      	b.n	8004d1a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d08:	f7fe fc12 	bl	8003530 <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	d901      	bls.n	8004d1a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004d16:	2303      	movs	r3, #3
 8004d18:	e17a      	b.n	8005010 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d1a:	4b15      	ldr	r3, [pc, #84]	@ (8004d70 <HAL_RCC_OscConfig+0x508>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d0f0      	beq.n	8004d08 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d108      	bne.n	8004d40 <HAL_RCC_OscConfig+0x4d8>
 8004d2e:	4b0f      	ldr	r3, [pc, #60]	@ (8004d6c <HAL_RCC_OscConfig+0x504>)
 8004d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d34:	4a0d      	ldr	r2, [pc, #52]	@ (8004d6c <HAL_RCC_OscConfig+0x504>)
 8004d36:	f043 0301 	orr.w	r3, r3, #1
 8004d3a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004d3e:	e029      	b.n	8004d94 <HAL_RCC_OscConfig+0x52c>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	2b05      	cmp	r3, #5
 8004d46:	d115      	bne.n	8004d74 <HAL_RCC_OscConfig+0x50c>
 8004d48:	4b08      	ldr	r3, [pc, #32]	@ (8004d6c <HAL_RCC_OscConfig+0x504>)
 8004d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d4e:	4a07      	ldr	r2, [pc, #28]	@ (8004d6c <HAL_RCC_OscConfig+0x504>)
 8004d50:	f043 0304 	orr.w	r3, r3, #4
 8004d54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004d58:	4b04      	ldr	r3, [pc, #16]	@ (8004d6c <HAL_RCC_OscConfig+0x504>)
 8004d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d5e:	4a03      	ldr	r2, [pc, #12]	@ (8004d6c <HAL_RCC_OscConfig+0x504>)
 8004d60:	f043 0301 	orr.w	r3, r3, #1
 8004d64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004d68:	e014      	b.n	8004d94 <HAL_RCC_OscConfig+0x52c>
 8004d6a:	bf00      	nop
 8004d6c:	40021000 	.word	0x40021000
 8004d70:	40007000 	.word	0x40007000
 8004d74:	4b9c      	ldr	r3, [pc, #624]	@ (8004fe8 <HAL_RCC_OscConfig+0x780>)
 8004d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d7a:	4a9b      	ldr	r2, [pc, #620]	@ (8004fe8 <HAL_RCC_OscConfig+0x780>)
 8004d7c:	f023 0301 	bic.w	r3, r3, #1
 8004d80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004d84:	4b98      	ldr	r3, [pc, #608]	@ (8004fe8 <HAL_RCC_OscConfig+0x780>)
 8004d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d8a:	4a97      	ldr	r2, [pc, #604]	@ (8004fe8 <HAL_RCC_OscConfig+0x780>)
 8004d8c:	f023 0304 	bic.w	r3, r3, #4
 8004d90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d016      	beq.n	8004dca <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d9c:	f7fe fbc8 	bl	8003530 <HAL_GetTick>
 8004da0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004da2:	e00a      	b.n	8004dba <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004da4:	f7fe fbc4 	bl	8003530 <HAL_GetTick>
 8004da8:	4602      	mov	r2, r0
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d901      	bls.n	8004dba <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004db6:	2303      	movs	r3, #3
 8004db8:	e12a      	b.n	8005010 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004dba:	4b8b      	ldr	r3, [pc, #556]	@ (8004fe8 <HAL_RCC_OscConfig+0x780>)
 8004dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dc0:	f003 0302 	and.w	r3, r3, #2
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d0ed      	beq.n	8004da4 <HAL_RCC_OscConfig+0x53c>
 8004dc8:	e015      	b.n	8004df6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dca:	f7fe fbb1 	bl	8003530 <HAL_GetTick>
 8004dce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004dd0:	e00a      	b.n	8004de8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dd2:	f7fe fbad 	bl	8003530 <HAL_GetTick>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d901      	bls.n	8004de8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004de4:	2303      	movs	r3, #3
 8004de6:	e113      	b.n	8005010 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004de8:	4b7f      	ldr	r3, [pc, #508]	@ (8004fe8 <HAL_RCC_OscConfig+0x780>)
 8004dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dee:	f003 0302 	and.w	r3, r3, #2
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d1ed      	bne.n	8004dd2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004df6:	7ffb      	ldrb	r3, [r7, #31]
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d105      	bne.n	8004e08 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dfc:	4b7a      	ldr	r3, [pc, #488]	@ (8004fe8 <HAL_RCC_OscConfig+0x780>)
 8004dfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e00:	4a79      	ldr	r2, [pc, #484]	@ (8004fe8 <HAL_RCC_OscConfig+0x780>)
 8004e02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e06:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	f000 80fe 	beq.w	800500e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e16:	2b02      	cmp	r3, #2
 8004e18:	f040 80d0 	bne.w	8004fbc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004e1c:	4b72      	ldr	r3, [pc, #456]	@ (8004fe8 <HAL_RCC_OscConfig+0x780>)
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	f003 0203 	and.w	r2, r3, #3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d130      	bne.n	8004e92 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d127      	bne.n	8004e92 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e4c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d11f      	bne.n	8004e92 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004e5c:	2a07      	cmp	r2, #7
 8004e5e:	bf14      	ite	ne
 8004e60:	2201      	movne	r2, #1
 8004e62:	2200      	moveq	r2, #0
 8004e64:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d113      	bne.n	8004e92 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e74:	085b      	lsrs	r3, r3, #1
 8004e76:	3b01      	subs	r3, #1
 8004e78:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d109      	bne.n	8004e92 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e88:	085b      	lsrs	r3, r3, #1
 8004e8a:	3b01      	subs	r3, #1
 8004e8c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d06e      	beq.n	8004f70 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e92:	69bb      	ldr	r3, [r7, #24]
 8004e94:	2b0c      	cmp	r3, #12
 8004e96:	d069      	beq.n	8004f6c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004e98:	4b53      	ldr	r3, [pc, #332]	@ (8004fe8 <HAL_RCC_OscConfig+0x780>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d105      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004ea4:	4b50      	ldr	r3, [pc, #320]	@ (8004fe8 <HAL_RCC_OscConfig+0x780>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d001      	beq.n	8004eb4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e0ad      	b.n	8005010 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004eb4:	4b4c      	ldr	r3, [pc, #304]	@ (8004fe8 <HAL_RCC_OscConfig+0x780>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a4b      	ldr	r2, [pc, #300]	@ (8004fe8 <HAL_RCC_OscConfig+0x780>)
 8004eba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ebe:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004ec0:	f7fe fb36 	bl	8003530 <HAL_GetTick>
 8004ec4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ec6:	e008      	b.n	8004eda <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ec8:	f7fe fb32 	bl	8003530 <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	2b02      	cmp	r3, #2
 8004ed4:	d901      	bls.n	8004eda <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e09a      	b.n	8005010 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004eda:	4b43      	ldr	r3, [pc, #268]	@ (8004fe8 <HAL_RCC_OscConfig+0x780>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d1f0      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ee6:	4b40      	ldr	r3, [pc, #256]	@ (8004fe8 <HAL_RCC_OscConfig+0x780>)
 8004ee8:	68da      	ldr	r2, [r3, #12]
 8004eea:	4b40      	ldr	r3, [pc, #256]	@ (8004fec <HAL_RCC_OscConfig+0x784>)
 8004eec:	4013      	ands	r3, r2
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004ef6:	3a01      	subs	r2, #1
 8004ef8:	0112      	lsls	r2, r2, #4
 8004efa:	4311      	orrs	r1, r2
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004f00:	0212      	lsls	r2, r2, #8
 8004f02:	4311      	orrs	r1, r2
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004f08:	0852      	lsrs	r2, r2, #1
 8004f0a:	3a01      	subs	r2, #1
 8004f0c:	0552      	lsls	r2, r2, #21
 8004f0e:	4311      	orrs	r1, r2
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004f14:	0852      	lsrs	r2, r2, #1
 8004f16:	3a01      	subs	r2, #1
 8004f18:	0652      	lsls	r2, r2, #25
 8004f1a:	4311      	orrs	r1, r2
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004f20:	0912      	lsrs	r2, r2, #4
 8004f22:	0452      	lsls	r2, r2, #17
 8004f24:	430a      	orrs	r2, r1
 8004f26:	4930      	ldr	r1, [pc, #192]	@ (8004fe8 <HAL_RCC_OscConfig+0x780>)
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004f2c:	4b2e      	ldr	r3, [pc, #184]	@ (8004fe8 <HAL_RCC_OscConfig+0x780>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a2d      	ldr	r2, [pc, #180]	@ (8004fe8 <HAL_RCC_OscConfig+0x780>)
 8004f32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f36:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f38:	4b2b      	ldr	r3, [pc, #172]	@ (8004fe8 <HAL_RCC_OscConfig+0x780>)
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	4a2a      	ldr	r2, [pc, #168]	@ (8004fe8 <HAL_RCC_OscConfig+0x780>)
 8004f3e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f42:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004f44:	f7fe faf4 	bl	8003530 <HAL_GetTick>
 8004f48:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f4a:	e008      	b.n	8004f5e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f4c:	f7fe faf0 	bl	8003530 <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d901      	bls.n	8004f5e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e058      	b.n	8005010 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f5e:	4b22      	ldr	r3, [pc, #136]	@ (8004fe8 <HAL_RCC_OscConfig+0x780>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d0f0      	beq.n	8004f4c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004f6a:	e050      	b.n	800500e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e04f      	b.n	8005010 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f70:	4b1d      	ldr	r3, [pc, #116]	@ (8004fe8 <HAL_RCC_OscConfig+0x780>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d148      	bne.n	800500e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004f7c:	4b1a      	ldr	r3, [pc, #104]	@ (8004fe8 <HAL_RCC_OscConfig+0x780>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a19      	ldr	r2, [pc, #100]	@ (8004fe8 <HAL_RCC_OscConfig+0x780>)
 8004f82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f86:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f88:	4b17      	ldr	r3, [pc, #92]	@ (8004fe8 <HAL_RCC_OscConfig+0x780>)
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	4a16      	ldr	r2, [pc, #88]	@ (8004fe8 <HAL_RCC_OscConfig+0x780>)
 8004f8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f92:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004f94:	f7fe facc 	bl	8003530 <HAL_GetTick>
 8004f98:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f9a:	e008      	b.n	8004fae <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f9c:	f7fe fac8 	bl	8003530 <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	2b02      	cmp	r3, #2
 8004fa8:	d901      	bls.n	8004fae <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004faa:	2303      	movs	r3, #3
 8004fac:	e030      	b.n	8005010 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fae:	4b0e      	ldr	r3, [pc, #56]	@ (8004fe8 <HAL_RCC_OscConfig+0x780>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d0f0      	beq.n	8004f9c <HAL_RCC_OscConfig+0x734>
 8004fba:	e028      	b.n	800500e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	2b0c      	cmp	r3, #12
 8004fc0:	d023      	beq.n	800500a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fc2:	4b09      	ldr	r3, [pc, #36]	@ (8004fe8 <HAL_RCC_OscConfig+0x780>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a08      	ldr	r2, [pc, #32]	@ (8004fe8 <HAL_RCC_OscConfig+0x780>)
 8004fc8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004fcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fce:	f7fe faaf 	bl	8003530 <HAL_GetTick>
 8004fd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fd4:	e00c      	b.n	8004ff0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fd6:	f7fe faab 	bl	8003530 <HAL_GetTick>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	1ad3      	subs	r3, r2, r3
 8004fe0:	2b02      	cmp	r3, #2
 8004fe2:	d905      	bls.n	8004ff0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004fe4:	2303      	movs	r3, #3
 8004fe6:	e013      	b.n	8005010 <HAL_RCC_OscConfig+0x7a8>
 8004fe8:	40021000 	.word	0x40021000
 8004fec:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ff0:	4b09      	ldr	r3, [pc, #36]	@ (8005018 <HAL_RCC_OscConfig+0x7b0>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d1ec      	bne.n	8004fd6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004ffc:	4b06      	ldr	r3, [pc, #24]	@ (8005018 <HAL_RCC_OscConfig+0x7b0>)
 8004ffe:	68da      	ldr	r2, [r3, #12]
 8005000:	4905      	ldr	r1, [pc, #20]	@ (8005018 <HAL_RCC_OscConfig+0x7b0>)
 8005002:	4b06      	ldr	r3, [pc, #24]	@ (800501c <HAL_RCC_OscConfig+0x7b4>)
 8005004:	4013      	ands	r3, r2
 8005006:	60cb      	str	r3, [r1, #12]
 8005008:	e001      	b.n	800500e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e000      	b.n	8005010 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800500e:	2300      	movs	r3, #0
}
 8005010:	4618      	mov	r0, r3
 8005012:	3720      	adds	r7, #32
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}
 8005018:	40021000 	.word	0x40021000
 800501c:	feeefffc 	.word	0xfeeefffc

08005020 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d101      	bne.n	8005034 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	e0e7      	b.n	8005204 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005034:	4b75      	ldr	r3, [pc, #468]	@ (800520c <HAL_RCC_ClockConfig+0x1ec>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 0307 	and.w	r3, r3, #7
 800503c:	683a      	ldr	r2, [r7, #0]
 800503e:	429a      	cmp	r2, r3
 8005040:	d910      	bls.n	8005064 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005042:	4b72      	ldr	r3, [pc, #456]	@ (800520c <HAL_RCC_ClockConfig+0x1ec>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f023 0207 	bic.w	r2, r3, #7
 800504a:	4970      	ldr	r1, [pc, #448]	@ (800520c <HAL_RCC_ClockConfig+0x1ec>)
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	4313      	orrs	r3, r2
 8005050:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005052:	4b6e      	ldr	r3, [pc, #440]	@ (800520c <HAL_RCC_ClockConfig+0x1ec>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 0307 	and.w	r3, r3, #7
 800505a:	683a      	ldr	r2, [r7, #0]
 800505c:	429a      	cmp	r2, r3
 800505e:	d001      	beq.n	8005064 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e0cf      	b.n	8005204 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0302 	and.w	r3, r3, #2
 800506c:	2b00      	cmp	r3, #0
 800506e:	d010      	beq.n	8005092 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	689a      	ldr	r2, [r3, #8]
 8005074:	4b66      	ldr	r3, [pc, #408]	@ (8005210 <HAL_RCC_ClockConfig+0x1f0>)
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800507c:	429a      	cmp	r2, r3
 800507e:	d908      	bls.n	8005092 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005080:	4b63      	ldr	r3, [pc, #396]	@ (8005210 <HAL_RCC_ClockConfig+0x1f0>)
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	4960      	ldr	r1, [pc, #384]	@ (8005210 <HAL_RCC_ClockConfig+0x1f0>)
 800508e:	4313      	orrs	r3, r2
 8005090:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 0301 	and.w	r3, r3, #1
 800509a:	2b00      	cmp	r3, #0
 800509c:	d04c      	beq.n	8005138 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	2b03      	cmp	r3, #3
 80050a4:	d107      	bne.n	80050b6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050a6:	4b5a      	ldr	r3, [pc, #360]	@ (8005210 <HAL_RCC_ClockConfig+0x1f0>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d121      	bne.n	80050f6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e0a6      	b.n	8005204 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	2b02      	cmp	r3, #2
 80050bc:	d107      	bne.n	80050ce <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050be:	4b54      	ldr	r3, [pc, #336]	@ (8005210 <HAL_RCC_ClockConfig+0x1f0>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d115      	bne.n	80050f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e09a      	b.n	8005204 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d107      	bne.n	80050e6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80050d6:	4b4e      	ldr	r3, [pc, #312]	@ (8005210 <HAL_RCC_ClockConfig+0x1f0>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 0302 	and.w	r3, r3, #2
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d109      	bne.n	80050f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e08e      	b.n	8005204 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050e6:	4b4a      	ldr	r3, [pc, #296]	@ (8005210 <HAL_RCC_ClockConfig+0x1f0>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d101      	bne.n	80050f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e086      	b.n	8005204 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80050f6:	4b46      	ldr	r3, [pc, #280]	@ (8005210 <HAL_RCC_ClockConfig+0x1f0>)
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	f023 0203 	bic.w	r2, r3, #3
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	4943      	ldr	r1, [pc, #268]	@ (8005210 <HAL_RCC_ClockConfig+0x1f0>)
 8005104:	4313      	orrs	r3, r2
 8005106:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005108:	f7fe fa12 	bl	8003530 <HAL_GetTick>
 800510c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800510e:	e00a      	b.n	8005126 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005110:	f7fe fa0e 	bl	8003530 <HAL_GetTick>
 8005114:	4602      	mov	r2, r0
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800511e:	4293      	cmp	r3, r2
 8005120:	d901      	bls.n	8005126 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	e06e      	b.n	8005204 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005126:	4b3a      	ldr	r3, [pc, #232]	@ (8005210 <HAL_RCC_ClockConfig+0x1f0>)
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	f003 020c 	and.w	r2, r3, #12
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	429a      	cmp	r2, r3
 8005136:	d1eb      	bne.n	8005110 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 0302 	and.w	r3, r3, #2
 8005140:	2b00      	cmp	r3, #0
 8005142:	d010      	beq.n	8005166 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	689a      	ldr	r2, [r3, #8]
 8005148:	4b31      	ldr	r3, [pc, #196]	@ (8005210 <HAL_RCC_ClockConfig+0x1f0>)
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005150:	429a      	cmp	r2, r3
 8005152:	d208      	bcs.n	8005166 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005154:	4b2e      	ldr	r3, [pc, #184]	@ (8005210 <HAL_RCC_ClockConfig+0x1f0>)
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	492b      	ldr	r1, [pc, #172]	@ (8005210 <HAL_RCC_ClockConfig+0x1f0>)
 8005162:	4313      	orrs	r3, r2
 8005164:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005166:	4b29      	ldr	r3, [pc, #164]	@ (800520c <HAL_RCC_ClockConfig+0x1ec>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 0307 	and.w	r3, r3, #7
 800516e:	683a      	ldr	r2, [r7, #0]
 8005170:	429a      	cmp	r2, r3
 8005172:	d210      	bcs.n	8005196 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005174:	4b25      	ldr	r3, [pc, #148]	@ (800520c <HAL_RCC_ClockConfig+0x1ec>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f023 0207 	bic.w	r2, r3, #7
 800517c:	4923      	ldr	r1, [pc, #140]	@ (800520c <HAL_RCC_ClockConfig+0x1ec>)
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	4313      	orrs	r3, r2
 8005182:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005184:	4b21      	ldr	r3, [pc, #132]	@ (800520c <HAL_RCC_ClockConfig+0x1ec>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 0307 	and.w	r3, r3, #7
 800518c:	683a      	ldr	r2, [r7, #0]
 800518e:	429a      	cmp	r2, r3
 8005190:	d001      	beq.n	8005196 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e036      	b.n	8005204 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 0304 	and.w	r3, r3, #4
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d008      	beq.n	80051b4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051a2:	4b1b      	ldr	r3, [pc, #108]	@ (8005210 <HAL_RCC_ClockConfig+0x1f0>)
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	4918      	ldr	r1, [pc, #96]	@ (8005210 <HAL_RCC_ClockConfig+0x1f0>)
 80051b0:	4313      	orrs	r3, r2
 80051b2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 0308 	and.w	r3, r3, #8
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d009      	beq.n	80051d4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051c0:	4b13      	ldr	r3, [pc, #76]	@ (8005210 <HAL_RCC_ClockConfig+0x1f0>)
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	691b      	ldr	r3, [r3, #16]
 80051cc:	00db      	lsls	r3, r3, #3
 80051ce:	4910      	ldr	r1, [pc, #64]	@ (8005210 <HAL_RCC_ClockConfig+0x1f0>)
 80051d0:	4313      	orrs	r3, r2
 80051d2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80051d4:	f000 f824 	bl	8005220 <HAL_RCC_GetSysClockFreq>
 80051d8:	4602      	mov	r2, r0
 80051da:	4b0d      	ldr	r3, [pc, #52]	@ (8005210 <HAL_RCC_ClockConfig+0x1f0>)
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	091b      	lsrs	r3, r3, #4
 80051e0:	f003 030f 	and.w	r3, r3, #15
 80051e4:	490b      	ldr	r1, [pc, #44]	@ (8005214 <HAL_RCC_ClockConfig+0x1f4>)
 80051e6:	5ccb      	ldrb	r3, [r1, r3]
 80051e8:	f003 031f 	and.w	r3, r3, #31
 80051ec:	fa22 f303 	lsr.w	r3, r2, r3
 80051f0:	4a09      	ldr	r2, [pc, #36]	@ (8005218 <HAL_RCC_ClockConfig+0x1f8>)
 80051f2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80051f4:	4b09      	ldr	r3, [pc, #36]	@ (800521c <HAL_RCC_ClockConfig+0x1fc>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4618      	mov	r0, r3
 80051fa:	f7fe f949 	bl	8003490 <HAL_InitTick>
 80051fe:	4603      	mov	r3, r0
 8005200:	72fb      	strb	r3, [r7, #11]

  return status;
 8005202:	7afb      	ldrb	r3, [r7, #11]
}
 8005204:	4618      	mov	r0, r3
 8005206:	3710      	adds	r7, #16
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}
 800520c:	40022000 	.word	0x40022000
 8005210:	40021000 	.word	0x40021000
 8005214:	0800cfbc 	.word	0x0800cfbc
 8005218:	20000048 	.word	0x20000048
 800521c:	2000004c 	.word	0x2000004c

08005220 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005220:	b480      	push	{r7}
 8005222:	b089      	sub	sp, #36	@ 0x24
 8005224:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005226:	2300      	movs	r3, #0
 8005228:	61fb      	str	r3, [r7, #28]
 800522a:	2300      	movs	r3, #0
 800522c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800522e:	4b3e      	ldr	r3, [pc, #248]	@ (8005328 <HAL_RCC_GetSysClockFreq+0x108>)
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	f003 030c 	and.w	r3, r3, #12
 8005236:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005238:	4b3b      	ldr	r3, [pc, #236]	@ (8005328 <HAL_RCC_GetSysClockFreq+0x108>)
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	f003 0303 	and.w	r3, r3, #3
 8005240:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d005      	beq.n	8005254 <HAL_RCC_GetSysClockFreq+0x34>
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	2b0c      	cmp	r3, #12
 800524c:	d121      	bne.n	8005292 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2b01      	cmp	r3, #1
 8005252:	d11e      	bne.n	8005292 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005254:	4b34      	ldr	r3, [pc, #208]	@ (8005328 <HAL_RCC_GetSysClockFreq+0x108>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 0308 	and.w	r3, r3, #8
 800525c:	2b00      	cmp	r3, #0
 800525e:	d107      	bne.n	8005270 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005260:	4b31      	ldr	r3, [pc, #196]	@ (8005328 <HAL_RCC_GetSysClockFreq+0x108>)
 8005262:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005266:	0a1b      	lsrs	r3, r3, #8
 8005268:	f003 030f 	and.w	r3, r3, #15
 800526c:	61fb      	str	r3, [r7, #28]
 800526e:	e005      	b.n	800527c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005270:	4b2d      	ldr	r3, [pc, #180]	@ (8005328 <HAL_RCC_GetSysClockFreq+0x108>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	091b      	lsrs	r3, r3, #4
 8005276:	f003 030f 	and.w	r3, r3, #15
 800527a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800527c:	4a2b      	ldr	r2, [pc, #172]	@ (800532c <HAL_RCC_GetSysClockFreq+0x10c>)
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005284:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d10d      	bne.n	80052a8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005290:	e00a      	b.n	80052a8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	2b04      	cmp	r3, #4
 8005296:	d102      	bne.n	800529e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005298:	4b25      	ldr	r3, [pc, #148]	@ (8005330 <HAL_RCC_GetSysClockFreq+0x110>)
 800529a:	61bb      	str	r3, [r7, #24]
 800529c:	e004      	b.n	80052a8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	2b08      	cmp	r3, #8
 80052a2:	d101      	bne.n	80052a8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80052a4:	4b23      	ldr	r3, [pc, #140]	@ (8005334 <HAL_RCC_GetSysClockFreq+0x114>)
 80052a6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	2b0c      	cmp	r3, #12
 80052ac:	d134      	bne.n	8005318 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80052ae:	4b1e      	ldr	r3, [pc, #120]	@ (8005328 <HAL_RCC_GetSysClockFreq+0x108>)
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	f003 0303 	and.w	r3, r3, #3
 80052b6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	2b02      	cmp	r3, #2
 80052bc:	d003      	beq.n	80052c6 <HAL_RCC_GetSysClockFreq+0xa6>
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	2b03      	cmp	r3, #3
 80052c2:	d003      	beq.n	80052cc <HAL_RCC_GetSysClockFreq+0xac>
 80052c4:	e005      	b.n	80052d2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80052c6:	4b1a      	ldr	r3, [pc, #104]	@ (8005330 <HAL_RCC_GetSysClockFreq+0x110>)
 80052c8:	617b      	str	r3, [r7, #20]
      break;
 80052ca:	e005      	b.n	80052d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80052cc:	4b19      	ldr	r3, [pc, #100]	@ (8005334 <HAL_RCC_GetSysClockFreq+0x114>)
 80052ce:	617b      	str	r3, [r7, #20]
      break;
 80052d0:	e002      	b.n	80052d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80052d2:	69fb      	ldr	r3, [r7, #28]
 80052d4:	617b      	str	r3, [r7, #20]
      break;
 80052d6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80052d8:	4b13      	ldr	r3, [pc, #76]	@ (8005328 <HAL_RCC_GetSysClockFreq+0x108>)
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	091b      	lsrs	r3, r3, #4
 80052de:	f003 0307 	and.w	r3, r3, #7
 80052e2:	3301      	adds	r3, #1
 80052e4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80052e6:	4b10      	ldr	r3, [pc, #64]	@ (8005328 <HAL_RCC_GetSysClockFreq+0x108>)
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	0a1b      	lsrs	r3, r3, #8
 80052ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80052f0:	697a      	ldr	r2, [r7, #20]
 80052f2:	fb03 f202 	mul.w	r2, r3, r2
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80052fc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80052fe:	4b0a      	ldr	r3, [pc, #40]	@ (8005328 <HAL_RCC_GetSysClockFreq+0x108>)
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	0e5b      	lsrs	r3, r3, #25
 8005304:	f003 0303 	and.w	r3, r3, #3
 8005308:	3301      	adds	r3, #1
 800530a:	005b      	lsls	r3, r3, #1
 800530c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800530e:	697a      	ldr	r2, [r7, #20]
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	fbb2 f3f3 	udiv	r3, r2, r3
 8005316:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005318:	69bb      	ldr	r3, [r7, #24]
}
 800531a:	4618      	mov	r0, r3
 800531c:	3724      	adds	r7, #36	@ 0x24
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop
 8005328:	40021000 	.word	0x40021000
 800532c:	0800cfd4 	.word	0x0800cfd4
 8005330:	00f42400 	.word	0x00f42400
 8005334:	007a1200 	.word	0x007a1200

08005338 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005338:	b480      	push	{r7}
 800533a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800533c:	4b03      	ldr	r3, [pc, #12]	@ (800534c <HAL_RCC_GetHCLKFreq+0x14>)
 800533e:	681b      	ldr	r3, [r3, #0]
}
 8005340:	4618      	mov	r0, r3
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr
 800534a:	bf00      	nop
 800534c:	20000048 	.word	0x20000048

08005350 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005354:	f7ff fff0 	bl	8005338 <HAL_RCC_GetHCLKFreq>
 8005358:	4602      	mov	r2, r0
 800535a:	4b06      	ldr	r3, [pc, #24]	@ (8005374 <HAL_RCC_GetPCLK1Freq+0x24>)
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	0a1b      	lsrs	r3, r3, #8
 8005360:	f003 0307 	and.w	r3, r3, #7
 8005364:	4904      	ldr	r1, [pc, #16]	@ (8005378 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005366:	5ccb      	ldrb	r3, [r1, r3]
 8005368:	f003 031f 	and.w	r3, r3, #31
 800536c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005370:	4618      	mov	r0, r3
 8005372:	bd80      	pop	{r7, pc}
 8005374:	40021000 	.word	0x40021000
 8005378:	0800cfcc 	.word	0x0800cfcc

0800537c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005380:	f7ff ffda 	bl	8005338 <HAL_RCC_GetHCLKFreq>
 8005384:	4602      	mov	r2, r0
 8005386:	4b06      	ldr	r3, [pc, #24]	@ (80053a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	0adb      	lsrs	r3, r3, #11
 800538c:	f003 0307 	and.w	r3, r3, #7
 8005390:	4904      	ldr	r1, [pc, #16]	@ (80053a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005392:	5ccb      	ldrb	r3, [r1, r3]
 8005394:	f003 031f 	and.w	r3, r3, #31
 8005398:	fa22 f303 	lsr.w	r3, r2, r3
}
 800539c:	4618      	mov	r0, r3
 800539e:	bd80      	pop	{r7, pc}
 80053a0:	40021000 	.word	0x40021000
 80053a4:	0800cfcc 	.word	0x0800cfcc

080053a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b086      	sub	sp, #24
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80053b0:	2300      	movs	r3, #0
 80053b2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80053b4:	4b2a      	ldr	r3, [pc, #168]	@ (8005460 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d003      	beq.n	80053c8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80053c0:	f7ff fa44 	bl	800484c <HAL_PWREx_GetVoltageRange>
 80053c4:	6178      	str	r0, [r7, #20]
 80053c6:	e014      	b.n	80053f2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80053c8:	4b25      	ldr	r3, [pc, #148]	@ (8005460 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053cc:	4a24      	ldr	r2, [pc, #144]	@ (8005460 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80053d4:	4b22      	ldr	r3, [pc, #136]	@ (8005460 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053dc:	60fb      	str	r3, [r7, #12]
 80053de:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80053e0:	f7ff fa34 	bl	800484c <HAL_PWREx_GetVoltageRange>
 80053e4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80053e6:	4b1e      	ldr	r3, [pc, #120]	@ (8005460 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053ea:	4a1d      	ldr	r2, [pc, #116]	@ (8005460 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80053f0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053f8:	d10b      	bne.n	8005412 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2b80      	cmp	r3, #128	@ 0x80
 80053fe:	d919      	bls.n	8005434 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2ba0      	cmp	r3, #160	@ 0xa0
 8005404:	d902      	bls.n	800540c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005406:	2302      	movs	r3, #2
 8005408:	613b      	str	r3, [r7, #16]
 800540a:	e013      	b.n	8005434 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800540c:	2301      	movs	r3, #1
 800540e:	613b      	str	r3, [r7, #16]
 8005410:	e010      	b.n	8005434 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2b80      	cmp	r3, #128	@ 0x80
 8005416:	d902      	bls.n	800541e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005418:	2303      	movs	r3, #3
 800541a:	613b      	str	r3, [r7, #16]
 800541c:	e00a      	b.n	8005434 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2b80      	cmp	r3, #128	@ 0x80
 8005422:	d102      	bne.n	800542a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005424:	2302      	movs	r3, #2
 8005426:	613b      	str	r3, [r7, #16]
 8005428:	e004      	b.n	8005434 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2b70      	cmp	r3, #112	@ 0x70
 800542e:	d101      	bne.n	8005434 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005430:	2301      	movs	r3, #1
 8005432:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005434:	4b0b      	ldr	r3, [pc, #44]	@ (8005464 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f023 0207 	bic.w	r2, r3, #7
 800543c:	4909      	ldr	r1, [pc, #36]	@ (8005464 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	4313      	orrs	r3, r2
 8005442:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005444:	4b07      	ldr	r3, [pc, #28]	@ (8005464 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 0307 	and.w	r3, r3, #7
 800544c:	693a      	ldr	r2, [r7, #16]
 800544e:	429a      	cmp	r2, r3
 8005450:	d001      	beq.n	8005456 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e000      	b.n	8005458 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005456:	2300      	movs	r3, #0
}
 8005458:	4618      	mov	r0, r3
 800545a:	3718      	adds	r7, #24
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}
 8005460:	40021000 	.word	0x40021000
 8005464:	40022000 	.word	0x40022000

08005468 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b084      	sub	sp, #16
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d101      	bne.n	800547a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e0be      	b.n	80055f8 <HAL_SPI_Init+0x190>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800547e:	2b00      	cmp	r3, #0
 8005480:	d108      	bne.n	8005494 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800548a:	d009      	beq.n	80054a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	61da      	str	r2, [r3, #28]
 8005492:	e005      	b.n	80054a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d106      	bne.n	80054ba <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f000 f8cb 	bl	8005650 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2202      	movs	r2, #2
 80054be:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80054d0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80054da:	d902      	bls.n	80054e2 <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80054dc:	2300      	movs	r3, #0
 80054de:	60fb      	str	r3, [r7, #12]
 80054e0:	e002      	b.n	80054e8 <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80054e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80054e6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80054f0:	d007      	beq.n	8005502 <HAL_SPI_Init+0x9a>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80054fa:	d002      	beq.n	8005502 <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005512:	431a      	orrs	r2, r3
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	691b      	ldr	r3, [r3, #16]
 8005518:	f003 0302 	and.w	r3, r3, #2
 800551c:	431a      	orrs	r2, r3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	695b      	ldr	r3, [r3, #20]
 8005522:	f003 0301 	and.w	r3, r3, #1
 8005526:	431a      	orrs	r2, r3
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	699b      	ldr	r3, [r3, #24]
 800552c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005530:	431a      	orrs	r2, r3
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	69db      	ldr	r3, [r3, #28]
 8005536:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800553a:	431a      	orrs	r2, r3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6a1b      	ldr	r3, [r3, #32]
 8005540:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005544:	ea42 0103 	orr.w	r1, r2, r3
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800554c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	430a      	orrs	r2, r1
 8005556:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800555c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005560:	d11b      	bne.n	800559a <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005566:	2b00      	cmp	r3, #0
 8005568:	d10b      	bne.n	8005582 <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005572:	d903      	bls.n	800557c <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2202      	movs	r2, #2
 8005578:	631a      	str	r2, [r3, #48]	@ 0x30
 800557a:	e002      	b.n	8005582 <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	631a      	str	r2, [r3, #48]	@ 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005586:	2b02      	cmp	r3, #2
 8005588:	d107      	bne.n	800559a <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005598:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	699b      	ldr	r3, [r3, #24]
 800559e:	0c1b      	lsrs	r3, r3, #16
 80055a0:	f003 0204 	and.w	r2, r3, #4
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055a8:	f003 0310 	and.w	r3, r3, #16
 80055ac:	431a      	orrs	r2, r3
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055b2:	f003 0308 	and.w	r3, r3, #8
 80055b6:	431a      	orrs	r2, r3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80055c0:	ea42 0103 	orr.w	r1, r2, r3
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	430a      	orrs	r2, r1
 80055d0:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055da:	d105      	bne.n	80055e8 <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	b292      	uxth	r2, r2
 80055e6:	611a      	str	r2, [r3, #16]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2201      	movs	r2, #1
 80055f2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80055f6:	2300      	movs	r3, #0
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3710      	adds	r7, #16
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}

08005600 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b082      	sub	sp, #8
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d101      	bne.n	8005612 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e01a      	b.n	8005648 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2202      	movs	r2, #2
 8005616:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005628:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f000 f81a 	bl	8005664 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  return HAL_OK;
 8005646:	2300      	movs	r3, #0
}
 8005648:	4618      	mov	r0, r3
 800564a:	3708      	adds	r7, #8
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8005650:	b480      	push	{r7}
 8005652:	b083      	sub	sp, #12
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8005658:	bf00      	nop
 800565a:	370c      	adds	r7, #12
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr

08005664 <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 8005664:	b480      	push	{r7}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 800566c:	bf00      	nop
 800566e:	370c      	adds	r7, #12
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr

08005678 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b08a      	sub	sp, #40	@ 0x28
 800567c:	af02      	add	r7, sp, #8
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	60b9      	str	r1, [r7, #8]
 8005682:	603b      	str	r3, [r7, #0]
 8005684:	4613      	mov	r3, r2
 8005686:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8005688:	2300      	movs	r3, #0
 800568a:	617b      	str	r3, [r7, #20]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800568c:	2300      	movs	r3, #0
 800568e:	74fb      	strb	r3, [r7, #19]
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005696:	b2db      	uxtb	r3, r3
 8005698:	2b01      	cmp	r3, #1
 800569a:	d001      	beq.n	80056a0 <HAL_SPI_Receive+0x28>
  {
    return HAL_BUSY;
 800569c:	2302      	movs	r3, #2
 800569e:	e1e0      	b.n	8005a62 <HAL_SPI_Receive+0x3ea>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80056a8:	d112      	bne.n	80056d0 <HAL_SPI_Receive+0x58>
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d10e      	bne.n	80056d0 <HAL_SPI_Receive+0x58>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2204      	movs	r2, #4
 80056b6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80056ba:	88fa      	ldrh	r2, [r7, #6]
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	9300      	str	r3, [sp, #0]
 80056c0:	4613      	mov	r3, r2
 80056c2:	68ba      	ldr	r2, [r7, #8]
 80056c4:	68b9      	ldr	r1, [r7, #8]
 80056c6:	68f8      	ldr	r0, [r7, #12]
 80056c8:	f000 f9cf 	bl	8005a6a <HAL_SPI_TransmitReceive>
 80056cc:	4603      	mov	r3, r0
 80056ce:	e1c8      	b.n	8005a62 <HAL_SPI_Receive+0x3ea>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80056d0:	f7fd ff2e 	bl	8003530 <HAL_GetTick>
 80056d4:	61f8      	str	r0, [r7, #28]

  if ((pData == NULL) || (Size == 0U))
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d002      	beq.n	80056e2 <HAL_SPI_Receive+0x6a>
 80056dc:	88fb      	ldrh	r3, [r7, #6]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d101      	bne.n	80056e6 <HAL_SPI_Receive+0x6e>
  {
    return HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	e1bd      	b.n	8005a62 <HAL_SPI_Receive+0x3ea>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d101      	bne.n	80056f4 <HAL_SPI_Receive+0x7c>
 80056f0:	2302      	movs	r3, #2
 80056f2:	e1b6      	b.n	8005a62 <HAL_SPI_Receive+0x3ea>
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2204      	movs	r2, #4
 8005700:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2200      	movs	r2, #0
 8005708:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	68ba      	ldr	r2, [r7, #8]
 800570e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	88fa      	ldrh	r2, [r7, #6]
 8005714:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	88fa      	ldrh	r2, [r7, #6]
 800571c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2200      	movs	r2, #0
 8005724:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2200      	movs	r2, #0
 800572a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2200      	movs	r2, #0
 8005730:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2200      	movs	r2, #0
 8005736:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2200      	movs	r2, #0
 800573c:	651a      	str	r2, [r3, #80]	@ 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005742:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005746:	d118      	bne.n	800577a <HAL_SPI_Receive+0x102>
  {
    SPI_RESET_CRC(hspi);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005756:	601a      	str	r2, [r3, #0]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005766:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800576e:	b29b      	uxth	r3, r3
 8005770:	3b01      	subs	r3, #1
 8005772:	b29a      	uxth	r2, r3
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005782:	d908      	bls.n	8005796 <HAL_SPI_Receive+0x11e>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	685a      	ldr	r2, [r3, #4]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005792:	605a      	str	r2, [r3, #4]
 8005794:	e007      	b.n	80057a6 <HAL_SPI_Receive+0x12e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	685a      	ldr	r2, [r3, #4]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80057a4:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057ae:	d10f      	bne.n	80057d0 <HAL_SPI_Receive+0x158>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80057be:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80057ce:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057da:	2b40      	cmp	r3, #64	@ 0x40
 80057dc:	d007      	beq.n	80057ee <HAL_SPI_Receive+0x176>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80057ec:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	68db      	ldr	r3, [r3, #12]
 80057f2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80057f6:	d875      	bhi.n	80058e4 <HAL_SPI_Receive+0x26c>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80057f8:	e037      	b.n	800586a <HAL_SPI_Receive+0x1f2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	f003 0301 	and.w	r3, r3, #1
 8005804:	2b01      	cmp	r3, #1
 8005806:	d117      	bne.n	8005838 <HAL_SPI_Receive+0x1c0>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f103 020c 	add.w	r2, r3, #12
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005814:	7812      	ldrb	r2, [r2, #0]
 8005816:	b2d2      	uxtb	r2, r2
 8005818:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800581e:	1c5a      	adds	r2, r3, #1
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800582a:	b29b      	uxth	r3, r3
 800582c:	3b01      	subs	r3, #1
 800582e:	b29a      	uxth	r2, r3
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8005836:	e018      	b.n	800586a <HAL_SPI_Receive+0x1f2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005838:	f7fd fe7a 	bl	8003530 <HAL_GetTick>
 800583c:	4602      	mov	r2, r0
 800583e:	69fb      	ldr	r3, [r7, #28]
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	683a      	ldr	r2, [r7, #0]
 8005844:	429a      	cmp	r2, r3
 8005846:	d803      	bhi.n	8005850 <HAL_SPI_Receive+0x1d8>
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800584e:	d102      	bne.n	8005856 <HAL_SPI_Receive+0x1de>
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d109      	bne.n	800586a <HAL_SPI_Receive+0x1f2>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2201      	movs	r2, #1
 800585a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2200      	movs	r2, #0
 8005862:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005866:	2303      	movs	r3, #3
 8005868:	e0fb      	b.n	8005a62 <HAL_SPI_Receive+0x3ea>
    while (hspi->RxXferCount > 0U)
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005870:	b29b      	uxth	r3, r3
 8005872:	2b00      	cmp	r3, #0
 8005874:	d1c1      	bne.n	80057fa <HAL_SPI_Receive+0x182>
 8005876:	e03b      	b.n	80058f0 <HAL_SPI_Receive+0x278>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	f003 0301 	and.w	r3, r3, #1
 8005882:	2b01      	cmp	r3, #1
 8005884:	d115      	bne.n	80058b2 <HAL_SPI_Receive+0x23a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	68da      	ldr	r2, [r3, #12]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005890:	b292      	uxth	r2, r2
 8005892:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005898:	1c9a      	adds	r2, r3, #2
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	3b01      	subs	r3, #1
 80058a8:	b29a      	uxth	r2, r3
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80058b0:	e018      	b.n	80058e4 <HAL_SPI_Receive+0x26c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058b2:	f7fd fe3d 	bl	8003530 <HAL_GetTick>
 80058b6:	4602      	mov	r2, r0
 80058b8:	69fb      	ldr	r3, [r7, #28]
 80058ba:	1ad3      	subs	r3, r2, r3
 80058bc:	683a      	ldr	r2, [r7, #0]
 80058be:	429a      	cmp	r2, r3
 80058c0:	d803      	bhi.n	80058ca <HAL_SPI_Receive+0x252>
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058c8:	d102      	bne.n	80058d0 <HAL_SPI_Receive+0x258>
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d109      	bne.n	80058e4 <HAL_SPI_Receive+0x26c>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2200      	movs	r2, #0
 80058dc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80058e0:	2303      	movs	r3, #3
 80058e2:	e0be      	b.n	8005a62 <HAL_SPI_Receive+0x3ea>
    while (hspi->RxXferCount > 0U)
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d1c3      	bne.n	8005878 <HAL_SPI_Receive+0x200>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058f8:	f040 8087 	bne.w	8005a0a <HAL_SPI_Receive+0x392>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800590a:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	9300      	str	r3, [sp, #0]
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	2201      	movs	r2, #1
 8005914:	2101      	movs	r1, #1
 8005916:	68f8      	ldr	r0, [r7, #12]
 8005918:	f001 fa0c 	bl	8006d34 <SPI_WaitFlagStateUntilTimeout>
 800591c:	4603      	mov	r3, r0
 800591e:	2b00      	cmp	r3, #0
 8005920:	d005      	beq.n	800592e <HAL_SPI_Receive+0x2b6>
    {
      /* the latest data has not been received */
      __HAL_UNLOCK(hspi);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2200      	movs	r2, #0
 8005926:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      return HAL_TIMEOUT;
 800592a:	2303      	movs	r3, #3
 800592c:	e099      	b.n	8005a62 <HAL_SPI_Receive+0x3ea>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005936:	d907      	bls.n	8005948 <HAL_SPI_Receive+0x2d0>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	68da      	ldr	r2, [r3, #12]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005942:	b292      	uxth	r2, r2
 8005944:	801a      	strh	r2, [r3, #0]
 8005946:	e008      	b.n	800595a <HAL_SPI_Receive+0x2e2>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f103 020c 	add.w	r2, r3, #12
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005954:	7812      	ldrb	r2, [r2, #0]
 8005956:	b2d2      	uxtb	r2, r2
 8005958:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800595a:	69fb      	ldr	r3, [r7, #28]
 800595c:	9300      	str	r3, [sp, #0]
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	2201      	movs	r2, #1
 8005962:	2101      	movs	r1, #1
 8005964:	68f8      	ldr	r0, [r7, #12]
 8005966:	f001 f9e5 	bl	8006d34 <SPI_WaitFlagStateUntilTimeout>
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d00f      	beq.n	8005990 <HAL_SPI_Receive+0x318>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005974:	f043 0202 	orr.w	r2, r3, #2
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	661a      	str	r2, [r3, #96]	@ 0x60
      hspi->State = HAL_SPI_STATE_READY;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2201      	movs	r2, #1
 8005980:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      __HAL_UNLOCK(hspi);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2200      	movs	r2, #0
 8005988:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      return HAL_TIMEOUT;
 800598c:	2303      	movs	r3, #3
 800598e:	e068      	b.n	8005a62 <HAL_SPI_Receive+0x3ea>
    }

    /* Read CRC to Flush DR and RXNE flag */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005998:	d105      	bne.n	80059a6 <HAL_SPI_Receive+0x32e>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	e031      	b.n	8005a0a <HAL_SPI_Receive+0x392>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	330c      	adds	r3, #12
 80059ac:	61bb      	str	r3, [r7, #24]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	74fb      	strb	r3, [r7, #19]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80059b6:	7cfb      	ldrb	r3, [r7, #19]

      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80059c0:	d123      	bne.n	8005a0a <HAL_SPI_Receive+0x392>
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059c6:	2b02      	cmp	r3, #2
 80059c8:	d11f      	bne.n	8005a0a <HAL_SPI_Receive+0x392>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	9300      	str	r3, [sp, #0]
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	2201      	movs	r2, #1
 80059d2:	2101      	movs	r1, #1
 80059d4:	68f8      	ldr	r0, [r7, #12]
 80059d6:	f001 f9ad 	bl	8006d34 <SPI_WaitFlagStateUntilTimeout>
 80059da:	4603      	mov	r3, r0
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d00f      	beq.n	8005a00 <HAL_SPI_Receive+0x388>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059e4:	f043 0202 	orr.w	r2, r3, #2
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	661a      	str	r2, [r3, #96]	@ 0x60
          hspi->State = HAL_SPI_STATE_READY;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80059fc:	2303      	movs	r3, #3
 80059fe:	e030      	b.n	8005a62 <HAL_SPI_Receive+0x3ea>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	74fb      	strb	r3, [r7, #19]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 8005a08:	7cfb      	ldrb	r3, [r7, #19]
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a0a:	69fa      	ldr	r2, [r7, #28]
 8005a0c:	6839      	ldr	r1, [r7, #0]
 8005a0e:	68f8      	ldr	r0, [r7, #12]
 8005a10:	f001 faae 	bl	8006f70 <SPI_EndRxTransaction>
 8005a14:	4603      	mov	r3, r0
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d002      	beq.n	8005a20 <HAL_SPI_Receive+0x3a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2220      	movs	r2, #32
 8005a1e:	661a      	str	r2, [r3, #96]	@ 0x60
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	f003 0310 	and.w	r3, r3, #16
 8005a2a:	2b10      	cmp	r3, #16
 8005a2c:	d10a      	bne.n	8005a44 <HAL_SPI_Receive+0x3cc>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a32:	f043 0202 	orr.w	r2, r3, #2
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8005a42:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d001      	beq.n	8005a60 <HAL_SPI_Receive+0x3e8>
  {
    return HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e000      	b.n	8005a62 <HAL_SPI_Receive+0x3ea>
  }
  else
  {
    return HAL_OK;
 8005a60:	2300      	movs	r3, #0
  }
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3720      	adds	r7, #32
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}

08005a6a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005a6a:	b580      	push	{r7, lr}
 8005a6c:	b090      	sub	sp, #64	@ 0x40
 8005a6e:	af02      	add	r7, sp, #8
 8005a70:	60f8      	str	r0, [r7, #12]
 8005a72:	60b9      	str	r1, [r7, #8]
 8005a74:	607a      	str	r2, [r7, #4]
 8005a76:	807b      	strh	r3, [r7, #2]
  uint16_t             initial_RxXferCount;
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	617b      	str	r3, [r7, #20]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	74fb      	strb	r3, [r7, #19]
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005a80:	2301      	movs	r3, #1
 8005a82:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a84:	f7fd fd54 	bl	8003530 <HAL_GetTick>
 8005a88:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005a90:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  tmp_mode            = hspi->Init.Mode;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	62bb      	str	r3, [r7, #40]	@ 0x28
  initial_TxXferCount = Size;
 8005a9a:	887b      	ldrh	r3, [r7, #2]
 8005a9c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  initial_RxXferCount = Size;
 8005a9e:	887b      	ldrh	r3, [r7, #2]
 8005aa0:	84bb      	strh	r3, [r7, #36]	@ 0x24
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	623b      	str	r3, [r7, #32]
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	61fb      	str	r3, [r7, #28]
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005ab2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d00d      	beq.n	8005ad6 <HAL_SPI_TransmitReceive+0x6c>
 8005aba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005abc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ac0:	d107      	bne.n	8005ad2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d103      	bne.n	8005ad2 <HAL_SPI_TransmitReceive+0x68>
 8005aca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005ace:	2b04      	cmp	r3, #4
 8005ad0:	d001      	beq.n	8005ad6 <HAL_SPI_TransmitReceive+0x6c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8005ad2:	2302      	movs	r3, #2
 8005ad4:	e30f      	b.n	80060f6 <HAL_SPI_TransmitReceive+0x68c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d005      	beq.n	8005ae8 <HAL_SPI_TransmitReceive+0x7e>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d002      	beq.n	8005ae8 <HAL_SPI_TransmitReceive+0x7e>
 8005ae2:	887b      	ldrh	r3, [r7, #2]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d101      	bne.n	8005aec <HAL_SPI_TransmitReceive+0x82>
  {
    return HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	e304      	b.n	80060f6 <HAL_SPI_TransmitReceive+0x68c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d101      	bne.n	8005afa <HAL_SPI_TransmitReceive+0x90>
 8005af6:	2302      	movs	r3, #2
 8005af8:	e2fd      	b.n	80060f6 <HAL_SPI_TransmitReceive+0x68c>
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2201      	movs	r2, #1
 8005afe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	2b04      	cmp	r3, #4
 8005b0c:	d003      	beq.n	8005b16 <HAL_SPI_TransmitReceive+0xac>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2205      	movs	r2, #5
 8005b12:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	887a      	ldrh	r2, [r7, #2]
 8005b26:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	887a      	ldrh	r2, [r7, #2]
 8005b2e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	68ba      	ldr	r2, [r7, #8]
 8005b36:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	887a      	ldrh	r2, [r7, #2]
 8005b3c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	887a      	ldrh	r2, [r7, #2]
 8005b42:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2200      	movs	r2, #0
 8005b48:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	651a      	str	r2, [r3, #80]	@ 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b58:	d10f      	bne.n	8005b7a <HAL_SPI_TransmitReceive+0x110>
  {
    SPI_RESET_CRC(hspi);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005b68:	601a      	str	r2, [r3, #0]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005b78:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005b82:	d802      	bhi.n	8005b8a <HAL_SPI_TransmitReceive+0x120>
 8005b84:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	d908      	bls.n	8005b9c <HAL_SPI_TransmitReceive+0x132>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	685a      	ldr	r2, [r3, #4]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005b98:	605a      	str	r2, [r3, #4]
 8005b9a:	e007      	b.n	8005bac <HAL_SPI_TransmitReceive+0x142>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	685a      	ldr	r2, [r3, #4]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005baa:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bb6:	2b40      	cmp	r3, #64	@ 0x40
 8005bb8:	d007      	beq.n	8005bca <HAL_SPI_TransmitReceive+0x160>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005bc8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005bd2:	f240 80d0 	bls.w	8005d76 <HAL_SPI_TransmitReceive+0x30c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d003      	beq.n	8005be6 <HAL_SPI_TransmitReceive+0x17c>
 8005bde:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	f040 80ba 	bne.w	8005d5a <HAL_SPI_TransmitReceive+0x2f0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bea:	881a      	ldrh	r2, [r3, #0]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bf6:	1c9a      	adds	r2, r3, #2
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	3b01      	subs	r3, #1
 8005c04:	b29a      	uxth	r2, r3
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	87da      	strh	r2, [r3, #62]	@ 0x3e

#if (USE_SPI_CRC != 0U)
      /* Enable CRC Transmission */
      if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	f040 80a2 	bne.w	8005d5a <HAL_SPI_TransmitReceive+0x2f0>
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c1e:	f040 809c 	bne.w	8005d5a <HAL_SPI_TransmitReceive+0x2f0>
      {
        /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
        if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8005c22:	6a3b      	ldr	r3, [r7, #32]
 8005c24:	f003 0304 	and.w	r3, r3, #4
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d10c      	bne.n	8005c46 <HAL_SPI_TransmitReceive+0x1dc>
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	f003 0308 	and.w	r3, r3, #8
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d007      	beq.n	8005c46 <HAL_SPI_TransmitReceive+0x1dc>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c44:	601a      	str	r2, [r3, #0]
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005c54:	601a      	str	r2, [r3, #0]
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c56:	e080      	b.n	8005d5a <HAL_SPI_TransmitReceive+0x2f0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	f003 0302 	and.w	r3, r3, #2
 8005c62:	2b02      	cmp	r3, #2
 8005c64:	d13f      	bne.n	8005ce6 <HAL_SPI_TransmitReceive+0x27c>
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d03a      	beq.n	8005ce6 <HAL_SPI_TransmitReceive+0x27c>
 8005c70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d137      	bne.n	8005ce6 <HAL_SPI_TransmitReceive+0x27c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c7a:	881a      	ldrh	r2, [r3, #0]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c86:	1c9a      	adds	r2, r3, #2
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	3b01      	subs	r3, #1
 8005c94:	b29a      	uxth	r2, r3
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	637b      	str	r3, [r7, #52]	@ 0x34

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d11e      	bne.n	8005ce6 <HAL_SPI_TransmitReceive+0x27c>
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005cb0:	d119      	bne.n	8005ce6 <HAL_SPI_TransmitReceive+0x27c>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8005cb2:	6a3b      	ldr	r3, [r7, #32]
 8005cb4:	f003 0304 	and.w	r3, r3, #4
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d10c      	bne.n	8005cd6 <HAL_SPI_TransmitReceive+0x26c>
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	f003 0308 	and.w	r3, r3, #8
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d007      	beq.n	8005cd6 <HAL_SPI_TransmitReceive+0x26c>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005cd4:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005ce4:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	f003 0301 	and.w	r3, r3, #1
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d11c      	bne.n	8005d2e <HAL_SPI_TransmitReceive+0x2c4>
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d016      	beq.n	8005d2e <HAL_SPI_TransmitReceive+0x2c4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68da      	ldr	r2, [r3, #12]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d0a:	b292      	uxth	r2, r2
 8005d0c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d12:	1c9a      	adds	r2, r3, #2
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	3b01      	subs	r3, #1
 8005d22:	b29a      	uxth	r2, r3
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005d2e:	f7fd fbff 	bl	8003530 <HAL_GetTick>
 8005d32:	4602      	mov	r2, r0
 8005d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d36:	1ad3      	subs	r3, r2, r3
 8005d38:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d80d      	bhi.n	8005d5a <HAL_SPI_TransmitReceive+0x2f0>
 8005d3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d44:	d009      	beq.n	8005d5a <HAL_SPI_TransmitReceive+0x2f0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2201      	movs	r2, #1
 8005d4a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2200      	movs	r2, #0
 8005d52:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8005d56:	2303      	movs	r3, #3
 8005d58:	e1cd      	b.n	80060f6 <HAL_SPI_TransmitReceive+0x68c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	f47f af79 	bne.w	8005c58 <HAL_SPI_TransmitReceive+0x1ee>
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	f47f af72 	bne.w	8005c58 <HAL_SPI_TransmitReceive+0x1ee>
 8005d74:	e12f      	b.n	8005fd6 <HAL_SPI_TransmitReceive+0x56c>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d003      	beq.n	8005d86 <HAL_SPI_TransmitReceive+0x31c>
 8005d7e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	f040 811b 	bne.w	8005fbc <HAL_SPI_TransmitReceive+0x552>
    {
      if (hspi->TxXferCount > 1U)
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d912      	bls.n	8005db6 <HAL_SPI_TransmitReceive+0x34c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d94:	881a      	ldrh	r2, [r3, #0]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005da0:	1c9a      	adds	r2, r3, #2
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	3b02      	subs	r3, #2
 8005dae:	b29a      	uxth	r2, r3
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005db4:	e102      	b.n	8005fbc <HAL_SPI_TransmitReceive+0x552>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	330c      	adds	r3, #12
 8005dc0:	7812      	ldrb	r2, [r2, #0]
 8005dc2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dc8:	1c5a      	adds	r2, r3, #1
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	3b01      	subs	r3, #1
 8005dd6:	b29a      	uxth	r2, r3
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	87da      	strh	r2, [r3, #62]	@ 0x3e

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	f040 80ea 	bne.w	8005fbc <HAL_SPI_TransmitReceive+0x552>
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005df0:	f040 80e4 	bne.w	8005fbc <HAL_SPI_TransmitReceive+0x552>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8005df4:	6a3b      	ldr	r3, [r7, #32]
 8005df6:	f003 0304 	and.w	r3, r3, #4
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d10c      	bne.n	8005e18 <HAL_SPI_TransmitReceive+0x3ae>
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	f003 0308 	and.w	r3, r3, #8
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d007      	beq.n	8005e18 <HAL_SPI_TransmitReceive+0x3ae>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e16:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005e26:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e28:	e0c8      	b.n	8005fbc <HAL_SPI_TransmitReceive+0x552>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	f003 0302 	and.w	r3, r3, #2
 8005e34:	2b02      	cmp	r3, #2
 8005e36:	d158      	bne.n	8005eea <HAL_SPI_TransmitReceive+0x480>
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d053      	beq.n	8005eea <HAL_SPI_TransmitReceive+0x480>
 8005e42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d150      	bne.n	8005eea <HAL_SPI_TransmitReceive+0x480>
      {
        if (hspi->TxXferCount > 1U)
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d912      	bls.n	8005e78 <HAL_SPI_TransmitReceive+0x40e>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e56:	881a      	ldrh	r2, [r3, #0]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e62:	1c9a      	adds	r2, r3, #2
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	3b02      	subs	r3, #2
 8005e70:	b29a      	uxth	r2, r3
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005e76:	e012      	b.n	8005e9e <HAL_SPI_TransmitReceive+0x434>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	330c      	adds	r3, #12
 8005e82:	7812      	ldrb	r2, [r2, #0]
 8005e84:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e8a:	1c5a      	adds	r2, r3, #1
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	3b01      	subs	r3, #1
 8005e98:	b29a      	uxth	r2, r3
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	637b      	str	r3, [r7, #52]	@ 0x34

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d11e      	bne.n	8005eea <HAL_SPI_TransmitReceive+0x480>
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eb0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005eb4:	d119      	bne.n	8005eea <HAL_SPI_TransmitReceive+0x480>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8005eb6:	6a3b      	ldr	r3, [r7, #32]
 8005eb8:	f003 0304 	and.w	r3, r3, #4
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d10c      	bne.n	8005eda <HAL_SPI_TransmitReceive+0x470>
 8005ec0:	69fb      	ldr	r3, [r7, #28]
 8005ec2:	f003 0308 	and.w	r3, r3, #8
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d007      	beq.n	8005eda <HAL_SPI_TransmitReceive+0x470>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ed8:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005ee8:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	f003 0301 	and.w	r3, r3, #1
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d148      	bne.n	8005f8a <HAL_SPI_TransmitReceive+0x520>
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d042      	beq.n	8005f8a <HAL_SPI_TransmitReceive+0x520>
      {
        if (hspi->RxXferCount > 1U)
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d923      	bls.n	8005f58 <HAL_SPI_TransmitReceive+0x4ee>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	68da      	ldr	r2, [r3, #12]
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f1a:	b292      	uxth	r2, r2
 8005f1c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f22:	1c9a      	adds	r2, r3, #2
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	3b02      	subs	r3, #2
 8005f32:	b29a      	uxth	r2, r3
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d81f      	bhi.n	8005f86 <HAL_SPI_TransmitReceive+0x51c>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	685a      	ldr	r2, [r3, #4]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005f54:	605a      	str	r2, [r3, #4]
 8005f56:	e016      	b.n	8005f86 <HAL_SPI_TransmitReceive+0x51c>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f103 020c 	add.w	r2, r3, #12
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f64:	7812      	ldrb	r2, [r2, #0]
 8005f66:	b2d2      	uxtb	r2, r2
 8005f68:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f6e:	1c5a      	adds	r2, r3, #1
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	3b01      	subs	r3, #1
 8005f7e:	b29a      	uxth	r2, r3
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005f86:	2301      	movs	r3, #1
 8005f88:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005f8a:	f7fd fad1 	bl	8003530 <HAL_GetTick>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f92:	1ad3      	subs	r3, r2, r3
 8005f94:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d803      	bhi.n	8005fa2 <HAL_SPI_TransmitReceive+0x538>
 8005f9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fa0:	d102      	bne.n	8005fa8 <HAL_SPI_TransmitReceive+0x53e>
 8005fa2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d109      	bne.n	8005fbc <HAL_SPI_TransmitReceive+0x552>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2201      	movs	r2, #1
 8005fac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8005fb8:	2303      	movs	r3, #3
 8005fba:	e09c      	b.n	80060f6 <HAL_SPI_TransmitReceive+0x68c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	f47f af31 	bne.w	8005e2a <HAL_SPI_TransmitReceive+0x3c0>
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	f47f af2a 	bne.w	8005e2a <HAL_SPI_TransmitReceive+0x3c0>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fde:	d152      	bne.n	8006086 <HAL_SPI_TransmitReceive+0x61c>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8005fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fe2:	9300      	str	r3, [sp, #0]
 8005fe4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	2101      	movs	r1, #1
 8005fea:	68f8      	ldr	r0, [r7, #12]
 8005fec:	f000 fea2 	bl	8006d34 <SPI_WaitFlagStateUntilTimeout>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d00f      	beq.n	8006016 <HAL_SPI_TransmitReceive+0x5ac>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ffa:	f043 0202 	orr.w	r2, r3, #2
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	661a      	str	r2, [r3, #96]	@ 0x60
      hspi->State = HAL_SPI_STATE_READY;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2201      	movs	r2, #1
 8006006:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      __HAL_UNLOCK(hspi);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2200      	movs	r2, #0
 800600e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      return HAL_TIMEOUT;
 8006012:	2303      	movs	r3, #3
 8006014:	e06f      	b.n	80060f6 <HAL_SPI_TransmitReceive+0x68c>
    }
    /* Read CRC */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	68db      	ldr	r3, [r3, #12]
 800601a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800601e:	d105      	bne.n	800602c <HAL_SPI_TransmitReceive+0x5c2>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	68db      	ldr	r3, [r3, #12]
 8006026:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	e02c      	b.n	8006086 <HAL_SPI_TransmitReceive+0x61c>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	330c      	adds	r3, #12
 8006032:	61bb      	str	r3, [r7, #24]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 8006034:	69bb      	ldr	r3, [r7, #24]
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	b2db      	uxtb	r3, r3
 800603a:	74fb      	strb	r3, [r7, #19]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800603c:	7cfb      	ldrb	r3, [r7, #19]

      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006042:	2b02      	cmp	r3, #2
 8006044:	d11f      	bne.n	8006086 <HAL_SPI_TransmitReceive+0x61c>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8006046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006048:	9300      	str	r3, [sp, #0]
 800604a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800604c:	2201      	movs	r2, #1
 800604e:	2101      	movs	r1, #1
 8006050:	68f8      	ldr	r0, [r7, #12]
 8006052:	f000 fe6f 	bl	8006d34 <SPI_WaitFlagStateUntilTimeout>
 8006056:	4603      	mov	r3, r0
 8006058:	2b00      	cmp	r3, #0
 800605a:	d00f      	beq.n	800607c <HAL_SPI_TransmitReceive+0x612>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006060:	f043 0202 	orr.w	r2, r3, #2
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	661a      	str	r2, [r3, #96]	@ 0x60
          hspi->State = HAL_SPI_STATE_READY;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2201      	movs	r2, #1
 800606c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2200      	movs	r2, #0
 8006074:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8006078:	2303      	movs	r3, #3
 800607a:	e03c      	b.n	80060f6 <HAL_SPI_TransmitReceive+0x68c>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 800607c:	69bb      	ldr	r3, [r7, #24]
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	b2db      	uxtb	r3, r3
 8006082:	74fb      	strb	r3, [r7, #19]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 8006084:	7cfb      	ldrb	r3, [r7, #19]
      }
    }
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	f003 0310 	and.w	r3, r3, #16
 8006090:	2b10      	cmp	r3, #16
 8006092:	d110      	bne.n	80060b6 <HAL_SPI_TransmitReceive+0x64c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006098:	f043 0202 	orr.w	r2, r3, #2
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 80060a8:	609a      	str	r2, [r3, #8]
    __HAL_UNLOCK(hspi);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2200      	movs	r2, #0
 80060ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	e01f      	b.n	80060f6 <HAL_SPI_TransmitReceive+0x68c>
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80060b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80060ba:	68f8      	ldr	r0, [r7, #12]
 80060bc:	f000 ffb0 	bl	8007020 <SPI_EndRxTxTransaction>
 80060c0:	4603      	mov	r3, r0
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d008      	beq.n	80060d8 <HAL_SPI_TransmitReceive+0x66e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2220      	movs	r2, #32
 80060ca:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2200      	movs	r2, #0
 80060d0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
 80060d6:	e00e      	b.n	80060f6 <HAL_SPI_TransmitReceive+0x68c>
  }


  hspi->State = HAL_SPI_STATE_READY;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2201      	movs	r2, #1
 80060dc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2200      	movs	r2, #0
 80060e4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d001      	beq.n	80060f4 <HAL_SPI_TransmitReceive+0x68a>
  {
    return HAL_ERROR;
 80060f0:	2301      	movs	r3, #1
 80060f2:	e000      	b.n	80060f6 <HAL_SPI_TransmitReceive+0x68c>
  }
  else
  {
    return HAL_OK;
 80060f4:	2300      	movs	r3, #0
  }
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3738      	adds	r7, #56	@ 0x38
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
	...

08006100 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8006100:	b480      	push	{r7}
 8006102:	b085      	sub	sp, #20
 8006104:	af00      	add	r7, sp, #0
 8006106:	60f8      	str	r0, [r7, #12]
 8006108:	60b9      	str	r1, [r7, #8]
 800610a:	4613      	mov	r3, r2
 800610c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));


  if ((pData == NULL) || (Size == 0U))
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d002      	beq.n	800611a <HAL_SPI_Transmit_IT+0x1a>
 8006114:	88fb      	ldrh	r3, [r7, #6]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d101      	bne.n	800611e <HAL_SPI_Transmit_IT+0x1e>
  {
    return HAL_ERROR;
 800611a:	2301      	movs	r3, #1
 800611c:	e082      	b.n	8006224 <HAL_SPI_Transmit_IT+0x124>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006124:	b2db      	uxtb	r3, r3
 8006126:	2b01      	cmp	r3, #1
 8006128:	d001      	beq.n	800612e <HAL_SPI_Transmit_IT+0x2e>
  {
    return HAL_BUSY;
 800612a:	2302      	movs	r3, #2
 800612c:	e07a      	b.n	8006224 <HAL_SPI_Transmit_IT+0x124>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006134:	2b01      	cmp	r3, #1
 8006136:	d101      	bne.n	800613c <HAL_SPI_Transmit_IT+0x3c>
 8006138:	2302      	movs	r3, #2
 800613a:	e073      	b.n	8006224 <HAL_SPI_Transmit_IT+0x124>
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2201      	movs	r2, #1
 8006140:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2203      	movs	r2, #3
 8006148:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2200      	movs	r2, #0
 8006150:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	68ba      	ldr	r2, [r7, #8]
 8006156:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	88fa      	ldrh	r2, [r7, #6]
 800615c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	88fa      	ldrh	r2, [r7, #6]
 8006162:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2200      	movs	r2, #0
 8006168:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2200      	movs	r2, #0
 800616e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2200      	movs	r2, #0
 8006176:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxISR       = NULL;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2200      	movs	r2, #0
 800617e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	68db      	ldr	r3, [r3, #12]
 8006184:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006188:	d903      	bls.n	8006192 <HAL_SPI_Transmit_IT+0x92>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	4a28      	ldr	r2, [pc, #160]	@ (8006230 <HAL_SPI_Transmit_IT+0x130>)
 800618e:	651a      	str	r2, [r3, #80]	@ 0x50
 8006190:	e002      	b.n	8006198 <HAL_SPI_Transmit_IT+0x98>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	4a27      	ldr	r2, [pc, #156]	@ (8006234 <HAL_SPI_Transmit_IT+0x134>)
 8006196:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061a0:	d10f      	bne.n	80061c2 <HAL_SPI_Transmit_IT+0xc2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80061b0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80061c0:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061ca:	d10f      	bne.n	80061ec <HAL_SPI_Transmit_IT+0xec>
  {
    SPI_RESET_CRC(hspi);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80061da:	601a      	str	r2, [r3, #0]
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80061ea:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061f6:	2b40      	cmp	r3, #64	@ 0x40
 80061f8:	d007      	beq.n	800620a <HAL_SPI_Transmit_IT+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006208:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2200      	movs	r2, #0
 800620e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	685a      	ldr	r2, [r3, #4]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f042 02a0 	orr.w	r2, r2, #160	@ 0xa0
 8006220:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006222:	2300      	movs	r3, #0
}
 8006224:	4618      	mov	r0, r3
 8006226:	3714      	adds	r7, #20
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr
 8006230:	08006cd5 	.word	0x08006cd5
 8006234:	08006c75 	.word	0x08006c75

08006238 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b084      	sub	sp, #16
 800623c:	af00      	add	r7, sp, #0
 800623e:	60f8      	str	r0, [r7, #12]
 8006240:	60b9      	str	r1, [r7, #8]
 8006242:	4613      	mov	r3, r2
 8006244:	80fb      	strh	r3, [r7, #6]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800624c:	b2db      	uxtb	r3, r3
 800624e:	2b01      	cmp	r3, #1
 8006250:	d001      	beq.n	8006256 <HAL_SPI_Receive_IT+0x1e>
  {
    return HAL_BUSY;
 8006252:	2302      	movs	r3, #2
 8006254:	e0ba      	b.n	80063cc <HAL_SPI_Receive_IT+0x194>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d110      	bne.n	8006280 <HAL_SPI_Receive_IT+0x48>
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006266:	d10b      	bne.n	8006280 <HAL_SPI_Receive_IT+0x48>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2204      	movs	r2, #4
 800626c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8006270:	88fb      	ldrh	r3, [r7, #6]
 8006272:	68ba      	ldr	r2, [r7, #8]
 8006274:	68b9      	ldr	r1, [r7, #8]
 8006276:	68f8      	ldr	r0, [r7, #12]
 8006278:	f000 f8b0 	bl	80063dc <HAL_SPI_TransmitReceive_IT>
 800627c:	4603      	mov	r3, r0
 800627e:	e0a5      	b.n	80063cc <HAL_SPI_Receive_IT+0x194>
  }


  if ((pData == NULL) || (Size == 0U))
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d002      	beq.n	800628c <HAL_SPI_Receive_IT+0x54>
 8006286:	88fb      	ldrh	r3, [r7, #6]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d101      	bne.n	8006290 <HAL_SPI_Receive_IT+0x58>
  {
    return HAL_ERROR;
 800628c:	2301      	movs	r3, #1
 800628e:	e09d      	b.n	80063cc <HAL_SPI_Receive_IT+0x194>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006296:	2b01      	cmp	r3, #1
 8006298:	d101      	bne.n	800629e <HAL_SPI_Receive_IT+0x66>
 800629a:	2302      	movs	r3, #2
 800629c:	e096      	b.n	80063cc <HAL_SPI_Receive_IT+0x194>
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2201      	movs	r2, #1
 80062a2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2204      	movs	r2, #4
 80062aa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2200      	movs	r2, #0
 80062b2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	68ba      	ldr	r2, [r7, #8]
 80062b8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	88fa      	ldrh	r2, [r7, #6]
 80062be:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	88fa      	ldrh	r2, [r7, #6]
 80062c6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2200      	movs	r2, #0
 80062ce:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2200      	movs	r2, #0
 80062d4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2200      	movs	r2, #0
 80062da:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2200      	movs	r2, #0
 80062e0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	68db      	ldr	r3, [r3, #12]
 80062e6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80062ea:	d90b      	bls.n	8006304 <HAL_SPI_Receive_IT+0xcc>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	685a      	ldr	r2, [r3, #4]
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80062fa:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	4a35      	ldr	r2, [pc, #212]	@ (80063d4 <HAL_SPI_Receive_IT+0x19c>)
 8006300:	64da      	str	r2, [r3, #76]	@ 0x4c
 8006302:	e00a      	b.n	800631a <HAL_SPI_Receive_IT+0xe2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	685a      	ldr	r2, [r3, #4]
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006312:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	4a30      	ldr	r2, [pc, #192]	@ (80063d8 <HAL_SPI_Receive_IT+0x1a0>)
 8006318:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006322:	d10f      	bne.n	8006344 <HAL_SPI_Receive_IT+0x10c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006332:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006342:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006348:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800634c:	d11f      	bne.n	800638e <HAL_SPI_Receive_IT+0x156>
  {
    hspi->CRCSize = 1U;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2201      	movs	r2, #1
 8006352:	649a      	str	r2, [r3, #72]	@ 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800635c:	d806      	bhi.n	800636c <HAL_SPI_Receive_IT+0x134>
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006362:	2b02      	cmp	r3, #2
 8006364:	d102      	bne.n	800636c <HAL_SPI_Receive_IT+0x134>
    {
      hspi->CRCSize = 2U;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2202      	movs	r2, #2
 800636a:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    SPI_RESET_CRC(hspi);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800637a:	601a      	str	r2, [r3, #0]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800638a:	601a      	str	r2, [r3, #0]
 800638c:	e002      	b.n	8006394 <HAL_SPI_Receive_IT+0x15c>
  }
  else
  {
    hspi->CRCSize = 0U;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2200      	movs	r2, #0
 8006392:	649a      	str	r2, [r3, #72]	@ 0x48
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800639e:	2b40      	cmp	r3, #64	@ 0x40
 80063a0:	d007      	beq.n	80063b2 <HAL_SPI_Receive_IT+0x17a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80063b0:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2200      	movs	r2, #0
 80063b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	685a      	ldr	r2, [r3, #4]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80063c8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80063ca:	2300      	movs	r3, #0
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3710      	adds	r7, #16
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}
 80063d4:	08006bed 	.word	0x08006bed
 80063d8:	08006b2d 	.word	0x08006b2d

080063dc <HAL_SPI_TransmitReceive_IT>:
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                             uint16_t Size)
{
 80063dc:	b480      	push	{r7}
 80063de:	b087      	sub	sp, #28
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	60f8      	str	r0, [r7, #12]
 80063e4:	60b9      	str	r1, [r7, #8]
 80063e6:	607a      	str	r2, [r7, #4]
 80063e8:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80063f0:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80063f8:	7dfb      	ldrb	r3, [r7, #23]
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d00c      	beq.n	8006418 <HAL_SPI_TransmitReceive_IT+0x3c>
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006404:	d106      	bne.n	8006414 <HAL_SPI_TransmitReceive_IT+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d102      	bne.n	8006414 <HAL_SPI_TransmitReceive_IT+0x38>
 800640e:	7dfb      	ldrb	r3, [r7, #23]
 8006410:	2b04      	cmp	r3, #4
 8006412:	d001      	beq.n	8006418 <HAL_SPI_TransmitReceive_IT+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8006414:	2302      	movs	r3, #2
 8006416:	e0a5      	b.n	8006564 <HAL_SPI_TransmitReceive_IT+0x188>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d005      	beq.n	800642a <HAL_SPI_TransmitReceive_IT+0x4e>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d002      	beq.n	800642a <HAL_SPI_TransmitReceive_IT+0x4e>
 8006424:	887b      	ldrh	r3, [r7, #2]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d101      	bne.n	800642e <HAL_SPI_TransmitReceive_IT+0x52>
  {
    return HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	e09a      	b.n	8006564 <HAL_SPI_TransmitReceive_IT+0x188>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006434:	2b01      	cmp	r3, #1
 8006436:	d101      	bne.n	800643c <HAL_SPI_TransmitReceive_IT+0x60>
 8006438:	2302      	movs	r3, #2
 800643a:	e093      	b.n	8006564 <HAL_SPI_TransmitReceive_IT+0x188>
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2201      	movs	r2, #1
 8006440:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800644a:	b2db      	uxtb	r3, r3
 800644c:	2b04      	cmp	r3, #4
 800644e:	d003      	beq.n	8006458 <HAL_SPI_TransmitReceive_IT+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2205      	movs	r2, #5
 8006454:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2200      	movs	r2, #0
 800645c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	68ba      	ldr	r2, [r7, #8]
 8006462:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	887a      	ldrh	r2, [r7, #2]
 8006468:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	887a      	ldrh	r2, [r7, #2]
 800646e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	887a      	ldrh	r2, [r7, #2]
 800647a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	887a      	ldrh	r2, [r7, #2]
 8006482:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	68db      	ldr	r3, [r3, #12]
 800648a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800648e:	d906      	bls.n	800649e <HAL_SPI_TransmitReceive_IT+0xc2>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	4a37      	ldr	r2, [pc, #220]	@ (8006570 <HAL_SPI_TransmitReceive_IT+0x194>)
 8006494:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	4a36      	ldr	r2, [pc, #216]	@ (8006574 <HAL_SPI_TransmitReceive_IT+0x198>)
 800649a:	651a      	str	r2, [r3, #80]	@ 0x50
 800649c:	e005      	b.n	80064aa <HAL_SPI_TransmitReceive_IT+0xce>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	4a35      	ldr	r2, [pc, #212]	@ (8006578 <HAL_SPI_TransmitReceive_IT+0x19c>)
 80064a2:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	4a35      	ldr	r2, [pc, #212]	@ (800657c <HAL_SPI_TransmitReceive_IT+0x1a0>)
 80064a8:	651a      	str	r2, [r3, #80]	@ 0x50
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064b2:	d11f      	bne.n	80064f4 <HAL_SPI_TransmitReceive_IT+0x118>
  {
    hspi->CRCSize = 1U;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2201      	movs	r2, #1
 80064b8:	649a      	str	r2, [r3, #72]	@ 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	68db      	ldr	r3, [r3, #12]
 80064be:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80064c2:	d806      	bhi.n	80064d2 <HAL_SPI_TransmitReceive_IT+0xf6>
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064c8:	2b02      	cmp	r3, #2
 80064ca:	d102      	bne.n	80064d2 <HAL_SPI_TransmitReceive_IT+0xf6>
    {
      hspi->CRCSize = 2U;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2202      	movs	r2, #2
 80064d0:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    SPI_RESET_CRC(hspi);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80064e0:	601a      	str	r2, [r3, #0]
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80064f0:	601a      	str	r2, [r3, #0]
 80064f2:	e002      	b.n	80064fa <HAL_SPI_TransmitReceive_IT+0x11e>
  }
  else
  {
    hspi->CRCSize = 0U;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2200      	movs	r2, #0
 80064f8:	649a      	str	r2, [r3, #72]	@ 0x48
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	68db      	ldr	r3, [r3, #12]
 80064fe:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006502:	d802      	bhi.n	800650a <HAL_SPI_TransmitReceive_IT+0x12e>
 8006504:	887b      	ldrh	r3, [r7, #2]
 8006506:	2b01      	cmp	r3, #1
 8006508:	d908      	bls.n	800651c <HAL_SPI_TransmitReceive_IT+0x140>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	685a      	ldr	r2, [r3, #4]
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006518:	605a      	str	r2, [r3, #4]
 800651a:	e007      	b.n	800652c <HAL_SPI_TransmitReceive_IT+0x150>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	685a      	ldr	r2, [r3, #4]
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800652a:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006536:	2b40      	cmp	r3, #64	@ 0x40
 8006538:	d007      	beq.n	800654a <HAL_SPI_TransmitReceive_IT+0x16e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006548:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2200      	movs	r2, #0
 800654e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	685a      	ldr	r2, [r3, #4]
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 8006560:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006562:	2300      	movs	r3, #0
}
 8006564:	4618      	mov	r0, r3
 8006566:	371c      	adds	r7, #28
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr
 8006570:	080069b5 	.word	0x080069b5
 8006574:	08006a65 	.word	0x08006a65
 8006578:	080067bd 	.word	0x080067bd
 800657c:	080068f9 	.word	0x080068f9

08006580 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b088      	sub	sp, #32
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006598:	69bb      	ldr	r3, [r7, #24]
 800659a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d10e      	bne.n	80065c0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80065a2:	69bb      	ldr	r3, [r7, #24]
 80065a4:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d009      	beq.n	80065c0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80065ac:	69fb      	ldr	r3, [r7, #28]
 80065ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d004      	beq.n	80065c0 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	4798      	blx	r3
    return;
 80065be:	e0ce      	b.n	800675e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80065c0:	69bb      	ldr	r3, [r7, #24]
 80065c2:	f003 0302 	and.w	r3, r3, #2
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d009      	beq.n	80065de <HAL_SPI_IRQHandler+0x5e>
 80065ca:	69fb      	ldr	r3, [r7, #28]
 80065cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d004      	beq.n	80065de <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	4798      	blx	r3
    return;
 80065dc:	e0bf      	b.n	800675e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80065de:	69bb      	ldr	r3, [r7, #24]
 80065e0:	f003 0320 	and.w	r3, r3, #32
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d10a      	bne.n	80065fe <HAL_SPI_IRQHandler+0x7e>
 80065e8:	69bb      	ldr	r3, [r7, #24]
 80065ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d105      	bne.n	80065fe <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80065f2:	69bb      	ldr	r3, [r7, #24]
 80065f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	f000 80b0 	beq.w	800675e <HAL_SPI_IRQHandler+0x1de>
 80065fe:	69fb      	ldr	r3, [r7, #28]
 8006600:	f003 0320 	and.w	r3, r3, #32
 8006604:	2b00      	cmp	r3, #0
 8006606:	f000 80aa 	beq.w	800675e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800660a:	69bb      	ldr	r3, [r7, #24]
 800660c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006610:	2b00      	cmp	r3, #0
 8006612:	d023      	beq.n	800665c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800661a:	b2db      	uxtb	r3, r3
 800661c:	2b03      	cmp	r3, #3
 800661e:	d011      	beq.n	8006644 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006624:	f043 0204 	orr.w	r2, r3, #4
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800662c:	2300      	movs	r3, #0
 800662e:	617b      	str	r3, [r7, #20]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	68db      	ldr	r3, [r3, #12]
 8006636:	617b      	str	r3, [r7, #20]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	617b      	str	r3, [r7, #20]
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	e00b      	b.n	800665c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006644:	2300      	movs	r3, #0
 8006646:	613b      	str	r3, [r7, #16]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	68db      	ldr	r3, [r3, #12]
 800664e:	613b      	str	r3, [r7, #16]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	613b      	str	r3, [r7, #16]
 8006658:	693b      	ldr	r3, [r7, #16]
        return;
 800665a:	e080      	b.n	800675e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800665c:	69bb      	ldr	r3, [r7, #24]
 800665e:	f003 0320 	and.w	r3, r3, #32
 8006662:	2b00      	cmp	r3, #0
 8006664:	d014      	beq.n	8006690 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800666a:	f043 0201 	orr.w	r2, r3, #1
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006672:	2300      	movs	r3, #0
 8006674:	60fb      	str	r3, [r7, #12]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	60fb      	str	r3, [r7, #12]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800668c:	601a      	str	r2, [r3, #0]
 800668e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006690:	69bb      	ldr	r3, [r7, #24]
 8006692:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006696:	2b00      	cmp	r3, #0
 8006698:	d00c      	beq.n	80066b4 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800669e:	f043 0208 	orr.w	r2, r3, #8
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80066a6:	2300      	movs	r3, #0
 80066a8:	60bb      	str	r3, [r7, #8]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	60bb      	str	r3, [r7, #8]
 80066b2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d04f      	beq.n	800675c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	685a      	ldr	r2, [r3, #4]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80066ca:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2201      	movs	r2, #1
 80066d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	f003 0302 	and.w	r3, r3, #2
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d104      	bne.n	80066e8 <HAL_SPI_IRQHandler+0x168>
 80066de:	69fb      	ldr	r3, [r7, #28]
 80066e0:	f003 0301 	and.w	r3, r3, #1
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d034      	beq.n	8006752 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	685a      	ldr	r2, [r3, #4]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f022 0203 	bic.w	r2, r2, #3
 80066f6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d011      	beq.n	8006724 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006704:	4a17      	ldr	r2, [pc, #92]	@ (8006764 <HAL_SPI_IRQHandler+0x1e4>)
 8006706:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800670c:	4618      	mov	r0, r3
 800670e:	f7fd f850 	bl	80037b2 <HAL_DMA_Abort_IT>
 8006712:	4603      	mov	r3, r0
 8006714:	2b00      	cmp	r3, #0
 8006716:	d005      	beq.n	8006724 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800671c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006728:	2b00      	cmp	r3, #0
 800672a:	d016      	beq.n	800675a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006730:	4a0c      	ldr	r2, [pc, #48]	@ (8006764 <HAL_SPI_IRQHandler+0x1e4>)
 8006732:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006738:	4618      	mov	r0, r3
 800673a:	f7fd f83a 	bl	80037b2 <HAL_DMA_Abort_IT>
 800673e:	4603      	mov	r3, r0
 8006740:	2b00      	cmp	r3, #0
 8006742:	d00a      	beq.n	800675a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006748:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8006750:	e003      	b.n	800675a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 f812 	bl	800677c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006758:	e000      	b.n	800675c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800675a:	bf00      	nop
    return;
 800675c:	bf00      	nop
  }
}
 800675e:	3720      	adds	r7, #32
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}
 8006764:	08006791 	.word	0x08006791

08006768 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006768:	b480      	push	{r7}
 800676a:	b083      	sub	sp, #12
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8006770:	bf00      	nop
 8006772:	370c      	adds	r7, #12
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr

0800677c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800677c:	b480      	push	{r7}
 800677e:	b083      	sub	sp, #12
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006784:	bf00      	nop
 8006786:	370c      	adds	r7, #12
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr

08006790 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b084      	sub	sp, #16
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800679c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2200      	movs	r2, #0
 80067a2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2200      	movs	r2, #0
 80067aa:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80067ac:	68f8      	ldr	r0, [r7, #12]
 80067ae:	f7ff ffe5 	bl	800677c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80067b2:	bf00      	nop
 80067b4:	3710      	adds	r7, #16
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}
	...

080067bc <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b082      	sub	sp, #8
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d923      	bls.n	8006818 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	68da      	ldr	r2, [r3, #12]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067da:	b292      	uxth	r2, r2
 80067dc:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067e2:	1c9a      	adds	r2, r3, #2
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount -= 2U;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	3b02      	subs	r3, #2
 80067f2:	b29a      	uxth	r2, r3
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    if (hspi->RxXferCount == 1U)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006800:	b29b      	uxth	r3, r3
 8006802:	2b01      	cmp	r3, #1
 8006804:	d11f      	bne.n	8006846 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	685a      	ldr	r2, [r3, #4]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006814:	605a      	str	r2, [r3, #4]
 8006816:	e016      	b.n	8006846 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f103 020c 	add.w	r2, r3, #12
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006824:	7812      	ldrb	r2, [r2, #0]
 8006826:	b2d2      	uxtb	r2, r2
 8006828:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800682e:	1c5a      	adds	r2, r3, #1
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount--;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800683a:	b29b      	uxth	r3, r3
 800683c:	3b01      	subs	r3, #1
 800683e:	b29a      	uxth	r2, r3
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800684c:	b29b      	uxth	r3, r3
 800684e:	2b00      	cmp	r3, #0
 8006850:	d120      	bne.n	8006894 <SPI_2linesRxISR_8BIT+0xd8>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006856:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800685a:	d10b      	bne.n	8006874 <SPI_2linesRxISR_8BIT+0xb8>
    {
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	685a      	ldr	r2, [r3, #4]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800686a:	605a      	str	r2, [r3, #4]
      hspi->RxISR =  SPI_2linesRxISR_8BITCRC;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	4a0b      	ldr	r2, [pc, #44]	@ (800689c <SPI_2linesRxISR_8BIT+0xe0>)
 8006870:	64da      	str	r2, [r3, #76]	@ 0x4c
      return;
 8006872:	e00f      	b.n	8006894 <SPI_2linesRxISR_8BIT+0xd8>
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	685a      	ldr	r2, [r3, #4]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006882:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006888:	b29b      	uxth	r3, r3
 800688a:	2b00      	cmp	r3, #0
 800688c:	d102      	bne.n	8006894 <SPI_2linesRxISR_8BIT+0xd8>
    {
      SPI_CloseRxTx_ISR(hspi);
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f000 fc0c 	bl	80070ac <SPI_CloseRxTx_ISR>
    }
  }
}
 8006894:	3708      	adds	r7, #8
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
 800689a:	bf00      	nop
 800689c:	080068a1 	.word	0x080068a1

080068a0 <SPI_2linesRxISR_8BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b084      	sub	sp, #16
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80068a8:	2300      	movs	r3, #0
 80068aa:	72fb      	strb	r3, [r7, #11]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	330c      	adds	r3, #12
 80068b2:	60fb      	str	r3, [r7, #12]
  /* Read 8bit CRC to flush Data Register */
  tmpreg8 = *ptmpreg8;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	72fb      	strb	r3, [r7, #11]
  /* To avoid GCC warning */
  UNUSED(tmpreg8);
 80068bc:	7afb      	ldrb	r3, [r7, #11]

  hspi->CRCSize--;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80068c2:	1e5a      	subs	r2, r3, #1
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Check end of the reception */
  if (hspi->CRCSize == 0U)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d10f      	bne.n	80068f0 <SPI_2linesRxISR_8BITCRC+0x50>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	685a      	ldr	r2, [r3, #4]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80068de:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d102      	bne.n	80068f0 <SPI_2linesRxISR_8BITCRC+0x50>
    {
      SPI_CloseRxTx_ISR(hspi);
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f000 fbde 	bl	80070ac <SPI_CloseRxTx_ISR>
    }
  }
}
 80068f0:	bf00      	nop
 80068f2:	3710      	adds	r7, #16
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}

080068f8 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b082      	sub	sp, #8
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006904:	b29b      	uxth	r3, r3
 8006906:	2b01      	cmp	r3, #1
 8006908:	d912      	bls.n	8006930 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800690e:	881a      	ldrh	r2, [r3, #0]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800691a:	1c9a      	adds	r2, r3, #2
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount -= 2U;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006924:	b29b      	uxth	r3, r3
 8006926:	3b02      	subs	r3, #2
 8006928:	b29a      	uxth	r2, r3
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800692e:	e012      	b.n	8006956 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	330c      	adds	r3, #12
 800693a:	7812      	ldrb	r2, [r2, #0]
 800693c:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006942:	1c5a      	adds	r2, r3, #1
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount--;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800694c:	b29b      	uxth	r3, r3
 800694e:	3b01      	subs	r3, #1
 8006950:	b29a      	uxth	r2, r3
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	87da      	strh	r2, [r3, #62]	@ 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800695a:	b29b      	uxth	r3, r3
 800695c:	2b00      	cmp	r3, #0
 800695e:	d126      	bne.n	80069ae <SPI_2linesTxISR_8BIT+0xb6>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006964:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006968:	d110      	bne.n	800698c <SPI_2linesTxISR_8BIT+0x94>
    {
      /* Set CRC Next Bit to send CRC */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006978:	601a      	str	r2, [r3, #0]
      /* Disable TXE interrupt */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	685a      	ldr	r2, [r3, #4]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006988:	605a      	str	r2, [r3, #4]
      return;
 800698a:	e010      	b.n	80069ae <SPI_2linesTxISR_8BIT+0xb6>
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	685a      	ldr	r2, [r3, #4]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800699a:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d102      	bne.n	80069ae <SPI_2linesTxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f000 fb7f 	bl	80070ac <SPI_CloseRxTx_ISR>
    }
  }
}
 80069ae:	3708      	adds	r7, #8
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b082      	sub	sp, #8
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	68da      	ldr	r2, [r3, #12]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069c6:	b292      	uxth	r2, r2
 80069c8:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069ce:	1c9a      	adds	r2, r3, #2
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80069da:	b29b      	uxth	r3, r3
 80069dc:	3b01      	subs	r3, #1
 80069de:	b29a      	uxth	r2, r3
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  if (hspi->RxXferCount == 0U)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d118      	bne.n	8006a24 <SPI_2linesRxISR_16BIT+0x70>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069fa:	d103      	bne.n	8006a04 <SPI_2linesRxISR_16BIT+0x50>
    {
      hspi->RxISR =  SPI_2linesRxISR_16BITCRC;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	4a0b      	ldr	r2, [pc, #44]	@ (8006a2c <SPI_2linesRxISR_16BIT+0x78>)
 8006a00:	64da      	str	r2, [r3, #76]	@ 0x4c
      return;
 8006a02:	e00f      	b.n	8006a24 <SPI_2linesRxISR_16BIT+0x70>
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	685a      	ldr	r2, [r3, #4]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006a12:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d102      	bne.n	8006a24 <SPI_2linesRxISR_16BIT+0x70>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f000 fb44 	bl	80070ac <SPI_CloseRxTx_ISR>
    }
  }
}
 8006a24:	3708      	adds	r7, #8
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	bf00      	nop
 8006a2c:	08006a31 	.word	0x08006a31

08006a30 <SPI_2linesRxISR_16BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b084      	sub	sp, #16
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 8006a38:	2300      	movs	r3, #0
 8006a3a:	60fb      	str	r3, [r7, #12]

  /* Read 16bit CRC to flush Data Register */
  tmpreg = READ_REG(hspi->Instance->DR);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	68db      	ldr	r3, [r3, #12]
 8006a42:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
 8006a44:	68fb      	ldr	r3, [r7, #12]

  /* Disable RXNE interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	685a      	ldr	r2, [r3, #4]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006a54:	605a      	str	r2, [r3, #4]

  SPI_CloseRxTx_ISR(hspi);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 fb28 	bl	80070ac <SPI_CloseRxTx_ISR>
}
 8006a5c:	bf00      	nop
 8006a5e:	3710      	adds	r7, #16
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b082      	sub	sp, #8
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a70:	881a      	ldrh	r2, [r3, #0]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a7c:	1c9a      	adds	r2, r3, #2
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	3b01      	subs	r3, #1
 8006a8a:	b29a      	uxth	r2, r3
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d126      	bne.n	8006ae8 <SPI_2linesTxISR_16BIT+0x84>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006aa2:	d110      	bne.n	8006ac6 <SPI_2linesTxISR_16BIT+0x62>
    {
      /* Set CRC Next Bit to send CRC */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	681a      	ldr	r2, [r3, #0]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006ab2:	601a      	str	r2, [r3, #0]
      /* Disable TXE interrupt */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	685a      	ldr	r2, [r3, #4]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006ac2:	605a      	str	r2, [r3, #4]
      return;
 8006ac4:	e010      	b.n	8006ae8 <SPI_2linesTxISR_16BIT+0x84>
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	685a      	ldr	r2, [r3, #4]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006ad4:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d102      	bne.n	8006ae8 <SPI_2linesTxISR_16BIT+0x84>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f000 fae2 	bl	80070ac <SPI_CloseRxTx_ISR>
    }
  }
}
 8006ae8:	3708      	adds	r7, #8
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}

08006aee <SPI_RxISR_8BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8006aee:	b580      	push	{r7, lr}
 8006af0:	b084      	sub	sp, #16
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	6078      	str	r0, [r7, #4]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006af6:	2300      	movs	r3, #0
 8006af8:	72fb      	strb	r3, [r7, #11]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	330c      	adds	r3, #12
 8006b00:	60fb      	str	r3, [r7, #12]
  /* Read 8bit CRC to flush Data Register */
  tmpreg8 = *ptmpreg8;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	781b      	ldrb	r3, [r3, #0]
 8006b06:	b2db      	uxtb	r3, r3
 8006b08:	72fb      	strb	r3, [r7, #11]
  /* To avoid GCC warning */
  UNUSED(tmpreg8);
 8006b0a:	7afb      	ldrb	r3, [r7, #11]

  hspi->CRCSize--;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b10:	1e5a      	subs	r2, r3, #1
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	649a      	str	r2, [r3, #72]	@ 0x48

  if (hspi->CRCSize == 0U)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d102      	bne.n	8006b24 <SPI_RxISR_8BITCRC+0x36>
  {
    SPI_CloseRx_ISR(hspi);
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 fb20 	bl	8007164 <SPI_CloseRx_ISR>
  }
}
 8006b24:	bf00      	nop
 8006b26:	3710      	adds	r7, #16
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b082      	sub	sp, #8
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f103 020c 	add.w	r2, r3, #12
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b40:	7812      	ldrb	r2, [r2, #0]
 8006b42:	b2d2      	uxtb	r2, r2
 8006b44:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b4a:	1c5a      	adds	r2, r3, #1
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006b56:	b29b      	uxth	r3, r3
 8006b58:	3b01      	subs	r3, #1
 8006b5a:	b29a      	uxth	r2, r3
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	d10c      	bne.n	8006b88 <SPI_RxISR_8BIT+0x5c>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b76:	d107      	bne.n	8006b88 <SPI_RxISR_8BIT+0x5c>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006b86:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d10b      	bne.n	8006bac <SPI_RxISR_8BIT+0x80>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b9c:	d103      	bne.n	8006ba6 <SPI_RxISR_8BIT+0x7a>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	4a04      	ldr	r2, [pc, #16]	@ (8006bb4 <SPI_RxISR_8BIT+0x88>)
 8006ba2:	64da      	str	r2, [r3, #76]	@ 0x4c
      return;
 8006ba4:	e002      	b.n	8006bac <SPI_RxISR_8BIT+0x80>
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f000 fadc 	bl	8007164 <SPI_CloseRx_ISR>
  }
}
 8006bac:	3708      	adds	r7, #8
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}
 8006bb2:	bf00      	nop
 8006bb4:	08006aef 	.word	0x08006aef

08006bb8 <SPI_RxISR_16BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b084      	sub	sp, #16
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	60fb      	str	r3, [r7, #12]

  /* Read 16bit CRC to flush Data Register */
  tmpreg = READ_REG(hspi->Instance->DR);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	68db      	ldr	r3, [r3, #12]
 8006bca:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
 8006bcc:	68fb      	ldr	r3, [r7, #12]

  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	685a      	ldr	r2, [r3, #4]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006bdc:	605a      	str	r2, [r3, #4]

  SPI_CloseRx_ISR(hspi);
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f000 fac0 	bl	8007164 <SPI_CloseRx_ISR>
}
 8006be4:	bf00      	nop
 8006be6:	3710      	adds	r7, #16
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}

08006bec <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b082      	sub	sp, #8
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	68da      	ldr	r2, [r3, #12]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bfe:	b292      	uxth	r2, r2
 8006c00:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c06:	1c9a      	adds	r2, r3, #2
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	3b01      	subs	r3, #1
 8006c16:	b29a      	uxth	r2, r3
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d10c      	bne.n	8006c44 <SPI_RxISR_16BIT+0x58>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c32:	d107      	bne.n	8006c44 <SPI_RxISR_16BIT+0x58>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006c42:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d10b      	bne.n	8006c68 <SPI_RxISR_16BIT+0x7c>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c58:	d103      	bne.n	8006c62 <SPI_RxISR_16BIT+0x76>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	4a04      	ldr	r2, [pc, #16]	@ (8006c70 <SPI_RxISR_16BIT+0x84>)
 8006c5e:	64da      	str	r2, [r3, #76]	@ 0x4c
      return;
 8006c60:	e002      	b.n	8006c68 <SPI_RxISR_16BIT+0x7c>
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f000 fa7e 	bl	8007164 <SPI_CloseRx_ISR>
  }
}
 8006c68:	3708      	adds	r7, #8
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}
 8006c6e:	bf00      	nop
 8006c70:	08006bb9 	.word	0x08006bb9

08006c74 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b082      	sub	sp, #8
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	330c      	adds	r3, #12
 8006c86:	7812      	ldrb	r2, [r2, #0]
 8006c88:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c8e:	1c5a      	adds	r2, r3, #1
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c98:	b29b      	uxth	r3, r3
 8006c9a:	3b01      	subs	r3, #1
 8006c9c:	b29a      	uxth	r2, r3
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->TxXferCount == 0U)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d10f      	bne.n	8006ccc <SPI_TxISR_8BIT+0x58>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cb0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006cb4:	d107      	bne.n	8006cc6 <SPI_TxISR_8BIT+0x52>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	681a      	ldr	r2, [r3, #0]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006cc4:	601a      	str	r2, [r3, #0]
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 fa92 	bl	80071f0 <SPI_CloseTx_ISR>
  }
}
 8006ccc:	bf00      	nop
 8006cce:	3708      	adds	r7, #8
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}

08006cd4 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b082      	sub	sp, #8
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ce0:	881a      	ldrh	r2, [r3, #0]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cec:	1c9a      	adds	r2, r3, #2
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	3b01      	subs	r3, #1
 8006cfa:	b29a      	uxth	r2, r3
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->TxXferCount == 0U)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d10f      	bne.n	8006d2a <SPI_TxISR_16BIT+0x56>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d12:	d107      	bne.n	8006d24 <SPI_TxISR_16BIT+0x50>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006d22:	601a      	str	r2, [r3, #0]
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f000 fa63 	bl	80071f0 <SPI_CloseTx_ISR>
  }
}
 8006d2a:	bf00      	nop
 8006d2c:	3708      	adds	r7, #8
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}
	...

08006d34 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b088      	sub	sp, #32
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	60f8      	str	r0, [r7, #12]
 8006d3c:	60b9      	str	r1, [r7, #8]
 8006d3e:	603b      	str	r3, [r7, #0]
 8006d40:	4613      	mov	r3, r2
 8006d42:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006d44:	f7fc fbf4 	bl	8003530 <HAL_GetTick>
 8006d48:	4602      	mov	r2, r0
 8006d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d4c:	1a9b      	subs	r3, r3, r2
 8006d4e:	683a      	ldr	r2, [r7, #0]
 8006d50:	4413      	add	r3, r2
 8006d52:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006d54:	f7fc fbec 	bl	8003530 <HAL_GetTick>
 8006d58:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006d5a:	4b39      	ldr	r3, [pc, #228]	@ (8006e40 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	015b      	lsls	r3, r3, #5
 8006d60:	0d1b      	lsrs	r3, r3, #20
 8006d62:	69fa      	ldr	r2, [r7, #28]
 8006d64:	fb02 f303 	mul.w	r3, r2, r3
 8006d68:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006d6a:	e054      	b.n	8006e16 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d72:	d050      	beq.n	8006e16 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006d74:	f7fc fbdc 	bl	8003530 <HAL_GetTick>
 8006d78:	4602      	mov	r2, r0
 8006d7a:	69bb      	ldr	r3, [r7, #24]
 8006d7c:	1ad3      	subs	r3, r2, r3
 8006d7e:	69fa      	ldr	r2, [r7, #28]
 8006d80:	429a      	cmp	r2, r3
 8006d82:	d902      	bls.n	8006d8a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006d84:	69fb      	ldr	r3, [r7, #28]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d13d      	bne.n	8006e06 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	685a      	ldr	r2, [r3, #4]
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006d98:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006da2:	d111      	bne.n	8006dc8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006dac:	d004      	beq.n	8006db8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	689b      	ldr	r3, [r3, #8]
 8006db2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006db6:	d107      	bne.n	8006dc8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006dc6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dcc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006dd0:	d10f      	bne.n	8006df2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	681a      	ldr	r2, [r3, #0]
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006de0:	601a      	str	r2, [r3, #0]
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006df0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2201      	movs	r2, #1
 8006df6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006e02:	2303      	movs	r3, #3
 8006e04:	e017      	b.n	8006e36 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d101      	bne.n	8006e10 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	3b01      	subs	r3, #1
 8006e14:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	689a      	ldr	r2, [r3, #8]
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	4013      	ands	r3, r2
 8006e20:	68ba      	ldr	r2, [r7, #8]
 8006e22:	429a      	cmp	r2, r3
 8006e24:	bf0c      	ite	eq
 8006e26:	2301      	moveq	r3, #1
 8006e28:	2300      	movne	r3, #0
 8006e2a:	b2db      	uxtb	r3, r3
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	79fb      	ldrb	r3, [r7, #7]
 8006e30:	429a      	cmp	r2, r3
 8006e32:	d19b      	bne.n	8006d6c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006e34:	2300      	movs	r3, #0
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3720      	adds	r7, #32
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	bf00      	nop
 8006e40:	20000048 	.word	0x20000048

08006e44 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b08a      	sub	sp, #40	@ 0x28
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	60f8      	str	r0, [r7, #12]
 8006e4c:	60b9      	str	r1, [r7, #8]
 8006e4e:	607a      	str	r2, [r7, #4]
 8006e50:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006e52:	2300      	movs	r3, #0
 8006e54:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006e56:	f7fc fb6b 	bl	8003530 <HAL_GetTick>
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e5e:	1a9b      	subs	r3, r3, r2
 8006e60:	683a      	ldr	r2, [r7, #0]
 8006e62:	4413      	add	r3, r2
 8006e64:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8006e66:	f7fc fb63 	bl	8003530 <HAL_GetTick>
 8006e6a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	330c      	adds	r3, #12
 8006e72:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006e74:	4b3d      	ldr	r3, [pc, #244]	@ (8006f6c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006e76:	681a      	ldr	r2, [r3, #0]
 8006e78:	4613      	mov	r3, r2
 8006e7a:	009b      	lsls	r3, r3, #2
 8006e7c:	4413      	add	r3, r2
 8006e7e:	00da      	lsls	r2, r3, #3
 8006e80:	1ad3      	subs	r3, r2, r3
 8006e82:	0d1b      	lsrs	r3, r3, #20
 8006e84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e86:	fb02 f303 	mul.w	r3, r2, r3
 8006e8a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006e8c:	e060      	b.n	8006f50 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006e94:	d107      	bne.n	8006ea6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d104      	bne.n	8006ea6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006e9c:	69fb      	ldr	r3, [r7, #28]
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	b2db      	uxtb	r3, r3
 8006ea2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006ea4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eac:	d050      	beq.n	8006f50 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006eae:	f7fc fb3f 	bl	8003530 <HAL_GetTick>
 8006eb2:	4602      	mov	r2, r0
 8006eb4:	6a3b      	ldr	r3, [r7, #32]
 8006eb6:	1ad3      	subs	r3, r2, r3
 8006eb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	d902      	bls.n	8006ec4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d13d      	bne.n	8006f40 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	685a      	ldr	r2, [r3, #4]
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006ed2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006edc:	d111      	bne.n	8006f02 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ee6:	d004      	beq.n	8006ef2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ef0:	d107      	bne.n	8006f02 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	681a      	ldr	r2, [r3, #0]
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f00:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f0a:	d10f      	bne.n	8006f2c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	681a      	ldr	r2, [r3, #0]
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006f1a:	601a      	str	r2, [r3, #0]
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	681a      	ldr	r2, [r3, #0]
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006f2a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2201      	movs	r2, #1
 8006f30:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2200      	movs	r2, #0
 8006f38:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006f3c:	2303      	movs	r3, #3
 8006f3e:	e010      	b.n	8006f62 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006f40:	69bb      	ldr	r3, [r7, #24]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d101      	bne.n	8006f4a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006f46:	2300      	movs	r3, #0
 8006f48:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8006f4a:	69bb      	ldr	r3, [r7, #24]
 8006f4c:	3b01      	subs	r3, #1
 8006f4e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	689a      	ldr	r2, [r3, #8]
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	4013      	ands	r3, r2
 8006f5a:	687a      	ldr	r2, [r7, #4]
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d196      	bne.n	8006e8e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006f60:	2300      	movs	r3, #0
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3728      	adds	r7, #40	@ 0x28
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}
 8006f6a:	bf00      	nop
 8006f6c:	20000048 	.word	0x20000048

08006f70 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b086      	sub	sp, #24
 8006f74:	af02      	add	r7, sp, #8
 8006f76:	60f8      	str	r0, [r7, #12]
 8006f78:	60b9      	str	r1, [r7, #8]
 8006f7a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f84:	d111      	bne.n	8006faa <SPI_EndRxTransaction+0x3a>
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	689b      	ldr	r3, [r3, #8]
 8006f8a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f8e:	d004      	beq.n	8006f9a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f98:	d107      	bne.n	8006faa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	681a      	ldr	r2, [r3, #0]
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006fa8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	9300      	str	r3, [sp, #0]
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	2180      	movs	r1, #128	@ 0x80
 8006fb4:	68f8      	ldr	r0, [r7, #12]
 8006fb6:	f7ff febd 	bl	8006d34 <SPI_WaitFlagStateUntilTimeout>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d007      	beq.n	8006fd0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006fc4:	f043 0220 	orr.w	r2, r3, #32
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006fcc:	2303      	movs	r3, #3
 8006fce:	e023      	b.n	8007018 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006fd8:	d11d      	bne.n	8007016 <SPI_EndRxTransaction+0xa6>
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006fe2:	d004      	beq.n	8006fee <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006fec:	d113      	bne.n	8007016 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	9300      	str	r3, [sp, #0]
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006ffa:	68f8      	ldr	r0, [r7, #12]
 8006ffc:	f7ff ff22 	bl	8006e44 <SPI_WaitFifoStateUntilTimeout>
 8007000:	4603      	mov	r3, r0
 8007002:	2b00      	cmp	r3, #0
 8007004:	d007      	beq.n	8007016 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800700a:	f043 0220 	orr.w	r2, r3, #32
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8007012:	2303      	movs	r3, #3
 8007014:	e000      	b.n	8007018 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8007016:	2300      	movs	r3, #0
}
 8007018:	4618      	mov	r0, r3
 800701a:	3710      	adds	r7, #16
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}

08007020 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b086      	sub	sp, #24
 8007024:	af02      	add	r7, sp, #8
 8007026:	60f8      	str	r0, [r7, #12]
 8007028:	60b9      	str	r1, [r7, #8]
 800702a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	9300      	str	r3, [sp, #0]
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	2200      	movs	r2, #0
 8007034:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8007038:	68f8      	ldr	r0, [r7, #12]
 800703a:	f7ff ff03 	bl	8006e44 <SPI_WaitFifoStateUntilTimeout>
 800703e:	4603      	mov	r3, r0
 8007040:	2b00      	cmp	r3, #0
 8007042:	d007      	beq.n	8007054 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007048:	f043 0220 	orr.w	r2, r3, #32
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007050:	2303      	movs	r3, #3
 8007052:	e027      	b.n	80070a4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	9300      	str	r3, [sp, #0]
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	2200      	movs	r2, #0
 800705c:	2180      	movs	r1, #128	@ 0x80
 800705e:	68f8      	ldr	r0, [r7, #12]
 8007060:	f7ff fe68 	bl	8006d34 <SPI_WaitFlagStateUntilTimeout>
 8007064:	4603      	mov	r3, r0
 8007066:	2b00      	cmp	r3, #0
 8007068:	d007      	beq.n	800707a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800706e:	f043 0220 	orr.w	r2, r3, #32
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007076:	2303      	movs	r3, #3
 8007078:	e014      	b.n	80070a4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	9300      	str	r3, [sp, #0]
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	2200      	movs	r2, #0
 8007082:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007086:	68f8      	ldr	r0, [r7, #12]
 8007088:	f7ff fedc 	bl	8006e44 <SPI_WaitFifoStateUntilTimeout>
 800708c:	4603      	mov	r3, r0
 800708e:	2b00      	cmp	r3, #0
 8007090:	d007      	beq.n	80070a2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007096:	f043 0220 	orr.w	r2, r3, #32
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800709e:	2303      	movs	r3, #3
 80070a0:	e000      	b.n	80070a4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80070a2:	2300      	movs	r3, #0
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3710      	adds	r7, #16
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}

080070ac <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b084      	sub	sp, #16
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80070b4:	f7fc fa3c 	bl	8003530 <HAL_GetTick>
 80070b8:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	685a      	ldr	r2, [r3, #4]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f022 0220 	bic.w	r2, r2, #32
 80070c8:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80070ca:	68fa      	ldr	r2, [r7, #12]
 80070cc:	2164      	movs	r1, #100	@ 0x64
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f7ff ffa6 	bl	8007020 <SPI_EndRxTxTransaction>
 80070d4:	4603      	mov	r3, r0
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d005      	beq.n	80070e6 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070de:	f043 0220 	orr.w	r2, r3, #32
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	689b      	ldr	r3, [r3, #8]
 80070ec:	f003 0310 	and.w	r3, r3, #16
 80070f0:	2b10      	cmp	r3, #16
 80070f2:	d112      	bne.n	800711a <SPI_CloseRxTx_ISR+0x6e>
  {
    hspi->State = HAL_SPI_STATE_READY;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2201      	movs	r2, #1
 80070f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007100:	f043 0202 	orr.w	r2, r3, #2
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8007110:	609a      	str	r2, [r3, #8]
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f7ff fb32 	bl	800677c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8007118:	e020      	b.n	800715c <SPI_CloseRxTx_ISR+0xb0>
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800711e:	2b00      	cmp	r3, #0
 8007120:	d115      	bne.n	800714e <SPI_CloseRxTx_ISR+0xa2>
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007128:	b2db      	uxtb	r3, r3
 800712a:	2b04      	cmp	r3, #4
 800712c:	d107      	bne.n	800713e <SPI_CloseRxTx_ISR+0x92>
        hspi->State = HAL_SPI_STATE_READY;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2201      	movs	r2, #1
 8007132:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        HAL_SPI_RxCpltCallback(hspi);
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f7fb fcbe 	bl	8002ab8 <HAL_SPI_RxCpltCallback>
}
 800713c:	e00e      	b.n	800715c <SPI_CloseRxTx_ISR+0xb0>
        hspi->State = HAL_SPI_STATE_READY;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2201      	movs	r2, #1
 8007142:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f7ff fb0e 	bl	8006768 <HAL_SPI_TxRxCpltCallback>
}
 800714c:	e006      	b.n	800715c <SPI_CloseRxTx_ISR+0xb0>
      hspi->State = HAL_SPI_STATE_READY;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2201      	movs	r2, #1
 8007152:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f7ff fb10 	bl	800677c <HAL_SPI_ErrorCallback>
}
 800715c:	bf00      	nop
 800715e:	3710      	adds	r7, #16
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}

08007164 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b082      	sub	sp, #8
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	685a      	ldr	r2, [r3, #4]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800717a:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800717c:	f7fc f9d8 	bl	8003530 <HAL_GetTick>
 8007180:	4603      	mov	r3, r0
 8007182:	461a      	mov	r2, r3
 8007184:	2164      	movs	r1, #100	@ 0x64
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f7ff fef2 	bl	8006f70 <SPI_EndRxTransaction>
 800718c:	4603      	mov	r3, r0
 800718e:	2b00      	cmp	r3, #0
 8007190:	d005      	beq.n	800719e <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007196:	f043 0220 	orr.w	r2, r3, #32
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	661a      	str	r2, [r3, #96]	@ 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2201      	movs	r2, #1
 80071a2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	689b      	ldr	r3, [r3, #8]
 80071ac:	f003 0310 	and.w	r3, r3, #16
 80071b0:	2b10      	cmp	r3, #16
 80071b2:	d10e      	bne.n	80071d2 <SPI_CloseRx_ISR+0x6e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071b8:	f043 0202 	orr.w	r2, r3, #2
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 80071c8:	609a      	str	r2, [r3, #8]
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f7ff fad6 	bl	800677c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80071d0:	e00a      	b.n	80071e8 <SPI_CloseRx_ISR+0x84>
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d103      	bne.n	80071e2 <SPI_CloseRx_ISR+0x7e>
      HAL_SPI_RxCpltCallback(hspi);
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f7fb fc6c 	bl	8002ab8 <HAL_SPI_RxCpltCallback>
}
 80071e0:	e002      	b.n	80071e8 <SPI_CloseRx_ISR+0x84>
      HAL_SPI_ErrorCallback(hspi);
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f7ff faca 	bl	800677c <HAL_SPI_ErrorCallback>
}
 80071e8:	bf00      	nop
 80071ea:	3708      	adds	r7, #8
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}

080071f0 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b084      	sub	sp, #16
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80071f8:	f7fc f99a 	bl	8003530 <HAL_GetTick>
 80071fc:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	685a      	ldr	r2, [r3, #4]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800720c:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800720e:	68fa      	ldr	r2, [r7, #12]
 8007210:	2164      	movs	r1, #100	@ 0x64
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f7ff ff04 	bl	8007020 <SPI_EndRxTxTransaction>
 8007218:	4603      	mov	r3, r0
 800721a:	2b00      	cmp	r3, #0
 800721c:	d005      	beq.n	800722a <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007222:	f043 0220 	orr.w	r2, r3, #32
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	689b      	ldr	r3, [r3, #8]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d10a      	bne.n	8007248 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007232:	2300      	movs	r3, #0
 8007234:	60bb      	str	r3, [r7, #8]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	60bb      	str	r3, [r7, #8]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	689b      	ldr	r3, [r3, #8]
 8007244:	60bb      	str	r3, [r7, #8]
 8007246:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2201      	movs	r2, #1
 800724c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007254:	2b00      	cmp	r3, #0
 8007256:	d003      	beq.n	8007260 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f7ff fa8f 	bl	800677c <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800725e:	e002      	b.n	8007266 <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f7fb fc3d 	bl	8002ae0 <HAL_SPI_TxCpltCallback>
}
 8007266:	bf00      	nop
 8007268:	3710      	adds	r7, #16
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}

0800726e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800726e:	b580      	push	{r7, lr}
 8007270:	b082      	sub	sp, #8
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d101      	bne.n	8007280 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800727c:	2301      	movs	r3, #1
 800727e:	e040      	b.n	8007302 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007284:	2b00      	cmp	r3, #0
 8007286:	d106      	bne.n	8007296 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2200      	movs	r2, #0
 800728c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f000 f83a 	bl	800730a <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2224      	movs	r2, #36	@ 0x24
 800729a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	681a      	ldr	r2, [r3, #0]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f022 0201 	bic.w	r2, r2, #1
 80072aa:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d002      	beq.n	80072ba <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f000 fb73 	bl	80079a0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 f8b8 	bl	8007430 <UART_SetConfig>
 80072c0:	4603      	mov	r3, r0
 80072c2:	2b01      	cmp	r3, #1
 80072c4:	d101      	bne.n	80072ca <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80072c6:	2301      	movs	r3, #1
 80072c8:	e01b      	b.n	8007302 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	685a      	ldr	r2, [r3, #4]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80072d8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	689a      	ldr	r2, [r3, #8]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80072e8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	681a      	ldr	r2, [r3, #0]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f042 0201 	orr.w	r2, r2, #1
 80072f8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f000 fbf2 	bl	8007ae4 <UART_CheckIdleState>
 8007300:	4603      	mov	r3, r0
}
 8007302:	4618      	mov	r0, r3
 8007304:	3708      	adds	r7, #8
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}

0800730a <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800730a:	b480      	push	{r7}
 800730c:	b083      	sub	sp, #12
 800730e:	af00      	add	r7, sp, #0
 8007310:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8007312:	bf00      	nop
 8007314:	370c      	adds	r7, #12
 8007316:	46bd      	mov	sp, r7
 8007318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731c:	4770      	bx	lr

0800731e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800731e:	b580      	push	{r7, lr}
 8007320:	b08a      	sub	sp, #40	@ 0x28
 8007322:	af02      	add	r7, sp, #8
 8007324:	60f8      	str	r0, [r7, #12]
 8007326:	60b9      	str	r1, [r7, #8]
 8007328:	603b      	str	r3, [r7, #0]
 800732a:	4613      	mov	r3, r2
 800732c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007332:	2b20      	cmp	r3, #32
 8007334:	d177      	bne.n	8007426 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d002      	beq.n	8007342 <HAL_UART_Transmit+0x24>
 800733c:	88fb      	ldrh	r3, [r7, #6]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d101      	bne.n	8007346 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007342:	2301      	movs	r3, #1
 8007344:	e070      	b.n	8007428 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	2200      	movs	r2, #0
 800734a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2221      	movs	r2, #33	@ 0x21
 8007352:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007354:	f7fc f8ec 	bl	8003530 <HAL_GetTick>
 8007358:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	88fa      	ldrh	r2, [r7, #6]
 800735e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	88fa      	ldrh	r2, [r7, #6]
 8007366:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	689b      	ldr	r3, [r3, #8]
 800736e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007372:	d108      	bne.n	8007386 <HAL_UART_Transmit+0x68>
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	691b      	ldr	r3, [r3, #16]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d104      	bne.n	8007386 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800737c:	2300      	movs	r3, #0
 800737e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	61bb      	str	r3, [r7, #24]
 8007384:	e003      	b.n	800738e <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800738a:	2300      	movs	r3, #0
 800738c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800738e:	e02f      	b.n	80073f0 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	9300      	str	r3, [sp, #0]
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	2200      	movs	r2, #0
 8007398:	2180      	movs	r1, #128	@ 0x80
 800739a:	68f8      	ldr	r0, [r7, #12]
 800739c:	f000 fc4a 	bl	8007c34 <UART_WaitOnFlagUntilTimeout>
 80073a0:	4603      	mov	r3, r0
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d004      	beq.n	80073b0 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2220      	movs	r2, #32
 80073aa:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80073ac:	2303      	movs	r3, #3
 80073ae:	e03b      	b.n	8007428 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80073b0:	69fb      	ldr	r3, [r7, #28]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d10b      	bne.n	80073ce <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80073b6:	69bb      	ldr	r3, [r7, #24]
 80073b8:	881a      	ldrh	r2, [r3, #0]
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80073c2:	b292      	uxth	r2, r2
 80073c4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80073c6:	69bb      	ldr	r3, [r7, #24]
 80073c8:	3302      	adds	r3, #2
 80073ca:	61bb      	str	r3, [r7, #24]
 80073cc:	e007      	b.n	80073de <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80073ce:	69fb      	ldr	r3, [r7, #28]
 80073d0:	781a      	ldrb	r2, [r3, #0]
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80073d8:	69fb      	ldr	r3, [r7, #28]
 80073da:	3301      	adds	r3, #1
 80073dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80073e4:	b29b      	uxth	r3, r3
 80073e6:	3b01      	subs	r3, #1
 80073e8:	b29a      	uxth	r2, r3
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d1c9      	bne.n	8007390 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	9300      	str	r3, [sp, #0]
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	2200      	movs	r2, #0
 8007404:	2140      	movs	r1, #64	@ 0x40
 8007406:	68f8      	ldr	r0, [r7, #12]
 8007408:	f000 fc14 	bl	8007c34 <UART_WaitOnFlagUntilTimeout>
 800740c:	4603      	mov	r3, r0
 800740e:	2b00      	cmp	r3, #0
 8007410:	d004      	beq.n	800741c <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	2220      	movs	r2, #32
 8007416:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8007418:	2303      	movs	r3, #3
 800741a:	e005      	b.n	8007428 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2220      	movs	r2, #32
 8007420:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8007422:	2300      	movs	r3, #0
 8007424:	e000      	b.n	8007428 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8007426:	2302      	movs	r3, #2
  }
}
 8007428:	4618      	mov	r0, r3
 800742a:	3720      	adds	r7, #32
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}

08007430 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007430:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007434:	b08a      	sub	sp, #40	@ 0x28
 8007436:	af00      	add	r7, sp, #0
 8007438:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800743a:	2300      	movs	r3, #0
 800743c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	689a      	ldr	r2, [r3, #8]
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	691b      	ldr	r3, [r3, #16]
 8007448:	431a      	orrs	r2, r3
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	695b      	ldr	r3, [r3, #20]
 800744e:	431a      	orrs	r2, r3
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	69db      	ldr	r3, [r3, #28]
 8007454:	4313      	orrs	r3, r2
 8007456:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	681a      	ldr	r2, [r3, #0]
 800745e:	4ba4      	ldr	r3, [pc, #656]	@ (80076f0 <UART_SetConfig+0x2c0>)
 8007460:	4013      	ands	r3, r2
 8007462:	68fa      	ldr	r2, [r7, #12]
 8007464:	6812      	ldr	r2, [r2, #0]
 8007466:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007468:	430b      	orrs	r3, r1
 800746a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	68da      	ldr	r2, [r3, #12]
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	430a      	orrs	r2, r1
 8007480:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	699b      	ldr	r3, [r3, #24]
 8007486:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a99      	ldr	r2, [pc, #612]	@ (80076f4 <UART_SetConfig+0x2c4>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d004      	beq.n	800749c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	6a1b      	ldr	r3, [r3, #32]
 8007496:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007498:	4313      	orrs	r3, r2
 800749a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	689b      	ldr	r3, [r3, #8]
 80074a2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074ac:	430a      	orrs	r2, r1
 80074ae:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a90      	ldr	r2, [pc, #576]	@ (80076f8 <UART_SetConfig+0x2c8>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d126      	bne.n	8007508 <UART_SetConfig+0xd8>
 80074ba:	4b90      	ldr	r3, [pc, #576]	@ (80076fc <UART_SetConfig+0x2cc>)
 80074bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074c0:	f003 0303 	and.w	r3, r3, #3
 80074c4:	2b03      	cmp	r3, #3
 80074c6:	d81b      	bhi.n	8007500 <UART_SetConfig+0xd0>
 80074c8:	a201      	add	r2, pc, #4	@ (adr r2, 80074d0 <UART_SetConfig+0xa0>)
 80074ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ce:	bf00      	nop
 80074d0:	080074e1 	.word	0x080074e1
 80074d4:	080074f1 	.word	0x080074f1
 80074d8:	080074e9 	.word	0x080074e9
 80074dc:	080074f9 	.word	0x080074f9
 80074e0:	2301      	movs	r3, #1
 80074e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074e6:	e116      	b.n	8007716 <UART_SetConfig+0x2e6>
 80074e8:	2302      	movs	r3, #2
 80074ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074ee:	e112      	b.n	8007716 <UART_SetConfig+0x2e6>
 80074f0:	2304      	movs	r3, #4
 80074f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074f6:	e10e      	b.n	8007716 <UART_SetConfig+0x2e6>
 80074f8:	2308      	movs	r3, #8
 80074fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074fe:	e10a      	b.n	8007716 <UART_SetConfig+0x2e6>
 8007500:	2310      	movs	r3, #16
 8007502:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007506:	e106      	b.n	8007716 <UART_SetConfig+0x2e6>
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a7c      	ldr	r2, [pc, #496]	@ (8007700 <UART_SetConfig+0x2d0>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d138      	bne.n	8007584 <UART_SetConfig+0x154>
 8007512:	4b7a      	ldr	r3, [pc, #488]	@ (80076fc <UART_SetConfig+0x2cc>)
 8007514:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007518:	f003 030c 	and.w	r3, r3, #12
 800751c:	2b0c      	cmp	r3, #12
 800751e:	d82d      	bhi.n	800757c <UART_SetConfig+0x14c>
 8007520:	a201      	add	r2, pc, #4	@ (adr r2, 8007528 <UART_SetConfig+0xf8>)
 8007522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007526:	bf00      	nop
 8007528:	0800755d 	.word	0x0800755d
 800752c:	0800757d 	.word	0x0800757d
 8007530:	0800757d 	.word	0x0800757d
 8007534:	0800757d 	.word	0x0800757d
 8007538:	0800756d 	.word	0x0800756d
 800753c:	0800757d 	.word	0x0800757d
 8007540:	0800757d 	.word	0x0800757d
 8007544:	0800757d 	.word	0x0800757d
 8007548:	08007565 	.word	0x08007565
 800754c:	0800757d 	.word	0x0800757d
 8007550:	0800757d 	.word	0x0800757d
 8007554:	0800757d 	.word	0x0800757d
 8007558:	08007575 	.word	0x08007575
 800755c:	2300      	movs	r3, #0
 800755e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007562:	e0d8      	b.n	8007716 <UART_SetConfig+0x2e6>
 8007564:	2302      	movs	r3, #2
 8007566:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800756a:	e0d4      	b.n	8007716 <UART_SetConfig+0x2e6>
 800756c:	2304      	movs	r3, #4
 800756e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007572:	e0d0      	b.n	8007716 <UART_SetConfig+0x2e6>
 8007574:	2308      	movs	r3, #8
 8007576:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800757a:	e0cc      	b.n	8007716 <UART_SetConfig+0x2e6>
 800757c:	2310      	movs	r3, #16
 800757e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007582:	e0c8      	b.n	8007716 <UART_SetConfig+0x2e6>
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a5e      	ldr	r2, [pc, #376]	@ (8007704 <UART_SetConfig+0x2d4>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d125      	bne.n	80075da <UART_SetConfig+0x1aa>
 800758e:	4b5b      	ldr	r3, [pc, #364]	@ (80076fc <UART_SetConfig+0x2cc>)
 8007590:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007594:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007598:	2b30      	cmp	r3, #48	@ 0x30
 800759a:	d016      	beq.n	80075ca <UART_SetConfig+0x19a>
 800759c:	2b30      	cmp	r3, #48	@ 0x30
 800759e:	d818      	bhi.n	80075d2 <UART_SetConfig+0x1a2>
 80075a0:	2b20      	cmp	r3, #32
 80075a2:	d00a      	beq.n	80075ba <UART_SetConfig+0x18a>
 80075a4:	2b20      	cmp	r3, #32
 80075a6:	d814      	bhi.n	80075d2 <UART_SetConfig+0x1a2>
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d002      	beq.n	80075b2 <UART_SetConfig+0x182>
 80075ac:	2b10      	cmp	r3, #16
 80075ae:	d008      	beq.n	80075c2 <UART_SetConfig+0x192>
 80075b0:	e00f      	b.n	80075d2 <UART_SetConfig+0x1a2>
 80075b2:	2300      	movs	r3, #0
 80075b4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075b8:	e0ad      	b.n	8007716 <UART_SetConfig+0x2e6>
 80075ba:	2302      	movs	r3, #2
 80075bc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075c0:	e0a9      	b.n	8007716 <UART_SetConfig+0x2e6>
 80075c2:	2304      	movs	r3, #4
 80075c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075c8:	e0a5      	b.n	8007716 <UART_SetConfig+0x2e6>
 80075ca:	2308      	movs	r3, #8
 80075cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075d0:	e0a1      	b.n	8007716 <UART_SetConfig+0x2e6>
 80075d2:	2310      	movs	r3, #16
 80075d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075d8:	e09d      	b.n	8007716 <UART_SetConfig+0x2e6>
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a4a      	ldr	r2, [pc, #296]	@ (8007708 <UART_SetConfig+0x2d8>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d125      	bne.n	8007630 <UART_SetConfig+0x200>
 80075e4:	4b45      	ldr	r3, [pc, #276]	@ (80076fc <UART_SetConfig+0x2cc>)
 80075e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075ea:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80075ee:	2bc0      	cmp	r3, #192	@ 0xc0
 80075f0:	d016      	beq.n	8007620 <UART_SetConfig+0x1f0>
 80075f2:	2bc0      	cmp	r3, #192	@ 0xc0
 80075f4:	d818      	bhi.n	8007628 <UART_SetConfig+0x1f8>
 80075f6:	2b80      	cmp	r3, #128	@ 0x80
 80075f8:	d00a      	beq.n	8007610 <UART_SetConfig+0x1e0>
 80075fa:	2b80      	cmp	r3, #128	@ 0x80
 80075fc:	d814      	bhi.n	8007628 <UART_SetConfig+0x1f8>
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d002      	beq.n	8007608 <UART_SetConfig+0x1d8>
 8007602:	2b40      	cmp	r3, #64	@ 0x40
 8007604:	d008      	beq.n	8007618 <UART_SetConfig+0x1e8>
 8007606:	e00f      	b.n	8007628 <UART_SetConfig+0x1f8>
 8007608:	2300      	movs	r3, #0
 800760a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800760e:	e082      	b.n	8007716 <UART_SetConfig+0x2e6>
 8007610:	2302      	movs	r3, #2
 8007612:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007616:	e07e      	b.n	8007716 <UART_SetConfig+0x2e6>
 8007618:	2304      	movs	r3, #4
 800761a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800761e:	e07a      	b.n	8007716 <UART_SetConfig+0x2e6>
 8007620:	2308      	movs	r3, #8
 8007622:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007626:	e076      	b.n	8007716 <UART_SetConfig+0x2e6>
 8007628:	2310      	movs	r3, #16
 800762a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800762e:	e072      	b.n	8007716 <UART_SetConfig+0x2e6>
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a35      	ldr	r2, [pc, #212]	@ (800770c <UART_SetConfig+0x2dc>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d12a      	bne.n	8007690 <UART_SetConfig+0x260>
 800763a:	4b30      	ldr	r3, [pc, #192]	@ (80076fc <UART_SetConfig+0x2cc>)
 800763c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007640:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007644:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007648:	d01a      	beq.n	8007680 <UART_SetConfig+0x250>
 800764a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800764e:	d81b      	bhi.n	8007688 <UART_SetConfig+0x258>
 8007650:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007654:	d00c      	beq.n	8007670 <UART_SetConfig+0x240>
 8007656:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800765a:	d815      	bhi.n	8007688 <UART_SetConfig+0x258>
 800765c:	2b00      	cmp	r3, #0
 800765e:	d003      	beq.n	8007668 <UART_SetConfig+0x238>
 8007660:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007664:	d008      	beq.n	8007678 <UART_SetConfig+0x248>
 8007666:	e00f      	b.n	8007688 <UART_SetConfig+0x258>
 8007668:	2300      	movs	r3, #0
 800766a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800766e:	e052      	b.n	8007716 <UART_SetConfig+0x2e6>
 8007670:	2302      	movs	r3, #2
 8007672:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007676:	e04e      	b.n	8007716 <UART_SetConfig+0x2e6>
 8007678:	2304      	movs	r3, #4
 800767a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800767e:	e04a      	b.n	8007716 <UART_SetConfig+0x2e6>
 8007680:	2308      	movs	r3, #8
 8007682:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007686:	e046      	b.n	8007716 <UART_SetConfig+0x2e6>
 8007688:	2310      	movs	r3, #16
 800768a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800768e:	e042      	b.n	8007716 <UART_SetConfig+0x2e6>
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a17      	ldr	r2, [pc, #92]	@ (80076f4 <UART_SetConfig+0x2c4>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d13a      	bne.n	8007710 <UART_SetConfig+0x2e0>
 800769a:	4b18      	ldr	r3, [pc, #96]	@ (80076fc <UART_SetConfig+0x2cc>)
 800769c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076a0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80076a4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80076a8:	d01a      	beq.n	80076e0 <UART_SetConfig+0x2b0>
 80076aa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80076ae:	d81b      	bhi.n	80076e8 <UART_SetConfig+0x2b8>
 80076b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80076b4:	d00c      	beq.n	80076d0 <UART_SetConfig+0x2a0>
 80076b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80076ba:	d815      	bhi.n	80076e8 <UART_SetConfig+0x2b8>
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d003      	beq.n	80076c8 <UART_SetConfig+0x298>
 80076c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80076c4:	d008      	beq.n	80076d8 <UART_SetConfig+0x2a8>
 80076c6:	e00f      	b.n	80076e8 <UART_SetConfig+0x2b8>
 80076c8:	2300      	movs	r3, #0
 80076ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076ce:	e022      	b.n	8007716 <UART_SetConfig+0x2e6>
 80076d0:	2302      	movs	r3, #2
 80076d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076d6:	e01e      	b.n	8007716 <UART_SetConfig+0x2e6>
 80076d8:	2304      	movs	r3, #4
 80076da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076de:	e01a      	b.n	8007716 <UART_SetConfig+0x2e6>
 80076e0:	2308      	movs	r3, #8
 80076e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076e6:	e016      	b.n	8007716 <UART_SetConfig+0x2e6>
 80076e8:	2310      	movs	r3, #16
 80076ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076ee:	e012      	b.n	8007716 <UART_SetConfig+0x2e6>
 80076f0:	efff69f3 	.word	0xefff69f3
 80076f4:	40008000 	.word	0x40008000
 80076f8:	40013800 	.word	0x40013800
 80076fc:	40021000 	.word	0x40021000
 8007700:	40004400 	.word	0x40004400
 8007704:	40004800 	.word	0x40004800
 8007708:	40004c00 	.word	0x40004c00
 800770c:	40005000 	.word	0x40005000
 8007710:	2310      	movs	r3, #16
 8007712:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a9f      	ldr	r2, [pc, #636]	@ (8007998 <UART_SetConfig+0x568>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d17a      	bne.n	8007816 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007720:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007724:	2b08      	cmp	r3, #8
 8007726:	d824      	bhi.n	8007772 <UART_SetConfig+0x342>
 8007728:	a201      	add	r2, pc, #4	@ (adr r2, 8007730 <UART_SetConfig+0x300>)
 800772a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800772e:	bf00      	nop
 8007730:	08007755 	.word	0x08007755
 8007734:	08007773 	.word	0x08007773
 8007738:	0800775d 	.word	0x0800775d
 800773c:	08007773 	.word	0x08007773
 8007740:	08007763 	.word	0x08007763
 8007744:	08007773 	.word	0x08007773
 8007748:	08007773 	.word	0x08007773
 800774c:	08007773 	.word	0x08007773
 8007750:	0800776b 	.word	0x0800776b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007754:	f7fd fdfc 	bl	8005350 <HAL_RCC_GetPCLK1Freq>
 8007758:	61f8      	str	r0, [r7, #28]
        break;
 800775a:	e010      	b.n	800777e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800775c:	4b8f      	ldr	r3, [pc, #572]	@ (800799c <UART_SetConfig+0x56c>)
 800775e:	61fb      	str	r3, [r7, #28]
        break;
 8007760:	e00d      	b.n	800777e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007762:	f7fd fd5d 	bl	8005220 <HAL_RCC_GetSysClockFreq>
 8007766:	61f8      	str	r0, [r7, #28]
        break;
 8007768:	e009      	b.n	800777e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800776a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800776e:	61fb      	str	r3, [r7, #28]
        break;
 8007770:	e005      	b.n	800777e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007772:	2300      	movs	r3, #0
 8007774:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007776:	2301      	movs	r3, #1
 8007778:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800777c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800777e:	69fb      	ldr	r3, [r7, #28]
 8007780:	2b00      	cmp	r3, #0
 8007782:	f000 80fb 	beq.w	800797c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	685a      	ldr	r2, [r3, #4]
 800778a:	4613      	mov	r3, r2
 800778c:	005b      	lsls	r3, r3, #1
 800778e:	4413      	add	r3, r2
 8007790:	69fa      	ldr	r2, [r7, #28]
 8007792:	429a      	cmp	r2, r3
 8007794:	d305      	bcc.n	80077a2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800779c:	69fa      	ldr	r2, [r7, #28]
 800779e:	429a      	cmp	r2, r3
 80077a0:	d903      	bls.n	80077aa <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80077a2:	2301      	movs	r3, #1
 80077a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80077a8:	e0e8      	b.n	800797c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80077aa:	69fb      	ldr	r3, [r7, #28]
 80077ac:	2200      	movs	r2, #0
 80077ae:	461c      	mov	r4, r3
 80077b0:	4615      	mov	r5, r2
 80077b2:	f04f 0200 	mov.w	r2, #0
 80077b6:	f04f 0300 	mov.w	r3, #0
 80077ba:	022b      	lsls	r3, r5, #8
 80077bc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80077c0:	0222      	lsls	r2, r4, #8
 80077c2:	68f9      	ldr	r1, [r7, #12]
 80077c4:	6849      	ldr	r1, [r1, #4]
 80077c6:	0849      	lsrs	r1, r1, #1
 80077c8:	2000      	movs	r0, #0
 80077ca:	4688      	mov	r8, r1
 80077cc:	4681      	mov	r9, r0
 80077ce:	eb12 0a08 	adds.w	sl, r2, r8
 80077d2:	eb43 0b09 	adc.w	fp, r3, r9
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	2200      	movs	r2, #0
 80077dc:	603b      	str	r3, [r7, #0]
 80077de:	607a      	str	r2, [r7, #4]
 80077e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077e4:	4650      	mov	r0, sl
 80077e6:	4659      	mov	r1, fp
 80077e8:	f7f9 fa4e 	bl	8000c88 <__aeabi_uldivmod>
 80077ec:	4602      	mov	r2, r0
 80077ee:	460b      	mov	r3, r1
 80077f0:	4613      	mov	r3, r2
 80077f2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80077f4:	69bb      	ldr	r3, [r7, #24]
 80077f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80077fa:	d308      	bcc.n	800780e <UART_SetConfig+0x3de>
 80077fc:	69bb      	ldr	r3, [r7, #24]
 80077fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007802:	d204      	bcs.n	800780e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	69ba      	ldr	r2, [r7, #24]
 800780a:	60da      	str	r2, [r3, #12]
 800780c:	e0b6      	b.n	800797c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800780e:	2301      	movs	r3, #1
 8007810:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007814:	e0b2      	b.n	800797c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	69db      	ldr	r3, [r3, #28]
 800781a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800781e:	d15e      	bne.n	80078de <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007820:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007824:	2b08      	cmp	r3, #8
 8007826:	d828      	bhi.n	800787a <UART_SetConfig+0x44a>
 8007828:	a201      	add	r2, pc, #4	@ (adr r2, 8007830 <UART_SetConfig+0x400>)
 800782a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800782e:	bf00      	nop
 8007830:	08007855 	.word	0x08007855
 8007834:	0800785d 	.word	0x0800785d
 8007838:	08007865 	.word	0x08007865
 800783c:	0800787b 	.word	0x0800787b
 8007840:	0800786b 	.word	0x0800786b
 8007844:	0800787b 	.word	0x0800787b
 8007848:	0800787b 	.word	0x0800787b
 800784c:	0800787b 	.word	0x0800787b
 8007850:	08007873 	.word	0x08007873
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007854:	f7fd fd7c 	bl	8005350 <HAL_RCC_GetPCLK1Freq>
 8007858:	61f8      	str	r0, [r7, #28]
        break;
 800785a:	e014      	b.n	8007886 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800785c:	f7fd fd8e 	bl	800537c <HAL_RCC_GetPCLK2Freq>
 8007860:	61f8      	str	r0, [r7, #28]
        break;
 8007862:	e010      	b.n	8007886 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007864:	4b4d      	ldr	r3, [pc, #308]	@ (800799c <UART_SetConfig+0x56c>)
 8007866:	61fb      	str	r3, [r7, #28]
        break;
 8007868:	e00d      	b.n	8007886 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800786a:	f7fd fcd9 	bl	8005220 <HAL_RCC_GetSysClockFreq>
 800786e:	61f8      	str	r0, [r7, #28]
        break;
 8007870:	e009      	b.n	8007886 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007872:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007876:	61fb      	str	r3, [r7, #28]
        break;
 8007878:	e005      	b.n	8007886 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800787a:	2300      	movs	r3, #0
 800787c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800787e:	2301      	movs	r3, #1
 8007880:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007884:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007886:	69fb      	ldr	r3, [r7, #28]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d077      	beq.n	800797c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800788c:	69fb      	ldr	r3, [r7, #28]
 800788e:	005a      	lsls	r2, r3, #1
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	085b      	lsrs	r3, r3, #1
 8007896:	441a      	add	r2, r3
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	685b      	ldr	r3, [r3, #4]
 800789c:	fbb2 f3f3 	udiv	r3, r2, r3
 80078a0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078a2:	69bb      	ldr	r3, [r7, #24]
 80078a4:	2b0f      	cmp	r3, #15
 80078a6:	d916      	bls.n	80078d6 <UART_SetConfig+0x4a6>
 80078a8:	69bb      	ldr	r3, [r7, #24]
 80078aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078ae:	d212      	bcs.n	80078d6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80078b0:	69bb      	ldr	r3, [r7, #24]
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	f023 030f 	bic.w	r3, r3, #15
 80078b8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80078ba:	69bb      	ldr	r3, [r7, #24]
 80078bc:	085b      	lsrs	r3, r3, #1
 80078be:	b29b      	uxth	r3, r3
 80078c0:	f003 0307 	and.w	r3, r3, #7
 80078c4:	b29a      	uxth	r2, r3
 80078c6:	8afb      	ldrh	r3, [r7, #22]
 80078c8:	4313      	orrs	r3, r2
 80078ca:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	8afa      	ldrh	r2, [r7, #22]
 80078d2:	60da      	str	r2, [r3, #12]
 80078d4:	e052      	b.n	800797c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80078d6:	2301      	movs	r3, #1
 80078d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80078dc:	e04e      	b.n	800797c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80078de:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80078e2:	2b08      	cmp	r3, #8
 80078e4:	d827      	bhi.n	8007936 <UART_SetConfig+0x506>
 80078e6:	a201      	add	r2, pc, #4	@ (adr r2, 80078ec <UART_SetConfig+0x4bc>)
 80078e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ec:	08007911 	.word	0x08007911
 80078f0:	08007919 	.word	0x08007919
 80078f4:	08007921 	.word	0x08007921
 80078f8:	08007937 	.word	0x08007937
 80078fc:	08007927 	.word	0x08007927
 8007900:	08007937 	.word	0x08007937
 8007904:	08007937 	.word	0x08007937
 8007908:	08007937 	.word	0x08007937
 800790c:	0800792f 	.word	0x0800792f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007910:	f7fd fd1e 	bl	8005350 <HAL_RCC_GetPCLK1Freq>
 8007914:	61f8      	str	r0, [r7, #28]
        break;
 8007916:	e014      	b.n	8007942 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007918:	f7fd fd30 	bl	800537c <HAL_RCC_GetPCLK2Freq>
 800791c:	61f8      	str	r0, [r7, #28]
        break;
 800791e:	e010      	b.n	8007942 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007920:	4b1e      	ldr	r3, [pc, #120]	@ (800799c <UART_SetConfig+0x56c>)
 8007922:	61fb      	str	r3, [r7, #28]
        break;
 8007924:	e00d      	b.n	8007942 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007926:	f7fd fc7b 	bl	8005220 <HAL_RCC_GetSysClockFreq>
 800792a:	61f8      	str	r0, [r7, #28]
        break;
 800792c:	e009      	b.n	8007942 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800792e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007932:	61fb      	str	r3, [r7, #28]
        break;
 8007934:	e005      	b.n	8007942 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007936:	2300      	movs	r3, #0
 8007938:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800793a:	2301      	movs	r3, #1
 800793c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007940:	bf00      	nop
    }

    if (pclk != 0U)
 8007942:	69fb      	ldr	r3, [r7, #28]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d019      	beq.n	800797c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	085a      	lsrs	r2, r3, #1
 800794e:	69fb      	ldr	r3, [r7, #28]
 8007950:	441a      	add	r2, r3
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	685b      	ldr	r3, [r3, #4]
 8007956:	fbb2 f3f3 	udiv	r3, r2, r3
 800795a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800795c:	69bb      	ldr	r3, [r7, #24]
 800795e:	2b0f      	cmp	r3, #15
 8007960:	d909      	bls.n	8007976 <UART_SetConfig+0x546>
 8007962:	69bb      	ldr	r3, [r7, #24]
 8007964:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007968:	d205      	bcs.n	8007976 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800796a:	69bb      	ldr	r3, [r7, #24]
 800796c:	b29a      	uxth	r2, r3
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	60da      	str	r2, [r3, #12]
 8007974:	e002      	b.n	800797c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007976:	2301      	movs	r3, #1
 8007978:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	2200      	movs	r2, #0
 8007980:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	2200      	movs	r2, #0
 8007986:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007988:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800798c:	4618      	mov	r0, r3
 800798e:	3728      	adds	r7, #40	@ 0x28
 8007990:	46bd      	mov	sp, r7
 8007992:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007996:	bf00      	nop
 8007998:	40008000 	.word	0x40008000
 800799c:	00f42400 	.word	0x00f42400

080079a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b083      	sub	sp, #12
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079ac:	f003 0308 	and.w	r3, r3, #8
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d00a      	beq.n	80079ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	685b      	ldr	r3, [r3, #4]
 80079ba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	430a      	orrs	r2, r1
 80079c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079ce:	f003 0301 	and.w	r3, r3, #1
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d00a      	beq.n	80079ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	430a      	orrs	r2, r1
 80079ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079f0:	f003 0302 	and.w	r3, r3, #2
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d00a      	beq.n	8007a0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	430a      	orrs	r2, r1
 8007a0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a12:	f003 0304 	and.w	r3, r3, #4
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d00a      	beq.n	8007a30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	430a      	orrs	r2, r1
 8007a2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a34:	f003 0310 	and.w	r3, r3, #16
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d00a      	beq.n	8007a52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	689b      	ldr	r3, [r3, #8]
 8007a42:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	430a      	orrs	r2, r1
 8007a50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a56:	f003 0320 	and.w	r3, r3, #32
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d00a      	beq.n	8007a74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	689b      	ldr	r3, [r3, #8]
 8007a64:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	430a      	orrs	r2, r1
 8007a72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d01a      	beq.n	8007ab6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	685b      	ldr	r3, [r3, #4]
 8007a86:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	430a      	orrs	r2, r1
 8007a94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007a9e:	d10a      	bne.n	8007ab6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	430a      	orrs	r2, r1
 8007ab4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007aba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d00a      	beq.n	8007ad8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	430a      	orrs	r2, r1
 8007ad6:	605a      	str	r2, [r3, #4]
  }
}
 8007ad8:	bf00      	nop
 8007ada:	370c      	adds	r7, #12
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr

08007ae4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b098      	sub	sp, #96	@ 0x60
 8007ae8:	af02      	add	r7, sp, #8
 8007aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2200      	movs	r2, #0
 8007af0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007af4:	f7fb fd1c 	bl	8003530 <HAL_GetTick>
 8007af8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f003 0308 	and.w	r3, r3, #8
 8007b04:	2b08      	cmp	r3, #8
 8007b06:	d12e      	bne.n	8007b66 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b08:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007b0c:	9300      	str	r3, [sp, #0]
 8007b0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b10:	2200      	movs	r2, #0
 8007b12:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f000 f88c 	bl	8007c34 <UART_WaitOnFlagUntilTimeout>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d021      	beq.n	8007b66 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b2a:	e853 3f00 	ldrex	r3, [r3]
 8007b2e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007b30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007b36:	653b      	str	r3, [r7, #80]	@ 0x50
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	461a      	mov	r2, r3
 8007b3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b40:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b42:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b44:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007b46:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007b48:	e841 2300 	strex	r3, r2, [r1]
 8007b4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007b4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d1e6      	bne.n	8007b22 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2220      	movs	r2, #32
 8007b58:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b62:	2303      	movs	r3, #3
 8007b64:	e062      	b.n	8007c2c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f003 0304 	and.w	r3, r3, #4
 8007b70:	2b04      	cmp	r3, #4
 8007b72:	d149      	bne.n	8007c08 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b74:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007b78:	9300      	str	r3, [sp, #0]
 8007b7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 f856 	bl	8007c34 <UART_WaitOnFlagUntilTimeout>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d03c      	beq.n	8007c08 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b96:	e853 3f00 	ldrex	r3, [r3]
 8007b9a:	623b      	str	r3, [r7, #32]
   return(result);
 8007b9c:	6a3b      	ldr	r3, [r7, #32]
 8007b9e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ba2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	461a      	mov	r2, r3
 8007baa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007bac:	633b      	str	r3, [r7, #48]	@ 0x30
 8007bae:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bb0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007bb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007bb4:	e841 2300 	strex	r3, r2, [r1]
 8007bb8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007bba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d1e6      	bne.n	8007b8e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	3308      	adds	r3, #8
 8007bc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	e853 3f00 	ldrex	r3, [r3]
 8007bce:	60fb      	str	r3, [r7, #12]
   return(result);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	f023 0301 	bic.w	r3, r3, #1
 8007bd6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	3308      	adds	r3, #8
 8007bde:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007be0:	61fa      	str	r2, [r7, #28]
 8007be2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be4:	69b9      	ldr	r1, [r7, #24]
 8007be6:	69fa      	ldr	r2, [r7, #28]
 8007be8:	e841 2300 	strex	r3, r2, [r1]
 8007bec:	617b      	str	r3, [r7, #20]
   return(result);
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d1e5      	bne.n	8007bc0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2220      	movs	r2, #32
 8007bf8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c04:	2303      	movs	r3, #3
 8007c06:	e011      	b.n	8007c2c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2220      	movs	r2, #32
 8007c0c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2220      	movs	r2, #32
 8007c12:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2200      	movs	r2, #0
 8007c26:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007c2a:	2300      	movs	r3, #0
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3758      	adds	r7, #88	@ 0x58
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}

08007c34 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b084      	sub	sp, #16
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	60f8      	str	r0, [r7, #12]
 8007c3c:	60b9      	str	r1, [r7, #8]
 8007c3e:	603b      	str	r3, [r7, #0]
 8007c40:	4613      	mov	r3, r2
 8007c42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c44:	e04f      	b.n	8007ce6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c46:	69bb      	ldr	r3, [r7, #24]
 8007c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c4c:	d04b      	beq.n	8007ce6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c4e:	f7fb fc6f 	bl	8003530 <HAL_GetTick>
 8007c52:	4602      	mov	r2, r0
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	1ad3      	subs	r3, r2, r3
 8007c58:	69ba      	ldr	r2, [r7, #24]
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	d302      	bcc.n	8007c64 <UART_WaitOnFlagUntilTimeout+0x30>
 8007c5e:	69bb      	ldr	r3, [r7, #24]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d101      	bne.n	8007c68 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007c64:	2303      	movs	r3, #3
 8007c66:	e04e      	b.n	8007d06 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f003 0304 	and.w	r3, r3, #4
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d037      	beq.n	8007ce6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	2b80      	cmp	r3, #128	@ 0x80
 8007c7a:	d034      	beq.n	8007ce6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	2b40      	cmp	r3, #64	@ 0x40
 8007c80:	d031      	beq.n	8007ce6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	69db      	ldr	r3, [r3, #28]
 8007c88:	f003 0308 	and.w	r3, r3, #8
 8007c8c:	2b08      	cmp	r3, #8
 8007c8e:	d110      	bne.n	8007cb2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	2208      	movs	r2, #8
 8007c96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007c98:	68f8      	ldr	r0, [r7, #12]
 8007c9a:	f000 f838 	bl	8007d0e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	2208      	movs	r2, #8
 8007ca2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007cae:	2301      	movs	r3, #1
 8007cb0:	e029      	b.n	8007d06 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	69db      	ldr	r3, [r3, #28]
 8007cb8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007cbc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007cc0:	d111      	bne.n	8007ce6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007cca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007ccc:	68f8      	ldr	r0, [r7, #12]
 8007cce:	f000 f81e 	bl	8007d0e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2220      	movs	r2, #32
 8007cd6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007ce2:	2303      	movs	r3, #3
 8007ce4:	e00f      	b.n	8007d06 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	69da      	ldr	r2, [r3, #28]
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	4013      	ands	r3, r2
 8007cf0:	68ba      	ldr	r2, [r7, #8]
 8007cf2:	429a      	cmp	r2, r3
 8007cf4:	bf0c      	ite	eq
 8007cf6:	2301      	moveq	r3, #1
 8007cf8:	2300      	movne	r3, #0
 8007cfa:	b2db      	uxtb	r3, r3
 8007cfc:	461a      	mov	r2, r3
 8007cfe:	79fb      	ldrb	r3, [r7, #7]
 8007d00:	429a      	cmp	r2, r3
 8007d02:	d0a0      	beq.n	8007c46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007d04:	2300      	movs	r3, #0
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	3710      	adds	r7, #16
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}

08007d0e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007d0e:	b480      	push	{r7}
 8007d10:	b095      	sub	sp, #84	@ 0x54
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d1e:	e853 3f00 	ldrex	r3, [r3]
 8007d22:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007d24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d26:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007d2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	461a      	mov	r2, r3
 8007d32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d34:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d36:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d38:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007d3a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007d3c:	e841 2300 	strex	r3, r2, [r1]
 8007d40:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007d42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d1e6      	bne.n	8007d16 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	3308      	adds	r3, #8
 8007d4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d50:	6a3b      	ldr	r3, [r7, #32]
 8007d52:	e853 3f00 	ldrex	r3, [r3]
 8007d56:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d58:	69fb      	ldr	r3, [r7, #28]
 8007d5a:	f023 0301 	bic.w	r3, r3, #1
 8007d5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	3308      	adds	r3, #8
 8007d66:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007d68:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007d6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d6c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007d6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d70:	e841 2300 	strex	r3, r2, [r1]
 8007d74:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d1e5      	bne.n	8007d48 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	d118      	bne.n	8007db6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	e853 3f00 	ldrex	r3, [r3]
 8007d90:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	f023 0310 	bic.w	r3, r3, #16
 8007d98:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	461a      	mov	r2, r3
 8007da0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007da2:	61bb      	str	r3, [r7, #24]
 8007da4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007da6:	6979      	ldr	r1, [r7, #20]
 8007da8:	69ba      	ldr	r2, [r7, #24]
 8007daa:	e841 2300 	strex	r3, r2, [r1]
 8007dae:	613b      	str	r3, [r7, #16]
   return(result);
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d1e6      	bne.n	8007d84 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2220      	movs	r2, #32
 8007dba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007dca:	bf00      	nop
 8007dcc:	3754      	adds	r7, #84	@ 0x54
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd4:	4770      	bx	lr

08007dd6 <__cvt>:
 8007dd6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007dda:	ec57 6b10 	vmov	r6, r7, d0
 8007dde:	2f00      	cmp	r7, #0
 8007de0:	460c      	mov	r4, r1
 8007de2:	4619      	mov	r1, r3
 8007de4:	463b      	mov	r3, r7
 8007de6:	bfbb      	ittet	lt
 8007de8:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007dec:	461f      	movlt	r7, r3
 8007dee:	2300      	movge	r3, #0
 8007df0:	232d      	movlt	r3, #45	@ 0x2d
 8007df2:	700b      	strb	r3, [r1, #0]
 8007df4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007df6:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007dfa:	4691      	mov	r9, r2
 8007dfc:	f023 0820 	bic.w	r8, r3, #32
 8007e00:	bfbc      	itt	lt
 8007e02:	4632      	movlt	r2, r6
 8007e04:	4616      	movlt	r6, r2
 8007e06:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007e0a:	d005      	beq.n	8007e18 <__cvt+0x42>
 8007e0c:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007e10:	d100      	bne.n	8007e14 <__cvt+0x3e>
 8007e12:	3401      	adds	r4, #1
 8007e14:	2102      	movs	r1, #2
 8007e16:	e000      	b.n	8007e1a <__cvt+0x44>
 8007e18:	2103      	movs	r1, #3
 8007e1a:	ab03      	add	r3, sp, #12
 8007e1c:	9301      	str	r3, [sp, #4]
 8007e1e:	ab02      	add	r3, sp, #8
 8007e20:	9300      	str	r3, [sp, #0]
 8007e22:	ec47 6b10 	vmov	d0, r6, r7
 8007e26:	4653      	mov	r3, sl
 8007e28:	4622      	mov	r2, r4
 8007e2a:	f001 fa71 	bl	8009310 <_dtoa_r>
 8007e2e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007e32:	4605      	mov	r5, r0
 8007e34:	d119      	bne.n	8007e6a <__cvt+0x94>
 8007e36:	f019 0f01 	tst.w	r9, #1
 8007e3a:	d00e      	beq.n	8007e5a <__cvt+0x84>
 8007e3c:	eb00 0904 	add.w	r9, r0, r4
 8007e40:	2200      	movs	r2, #0
 8007e42:	2300      	movs	r3, #0
 8007e44:	4630      	mov	r0, r6
 8007e46:	4639      	mov	r1, r7
 8007e48:	f7f8 fe3e 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e4c:	b108      	cbz	r0, 8007e52 <__cvt+0x7c>
 8007e4e:	f8cd 900c 	str.w	r9, [sp, #12]
 8007e52:	2230      	movs	r2, #48	@ 0x30
 8007e54:	9b03      	ldr	r3, [sp, #12]
 8007e56:	454b      	cmp	r3, r9
 8007e58:	d31e      	bcc.n	8007e98 <__cvt+0xc2>
 8007e5a:	9b03      	ldr	r3, [sp, #12]
 8007e5c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007e5e:	1b5b      	subs	r3, r3, r5
 8007e60:	4628      	mov	r0, r5
 8007e62:	6013      	str	r3, [r2, #0]
 8007e64:	b004      	add	sp, #16
 8007e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e6a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007e6e:	eb00 0904 	add.w	r9, r0, r4
 8007e72:	d1e5      	bne.n	8007e40 <__cvt+0x6a>
 8007e74:	7803      	ldrb	r3, [r0, #0]
 8007e76:	2b30      	cmp	r3, #48	@ 0x30
 8007e78:	d10a      	bne.n	8007e90 <__cvt+0xba>
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	4630      	mov	r0, r6
 8007e80:	4639      	mov	r1, r7
 8007e82:	f7f8 fe21 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e86:	b918      	cbnz	r0, 8007e90 <__cvt+0xba>
 8007e88:	f1c4 0401 	rsb	r4, r4, #1
 8007e8c:	f8ca 4000 	str.w	r4, [sl]
 8007e90:	f8da 3000 	ldr.w	r3, [sl]
 8007e94:	4499      	add	r9, r3
 8007e96:	e7d3      	b.n	8007e40 <__cvt+0x6a>
 8007e98:	1c59      	adds	r1, r3, #1
 8007e9a:	9103      	str	r1, [sp, #12]
 8007e9c:	701a      	strb	r2, [r3, #0]
 8007e9e:	e7d9      	b.n	8007e54 <__cvt+0x7e>

08007ea0 <__exponent>:
 8007ea0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ea2:	2900      	cmp	r1, #0
 8007ea4:	bfba      	itte	lt
 8007ea6:	4249      	neglt	r1, r1
 8007ea8:	232d      	movlt	r3, #45	@ 0x2d
 8007eaa:	232b      	movge	r3, #43	@ 0x2b
 8007eac:	2909      	cmp	r1, #9
 8007eae:	7002      	strb	r2, [r0, #0]
 8007eb0:	7043      	strb	r3, [r0, #1]
 8007eb2:	dd29      	ble.n	8007f08 <__exponent+0x68>
 8007eb4:	f10d 0307 	add.w	r3, sp, #7
 8007eb8:	461d      	mov	r5, r3
 8007eba:	270a      	movs	r7, #10
 8007ebc:	461a      	mov	r2, r3
 8007ebe:	fbb1 f6f7 	udiv	r6, r1, r7
 8007ec2:	fb07 1416 	mls	r4, r7, r6, r1
 8007ec6:	3430      	adds	r4, #48	@ 0x30
 8007ec8:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007ecc:	460c      	mov	r4, r1
 8007ece:	2c63      	cmp	r4, #99	@ 0x63
 8007ed0:	f103 33ff 	add.w	r3, r3, #4294967295
 8007ed4:	4631      	mov	r1, r6
 8007ed6:	dcf1      	bgt.n	8007ebc <__exponent+0x1c>
 8007ed8:	3130      	adds	r1, #48	@ 0x30
 8007eda:	1e94      	subs	r4, r2, #2
 8007edc:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007ee0:	1c41      	adds	r1, r0, #1
 8007ee2:	4623      	mov	r3, r4
 8007ee4:	42ab      	cmp	r3, r5
 8007ee6:	d30a      	bcc.n	8007efe <__exponent+0x5e>
 8007ee8:	f10d 0309 	add.w	r3, sp, #9
 8007eec:	1a9b      	subs	r3, r3, r2
 8007eee:	42ac      	cmp	r4, r5
 8007ef0:	bf88      	it	hi
 8007ef2:	2300      	movhi	r3, #0
 8007ef4:	3302      	adds	r3, #2
 8007ef6:	4403      	add	r3, r0
 8007ef8:	1a18      	subs	r0, r3, r0
 8007efa:	b003      	add	sp, #12
 8007efc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007efe:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007f02:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007f06:	e7ed      	b.n	8007ee4 <__exponent+0x44>
 8007f08:	2330      	movs	r3, #48	@ 0x30
 8007f0a:	3130      	adds	r1, #48	@ 0x30
 8007f0c:	7083      	strb	r3, [r0, #2]
 8007f0e:	70c1      	strb	r1, [r0, #3]
 8007f10:	1d03      	adds	r3, r0, #4
 8007f12:	e7f1      	b.n	8007ef8 <__exponent+0x58>

08007f14 <_printf_float>:
 8007f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f18:	b08d      	sub	sp, #52	@ 0x34
 8007f1a:	460c      	mov	r4, r1
 8007f1c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007f20:	4616      	mov	r6, r2
 8007f22:	461f      	mov	r7, r3
 8007f24:	4605      	mov	r5, r0
 8007f26:	f001 f8bf 	bl	80090a8 <_localeconv_r>
 8007f2a:	6803      	ldr	r3, [r0, #0]
 8007f2c:	9304      	str	r3, [sp, #16]
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f7f8 f99e 	bl	8000270 <strlen>
 8007f34:	2300      	movs	r3, #0
 8007f36:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f38:	f8d8 3000 	ldr.w	r3, [r8]
 8007f3c:	9005      	str	r0, [sp, #20]
 8007f3e:	3307      	adds	r3, #7
 8007f40:	f023 0307 	bic.w	r3, r3, #7
 8007f44:	f103 0208 	add.w	r2, r3, #8
 8007f48:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007f4c:	f8d4 b000 	ldr.w	fp, [r4]
 8007f50:	f8c8 2000 	str.w	r2, [r8]
 8007f54:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007f58:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007f5c:	9307      	str	r3, [sp, #28]
 8007f5e:	f8cd 8018 	str.w	r8, [sp, #24]
 8007f62:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007f66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f6a:	4b9c      	ldr	r3, [pc, #624]	@ (80081dc <_printf_float+0x2c8>)
 8007f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8007f70:	f7f8 fddc 	bl	8000b2c <__aeabi_dcmpun>
 8007f74:	bb70      	cbnz	r0, 8007fd4 <_printf_float+0xc0>
 8007f76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f7a:	4b98      	ldr	r3, [pc, #608]	@ (80081dc <_printf_float+0x2c8>)
 8007f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8007f80:	f7f8 fdb6 	bl	8000af0 <__aeabi_dcmple>
 8007f84:	bb30      	cbnz	r0, 8007fd4 <_printf_float+0xc0>
 8007f86:	2200      	movs	r2, #0
 8007f88:	2300      	movs	r3, #0
 8007f8a:	4640      	mov	r0, r8
 8007f8c:	4649      	mov	r1, r9
 8007f8e:	f7f8 fda5 	bl	8000adc <__aeabi_dcmplt>
 8007f92:	b110      	cbz	r0, 8007f9a <_printf_float+0x86>
 8007f94:	232d      	movs	r3, #45	@ 0x2d
 8007f96:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f9a:	4a91      	ldr	r2, [pc, #580]	@ (80081e0 <_printf_float+0x2cc>)
 8007f9c:	4b91      	ldr	r3, [pc, #580]	@ (80081e4 <_printf_float+0x2d0>)
 8007f9e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007fa2:	bf94      	ite	ls
 8007fa4:	4690      	movls	r8, r2
 8007fa6:	4698      	movhi	r8, r3
 8007fa8:	2303      	movs	r3, #3
 8007faa:	6123      	str	r3, [r4, #16]
 8007fac:	f02b 0304 	bic.w	r3, fp, #4
 8007fb0:	6023      	str	r3, [r4, #0]
 8007fb2:	f04f 0900 	mov.w	r9, #0
 8007fb6:	9700      	str	r7, [sp, #0]
 8007fb8:	4633      	mov	r3, r6
 8007fba:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007fbc:	4621      	mov	r1, r4
 8007fbe:	4628      	mov	r0, r5
 8007fc0:	f000 f9d2 	bl	8008368 <_printf_common>
 8007fc4:	3001      	adds	r0, #1
 8007fc6:	f040 808d 	bne.w	80080e4 <_printf_float+0x1d0>
 8007fca:	f04f 30ff 	mov.w	r0, #4294967295
 8007fce:	b00d      	add	sp, #52	@ 0x34
 8007fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fd4:	4642      	mov	r2, r8
 8007fd6:	464b      	mov	r3, r9
 8007fd8:	4640      	mov	r0, r8
 8007fda:	4649      	mov	r1, r9
 8007fdc:	f7f8 fda6 	bl	8000b2c <__aeabi_dcmpun>
 8007fe0:	b140      	cbz	r0, 8007ff4 <_printf_float+0xe0>
 8007fe2:	464b      	mov	r3, r9
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	bfbc      	itt	lt
 8007fe8:	232d      	movlt	r3, #45	@ 0x2d
 8007fea:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007fee:	4a7e      	ldr	r2, [pc, #504]	@ (80081e8 <_printf_float+0x2d4>)
 8007ff0:	4b7e      	ldr	r3, [pc, #504]	@ (80081ec <_printf_float+0x2d8>)
 8007ff2:	e7d4      	b.n	8007f9e <_printf_float+0x8a>
 8007ff4:	6863      	ldr	r3, [r4, #4]
 8007ff6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007ffa:	9206      	str	r2, [sp, #24]
 8007ffc:	1c5a      	adds	r2, r3, #1
 8007ffe:	d13b      	bne.n	8008078 <_printf_float+0x164>
 8008000:	2306      	movs	r3, #6
 8008002:	6063      	str	r3, [r4, #4]
 8008004:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008008:	2300      	movs	r3, #0
 800800a:	6022      	str	r2, [r4, #0]
 800800c:	9303      	str	r3, [sp, #12]
 800800e:	ab0a      	add	r3, sp, #40	@ 0x28
 8008010:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008014:	ab09      	add	r3, sp, #36	@ 0x24
 8008016:	9300      	str	r3, [sp, #0]
 8008018:	6861      	ldr	r1, [r4, #4]
 800801a:	ec49 8b10 	vmov	d0, r8, r9
 800801e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008022:	4628      	mov	r0, r5
 8008024:	f7ff fed7 	bl	8007dd6 <__cvt>
 8008028:	9b06      	ldr	r3, [sp, #24]
 800802a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800802c:	2b47      	cmp	r3, #71	@ 0x47
 800802e:	4680      	mov	r8, r0
 8008030:	d129      	bne.n	8008086 <_printf_float+0x172>
 8008032:	1cc8      	adds	r0, r1, #3
 8008034:	db02      	blt.n	800803c <_printf_float+0x128>
 8008036:	6863      	ldr	r3, [r4, #4]
 8008038:	4299      	cmp	r1, r3
 800803a:	dd41      	ble.n	80080c0 <_printf_float+0x1ac>
 800803c:	f1aa 0a02 	sub.w	sl, sl, #2
 8008040:	fa5f fa8a 	uxtb.w	sl, sl
 8008044:	3901      	subs	r1, #1
 8008046:	4652      	mov	r2, sl
 8008048:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800804c:	9109      	str	r1, [sp, #36]	@ 0x24
 800804e:	f7ff ff27 	bl	8007ea0 <__exponent>
 8008052:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008054:	1813      	adds	r3, r2, r0
 8008056:	2a01      	cmp	r2, #1
 8008058:	4681      	mov	r9, r0
 800805a:	6123      	str	r3, [r4, #16]
 800805c:	dc02      	bgt.n	8008064 <_printf_float+0x150>
 800805e:	6822      	ldr	r2, [r4, #0]
 8008060:	07d2      	lsls	r2, r2, #31
 8008062:	d501      	bpl.n	8008068 <_printf_float+0x154>
 8008064:	3301      	adds	r3, #1
 8008066:	6123      	str	r3, [r4, #16]
 8008068:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800806c:	2b00      	cmp	r3, #0
 800806e:	d0a2      	beq.n	8007fb6 <_printf_float+0xa2>
 8008070:	232d      	movs	r3, #45	@ 0x2d
 8008072:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008076:	e79e      	b.n	8007fb6 <_printf_float+0xa2>
 8008078:	9a06      	ldr	r2, [sp, #24]
 800807a:	2a47      	cmp	r2, #71	@ 0x47
 800807c:	d1c2      	bne.n	8008004 <_printf_float+0xf0>
 800807e:	2b00      	cmp	r3, #0
 8008080:	d1c0      	bne.n	8008004 <_printf_float+0xf0>
 8008082:	2301      	movs	r3, #1
 8008084:	e7bd      	b.n	8008002 <_printf_float+0xee>
 8008086:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800808a:	d9db      	bls.n	8008044 <_printf_float+0x130>
 800808c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008090:	d118      	bne.n	80080c4 <_printf_float+0x1b0>
 8008092:	2900      	cmp	r1, #0
 8008094:	6863      	ldr	r3, [r4, #4]
 8008096:	dd0b      	ble.n	80080b0 <_printf_float+0x19c>
 8008098:	6121      	str	r1, [r4, #16]
 800809a:	b913      	cbnz	r3, 80080a2 <_printf_float+0x18e>
 800809c:	6822      	ldr	r2, [r4, #0]
 800809e:	07d0      	lsls	r0, r2, #31
 80080a0:	d502      	bpl.n	80080a8 <_printf_float+0x194>
 80080a2:	3301      	adds	r3, #1
 80080a4:	440b      	add	r3, r1
 80080a6:	6123      	str	r3, [r4, #16]
 80080a8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80080aa:	f04f 0900 	mov.w	r9, #0
 80080ae:	e7db      	b.n	8008068 <_printf_float+0x154>
 80080b0:	b913      	cbnz	r3, 80080b8 <_printf_float+0x1a4>
 80080b2:	6822      	ldr	r2, [r4, #0]
 80080b4:	07d2      	lsls	r2, r2, #31
 80080b6:	d501      	bpl.n	80080bc <_printf_float+0x1a8>
 80080b8:	3302      	adds	r3, #2
 80080ba:	e7f4      	b.n	80080a6 <_printf_float+0x192>
 80080bc:	2301      	movs	r3, #1
 80080be:	e7f2      	b.n	80080a6 <_printf_float+0x192>
 80080c0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80080c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80080c6:	4299      	cmp	r1, r3
 80080c8:	db05      	blt.n	80080d6 <_printf_float+0x1c2>
 80080ca:	6823      	ldr	r3, [r4, #0]
 80080cc:	6121      	str	r1, [r4, #16]
 80080ce:	07d8      	lsls	r0, r3, #31
 80080d0:	d5ea      	bpl.n	80080a8 <_printf_float+0x194>
 80080d2:	1c4b      	adds	r3, r1, #1
 80080d4:	e7e7      	b.n	80080a6 <_printf_float+0x192>
 80080d6:	2900      	cmp	r1, #0
 80080d8:	bfd4      	ite	le
 80080da:	f1c1 0202 	rsble	r2, r1, #2
 80080de:	2201      	movgt	r2, #1
 80080e0:	4413      	add	r3, r2
 80080e2:	e7e0      	b.n	80080a6 <_printf_float+0x192>
 80080e4:	6823      	ldr	r3, [r4, #0]
 80080e6:	055a      	lsls	r2, r3, #21
 80080e8:	d407      	bmi.n	80080fa <_printf_float+0x1e6>
 80080ea:	6923      	ldr	r3, [r4, #16]
 80080ec:	4642      	mov	r2, r8
 80080ee:	4631      	mov	r1, r6
 80080f0:	4628      	mov	r0, r5
 80080f2:	47b8      	blx	r7
 80080f4:	3001      	adds	r0, #1
 80080f6:	d12b      	bne.n	8008150 <_printf_float+0x23c>
 80080f8:	e767      	b.n	8007fca <_printf_float+0xb6>
 80080fa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80080fe:	f240 80dd 	bls.w	80082bc <_printf_float+0x3a8>
 8008102:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008106:	2200      	movs	r2, #0
 8008108:	2300      	movs	r3, #0
 800810a:	f7f8 fcdd 	bl	8000ac8 <__aeabi_dcmpeq>
 800810e:	2800      	cmp	r0, #0
 8008110:	d033      	beq.n	800817a <_printf_float+0x266>
 8008112:	4a37      	ldr	r2, [pc, #220]	@ (80081f0 <_printf_float+0x2dc>)
 8008114:	2301      	movs	r3, #1
 8008116:	4631      	mov	r1, r6
 8008118:	4628      	mov	r0, r5
 800811a:	47b8      	blx	r7
 800811c:	3001      	adds	r0, #1
 800811e:	f43f af54 	beq.w	8007fca <_printf_float+0xb6>
 8008122:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008126:	4543      	cmp	r3, r8
 8008128:	db02      	blt.n	8008130 <_printf_float+0x21c>
 800812a:	6823      	ldr	r3, [r4, #0]
 800812c:	07d8      	lsls	r0, r3, #31
 800812e:	d50f      	bpl.n	8008150 <_printf_float+0x23c>
 8008130:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008134:	4631      	mov	r1, r6
 8008136:	4628      	mov	r0, r5
 8008138:	47b8      	blx	r7
 800813a:	3001      	adds	r0, #1
 800813c:	f43f af45 	beq.w	8007fca <_printf_float+0xb6>
 8008140:	f04f 0900 	mov.w	r9, #0
 8008144:	f108 38ff 	add.w	r8, r8, #4294967295
 8008148:	f104 0a1a 	add.w	sl, r4, #26
 800814c:	45c8      	cmp	r8, r9
 800814e:	dc09      	bgt.n	8008164 <_printf_float+0x250>
 8008150:	6823      	ldr	r3, [r4, #0]
 8008152:	079b      	lsls	r3, r3, #30
 8008154:	f100 8103 	bmi.w	800835e <_printf_float+0x44a>
 8008158:	68e0      	ldr	r0, [r4, #12]
 800815a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800815c:	4298      	cmp	r0, r3
 800815e:	bfb8      	it	lt
 8008160:	4618      	movlt	r0, r3
 8008162:	e734      	b.n	8007fce <_printf_float+0xba>
 8008164:	2301      	movs	r3, #1
 8008166:	4652      	mov	r2, sl
 8008168:	4631      	mov	r1, r6
 800816a:	4628      	mov	r0, r5
 800816c:	47b8      	blx	r7
 800816e:	3001      	adds	r0, #1
 8008170:	f43f af2b 	beq.w	8007fca <_printf_float+0xb6>
 8008174:	f109 0901 	add.w	r9, r9, #1
 8008178:	e7e8      	b.n	800814c <_printf_float+0x238>
 800817a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800817c:	2b00      	cmp	r3, #0
 800817e:	dc39      	bgt.n	80081f4 <_printf_float+0x2e0>
 8008180:	4a1b      	ldr	r2, [pc, #108]	@ (80081f0 <_printf_float+0x2dc>)
 8008182:	2301      	movs	r3, #1
 8008184:	4631      	mov	r1, r6
 8008186:	4628      	mov	r0, r5
 8008188:	47b8      	blx	r7
 800818a:	3001      	adds	r0, #1
 800818c:	f43f af1d 	beq.w	8007fca <_printf_float+0xb6>
 8008190:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008194:	ea59 0303 	orrs.w	r3, r9, r3
 8008198:	d102      	bne.n	80081a0 <_printf_float+0x28c>
 800819a:	6823      	ldr	r3, [r4, #0]
 800819c:	07d9      	lsls	r1, r3, #31
 800819e:	d5d7      	bpl.n	8008150 <_printf_float+0x23c>
 80081a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80081a4:	4631      	mov	r1, r6
 80081a6:	4628      	mov	r0, r5
 80081a8:	47b8      	blx	r7
 80081aa:	3001      	adds	r0, #1
 80081ac:	f43f af0d 	beq.w	8007fca <_printf_float+0xb6>
 80081b0:	f04f 0a00 	mov.w	sl, #0
 80081b4:	f104 0b1a 	add.w	fp, r4, #26
 80081b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081ba:	425b      	negs	r3, r3
 80081bc:	4553      	cmp	r3, sl
 80081be:	dc01      	bgt.n	80081c4 <_printf_float+0x2b0>
 80081c0:	464b      	mov	r3, r9
 80081c2:	e793      	b.n	80080ec <_printf_float+0x1d8>
 80081c4:	2301      	movs	r3, #1
 80081c6:	465a      	mov	r2, fp
 80081c8:	4631      	mov	r1, r6
 80081ca:	4628      	mov	r0, r5
 80081cc:	47b8      	blx	r7
 80081ce:	3001      	adds	r0, #1
 80081d0:	f43f aefb 	beq.w	8007fca <_printf_float+0xb6>
 80081d4:	f10a 0a01 	add.w	sl, sl, #1
 80081d8:	e7ee      	b.n	80081b8 <_printf_float+0x2a4>
 80081da:	bf00      	nop
 80081dc:	7fefffff 	.word	0x7fefffff
 80081e0:	0800d004 	.word	0x0800d004
 80081e4:	0800d008 	.word	0x0800d008
 80081e8:	0800d00c 	.word	0x0800d00c
 80081ec:	0800d010 	.word	0x0800d010
 80081f0:	0800d014 	.word	0x0800d014
 80081f4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80081f6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80081fa:	4553      	cmp	r3, sl
 80081fc:	bfa8      	it	ge
 80081fe:	4653      	movge	r3, sl
 8008200:	2b00      	cmp	r3, #0
 8008202:	4699      	mov	r9, r3
 8008204:	dc36      	bgt.n	8008274 <_printf_float+0x360>
 8008206:	f04f 0b00 	mov.w	fp, #0
 800820a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800820e:	f104 021a 	add.w	r2, r4, #26
 8008212:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008214:	9306      	str	r3, [sp, #24]
 8008216:	eba3 0309 	sub.w	r3, r3, r9
 800821a:	455b      	cmp	r3, fp
 800821c:	dc31      	bgt.n	8008282 <_printf_float+0x36e>
 800821e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008220:	459a      	cmp	sl, r3
 8008222:	dc3a      	bgt.n	800829a <_printf_float+0x386>
 8008224:	6823      	ldr	r3, [r4, #0]
 8008226:	07da      	lsls	r2, r3, #31
 8008228:	d437      	bmi.n	800829a <_printf_float+0x386>
 800822a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800822c:	ebaa 0903 	sub.w	r9, sl, r3
 8008230:	9b06      	ldr	r3, [sp, #24]
 8008232:	ebaa 0303 	sub.w	r3, sl, r3
 8008236:	4599      	cmp	r9, r3
 8008238:	bfa8      	it	ge
 800823a:	4699      	movge	r9, r3
 800823c:	f1b9 0f00 	cmp.w	r9, #0
 8008240:	dc33      	bgt.n	80082aa <_printf_float+0x396>
 8008242:	f04f 0800 	mov.w	r8, #0
 8008246:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800824a:	f104 0b1a 	add.w	fp, r4, #26
 800824e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008250:	ebaa 0303 	sub.w	r3, sl, r3
 8008254:	eba3 0309 	sub.w	r3, r3, r9
 8008258:	4543      	cmp	r3, r8
 800825a:	f77f af79 	ble.w	8008150 <_printf_float+0x23c>
 800825e:	2301      	movs	r3, #1
 8008260:	465a      	mov	r2, fp
 8008262:	4631      	mov	r1, r6
 8008264:	4628      	mov	r0, r5
 8008266:	47b8      	blx	r7
 8008268:	3001      	adds	r0, #1
 800826a:	f43f aeae 	beq.w	8007fca <_printf_float+0xb6>
 800826e:	f108 0801 	add.w	r8, r8, #1
 8008272:	e7ec      	b.n	800824e <_printf_float+0x33a>
 8008274:	4642      	mov	r2, r8
 8008276:	4631      	mov	r1, r6
 8008278:	4628      	mov	r0, r5
 800827a:	47b8      	blx	r7
 800827c:	3001      	adds	r0, #1
 800827e:	d1c2      	bne.n	8008206 <_printf_float+0x2f2>
 8008280:	e6a3      	b.n	8007fca <_printf_float+0xb6>
 8008282:	2301      	movs	r3, #1
 8008284:	4631      	mov	r1, r6
 8008286:	4628      	mov	r0, r5
 8008288:	9206      	str	r2, [sp, #24]
 800828a:	47b8      	blx	r7
 800828c:	3001      	adds	r0, #1
 800828e:	f43f ae9c 	beq.w	8007fca <_printf_float+0xb6>
 8008292:	9a06      	ldr	r2, [sp, #24]
 8008294:	f10b 0b01 	add.w	fp, fp, #1
 8008298:	e7bb      	b.n	8008212 <_printf_float+0x2fe>
 800829a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800829e:	4631      	mov	r1, r6
 80082a0:	4628      	mov	r0, r5
 80082a2:	47b8      	blx	r7
 80082a4:	3001      	adds	r0, #1
 80082a6:	d1c0      	bne.n	800822a <_printf_float+0x316>
 80082a8:	e68f      	b.n	8007fca <_printf_float+0xb6>
 80082aa:	9a06      	ldr	r2, [sp, #24]
 80082ac:	464b      	mov	r3, r9
 80082ae:	4442      	add	r2, r8
 80082b0:	4631      	mov	r1, r6
 80082b2:	4628      	mov	r0, r5
 80082b4:	47b8      	blx	r7
 80082b6:	3001      	adds	r0, #1
 80082b8:	d1c3      	bne.n	8008242 <_printf_float+0x32e>
 80082ba:	e686      	b.n	8007fca <_printf_float+0xb6>
 80082bc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80082c0:	f1ba 0f01 	cmp.w	sl, #1
 80082c4:	dc01      	bgt.n	80082ca <_printf_float+0x3b6>
 80082c6:	07db      	lsls	r3, r3, #31
 80082c8:	d536      	bpl.n	8008338 <_printf_float+0x424>
 80082ca:	2301      	movs	r3, #1
 80082cc:	4642      	mov	r2, r8
 80082ce:	4631      	mov	r1, r6
 80082d0:	4628      	mov	r0, r5
 80082d2:	47b8      	blx	r7
 80082d4:	3001      	adds	r0, #1
 80082d6:	f43f ae78 	beq.w	8007fca <_printf_float+0xb6>
 80082da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80082de:	4631      	mov	r1, r6
 80082e0:	4628      	mov	r0, r5
 80082e2:	47b8      	blx	r7
 80082e4:	3001      	adds	r0, #1
 80082e6:	f43f ae70 	beq.w	8007fca <_printf_float+0xb6>
 80082ea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80082ee:	2200      	movs	r2, #0
 80082f0:	2300      	movs	r3, #0
 80082f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80082f6:	f7f8 fbe7 	bl	8000ac8 <__aeabi_dcmpeq>
 80082fa:	b9c0      	cbnz	r0, 800832e <_printf_float+0x41a>
 80082fc:	4653      	mov	r3, sl
 80082fe:	f108 0201 	add.w	r2, r8, #1
 8008302:	4631      	mov	r1, r6
 8008304:	4628      	mov	r0, r5
 8008306:	47b8      	blx	r7
 8008308:	3001      	adds	r0, #1
 800830a:	d10c      	bne.n	8008326 <_printf_float+0x412>
 800830c:	e65d      	b.n	8007fca <_printf_float+0xb6>
 800830e:	2301      	movs	r3, #1
 8008310:	465a      	mov	r2, fp
 8008312:	4631      	mov	r1, r6
 8008314:	4628      	mov	r0, r5
 8008316:	47b8      	blx	r7
 8008318:	3001      	adds	r0, #1
 800831a:	f43f ae56 	beq.w	8007fca <_printf_float+0xb6>
 800831e:	f108 0801 	add.w	r8, r8, #1
 8008322:	45d0      	cmp	r8, sl
 8008324:	dbf3      	blt.n	800830e <_printf_float+0x3fa>
 8008326:	464b      	mov	r3, r9
 8008328:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800832c:	e6df      	b.n	80080ee <_printf_float+0x1da>
 800832e:	f04f 0800 	mov.w	r8, #0
 8008332:	f104 0b1a 	add.w	fp, r4, #26
 8008336:	e7f4      	b.n	8008322 <_printf_float+0x40e>
 8008338:	2301      	movs	r3, #1
 800833a:	4642      	mov	r2, r8
 800833c:	e7e1      	b.n	8008302 <_printf_float+0x3ee>
 800833e:	2301      	movs	r3, #1
 8008340:	464a      	mov	r2, r9
 8008342:	4631      	mov	r1, r6
 8008344:	4628      	mov	r0, r5
 8008346:	47b8      	blx	r7
 8008348:	3001      	adds	r0, #1
 800834a:	f43f ae3e 	beq.w	8007fca <_printf_float+0xb6>
 800834e:	f108 0801 	add.w	r8, r8, #1
 8008352:	68e3      	ldr	r3, [r4, #12]
 8008354:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008356:	1a5b      	subs	r3, r3, r1
 8008358:	4543      	cmp	r3, r8
 800835a:	dcf0      	bgt.n	800833e <_printf_float+0x42a>
 800835c:	e6fc      	b.n	8008158 <_printf_float+0x244>
 800835e:	f04f 0800 	mov.w	r8, #0
 8008362:	f104 0919 	add.w	r9, r4, #25
 8008366:	e7f4      	b.n	8008352 <_printf_float+0x43e>

08008368 <_printf_common>:
 8008368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800836c:	4616      	mov	r6, r2
 800836e:	4698      	mov	r8, r3
 8008370:	688a      	ldr	r2, [r1, #8]
 8008372:	690b      	ldr	r3, [r1, #16]
 8008374:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008378:	4293      	cmp	r3, r2
 800837a:	bfb8      	it	lt
 800837c:	4613      	movlt	r3, r2
 800837e:	6033      	str	r3, [r6, #0]
 8008380:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008384:	4607      	mov	r7, r0
 8008386:	460c      	mov	r4, r1
 8008388:	b10a      	cbz	r2, 800838e <_printf_common+0x26>
 800838a:	3301      	adds	r3, #1
 800838c:	6033      	str	r3, [r6, #0]
 800838e:	6823      	ldr	r3, [r4, #0]
 8008390:	0699      	lsls	r1, r3, #26
 8008392:	bf42      	ittt	mi
 8008394:	6833      	ldrmi	r3, [r6, #0]
 8008396:	3302      	addmi	r3, #2
 8008398:	6033      	strmi	r3, [r6, #0]
 800839a:	6825      	ldr	r5, [r4, #0]
 800839c:	f015 0506 	ands.w	r5, r5, #6
 80083a0:	d106      	bne.n	80083b0 <_printf_common+0x48>
 80083a2:	f104 0a19 	add.w	sl, r4, #25
 80083a6:	68e3      	ldr	r3, [r4, #12]
 80083a8:	6832      	ldr	r2, [r6, #0]
 80083aa:	1a9b      	subs	r3, r3, r2
 80083ac:	42ab      	cmp	r3, r5
 80083ae:	dc26      	bgt.n	80083fe <_printf_common+0x96>
 80083b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80083b4:	6822      	ldr	r2, [r4, #0]
 80083b6:	3b00      	subs	r3, #0
 80083b8:	bf18      	it	ne
 80083ba:	2301      	movne	r3, #1
 80083bc:	0692      	lsls	r2, r2, #26
 80083be:	d42b      	bmi.n	8008418 <_printf_common+0xb0>
 80083c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80083c4:	4641      	mov	r1, r8
 80083c6:	4638      	mov	r0, r7
 80083c8:	47c8      	blx	r9
 80083ca:	3001      	adds	r0, #1
 80083cc:	d01e      	beq.n	800840c <_printf_common+0xa4>
 80083ce:	6823      	ldr	r3, [r4, #0]
 80083d0:	6922      	ldr	r2, [r4, #16]
 80083d2:	f003 0306 	and.w	r3, r3, #6
 80083d6:	2b04      	cmp	r3, #4
 80083d8:	bf02      	ittt	eq
 80083da:	68e5      	ldreq	r5, [r4, #12]
 80083dc:	6833      	ldreq	r3, [r6, #0]
 80083de:	1aed      	subeq	r5, r5, r3
 80083e0:	68a3      	ldr	r3, [r4, #8]
 80083e2:	bf0c      	ite	eq
 80083e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80083e8:	2500      	movne	r5, #0
 80083ea:	4293      	cmp	r3, r2
 80083ec:	bfc4      	itt	gt
 80083ee:	1a9b      	subgt	r3, r3, r2
 80083f0:	18ed      	addgt	r5, r5, r3
 80083f2:	2600      	movs	r6, #0
 80083f4:	341a      	adds	r4, #26
 80083f6:	42b5      	cmp	r5, r6
 80083f8:	d11a      	bne.n	8008430 <_printf_common+0xc8>
 80083fa:	2000      	movs	r0, #0
 80083fc:	e008      	b.n	8008410 <_printf_common+0xa8>
 80083fe:	2301      	movs	r3, #1
 8008400:	4652      	mov	r2, sl
 8008402:	4641      	mov	r1, r8
 8008404:	4638      	mov	r0, r7
 8008406:	47c8      	blx	r9
 8008408:	3001      	adds	r0, #1
 800840a:	d103      	bne.n	8008414 <_printf_common+0xac>
 800840c:	f04f 30ff 	mov.w	r0, #4294967295
 8008410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008414:	3501      	adds	r5, #1
 8008416:	e7c6      	b.n	80083a6 <_printf_common+0x3e>
 8008418:	18e1      	adds	r1, r4, r3
 800841a:	1c5a      	adds	r2, r3, #1
 800841c:	2030      	movs	r0, #48	@ 0x30
 800841e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008422:	4422      	add	r2, r4
 8008424:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008428:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800842c:	3302      	adds	r3, #2
 800842e:	e7c7      	b.n	80083c0 <_printf_common+0x58>
 8008430:	2301      	movs	r3, #1
 8008432:	4622      	mov	r2, r4
 8008434:	4641      	mov	r1, r8
 8008436:	4638      	mov	r0, r7
 8008438:	47c8      	blx	r9
 800843a:	3001      	adds	r0, #1
 800843c:	d0e6      	beq.n	800840c <_printf_common+0xa4>
 800843e:	3601      	adds	r6, #1
 8008440:	e7d9      	b.n	80083f6 <_printf_common+0x8e>
	...

08008444 <_printf_i>:
 8008444:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008448:	7e0f      	ldrb	r7, [r1, #24]
 800844a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800844c:	2f78      	cmp	r7, #120	@ 0x78
 800844e:	4691      	mov	r9, r2
 8008450:	4680      	mov	r8, r0
 8008452:	460c      	mov	r4, r1
 8008454:	469a      	mov	sl, r3
 8008456:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800845a:	d807      	bhi.n	800846c <_printf_i+0x28>
 800845c:	2f62      	cmp	r7, #98	@ 0x62
 800845e:	d80a      	bhi.n	8008476 <_printf_i+0x32>
 8008460:	2f00      	cmp	r7, #0
 8008462:	f000 80d2 	beq.w	800860a <_printf_i+0x1c6>
 8008466:	2f58      	cmp	r7, #88	@ 0x58
 8008468:	f000 80b9 	beq.w	80085de <_printf_i+0x19a>
 800846c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008470:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008474:	e03a      	b.n	80084ec <_printf_i+0xa8>
 8008476:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800847a:	2b15      	cmp	r3, #21
 800847c:	d8f6      	bhi.n	800846c <_printf_i+0x28>
 800847e:	a101      	add	r1, pc, #4	@ (adr r1, 8008484 <_printf_i+0x40>)
 8008480:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008484:	080084dd 	.word	0x080084dd
 8008488:	080084f1 	.word	0x080084f1
 800848c:	0800846d 	.word	0x0800846d
 8008490:	0800846d 	.word	0x0800846d
 8008494:	0800846d 	.word	0x0800846d
 8008498:	0800846d 	.word	0x0800846d
 800849c:	080084f1 	.word	0x080084f1
 80084a0:	0800846d 	.word	0x0800846d
 80084a4:	0800846d 	.word	0x0800846d
 80084a8:	0800846d 	.word	0x0800846d
 80084ac:	0800846d 	.word	0x0800846d
 80084b0:	080085f1 	.word	0x080085f1
 80084b4:	0800851b 	.word	0x0800851b
 80084b8:	080085ab 	.word	0x080085ab
 80084bc:	0800846d 	.word	0x0800846d
 80084c0:	0800846d 	.word	0x0800846d
 80084c4:	08008613 	.word	0x08008613
 80084c8:	0800846d 	.word	0x0800846d
 80084cc:	0800851b 	.word	0x0800851b
 80084d0:	0800846d 	.word	0x0800846d
 80084d4:	0800846d 	.word	0x0800846d
 80084d8:	080085b3 	.word	0x080085b3
 80084dc:	6833      	ldr	r3, [r6, #0]
 80084de:	1d1a      	adds	r2, r3, #4
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	6032      	str	r2, [r6, #0]
 80084e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80084e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80084ec:	2301      	movs	r3, #1
 80084ee:	e09d      	b.n	800862c <_printf_i+0x1e8>
 80084f0:	6833      	ldr	r3, [r6, #0]
 80084f2:	6820      	ldr	r0, [r4, #0]
 80084f4:	1d19      	adds	r1, r3, #4
 80084f6:	6031      	str	r1, [r6, #0]
 80084f8:	0606      	lsls	r6, r0, #24
 80084fa:	d501      	bpl.n	8008500 <_printf_i+0xbc>
 80084fc:	681d      	ldr	r5, [r3, #0]
 80084fe:	e003      	b.n	8008508 <_printf_i+0xc4>
 8008500:	0645      	lsls	r5, r0, #25
 8008502:	d5fb      	bpl.n	80084fc <_printf_i+0xb8>
 8008504:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008508:	2d00      	cmp	r5, #0
 800850a:	da03      	bge.n	8008514 <_printf_i+0xd0>
 800850c:	232d      	movs	r3, #45	@ 0x2d
 800850e:	426d      	negs	r5, r5
 8008510:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008514:	4859      	ldr	r0, [pc, #356]	@ (800867c <_printf_i+0x238>)
 8008516:	230a      	movs	r3, #10
 8008518:	e011      	b.n	800853e <_printf_i+0xfa>
 800851a:	6821      	ldr	r1, [r4, #0]
 800851c:	6833      	ldr	r3, [r6, #0]
 800851e:	0608      	lsls	r0, r1, #24
 8008520:	f853 5b04 	ldr.w	r5, [r3], #4
 8008524:	d402      	bmi.n	800852c <_printf_i+0xe8>
 8008526:	0649      	lsls	r1, r1, #25
 8008528:	bf48      	it	mi
 800852a:	b2ad      	uxthmi	r5, r5
 800852c:	2f6f      	cmp	r7, #111	@ 0x6f
 800852e:	4853      	ldr	r0, [pc, #332]	@ (800867c <_printf_i+0x238>)
 8008530:	6033      	str	r3, [r6, #0]
 8008532:	bf14      	ite	ne
 8008534:	230a      	movne	r3, #10
 8008536:	2308      	moveq	r3, #8
 8008538:	2100      	movs	r1, #0
 800853a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800853e:	6866      	ldr	r6, [r4, #4]
 8008540:	60a6      	str	r6, [r4, #8]
 8008542:	2e00      	cmp	r6, #0
 8008544:	bfa2      	ittt	ge
 8008546:	6821      	ldrge	r1, [r4, #0]
 8008548:	f021 0104 	bicge.w	r1, r1, #4
 800854c:	6021      	strge	r1, [r4, #0]
 800854e:	b90d      	cbnz	r5, 8008554 <_printf_i+0x110>
 8008550:	2e00      	cmp	r6, #0
 8008552:	d04b      	beq.n	80085ec <_printf_i+0x1a8>
 8008554:	4616      	mov	r6, r2
 8008556:	fbb5 f1f3 	udiv	r1, r5, r3
 800855a:	fb03 5711 	mls	r7, r3, r1, r5
 800855e:	5dc7      	ldrb	r7, [r0, r7]
 8008560:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008564:	462f      	mov	r7, r5
 8008566:	42bb      	cmp	r3, r7
 8008568:	460d      	mov	r5, r1
 800856a:	d9f4      	bls.n	8008556 <_printf_i+0x112>
 800856c:	2b08      	cmp	r3, #8
 800856e:	d10b      	bne.n	8008588 <_printf_i+0x144>
 8008570:	6823      	ldr	r3, [r4, #0]
 8008572:	07df      	lsls	r7, r3, #31
 8008574:	d508      	bpl.n	8008588 <_printf_i+0x144>
 8008576:	6923      	ldr	r3, [r4, #16]
 8008578:	6861      	ldr	r1, [r4, #4]
 800857a:	4299      	cmp	r1, r3
 800857c:	bfde      	ittt	le
 800857e:	2330      	movle	r3, #48	@ 0x30
 8008580:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008584:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008588:	1b92      	subs	r2, r2, r6
 800858a:	6122      	str	r2, [r4, #16]
 800858c:	f8cd a000 	str.w	sl, [sp]
 8008590:	464b      	mov	r3, r9
 8008592:	aa03      	add	r2, sp, #12
 8008594:	4621      	mov	r1, r4
 8008596:	4640      	mov	r0, r8
 8008598:	f7ff fee6 	bl	8008368 <_printf_common>
 800859c:	3001      	adds	r0, #1
 800859e:	d14a      	bne.n	8008636 <_printf_i+0x1f2>
 80085a0:	f04f 30ff 	mov.w	r0, #4294967295
 80085a4:	b004      	add	sp, #16
 80085a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085aa:	6823      	ldr	r3, [r4, #0]
 80085ac:	f043 0320 	orr.w	r3, r3, #32
 80085b0:	6023      	str	r3, [r4, #0]
 80085b2:	4833      	ldr	r0, [pc, #204]	@ (8008680 <_printf_i+0x23c>)
 80085b4:	2778      	movs	r7, #120	@ 0x78
 80085b6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80085ba:	6823      	ldr	r3, [r4, #0]
 80085bc:	6831      	ldr	r1, [r6, #0]
 80085be:	061f      	lsls	r7, r3, #24
 80085c0:	f851 5b04 	ldr.w	r5, [r1], #4
 80085c4:	d402      	bmi.n	80085cc <_printf_i+0x188>
 80085c6:	065f      	lsls	r7, r3, #25
 80085c8:	bf48      	it	mi
 80085ca:	b2ad      	uxthmi	r5, r5
 80085cc:	6031      	str	r1, [r6, #0]
 80085ce:	07d9      	lsls	r1, r3, #31
 80085d0:	bf44      	itt	mi
 80085d2:	f043 0320 	orrmi.w	r3, r3, #32
 80085d6:	6023      	strmi	r3, [r4, #0]
 80085d8:	b11d      	cbz	r5, 80085e2 <_printf_i+0x19e>
 80085da:	2310      	movs	r3, #16
 80085dc:	e7ac      	b.n	8008538 <_printf_i+0xf4>
 80085de:	4827      	ldr	r0, [pc, #156]	@ (800867c <_printf_i+0x238>)
 80085e0:	e7e9      	b.n	80085b6 <_printf_i+0x172>
 80085e2:	6823      	ldr	r3, [r4, #0]
 80085e4:	f023 0320 	bic.w	r3, r3, #32
 80085e8:	6023      	str	r3, [r4, #0]
 80085ea:	e7f6      	b.n	80085da <_printf_i+0x196>
 80085ec:	4616      	mov	r6, r2
 80085ee:	e7bd      	b.n	800856c <_printf_i+0x128>
 80085f0:	6833      	ldr	r3, [r6, #0]
 80085f2:	6825      	ldr	r5, [r4, #0]
 80085f4:	6961      	ldr	r1, [r4, #20]
 80085f6:	1d18      	adds	r0, r3, #4
 80085f8:	6030      	str	r0, [r6, #0]
 80085fa:	062e      	lsls	r6, r5, #24
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	d501      	bpl.n	8008604 <_printf_i+0x1c0>
 8008600:	6019      	str	r1, [r3, #0]
 8008602:	e002      	b.n	800860a <_printf_i+0x1c6>
 8008604:	0668      	lsls	r0, r5, #25
 8008606:	d5fb      	bpl.n	8008600 <_printf_i+0x1bc>
 8008608:	8019      	strh	r1, [r3, #0]
 800860a:	2300      	movs	r3, #0
 800860c:	6123      	str	r3, [r4, #16]
 800860e:	4616      	mov	r6, r2
 8008610:	e7bc      	b.n	800858c <_printf_i+0x148>
 8008612:	6833      	ldr	r3, [r6, #0]
 8008614:	1d1a      	adds	r2, r3, #4
 8008616:	6032      	str	r2, [r6, #0]
 8008618:	681e      	ldr	r6, [r3, #0]
 800861a:	6862      	ldr	r2, [r4, #4]
 800861c:	2100      	movs	r1, #0
 800861e:	4630      	mov	r0, r6
 8008620:	f7f7 fdd6 	bl	80001d0 <memchr>
 8008624:	b108      	cbz	r0, 800862a <_printf_i+0x1e6>
 8008626:	1b80      	subs	r0, r0, r6
 8008628:	6060      	str	r0, [r4, #4]
 800862a:	6863      	ldr	r3, [r4, #4]
 800862c:	6123      	str	r3, [r4, #16]
 800862e:	2300      	movs	r3, #0
 8008630:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008634:	e7aa      	b.n	800858c <_printf_i+0x148>
 8008636:	6923      	ldr	r3, [r4, #16]
 8008638:	4632      	mov	r2, r6
 800863a:	4649      	mov	r1, r9
 800863c:	4640      	mov	r0, r8
 800863e:	47d0      	blx	sl
 8008640:	3001      	adds	r0, #1
 8008642:	d0ad      	beq.n	80085a0 <_printf_i+0x15c>
 8008644:	6823      	ldr	r3, [r4, #0]
 8008646:	079b      	lsls	r3, r3, #30
 8008648:	d413      	bmi.n	8008672 <_printf_i+0x22e>
 800864a:	68e0      	ldr	r0, [r4, #12]
 800864c:	9b03      	ldr	r3, [sp, #12]
 800864e:	4298      	cmp	r0, r3
 8008650:	bfb8      	it	lt
 8008652:	4618      	movlt	r0, r3
 8008654:	e7a6      	b.n	80085a4 <_printf_i+0x160>
 8008656:	2301      	movs	r3, #1
 8008658:	4632      	mov	r2, r6
 800865a:	4649      	mov	r1, r9
 800865c:	4640      	mov	r0, r8
 800865e:	47d0      	blx	sl
 8008660:	3001      	adds	r0, #1
 8008662:	d09d      	beq.n	80085a0 <_printf_i+0x15c>
 8008664:	3501      	adds	r5, #1
 8008666:	68e3      	ldr	r3, [r4, #12]
 8008668:	9903      	ldr	r1, [sp, #12]
 800866a:	1a5b      	subs	r3, r3, r1
 800866c:	42ab      	cmp	r3, r5
 800866e:	dcf2      	bgt.n	8008656 <_printf_i+0x212>
 8008670:	e7eb      	b.n	800864a <_printf_i+0x206>
 8008672:	2500      	movs	r5, #0
 8008674:	f104 0619 	add.w	r6, r4, #25
 8008678:	e7f5      	b.n	8008666 <_printf_i+0x222>
 800867a:	bf00      	nop
 800867c:	0800d016 	.word	0x0800d016
 8008680:	0800d027 	.word	0x0800d027

08008684 <_scanf_float>:
 8008684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008688:	b087      	sub	sp, #28
 800868a:	4617      	mov	r7, r2
 800868c:	9303      	str	r3, [sp, #12]
 800868e:	688b      	ldr	r3, [r1, #8]
 8008690:	1e5a      	subs	r2, r3, #1
 8008692:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008696:	bf81      	itttt	hi
 8008698:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800869c:	eb03 0b05 	addhi.w	fp, r3, r5
 80086a0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80086a4:	608b      	strhi	r3, [r1, #8]
 80086a6:	680b      	ldr	r3, [r1, #0]
 80086a8:	460a      	mov	r2, r1
 80086aa:	f04f 0500 	mov.w	r5, #0
 80086ae:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80086b2:	f842 3b1c 	str.w	r3, [r2], #28
 80086b6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80086ba:	4680      	mov	r8, r0
 80086bc:	460c      	mov	r4, r1
 80086be:	bf98      	it	ls
 80086c0:	f04f 0b00 	movls.w	fp, #0
 80086c4:	9201      	str	r2, [sp, #4]
 80086c6:	4616      	mov	r6, r2
 80086c8:	46aa      	mov	sl, r5
 80086ca:	46a9      	mov	r9, r5
 80086cc:	9502      	str	r5, [sp, #8]
 80086ce:	68a2      	ldr	r2, [r4, #8]
 80086d0:	b152      	cbz	r2, 80086e8 <_scanf_float+0x64>
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	781b      	ldrb	r3, [r3, #0]
 80086d6:	2b4e      	cmp	r3, #78	@ 0x4e
 80086d8:	d864      	bhi.n	80087a4 <_scanf_float+0x120>
 80086da:	2b40      	cmp	r3, #64	@ 0x40
 80086dc:	d83c      	bhi.n	8008758 <_scanf_float+0xd4>
 80086de:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80086e2:	b2c8      	uxtb	r0, r1
 80086e4:	280e      	cmp	r0, #14
 80086e6:	d93a      	bls.n	800875e <_scanf_float+0xda>
 80086e8:	f1b9 0f00 	cmp.w	r9, #0
 80086ec:	d003      	beq.n	80086f6 <_scanf_float+0x72>
 80086ee:	6823      	ldr	r3, [r4, #0]
 80086f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80086f4:	6023      	str	r3, [r4, #0]
 80086f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80086fa:	f1ba 0f01 	cmp.w	sl, #1
 80086fe:	f200 8117 	bhi.w	8008930 <_scanf_float+0x2ac>
 8008702:	9b01      	ldr	r3, [sp, #4]
 8008704:	429e      	cmp	r6, r3
 8008706:	f200 8108 	bhi.w	800891a <_scanf_float+0x296>
 800870a:	2001      	movs	r0, #1
 800870c:	b007      	add	sp, #28
 800870e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008712:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008716:	2a0d      	cmp	r2, #13
 8008718:	d8e6      	bhi.n	80086e8 <_scanf_float+0x64>
 800871a:	a101      	add	r1, pc, #4	@ (adr r1, 8008720 <_scanf_float+0x9c>)
 800871c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008720:	08008867 	.word	0x08008867
 8008724:	080086e9 	.word	0x080086e9
 8008728:	080086e9 	.word	0x080086e9
 800872c:	080086e9 	.word	0x080086e9
 8008730:	080088c7 	.word	0x080088c7
 8008734:	0800889f 	.word	0x0800889f
 8008738:	080086e9 	.word	0x080086e9
 800873c:	080086e9 	.word	0x080086e9
 8008740:	08008875 	.word	0x08008875
 8008744:	080086e9 	.word	0x080086e9
 8008748:	080086e9 	.word	0x080086e9
 800874c:	080086e9 	.word	0x080086e9
 8008750:	080086e9 	.word	0x080086e9
 8008754:	0800882d 	.word	0x0800882d
 8008758:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800875c:	e7db      	b.n	8008716 <_scanf_float+0x92>
 800875e:	290e      	cmp	r1, #14
 8008760:	d8c2      	bhi.n	80086e8 <_scanf_float+0x64>
 8008762:	a001      	add	r0, pc, #4	@ (adr r0, 8008768 <_scanf_float+0xe4>)
 8008764:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008768:	0800881d 	.word	0x0800881d
 800876c:	080086e9 	.word	0x080086e9
 8008770:	0800881d 	.word	0x0800881d
 8008774:	080088b3 	.word	0x080088b3
 8008778:	080086e9 	.word	0x080086e9
 800877c:	080087c5 	.word	0x080087c5
 8008780:	08008803 	.word	0x08008803
 8008784:	08008803 	.word	0x08008803
 8008788:	08008803 	.word	0x08008803
 800878c:	08008803 	.word	0x08008803
 8008790:	08008803 	.word	0x08008803
 8008794:	08008803 	.word	0x08008803
 8008798:	08008803 	.word	0x08008803
 800879c:	08008803 	.word	0x08008803
 80087a0:	08008803 	.word	0x08008803
 80087a4:	2b6e      	cmp	r3, #110	@ 0x6e
 80087a6:	d809      	bhi.n	80087bc <_scanf_float+0x138>
 80087a8:	2b60      	cmp	r3, #96	@ 0x60
 80087aa:	d8b2      	bhi.n	8008712 <_scanf_float+0x8e>
 80087ac:	2b54      	cmp	r3, #84	@ 0x54
 80087ae:	d07b      	beq.n	80088a8 <_scanf_float+0x224>
 80087b0:	2b59      	cmp	r3, #89	@ 0x59
 80087b2:	d199      	bne.n	80086e8 <_scanf_float+0x64>
 80087b4:	2d07      	cmp	r5, #7
 80087b6:	d197      	bne.n	80086e8 <_scanf_float+0x64>
 80087b8:	2508      	movs	r5, #8
 80087ba:	e02c      	b.n	8008816 <_scanf_float+0x192>
 80087bc:	2b74      	cmp	r3, #116	@ 0x74
 80087be:	d073      	beq.n	80088a8 <_scanf_float+0x224>
 80087c0:	2b79      	cmp	r3, #121	@ 0x79
 80087c2:	e7f6      	b.n	80087b2 <_scanf_float+0x12e>
 80087c4:	6821      	ldr	r1, [r4, #0]
 80087c6:	05c8      	lsls	r0, r1, #23
 80087c8:	d51b      	bpl.n	8008802 <_scanf_float+0x17e>
 80087ca:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80087ce:	6021      	str	r1, [r4, #0]
 80087d0:	f109 0901 	add.w	r9, r9, #1
 80087d4:	f1bb 0f00 	cmp.w	fp, #0
 80087d8:	d003      	beq.n	80087e2 <_scanf_float+0x15e>
 80087da:	3201      	adds	r2, #1
 80087dc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80087e0:	60a2      	str	r2, [r4, #8]
 80087e2:	68a3      	ldr	r3, [r4, #8]
 80087e4:	3b01      	subs	r3, #1
 80087e6:	60a3      	str	r3, [r4, #8]
 80087e8:	6923      	ldr	r3, [r4, #16]
 80087ea:	3301      	adds	r3, #1
 80087ec:	6123      	str	r3, [r4, #16]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	3b01      	subs	r3, #1
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	607b      	str	r3, [r7, #4]
 80087f6:	f340 8087 	ble.w	8008908 <_scanf_float+0x284>
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	3301      	adds	r3, #1
 80087fe:	603b      	str	r3, [r7, #0]
 8008800:	e765      	b.n	80086ce <_scanf_float+0x4a>
 8008802:	eb1a 0105 	adds.w	r1, sl, r5
 8008806:	f47f af6f 	bne.w	80086e8 <_scanf_float+0x64>
 800880a:	6822      	ldr	r2, [r4, #0]
 800880c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008810:	6022      	str	r2, [r4, #0]
 8008812:	460d      	mov	r5, r1
 8008814:	468a      	mov	sl, r1
 8008816:	f806 3b01 	strb.w	r3, [r6], #1
 800881a:	e7e2      	b.n	80087e2 <_scanf_float+0x15e>
 800881c:	6822      	ldr	r2, [r4, #0]
 800881e:	0610      	lsls	r0, r2, #24
 8008820:	f57f af62 	bpl.w	80086e8 <_scanf_float+0x64>
 8008824:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008828:	6022      	str	r2, [r4, #0]
 800882a:	e7f4      	b.n	8008816 <_scanf_float+0x192>
 800882c:	f1ba 0f00 	cmp.w	sl, #0
 8008830:	d10e      	bne.n	8008850 <_scanf_float+0x1cc>
 8008832:	f1b9 0f00 	cmp.w	r9, #0
 8008836:	d10e      	bne.n	8008856 <_scanf_float+0x1d2>
 8008838:	6822      	ldr	r2, [r4, #0]
 800883a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800883e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008842:	d108      	bne.n	8008856 <_scanf_float+0x1d2>
 8008844:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008848:	6022      	str	r2, [r4, #0]
 800884a:	f04f 0a01 	mov.w	sl, #1
 800884e:	e7e2      	b.n	8008816 <_scanf_float+0x192>
 8008850:	f1ba 0f02 	cmp.w	sl, #2
 8008854:	d055      	beq.n	8008902 <_scanf_float+0x27e>
 8008856:	2d01      	cmp	r5, #1
 8008858:	d002      	beq.n	8008860 <_scanf_float+0x1dc>
 800885a:	2d04      	cmp	r5, #4
 800885c:	f47f af44 	bne.w	80086e8 <_scanf_float+0x64>
 8008860:	3501      	adds	r5, #1
 8008862:	b2ed      	uxtb	r5, r5
 8008864:	e7d7      	b.n	8008816 <_scanf_float+0x192>
 8008866:	f1ba 0f01 	cmp.w	sl, #1
 800886a:	f47f af3d 	bne.w	80086e8 <_scanf_float+0x64>
 800886e:	f04f 0a02 	mov.w	sl, #2
 8008872:	e7d0      	b.n	8008816 <_scanf_float+0x192>
 8008874:	b97d      	cbnz	r5, 8008896 <_scanf_float+0x212>
 8008876:	f1b9 0f00 	cmp.w	r9, #0
 800887a:	f47f af38 	bne.w	80086ee <_scanf_float+0x6a>
 800887e:	6822      	ldr	r2, [r4, #0]
 8008880:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008884:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008888:	f040 8108 	bne.w	8008a9c <_scanf_float+0x418>
 800888c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008890:	6022      	str	r2, [r4, #0]
 8008892:	2501      	movs	r5, #1
 8008894:	e7bf      	b.n	8008816 <_scanf_float+0x192>
 8008896:	2d03      	cmp	r5, #3
 8008898:	d0e2      	beq.n	8008860 <_scanf_float+0x1dc>
 800889a:	2d05      	cmp	r5, #5
 800889c:	e7de      	b.n	800885c <_scanf_float+0x1d8>
 800889e:	2d02      	cmp	r5, #2
 80088a0:	f47f af22 	bne.w	80086e8 <_scanf_float+0x64>
 80088a4:	2503      	movs	r5, #3
 80088a6:	e7b6      	b.n	8008816 <_scanf_float+0x192>
 80088a8:	2d06      	cmp	r5, #6
 80088aa:	f47f af1d 	bne.w	80086e8 <_scanf_float+0x64>
 80088ae:	2507      	movs	r5, #7
 80088b0:	e7b1      	b.n	8008816 <_scanf_float+0x192>
 80088b2:	6822      	ldr	r2, [r4, #0]
 80088b4:	0591      	lsls	r1, r2, #22
 80088b6:	f57f af17 	bpl.w	80086e8 <_scanf_float+0x64>
 80088ba:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80088be:	6022      	str	r2, [r4, #0]
 80088c0:	f8cd 9008 	str.w	r9, [sp, #8]
 80088c4:	e7a7      	b.n	8008816 <_scanf_float+0x192>
 80088c6:	6822      	ldr	r2, [r4, #0]
 80088c8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80088cc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80088d0:	d006      	beq.n	80088e0 <_scanf_float+0x25c>
 80088d2:	0550      	lsls	r0, r2, #21
 80088d4:	f57f af08 	bpl.w	80086e8 <_scanf_float+0x64>
 80088d8:	f1b9 0f00 	cmp.w	r9, #0
 80088dc:	f000 80de 	beq.w	8008a9c <_scanf_float+0x418>
 80088e0:	0591      	lsls	r1, r2, #22
 80088e2:	bf58      	it	pl
 80088e4:	9902      	ldrpl	r1, [sp, #8]
 80088e6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80088ea:	bf58      	it	pl
 80088ec:	eba9 0101 	subpl.w	r1, r9, r1
 80088f0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80088f4:	bf58      	it	pl
 80088f6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80088fa:	6022      	str	r2, [r4, #0]
 80088fc:	f04f 0900 	mov.w	r9, #0
 8008900:	e789      	b.n	8008816 <_scanf_float+0x192>
 8008902:	f04f 0a03 	mov.w	sl, #3
 8008906:	e786      	b.n	8008816 <_scanf_float+0x192>
 8008908:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800890c:	4639      	mov	r1, r7
 800890e:	4640      	mov	r0, r8
 8008910:	4798      	blx	r3
 8008912:	2800      	cmp	r0, #0
 8008914:	f43f aedb 	beq.w	80086ce <_scanf_float+0x4a>
 8008918:	e6e6      	b.n	80086e8 <_scanf_float+0x64>
 800891a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800891e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008922:	463a      	mov	r2, r7
 8008924:	4640      	mov	r0, r8
 8008926:	4798      	blx	r3
 8008928:	6923      	ldr	r3, [r4, #16]
 800892a:	3b01      	subs	r3, #1
 800892c:	6123      	str	r3, [r4, #16]
 800892e:	e6e8      	b.n	8008702 <_scanf_float+0x7e>
 8008930:	1e6b      	subs	r3, r5, #1
 8008932:	2b06      	cmp	r3, #6
 8008934:	d824      	bhi.n	8008980 <_scanf_float+0x2fc>
 8008936:	2d02      	cmp	r5, #2
 8008938:	d836      	bhi.n	80089a8 <_scanf_float+0x324>
 800893a:	9b01      	ldr	r3, [sp, #4]
 800893c:	429e      	cmp	r6, r3
 800893e:	f67f aee4 	bls.w	800870a <_scanf_float+0x86>
 8008942:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008946:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800894a:	463a      	mov	r2, r7
 800894c:	4640      	mov	r0, r8
 800894e:	4798      	blx	r3
 8008950:	6923      	ldr	r3, [r4, #16]
 8008952:	3b01      	subs	r3, #1
 8008954:	6123      	str	r3, [r4, #16]
 8008956:	e7f0      	b.n	800893a <_scanf_float+0x2b6>
 8008958:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800895c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008960:	463a      	mov	r2, r7
 8008962:	4640      	mov	r0, r8
 8008964:	4798      	blx	r3
 8008966:	6923      	ldr	r3, [r4, #16]
 8008968:	3b01      	subs	r3, #1
 800896a:	6123      	str	r3, [r4, #16]
 800896c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008970:	fa5f fa8a 	uxtb.w	sl, sl
 8008974:	f1ba 0f02 	cmp.w	sl, #2
 8008978:	d1ee      	bne.n	8008958 <_scanf_float+0x2d4>
 800897a:	3d03      	subs	r5, #3
 800897c:	b2ed      	uxtb	r5, r5
 800897e:	1b76      	subs	r6, r6, r5
 8008980:	6823      	ldr	r3, [r4, #0]
 8008982:	05da      	lsls	r2, r3, #23
 8008984:	d530      	bpl.n	80089e8 <_scanf_float+0x364>
 8008986:	055b      	lsls	r3, r3, #21
 8008988:	d511      	bpl.n	80089ae <_scanf_float+0x32a>
 800898a:	9b01      	ldr	r3, [sp, #4]
 800898c:	429e      	cmp	r6, r3
 800898e:	f67f aebc 	bls.w	800870a <_scanf_float+0x86>
 8008992:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008996:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800899a:	463a      	mov	r2, r7
 800899c:	4640      	mov	r0, r8
 800899e:	4798      	blx	r3
 80089a0:	6923      	ldr	r3, [r4, #16]
 80089a2:	3b01      	subs	r3, #1
 80089a4:	6123      	str	r3, [r4, #16]
 80089a6:	e7f0      	b.n	800898a <_scanf_float+0x306>
 80089a8:	46aa      	mov	sl, r5
 80089aa:	46b3      	mov	fp, r6
 80089ac:	e7de      	b.n	800896c <_scanf_float+0x2e8>
 80089ae:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80089b2:	6923      	ldr	r3, [r4, #16]
 80089b4:	2965      	cmp	r1, #101	@ 0x65
 80089b6:	f103 33ff 	add.w	r3, r3, #4294967295
 80089ba:	f106 35ff 	add.w	r5, r6, #4294967295
 80089be:	6123      	str	r3, [r4, #16]
 80089c0:	d00c      	beq.n	80089dc <_scanf_float+0x358>
 80089c2:	2945      	cmp	r1, #69	@ 0x45
 80089c4:	d00a      	beq.n	80089dc <_scanf_float+0x358>
 80089c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80089ca:	463a      	mov	r2, r7
 80089cc:	4640      	mov	r0, r8
 80089ce:	4798      	blx	r3
 80089d0:	6923      	ldr	r3, [r4, #16]
 80089d2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80089d6:	3b01      	subs	r3, #1
 80089d8:	1eb5      	subs	r5, r6, #2
 80089da:	6123      	str	r3, [r4, #16]
 80089dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80089e0:	463a      	mov	r2, r7
 80089e2:	4640      	mov	r0, r8
 80089e4:	4798      	blx	r3
 80089e6:	462e      	mov	r6, r5
 80089e8:	6822      	ldr	r2, [r4, #0]
 80089ea:	f012 0210 	ands.w	r2, r2, #16
 80089ee:	d001      	beq.n	80089f4 <_scanf_float+0x370>
 80089f0:	2000      	movs	r0, #0
 80089f2:	e68b      	b.n	800870c <_scanf_float+0x88>
 80089f4:	7032      	strb	r2, [r6, #0]
 80089f6:	6823      	ldr	r3, [r4, #0]
 80089f8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80089fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a00:	d11c      	bne.n	8008a3c <_scanf_float+0x3b8>
 8008a02:	9b02      	ldr	r3, [sp, #8]
 8008a04:	454b      	cmp	r3, r9
 8008a06:	eba3 0209 	sub.w	r2, r3, r9
 8008a0a:	d123      	bne.n	8008a54 <_scanf_float+0x3d0>
 8008a0c:	9901      	ldr	r1, [sp, #4]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	4640      	mov	r0, r8
 8008a12:	f002 fdf5 	bl	800b600 <_strtod_r>
 8008a16:	9b03      	ldr	r3, [sp, #12]
 8008a18:	6821      	ldr	r1, [r4, #0]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f011 0f02 	tst.w	r1, #2
 8008a20:	ec57 6b10 	vmov	r6, r7, d0
 8008a24:	f103 0204 	add.w	r2, r3, #4
 8008a28:	d01f      	beq.n	8008a6a <_scanf_float+0x3e6>
 8008a2a:	9903      	ldr	r1, [sp, #12]
 8008a2c:	600a      	str	r2, [r1, #0]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	e9c3 6700 	strd	r6, r7, [r3]
 8008a34:	68e3      	ldr	r3, [r4, #12]
 8008a36:	3301      	adds	r3, #1
 8008a38:	60e3      	str	r3, [r4, #12]
 8008a3a:	e7d9      	b.n	80089f0 <_scanf_float+0x36c>
 8008a3c:	9b04      	ldr	r3, [sp, #16]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d0e4      	beq.n	8008a0c <_scanf_float+0x388>
 8008a42:	9905      	ldr	r1, [sp, #20]
 8008a44:	230a      	movs	r3, #10
 8008a46:	3101      	adds	r1, #1
 8008a48:	4640      	mov	r0, r8
 8008a4a:	f002 fe59 	bl	800b700 <_strtol_r>
 8008a4e:	9b04      	ldr	r3, [sp, #16]
 8008a50:	9e05      	ldr	r6, [sp, #20]
 8008a52:	1ac2      	subs	r2, r0, r3
 8008a54:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008a58:	429e      	cmp	r6, r3
 8008a5a:	bf28      	it	cs
 8008a5c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008a60:	4910      	ldr	r1, [pc, #64]	@ (8008aa4 <_scanf_float+0x420>)
 8008a62:	4630      	mov	r0, r6
 8008a64:	f000 f988 	bl	8008d78 <siprintf>
 8008a68:	e7d0      	b.n	8008a0c <_scanf_float+0x388>
 8008a6a:	f011 0f04 	tst.w	r1, #4
 8008a6e:	9903      	ldr	r1, [sp, #12]
 8008a70:	600a      	str	r2, [r1, #0]
 8008a72:	d1dc      	bne.n	8008a2e <_scanf_float+0x3aa>
 8008a74:	681d      	ldr	r5, [r3, #0]
 8008a76:	4632      	mov	r2, r6
 8008a78:	463b      	mov	r3, r7
 8008a7a:	4630      	mov	r0, r6
 8008a7c:	4639      	mov	r1, r7
 8008a7e:	f7f8 f855 	bl	8000b2c <__aeabi_dcmpun>
 8008a82:	b128      	cbz	r0, 8008a90 <_scanf_float+0x40c>
 8008a84:	4808      	ldr	r0, [pc, #32]	@ (8008aa8 <_scanf_float+0x424>)
 8008a86:	f000 fb95 	bl	80091b4 <nanf>
 8008a8a:	ed85 0a00 	vstr	s0, [r5]
 8008a8e:	e7d1      	b.n	8008a34 <_scanf_float+0x3b0>
 8008a90:	4630      	mov	r0, r6
 8008a92:	4639      	mov	r1, r7
 8008a94:	f7f8 f8a8 	bl	8000be8 <__aeabi_d2f>
 8008a98:	6028      	str	r0, [r5, #0]
 8008a9a:	e7cb      	b.n	8008a34 <_scanf_float+0x3b0>
 8008a9c:	f04f 0900 	mov.w	r9, #0
 8008aa0:	e629      	b.n	80086f6 <_scanf_float+0x72>
 8008aa2:	bf00      	nop
 8008aa4:	0800d038 	.word	0x0800d038
 8008aa8:	0800d0e9 	.word	0x0800d0e9

08008aac <std>:
 8008aac:	2300      	movs	r3, #0
 8008aae:	b510      	push	{r4, lr}
 8008ab0:	4604      	mov	r4, r0
 8008ab2:	e9c0 3300 	strd	r3, r3, [r0]
 8008ab6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008aba:	6083      	str	r3, [r0, #8]
 8008abc:	8181      	strh	r1, [r0, #12]
 8008abe:	6643      	str	r3, [r0, #100]	@ 0x64
 8008ac0:	81c2      	strh	r2, [r0, #14]
 8008ac2:	6183      	str	r3, [r0, #24]
 8008ac4:	4619      	mov	r1, r3
 8008ac6:	2208      	movs	r2, #8
 8008ac8:	305c      	adds	r0, #92	@ 0x5c
 8008aca:	f000 fa4d 	bl	8008f68 <memset>
 8008ace:	4b0d      	ldr	r3, [pc, #52]	@ (8008b04 <std+0x58>)
 8008ad0:	6263      	str	r3, [r4, #36]	@ 0x24
 8008ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8008b08 <std+0x5c>)
 8008ad4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008ad6:	4b0d      	ldr	r3, [pc, #52]	@ (8008b0c <std+0x60>)
 8008ad8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008ada:	4b0d      	ldr	r3, [pc, #52]	@ (8008b10 <std+0x64>)
 8008adc:	6323      	str	r3, [r4, #48]	@ 0x30
 8008ade:	4b0d      	ldr	r3, [pc, #52]	@ (8008b14 <std+0x68>)
 8008ae0:	6224      	str	r4, [r4, #32]
 8008ae2:	429c      	cmp	r4, r3
 8008ae4:	d006      	beq.n	8008af4 <std+0x48>
 8008ae6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008aea:	4294      	cmp	r4, r2
 8008aec:	d002      	beq.n	8008af4 <std+0x48>
 8008aee:	33d0      	adds	r3, #208	@ 0xd0
 8008af0:	429c      	cmp	r4, r3
 8008af2:	d105      	bne.n	8008b00 <std+0x54>
 8008af4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008af8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008afc:	f000 bb48 	b.w	8009190 <__retarget_lock_init_recursive>
 8008b00:	bd10      	pop	{r4, pc}
 8008b02:	bf00      	nop
 8008b04:	08008db9 	.word	0x08008db9
 8008b08:	08008ddb 	.word	0x08008ddb
 8008b0c:	08008e13 	.word	0x08008e13
 8008b10:	08008e37 	.word	0x08008e37
 8008b14:	20000c94 	.word	0x20000c94

08008b18 <stdio_exit_handler>:
 8008b18:	4a02      	ldr	r2, [pc, #8]	@ (8008b24 <stdio_exit_handler+0xc>)
 8008b1a:	4903      	ldr	r1, [pc, #12]	@ (8008b28 <stdio_exit_handler+0x10>)
 8008b1c:	4803      	ldr	r0, [pc, #12]	@ (8008b2c <stdio_exit_handler+0x14>)
 8008b1e:	f000 b869 	b.w	8008bf4 <_fwalk_sglue>
 8008b22:	bf00      	nop
 8008b24:	20000054 	.word	0x20000054
 8008b28:	0800bd41 	.word	0x0800bd41
 8008b2c:	20000064 	.word	0x20000064

08008b30 <cleanup_stdio>:
 8008b30:	6841      	ldr	r1, [r0, #4]
 8008b32:	4b0c      	ldr	r3, [pc, #48]	@ (8008b64 <cleanup_stdio+0x34>)
 8008b34:	4299      	cmp	r1, r3
 8008b36:	b510      	push	{r4, lr}
 8008b38:	4604      	mov	r4, r0
 8008b3a:	d001      	beq.n	8008b40 <cleanup_stdio+0x10>
 8008b3c:	f003 f900 	bl	800bd40 <_fflush_r>
 8008b40:	68a1      	ldr	r1, [r4, #8]
 8008b42:	4b09      	ldr	r3, [pc, #36]	@ (8008b68 <cleanup_stdio+0x38>)
 8008b44:	4299      	cmp	r1, r3
 8008b46:	d002      	beq.n	8008b4e <cleanup_stdio+0x1e>
 8008b48:	4620      	mov	r0, r4
 8008b4a:	f003 f8f9 	bl	800bd40 <_fflush_r>
 8008b4e:	68e1      	ldr	r1, [r4, #12]
 8008b50:	4b06      	ldr	r3, [pc, #24]	@ (8008b6c <cleanup_stdio+0x3c>)
 8008b52:	4299      	cmp	r1, r3
 8008b54:	d004      	beq.n	8008b60 <cleanup_stdio+0x30>
 8008b56:	4620      	mov	r0, r4
 8008b58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b5c:	f003 b8f0 	b.w	800bd40 <_fflush_r>
 8008b60:	bd10      	pop	{r4, pc}
 8008b62:	bf00      	nop
 8008b64:	20000c94 	.word	0x20000c94
 8008b68:	20000cfc 	.word	0x20000cfc
 8008b6c:	20000d64 	.word	0x20000d64

08008b70 <global_stdio_init.part.0>:
 8008b70:	b510      	push	{r4, lr}
 8008b72:	4b0b      	ldr	r3, [pc, #44]	@ (8008ba0 <global_stdio_init.part.0+0x30>)
 8008b74:	4c0b      	ldr	r4, [pc, #44]	@ (8008ba4 <global_stdio_init.part.0+0x34>)
 8008b76:	4a0c      	ldr	r2, [pc, #48]	@ (8008ba8 <global_stdio_init.part.0+0x38>)
 8008b78:	601a      	str	r2, [r3, #0]
 8008b7a:	4620      	mov	r0, r4
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	2104      	movs	r1, #4
 8008b80:	f7ff ff94 	bl	8008aac <std>
 8008b84:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008b88:	2201      	movs	r2, #1
 8008b8a:	2109      	movs	r1, #9
 8008b8c:	f7ff ff8e 	bl	8008aac <std>
 8008b90:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008b94:	2202      	movs	r2, #2
 8008b96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b9a:	2112      	movs	r1, #18
 8008b9c:	f7ff bf86 	b.w	8008aac <std>
 8008ba0:	20000dcc 	.word	0x20000dcc
 8008ba4:	20000c94 	.word	0x20000c94
 8008ba8:	08008b19 	.word	0x08008b19

08008bac <__sfp_lock_acquire>:
 8008bac:	4801      	ldr	r0, [pc, #4]	@ (8008bb4 <__sfp_lock_acquire+0x8>)
 8008bae:	f000 baf0 	b.w	8009192 <__retarget_lock_acquire_recursive>
 8008bb2:	bf00      	nop
 8008bb4:	20000dd5 	.word	0x20000dd5

08008bb8 <__sfp_lock_release>:
 8008bb8:	4801      	ldr	r0, [pc, #4]	@ (8008bc0 <__sfp_lock_release+0x8>)
 8008bba:	f000 baeb 	b.w	8009194 <__retarget_lock_release_recursive>
 8008bbe:	bf00      	nop
 8008bc0:	20000dd5 	.word	0x20000dd5

08008bc4 <__sinit>:
 8008bc4:	b510      	push	{r4, lr}
 8008bc6:	4604      	mov	r4, r0
 8008bc8:	f7ff fff0 	bl	8008bac <__sfp_lock_acquire>
 8008bcc:	6a23      	ldr	r3, [r4, #32]
 8008bce:	b11b      	cbz	r3, 8008bd8 <__sinit+0x14>
 8008bd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008bd4:	f7ff bff0 	b.w	8008bb8 <__sfp_lock_release>
 8008bd8:	4b04      	ldr	r3, [pc, #16]	@ (8008bec <__sinit+0x28>)
 8008bda:	6223      	str	r3, [r4, #32]
 8008bdc:	4b04      	ldr	r3, [pc, #16]	@ (8008bf0 <__sinit+0x2c>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d1f5      	bne.n	8008bd0 <__sinit+0xc>
 8008be4:	f7ff ffc4 	bl	8008b70 <global_stdio_init.part.0>
 8008be8:	e7f2      	b.n	8008bd0 <__sinit+0xc>
 8008bea:	bf00      	nop
 8008bec:	08008b31 	.word	0x08008b31
 8008bf0:	20000dcc 	.word	0x20000dcc

08008bf4 <_fwalk_sglue>:
 8008bf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bf8:	4607      	mov	r7, r0
 8008bfa:	4688      	mov	r8, r1
 8008bfc:	4614      	mov	r4, r2
 8008bfe:	2600      	movs	r6, #0
 8008c00:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008c04:	f1b9 0901 	subs.w	r9, r9, #1
 8008c08:	d505      	bpl.n	8008c16 <_fwalk_sglue+0x22>
 8008c0a:	6824      	ldr	r4, [r4, #0]
 8008c0c:	2c00      	cmp	r4, #0
 8008c0e:	d1f7      	bne.n	8008c00 <_fwalk_sglue+0xc>
 8008c10:	4630      	mov	r0, r6
 8008c12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c16:	89ab      	ldrh	r3, [r5, #12]
 8008c18:	2b01      	cmp	r3, #1
 8008c1a:	d907      	bls.n	8008c2c <_fwalk_sglue+0x38>
 8008c1c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008c20:	3301      	adds	r3, #1
 8008c22:	d003      	beq.n	8008c2c <_fwalk_sglue+0x38>
 8008c24:	4629      	mov	r1, r5
 8008c26:	4638      	mov	r0, r7
 8008c28:	47c0      	blx	r8
 8008c2a:	4306      	orrs	r6, r0
 8008c2c:	3568      	adds	r5, #104	@ 0x68
 8008c2e:	e7e9      	b.n	8008c04 <_fwalk_sglue+0x10>

08008c30 <iprintf>:
 8008c30:	b40f      	push	{r0, r1, r2, r3}
 8008c32:	b507      	push	{r0, r1, r2, lr}
 8008c34:	4906      	ldr	r1, [pc, #24]	@ (8008c50 <iprintf+0x20>)
 8008c36:	ab04      	add	r3, sp, #16
 8008c38:	6808      	ldr	r0, [r1, #0]
 8008c3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c3e:	6881      	ldr	r1, [r0, #8]
 8008c40:	9301      	str	r3, [sp, #4]
 8008c42:	f002 fee1 	bl	800ba08 <_vfiprintf_r>
 8008c46:	b003      	add	sp, #12
 8008c48:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c4c:	b004      	add	sp, #16
 8008c4e:	4770      	bx	lr
 8008c50:	20000060 	.word	0x20000060

08008c54 <_puts_r>:
 8008c54:	6a03      	ldr	r3, [r0, #32]
 8008c56:	b570      	push	{r4, r5, r6, lr}
 8008c58:	6884      	ldr	r4, [r0, #8]
 8008c5a:	4605      	mov	r5, r0
 8008c5c:	460e      	mov	r6, r1
 8008c5e:	b90b      	cbnz	r3, 8008c64 <_puts_r+0x10>
 8008c60:	f7ff ffb0 	bl	8008bc4 <__sinit>
 8008c64:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008c66:	07db      	lsls	r3, r3, #31
 8008c68:	d405      	bmi.n	8008c76 <_puts_r+0x22>
 8008c6a:	89a3      	ldrh	r3, [r4, #12]
 8008c6c:	0598      	lsls	r0, r3, #22
 8008c6e:	d402      	bmi.n	8008c76 <_puts_r+0x22>
 8008c70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008c72:	f000 fa8e 	bl	8009192 <__retarget_lock_acquire_recursive>
 8008c76:	89a3      	ldrh	r3, [r4, #12]
 8008c78:	0719      	lsls	r1, r3, #28
 8008c7a:	d502      	bpl.n	8008c82 <_puts_r+0x2e>
 8008c7c:	6923      	ldr	r3, [r4, #16]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d135      	bne.n	8008cee <_puts_r+0x9a>
 8008c82:	4621      	mov	r1, r4
 8008c84:	4628      	mov	r0, r5
 8008c86:	f000 f919 	bl	8008ebc <__swsetup_r>
 8008c8a:	b380      	cbz	r0, 8008cee <_puts_r+0x9a>
 8008c8c:	f04f 35ff 	mov.w	r5, #4294967295
 8008c90:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008c92:	07da      	lsls	r2, r3, #31
 8008c94:	d405      	bmi.n	8008ca2 <_puts_r+0x4e>
 8008c96:	89a3      	ldrh	r3, [r4, #12]
 8008c98:	059b      	lsls	r3, r3, #22
 8008c9a:	d402      	bmi.n	8008ca2 <_puts_r+0x4e>
 8008c9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008c9e:	f000 fa79 	bl	8009194 <__retarget_lock_release_recursive>
 8008ca2:	4628      	mov	r0, r5
 8008ca4:	bd70      	pop	{r4, r5, r6, pc}
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	da04      	bge.n	8008cb4 <_puts_r+0x60>
 8008caa:	69a2      	ldr	r2, [r4, #24]
 8008cac:	429a      	cmp	r2, r3
 8008cae:	dc17      	bgt.n	8008ce0 <_puts_r+0x8c>
 8008cb0:	290a      	cmp	r1, #10
 8008cb2:	d015      	beq.n	8008ce0 <_puts_r+0x8c>
 8008cb4:	6823      	ldr	r3, [r4, #0]
 8008cb6:	1c5a      	adds	r2, r3, #1
 8008cb8:	6022      	str	r2, [r4, #0]
 8008cba:	7019      	strb	r1, [r3, #0]
 8008cbc:	68a3      	ldr	r3, [r4, #8]
 8008cbe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008cc2:	3b01      	subs	r3, #1
 8008cc4:	60a3      	str	r3, [r4, #8]
 8008cc6:	2900      	cmp	r1, #0
 8008cc8:	d1ed      	bne.n	8008ca6 <_puts_r+0x52>
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	da11      	bge.n	8008cf2 <_puts_r+0x9e>
 8008cce:	4622      	mov	r2, r4
 8008cd0:	210a      	movs	r1, #10
 8008cd2:	4628      	mov	r0, r5
 8008cd4:	f000 f8b3 	bl	8008e3e <__swbuf_r>
 8008cd8:	3001      	adds	r0, #1
 8008cda:	d0d7      	beq.n	8008c8c <_puts_r+0x38>
 8008cdc:	250a      	movs	r5, #10
 8008cde:	e7d7      	b.n	8008c90 <_puts_r+0x3c>
 8008ce0:	4622      	mov	r2, r4
 8008ce2:	4628      	mov	r0, r5
 8008ce4:	f000 f8ab 	bl	8008e3e <__swbuf_r>
 8008ce8:	3001      	adds	r0, #1
 8008cea:	d1e7      	bne.n	8008cbc <_puts_r+0x68>
 8008cec:	e7ce      	b.n	8008c8c <_puts_r+0x38>
 8008cee:	3e01      	subs	r6, #1
 8008cf0:	e7e4      	b.n	8008cbc <_puts_r+0x68>
 8008cf2:	6823      	ldr	r3, [r4, #0]
 8008cf4:	1c5a      	adds	r2, r3, #1
 8008cf6:	6022      	str	r2, [r4, #0]
 8008cf8:	220a      	movs	r2, #10
 8008cfa:	701a      	strb	r2, [r3, #0]
 8008cfc:	e7ee      	b.n	8008cdc <_puts_r+0x88>
	...

08008d00 <puts>:
 8008d00:	4b02      	ldr	r3, [pc, #8]	@ (8008d0c <puts+0xc>)
 8008d02:	4601      	mov	r1, r0
 8008d04:	6818      	ldr	r0, [r3, #0]
 8008d06:	f7ff bfa5 	b.w	8008c54 <_puts_r>
 8008d0a:	bf00      	nop
 8008d0c:	20000060 	.word	0x20000060

08008d10 <sniprintf>:
 8008d10:	b40c      	push	{r2, r3}
 8008d12:	b530      	push	{r4, r5, lr}
 8008d14:	4b17      	ldr	r3, [pc, #92]	@ (8008d74 <sniprintf+0x64>)
 8008d16:	1e0c      	subs	r4, r1, #0
 8008d18:	681d      	ldr	r5, [r3, #0]
 8008d1a:	b09d      	sub	sp, #116	@ 0x74
 8008d1c:	da08      	bge.n	8008d30 <sniprintf+0x20>
 8008d1e:	238b      	movs	r3, #139	@ 0x8b
 8008d20:	602b      	str	r3, [r5, #0]
 8008d22:	f04f 30ff 	mov.w	r0, #4294967295
 8008d26:	b01d      	add	sp, #116	@ 0x74
 8008d28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008d2c:	b002      	add	sp, #8
 8008d2e:	4770      	bx	lr
 8008d30:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008d34:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008d38:	bf14      	ite	ne
 8008d3a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008d3e:	4623      	moveq	r3, r4
 8008d40:	9304      	str	r3, [sp, #16]
 8008d42:	9307      	str	r3, [sp, #28]
 8008d44:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008d48:	9002      	str	r0, [sp, #8]
 8008d4a:	9006      	str	r0, [sp, #24]
 8008d4c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008d50:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008d52:	ab21      	add	r3, sp, #132	@ 0x84
 8008d54:	a902      	add	r1, sp, #8
 8008d56:	4628      	mov	r0, r5
 8008d58:	9301      	str	r3, [sp, #4]
 8008d5a:	f002 fd2f 	bl	800b7bc <_svfiprintf_r>
 8008d5e:	1c43      	adds	r3, r0, #1
 8008d60:	bfbc      	itt	lt
 8008d62:	238b      	movlt	r3, #139	@ 0x8b
 8008d64:	602b      	strlt	r3, [r5, #0]
 8008d66:	2c00      	cmp	r4, #0
 8008d68:	d0dd      	beq.n	8008d26 <sniprintf+0x16>
 8008d6a:	9b02      	ldr	r3, [sp, #8]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	701a      	strb	r2, [r3, #0]
 8008d70:	e7d9      	b.n	8008d26 <sniprintf+0x16>
 8008d72:	bf00      	nop
 8008d74:	20000060 	.word	0x20000060

08008d78 <siprintf>:
 8008d78:	b40e      	push	{r1, r2, r3}
 8008d7a:	b500      	push	{lr}
 8008d7c:	b09c      	sub	sp, #112	@ 0x70
 8008d7e:	ab1d      	add	r3, sp, #116	@ 0x74
 8008d80:	9002      	str	r0, [sp, #8]
 8008d82:	9006      	str	r0, [sp, #24]
 8008d84:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008d88:	4809      	ldr	r0, [pc, #36]	@ (8008db0 <siprintf+0x38>)
 8008d8a:	9107      	str	r1, [sp, #28]
 8008d8c:	9104      	str	r1, [sp, #16]
 8008d8e:	4909      	ldr	r1, [pc, #36]	@ (8008db4 <siprintf+0x3c>)
 8008d90:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d94:	9105      	str	r1, [sp, #20]
 8008d96:	6800      	ldr	r0, [r0, #0]
 8008d98:	9301      	str	r3, [sp, #4]
 8008d9a:	a902      	add	r1, sp, #8
 8008d9c:	f002 fd0e 	bl	800b7bc <_svfiprintf_r>
 8008da0:	9b02      	ldr	r3, [sp, #8]
 8008da2:	2200      	movs	r2, #0
 8008da4:	701a      	strb	r2, [r3, #0]
 8008da6:	b01c      	add	sp, #112	@ 0x70
 8008da8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008dac:	b003      	add	sp, #12
 8008dae:	4770      	bx	lr
 8008db0:	20000060 	.word	0x20000060
 8008db4:	ffff0208 	.word	0xffff0208

08008db8 <__sread>:
 8008db8:	b510      	push	{r4, lr}
 8008dba:	460c      	mov	r4, r1
 8008dbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dc0:	f000 f998 	bl	80090f4 <_read_r>
 8008dc4:	2800      	cmp	r0, #0
 8008dc6:	bfab      	itete	ge
 8008dc8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008dca:	89a3      	ldrhlt	r3, [r4, #12]
 8008dcc:	181b      	addge	r3, r3, r0
 8008dce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008dd2:	bfac      	ite	ge
 8008dd4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008dd6:	81a3      	strhlt	r3, [r4, #12]
 8008dd8:	bd10      	pop	{r4, pc}

08008dda <__swrite>:
 8008dda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dde:	461f      	mov	r7, r3
 8008de0:	898b      	ldrh	r3, [r1, #12]
 8008de2:	05db      	lsls	r3, r3, #23
 8008de4:	4605      	mov	r5, r0
 8008de6:	460c      	mov	r4, r1
 8008de8:	4616      	mov	r6, r2
 8008dea:	d505      	bpl.n	8008df8 <__swrite+0x1e>
 8008dec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008df0:	2302      	movs	r3, #2
 8008df2:	2200      	movs	r2, #0
 8008df4:	f000 f96c 	bl	80090d0 <_lseek_r>
 8008df8:	89a3      	ldrh	r3, [r4, #12]
 8008dfa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008dfe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008e02:	81a3      	strh	r3, [r4, #12]
 8008e04:	4632      	mov	r2, r6
 8008e06:	463b      	mov	r3, r7
 8008e08:	4628      	mov	r0, r5
 8008e0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e0e:	f000 b983 	b.w	8009118 <_write_r>

08008e12 <__sseek>:
 8008e12:	b510      	push	{r4, lr}
 8008e14:	460c      	mov	r4, r1
 8008e16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e1a:	f000 f959 	bl	80090d0 <_lseek_r>
 8008e1e:	1c43      	adds	r3, r0, #1
 8008e20:	89a3      	ldrh	r3, [r4, #12]
 8008e22:	bf15      	itete	ne
 8008e24:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008e26:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008e2a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008e2e:	81a3      	strheq	r3, [r4, #12]
 8008e30:	bf18      	it	ne
 8008e32:	81a3      	strhne	r3, [r4, #12]
 8008e34:	bd10      	pop	{r4, pc}

08008e36 <__sclose>:
 8008e36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e3a:	f000 b939 	b.w	80090b0 <_close_r>

08008e3e <__swbuf_r>:
 8008e3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e40:	460e      	mov	r6, r1
 8008e42:	4614      	mov	r4, r2
 8008e44:	4605      	mov	r5, r0
 8008e46:	b118      	cbz	r0, 8008e50 <__swbuf_r+0x12>
 8008e48:	6a03      	ldr	r3, [r0, #32]
 8008e4a:	b90b      	cbnz	r3, 8008e50 <__swbuf_r+0x12>
 8008e4c:	f7ff feba 	bl	8008bc4 <__sinit>
 8008e50:	69a3      	ldr	r3, [r4, #24]
 8008e52:	60a3      	str	r3, [r4, #8]
 8008e54:	89a3      	ldrh	r3, [r4, #12]
 8008e56:	071a      	lsls	r2, r3, #28
 8008e58:	d501      	bpl.n	8008e5e <__swbuf_r+0x20>
 8008e5a:	6923      	ldr	r3, [r4, #16]
 8008e5c:	b943      	cbnz	r3, 8008e70 <__swbuf_r+0x32>
 8008e5e:	4621      	mov	r1, r4
 8008e60:	4628      	mov	r0, r5
 8008e62:	f000 f82b 	bl	8008ebc <__swsetup_r>
 8008e66:	b118      	cbz	r0, 8008e70 <__swbuf_r+0x32>
 8008e68:	f04f 37ff 	mov.w	r7, #4294967295
 8008e6c:	4638      	mov	r0, r7
 8008e6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e70:	6823      	ldr	r3, [r4, #0]
 8008e72:	6922      	ldr	r2, [r4, #16]
 8008e74:	1a98      	subs	r0, r3, r2
 8008e76:	6963      	ldr	r3, [r4, #20]
 8008e78:	b2f6      	uxtb	r6, r6
 8008e7a:	4283      	cmp	r3, r0
 8008e7c:	4637      	mov	r7, r6
 8008e7e:	dc05      	bgt.n	8008e8c <__swbuf_r+0x4e>
 8008e80:	4621      	mov	r1, r4
 8008e82:	4628      	mov	r0, r5
 8008e84:	f002 ff5c 	bl	800bd40 <_fflush_r>
 8008e88:	2800      	cmp	r0, #0
 8008e8a:	d1ed      	bne.n	8008e68 <__swbuf_r+0x2a>
 8008e8c:	68a3      	ldr	r3, [r4, #8]
 8008e8e:	3b01      	subs	r3, #1
 8008e90:	60a3      	str	r3, [r4, #8]
 8008e92:	6823      	ldr	r3, [r4, #0]
 8008e94:	1c5a      	adds	r2, r3, #1
 8008e96:	6022      	str	r2, [r4, #0]
 8008e98:	701e      	strb	r6, [r3, #0]
 8008e9a:	6962      	ldr	r2, [r4, #20]
 8008e9c:	1c43      	adds	r3, r0, #1
 8008e9e:	429a      	cmp	r2, r3
 8008ea0:	d004      	beq.n	8008eac <__swbuf_r+0x6e>
 8008ea2:	89a3      	ldrh	r3, [r4, #12]
 8008ea4:	07db      	lsls	r3, r3, #31
 8008ea6:	d5e1      	bpl.n	8008e6c <__swbuf_r+0x2e>
 8008ea8:	2e0a      	cmp	r6, #10
 8008eaa:	d1df      	bne.n	8008e6c <__swbuf_r+0x2e>
 8008eac:	4621      	mov	r1, r4
 8008eae:	4628      	mov	r0, r5
 8008eb0:	f002 ff46 	bl	800bd40 <_fflush_r>
 8008eb4:	2800      	cmp	r0, #0
 8008eb6:	d0d9      	beq.n	8008e6c <__swbuf_r+0x2e>
 8008eb8:	e7d6      	b.n	8008e68 <__swbuf_r+0x2a>
	...

08008ebc <__swsetup_r>:
 8008ebc:	b538      	push	{r3, r4, r5, lr}
 8008ebe:	4b29      	ldr	r3, [pc, #164]	@ (8008f64 <__swsetup_r+0xa8>)
 8008ec0:	4605      	mov	r5, r0
 8008ec2:	6818      	ldr	r0, [r3, #0]
 8008ec4:	460c      	mov	r4, r1
 8008ec6:	b118      	cbz	r0, 8008ed0 <__swsetup_r+0x14>
 8008ec8:	6a03      	ldr	r3, [r0, #32]
 8008eca:	b90b      	cbnz	r3, 8008ed0 <__swsetup_r+0x14>
 8008ecc:	f7ff fe7a 	bl	8008bc4 <__sinit>
 8008ed0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ed4:	0719      	lsls	r1, r3, #28
 8008ed6:	d422      	bmi.n	8008f1e <__swsetup_r+0x62>
 8008ed8:	06da      	lsls	r2, r3, #27
 8008eda:	d407      	bmi.n	8008eec <__swsetup_r+0x30>
 8008edc:	2209      	movs	r2, #9
 8008ede:	602a      	str	r2, [r5, #0]
 8008ee0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ee4:	81a3      	strh	r3, [r4, #12]
 8008ee6:	f04f 30ff 	mov.w	r0, #4294967295
 8008eea:	e033      	b.n	8008f54 <__swsetup_r+0x98>
 8008eec:	0758      	lsls	r0, r3, #29
 8008eee:	d512      	bpl.n	8008f16 <__swsetup_r+0x5a>
 8008ef0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008ef2:	b141      	cbz	r1, 8008f06 <__swsetup_r+0x4a>
 8008ef4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008ef8:	4299      	cmp	r1, r3
 8008efa:	d002      	beq.n	8008f02 <__swsetup_r+0x46>
 8008efc:	4628      	mov	r0, r5
 8008efe:	f000 ffcb 	bl	8009e98 <_free_r>
 8008f02:	2300      	movs	r3, #0
 8008f04:	6363      	str	r3, [r4, #52]	@ 0x34
 8008f06:	89a3      	ldrh	r3, [r4, #12]
 8008f08:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008f0c:	81a3      	strh	r3, [r4, #12]
 8008f0e:	2300      	movs	r3, #0
 8008f10:	6063      	str	r3, [r4, #4]
 8008f12:	6923      	ldr	r3, [r4, #16]
 8008f14:	6023      	str	r3, [r4, #0]
 8008f16:	89a3      	ldrh	r3, [r4, #12]
 8008f18:	f043 0308 	orr.w	r3, r3, #8
 8008f1c:	81a3      	strh	r3, [r4, #12]
 8008f1e:	6923      	ldr	r3, [r4, #16]
 8008f20:	b94b      	cbnz	r3, 8008f36 <__swsetup_r+0x7a>
 8008f22:	89a3      	ldrh	r3, [r4, #12]
 8008f24:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008f28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f2c:	d003      	beq.n	8008f36 <__swsetup_r+0x7a>
 8008f2e:	4621      	mov	r1, r4
 8008f30:	4628      	mov	r0, r5
 8008f32:	f002 ff65 	bl	800be00 <__smakebuf_r>
 8008f36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f3a:	f013 0201 	ands.w	r2, r3, #1
 8008f3e:	d00a      	beq.n	8008f56 <__swsetup_r+0x9a>
 8008f40:	2200      	movs	r2, #0
 8008f42:	60a2      	str	r2, [r4, #8]
 8008f44:	6962      	ldr	r2, [r4, #20]
 8008f46:	4252      	negs	r2, r2
 8008f48:	61a2      	str	r2, [r4, #24]
 8008f4a:	6922      	ldr	r2, [r4, #16]
 8008f4c:	b942      	cbnz	r2, 8008f60 <__swsetup_r+0xa4>
 8008f4e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008f52:	d1c5      	bne.n	8008ee0 <__swsetup_r+0x24>
 8008f54:	bd38      	pop	{r3, r4, r5, pc}
 8008f56:	0799      	lsls	r1, r3, #30
 8008f58:	bf58      	it	pl
 8008f5a:	6962      	ldrpl	r2, [r4, #20]
 8008f5c:	60a2      	str	r2, [r4, #8]
 8008f5e:	e7f4      	b.n	8008f4a <__swsetup_r+0x8e>
 8008f60:	2000      	movs	r0, #0
 8008f62:	e7f7      	b.n	8008f54 <__swsetup_r+0x98>
 8008f64:	20000060 	.word	0x20000060

08008f68 <memset>:
 8008f68:	4402      	add	r2, r0
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d100      	bne.n	8008f72 <memset+0xa>
 8008f70:	4770      	bx	lr
 8008f72:	f803 1b01 	strb.w	r1, [r3], #1
 8008f76:	e7f9      	b.n	8008f6c <memset+0x4>

08008f78 <strncmp>:
 8008f78:	b510      	push	{r4, lr}
 8008f7a:	b16a      	cbz	r2, 8008f98 <strncmp+0x20>
 8008f7c:	3901      	subs	r1, #1
 8008f7e:	1884      	adds	r4, r0, r2
 8008f80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f84:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008f88:	429a      	cmp	r2, r3
 8008f8a:	d103      	bne.n	8008f94 <strncmp+0x1c>
 8008f8c:	42a0      	cmp	r0, r4
 8008f8e:	d001      	beq.n	8008f94 <strncmp+0x1c>
 8008f90:	2a00      	cmp	r2, #0
 8008f92:	d1f5      	bne.n	8008f80 <strncmp+0x8>
 8008f94:	1ad0      	subs	r0, r2, r3
 8008f96:	bd10      	pop	{r4, pc}
 8008f98:	4610      	mov	r0, r2
 8008f9a:	e7fc      	b.n	8008f96 <strncmp+0x1e>

08008f9c <strncpy>:
 8008f9c:	b510      	push	{r4, lr}
 8008f9e:	3901      	subs	r1, #1
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	b132      	cbz	r2, 8008fb2 <strncpy+0x16>
 8008fa4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008fa8:	f803 4b01 	strb.w	r4, [r3], #1
 8008fac:	3a01      	subs	r2, #1
 8008fae:	2c00      	cmp	r4, #0
 8008fb0:	d1f7      	bne.n	8008fa2 <strncpy+0x6>
 8008fb2:	441a      	add	r2, r3
 8008fb4:	2100      	movs	r1, #0
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	d100      	bne.n	8008fbc <strncpy+0x20>
 8008fba:	bd10      	pop	{r4, pc}
 8008fbc:	f803 1b01 	strb.w	r1, [r3], #1
 8008fc0:	e7f9      	b.n	8008fb6 <strncpy+0x1a>
	...

08008fc4 <strtok>:
 8008fc4:	4b16      	ldr	r3, [pc, #88]	@ (8009020 <strtok+0x5c>)
 8008fc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fca:	681f      	ldr	r7, [r3, #0]
 8008fcc:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8008fce:	4605      	mov	r5, r0
 8008fd0:	460e      	mov	r6, r1
 8008fd2:	b9ec      	cbnz	r4, 8009010 <strtok+0x4c>
 8008fd4:	2050      	movs	r0, #80	@ 0x50
 8008fd6:	f000 ffa9 	bl	8009f2c <malloc>
 8008fda:	4602      	mov	r2, r0
 8008fdc:	6478      	str	r0, [r7, #68]	@ 0x44
 8008fde:	b920      	cbnz	r0, 8008fea <strtok+0x26>
 8008fe0:	4b10      	ldr	r3, [pc, #64]	@ (8009024 <strtok+0x60>)
 8008fe2:	4811      	ldr	r0, [pc, #68]	@ (8009028 <strtok+0x64>)
 8008fe4:	215b      	movs	r1, #91	@ 0x5b
 8008fe6:	f000 f8eb 	bl	80091c0 <__assert_func>
 8008fea:	e9c0 4400 	strd	r4, r4, [r0]
 8008fee:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8008ff2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008ff6:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8008ffa:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8008ffe:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8009002:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8009006:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800900a:	6184      	str	r4, [r0, #24]
 800900c:	7704      	strb	r4, [r0, #28]
 800900e:	6244      	str	r4, [r0, #36]	@ 0x24
 8009010:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009012:	4631      	mov	r1, r6
 8009014:	4628      	mov	r0, r5
 8009016:	2301      	movs	r3, #1
 8009018:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800901c:	f000 b806 	b.w	800902c <__strtok_r>
 8009020:	20000060 	.word	0x20000060
 8009024:	0800d03d 	.word	0x0800d03d
 8009028:	0800d054 	.word	0x0800d054

0800902c <__strtok_r>:
 800902c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800902e:	4604      	mov	r4, r0
 8009030:	b908      	cbnz	r0, 8009036 <__strtok_r+0xa>
 8009032:	6814      	ldr	r4, [r2, #0]
 8009034:	b144      	cbz	r4, 8009048 <__strtok_r+0x1c>
 8009036:	4620      	mov	r0, r4
 8009038:	f814 5b01 	ldrb.w	r5, [r4], #1
 800903c:	460f      	mov	r7, r1
 800903e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8009042:	b91e      	cbnz	r6, 800904c <__strtok_r+0x20>
 8009044:	b965      	cbnz	r5, 8009060 <__strtok_r+0x34>
 8009046:	6015      	str	r5, [r2, #0]
 8009048:	2000      	movs	r0, #0
 800904a:	e005      	b.n	8009058 <__strtok_r+0x2c>
 800904c:	42b5      	cmp	r5, r6
 800904e:	d1f6      	bne.n	800903e <__strtok_r+0x12>
 8009050:	2b00      	cmp	r3, #0
 8009052:	d1f0      	bne.n	8009036 <__strtok_r+0xa>
 8009054:	6014      	str	r4, [r2, #0]
 8009056:	7003      	strb	r3, [r0, #0]
 8009058:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800905a:	461c      	mov	r4, r3
 800905c:	e00c      	b.n	8009078 <__strtok_r+0x4c>
 800905e:	b915      	cbnz	r5, 8009066 <__strtok_r+0x3a>
 8009060:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009064:	460e      	mov	r6, r1
 8009066:	f816 5b01 	ldrb.w	r5, [r6], #1
 800906a:	42ab      	cmp	r3, r5
 800906c:	d1f7      	bne.n	800905e <__strtok_r+0x32>
 800906e:	2b00      	cmp	r3, #0
 8009070:	d0f3      	beq.n	800905a <__strtok_r+0x2e>
 8009072:	2300      	movs	r3, #0
 8009074:	f804 3c01 	strb.w	r3, [r4, #-1]
 8009078:	6014      	str	r4, [r2, #0]
 800907a:	e7ed      	b.n	8009058 <__strtok_r+0x2c>

0800907c <strstr>:
 800907c:	780a      	ldrb	r2, [r1, #0]
 800907e:	b570      	push	{r4, r5, r6, lr}
 8009080:	b96a      	cbnz	r2, 800909e <strstr+0x22>
 8009082:	bd70      	pop	{r4, r5, r6, pc}
 8009084:	429a      	cmp	r2, r3
 8009086:	d109      	bne.n	800909c <strstr+0x20>
 8009088:	460c      	mov	r4, r1
 800908a:	4605      	mov	r5, r0
 800908c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8009090:	2b00      	cmp	r3, #0
 8009092:	d0f6      	beq.n	8009082 <strstr+0x6>
 8009094:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8009098:	429e      	cmp	r6, r3
 800909a:	d0f7      	beq.n	800908c <strstr+0x10>
 800909c:	3001      	adds	r0, #1
 800909e:	7803      	ldrb	r3, [r0, #0]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d1ef      	bne.n	8009084 <strstr+0x8>
 80090a4:	4618      	mov	r0, r3
 80090a6:	e7ec      	b.n	8009082 <strstr+0x6>

080090a8 <_localeconv_r>:
 80090a8:	4800      	ldr	r0, [pc, #0]	@ (80090ac <_localeconv_r+0x4>)
 80090aa:	4770      	bx	lr
 80090ac:	200001a0 	.word	0x200001a0

080090b0 <_close_r>:
 80090b0:	b538      	push	{r3, r4, r5, lr}
 80090b2:	4d06      	ldr	r5, [pc, #24]	@ (80090cc <_close_r+0x1c>)
 80090b4:	2300      	movs	r3, #0
 80090b6:	4604      	mov	r4, r0
 80090b8:	4608      	mov	r0, r1
 80090ba:	602b      	str	r3, [r5, #0]
 80090bc:	f7f8 fab9 	bl	8001632 <_close>
 80090c0:	1c43      	adds	r3, r0, #1
 80090c2:	d102      	bne.n	80090ca <_close_r+0x1a>
 80090c4:	682b      	ldr	r3, [r5, #0]
 80090c6:	b103      	cbz	r3, 80090ca <_close_r+0x1a>
 80090c8:	6023      	str	r3, [r4, #0]
 80090ca:	bd38      	pop	{r3, r4, r5, pc}
 80090cc:	20000dd0 	.word	0x20000dd0

080090d0 <_lseek_r>:
 80090d0:	b538      	push	{r3, r4, r5, lr}
 80090d2:	4d07      	ldr	r5, [pc, #28]	@ (80090f0 <_lseek_r+0x20>)
 80090d4:	4604      	mov	r4, r0
 80090d6:	4608      	mov	r0, r1
 80090d8:	4611      	mov	r1, r2
 80090da:	2200      	movs	r2, #0
 80090dc:	602a      	str	r2, [r5, #0]
 80090de:	461a      	mov	r2, r3
 80090e0:	f7f8 face 	bl	8001680 <_lseek>
 80090e4:	1c43      	adds	r3, r0, #1
 80090e6:	d102      	bne.n	80090ee <_lseek_r+0x1e>
 80090e8:	682b      	ldr	r3, [r5, #0]
 80090ea:	b103      	cbz	r3, 80090ee <_lseek_r+0x1e>
 80090ec:	6023      	str	r3, [r4, #0]
 80090ee:	bd38      	pop	{r3, r4, r5, pc}
 80090f0:	20000dd0 	.word	0x20000dd0

080090f4 <_read_r>:
 80090f4:	b538      	push	{r3, r4, r5, lr}
 80090f6:	4d07      	ldr	r5, [pc, #28]	@ (8009114 <_read_r+0x20>)
 80090f8:	4604      	mov	r4, r0
 80090fa:	4608      	mov	r0, r1
 80090fc:	4611      	mov	r1, r2
 80090fe:	2200      	movs	r2, #0
 8009100:	602a      	str	r2, [r5, #0]
 8009102:	461a      	mov	r2, r3
 8009104:	f7f8 fa5c 	bl	80015c0 <_read>
 8009108:	1c43      	adds	r3, r0, #1
 800910a:	d102      	bne.n	8009112 <_read_r+0x1e>
 800910c:	682b      	ldr	r3, [r5, #0]
 800910e:	b103      	cbz	r3, 8009112 <_read_r+0x1e>
 8009110:	6023      	str	r3, [r4, #0]
 8009112:	bd38      	pop	{r3, r4, r5, pc}
 8009114:	20000dd0 	.word	0x20000dd0

08009118 <_write_r>:
 8009118:	b538      	push	{r3, r4, r5, lr}
 800911a:	4d07      	ldr	r5, [pc, #28]	@ (8009138 <_write_r+0x20>)
 800911c:	4604      	mov	r4, r0
 800911e:	4608      	mov	r0, r1
 8009120:	4611      	mov	r1, r2
 8009122:	2200      	movs	r2, #0
 8009124:	602a      	str	r2, [r5, #0]
 8009126:	461a      	mov	r2, r3
 8009128:	f7f8 fa67 	bl	80015fa <_write>
 800912c:	1c43      	adds	r3, r0, #1
 800912e:	d102      	bne.n	8009136 <_write_r+0x1e>
 8009130:	682b      	ldr	r3, [r5, #0]
 8009132:	b103      	cbz	r3, 8009136 <_write_r+0x1e>
 8009134:	6023      	str	r3, [r4, #0]
 8009136:	bd38      	pop	{r3, r4, r5, pc}
 8009138:	20000dd0 	.word	0x20000dd0

0800913c <__errno>:
 800913c:	4b01      	ldr	r3, [pc, #4]	@ (8009144 <__errno+0x8>)
 800913e:	6818      	ldr	r0, [r3, #0]
 8009140:	4770      	bx	lr
 8009142:	bf00      	nop
 8009144:	20000060 	.word	0x20000060

08009148 <__libc_init_array>:
 8009148:	b570      	push	{r4, r5, r6, lr}
 800914a:	4d0d      	ldr	r5, [pc, #52]	@ (8009180 <__libc_init_array+0x38>)
 800914c:	4c0d      	ldr	r4, [pc, #52]	@ (8009184 <__libc_init_array+0x3c>)
 800914e:	1b64      	subs	r4, r4, r5
 8009150:	10a4      	asrs	r4, r4, #2
 8009152:	2600      	movs	r6, #0
 8009154:	42a6      	cmp	r6, r4
 8009156:	d109      	bne.n	800916c <__libc_init_array+0x24>
 8009158:	4d0b      	ldr	r5, [pc, #44]	@ (8009188 <__libc_init_array+0x40>)
 800915a:	4c0c      	ldr	r4, [pc, #48]	@ (800918c <__libc_init_array+0x44>)
 800915c:	f003 facc 	bl	800c6f8 <_init>
 8009160:	1b64      	subs	r4, r4, r5
 8009162:	10a4      	asrs	r4, r4, #2
 8009164:	2600      	movs	r6, #0
 8009166:	42a6      	cmp	r6, r4
 8009168:	d105      	bne.n	8009176 <__libc_init_array+0x2e>
 800916a:	bd70      	pop	{r4, r5, r6, pc}
 800916c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009170:	4798      	blx	r3
 8009172:	3601      	adds	r6, #1
 8009174:	e7ee      	b.n	8009154 <__libc_init_array+0xc>
 8009176:	f855 3b04 	ldr.w	r3, [r5], #4
 800917a:	4798      	blx	r3
 800917c:	3601      	adds	r6, #1
 800917e:	e7f2      	b.n	8009166 <__libc_init_array+0x1e>
 8009180:	0800d494 	.word	0x0800d494
 8009184:	0800d494 	.word	0x0800d494
 8009188:	0800d494 	.word	0x0800d494
 800918c:	0800d498 	.word	0x0800d498

08009190 <__retarget_lock_init_recursive>:
 8009190:	4770      	bx	lr

08009192 <__retarget_lock_acquire_recursive>:
 8009192:	4770      	bx	lr

08009194 <__retarget_lock_release_recursive>:
 8009194:	4770      	bx	lr

08009196 <memcpy>:
 8009196:	440a      	add	r2, r1
 8009198:	4291      	cmp	r1, r2
 800919a:	f100 33ff 	add.w	r3, r0, #4294967295
 800919e:	d100      	bne.n	80091a2 <memcpy+0xc>
 80091a0:	4770      	bx	lr
 80091a2:	b510      	push	{r4, lr}
 80091a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80091ac:	4291      	cmp	r1, r2
 80091ae:	d1f9      	bne.n	80091a4 <memcpy+0xe>
 80091b0:	bd10      	pop	{r4, pc}
	...

080091b4 <nanf>:
 80091b4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80091bc <nanf+0x8>
 80091b8:	4770      	bx	lr
 80091ba:	bf00      	nop
 80091bc:	7fc00000 	.word	0x7fc00000

080091c0 <__assert_func>:
 80091c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80091c2:	4614      	mov	r4, r2
 80091c4:	461a      	mov	r2, r3
 80091c6:	4b09      	ldr	r3, [pc, #36]	@ (80091ec <__assert_func+0x2c>)
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	4605      	mov	r5, r0
 80091cc:	68d8      	ldr	r0, [r3, #12]
 80091ce:	b954      	cbnz	r4, 80091e6 <__assert_func+0x26>
 80091d0:	4b07      	ldr	r3, [pc, #28]	@ (80091f0 <__assert_func+0x30>)
 80091d2:	461c      	mov	r4, r3
 80091d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80091d8:	9100      	str	r1, [sp, #0]
 80091da:	462b      	mov	r3, r5
 80091dc:	4905      	ldr	r1, [pc, #20]	@ (80091f4 <__assert_func+0x34>)
 80091de:	f002 fdd7 	bl	800bd90 <fiprintf>
 80091e2:	f002 fe9d 	bl	800bf20 <abort>
 80091e6:	4b04      	ldr	r3, [pc, #16]	@ (80091f8 <__assert_func+0x38>)
 80091e8:	e7f4      	b.n	80091d4 <__assert_func+0x14>
 80091ea:	bf00      	nop
 80091ec:	20000060 	.word	0x20000060
 80091f0:	0800d0e9 	.word	0x0800d0e9
 80091f4:	0800d0bb 	.word	0x0800d0bb
 80091f8:	0800d0ae 	.word	0x0800d0ae

080091fc <quorem>:
 80091fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009200:	6903      	ldr	r3, [r0, #16]
 8009202:	690c      	ldr	r4, [r1, #16]
 8009204:	42a3      	cmp	r3, r4
 8009206:	4607      	mov	r7, r0
 8009208:	db7e      	blt.n	8009308 <quorem+0x10c>
 800920a:	3c01      	subs	r4, #1
 800920c:	f101 0814 	add.w	r8, r1, #20
 8009210:	00a3      	lsls	r3, r4, #2
 8009212:	f100 0514 	add.w	r5, r0, #20
 8009216:	9300      	str	r3, [sp, #0]
 8009218:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800921c:	9301      	str	r3, [sp, #4]
 800921e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009222:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009226:	3301      	adds	r3, #1
 8009228:	429a      	cmp	r2, r3
 800922a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800922e:	fbb2 f6f3 	udiv	r6, r2, r3
 8009232:	d32e      	bcc.n	8009292 <quorem+0x96>
 8009234:	f04f 0a00 	mov.w	sl, #0
 8009238:	46c4      	mov	ip, r8
 800923a:	46ae      	mov	lr, r5
 800923c:	46d3      	mov	fp, sl
 800923e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009242:	b298      	uxth	r0, r3
 8009244:	fb06 a000 	mla	r0, r6, r0, sl
 8009248:	0c02      	lsrs	r2, r0, #16
 800924a:	0c1b      	lsrs	r3, r3, #16
 800924c:	fb06 2303 	mla	r3, r6, r3, r2
 8009250:	f8de 2000 	ldr.w	r2, [lr]
 8009254:	b280      	uxth	r0, r0
 8009256:	b292      	uxth	r2, r2
 8009258:	1a12      	subs	r2, r2, r0
 800925a:	445a      	add	r2, fp
 800925c:	f8de 0000 	ldr.w	r0, [lr]
 8009260:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009264:	b29b      	uxth	r3, r3
 8009266:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800926a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800926e:	b292      	uxth	r2, r2
 8009270:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009274:	45e1      	cmp	r9, ip
 8009276:	f84e 2b04 	str.w	r2, [lr], #4
 800927a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800927e:	d2de      	bcs.n	800923e <quorem+0x42>
 8009280:	9b00      	ldr	r3, [sp, #0]
 8009282:	58eb      	ldr	r3, [r5, r3]
 8009284:	b92b      	cbnz	r3, 8009292 <quorem+0x96>
 8009286:	9b01      	ldr	r3, [sp, #4]
 8009288:	3b04      	subs	r3, #4
 800928a:	429d      	cmp	r5, r3
 800928c:	461a      	mov	r2, r3
 800928e:	d32f      	bcc.n	80092f0 <quorem+0xf4>
 8009290:	613c      	str	r4, [r7, #16]
 8009292:	4638      	mov	r0, r7
 8009294:	f001 f9c4 	bl	800a620 <__mcmp>
 8009298:	2800      	cmp	r0, #0
 800929a:	db25      	blt.n	80092e8 <quorem+0xec>
 800929c:	4629      	mov	r1, r5
 800929e:	2000      	movs	r0, #0
 80092a0:	f858 2b04 	ldr.w	r2, [r8], #4
 80092a4:	f8d1 c000 	ldr.w	ip, [r1]
 80092a8:	fa1f fe82 	uxth.w	lr, r2
 80092ac:	fa1f f38c 	uxth.w	r3, ip
 80092b0:	eba3 030e 	sub.w	r3, r3, lr
 80092b4:	4403      	add	r3, r0
 80092b6:	0c12      	lsrs	r2, r2, #16
 80092b8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80092bc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80092c0:	b29b      	uxth	r3, r3
 80092c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80092c6:	45c1      	cmp	r9, r8
 80092c8:	f841 3b04 	str.w	r3, [r1], #4
 80092cc:	ea4f 4022 	mov.w	r0, r2, asr #16
 80092d0:	d2e6      	bcs.n	80092a0 <quorem+0xa4>
 80092d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80092d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80092da:	b922      	cbnz	r2, 80092e6 <quorem+0xea>
 80092dc:	3b04      	subs	r3, #4
 80092de:	429d      	cmp	r5, r3
 80092e0:	461a      	mov	r2, r3
 80092e2:	d30b      	bcc.n	80092fc <quorem+0x100>
 80092e4:	613c      	str	r4, [r7, #16]
 80092e6:	3601      	adds	r6, #1
 80092e8:	4630      	mov	r0, r6
 80092ea:	b003      	add	sp, #12
 80092ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092f0:	6812      	ldr	r2, [r2, #0]
 80092f2:	3b04      	subs	r3, #4
 80092f4:	2a00      	cmp	r2, #0
 80092f6:	d1cb      	bne.n	8009290 <quorem+0x94>
 80092f8:	3c01      	subs	r4, #1
 80092fa:	e7c6      	b.n	800928a <quorem+0x8e>
 80092fc:	6812      	ldr	r2, [r2, #0]
 80092fe:	3b04      	subs	r3, #4
 8009300:	2a00      	cmp	r2, #0
 8009302:	d1ef      	bne.n	80092e4 <quorem+0xe8>
 8009304:	3c01      	subs	r4, #1
 8009306:	e7ea      	b.n	80092de <quorem+0xe2>
 8009308:	2000      	movs	r0, #0
 800930a:	e7ee      	b.n	80092ea <quorem+0xee>
 800930c:	0000      	movs	r0, r0
	...

08009310 <_dtoa_r>:
 8009310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009314:	69c7      	ldr	r7, [r0, #28]
 8009316:	b099      	sub	sp, #100	@ 0x64
 8009318:	ed8d 0b02 	vstr	d0, [sp, #8]
 800931c:	ec55 4b10 	vmov	r4, r5, d0
 8009320:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009322:	9109      	str	r1, [sp, #36]	@ 0x24
 8009324:	4683      	mov	fp, r0
 8009326:	920e      	str	r2, [sp, #56]	@ 0x38
 8009328:	9313      	str	r3, [sp, #76]	@ 0x4c
 800932a:	b97f      	cbnz	r7, 800934c <_dtoa_r+0x3c>
 800932c:	2010      	movs	r0, #16
 800932e:	f000 fdfd 	bl	8009f2c <malloc>
 8009332:	4602      	mov	r2, r0
 8009334:	f8cb 001c 	str.w	r0, [fp, #28]
 8009338:	b920      	cbnz	r0, 8009344 <_dtoa_r+0x34>
 800933a:	4ba7      	ldr	r3, [pc, #668]	@ (80095d8 <_dtoa_r+0x2c8>)
 800933c:	21ef      	movs	r1, #239	@ 0xef
 800933e:	48a7      	ldr	r0, [pc, #668]	@ (80095dc <_dtoa_r+0x2cc>)
 8009340:	f7ff ff3e 	bl	80091c0 <__assert_func>
 8009344:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009348:	6007      	str	r7, [r0, #0]
 800934a:	60c7      	str	r7, [r0, #12]
 800934c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009350:	6819      	ldr	r1, [r3, #0]
 8009352:	b159      	cbz	r1, 800936c <_dtoa_r+0x5c>
 8009354:	685a      	ldr	r2, [r3, #4]
 8009356:	604a      	str	r2, [r1, #4]
 8009358:	2301      	movs	r3, #1
 800935a:	4093      	lsls	r3, r2
 800935c:	608b      	str	r3, [r1, #8]
 800935e:	4658      	mov	r0, fp
 8009360:	f000 feda 	bl	800a118 <_Bfree>
 8009364:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009368:	2200      	movs	r2, #0
 800936a:	601a      	str	r2, [r3, #0]
 800936c:	1e2b      	subs	r3, r5, #0
 800936e:	bfb9      	ittee	lt
 8009370:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009374:	9303      	strlt	r3, [sp, #12]
 8009376:	2300      	movge	r3, #0
 8009378:	6033      	strge	r3, [r6, #0]
 800937a:	9f03      	ldr	r7, [sp, #12]
 800937c:	4b98      	ldr	r3, [pc, #608]	@ (80095e0 <_dtoa_r+0x2d0>)
 800937e:	bfbc      	itt	lt
 8009380:	2201      	movlt	r2, #1
 8009382:	6032      	strlt	r2, [r6, #0]
 8009384:	43bb      	bics	r3, r7
 8009386:	d112      	bne.n	80093ae <_dtoa_r+0x9e>
 8009388:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800938a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800938e:	6013      	str	r3, [r2, #0]
 8009390:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009394:	4323      	orrs	r3, r4
 8009396:	f000 854d 	beq.w	8009e34 <_dtoa_r+0xb24>
 800939a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800939c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80095f4 <_dtoa_r+0x2e4>
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	f000 854f 	beq.w	8009e44 <_dtoa_r+0xb34>
 80093a6:	f10a 0303 	add.w	r3, sl, #3
 80093aa:	f000 bd49 	b.w	8009e40 <_dtoa_r+0xb30>
 80093ae:	ed9d 7b02 	vldr	d7, [sp, #8]
 80093b2:	2200      	movs	r2, #0
 80093b4:	ec51 0b17 	vmov	r0, r1, d7
 80093b8:	2300      	movs	r3, #0
 80093ba:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80093be:	f7f7 fb83 	bl	8000ac8 <__aeabi_dcmpeq>
 80093c2:	4680      	mov	r8, r0
 80093c4:	b158      	cbz	r0, 80093de <_dtoa_r+0xce>
 80093c6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80093c8:	2301      	movs	r3, #1
 80093ca:	6013      	str	r3, [r2, #0]
 80093cc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80093ce:	b113      	cbz	r3, 80093d6 <_dtoa_r+0xc6>
 80093d0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80093d2:	4b84      	ldr	r3, [pc, #528]	@ (80095e4 <_dtoa_r+0x2d4>)
 80093d4:	6013      	str	r3, [r2, #0]
 80093d6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80095f8 <_dtoa_r+0x2e8>
 80093da:	f000 bd33 	b.w	8009e44 <_dtoa_r+0xb34>
 80093de:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80093e2:	aa16      	add	r2, sp, #88	@ 0x58
 80093e4:	a917      	add	r1, sp, #92	@ 0x5c
 80093e6:	4658      	mov	r0, fp
 80093e8:	f001 fa3a 	bl	800a860 <__d2b>
 80093ec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80093f0:	4681      	mov	r9, r0
 80093f2:	2e00      	cmp	r6, #0
 80093f4:	d077      	beq.n	80094e6 <_dtoa_r+0x1d6>
 80093f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80093f8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80093fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009400:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009404:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009408:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800940c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009410:	4619      	mov	r1, r3
 8009412:	2200      	movs	r2, #0
 8009414:	4b74      	ldr	r3, [pc, #464]	@ (80095e8 <_dtoa_r+0x2d8>)
 8009416:	f7f6 ff37 	bl	8000288 <__aeabi_dsub>
 800941a:	a369      	add	r3, pc, #420	@ (adr r3, 80095c0 <_dtoa_r+0x2b0>)
 800941c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009420:	f7f7 f8ea 	bl	80005f8 <__aeabi_dmul>
 8009424:	a368      	add	r3, pc, #416	@ (adr r3, 80095c8 <_dtoa_r+0x2b8>)
 8009426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800942a:	f7f6 ff2f 	bl	800028c <__adddf3>
 800942e:	4604      	mov	r4, r0
 8009430:	4630      	mov	r0, r6
 8009432:	460d      	mov	r5, r1
 8009434:	f7f7 f876 	bl	8000524 <__aeabi_i2d>
 8009438:	a365      	add	r3, pc, #404	@ (adr r3, 80095d0 <_dtoa_r+0x2c0>)
 800943a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800943e:	f7f7 f8db 	bl	80005f8 <__aeabi_dmul>
 8009442:	4602      	mov	r2, r0
 8009444:	460b      	mov	r3, r1
 8009446:	4620      	mov	r0, r4
 8009448:	4629      	mov	r1, r5
 800944a:	f7f6 ff1f 	bl	800028c <__adddf3>
 800944e:	4604      	mov	r4, r0
 8009450:	460d      	mov	r5, r1
 8009452:	f7f7 fb81 	bl	8000b58 <__aeabi_d2iz>
 8009456:	2200      	movs	r2, #0
 8009458:	4607      	mov	r7, r0
 800945a:	2300      	movs	r3, #0
 800945c:	4620      	mov	r0, r4
 800945e:	4629      	mov	r1, r5
 8009460:	f7f7 fb3c 	bl	8000adc <__aeabi_dcmplt>
 8009464:	b140      	cbz	r0, 8009478 <_dtoa_r+0x168>
 8009466:	4638      	mov	r0, r7
 8009468:	f7f7 f85c 	bl	8000524 <__aeabi_i2d>
 800946c:	4622      	mov	r2, r4
 800946e:	462b      	mov	r3, r5
 8009470:	f7f7 fb2a 	bl	8000ac8 <__aeabi_dcmpeq>
 8009474:	b900      	cbnz	r0, 8009478 <_dtoa_r+0x168>
 8009476:	3f01      	subs	r7, #1
 8009478:	2f16      	cmp	r7, #22
 800947a:	d851      	bhi.n	8009520 <_dtoa_r+0x210>
 800947c:	4b5b      	ldr	r3, [pc, #364]	@ (80095ec <_dtoa_r+0x2dc>)
 800947e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009486:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800948a:	f7f7 fb27 	bl	8000adc <__aeabi_dcmplt>
 800948e:	2800      	cmp	r0, #0
 8009490:	d048      	beq.n	8009524 <_dtoa_r+0x214>
 8009492:	3f01      	subs	r7, #1
 8009494:	2300      	movs	r3, #0
 8009496:	9312      	str	r3, [sp, #72]	@ 0x48
 8009498:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800949a:	1b9b      	subs	r3, r3, r6
 800949c:	1e5a      	subs	r2, r3, #1
 800949e:	bf44      	itt	mi
 80094a0:	f1c3 0801 	rsbmi	r8, r3, #1
 80094a4:	2300      	movmi	r3, #0
 80094a6:	9208      	str	r2, [sp, #32]
 80094a8:	bf54      	ite	pl
 80094aa:	f04f 0800 	movpl.w	r8, #0
 80094ae:	9308      	strmi	r3, [sp, #32]
 80094b0:	2f00      	cmp	r7, #0
 80094b2:	db39      	blt.n	8009528 <_dtoa_r+0x218>
 80094b4:	9b08      	ldr	r3, [sp, #32]
 80094b6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80094b8:	443b      	add	r3, r7
 80094ba:	9308      	str	r3, [sp, #32]
 80094bc:	2300      	movs	r3, #0
 80094be:	930a      	str	r3, [sp, #40]	@ 0x28
 80094c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094c2:	2b09      	cmp	r3, #9
 80094c4:	d864      	bhi.n	8009590 <_dtoa_r+0x280>
 80094c6:	2b05      	cmp	r3, #5
 80094c8:	bfc4      	itt	gt
 80094ca:	3b04      	subgt	r3, #4
 80094cc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80094ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094d0:	f1a3 0302 	sub.w	r3, r3, #2
 80094d4:	bfcc      	ite	gt
 80094d6:	2400      	movgt	r4, #0
 80094d8:	2401      	movle	r4, #1
 80094da:	2b03      	cmp	r3, #3
 80094dc:	d863      	bhi.n	80095a6 <_dtoa_r+0x296>
 80094de:	e8df f003 	tbb	[pc, r3]
 80094e2:	372a      	.short	0x372a
 80094e4:	5535      	.short	0x5535
 80094e6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80094ea:	441e      	add	r6, r3
 80094ec:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80094f0:	2b20      	cmp	r3, #32
 80094f2:	bfc1      	itttt	gt
 80094f4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80094f8:	409f      	lslgt	r7, r3
 80094fa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80094fe:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009502:	bfd6      	itet	le
 8009504:	f1c3 0320 	rsble	r3, r3, #32
 8009508:	ea47 0003 	orrgt.w	r0, r7, r3
 800950c:	fa04 f003 	lslle.w	r0, r4, r3
 8009510:	f7f6 fff8 	bl	8000504 <__aeabi_ui2d>
 8009514:	2201      	movs	r2, #1
 8009516:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800951a:	3e01      	subs	r6, #1
 800951c:	9214      	str	r2, [sp, #80]	@ 0x50
 800951e:	e777      	b.n	8009410 <_dtoa_r+0x100>
 8009520:	2301      	movs	r3, #1
 8009522:	e7b8      	b.n	8009496 <_dtoa_r+0x186>
 8009524:	9012      	str	r0, [sp, #72]	@ 0x48
 8009526:	e7b7      	b.n	8009498 <_dtoa_r+0x188>
 8009528:	427b      	negs	r3, r7
 800952a:	930a      	str	r3, [sp, #40]	@ 0x28
 800952c:	2300      	movs	r3, #0
 800952e:	eba8 0807 	sub.w	r8, r8, r7
 8009532:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009534:	e7c4      	b.n	80094c0 <_dtoa_r+0x1b0>
 8009536:	2300      	movs	r3, #0
 8009538:	930b      	str	r3, [sp, #44]	@ 0x2c
 800953a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800953c:	2b00      	cmp	r3, #0
 800953e:	dc35      	bgt.n	80095ac <_dtoa_r+0x29c>
 8009540:	2301      	movs	r3, #1
 8009542:	9300      	str	r3, [sp, #0]
 8009544:	9307      	str	r3, [sp, #28]
 8009546:	461a      	mov	r2, r3
 8009548:	920e      	str	r2, [sp, #56]	@ 0x38
 800954a:	e00b      	b.n	8009564 <_dtoa_r+0x254>
 800954c:	2301      	movs	r3, #1
 800954e:	e7f3      	b.n	8009538 <_dtoa_r+0x228>
 8009550:	2300      	movs	r3, #0
 8009552:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009554:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009556:	18fb      	adds	r3, r7, r3
 8009558:	9300      	str	r3, [sp, #0]
 800955a:	3301      	adds	r3, #1
 800955c:	2b01      	cmp	r3, #1
 800955e:	9307      	str	r3, [sp, #28]
 8009560:	bfb8      	it	lt
 8009562:	2301      	movlt	r3, #1
 8009564:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009568:	2100      	movs	r1, #0
 800956a:	2204      	movs	r2, #4
 800956c:	f102 0514 	add.w	r5, r2, #20
 8009570:	429d      	cmp	r5, r3
 8009572:	d91f      	bls.n	80095b4 <_dtoa_r+0x2a4>
 8009574:	6041      	str	r1, [r0, #4]
 8009576:	4658      	mov	r0, fp
 8009578:	f000 fd8e 	bl	800a098 <_Balloc>
 800957c:	4682      	mov	sl, r0
 800957e:	2800      	cmp	r0, #0
 8009580:	d13c      	bne.n	80095fc <_dtoa_r+0x2ec>
 8009582:	4b1b      	ldr	r3, [pc, #108]	@ (80095f0 <_dtoa_r+0x2e0>)
 8009584:	4602      	mov	r2, r0
 8009586:	f240 11af 	movw	r1, #431	@ 0x1af
 800958a:	e6d8      	b.n	800933e <_dtoa_r+0x2e>
 800958c:	2301      	movs	r3, #1
 800958e:	e7e0      	b.n	8009552 <_dtoa_r+0x242>
 8009590:	2401      	movs	r4, #1
 8009592:	2300      	movs	r3, #0
 8009594:	9309      	str	r3, [sp, #36]	@ 0x24
 8009596:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009598:	f04f 33ff 	mov.w	r3, #4294967295
 800959c:	9300      	str	r3, [sp, #0]
 800959e:	9307      	str	r3, [sp, #28]
 80095a0:	2200      	movs	r2, #0
 80095a2:	2312      	movs	r3, #18
 80095a4:	e7d0      	b.n	8009548 <_dtoa_r+0x238>
 80095a6:	2301      	movs	r3, #1
 80095a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80095aa:	e7f5      	b.n	8009598 <_dtoa_r+0x288>
 80095ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80095ae:	9300      	str	r3, [sp, #0]
 80095b0:	9307      	str	r3, [sp, #28]
 80095b2:	e7d7      	b.n	8009564 <_dtoa_r+0x254>
 80095b4:	3101      	adds	r1, #1
 80095b6:	0052      	lsls	r2, r2, #1
 80095b8:	e7d8      	b.n	800956c <_dtoa_r+0x25c>
 80095ba:	bf00      	nop
 80095bc:	f3af 8000 	nop.w
 80095c0:	636f4361 	.word	0x636f4361
 80095c4:	3fd287a7 	.word	0x3fd287a7
 80095c8:	8b60c8b3 	.word	0x8b60c8b3
 80095cc:	3fc68a28 	.word	0x3fc68a28
 80095d0:	509f79fb 	.word	0x509f79fb
 80095d4:	3fd34413 	.word	0x3fd34413
 80095d8:	0800d03d 	.word	0x0800d03d
 80095dc:	0800d0f7 	.word	0x0800d0f7
 80095e0:	7ff00000 	.word	0x7ff00000
 80095e4:	0800d015 	.word	0x0800d015
 80095e8:	3ff80000 	.word	0x3ff80000
 80095ec:	0800d1f0 	.word	0x0800d1f0
 80095f0:	0800d14f 	.word	0x0800d14f
 80095f4:	0800d0f3 	.word	0x0800d0f3
 80095f8:	0800d014 	.word	0x0800d014
 80095fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009600:	6018      	str	r0, [r3, #0]
 8009602:	9b07      	ldr	r3, [sp, #28]
 8009604:	2b0e      	cmp	r3, #14
 8009606:	f200 80a4 	bhi.w	8009752 <_dtoa_r+0x442>
 800960a:	2c00      	cmp	r4, #0
 800960c:	f000 80a1 	beq.w	8009752 <_dtoa_r+0x442>
 8009610:	2f00      	cmp	r7, #0
 8009612:	dd33      	ble.n	800967c <_dtoa_r+0x36c>
 8009614:	4bad      	ldr	r3, [pc, #692]	@ (80098cc <_dtoa_r+0x5bc>)
 8009616:	f007 020f 	and.w	r2, r7, #15
 800961a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800961e:	ed93 7b00 	vldr	d7, [r3]
 8009622:	05f8      	lsls	r0, r7, #23
 8009624:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009628:	ea4f 1427 	mov.w	r4, r7, asr #4
 800962c:	d516      	bpl.n	800965c <_dtoa_r+0x34c>
 800962e:	4ba8      	ldr	r3, [pc, #672]	@ (80098d0 <_dtoa_r+0x5c0>)
 8009630:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009634:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009638:	f7f7 f908 	bl	800084c <__aeabi_ddiv>
 800963c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009640:	f004 040f 	and.w	r4, r4, #15
 8009644:	2603      	movs	r6, #3
 8009646:	4da2      	ldr	r5, [pc, #648]	@ (80098d0 <_dtoa_r+0x5c0>)
 8009648:	b954      	cbnz	r4, 8009660 <_dtoa_r+0x350>
 800964a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800964e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009652:	f7f7 f8fb 	bl	800084c <__aeabi_ddiv>
 8009656:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800965a:	e028      	b.n	80096ae <_dtoa_r+0x39e>
 800965c:	2602      	movs	r6, #2
 800965e:	e7f2      	b.n	8009646 <_dtoa_r+0x336>
 8009660:	07e1      	lsls	r1, r4, #31
 8009662:	d508      	bpl.n	8009676 <_dtoa_r+0x366>
 8009664:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009668:	e9d5 2300 	ldrd	r2, r3, [r5]
 800966c:	f7f6 ffc4 	bl	80005f8 <__aeabi_dmul>
 8009670:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009674:	3601      	adds	r6, #1
 8009676:	1064      	asrs	r4, r4, #1
 8009678:	3508      	adds	r5, #8
 800967a:	e7e5      	b.n	8009648 <_dtoa_r+0x338>
 800967c:	f000 80d2 	beq.w	8009824 <_dtoa_r+0x514>
 8009680:	427c      	negs	r4, r7
 8009682:	4b92      	ldr	r3, [pc, #584]	@ (80098cc <_dtoa_r+0x5bc>)
 8009684:	4d92      	ldr	r5, [pc, #584]	@ (80098d0 <_dtoa_r+0x5c0>)
 8009686:	f004 020f 	and.w	r2, r4, #15
 800968a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800968e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009692:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009696:	f7f6 ffaf 	bl	80005f8 <__aeabi_dmul>
 800969a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800969e:	1124      	asrs	r4, r4, #4
 80096a0:	2300      	movs	r3, #0
 80096a2:	2602      	movs	r6, #2
 80096a4:	2c00      	cmp	r4, #0
 80096a6:	f040 80b2 	bne.w	800980e <_dtoa_r+0x4fe>
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d1d3      	bne.n	8009656 <_dtoa_r+0x346>
 80096ae:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80096b0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	f000 80b7 	beq.w	8009828 <_dtoa_r+0x518>
 80096ba:	4b86      	ldr	r3, [pc, #536]	@ (80098d4 <_dtoa_r+0x5c4>)
 80096bc:	2200      	movs	r2, #0
 80096be:	4620      	mov	r0, r4
 80096c0:	4629      	mov	r1, r5
 80096c2:	f7f7 fa0b 	bl	8000adc <__aeabi_dcmplt>
 80096c6:	2800      	cmp	r0, #0
 80096c8:	f000 80ae 	beq.w	8009828 <_dtoa_r+0x518>
 80096cc:	9b07      	ldr	r3, [sp, #28]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	f000 80aa 	beq.w	8009828 <_dtoa_r+0x518>
 80096d4:	9b00      	ldr	r3, [sp, #0]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	dd37      	ble.n	800974a <_dtoa_r+0x43a>
 80096da:	1e7b      	subs	r3, r7, #1
 80096dc:	9304      	str	r3, [sp, #16]
 80096de:	4620      	mov	r0, r4
 80096e0:	4b7d      	ldr	r3, [pc, #500]	@ (80098d8 <_dtoa_r+0x5c8>)
 80096e2:	2200      	movs	r2, #0
 80096e4:	4629      	mov	r1, r5
 80096e6:	f7f6 ff87 	bl	80005f8 <__aeabi_dmul>
 80096ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80096ee:	9c00      	ldr	r4, [sp, #0]
 80096f0:	3601      	adds	r6, #1
 80096f2:	4630      	mov	r0, r6
 80096f4:	f7f6 ff16 	bl	8000524 <__aeabi_i2d>
 80096f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80096fc:	f7f6 ff7c 	bl	80005f8 <__aeabi_dmul>
 8009700:	4b76      	ldr	r3, [pc, #472]	@ (80098dc <_dtoa_r+0x5cc>)
 8009702:	2200      	movs	r2, #0
 8009704:	f7f6 fdc2 	bl	800028c <__adddf3>
 8009708:	4605      	mov	r5, r0
 800970a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800970e:	2c00      	cmp	r4, #0
 8009710:	f040 808d 	bne.w	800982e <_dtoa_r+0x51e>
 8009714:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009718:	4b71      	ldr	r3, [pc, #452]	@ (80098e0 <_dtoa_r+0x5d0>)
 800971a:	2200      	movs	r2, #0
 800971c:	f7f6 fdb4 	bl	8000288 <__aeabi_dsub>
 8009720:	4602      	mov	r2, r0
 8009722:	460b      	mov	r3, r1
 8009724:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009728:	462a      	mov	r2, r5
 800972a:	4633      	mov	r3, r6
 800972c:	f7f7 f9f4 	bl	8000b18 <__aeabi_dcmpgt>
 8009730:	2800      	cmp	r0, #0
 8009732:	f040 828b 	bne.w	8009c4c <_dtoa_r+0x93c>
 8009736:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800973a:	462a      	mov	r2, r5
 800973c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009740:	f7f7 f9cc 	bl	8000adc <__aeabi_dcmplt>
 8009744:	2800      	cmp	r0, #0
 8009746:	f040 8128 	bne.w	800999a <_dtoa_r+0x68a>
 800974a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800974e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009752:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009754:	2b00      	cmp	r3, #0
 8009756:	f2c0 815a 	blt.w	8009a0e <_dtoa_r+0x6fe>
 800975a:	2f0e      	cmp	r7, #14
 800975c:	f300 8157 	bgt.w	8009a0e <_dtoa_r+0x6fe>
 8009760:	4b5a      	ldr	r3, [pc, #360]	@ (80098cc <_dtoa_r+0x5bc>)
 8009762:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009766:	ed93 7b00 	vldr	d7, [r3]
 800976a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800976c:	2b00      	cmp	r3, #0
 800976e:	ed8d 7b00 	vstr	d7, [sp]
 8009772:	da03      	bge.n	800977c <_dtoa_r+0x46c>
 8009774:	9b07      	ldr	r3, [sp, #28]
 8009776:	2b00      	cmp	r3, #0
 8009778:	f340 8101 	ble.w	800997e <_dtoa_r+0x66e>
 800977c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009780:	4656      	mov	r6, sl
 8009782:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009786:	4620      	mov	r0, r4
 8009788:	4629      	mov	r1, r5
 800978a:	f7f7 f85f 	bl	800084c <__aeabi_ddiv>
 800978e:	f7f7 f9e3 	bl	8000b58 <__aeabi_d2iz>
 8009792:	4680      	mov	r8, r0
 8009794:	f7f6 fec6 	bl	8000524 <__aeabi_i2d>
 8009798:	e9dd 2300 	ldrd	r2, r3, [sp]
 800979c:	f7f6 ff2c 	bl	80005f8 <__aeabi_dmul>
 80097a0:	4602      	mov	r2, r0
 80097a2:	460b      	mov	r3, r1
 80097a4:	4620      	mov	r0, r4
 80097a6:	4629      	mov	r1, r5
 80097a8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80097ac:	f7f6 fd6c 	bl	8000288 <__aeabi_dsub>
 80097b0:	f806 4b01 	strb.w	r4, [r6], #1
 80097b4:	9d07      	ldr	r5, [sp, #28]
 80097b6:	eba6 040a 	sub.w	r4, r6, sl
 80097ba:	42a5      	cmp	r5, r4
 80097bc:	4602      	mov	r2, r0
 80097be:	460b      	mov	r3, r1
 80097c0:	f040 8117 	bne.w	80099f2 <_dtoa_r+0x6e2>
 80097c4:	f7f6 fd62 	bl	800028c <__adddf3>
 80097c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80097cc:	4604      	mov	r4, r0
 80097ce:	460d      	mov	r5, r1
 80097d0:	f7f7 f9a2 	bl	8000b18 <__aeabi_dcmpgt>
 80097d4:	2800      	cmp	r0, #0
 80097d6:	f040 80f9 	bne.w	80099cc <_dtoa_r+0x6bc>
 80097da:	e9dd 2300 	ldrd	r2, r3, [sp]
 80097de:	4620      	mov	r0, r4
 80097e0:	4629      	mov	r1, r5
 80097e2:	f7f7 f971 	bl	8000ac8 <__aeabi_dcmpeq>
 80097e6:	b118      	cbz	r0, 80097f0 <_dtoa_r+0x4e0>
 80097e8:	f018 0f01 	tst.w	r8, #1
 80097ec:	f040 80ee 	bne.w	80099cc <_dtoa_r+0x6bc>
 80097f0:	4649      	mov	r1, r9
 80097f2:	4658      	mov	r0, fp
 80097f4:	f000 fc90 	bl	800a118 <_Bfree>
 80097f8:	2300      	movs	r3, #0
 80097fa:	7033      	strb	r3, [r6, #0]
 80097fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80097fe:	3701      	adds	r7, #1
 8009800:	601f      	str	r7, [r3, #0]
 8009802:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009804:	2b00      	cmp	r3, #0
 8009806:	f000 831d 	beq.w	8009e44 <_dtoa_r+0xb34>
 800980a:	601e      	str	r6, [r3, #0]
 800980c:	e31a      	b.n	8009e44 <_dtoa_r+0xb34>
 800980e:	07e2      	lsls	r2, r4, #31
 8009810:	d505      	bpl.n	800981e <_dtoa_r+0x50e>
 8009812:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009816:	f7f6 feef 	bl	80005f8 <__aeabi_dmul>
 800981a:	3601      	adds	r6, #1
 800981c:	2301      	movs	r3, #1
 800981e:	1064      	asrs	r4, r4, #1
 8009820:	3508      	adds	r5, #8
 8009822:	e73f      	b.n	80096a4 <_dtoa_r+0x394>
 8009824:	2602      	movs	r6, #2
 8009826:	e742      	b.n	80096ae <_dtoa_r+0x39e>
 8009828:	9c07      	ldr	r4, [sp, #28]
 800982a:	9704      	str	r7, [sp, #16]
 800982c:	e761      	b.n	80096f2 <_dtoa_r+0x3e2>
 800982e:	4b27      	ldr	r3, [pc, #156]	@ (80098cc <_dtoa_r+0x5bc>)
 8009830:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009832:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009836:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800983a:	4454      	add	r4, sl
 800983c:	2900      	cmp	r1, #0
 800983e:	d053      	beq.n	80098e8 <_dtoa_r+0x5d8>
 8009840:	4928      	ldr	r1, [pc, #160]	@ (80098e4 <_dtoa_r+0x5d4>)
 8009842:	2000      	movs	r0, #0
 8009844:	f7f7 f802 	bl	800084c <__aeabi_ddiv>
 8009848:	4633      	mov	r3, r6
 800984a:	462a      	mov	r2, r5
 800984c:	f7f6 fd1c 	bl	8000288 <__aeabi_dsub>
 8009850:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009854:	4656      	mov	r6, sl
 8009856:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800985a:	f7f7 f97d 	bl	8000b58 <__aeabi_d2iz>
 800985e:	4605      	mov	r5, r0
 8009860:	f7f6 fe60 	bl	8000524 <__aeabi_i2d>
 8009864:	4602      	mov	r2, r0
 8009866:	460b      	mov	r3, r1
 8009868:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800986c:	f7f6 fd0c 	bl	8000288 <__aeabi_dsub>
 8009870:	3530      	adds	r5, #48	@ 0x30
 8009872:	4602      	mov	r2, r0
 8009874:	460b      	mov	r3, r1
 8009876:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800987a:	f806 5b01 	strb.w	r5, [r6], #1
 800987e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009882:	f7f7 f92b 	bl	8000adc <__aeabi_dcmplt>
 8009886:	2800      	cmp	r0, #0
 8009888:	d171      	bne.n	800996e <_dtoa_r+0x65e>
 800988a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800988e:	4911      	ldr	r1, [pc, #68]	@ (80098d4 <_dtoa_r+0x5c4>)
 8009890:	2000      	movs	r0, #0
 8009892:	f7f6 fcf9 	bl	8000288 <__aeabi_dsub>
 8009896:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800989a:	f7f7 f91f 	bl	8000adc <__aeabi_dcmplt>
 800989e:	2800      	cmp	r0, #0
 80098a0:	f040 8095 	bne.w	80099ce <_dtoa_r+0x6be>
 80098a4:	42a6      	cmp	r6, r4
 80098a6:	f43f af50 	beq.w	800974a <_dtoa_r+0x43a>
 80098aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80098ae:	4b0a      	ldr	r3, [pc, #40]	@ (80098d8 <_dtoa_r+0x5c8>)
 80098b0:	2200      	movs	r2, #0
 80098b2:	f7f6 fea1 	bl	80005f8 <__aeabi_dmul>
 80098b6:	4b08      	ldr	r3, [pc, #32]	@ (80098d8 <_dtoa_r+0x5c8>)
 80098b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80098bc:	2200      	movs	r2, #0
 80098be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80098c2:	f7f6 fe99 	bl	80005f8 <__aeabi_dmul>
 80098c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80098ca:	e7c4      	b.n	8009856 <_dtoa_r+0x546>
 80098cc:	0800d1f0 	.word	0x0800d1f0
 80098d0:	0800d1c8 	.word	0x0800d1c8
 80098d4:	3ff00000 	.word	0x3ff00000
 80098d8:	40240000 	.word	0x40240000
 80098dc:	401c0000 	.word	0x401c0000
 80098e0:	40140000 	.word	0x40140000
 80098e4:	3fe00000 	.word	0x3fe00000
 80098e8:	4631      	mov	r1, r6
 80098ea:	4628      	mov	r0, r5
 80098ec:	f7f6 fe84 	bl	80005f8 <__aeabi_dmul>
 80098f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80098f4:	9415      	str	r4, [sp, #84]	@ 0x54
 80098f6:	4656      	mov	r6, sl
 80098f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80098fc:	f7f7 f92c 	bl	8000b58 <__aeabi_d2iz>
 8009900:	4605      	mov	r5, r0
 8009902:	f7f6 fe0f 	bl	8000524 <__aeabi_i2d>
 8009906:	4602      	mov	r2, r0
 8009908:	460b      	mov	r3, r1
 800990a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800990e:	f7f6 fcbb 	bl	8000288 <__aeabi_dsub>
 8009912:	3530      	adds	r5, #48	@ 0x30
 8009914:	f806 5b01 	strb.w	r5, [r6], #1
 8009918:	4602      	mov	r2, r0
 800991a:	460b      	mov	r3, r1
 800991c:	42a6      	cmp	r6, r4
 800991e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009922:	f04f 0200 	mov.w	r2, #0
 8009926:	d124      	bne.n	8009972 <_dtoa_r+0x662>
 8009928:	4bac      	ldr	r3, [pc, #688]	@ (8009bdc <_dtoa_r+0x8cc>)
 800992a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800992e:	f7f6 fcad 	bl	800028c <__adddf3>
 8009932:	4602      	mov	r2, r0
 8009934:	460b      	mov	r3, r1
 8009936:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800993a:	f7f7 f8ed 	bl	8000b18 <__aeabi_dcmpgt>
 800993e:	2800      	cmp	r0, #0
 8009940:	d145      	bne.n	80099ce <_dtoa_r+0x6be>
 8009942:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009946:	49a5      	ldr	r1, [pc, #660]	@ (8009bdc <_dtoa_r+0x8cc>)
 8009948:	2000      	movs	r0, #0
 800994a:	f7f6 fc9d 	bl	8000288 <__aeabi_dsub>
 800994e:	4602      	mov	r2, r0
 8009950:	460b      	mov	r3, r1
 8009952:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009956:	f7f7 f8c1 	bl	8000adc <__aeabi_dcmplt>
 800995a:	2800      	cmp	r0, #0
 800995c:	f43f aef5 	beq.w	800974a <_dtoa_r+0x43a>
 8009960:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009962:	1e73      	subs	r3, r6, #1
 8009964:	9315      	str	r3, [sp, #84]	@ 0x54
 8009966:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800996a:	2b30      	cmp	r3, #48	@ 0x30
 800996c:	d0f8      	beq.n	8009960 <_dtoa_r+0x650>
 800996e:	9f04      	ldr	r7, [sp, #16]
 8009970:	e73e      	b.n	80097f0 <_dtoa_r+0x4e0>
 8009972:	4b9b      	ldr	r3, [pc, #620]	@ (8009be0 <_dtoa_r+0x8d0>)
 8009974:	f7f6 fe40 	bl	80005f8 <__aeabi_dmul>
 8009978:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800997c:	e7bc      	b.n	80098f8 <_dtoa_r+0x5e8>
 800997e:	d10c      	bne.n	800999a <_dtoa_r+0x68a>
 8009980:	4b98      	ldr	r3, [pc, #608]	@ (8009be4 <_dtoa_r+0x8d4>)
 8009982:	2200      	movs	r2, #0
 8009984:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009988:	f7f6 fe36 	bl	80005f8 <__aeabi_dmul>
 800998c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009990:	f7f7 f8b8 	bl	8000b04 <__aeabi_dcmpge>
 8009994:	2800      	cmp	r0, #0
 8009996:	f000 8157 	beq.w	8009c48 <_dtoa_r+0x938>
 800999a:	2400      	movs	r4, #0
 800999c:	4625      	mov	r5, r4
 800999e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80099a0:	43db      	mvns	r3, r3
 80099a2:	9304      	str	r3, [sp, #16]
 80099a4:	4656      	mov	r6, sl
 80099a6:	2700      	movs	r7, #0
 80099a8:	4621      	mov	r1, r4
 80099aa:	4658      	mov	r0, fp
 80099ac:	f000 fbb4 	bl	800a118 <_Bfree>
 80099b0:	2d00      	cmp	r5, #0
 80099b2:	d0dc      	beq.n	800996e <_dtoa_r+0x65e>
 80099b4:	b12f      	cbz	r7, 80099c2 <_dtoa_r+0x6b2>
 80099b6:	42af      	cmp	r7, r5
 80099b8:	d003      	beq.n	80099c2 <_dtoa_r+0x6b2>
 80099ba:	4639      	mov	r1, r7
 80099bc:	4658      	mov	r0, fp
 80099be:	f000 fbab 	bl	800a118 <_Bfree>
 80099c2:	4629      	mov	r1, r5
 80099c4:	4658      	mov	r0, fp
 80099c6:	f000 fba7 	bl	800a118 <_Bfree>
 80099ca:	e7d0      	b.n	800996e <_dtoa_r+0x65e>
 80099cc:	9704      	str	r7, [sp, #16]
 80099ce:	4633      	mov	r3, r6
 80099d0:	461e      	mov	r6, r3
 80099d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80099d6:	2a39      	cmp	r2, #57	@ 0x39
 80099d8:	d107      	bne.n	80099ea <_dtoa_r+0x6da>
 80099da:	459a      	cmp	sl, r3
 80099dc:	d1f8      	bne.n	80099d0 <_dtoa_r+0x6c0>
 80099de:	9a04      	ldr	r2, [sp, #16]
 80099e0:	3201      	adds	r2, #1
 80099e2:	9204      	str	r2, [sp, #16]
 80099e4:	2230      	movs	r2, #48	@ 0x30
 80099e6:	f88a 2000 	strb.w	r2, [sl]
 80099ea:	781a      	ldrb	r2, [r3, #0]
 80099ec:	3201      	adds	r2, #1
 80099ee:	701a      	strb	r2, [r3, #0]
 80099f0:	e7bd      	b.n	800996e <_dtoa_r+0x65e>
 80099f2:	4b7b      	ldr	r3, [pc, #492]	@ (8009be0 <_dtoa_r+0x8d0>)
 80099f4:	2200      	movs	r2, #0
 80099f6:	f7f6 fdff 	bl	80005f8 <__aeabi_dmul>
 80099fa:	2200      	movs	r2, #0
 80099fc:	2300      	movs	r3, #0
 80099fe:	4604      	mov	r4, r0
 8009a00:	460d      	mov	r5, r1
 8009a02:	f7f7 f861 	bl	8000ac8 <__aeabi_dcmpeq>
 8009a06:	2800      	cmp	r0, #0
 8009a08:	f43f aebb 	beq.w	8009782 <_dtoa_r+0x472>
 8009a0c:	e6f0      	b.n	80097f0 <_dtoa_r+0x4e0>
 8009a0e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009a10:	2a00      	cmp	r2, #0
 8009a12:	f000 80db 	beq.w	8009bcc <_dtoa_r+0x8bc>
 8009a16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a18:	2a01      	cmp	r2, #1
 8009a1a:	f300 80bf 	bgt.w	8009b9c <_dtoa_r+0x88c>
 8009a1e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009a20:	2a00      	cmp	r2, #0
 8009a22:	f000 80b7 	beq.w	8009b94 <_dtoa_r+0x884>
 8009a26:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009a2a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009a2c:	4646      	mov	r6, r8
 8009a2e:	9a08      	ldr	r2, [sp, #32]
 8009a30:	2101      	movs	r1, #1
 8009a32:	441a      	add	r2, r3
 8009a34:	4658      	mov	r0, fp
 8009a36:	4498      	add	r8, r3
 8009a38:	9208      	str	r2, [sp, #32]
 8009a3a:	f000 fc6b 	bl	800a314 <__i2b>
 8009a3e:	4605      	mov	r5, r0
 8009a40:	b15e      	cbz	r6, 8009a5a <_dtoa_r+0x74a>
 8009a42:	9b08      	ldr	r3, [sp, #32]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	dd08      	ble.n	8009a5a <_dtoa_r+0x74a>
 8009a48:	42b3      	cmp	r3, r6
 8009a4a:	9a08      	ldr	r2, [sp, #32]
 8009a4c:	bfa8      	it	ge
 8009a4e:	4633      	movge	r3, r6
 8009a50:	eba8 0803 	sub.w	r8, r8, r3
 8009a54:	1af6      	subs	r6, r6, r3
 8009a56:	1ad3      	subs	r3, r2, r3
 8009a58:	9308      	str	r3, [sp, #32]
 8009a5a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a5c:	b1f3      	cbz	r3, 8009a9c <_dtoa_r+0x78c>
 8009a5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	f000 80b7 	beq.w	8009bd4 <_dtoa_r+0x8c4>
 8009a66:	b18c      	cbz	r4, 8009a8c <_dtoa_r+0x77c>
 8009a68:	4629      	mov	r1, r5
 8009a6a:	4622      	mov	r2, r4
 8009a6c:	4658      	mov	r0, fp
 8009a6e:	f000 fd11 	bl	800a494 <__pow5mult>
 8009a72:	464a      	mov	r2, r9
 8009a74:	4601      	mov	r1, r0
 8009a76:	4605      	mov	r5, r0
 8009a78:	4658      	mov	r0, fp
 8009a7a:	f000 fc61 	bl	800a340 <__multiply>
 8009a7e:	4649      	mov	r1, r9
 8009a80:	9004      	str	r0, [sp, #16]
 8009a82:	4658      	mov	r0, fp
 8009a84:	f000 fb48 	bl	800a118 <_Bfree>
 8009a88:	9b04      	ldr	r3, [sp, #16]
 8009a8a:	4699      	mov	r9, r3
 8009a8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a8e:	1b1a      	subs	r2, r3, r4
 8009a90:	d004      	beq.n	8009a9c <_dtoa_r+0x78c>
 8009a92:	4649      	mov	r1, r9
 8009a94:	4658      	mov	r0, fp
 8009a96:	f000 fcfd 	bl	800a494 <__pow5mult>
 8009a9a:	4681      	mov	r9, r0
 8009a9c:	2101      	movs	r1, #1
 8009a9e:	4658      	mov	r0, fp
 8009aa0:	f000 fc38 	bl	800a314 <__i2b>
 8009aa4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009aa6:	4604      	mov	r4, r0
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	f000 81cf 	beq.w	8009e4c <_dtoa_r+0xb3c>
 8009aae:	461a      	mov	r2, r3
 8009ab0:	4601      	mov	r1, r0
 8009ab2:	4658      	mov	r0, fp
 8009ab4:	f000 fcee 	bl	800a494 <__pow5mult>
 8009ab8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009aba:	2b01      	cmp	r3, #1
 8009abc:	4604      	mov	r4, r0
 8009abe:	f300 8095 	bgt.w	8009bec <_dtoa_r+0x8dc>
 8009ac2:	9b02      	ldr	r3, [sp, #8]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	f040 8087 	bne.w	8009bd8 <_dtoa_r+0x8c8>
 8009aca:	9b03      	ldr	r3, [sp, #12]
 8009acc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	f040 8089 	bne.w	8009be8 <_dtoa_r+0x8d8>
 8009ad6:	9b03      	ldr	r3, [sp, #12]
 8009ad8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009adc:	0d1b      	lsrs	r3, r3, #20
 8009ade:	051b      	lsls	r3, r3, #20
 8009ae0:	b12b      	cbz	r3, 8009aee <_dtoa_r+0x7de>
 8009ae2:	9b08      	ldr	r3, [sp, #32]
 8009ae4:	3301      	adds	r3, #1
 8009ae6:	9308      	str	r3, [sp, #32]
 8009ae8:	f108 0801 	add.w	r8, r8, #1
 8009aec:	2301      	movs	r3, #1
 8009aee:	930a      	str	r3, [sp, #40]	@ 0x28
 8009af0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	f000 81b0 	beq.w	8009e58 <_dtoa_r+0xb48>
 8009af8:	6923      	ldr	r3, [r4, #16]
 8009afa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009afe:	6918      	ldr	r0, [r3, #16]
 8009b00:	f000 fbbc 	bl	800a27c <__hi0bits>
 8009b04:	f1c0 0020 	rsb	r0, r0, #32
 8009b08:	9b08      	ldr	r3, [sp, #32]
 8009b0a:	4418      	add	r0, r3
 8009b0c:	f010 001f 	ands.w	r0, r0, #31
 8009b10:	d077      	beq.n	8009c02 <_dtoa_r+0x8f2>
 8009b12:	f1c0 0320 	rsb	r3, r0, #32
 8009b16:	2b04      	cmp	r3, #4
 8009b18:	dd6b      	ble.n	8009bf2 <_dtoa_r+0x8e2>
 8009b1a:	9b08      	ldr	r3, [sp, #32]
 8009b1c:	f1c0 001c 	rsb	r0, r0, #28
 8009b20:	4403      	add	r3, r0
 8009b22:	4480      	add	r8, r0
 8009b24:	4406      	add	r6, r0
 8009b26:	9308      	str	r3, [sp, #32]
 8009b28:	f1b8 0f00 	cmp.w	r8, #0
 8009b2c:	dd05      	ble.n	8009b3a <_dtoa_r+0x82a>
 8009b2e:	4649      	mov	r1, r9
 8009b30:	4642      	mov	r2, r8
 8009b32:	4658      	mov	r0, fp
 8009b34:	f000 fd08 	bl	800a548 <__lshift>
 8009b38:	4681      	mov	r9, r0
 8009b3a:	9b08      	ldr	r3, [sp, #32]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	dd05      	ble.n	8009b4c <_dtoa_r+0x83c>
 8009b40:	4621      	mov	r1, r4
 8009b42:	461a      	mov	r2, r3
 8009b44:	4658      	mov	r0, fp
 8009b46:	f000 fcff 	bl	800a548 <__lshift>
 8009b4a:	4604      	mov	r4, r0
 8009b4c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d059      	beq.n	8009c06 <_dtoa_r+0x8f6>
 8009b52:	4621      	mov	r1, r4
 8009b54:	4648      	mov	r0, r9
 8009b56:	f000 fd63 	bl	800a620 <__mcmp>
 8009b5a:	2800      	cmp	r0, #0
 8009b5c:	da53      	bge.n	8009c06 <_dtoa_r+0x8f6>
 8009b5e:	1e7b      	subs	r3, r7, #1
 8009b60:	9304      	str	r3, [sp, #16]
 8009b62:	4649      	mov	r1, r9
 8009b64:	2300      	movs	r3, #0
 8009b66:	220a      	movs	r2, #10
 8009b68:	4658      	mov	r0, fp
 8009b6a:	f000 faf7 	bl	800a15c <__multadd>
 8009b6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009b70:	4681      	mov	r9, r0
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	f000 8172 	beq.w	8009e5c <_dtoa_r+0xb4c>
 8009b78:	2300      	movs	r3, #0
 8009b7a:	4629      	mov	r1, r5
 8009b7c:	220a      	movs	r2, #10
 8009b7e:	4658      	mov	r0, fp
 8009b80:	f000 faec 	bl	800a15c <__multadd>
 8009b84:	9b00      	ldr	r3, [sp, #0]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	4605      	mov	r5, r0
 8009b8a:	dc67      	bgt.n	8009c5c <_dtoa_r+0x94c>
 8009b8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b8e:	2b02      	cmp	r3, #2
 8009b90:	dc41      	bgt.n	8009c16 <_dtoa_r+0x906>
 8009b92:	e063      	b.n	8009c5c <_dtoa_r+0x94c>
 8009b94:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009b96:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009b9a:	e746      	b.n	8009a2a <_dtoa_r+0x71a>
 8009b9c:	9b07      	ldr	r3, [sp, #28]
 8009b9e:	1e5c      	subs	r4, r3, #1
 8009ba0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ba2:	42a3      	cmp	r3, r4
 8009ba4:	bfbf      	itttt	lt
 8009ba6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009ba8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009baa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009bac:	1ae3      	sublt	r3, r4, r3
 8009bae:	bfb4      	ite	lt
 8009bb0:	18d2      	addlt	r2, r2, r3
 8009bb2:	1b1c      	subge	r4, r3, r4
 8009bb4:	9b07      	ldr	r3, [sp, #28]
 8009bb6:	bfbc      	itt	lt
 8009bb8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009bba:	2400      	movlt	r4, #0
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	bfb5      	itete	lt
 8009bc0:	eba8 0603 	sublt.w	r6, r8, r3
 8009bc4:	9b07      	ldrge	r3, [sp, #28]
 8009bc6:	2300      	movlt	r3, #0
 8009bc8:	4646      	movge	r6, r8
 8009bca:	e730      	b.n	8009a2e <_dtoa_r+0x71e>
 8009bcc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009bce:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009bd0:	4646      	mov	r6, r8
 8009bd2:	e735      	b.n	8009a40 <_dtoa_r+0x730>
 8009bd4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009bd6:	e75c      	b.n	8009a92 <_dtoa_r+0x782>
 8009bd8:	2300      	movs	r3, #0
 8009bda:	e788      	b.n	8009aee <_dtoa_r+0x7de>
 8009bdc:	3fe00000 	.word	0x3fe00000
 8009be0:	40240000 	.word	0x40240000
 8009be4:	40140000 	.word	0x40140000
 8009be8:	9b02      	ldr	r3, [sp, #8]
 8009bea:	e780      	b.n	8009aee <_dtoa_r+0x7de>
 8009bec:	2300      	movs	r3, #0
 8009bee:	930a      	str	r3, [sp, #40]	@ 0x28
 8009bf0:	e782      	b.n	8009af8 <_dtoa_r+0x7e8>
 8009bf2:	d099      	beq.n	8009b28 <_dtoa_r+0x818>
 8009bf4:	9a08      	ldr	r2, [sp, #32]
 8009bf6:	331c      	adds	r3, #28
 8009bf8:	441a      	add	r2, r3
 8009bfa:	4498      	add	r8, r3
 8009bfc:	441e      	add	r6, r3
 8009bfe:	9208      	str	r2, [sp, #32]
 8009c00:	e792      	b.n	8009b28 <_dtoa_r+0x818>
 8009c02:	4603      	mov	r3, r0
 8009c04:	e7f6      	b.n	8009bf4 <_dtoa_r+0x8e4>
 8009c06:	9b07      	ldr	r3, [sp, #28]
 8009c08:	9704      	str	r7, [sp, #16]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	dc20      	bgt.n	8009c50 <_dtoa_r+0x940>
 8009c0e:	9300      	str	r3, [sp, #0]
 8009c10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c12:	2b02      	cmp	r3, #2
 8009c14:	dd1e      	ble.n	8009c54 <_dtoa_r+0x944>
 8009c16:	9b00      	ldr	r3, [sp, #0]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	f47f aec0 	bne.w	800999e <_dtoa_r+0x68e>
 8009c1e:	4621      	mov	r1, r4
 8009c20:	2205      	movs	r2, #5
 8009c22:	4658      	mov	r0, fp
 8009c24:	f000 fa9a 	bl	800a15c <__multadd>
 8009c28:	4601      	mov	r1, r0
 8009c2a:	4604      	mov	r4, r0
 8009c2c:	4648      	mov	r0, r9
 8009c2e:	f000 fcf7 	bl	800a620 <__mcmp>
 8009c32:	2800      	cmp	r0, #0
 8009c34:	f77f aeb3 	ble.w	800999e <_dtoa_r+0x68e>
 8009c38:	4656      	mov	r6, sl
 8009c3a:	2331      	movs	r3, #49	@ 0x31
 8009c3c:	f806 3b01 	strb.w	r3, [r6], #1
 8009c40:	9b04      	ldr	r3, [sp, #16]
 8009c42:	3301      	adds	r3, #1
 8009c44:	9304      	str	r3, [sp, #16]
 8009c46:	e6ae      	b.n	80099a6 <_dtoa_r+0x696>
 8009c48:	9c07      	ldr	r4, [sp, #28]
 8009c4a:	9704      	str	r7, [sp, #16]
 8009c4c:	4625      	mov	r5, r4
 8009c4e:	e7f3      	b.n	8009c38 <_dtoa_r+0x928>
 8009c50:	9b07      	ldr	r3, [sp, #28]
 8009c52:	9300      	str	r3, [sp, #0]
 8009c54:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	f000 8104 	beq.w	8009e64 <_dtoa_r+0xb54>
 8009c5c:	2e00      	cmp	r6, #0
 8009c5e:	dd05      	ble.n	8009c6c <_dtoa_r+0x95c>
 8009c60:	4629      	mov	r1, r5
 8009c62:	4632      	mov	r2, r6
 8009c64:	4658      	mov	r0, fp
 8009c66:	f000 fc6f 	bl	800a548 <__lshift>
 8009c6a:	4605      	mov	r5, r0
 8009c6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d05a      	beq.n	8009d28 <_dtoa_r+0xa18>
 8009c72:	6869      	ldr	r1, [r5, #4]
 8009c74:	4658      	mov	r0, fp
 8009c76:	f000 fa0f 	bl	800a098 <_Balloc>
 8009c7a:	4606      	mov	r6, r0
 8009c7c:	b928      	cbnz	r0, 8009c8a <_dtoa_r+0x97a>
 8009c7e:	4b84      	ldr	r3, [pc, #528]	@ (8009e90 <_dtoa_r+0xb80>)
 8009c80:	4602      	mov	r2, r0
 8009c82:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009c86:	f7ff bb5a 	b.w	800933e <_dtoa_r+0x2e>
 8009c8a:	692a      	ldr	r2, [r5, #16]
 8009c8c:	3202      	adds	r2, #2
 8009c8e:	0092      	lsls	r2, r2, #2
 8009c90:	f105 010c 	add.w	r1, r5, #12
 8009c94:	300c      	adds	r0, #12
 8009c96:	f7ff fa7e 	bl	8009196 <memcpy>
 8009c9a:	2201      	movs	r2, #1
 8009c9c:	4631      	mov	r1, r6
 8009c9e:	4658      	mov	r0, fp
 8009ca0:	f000 fc52 	bl	800a548 <__lshift>
 8009ca4:	f10a 0301 	add.w	r3, sl, #1
 8009ca8:	9307      	str	r3, [sp, #28]
 8009caa:	9b00      	ldr	r3, [sp, #0]
 8009cac:	4453      	add	r3, sl
 8009cae:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009cb0:	9b02      	ldr	r3, [sp, #8]
 8009cb2:	f003 0301 	and.w	r3, r3, #1
 8009cb6:	462f      	mov	r7, r5
 8009cb8:	930a      	str	r3, [sp, #40]	@ 0x28
 8009cba:	4605      	mov	r5, r0
 8009cbc:	9b07      	ldr	r3, [sp, #28]
 8009cbe:	4621      	mov	r1, r4
 8009cc0:	3b01      	subs	r3, #1
 8009cc2:	4648      	mov	r0, r9
 8009cc4:	9300      	str	r3, [sp, #0]
 8009cc6:	f7ff fa99 	bl	80091fc <quorem>
 8009cca:	4639      	mov	r1, r7
 8009ccc:	9002      	str	r0, [sp, #8]
 8009cce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009cd2:	4648      	mov	r0, r9
 8009cd4:	f000 fca4 	bl	800a620 <__mcmp>
 8009cd8:	462a      	mov	r2, r5
 8009cda:	9008      	str	r0, [sp, #32]
 8009cdc:	4621      	mov	r1, r4
 8009cde:	4658      	mov	r0, fp
 8009ce0:	f000 fcba 	bl	800a658 <__mdiff>
 8009ce4:	68c2      	ldr	r2, [r0, #12]
 8009ce6:	4606      	mov	r6, r0
 8009ce8:	bb02      	cbnz	r2, 8009d2c <_dtoa_r+0xa1c>
 8009cea:	4601      	mov	r1, r0
 8009cec:	4648      	mov	r0, r9
 8009cee:	f000 fc97 	bl	800a620 <__mcmp>
 8009cf2:	4602      	mov	r2, r0
 8009cf4:	4631      	mov	r1, r6
 8009cf6:	4658      	mov	r0, fp
 8009cf8:	920e      	str	r2, [sp, #56]	@ 0x38
 8009cfa:	f000 fa0d 	bl	800a118 <_Bfree>
 8009cfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d00:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009d02:	9e07      	ldr	r6, [sp, #28]
 8009d04:	ea43 0102 	orr.w	r1, r3, r2
 8009d08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d0a:	4319      	orrs	r1, r3
 8009d0c:	d110      	bne.n	8009d30 <_dtoa_r+0xa20>
 8009d0e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009d12:	d029      	beq.n	8009d68 <_dtoa_r+0xa58>
 8009d14:	9b08      	ldr	r3, [sp, #32]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	dd02      	ble.n	8009d20 <_dtoa_r+0xa10>
 8009d1a:	9b02      	ldr	r3, [sp, #8]
 8009d1c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009d20:	9b00      	ldr	r3, [sp, #0]
 8009d22:	f883 8000 	strb.w	r8, [r3]
 8009d26:	e63f      	b.n	80099a8 <_dtoa_r+0x698>
 8009d28:	4628      	mov	r0, r5
 8009d2a:	e7bb      	b.n	8009ca4 <_dtoa_r+0x994>
 8009d2c:	2201      	movs	r2, #1
 8009d2e:	e7e1      	b.n	8009cf4 <_dtoa_r+0x9e4>
 8009d30:	9b08      	ldr	r3, [sp, #32]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	db04      	blt.n	8009d40 <_dtoa_r+0xa30>
 8009d36:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009d38:	430b      	orrs	r3, r1
 8009d3a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009d3c:	430b      	orrs	r3, r1
 8009d3e:	d120      	bne.n	8009d82 <_dtoa_r+0xa72>
 8009d40:	2a00      	cmp	r2, #0
 8009d42:	dded      	ble.n	8009d20 <_dtoa_r+0xa10>
 8009d44:	4649      	mov	r1, r9
 8009d46:	2201      	movs	r2, #1
 8009d48:	4658      	mov	r0, fp
 8009d4a:	f000 fbfd 	bl	800a548 <__lshift>
 8009d4e:	4621      	mov	r1, r4
 8009d50:	4681      	mov	r9, r0
 8009d52:	f000 fc65 	bl	800a620 <__mcmp>
 8009d56:	2800      	cmp	r0, #0
 8009d58:	dc03      	bgt.n	8009d62 <_dtoa_r+0xa52>
 8009d5a:	d1e1      	bne.n	8009d20 <_dtoa_r+0xa10>
 8009d5c:	f018 0f01 	tst.w	r8, #1
 8009d60:	d0de      	beq.n	8009d20 <_dtoa_r+0xa10>
 8009d62:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009d66:	d1d8      	bne.n	8009d1a <_dtoa_r+0xa0a>
 8009d68:	9a00      	ldr	r2, [sp, #0]
 8009d6a:	2339      	movs	r3, #57	@ 0x39
 8009d6c:	7013      	strb	r3, [r2, #0]
 8009d6e:	4633      	mov	r3, r6
 8009d70:	461e      	mov	r6, r3
 8009d72:	3b01      	subs	r3, #1
 8009d74:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009d78:	2a39      	cmp	r2, #57	@ 0x39
 8009d7a:	d052      	beq.n	8009e22 <_dtoa_r+0xb12>
 8009d7c:	3201      	adds	r2, #1
 8009d7e:	701a      	strb	r2, [r3, #0]
 8009d80:	e612      	b.n	80099a8 <_dtoa_r+0x698>
 8009d82:	2a00      	cmp	r2, #0
 8009d84:	dd07      	ble.n	8009d96 <_dtoa_r+0xa86>
 8009d86:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009d8a:	d0ed      	beq.n	8009d68 <_dtoa_r+0xa58>
 8009d8c:	9a00      	ldr	r2, [sp, #0]
 8009d8e:	f108 0301 	add.w	r3, r8, #1
 8009d92:	7013      	strb	r3, [r2, #0]
 8009d94:	e608      	b.n	80099a8 <_dtoa_r+0x698>
 8009d96:	9b07      	ldr	r3, [sp, #28]
 8009d98:	9a07      	ldr	r2, [sp, #28]
 8009d9a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009d9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009da0:	4293      	cmp	r3, r2
 8009da2:	d028      	beq.n	8009df6 <_dtoa_r+0xae6>
 8009da4:	4649      	mov	r1, r9
 8009da6:	2300      	movs	r3, #0
 8009da8:	220a      	movs	r2, #10
 8009daa:	4658      	mov	r0, fp
 8009dac:	f000 f9d6 	bl	800a15c <__multadd>
 8009db0:	42af      	cmp	r7, r5
 8009db2:	4681      	mov	r9, r0
 8009db4:	f04f 0300 	mov.w	r3, #0
 8009db8:	f04f 020a 	mov.w	r2, #10
 8009dbc:	4639      	mov	r1, r7
 8009dbe:	4658      	mov	r0, fp
 8009dc0:	d107      	bne.n	8009dd2 <_dtoa_r+0xac2>
 8009dc2:	f000 f9cb 	bl	800a15c <__multadd>
 8009dc6:	4607      	mov	r7, r0
 8009dc8:	4605      	mov	r5, r0
 8009dca:	9b07      	ldr	r3, [sp, #28]
 8009dcc:	3301      	adds	r3, #1
 8009dce:	9307      	str	r3, [sp, #28]
 8009dd0:	e774      	b.n	8009cbc <_dtoa_r+0x9ac>
 8009dd2:	f000 f9c3 	bl	800a15c <__multadd>
 8009dd6:	4629      	mov	r1, r5
 8009dd8:	4607      	mov	r7, r0
 8009dda:	2300      	movs	r3, #0
 8009ddc:	220a      	movs	r2, #10
 8009dde:	4658      	mov	r0, fp
 8009de0:	f000 f9bc 	bl	800a15c <__multadd>
 8009de4:	4605      	mov	r5, r0
 8009de6:	e7f0      	b.n	8009dca <_dtoa_r+0xaba>
 8009de8:	9b00      	ldr	r3, [sp, #0]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	bfcc      	ite	gt
 8009dee:	461e      	movgt	r6, r3
 8009df0:	2601      	movle	r6, #1
 8009df2:	4456      	add	r6, sl
 8009df4:	2700      	movs	r7, #0
 8009df6:	4649      	mov	r1, r9
 8009df8:	2201      	movs	r2, #1
 8009dfa:	4658      	mov	r0, fp
 8009dfc:	f000 fba4 	bl	800a548 <__lshift>
 8009e00:	4621      	mov	r1, r4
 8009e02:	4681      	mov	r9, r0
 8009e04:	f000 fc0c 	bl	800a620 <__mcmp>
 8009e08:	2800      	cmp	r0, #0
 8009e0a:	dcb0      	bgt.n	8009d6e <_dtoa_r+0xa5e>
 8009e0c:	d102      	bne.n	8009e14 <_dtoa_r+0xb04>
 8009e0e:	f018 0f01 	tst.w	r8, #1
 8009e12:	d1ac      	bne.n	8009d6e <_dtoa_r+0xa5e>
 8009e14:	4633      	mov	r3, r6
 8009e16:	461e      	mov	r6, r3
 8009e18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009e1c:	2a30      	cmp	r2, #48	@ 0x30
 8009e1e:	d0fa      	beq.n	8009e16 <_dtoa_r+0xb06>
 8009e20:	e5c2      	b.n	80099a8 <_dtoa_r+0x698>
 8009e22:	459a      	cmp	sl, r3
 8009e24:	d1a4      	bne.n	8009d70 <_dtoa_r+0xa60>
 8009e26:	9b04      	ldr	r3, [sp, #16]
 8009e28:	3301      	adds	r3, #1
 8009e2a:	9304      	str	r3, [sp, #16]
 8009e2c:	2331      	movs	r3, #49	@ 0x31
 8009e2e:	f88a 3000 	strb.w	r3, [sl]
 8009e32:	e5b9      	b.n	80099a8 <_dtoa_r+0x698>
 8009e34:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009e36:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009e94 <_dtoa_r+0xb84>
 8009e3a:	b11b      	cbz	r3, 8009e44 <_dtoa_r+0xb34>
 8009e3c:	f10a 0308 	add.w	r3, sl, #8
 8009e40:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009e42:	6013      	str	r3, [r2, #0]
 8009e44:	4650      	mov	r0, sl
 8009e46:	b019      	add	sp, #100	@ 0x64
 8009e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e4e:	2b01      	cmp	r3, #1
 8009e50:	f77f ae37 	ble.w	8009ac2 <_dtoa_r+0x7b2>
 8009e54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e56:	930a      	str	r3, [sp, #40]	@ 0x28
 8009e58:	2001      	movs	r0, #1
 8009e5a:	e655      	b.n	8009b08 <_dtoa_r+0x7f8>
 8009e5c:	9b00      	ldr	r3, [sp, #0]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	f77f aed6 	ble.w	8009c10 <_dtoa_r+0x900>
 8009e64:	4656      	mov	r6, sl
 8009e66:	4621      	mov	r1, r4
 8009e68:	4648      	mov	r0, r9
 8009e6a:	f7ff f9c7 	bl	80091fc <quorem>
 8009e6e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009e72:	f806 8b01 	strb.w	r8, [r6], #1
 8009e76:	9b00      	ldr	r3, [sp, #0]
 8009e78:	eba6 020a 	sub.w	r2, r6, sl
 8009e7c:	4293      	cmp	r3, r2
 8009e7e:	ddb3      	ble.n	8009de8 <_dtoa_r+0xad8>
 8009e80:	4649      	mov	r1, r9
 8009e82:	2300      	movs	r3, #0
 8009e84:	220a      	movs	r2, #10
 8009e86:	4658      	mov	r0, fp
 8009e88:	f000 f968 	bl	800a15c <__multadd>
 8009e8c:	4681      	mov	r9, r0
 8009e8e:	e7ea      	b.n	8009e66 <_dtoa_r+0xb56>
 8009e90:	0800d14f 	.word	0x0800d14f
 8009e94:	0800d0ea 	.word	0x0800d0ea

08009e98 <_free_r>:
 8009e98:	b538      	push	{r3, r4, r5, lr}
 8009e9a:	4605      	mov	r5, r0
 8009e9c:	2900      	cmp	r1, #0
 8009e9e:	d041      	beq.n	8009f24 <_free_r+0x8c>
 8009ea0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ea4:	1f0c      	subs	r4, r1, #4
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	bfb8      	it	lt
 8009eaa:	18e4      	addlt	r4, r4, r3
 8009eac:	f000 f8e8 	bl	800a080 <__malloc_lock>
 8009eb0:	4a1d      	ldr	r2, [pc, #116]	@ (8009f28 <_free_r+0x90>)
 8009eb2:	6813      	ldr	r3, [r2, #0]
 8009eb4:	b933      	cbnz	r3, 8009ec4 <_free_r+0x2c>
 8009eb6:	6063      	str	r3, [r4, #4]
 8009eb8:	6014      	str	r4, [r2, #0]
 8009eba:	4628      	mov	r0, r5
 8009ebc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ec0:	f000 b8e4 	b.w	800a08c <__malloc_unlock>
 8009ec4:	42a3      	cmp	r3, r4
 8009ec6:	d908      	bls.n	8009eda <_free_r+0x42>
 8009ec8:	6820      	ldr	r0, [r4, #0]
 8009eca:	1821      	adds	r1, r4, r0
 8009ecc:	428b      	cmp	r3, r1
 8009ece:	bf01      	itttt	eq
 8009ed0:	6819      	ldreq	r1, [r3, #0]
 8009ed2:	685b      	ldreq	r3, [r3, #4]
 8009ed4:	1809      	addeq	r1, r1, r0
 8009ed6:	6021      	streq	r1, [r4, #0]
 8009ed8:	e7ed      	b.n	8009eb6 <_free_r+0x1e>
 8009eda:	461a      	mov	r2, r3
 8009edc:	685b      	ldr	r3, [r3, #4]
 8009ede:	b10b      	cbz	r3, 8009ee4 <_free_r+0x4c>
 8009ee0:	42a3      	cmp	r3, r4
 8009ee2:	d9fa      	bls.n	8009eda <_free_r+0x42>
 8009ee4:	6811      	ldr	r1, [r2, #0]
 8009ee6:	1850      	adds	r0, r2, r1
 8009ee8:	42a0      	cmp	r0, r4
 8009eea:	d10b      	bne.n	8009f04 <_free_r+0x6c>
 8009eec:	6820      	ldr	r0, [r4, #0]
 8009eee:	4401      	add	r1, r0
 8009ef0:	1850      	adds	r0, r2, r1
 8009ef2:	4283      	cmp	r3, r0
 8009ef4:	6011      	str	r1, [r2, #0]
 8009ef6:	d1e0      	bne.n	8009eba <_free_r+0x22>
 8009ef8:	6818      	ldr	r0, [r3, #0]
 8009efa:	685b      	ldr	r3, [r3, #4]
 8009efc:	6053      	str	r3, [r2, #4]
 8009efe:	4408      	add	r0, r1
 8009f00:	6010      	str	r0, [r2, #0]
 8009f02:	e7da      	b.n	8009eba <_free_r+0x22>
 8009f04:	d902      	bls.n	8009f0c <_free_r+0x74>
 8009f06:	230c      	movs	r3, #12
 8009f08:	602b      	str	r3, [r5, #0]
 8009f0a:	e7d6      	b.n	8009eba <_free_r+0x22>
 8009f0c:	6820      	ldr	r0, [r4, #0]
 8009f0e:	1821      	adds	r1, r4, r0
 8009f10:	428b      	cmp	r3, r1
 8009f12:	bf04      	itt	eq
 8009f14:	6819      	ldreq	r1, [r3, #0]
 8009f16:	685b      	ldreq	r3, [r3, #4]
 8009f18:	6063      	str	r3, [r4, #4]
 8009f1a:	bf04      	itt	eq
 8009f1c:	1809      	addeq	r1, r1, r0
 8009f1e:	6021      	streq	r1, [r4, #0]
 8009f20:	6054      	str	r4, [r2, #4]
 8009f22:	e7ca      	b.n	8009eba <_free_r+0x22>
 8009f24:	bd38      	pop	{r3, r4, r5, pc}
 8009f26:	bf00      	nop
 8009f28:	20000ddc 	.word	0x20000ddc

08009f2c <malloc>:
 8009f2c:	4b02      	ldr	r3, [pc, #8]	@ (8009f38 <malloc+0xc>)
 8009f2e:	4601      	mov	r1, r0
 8009f30:	6818      	ldr	r0, [r3, #0]
 8009f32:	f000 b825 	b.w	8009f80 <_malloc_r>
 8009f36:	bf00      	nop
 8009f38:	20000060 	.word	0x20000060

08009f3c <sbrk_aligned>:
 8009f3c:	b570      	push	{r4, r5, r6, lr}
 8009f3e:	4e0f      	ldr	r6, [pc, #60]	@ (8009f7c <sbrk_aligned+0x40>)
 8009f40:	460c      	mov	r4, r1
 8009f42:	6831      	ldr	r1, [r6, #0]
 8009f44:	4605      	mov	r5, r0
 8009f46:	b911      	cbnz	r1, 8009f4e <sbrk_aligned+0x12>
 8009f48:	f001 ffd2 	bl	800bef0 <_sbrk_r>
 8009f4c:	6030      	str	r0, [r6, #0]
 8009f4e:	4621      	mov	r1, r4
 8009f50:	4628      	mov	r0, r5
 8009f52:	f001 ffcd 	bl	800bef0 <_sbrk_r>
 8009f56:	1c43      	adds	r3, r0, #1
 8009f58:	d103      	bne.n	8009f62 <sbrk_aligned+0x26>
 8009f5a:	f04f 34ff 	mov.w	r4, #4294967295
 8009f5e:	4620      	mov	r0, r4
 8009f60:	bd70      	pop	{r4, r5, r6, pc}
 8009f62:	1cc4      	adds	r4, r0, #3
 8009f64:	f024 0403 	bic.w	r4, r4, #3
 8009f68:	42a0      	cmp	r0, r4
 8009f6a:	d0f8      	beq.n	8009f5e <sbrk_aligned+0x22>
 8009f6c:	1a21      	subs	r1, r4, r0
 8009f6e:	4628      	mov	r0, r5
 8009f70:	f001 ffbe 	bl	800bef0 <_sbrk_r>
 8009f74:	3001      	adds	r0, #1
 8009f76:	d1f2      	bne.n	8009f5e <sbrk_aligned+0x22>
 8009f78:	e7ef      	b.n	8009f5a <sbrk_aligned+0x1e>
 8009f7a:	bf00      	nop
 8009f7c:	20000dd8 	.word	0x20000dd8

08009f80 <_malloc_r>:
 8009f80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f84:	1ccd      	adds	r5, r1, #3
 8009f86:	f025 0503 	bic.w	r5, r5, #3
 8009f8a:	3508      	adds	r5, #8
 8009f8c:	2d0c      	cmp	r5, #12
 8009f8e:	bf38      	it	cc
 8009f90:	250c      	movcc	r5, #12
 8009f92:	2d00      	cmp	r5, #0
 8009f94:	4606      	mov	r6, r0
 8009f96:	db01      	blt.n	8009f9c <_malloc_r+0x1c>
 8009f98:	42a9      	cmp	r1, r5
 8009f9a:	d904      	bls.n	8009fa6 <_malloc_r+0x26>
 8009f9c:	230c      	movs	r3, #12
 8009f9e:	6033      	str	r3, [r6, #0]
 8009fa0:	2000      	movs	r0, #0
 8009fa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fa6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a07c <_malloc_r+0xfc>
 8009faa:	f000 f869 	bl	800a080 <__malloc_lock>
 8009fae:	f8d8 3000 	ldr.w	r3, [r8]
 8009fb2:	461c      	mov	r4, r3
 8009fb4:	bb44      	cbnz	r4, 800a008 <_malloc_r+0x88>
 8009fb6:	4629      	mov	r1, r5
 8009fb8:	4630      	mov	r0, r6
 8009fba:	f7ff ffbf 	bl	8009f3c <sbrk_aligned>
 8009fbe:	1c43      	adds	r3, r0, #1
 8009fc0:	4604      	mov	r4, r0
 8009fc2:	d158      	bne.n	800a076 <_malloc_r+0xf6>
 8009fc4:	f8d8 4000 	ldr.w	r4, [r8]
 8009fc8:	4627      	mov	r7, r4
 8009fca:	2f00      	cmp	r7, #0
 8009fcc:	d143      	bne.n	800a056 <_malloc_r+0xd6>
 8009fce:	2c00      	cmp	r4, #0
 8009fd0:	d04b      	beq.n	800a06a <_malloc_r+0xea>
 8009fd2:	6823      	ldr	r3, [r4, #0]
 8009fd4:	4639      	mov	r1, r7
 8009fd6:	4630      	mov	r0, r6
 8009fd8:	eb04 0903 	add.w	r9, r4, r3
 8009fdc:	f001 ff88 	bl	800bef0 <_sbrk_r>
 8009fe0:	4581      	cmp	r9, r0
 8009fe2:	d142      	bne.n	800a06a <_malloc_r+0xea>
 8009fe4:	6821      	ldr	r1, [r4, #0]
 8009fe6:	1a6d      	subs	r5, r5, r1
 8009fe8:	4629      	mov	r1, r5
 8009fea:	4630      	mov	r0, r6
 8009fec:	f7ff ffa6 	bl	8009f3c <sbrk_aligned>
 8009ff0:	3001      	adds	r0, #1
 8009ff2:	d03a      	beq.n	800a06a <_malloc_r+0xea>
 8009ff4:	6823      	ldr	r3, [r4, #0]
 8009ff6:	442b      	add	r3, r5
 8009ff8:	6023      	str	r3, [r4, #0]
 8009ffa:	f8d8 3000 	ldr.w	r3, [r8]
 8009ffe:	685a      	ldr	r2, [r3, #4]
 800a000:	bb62      	cbnz	r2, 800a05c <_malloc_r+0xdc>
 800a002:	f8c8 7000 	str.w	r7, [r8]
 800a006:	e00f      	b.n	800a028 <_malloc_r+0xa8>
 800a008:	6822      	ldr	r2, [r4, #0]
 800a00a:	1b52      	subs	r2, r2, r5
 800a00c:	d420      	bmi.n	800a050 <_malloc_r+0xd0>
 800a00e:	2a0b      	cmp	r2, #11
 800a010:	d917      	bls.n	800a042 <_malloc_r+0xc2>
 800a012:	1961      	adds	r1, r4, r5
 800a014:	42a3      	cmp	r3, r4
 800a016:	6025      	str	r5, [r4, #0]
 800a018:	bf18      	it	ne
 800a01a:	6059      	strne	r1, [r3, #4]
 800a01c:	6863      	ldr	r3, [r4, #4]
 800a01e:	bf08      	it	eq
 800a020:	f8c8 1000 	streq.w	r1, [r8]
 800a024:	5162      	str	r2, [r4, r5]
 800a026:	604b      	str	r3, [r1, #4]
 800a028:	4630      	mov	r0, r6
 800a02a:	f000 f82f 	bl	800a08c <__malloc_unlock>
 800a02e:	f104 000b 	add.w	r0, r4, #11
 800a032:	1d23      	adds	r3, r4, #4
 800a034:	f020 0007 	bic.w	r0, r0, #7
 800a038:	1ac2      	subs	r2, r0, r3
 800a03a:	bf1c      	itt	ne
 800a03c:	1a1b      	subne	r3, r3, r0
 800a03e:	50a3      	strne	r3, [r4, r2]
 800a040:	e7af      	b.n	8009fa2 <_malloc_r+0x22>
 800a042:	6862      	ldr	r2, [r4, #4]
 800a044:	42a3      	cmp	r3, r4
 800a046:	bf0c      	ite	eq
 800a048:	f8c8 2000 	streq.w	r2, [r8]
 800a04c:	605a      	strne	r2, [r3, #4]
 800a04e:	e7eb      	b.n	800a028 <_malloc_r+0xa8>
 800a050:	4623      	mov	r3, r4
 800a052:	6864      	ldr	r4, [r4, #4]
 800a054:	e7ae      	b.n	8009fb4 <_malloc_r+0x34>
 800a056:	463c      	mov	r4, r7
 800a058:	687f      	ldr	r7, [r7, #4]
 800a05a:	e7b6      	b.n	8009fca <_malloc_r+0x4a>
 800a05c:	461a      	mov	r2, r3
 800a05e:	685b      	ldr	r3, [r3, #4]
 800a060:	42a3      	cmp	r3, r4
 800a062:	d1fb      	bne.n	800a05c <_malloc_r+0xdc>
 800a064:	2300      	movs	r3, #0
 800a066:	6053      	str	r3, [r2, #4]
 800a068:	e7de      	b.n	800a028 <_malloc_r+0xa8>
 800a06a:	230c      	movs	r3, #12
 800a06c:	6033      	str	r3, [r6, #0]
 800a06e:	4630      	mov	r0, r6
 800a070:	f000 f80c 	bl	800a08c <__malloc_unlock>
 800a074:	e794      	b.n	8009fa0 <_malloc_r+0x20>
 800a076:	6005      	str	r5, [r0, #0]
 800a078:	e7d6      	b.n	800a028 <_malloc_r+0xa8>
 800a07a:	bf00      	nop
 800a07c:	20000ddc 	.word	0x20000ddc

0800a080 <__malloc_lock>:
 800a080:	4801      	ldr	r0, [pc, #4]	@ (800a088 <__malloc_lock+0x8>)
 800a082:	f7ff b886 	b.w	8009192 <__retarget_lock_acquire_recursive>
 800a086:	bf00      	nop
 800a088:	20000dd4 	.word	0x20000dd4

0800a08c <__malloc_unlock>:
 800a08c:	4801      	ldr	r0, [pc, #4]	@ (800a094 <__malloc_unlock+0x8>)
 800a08e:	f7ff b881 	b.w	8009194 <__retarget_lock_release_recursive>
 800a092:	bf00      	nop
 800a094:	20000dd4 	.word	0x20000dd4

0800a098 <_Balloc>:
 800a098:	b570      	push	{r4, r5, r6, lr}
 800a09a:	69c6      	ldr	r6, [r0, #28]
 800a09c:	4604      	mov	r4, r0
 800a09e:	460d      	mov	r5, r1
 800a0a0:	b976      	cbnz	r6, 800a0c0 <_Balloc+0x28>
 800a0a2:	2010      	movs	r0, #16
 800a0a4:	f7ff ff42 	bl	8009f2c <malloc>
 800a0a8:	4602      	mov	r2, r0
 800a0aa:	61e0      	str	r0, [r4, #28]
 800a0ac:	b920      	cbnz	r0, 800a0b8 <_Balloc+0x20>
 800a0ae:	4b18      	ldr	r3, [pc, #96]	@ (800a110 <_Balloc+0x78>)
 800a0b0:	4818      	ldr	r0, [pc, #96]	@ (800a114 <_Balloc+0x7c>)
 800a0b2:	216b      	movs	r1, #107	@ 0x6b
 800a0b4:	f7ff f884 	bl	80091c0 <__assert_func>
 800a0b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a0bc:	6006      	str	r6, [r0, #0]
 800a0be:	60c6      	str	r6, [r0, #12]
 800a0c0:	69e6      	ldr	r6, [r4, #28]
 800a0c2:	68f3      	ldr	r3, [r6, #12]
 800a0c4:	b183      	cbz	r3, 800a0e8 <_Balloc+0x50>
 800a0c6:	69e3      	ldr	r3, [r4, #28]
 800a0c8:	68db      	ldr	r3, [r3, #12]
 800a0ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a0ce:	b9b8      	cbnz	r0, 800a100 <_Balloc+0x68>
 800a0d0:	2101      	movs	r1, #1
 800a0d2:	fa01 f605 	lsl.w	r6, r1, r5
 800a0d6:	1d72      	adds	r2, r6, #5
 800a0d8:	0092      	lsls	r2, r2, #2
 800a0da:	4620      	mov	r0, r4
 800a0dc:	f001 ff27 	bl	800bf2e <_calloc_r>
 800a0e0:	b160      	cbz	r0, 800a0fc <_Balloc+0x64>
 800a0e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a0e6:	e00e      	b.n	800a106 <_Balloc+0x6e>
 800a0e8:	2221      	movs	r2, #33	@ 0x21
 800a0ea:	2104      	movs	r1, #4
 800a0ec:	4620      	mov	r0, r4
 800a0ee:	f001 ff1e 	bl	800bf2e <_calloc_r>
 800a0f2:	69e3      	ldr	r3, [r4, #28]
 800a0f4:	60f0      	str	r0, [r6, #12]
 800a0f6:	68db      	ldr	r3, [r3, #12]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d1e4      	bne.n	800a0c6 <_Balloc+0x2e>
 800a0fc:	2000      	movs	r0, #0
 800a0fe:	bd70      	pop	{r4, r5, r6, pc}
 800a100:	6802      	ldr	r2, [r0, #0]
 800a102:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a106:	2300      	movs	r3, #0
 800a108:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a10c:	e7f7      	b.n	800a0fe <_Balloc+0x66>
 800a10e:	bf00      	nop
 800a110:	0800d03d 	.word	0x0800d03d
 800a114:	0800d160 	.word	0x0800d160

0800a118 <_Bfree>:
 800a118:	b570      	push	{r4, r5, r6, lr}
 800a11a:	69c6      	ldr	r6, [r0, #28]
 800a11c:	4605      	mov	r5, r0
 800a11e:	460c      	mov	r4, r1
 800a120:	b976      	cbnz	r6, 800a140 <_Bfree+0x28>
 800a122:	2010      	movs	r0, #16
 800a124:	f7ff ff02 	bl	8009f2c <malloc>
 800a128:	4602      	mov	r2, r0
 800a12a:	61e8      	str	r0, [r5, #28]
 800a12c:	b920      	cbnz	r0, 800a138 <_Bfree+0x20>
 800a12e:	4b09      	ldr	r3, [pc, #36]	@ (800a154 <_Bfree+0x3c>)
 800a130:	4809      	ldr	r0, [pc, #36]	@ (800a158 <_Bfree+0x40>)
 800a132:	218f      	movs	r1, #143	@ 0x8f
 800a134:	f7ff f844 	bl	80091c0 <__assert_func>
 800a138:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a13c:	6006      	str	r6, [r0, #0]
 800a13e:	60c6      	str	r6, [r0, #12]
 800a140:	b13c      	cbz	r4, 800a152 <_Bfree+0x3a>
 800a142:	69eb      	ldr	r3, [r5, #28]
 800a144:	6862      	ldr	r2, [r4, #4]
 800a146:	68db      	ldr	r3, [r3, #12]
 800a148:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a14c:	6021      	str	r1, [r4, #0]
 800a14e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a152:	bd70      	pop	{r4, r5, r6, pc}
 800a154:	0800d03d 	.word	0x0800d03d
 800a158:	0800d160 	.word	0x0800d160

0800a15c <__multadd>:
 800a15c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a160:	690d      	ldr	r5, [r1, #16]
 800a162:	4607      	mov	r7, r0
 800a164:	460c      	mov	r4, r1
 800a166:	461e      	mov	r6, r3
 800a168:	f101 0c14 	add.w	ip, r1, #20
 800a16c:	2000      	movs	r0, #0
 800a16e:	f8dc 3000 	ldr.w	r3, [ip]
 800a172:	b299      	uxth	r1, r3
 800a174:	fb02 6101 	mla	r1, r2, r1, r6
 800a178:	0c1e      	lsrs	r6, r3, #16
 800a17a:	0c0b      	lsrs	r3, r1, #16
 800a17c:	fb02 3306 	mla	r3, r2, r6, r3
 800a180:	b289      	uxth	r1, r1
 800a182:	3001      	adds	r0, #1
 800a184:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a188:	4285      	cmp	r5, r0
 800a18a:	f84c 1b04 	str.w	r1, [ip], #4
 800a18e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a192:	dcec      	bgt.n	800a16e <__multadd+0x12>
 800a194:	b30e      	cbz	r6, 800a1da <__multadd+0x7e>
 800a196:	68a3      	ldr	r3, [r4, #8]
 800a198:	42ab      	cmp	r3, r5
 800a19a:	dc19      	bgt.n	800a1d0 <__multadd+0x74>
 800a19c:	6861      	ldr	r1, [r4, #4]
 800a19e:	4638      	mov	r0, r7
 800a1a0:	3101      	adds	r1, #1
 800a1a2:	f7ff ff79 	bl	800a098 <_Balloc>
 800a1a6:	4680      	mov	r8, r0
 800a1a8:	b928      	cbnz	r0, 800a1b6 <__multadd+0x5a>
 800a1aa:	4602      	mov	r2, r0
 800a1ac:	4b0c      	ldr	r3, [pc, #48]	@ (800a1e0 <__multadd+0x84>)
 800a1ae:	480d      	ldr	r0, [pc, #52]	@ (800a1e4 <__multadd+0x88>)
 800a1b0:	21ba      	movs	r1, #186	@ 0xba
 800a1b2:	f7ff f805 	bl	80091c0 <__assert_func>
 800a1b6:	6922      	ldr	r2, [r4, #16]
 800a1b8:	3202      	adds	r2, #2
 800a1ba:	f104 010c 	add.w	r1, r4, #12
 800a1be:	0092      	lsls	r2, r2, #2
 800a1c0:	300c      	adds	r0, #12
 800a1c2:	f7fe ffe8 	bl	8009196 <memcpy>
 800a1c6:	4621      	mov	r1, r4
 800a1c8:	4638      	mov	r0, r7
 800a1ca:	f7ff ffa5 	bl	800a118 <_Bfree>
 800a1ce:	4644      	mov	r4, r8
 800a1d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a1d4:	3501      	adds	r5, #1
 800a1d6:	615e      	str	r6, [r3, #20]
 800a1d8:	6125      	str	r5, [r4, #16]
 800a1da:	4620      	mov	r0, r4
 800a1dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1e0:	0800d14f 	.word	0x0800d14f
 800a1e4:	0800d160 	.word	0x0800d160

0800a1e8 <__s2b>:
 800a1e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1ec:	460c      	mov	r4, r1
 800a1ee:	4615      	mov	r5, r2
 800a1f0:	461f      	mov	r7, r3
 800a1f2:	2209      	movs	r2, #9
 800a1f4:	3308      	adds	r3, #8
 800a1f6:	4606      	mov	r6, r0
 800a1f8:	fb93 f3f2 	sdiv	r3, r3, r2
 800a1fc:	2100      	movs	r1, #0
 800a1fe:	2201      	movs	r2, #1
 800a200:	429a      	cmp	r2, r3
 800a202:	db09      	blt.n	800a218 <__s2b+0x30>
 800a204:	4630      	mov	r0, r6
 800a206:	f7ff ff47 	bl	800a098 <_Balloc>
 800a20a:	b940      	cbnz	r0, 800a21e <__s2b+0x36>
 800a20c:	4602      	mov	r2, r0
 800a20e:	4b19      	ldr	r3, [pc, #100]	@ (800a274 <__s2b+0x8c>)
 800a210:	4819      	ldr	r0, [pc, #100]	@ (800a278 <__s2b+0x90>)
 800a212:	21d3      	movs	r1, #211	@ 0xd3
 800a214:	f7fe ffd4 	bl	80091c0 <__assert_func>
 800a218:	0052      	lsls	r2, r2, #1
 800a21a:	3101      	adds	r1, #1
 800a21c:	e7f0      	b.n	800a200 <__s2b+0x18>
 800a21e:	9b08      	ldr	r3, [sp, #32]
 800a220:	6143      	str	r3, [r0, #20]
 800a222:	2d09      	cmp	r5, #9
 800a224:	f04f 0301 	mov.w	r3, #1
 800a228:	6103      	str	r3, [r0, #16]
 800a22a:	dd16      	ble.n	800a25a <__s2b+0x72>
 800a22c:	f104 0909 	add.w	r9, r4, #9
 800a230:	46c8      	mov	r8, r9
 800a232:	442c      	add	r4, r5
 800a234:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a238:	4601      	mov	r1, r0
 800a23a:	3b30      	subs	r3, #48	@ 0x30
 800a23c:	220a      	movs	r2, #10
 800a23e:	4630      	mov	r0, r6
 800a240:	f7ff ff8c 	bl	800a15c <__multadd>
 800a244:	45a0      	cmp	r8, r4
 800a246:	d1f5      	bne.n	800a234 <__s2b+0x4c>
 800a248:	f1a5 0408 	sub.w	r4, r5, #8
 800a24c:	444c      	add	r4, r9
 800a24e:	1b2d      	subs	r5, r5, r4
 800a250:	1963      	adds	r3, r4, r5
 800a252:	42bb      	cmp	r3, r7
 800a254:	db04      	blt.n	800a260 <__s2b+0x78>
 800a256:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a25a:	340a      	adds	r4, #10
 800a25c:	2509      	movs	r5, #9
 800a25e:	e7f6      	b.n	800a24e <__s2b+0x66>
 800a260:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a264:	4601      	mov	r1, r0
 800a266:	3b30      	subs	r3, #48	@ 0x30
 800a268:	220a      	movs	r2, #10
 800a26a:	4630      	mov	r0, r6
 800a26c:	f7ff ff76 	bl	800a15c <__multadd>
 800a270:	e7ee      	b.n	800a250 <__s2b+0x68>
 800a272:	bf00      	nop
 800a274:	0800d14f 	.word	0x0800d14f
 800a278:	0800d160 	.word	0x0800d160

0800a27c <__hi0bits>:
 800a27c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a280:	4603      	mov	r3, r0
 800a282:	bf36      	itet	cc
 800a284:	0403      	lslcc	r3, r0, #16
 800a286:	2000      	movcs	r0, #0
 800a288:	2010      	movcc	r0, #16
 800a28a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a28e:	bf3c      	itt	cc
 800a290:	021b      	lslcc	r3, r3, #8
 800a292:	3008      	addcc	r0, #8
 800a294:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a298:	bf3c      	itt	cc
 800a29a:	011b      	lslcc	r3, r3, #4
 800a29c:	3004      	addcc	r0, #4
 800a29e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a2a2:	bf3c      	itt	cc
 800a2a4:	009b      	lslcc	r3, r3, #2
 800a2a6:	3002      	addcc	r0, #2
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	db05      	blt.n	800a2b8 <__hi0bits+0x3c>
 800a2ac:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a2b0:	f100 0001 	add.w	r0, r0, #1
 800a2b4:	bf08      	it	eq
 800a2b6:	2020      	moveq	r0, #32
 800a2b8:	4770      	bx	lr

0800a2ba <__lo0bits>:
 800a2ba:	6803      	ldr	r3, [r0, #0]
 800a2bc:	4602      	mov	r2, r0
 800a2be:	f013 0007 	ands.w	r0, r3, #7
 800a2c2:	d00b      	beq.n	800a2dc <__lo0bits+0x22>
 800a2c4:	07d9      	lsls	r1, r3, #31
 800a2c6:	d421      	bmi.n	800a30c <__lo0bits+0x52>
 800a2c8:	0798      	lsls	r0, r3, #30
 800a2ca:	bf49      	itett	mi
 800a2cc:	085b      	lsrmi	r3, r3, #1
 800a2ce:	089b      	lsrpl	r3, r3, #2
 800a2d0:	2001      	movmi	r0, #1
 800a2d2:	6013      	strmi	r3, [r2, #0]
 800a2d4:	bf5c      	itt	pl
 800a2d6:	6013      	strpl	r3, [r2, #0]
 800a2d8:	2002      	movpl	r0, #2
 800a2da:	4770      	bx	lr
 800a2dc:	b299      	uxth	r1, r3
 800a2de:	b909      	cbnz	r1, 800a2e4 <__lo0bits+0x2a>
 800a2e0:	0c1b      	lsrs	r3, r3, #16
 800a2e2:	2010      	movs	r0, #16
 800a2e4:	b2d9      	uxtb	r1, r3
 800a2e6:	b909      	cbnz	r1, 800a2ec <__lo0bits+0x32>
 800a2e8:	3008      	adds	r0, #8
 800a2ea:	0a1b      	lsrs	r3, r3, #8
 800a2ec:	0719      	lsls	r1, r3, #28
 800a2ee:	bf04      	itt	eq
 800a2f0:	091b      	lsreq	r3, r3, #4
 800a2f2:	3004      	addeq	r0, #4
 800a2f4:	0799      	lsls	r1, r3, #30
 800a2f6:	bf04      	itt	eq
 800a2f8:	089b      	lsreq	r3, r3, #2
 800a2fa:	3002      	addeq	r0, #2
 800a2fc:	07d9      	lsls	r1, r3, #31
 800a2fe:	d403      	bmi.n	800a308 <__lo0bits+0x4e>
 800a300:	085b      	lsrs	r3, r3, #1
 800a302:	f100 0001 	add.w	r0, r0, #1
 800a306:	d003      	beq.n	800a310 <__lo0bits+0x56>
 800a308:	6013      	str	r3, [r2, #0]
 800a30a:	4770      	bx	lr
 800a30c:	2000      	movs	r0, #0
 800a30e:	4770      	bx	lr
 800a310:	2020      	movs	r0, #32
 800a312:	4770      	bx	lr

0800a314 <__i2b>:
 800a314:	b510      	push	{r4, lr}
 800a316:	460c      	mov	r4, r1
 800a318:	2101      	movs	r1, #1
 800a31a:	f7ff febd 	bl	800a098 <_Balloc>
 800a31e:	4602      	mov	r2, r0
 800a320:	b928      	cbnz	r0, 800a32e <__i2b+0x1a>
 800a322:	4b05      	ldr	r3, [pc, #20]	@ (800a338 <__i2b+0x24>)
 800a324:	4805      	ldr	r0, [pc, #20]	@ (800a33c <__i2b+0x28>)
 800a326:	f240 1145 	movw	r1, #325	@ 0x145
 800a32a:	f7fe ff49 	bl	80091c0 <__assert_func>
 800a32e:	2301      	movs	r3, #1
 800a330:	6144      	str	r4, [r0, #20]
 800a332:	6103      	str	r3, [r0, #16]
 800a334:	bd10      	pop	{r4, pc}
 800a336:	bf00      	nop
 800a338:	0800d14f 	.word	0x0800d14f
 800a33c:	0800d160 	.word	0x0800d160

0800a340 <__multiply>:
 800a340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a344:	4614      	mov	r4, r2
 800a346:	690a      	ldr	r2, [r1, #16]
 800a348:	6923      	ldr	r3, [r4, #16]
 800a34a:	429a      	cmp	r2, r3
 800a34c:	bfa8      	it	ge
 800a34e:	4623      	movge	r3, r4
 800a350:	460f      	mov	r7, r1
 800a352:	bfa4      	itt	ge
 800a354:	460c      	movge	r4, r1
 800a356:	461f      	movge	r7, r3
 800a358:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a35c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a360:	68a3      	ldr	r3, [r4, #8]
 800a362:	6861      	ldr	r1, [r4, #4]
 800a364:	eb0a 0609 	add.w	r6, sl, r9
 800a368:	42b3      	cmp	r3, r6
 800a36a:	b085      	sub	sp, #20
 800a36c:	bfb8      	it	lt
 800a36e:	3101      	addlt	r1, #1
 800a370:	f7ff fe92 	bl	800a098 <_Balloc>
 800a374:	b930      	cbnz	r0, 800a384 <__multiply+0x44>
 800a376:	4602      	mov	r2, r0
 800a378:	4b44      	ldr	r3, [pc, #272]	@ (800a48c <__multiply+0x14c>)
 800a37a:	4845      	ldr	r0, [pc, #276]	@ (800a490 <__multiply+0x150>)
 800a37c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a380:	f7fe ff1e 	bl	80091c0 <__assert_func>
 800a384:	f100 0514 	add.w	r5, r0, #20
 800a388:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a38c:	462b      	mov	r3, r5
 800a38e:	2200      	movs	r2, #0
 800a390:	4543      	cmp	r3, r8
 800a392:	d321      	bcc.n	800a3d8 <__multiply+0x98>
 800a394:	f107 0114 	add.w	r1, r7, #20
 800a398:	f104 0214 	add.w	r2, r4, #20
 800a39c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a3a0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a3a4:	9302      	str	r3, [sp, #8]
 800a3a6:	1b13      	subs	r3, r2, r4
 800a3a8:	3b15      	subs	r3, #21
 800a3aa:	f023 0303 	bic.w	r3, r3, #3
 800a3ae:	3304      	adds	r3, #4
 800a3b0:	f104 0715 	add.w	r7, r4, #21
 800a3b4:	42ba      	cmp	r2, r7
 800a3b6:	bf38      	it	cc
 800a3b8:	2304      	movcc	r3, #4
 800a3ba:	9301      	str	r3, [sp, #4]
 800a3bc:	9b02      	ldr	r3, [sp, #8]
 800a3be:	9103      	str	r1, [sp, #12]
 800a3c0:	428b      	cmp	r3, r1
 800a3c2:	d80c      	bhi.n	800a3de <__multiply+0x9e>
 800a3c4:	2e00      	cmp	r6, #0
 800a3c6:	dd03      	ble.n	800a3d0 <__multiply+0x90>
 800a3c8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d05b      	beq.n	800a488 <__multiply+0x148>
 800a3d0:	6106      	str	r6, [r0, #16]
 800a3d2:	b005      	add	sp, #20
 800a3d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3d8:	f843 2b04 	str.w	r2, [r3], #4
 800a3dc:	e7d8      	b.n	800a390 <__multiply+0x50>
 800a3de:	f8b1 a000 	ldrh.w	sl, [r1]
 800a3e2:	f1ba 0f00 	cmp.w	sl, #0
 800a3e6:	d024      	beq.n	800a432 <__multiply+0xf2>
 800a3e8:	f104 0e14 	add.w	lr, r4, #20
 800a3ec:	46a9      	mov	r9, r5
 800a3ee:	f04f 0c00 	mov.w	ip, #0
 800a3f2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a3f6:	f8d9 3000 	ldr.w	r3, [r9]
 800a3fa:	fa1f fb87 	uxth.w	fp, r7
 800a3fe:	b29b      	uxth	r3, r3
 800a400:	fb0a 330b 	mla	r3, sl, fp, r3
 800a404:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a408:	f8d9 7000 	ldr.w	r7, [r9]
 800a40c:	4463      	add	r3, ip
 800a40e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a412:	fb0a c70b 	mla	r7, sl, fp, ip
 800a416:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a41a:	b29b      	uxth	r3, r3
 800a41c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a420:	4572      	cmp	r2, lr
 800a422:	f849 3b04 	str.w	r3, [r9], #4
 800a426:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a42a:	d8e2      	bhi.n	800a3f2 <__multiply+0xb2>
 800a42c:	9b01      	ldr	r3, [sp, #4]
 800a42e:	f845 c003 	str.w	ip, [r5, r3]
 800a432:	9b03      	ldr	r3, [sp, #12]
 800a434:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a438:	3104      	adds	r1, #4
 800a43a:	f1b9 0f00 	cmp.w	r9, #0
 800a43e:	d021      	beq.n	800a484 <__multiply+0x144>
 800a440:	682b      	ldr	r3, [r5, #0]
 800a442:	f104 0c14 	add.w	ip, r4, #20
 800a446:	46ae      	mov	lr, r5
 800a448:	f04f 0a00 	mov.w	sl, #0
 800a44c:	f8bc b000 	ldrh.w	fp, [ip]
 800a450:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a454:	fb09 770b 	mla	r7, r9, fp, r7
 800a458:	4457      	add	r7, sl
 800a45a:	b29b      	uxth	r3, r3
 800a45c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a460:	f84e 3b04 	str.w	r3, [lr], #4
 800a464:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a468:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a46c:	f8be 3000 	ldrh.w	r3, [lr]
 800a470:	fb09 330a 	mla	r3, r9, sl, r3
 800a474:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a478:	4562      	cmp	r2, ip
 800a47a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a47e:	d8e5      	bhi.n	800a44c <__multiply+0x10c>
 800a480:	9f01      	ldr	r7, [sp, #4]
 800a482:	51eb      	str	r3, [r5, r7]
 800a484:	3504      	adds	r5, #4
 800a486:	e799      	b.n	800a3bc <__multiply+0x7c>
 800a488:	3e01      	subs	r6, #1
 800a48a:	e79b      	b.n	800a3c4 <__multiply+0x84>
 800a48c:	0800d14f 	.word	0x0800d14f
 800a490:	0800d160 	.word	0x0800d160

0800a494 <__pow5mult>:
 800a494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a498:	4615      	mov	r5, r2
 800a49a:	f012 0203 	ands.w	r2, r2, #3
 800a49e:	4607      	mov	r7, r0
 800a4a0:	460e      	mov	r6, r1
 800a4a2:	d007      	beq.n	800a4b4 <__pow5mult+0x20>
 800a4a4:	4c25      	ldr	r4, [pc, #148]	@ (800a53c <__pow5mult+0xa8>)
 800a4a6:	3a01      	subs	r2, #1
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a4ae:	f7ff fe55 	bl	800a15c <__multadd>
 800a4b2:	4606      	mov	r6, r0
 800a4b4:	10ad      	asrs	r5, r5, #2
 800a4b6:	d03d      	beq.n	800a534 <__pow5mult+0xa0>
 800a4b8:	69fc      	ldr	r4, [r7, #28]
 800a4ba:	b97c      	cbnz	r4, 800a4dc <__pow5mult+0x48>
 800a4bc:	2010      	movs	r0, #16
 800a4be:	f7ff fd35 	bl	8009f2c <malloc>
 800a4c2:	4602      	mov	r2, r0
 800a4c4:	61f8      	str	r0, [r7, #28]
 800a4c6:	b928      	cbnz	r0, 800a4d4 <__pow5mult+0x40>
 800a4c8:	4b1d      	ldr	r3, [pc, #116]	@ (800a540 <__pow5mult+0xac>)
 800a4ca:	481e      	ldr	r0, [pc, #120]	@ (800a544 <__pow5mult+0xb0>)
 800a4cc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a4d0:	f7fe fe76 	bl	80091c0 <__assert_func>
 800a4d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a4d8:	6004      	str	r4, [r0, #0]
 800a4da:	60c4      	str	r4, [r0, #12]
 800a4dc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a4e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a4e4:	b94c      	cbnz	r4, 800a4fa <__pow5mult+0x66>
 800a4e6:	f240 2171 	movw	r1, #625	@ 0x271
 800a4ea:	4638      	mov	r0, r7
 800a4ec:	f7ff ff12 	bl	800a314 <__i2b>
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	f8c8 0008 	str.w	r0, [r8, #8]
 800a4f6:	4604      	mov	r4, r0
 800a4f8:	6003      	str	r3, [r0, #0]
 800a4fa:	f04f 0900 	mov.w	r9, #0
 800a4fe:	07eb      	lsls	r3, r5, #31
 800a500:	d50a      	bpl.n	800a518 <__pow5mult+0x84>
 800a502:	4631      	mov	r1, r6
 800a504:	4622      	mov	r2, r4
 800a506:	4638      	mov	r0, r7
 800a508:	f7ff ff1a 	bl	800a340 <__multiply>
 800a50c:	4631      	mov	r1, r6
 800a50e:	4680      	mov	r8, r0
 800a510:	4638      	mov	r0, r7
 800a512:	f7ff fe01 	bl	800a118 <_Bfree>
 800a516:	4646      	mov	r6, r8
 800a518:	106d      	asrs	r5, r5, #1
 800a51a:	d00b      	beq.n	800a534 <__pow5mult+0xa0>
 800a51c:	6820      	ldr	r0, [r4, #0]
 800a51e:	b938      	cbnz	r0, 800a530 <__pow5mult+0x9c>
 800a520:	4622      	mov	r2, r4
 800a522:	4621      	mov	r1, r4
 800a524:	4638      	mov	r0, r7
 800a526:	f7ff ff0b 	bl	800a340 <__multiply>
 800a52a:	6020      	str	r0, [r4, #0]
 800a52c:	f8c0 9000 	str.w	r9, [r0]
 800a530:	4604      	mov	r4, r0
 800a532:	e7e4      	b.n	800a4fe <__pow5mult+0x6a>
 800a534:	4630      	mov	r0, r6
 800a536:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a53a:	bf00      	nop
 800a53c:	0800d1bc 	.word	0x0800d1bc
 800a540:	0800d03d 	.word	0x0800d03d
 800a544:	0800d160 	.word	0x0800d160

0800a548 <__lshift>:
 800a548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a54c:	460c      	mov	r4, r1
 800a54e:	6849      	ldr	r1, [r1, #4]
 800a550:	6923      	ldr	r3, [r4, #16]
 800a552:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a556:	68a3      	ldr	r3, [r4, #8]
 800a558:	4607      	mov	r7, r0
 800a55a:	4691      	mov	r9, r2
 800a55c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a560:	f108 0601 	add.w	r6, r8, #1
 800a564:	42b3      	cmp	r3, r6
 800a566:	db0b      	blt.n	800a580 <__lshift+0x38>
 800a568:	4638      	mov	r0, r7
 800a56a:	f7ff fd95 	bl	800a098 <_Balloc>
 800a56e:	4605      	mov	r5, r0
 800a570:	b948      	cbnz	r0, 800a586 <__lshift+0x3e>
 800a572:	4602      	mov	r2, r0
 800a574:	4b28      	ldr	r3, [pc, #160]	@ (800a618 <__lshift+0xd0>)
 800a576:	4829      	ldr	r0, [pc, #164]	@ (800a61c <__lshift+0xd4>)
 800a578:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a57c:	f7fe fe20 	bl	80091c0 <__assert_func>
 800a580:	3101      	adds	r1, #1
 800a582:	005b      	lsls	r3, r3, #1
 800a584:	e7ee      	b.n	800a564 <__lshift+0x1c>
 800a586:	2300      	movs	r3, #0
 800a588:	f100 0114 	add.w	r1, r0, #20
 800a58c:	f100 0210 	add.w	r2, r0, #16
 800a590:	4618      	mov	r0, r3
 800a592:	4553      	cmp	r3, sl
 800a594:	db33      	blt.n	800a5fe <__lshift+0xb6>
 800a596:	6920      	ldr	r0, [r4, #16]
 800a598:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a59c:	f104 0314 	add.w	r3, r4, #20
 800a5a0:	f019 091f 	ands.w	r9, r9, #31
 800a5a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a5a8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a5ac:	d02b      	beq.n	800a606 <__lshift+0xbe>
 800a5ae:	f1c9 0e20 	rsb	lr, r9, #32
 800a5b2:	468a      	mov	sl, r1
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	6818      	ldr	r0, [r3, #0]
 800a5b8:	fa00 f009 	lsl.w	r0, r0, r9
 800a5bc:	4310      	orrs	r0, r2
 800a5be:	f84a 0b04 	str.w	r0, [sl], #4
 800a5c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5c6:	459c      	cmp	ip, r3
 800a5c8:	fa22 f20e 	lsr.w	r2, r2, lr
 800a5cc:	d8f3      	bhi.n	800a5b6 <__lshift+0x6e>
 800a5ce:	ebac 0304 	sub.w	r3, ip, r4
 800a5d2:	3b15      	subs	r3, #21
 800a5d4:	f023 0303 	bic.w	r3, r3, #3
 800a5d8:	3304      	adds	r3, #4
 800a5da:	f104 0015 	add.w	r0, r4, #21
 800a5de:	4584      	cmp	ip, r0
 800a5e0:	bf38      	it	cc
 800a5e2:	2304      	movcc	r3, #4
 800a5e4:	50ca      	str	r2, [r1, r3]
 800a5e6:	b10a      	cbz	r2, 800a5ec <__lshift+0xa4>
 800a5e8:	f108 0602 	add.w	r6, r8, #2
 800a5ec:	3e01      	subs	r6, #1
 800a5ee:	4638      	mov	r0, r7
 800a5f0:	612e      	str	r6, [r5, #16]
 800a5f2:	4621      	mov	r1, r4
 800a5f4:	f7ff fd90 	bl	800a118 <_Bfree>
 800a5f8:	4628      	mov	r0, r5
 800a5fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5fe:	f842 0f04 	str.w	r0, [r2, #4]!
 800a602:	3301      	adds	r3, #1
 800a604:	e7c5      	b.n	800a592 <__lshift+0x4a>
 800a606:	3904      	subs	r1, #4
 800a608:	f853 2b04 	ldr.w	r2, [r3], #4
 800a60c:	f841 2f04 	str.w	r2, [r1, #4]!
 800a610:	459c      	cmp	ip, r3
 800a612:	d8f9      	bhi.n	800a608 <__lshift+0xc0>
 800a614:	e7ea      	b.n	800a5ec <__lshift+0xa4>
 800a616:	bf00      	nop
 800a618:	0800d14f 	.word	0x0800d14f
 800a61c:	0800d160 	.word	0x0800d160

0800a620 <__mcmp>:
 800a620:	690a      	ldr	r2, [r1, #16]
 800a622:	4603      	mov	r3, r0
 800a624:	6900      	ldr	r0, [r0, #16]
 800a626:	1a80      	subs	r0, r0, r2
 800a628:	b530      	push	{r4, r5, lr}
 800a62a:	d10e      	bne.n	800a64a <__mcmp+0x2a>
 800a62c:	3314      	adds	r3, #20
 800a62e:	3114      	adds	r1, #20
 800a630:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a634:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a638:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a63c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a640:	4295      	cmp	r5, r2
 800a642:	d003      	beq.n	800a64c <__mcmp+0x2c>
 800a644:	d205      	bcs.n	800a652 <__mcmp+0x32>
 800a646:	f04f 30ff 	mov.w	r0, #4294967295
 800a64a:	bd30      	pop	{r4, r5, pc}
 800a64c:	42a3      	cmp	r3, r4
 800a64e:	d3f3      	bcc.n	800a638 <__mcmp+0x18>
 800a650:	e7fb      	b.n	800a64a <__mcmp+0x2a>
 800a652:	2001      	movs	r0, #1
 800a654:	e7f9      	b.n	800a64a <__mcmp+0x2a>
	...

0800a658 <__mdiff>:
 800a658:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a65c:	4689      	mov	r9, r1
 800a65e:	4606      	mov	r6, r0
 800a660:	4611      	mov	r1, r2
 800a662:	4648      	mov	r0, r9
 800a664:	4614      	mov	r4, r2
 800a666:	f7ff ffdb 	bl	800a620 <__mcmp>
 800a66a:	1e05      	subs	r5, r0, #0
 800a66c:	d112      	bne.n	800a694 <__mdiff+0x3c>
 800a66e:	4629      	mov	r1, r5
 800a670:	4630      	mov	r0, r6
 800a672:	f7ff fd11 	bl	800a098 <_Balloc>
 800a676:	4602      	mov	r2, r0
 800a678:	b928      	cbnz	r0, 800a686 <__mdiff+0x2e>
 800a67a:	4b3f      	ldr	r3, [pc, #252]	@ (800a778 <__mdiff+0x120>)
 800a67c:	f240 2137 	movw	r1, #567	@ 0x237
 800a680:	483e      	ldr	r0, [pc, #248]	@ (800a77c <__mdiff+0x124>)
 800a682:	f7fe fd9d 	bl	80091c0 <__assert_func>
 800a686:	2301      	movs	r3, #1
 800a688:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a68c:	4610      	mov	r0, r2
 800a68e:	b003      	add	sp, #12
 800a690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a694:	bfbc      	itt	lt
 800a696:	464b      	movlt	r3, r9
 800a698:	46a1      	movlt	r9, r4
 800a69a:	4630      	mov	r0, r6
 800a69c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a6a0:	bfba      	itte	lt
 800a6a2:	461c      	movlt	r4, r3
 800a6a4:	2501      	movlt	r5, #1
 800a6a6:	2500      	movge	r5, #0
 800a6a8:	f7ff fcf6 	bl	800a098 <_Balloc>
 800a6ac:	4602      	mov	r2, r0
 800a6ae:	b918      	cbnz	r0, 800a6b8 <__mdiff+0x60>
 800a6b0:	4b31      	ldr	r3, [pc, #196]	@ (800a778 <__mdiff+0x120>)
 800a6b2:	f240 2145 	movw	r1, #581	@ 0x245
 800a6b6:	e7e3      	b.n	800a680 <__mdiff+0x28>
 800a6b8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a6bc:	6926      	ldr	r6, [r4, #16]
 800a6be:	60c5      	str	r5, [r0, #12]
 800a6c0:	f109 0310 	add.w	r3, r9, #16
 800a6c4:	f109 0514 	add.w	r5, r9, #20
 800a6c8:	f104 0e14 	add.w	lr, r4, #20
 800a6cc:	f100 0b14 	add.w	fp, r0, #20
 800a6d0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a6d4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a6d8:	9301      	str	r3, [sp, #4]
 800a6da:	46d9      	mov	r9, fp
 800a6dc:	f04f 0c00 	mov.w	ip, #0
 800a6e0:	9b01      	ldr	r3, [sp, #4]
 800a6e2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a6e6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a6ea:	9301      	str	r3, [sp, #4]
 800a6ec:	fa1f f38a 	uxth.w	r3, sl
 800a6f0:	4619      	mov	r1, r3
 800a6f2:	b283      	uxth	r3, r0
 800a6f4:	1acb      	subs	r3, r1, r3
 800a6f6:	0c00      	lsrs	r0, r0, #16
 800a6f8:	4463      	add	r3, ip
 800a6fa:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a6fe:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a702:	b29b      	uxth	r3, r3
 800a704:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a708:	4576      	cmp	r6, lr
 800a70a:	f849 3b04 	str.w	r3, [r9], #4
 800a70e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a712:	d8e5      	bhi.n	800a6e0 <__mdiff+0x88>
 800a714:	1b33      	subs	r3, r6, r4
 800a716:	3b15      	subs	r3, #21
 800a718:	f023 0303 	bic.w	r3, r3, #3
 800a71c:	3415      	adds	r4, #21
 800a71e:	3304      	adds	r3, #4
 800a720:	42a6      	cmp	r6, r4
 800a722:	bf38      	it	cc
 800a724:	2304      	movcc	r3, #4
 800a726:	441d      	add	r5, r3
 800a728:	445b      	add	r3, fp
 800a72a:	461e      	mov	r6, r3
 800a72c:	462c      	mov	r4, r5
 800a72e:	4544      	cmp	r4, r8
 800a730:	d30e      	bcc.n	800a750 <__mdiff+0xf8>
 800a732:	f108 0103 	add.w	r1, r8, #3
 800a736:	1b49      	subs	r1, r1, r5
 800a738:	f021 0103 	bic.w	r1, r1, #3
 800a73c:	3d03      	subs	r5, #3
 800a73e:	45a8      	cmp	r8, r5
 800a740:	bf38      	it	cc
 800a742:	2100      	movcc	r1, #0
 800a744:	440b      	add	r3, r1
 800a746:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a74a:	b191      	cbz	r1, 800a772 <__mdiff+0x11a>
 800a74c:	6117      	str	r7, [r2, #16]
 800a74e:	e79d      	b.n	800a68c <__mdiff+0x34>
 800a750:	f854 1b04 	ldr.w	r1, [r4], #4
 800a754:	46e6      	mov	lr, ip
 800a756:	0c08      	lsrs	r0, r1, #16
 800a758:	fa1c fc81 	uxtah	ip, ip, r1
 800a75c:	4471      	add	r1, lr
 800a75e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a762:	b289      	uxth	r1, r1
 800a764:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a768:	f846 1b04 	str.w	r1, [r6], #4
 800a76c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a770:	e7dd      	b.n	800a72e <__mdiff+0xd6>
 800a772:	3f01      	subs	r7, #1
 800a774:	e7e7      	b.n	800a746 <__mdiff+0xee>
 800a776:	bf00      	nop
 800a778:	0800d14f 	.word	0x0800d14f
 800a77c:	0800d160 	.word	0x0800d160

0800a780 <__ulp>:
 800a780:	b082      	sub	sp, #8
 800a782:	ed8d 0b00 	vstr	d0, [sp]
 800a786:	9a01      	ldr	r2, [sp, #4]
 800a788:	4b0f      	ldr	r3, [pc, #60]	@ (800a7c8 <__ulp+0x48>)
 800a78a:	4013      	ands	r3, r2
 800a78c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a790:	2b00      	cmp	r3, #0
 800a792:	dc08      	bgt.n	800a7a6 <__ulp+0x26>
 800a794:	425b      	negs	r3, r3
 800a796:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a79a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a79e:	da04      	bge.n	800a7aa <__ulp+0x2a>
 800a7a0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a7a4:	4113      	asrs	r3, r2
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	e008      	b.n	800a7bc <__ulp+0x3c>
 800a7aa:	f1a2 0314 	sub.w	r3, r2, #20
 800a7ae:	2b1e      	cmp	r3, #30
 800a7b0:	bfda      	itte	le
 800a7b2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a7b6:	40da      	lsrle	r2, r3
 800a7b8:	2201      	movgt	r2, #1
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	4619      	mov	r1, r3
 800a7be:	4610      	mov	r0, r2
 800a7c0:	ec41 0b10 	vmov	d0, r0, r1
 800a7c4:	b002      	add	sp, #8
 800a7c6:	4770      	bx	lr
 800a7c8:	7ff00000 	.word	0x7ff00000

0800a7cc <__b2d>:
 800a7cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7d0:	6906      	ldr	r6, [r0, #16]
 800a7d2:	f100 0814 	add.w	r8, r0, #20
 800a7d6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a7da:	1f37      	subs	r7, r6, #4
 800a7dc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a7e0:	4610      	mov	r0, r2
 800a7e2:	f7ff fd4b 	bl	800a27c <__hi0bits>
 800a7e6:	f1c0 0320 	rsb	r3, r0, #32
 800a7ea:	280a      	cmp	r0, #10
 800a7ec:	600b      	str	r3, [r1, #0]
 800a7ee:	491b      	ldr	r1, [pc, #108]	@ (800a85c <__b2d+0x90>)
 800a7f0:	dc15      	bgt.n	800a81e <__b2d+0x52>
 800a7f2:	f1c0 0c0b 	rsb	ip, r0, #11
 800a7f6:	fa22 f30c 	lsr.w	r3, r2, ip
 800a7fa:	45b8      	cmp	r8, r7
 800a7fc:	ea43 0501 	orr.w	r5, r3, r1
 800a800:	bf34      	ite	cc
 800a802:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a806:	2300      	movcs	r3, #0
 800a808:	3015      	adds	r0, #21
 800a80a:	fa02 f000 	lsl.w	r0, r2, r0
 800a80e:	fa23 f30c 	lsr.w	r3, r3, ip
 800a812:	4303      	orrs	r3, r0
 800a814:	461c      	mov	r4, r3
 800a816:	ec45 4b10 	vmov	d0, r4, r5
 800a81a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a81e:	45b8      	cmp	r8, r7
 800a820:	bf3a      	itte	cc
 800a822:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a826:	f1a6 0708 	subcc.w	r7, r6, #8
 800a82a:	2300      	movcs	r3, #0
 800a82c:	380b      	subs	r0, #11
 800a82e:	d012      	beq.n	800a856 <__b2d+0x8a>
 800a830:	f1c0 0120 	rsb	r1, r0, #32
 800a834:	fa23 f401 	lsr.w	r4, r3, r1
 800a838:	4082      	lsls	r2, r0
 800a83a:	4322      	orrs	r2, r4
 800a83c:	4547      	cmp	r7, r8
 800a83e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a842:	bf8c      	ite	hi
 800a844:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a848:	2200      	movls	r2, #0
 800a84a:	4083      	lsls	r3, r0
 800a84c:	40ca      	lsrs	r2, r1
 800a84e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a852:	4313      	orrs	r3, r2
 800a854:	e7de      	b.n	800a814 <__b2d+0x48>
 800a856:	ea42 0501 	orr.w	r5, r2, r1
 800a85a:	e7db      	b.n	800a814 <__b2d+0x48>
 800a85c:	3ff00000 	.word	0x3ff00000

0800a860 <__d2b>:
 800a860:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a864:	460f      	mov	r7, r1
 800a866:	2101      	movs	r1, #1
 800a868:	ec59 8b10 	vmov	r8, r9, d0
 800a86c:	4616      	mov	r6, r2
 800a86e:	f7ff fc13 	bl	800a098 <_Balloc>
 800a872:	4604      	mov	r4, r0
 800a874:	b930      	cbnz	r0, 800a884 <__d2b+0x24>
 800a876:	4602      	mov	r2, r0
 800a878:	4b23      	ldr	r3, [pc, #140]	@ (800a908 <__d2b+0xa8>)
 800a87a:	4824      	ldr	r0, [pc, #144]	@ (800a90c <__d2b+0xac>)
 800a87c:	f240 310f 	movw	r1, #783	@ 0x30f
 800a880:	f7fe fc9e 	bl	80091c0 <__assert_func>
 800a884:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a888:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a88c:	b10d      	cbz	r5, 800a892 <__d2b+0x32>
 800a88e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a892:	9301      	str	r3, [sp, #4]
 800a894:	f1b8 0300 	subs.w	r3, r8, #0
 800a898:	d023      	beq.n	800a8e2 <__d2b+0x82>
 800a89a:	4668      	mov	r0, sp
 800a89c:	9300      	str	r3, [sp, #0]
 800a89e:	f7ff fd0c 	bl	800a2ba <__lo0bits>
 800a8a2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a8a6:	b1d0      	cbz	r0, 800a8de <__d2b+0x7e>
 800a8a8:	f1c0 0320 	rsb	r3, r0, #32
 800a8ac:	fa02 f303 	lsl.w	r3, r2, r3
 800a8b0:	430b      	orrs	r3, r1
 800a8b2:	40c2      	lsrs	r2, r0
 800a8b4:	6163      	str	r3, [r4, #20]
 800a8b6:	9201      	str	r2, [sp, #4]
 800a8b8:	9b01      	ldr	r3, [sp, #4]
 800a8ba:	61a3      	str	r3, [r4, #24]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	bf0c      	ite	eq
 800a8c0:	2201      	moveq	r2, #1
 800a8c2:	2202      	movne	r2, #2
 800a8c4:	6122      	str	r2, [r4, #16]
 800a8c6:	b1a5      	cbz	r5, 800a8f2 <__d2b+0x92>
 800a8c8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a8cc:	4405      	add	r5, r0
 800a8ce:	603d      	str	r5, [r7, #0]
 800a8d0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a8d4:	6030      	str	r0, [r6, #0]
 800a8d6:	4620      	mov	r0, r4
 800a8d8:	b003      	add	sp, #12
 800a8da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a8de:	6161      	str	r1, [r4, #20]
 800a8e0:	e7ea      	b.n	800a8b8 <__d2b+0x58>
 800a8e2:	a801      	add	r0, sp, #4
 800a8e4:	f7ff fce9 	bl	800a2ba <__lo0bits>
 800a8e8:	9b01      	ldr	r3, [sp, #4]
 800a8ea:	6163      	str	r3, [r4, #20]
 800a8ec:	3020      	adds	r0, #32
 800a8ee:	2201      	movs	r2, #1
 800a8f0:	e7e8      	b.n	800a8c4 <__d2b+0x64>
 800a8f2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a8f6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a8fa:	6038      	str	r0, [r7, #0]
 800a8fc:	6918      	ldr	r0, [r3, #16]
 800a8fe:	f7ff fcbd 	bl	800a27c <__hi0bits>
 800a902:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a906:	e7e5      	b.n	800a8d4 <__d2b+0x74>
 800a908:	0800d14f 	.word	0x0800d14f
 800a90c:	0800d160 	.word	0x0800d160

0800a910 <__ratio>:
 800a910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a914:	b085      	sub	sp, #20
 800a916:	e9cd 1000 	strd	r1, r0, [sp]
 800a91a:	a902      	add	r1, sp, #8
 800a91c:	f7ff ff56 	bl	800a7cc <__b2d>
 800a920:	9800      	ldr	r0, [sp, #0]
 800a922:	a903      	add	r1, sp, #12
 800a924:	ec55 4b10 	vmov	r4, r5, d0
 800a928:	f7ff ff50 	bl	800a7cc <__b2d>
 800a92c:	9b01      	ldr	r3, [sp, #4]
 800a92e:	6919      	ldr	r1, [r3, #16]
 800a930:	9b00      	ldr	r3, [sp, #0]
 800a932:	691b      	ldr	r3, [r3, #16]
 800a934:	1ac9      	subs	r1, r1, r3
 800a936:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a93a:	1a9b      	subs	r3, r3, r2
 800a93c:	ec5b ab10 	vmov	sl, fp, d0
 800a940:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a944:	2b00      	cmp	r3, #0
 800a946:	bfce      	itee	gt
 800a948:	462a      	movgt	r2, r5
 800a94a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a94e:	465a      	movle	r2, fp
 800a950:	462f      	mov	r7, r5
 800a952:	46d9      	mov	r9, fp
 800a954:	bfcc      	ite	gt
 800a956:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a95a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a95e:	464b      	mov	r3, r9
 800a960:	4652      	mov	r2, sl
 800a962:	4620      	mov	r0, r4
 800a964:	4639      	mov	r1, r7
 800a966:	f7f5 ff71 	bl	800084c <__aeabi_ddiv>
 800a96a:	ec41 0b10 	vmov	d0, r0, r1
 800a96e:	b005      	add	sp, #20
 800a970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a974 <__copybits>:
 800a974:	3901      	subs	r1, #1
 800a976:	b570      	push	{r4, r5, r6, lr}
 800a978:	1149      	asrs	r1, r1, #5
 800a97a:	6914      	ldr	r4, [r2, #16]
 800a97c:	3101      	adds	r1, #1
 800a97e:	f102 0314 	add.w	r3, r2, #20
 800a982:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a986:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a98a:	1f05      	subs	r5, r0, #4
 800a98c:	42a3      	cmp	r3, r4
 800a98e:	d30c      	bcc.n	800a9aa <__copybits+0x36>
 800a990:	1aa3      	subs	r3, r4, r2
 800a992:	3b11      	subs	r3, #17
 800a994:	f023 0303 	bic.w	r3, r3, #3
 800a998:	3211      	adds	r2, #17
 800a99a:	42a2      	cmp	r2, r4
 800a99c:	bf88      	it	hi
 800a99e:	2300      	movhi	r3, #0
 800a9a0:	4418      	add	r0, r3
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	4288      	cmp	r0, r1
 800a9a6:	d305      	bcc.n	800a9b4 <__copybits+0x40>
 800a9a8:	bd70      	pop	{r4, r5, r6, pc}
 800a9aa:	f853 6b04 	ldr.w	r6, [r3], #4
 800a9ae:	f845 6f04 	str.w	r6, [r5, #4]!
 800a9b2:	e7eb      	b.n	800a98c <__copybits+0x18>
 800a9b4:	f840 3b04 	str.w	r3, [r0], #4
 800a9b8:	e7f4      	b.n	800a9a4 <__copybits+0x30>

0800a9ba <__any_on>:
 800a9ba:	f100 0214 	add.w	r2, r0, #20
 800a9be:	6900      	ldr	r0, [r0, #16]
 800a9c0:	114b      	asrs	r3, r1, #5
 800a9c2:	4298      	cmp	r0, r3
 800a9c4:	b510      	push	{r4, lr}
 800a9c6:	db11      	blt.n	800a9ec <__any_on+0x32>
 800a9c8:	dd0a      	ble.n	800a9e0 <__any_on+0x26>
 800a9ca:	f011 011f 	ands.w	r1, r1, #31
 800a9ce:	d007      	beq.n	800a9e0 <__any_on+0x26>
 800a9d0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a9d4:	fa24 f001 	lsr.w	r0, r4, r1
 800a9d8:	fa00 f101 	lsl.w	r1, r0, r1
 800a9dc:	428c      	cmp	r4, r1
 800a9de:	d10b      	bne.n	800a9f8 <__any_on+0x3e>
 800a9e0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a9e4:	4293      	cmp	r3, r2
 800a9e6:	d803      	bhi.n	800a9f0 <__any_on+0x36>
 800a9e8:	2000      	movs	r0, #0
 800a9ea:	bd10      	pop	{r4, pc}
 800a9ec:	4603      	mov	r3, r0
 800a9ee:	e7f7      	b.n	800a9e0 <__any_on+0x26>
 800a9f0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a9f4:	2900      	cmp	r1, #0
 800a9f6:	d0f5      	beq.n	800a9e4 <__any_on+0x2a>
 800a9f8:	2001      	movs	r0, #1
 800a9fa:	e7f6      	b.n	800a9ea <__any_on+0x30>

0800a9fc <sulp>:
 800a9fc:	b570      	push	{r4, r5, r6, lr}
 800a9fe:	4604      	mov	r4, r0
 800aa00:	460d      	mov	r5, r1
 800aa02:	ec45 4b10 	vmov	d0, r4, r5
 800aa06:	4616      	mov	r6, r2
 800aa08:	f7ff feba 	bl	800a780 <__ulp>
 800aa0c:	ec51 0b10 	vmov	r0, r1, d0
 800aa10:	b17e      	cbz	r6, 800aa32 <sulp+0x36>
 800aa12:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800aa16:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	dd09      	ble.n	800aa32 <sulp+0x36>
 800aa1e:	051b      	lsls	r3, r3, #20
 800aa20:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800aa24:	2400      	movs	r4, #0
 800aa26:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800aa2a:	4622      	mov	r2, r4
 800aa2c:	462b      	mov	r3, r5
 800aa2e:	f7f5 fde3 	bl	80005f8 <__aeabi_dmul>
 800aa32:	ec41 0b10 	vmov	d0, r0, r1
 800aa36:	bd70      	pop	{r4, r5, r6, pc}

0800aa38 <_strtod_l>:
 800aa38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa3c:	b09f      	sub	sp, #124	@ 0x7c
 800aa3e:	460c      	mov	r4, r1
 800aa40:	9217      	str	r2, [sp, #92]	@ 0x5c
 800aa42:	2200      	movs	r2, #0
 800aa44:	921a      	str	r2, [sp, #104]	@ 0x68
 800aa46:	9005      	str	r0, [sp, #20]
 800aa48:	f04f 0a00 	mov.w	sl, #0
 800aa4c:	f04f 0b00 	mov.w	fp, #0
 800aa50:	460a      	mov	r2, r1
 800aa52:	9219      	str	r2, [sp, #100]	@ 0x64
 800aa54:	7811      	ldrb	r1, [r2, #0]
 800aa56:	292b      	cmp	r1, #43	@ 0x2b
 800aa58:	d04a      	beq.n	800aaf0 <_strtod_l+0xb8>
 800aa5a:	d838      	bhi.n	800aace <_strtod_l+0x96>
 800aa5c:	290d      	cmp	r1, #13
 800aa5e:	d832      	bhi.n	800aac6 <_strtod_l+0x8e>
 800aa60:	2908      	cmp	r1, #8
 800aa62:	d832      	bhi.n	800aaca <_strtod_l+0x92>
 800aa64:	2900      	cmp	r1, #0
 800aa66:	d03b      	beq.n	800aae0 <_strtod_l+0xa8>
 800aa68:	2200      	movs	r2, #0
 800aa6a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800aa6c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800aa6e:	782a      	ldrb	r2, [r5, #0]
 800aa70:	2a30      	cmp	r2, #48	@ 0x30
 800aa72:	f040 80b3 	bne.w	800abdc <_strtod_l+0x1a4>
 800aa76:	786a      	ldrb	r2, [r5, #1]
 800aa78:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800aa7c:	2a58      	cmp	r2, #88	@ 0x58
 800aa7e:	d16e      	bne.n	800ab5e <_strtod_l+0x126>
 800aa80:	9302      	str	r3, [sp, #8]
 800aa82:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aa84:	9301      	str	r3, [sp, #4]
 800aa86:	ab1a      	add	r3, sp, #104	@ 0x68
 800aa88:	9300      	str	r3, [sp, #0]
 800aa8a:	4a8e      	ldr	r2, [pc, #568]	@ (800acc4 <_strtod_l+0x28c>)
 800aa8c:	9805      	ldr	r0, [sp, #20]
 800aa8e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800aa90:	a919      	add	r1, sp, #100	@ 0x64
 800aa92:	f001 fac7 	bl	800c024 <__gethex>
 800aa96:	f010 060f 	ands.w	r6, r0, #15
 800aa9a:	4604      	mov	r4, r0
 800aa9c:	d005      	beq.n	800aaaa <_strtod_l+0x72>
 800aa9e:	2e06      	cmp	r6, #6
 800aaa0:	d128      	bne.n	800aaf4 <_strtod_l+0xbc>
 800aaa2:	3501      	adds	r5, #1
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	9519      	str	r5, [sp, #100]	@ 0x64
 800aaa8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aaaa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	f040 858e 	bne.w	800b5ce <_strtod_l+0xb96>
 800aab2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aab4:	b1cb      	cbz	r3, 800aaea <_strtod_l+0xb2>
 800aab6:	4652      	mov	r2, sl
 800aab8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800aabc:	ec43 2b10 	vmov	d0, r2, r3
 800aac0:	b01f      	add	sp, #124	@ 0x7c
 800aac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aac6:	2920      	cmp	r1, #32
 800aac8:	d1ce      	bne.n	800aa68 <_strtod_l+0x30>
 800aaca:	3201      	adds	r2, #1
 800aacc:	e7c1      	b.n	800aa52 <_strtod_l+0x1a>
 800aace:	292d      	cmp	r1, #45	@ 0x2d
 800aad0:	d1ca      	bne.n	800aa68 <_strtod_l+0x30>
 800aad2:	2101      	movs	r1, #1
 800aad4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800aad6:	1c51      	adds	r1, r2, #1
 800aad8:	9119      	str	r1, [sp, #100]	@ 0x64
 800aada:	7852      	ldrb	r2, [r2, #1]
 800aadc:	2a00      	cmp	r2, #0
 800aade:	d1c5      	bne.n	800aa6c <_strtod_l+0x34>
 800aae0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800aae2:	9419      	str	r4, [sp, #100]	@ 0x64
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	f040 8570 	bne.w	800b5ca <_strtod_l+0xb92>
 800aaea:	4652      	mov	r2, sl
 800aaec:	465b      	mov	r3, fp
 800aaee:	e7e5      	b.n	800aabc <_strtod_l+0x84>
 800aaf0:	2100      	movs	r1, #0
 800aaf2:	e7ef      	b.n	800aad4 <_strtod_l+0x9c>
 800aaf4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800aaf6:	b13a      	cbz	r2, 800ab08 <_strtod_l+0xd0>
 800aaf8:	2135      	movs	r1, #53	@ 0x35
 800aafa:	a81c      	add	r0, sp, #112	@ 0x70
 800aafc:	f7ff ff3a 	bl	800a974 <__copybits>
 800ab00:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ab02:	9805      	ldr	r0, [sp, #20]
 800ab04:	f7ff fb08 	bl	800a118 <_Bfree>
 800ab08:	3e01      	subs	r6, #1
 800ab0a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800ab0c:	2e04      	cmp	r6, #4
 800ab0e:	d806      	bhi.n	800ab1e <_strtod_l+0xe6>
 800ab10:	e8df f006 	tbb	[pc, r6]
 800ab14:	201d0314 	.word	0x201d0314
 800ab18:	14          	.byte	0x14
 800ab19:	00          	.byte	0x00
 800ab1a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800ab1e:	05e1      	lsls	r1, r4, #23
 800ab20:	bf48      	it	mi
 800ab22:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800ab26:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ab2a:	0d1b      	lsrs	r3, r3, #20
 800ab2c:	051b      	lsls	r3, r3, #20
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d1bb      	bne.n	800aaaa <_strtod_l+0x72>
 800ab32:	f7fe fb03 	bl	800913c <__errno>
 800ab36:	2322      	movs	r3, #34	@ 0x22
 800ab38:	6003      	str	r3, [r0, #0]
 800ab3a:	e7b6      	b.n	800aaaa <_strtod_l+0x72>
 800ab3c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800ab40:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ab44:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ab48:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ab4c:	e7e7      	b.n	800ab1e <_strtod_l+0xe6>
 800ab4e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800accc <_strtod_l+0x294>
 800ab52:	e7e4      	b.n	800ab1e <_strtod_l+0xe6>
 800ab54:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800ab58:	f04f 3aff 	mov.w	sl, #4294967295
 800ab5c:	e7df      	b.n	800ab1e <_strtod_l+0xe6>
 800ab5e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ab60:	1c5a      	adds	r2, r3, #1
 800ab62:	9219      	str	r2, [sp, #100]	@ 0x64
 800ab64:	785b      	ldrb	r3, [r3, #1]
 800ab66:	2b30      	cmp	r3, #48	@ 0x30
 800ab68:	d0f9      	beq.n	800ab5e <_strtod_l+0x126>
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d09d      	beq.n	800aaaa <_strtod_l+0x72>
 800ab6e:	2301      	movs	r3, #1
 800ab70:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab72:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ab74:	930c      	str	r3, [sp, #48]	@ 0x30
 800ab76:	2300      	movs	r3, #0
 800ab78:	9308      	str	r3, [sp, #32]
 800ab7a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab7c:	461f      	mov	r7, r3
 800ab7e:	220a      	movs	r2, #10
 800ab80:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800ab82:	7805      	ldrb	r5, [r0, #0]
 800ab84:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800ab88:	b2d9      	uxtb	r1, r3
 800ab8a:	2909      	cmp	r1, #9
 800ab8c:	d928      	bls.n	800abe0 <_strtod_l+0x1a8>
 800ab8e:	494e      	ldr	r1, [pc, #312]	@ (800acc8 <_strtod_l+0x290>)
 800ab90:	2201      	movs	r2, #1
 800ab92:	f7fe f9f1 	bl	8008f78 <strncmp>
 800ab96:	2800      	cmp	r0, #0
 800ab98:	d032      	beq.n	800ac00 <_strtod_l+0x1c8>
 800ab9a:	2000      	movs	r0, #0
 800ab9c:	462a      	mov	r2, r5
 800ab9e:	4681      	mov	r9, r0
 800aba0:	463d      	mov	r5, r7
 800aba2:	4603      	mov	r3, r0
 800aba4:	2a65      	cmp	r2, #101	@ 0x65
 800aba6:	d001      	beq.n	800abac <_strtod_l+0x174>
 800aba8:	2a45      	cmp	r2, #69	@ 0x45
 800abaa:	d114      	bne.n	800abd6 <_strtod_l+0x19e>
 800abac:	b91d      	cbnz	r5, 800abb6 <_strtod_l+0x17e>
 800abae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800abb0:	4302      	orrs	r2, r0
 800abb2:	d095      	beq.n	800aae0 <_strtod_l+0xa8>
 800abb4:	2500      	movs	r5, #0
 800abb6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800abb8:	1c62      	adds	r2, r4, #1
 800abba:	9219      	str	r2, [sp, #100]	@ 0x64
 800abbc:	7862      	ldrb	r2, [r4, #1]
 800abbe:	2a2b      	cmp	r2, #43	@ 0x2b
 800abc0:	d077      	beq.n	800acb2 <_strtod_l+0x27a>
 800abc2:	2a2d      	cmp	r2, #45	@ 0x2d
 800abc4:	d07b      	beq.n	800acbe <_strtod_l+0x286>
 800abc6:	f04f 0c00 	mov.w	ip, #0
 800abca:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800abce:	2909      	cmp	r1, #9
 800abd0:	f240 8082 	bls.w	800acd8 <_strtod_l+0x2a0>
 800abd4:	9419      	str	r4, [sp, #100]	@ 0x64
 800abd6:	f04f 0800 	mov.w	r8, #0
 800abda:	e0a2      	b.n	800ad22 <_strtod_l+0x2ea>
 800abdc:	2300      	movs	r3, #0
 800abde:	e7c7      	b.n	800ab70 <_strtod_l+0x138>
 800abe0:	2f08      	cmp	r7, #8
 800abe2:	bfd5      	itete	le
 800abe4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800abe6:	9908      	ldrgt	r1, [sp, #32]
 800abe8:	fb02 3301 	mlale	r3, r2, r1, r3
 800abec:	fb02 3301 	mlagt	r3, r2, r1, r3
 800abf0:	f100 0001 	add.w	r0, r0, #1
 800abf4:	bfd4      	ite	le
 800abf6:	930a      	strle	r3, [sp, #40]	@ 0x28
 800abf8:	9308      	strgt	r3, [sp, #32]
 800abfa:	3701      	adds	r7, #1
 800abfc:	9019      	str	r0, [sp, #100]	@ 0x64
 800abfe:	e7bf      	b.n	800ab80 <_strtod_l+0x148>
 800ac00:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ac02:	1c5a      	adds	r2, r3, #1
 800ac04:	9219      	str	r2, [sp, #100]	@ 0x64
 800ac06:	785a      	ldrb	r2, [r3, #1]
 800ac08:	b37f      	cbz	r7, 800ac6a <_strtod_l+0x232>
 800ac0a:	4681      	mov	r9, r0
 800ac0c:	463d      	mov	r5, r7
 800ac0e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800ac12:	2b09      	cmp	r3, #9
 800ac14:	d912      	bls.n	800ac3c <_strtod_l+0x204>
 800ac16:	2301      	movs	r3, #1
 800ac18:	e7c4      	b.n	800aba4 <_strtod_l+0x16c>
 800ac1a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ac1c:	1c5a      	adds	r2, r3, #1
 800ac1e:	9219      	str	r2, [sp, #100]	@ 0x64
 800ac20:	785a      	ldrb	r2, [r3, #1]
 800ac22:	3001      	adds	r0, #1
 800ac24:	2a30      	cmp	r2, #48	@ 0x30
 800ac26:	d0f8      	beq.n	800ac1a <_strtod_l+0x1e2>
 800ac28:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ac2c:	2b08      	cmp	r3, #8
 800ac2e:	f200 84d3 	bhi.w	800b5d8 <_strtod_l+0xba0>
 800ac32:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ac34:	930c      	str	r3, [sp, #48]	@ 0x30
 800ac36:	4681      	mov	r9, r0
 800ac38:	2000      	movs	r0, #0
 800ac3a:	4605      	mov	r5, r0
 800ac3c:	3a30      	subs	r2, #48	@ 0x30
 800ac3e:	f100 0301 	add.w	r3, r0, #1
 800ac42:	d02a      	beq.n	800ac9a <_strtod_l+0x262>
 800ac44:	4499      	add	r9, r3
 800ac46:	eb00 0c05 	add.w	ip, r0, r5
 800ac4a:	462b      	mov	r3, r5
 800ac4c:	210a      	movs	r1, #10
 800ac4e:	4563      	cmp	r3, ip
 800ac50:	d10d      	bne.n	800ac6e <_strtod_l+0x236>
 800ac52:	1c69      	adds	r1, r5, #1
 800ac54:	4401      	add	r1, r0
 800ac56:	4428      	add	r0, r5
 800ac58:	2808      	cmp	r0, #8
 800ac5a:	dc16      	bgt.n	800ac8a <_strtod_l+0x252>
 800ac5c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ac5e:	230a      	movs	r3, #10
 800ac60:	fb03 2300 	mla	r3, r3, r0, r2
 800ac64:	930a      	str	r3, [sp, #40]	@ 0x28
 800ac66:	2300      	movs	r3, #0
 800ac68:	e018      	b.n	800ac9c <_strtod_l+0x264>
 800ac6a:	4638      	mov	r0, r7
 800ac6c:	e7da      	b.n	800ac24 <_strtod_l+0x1ec>
 800ac6e:	2b08      	cmp	r3, #8
 800ac70:	f103 0301 	add.w	r3, r3, #1
 800ac74:	dc03      	bgt.n	800ac7e <_strtod_l+0x246>
 800ac76:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800ac78:	434e      	muls	r6, r1
 800ac7a:	960a      	str	r6, [sp, #40]	@ 0x28
 800ac7c:	e7e7      	b.n	800ac4e <_strtod_l+0x216>
 800ac7e:	2b10      	cmp	r3, #16
 800ac80:	bfde      	ittt	le
 800ac82:	9e08      	ldrle	r6, [sp, #32]
 800ac84:	434e      	mulle	r6, r1
 800ac86:	9608      	strle	r6, [sp, #32]
 800ac88:	e7e1      	b.n	800ac4e <_strtod_l+0x216>
 800ac8a:	280f      	cmp	r0, #15
 800ac8c:	dceb      	bgt.n	800ac66 <_strtod_l+0x22e>
 800ac8e:	9808      	ldr	r0, [sp, #32]
 800ac90:	230a      	movs	r3, #10
 800ac92:	fb03 2300 	mla	r3, r3, r0, r2
 800ac96:	9308      	str	r3, [sp, #32]
 800ac98:	e7e5      	b.n	800ac66 <_strtod_l+0x22e>
 800ac9a:	4629      	mov	r1, r5
 800ac9c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ac9e:	1c50      	adds	r0, r2, #1
 800aca0:	9019      	str	r0, [sp, #100]	@ 0x64
 800aca2:	7852      	ldrb	r2, [r2, #1]
 800aca4:	4618      	mov	r0, r3
 800aca6:	460d      	mov	r5, r1
 800aca8:	e7b1      	b.n	800ac0e <_strtod_l+0x1d6>
 800acaa:	f04f 0900 	mov.w	r9, #0
 800acae:	2301      	movs	r3, #1
 800acb0:	e77d      	b.n	800abae <_strtod_l+0x176>
 800acb2:	f04f 0c00 	mov.w	ip, #0
 800acb6:	1ca2      	adds	r2, r4, #2
 800acb8:	9219      	str	r2, [sp, #100]	@ 0x64
 800acba:	78a2      	ldrb	r2, [r4, #2]
 800acbc:	e785      	b.n	800abca <_strtod_l+0x192>
 800acbe:	f04f 0c01 	mov.w	ip, #1
 800acc2:	e7f8      	b.n	800acb6 <_strtod_l+0x27e>
 800acc4:	0800d2d0 	.word	0x0800d2d0
 800acc8:	0800d2b8 	.word	0x0800d2b8
 800accc:	7ff00000 	.word	0x7ff00000
 800acd0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800acd2:	1c51      	adds	r1, r2, #1
 800acd4:	9119      	str	r1, [sp, #100]	@ 0x64
 800acd6:	7852      	ldrb	r2, [r2, #1]
 800acd8:	2a30      	cmp	r2, #48	@ 0x30
 800acda:	d0f9      	beq.n	800acd0 <_strtod_l+0x298>
 800acdc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800ace0:	2908      	cmp	r1, #8
 800ace2:	f63f af78 	bhi.w	800abd6 <_strtod_l+0x19e>
 800ace6:	3a30      	subs	r2, #48	@ 0x30
 800ace8:	920e      	str	r2, [sp, #56]	@ 0x38
 800acea:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800acec:	920f      	str	r2, [sp, #60]	@ 0x3c
 800acee:	f04f 080a 	mov.w	r8, #10
 800acf2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800acf4:	1c56      	adds	r6, r2, #1
 800acf6:	9619      	str	r6, [sp, #100]	@ 0x64
 800acf8:	7852      	ldrb	r2, [r2, #1]
 800acfa:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800acfe:	f1be 0f09 	cmp.w	lr, #9
 800ad02:	d939      	bls.n	800ad78 <_strtod_l+0x340>
 800ad04:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ad06:	1a76      	subs	r6, r6, r1
 800ad08:	2e08      	cmp	r6, #8
 800ad0a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800ad0e:	dc03      	bgt.n	800ad18 <_strtod_l+0x2e0>
 800ad10:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ad12:	4588      	cmp	r8, r1
 800ad14:	bfa8      	it	ge
 800ad16:	4688      	movge	r8, r1
 800ad18:	f1bc 0f00 	cmp.w	ip, #0
 800ad1c:	d001      	beq.n	800ad22 <_strtod_l+0x2ea>
 800ad1e:	f1c8 0800 	rsb	r8, r8, #0
 800ad22:	2d00      	cmp	r5, #0
 800ad24:	d14e      	bne.n	800adc4 <_strtod_l+0x38c>
 800ad26:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ad28:	4308      	orrs	r0, r1
 800ad2a:	f47f aebe 	bne.w	800aaaa <_strtod_l+0x72>
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	f47f aed6 	bne.w	800aae0 <_strtod_l+0xa8>
 800ad34:	2a69      	cmp	r2, #105	@ 0x69
 800ad36:	d028      	beq.n	800ad8a <_strtod_l+0x352>
 800ad38:	dc25      	bgt.n	800ad86 <_strtod_l+0x34e>
 800ad3a:	2a49      	cmp	r2, #73	@ 0x49
 800ad3c:	d025      	beq.n	800ad8a <_strtod_l+0x352>
 800ad3e:	2a4e      	cmp	r2, #78	@ 0x4e
 800ad40:	f47f aece 	bne.w	800aae0 <_strtod_l+0xa8>
 800ad44:	499b      	ldr	r1, [pc, #620]	@ (800afb4 <_strtod_l+0x57c>)
 800ad46:	a819      	add	r0, sp, #100	@ 0x64
 800ad48:	f001 fb8e 	bl	800c468 <__match>
 800ad4c:	2800      	cmp	r0, #0
 800ad4e:	f43f aec7 	beq.w	800aae0 <_strtod_l+0xa8>
 800ad52:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ad54:	781b      	ldrb	r3, [r3, #0]
 800ad56:	2b28      	cmp	r3, #40	@ 0x28
 800ad58:	d12e      	bne.n	800adb8 <_strtod_l+0x380>
 800ad5a:	4997      	ldr	r1, [pc, #604]	@ (800afb8 <_strtod_l+0x580>)
 800ad5c:	aa1c      	add	r2, sp, #112	@ 0x70
 800ad5e:	a819      	add	r0, sp, #100	@ 0x64
 800ad60:	f001 fb96 	bl	800c490 <__hexnan>
 800ad64:	2805      	cmp	r0, #5
 800ad66:	d127      	bne.n	800adb8 <_strtod_l+0x380>
 800ad68:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ad6a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800ad6e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ad72:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800ad76:	e698      	b.n	800aaaa <_strtod_l+0x72>
 800ad78:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ad7a:	fb08 2101 	mla	r1, r8, r1, r2
 800ad7e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800ad82:	920e      	str	r2, [sp, #56]	@ 0x38
 800ad84:	e7b5      	b.n	800acf2 <_strtod_l+0x2ba>
 800ad86:	2a6e      	cmp	r2, #110	@ 0x6e
 800ad88:	e7da      	b.n	800ad40 <_strtod_l+0x308>
 800ad8a:	498c      	ldr	r1, [pc, #560]	@ (800afbc <_strtod_l+0x584>)
 800ad8c:	a819      	add	r0, sp, #100	@ 0x64
 800ad8e:	f001 fb6b 	bl	800c468 <__match>
 800ad92:	2800      	cmp	r0, #0
 800ad94:	f43f aea4 	beq.w	800aae0 <_strtod_l+0xa8>
 800ad98:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ad9a:	4989      	ldr	r1, [pc, #548]	@ (800afc0 <_strtod_l+0x588>)
 800ad9c:	3b01      	subs	r3, #1
 800ad9e:	a819      	add	r0, sp, #100	@ 0x64
 800ada0:	9319      	str	r3, [sp, #100]	@ 0x64
 800ada2:	f001 fb61 	bl	800c468 <__match>
 800ada6:	b910      	cbnz	r0, 800adae <_strtod_l+0x376>
 800ada8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800adaa:	3301      	adds	r3, #1
 800adac:	9319      	str	r3, [sp, #100]	@ 0x64
 800adae:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800afd0 <_strtod_l+0x598>
 800adb2:	f04f 0a00 	mov.w	sl, #0
 800adb6:	e678      	b.n	800aaaa <_strtod_l+0x72>
 800adb8:	4882      	ldr	r0, [pc, #520]	@ (800afc4 <_strtod_l+0x58c>)
 800adba:	f001 f8a9 	bl	800bf10 <nan>
 800adbe:	ec5b ab10 	vmov	sl, fp, d0
 800adc2:	e672      	b.n	800aaaa <_strtod_l+0x72>
 800adc4:	eba8 0309 	sub.w	r3, r8, r9
 800adc8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800adca:	9309      	str	r3, [sp, #36]	@ 0x24
 800adcc:	2f00      	cmp	r7, #0
 800adce:	bf08      	it	eq
 800add0:	462f      	moveq	r7, r5
 800add2:	2d10      	cmp	r5, #16
 800add4:	462c      	mov	r4, r5
 800add6:	bfa8      	it	ge
 800add8:	2410      	movge	r4, #16
 800adda:	f7f5 fb93 	bl	8000504 <__aeabi_ui2d>
 800adde:	2d09      	cmp	r5, #9
 800ade0:	4682      	mov	sl, r0
 800ade2:	468b      	mov	fp, r1
 800ade4:	dc13      	bgt.n	800ae0e <_strtod_l+0x3d6>
 800ade6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ade8:	2b00      	cmp	r3, #0
 800adea:	f43f ae5e 	beq.w	800aaaa <_strtod_l+0x72>
 800adee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800adf0:	dd78      	ble.n	800aee4 <_strtod_l+0x4ac>
 800adf2:	2b16      	cmp	r3, #22
 800adf4:	dc5f      	bgt.n	800aeb6 <_strtod_l+0x47e>
 800adf6:	4974      	ldr	r1, [pc, #464]	@ (800afc8 <_strtod_l+0x590>)
 800adf8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800adfc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae00:	4652      	mov	r2, sl
 800ae02:	465b      	mov	r3, fp
 800ae04:	f7f5 fbf8 	bl	80005f8 <__aeabi_dmul>
 800ae08:	4682      	mov	sl, r0
 800ae0a:	468b      	mov	fp, r1
 800ae0c:	e64d      	b.n	800aaaa <_strtod_l+0x72>
 800ae0e:	4b6e      	ldr	r3, [pc, #440]	@ (800afc8 <_strtod_l+0x590>)
 800ae10:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ae14:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800ae18:	f7f5 fbee 	bl	80005f8 <__aeabi_dmul>
 800ae1c:	4682      	mov	sl, r0
 800ae1e:	9808      	ldr	r0, [sp, #32]
 800ae20:	468b      	mov	fp, r1
 800ae22:	f7f5 fb6f 	bl	8000504 <__aeabi_ui2d>
 800ae26:	4602      	mov	r2, r0
 800ae28:	460b      	mov	r3, r1
 800ae2a:	4650      	mov	r0, sl
 800ae2c:	4659      	mov	r1, fp
 800ae2e:	f7f5 fa2d 	bl	800028c <__adddf3>
 800ae32:	2d0f      	cmp	r5, #15
 800ae34:	4682      	mov	sl, r0
 800ae36:	468b      	mov	fp, r1
 800ae38:	ddd5      	ble.n	800ade6 <_strtod_l+0x3ae>
 800ae3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae3c:	1b2c      	subs	r4, r5, r4
 800ae3e:	441c      	add	r4, r3
 800ae40:	2c00      	cmp	r4, #0
 800ae42:	f340 8096 	ble.w	800af72 <_strtod_l+0x53a>
 800ae46:	f014 030f 	ands.w	r3, r4, #15
 800ae4a:	d00a      	beq.n	800ae62 <_strtod_l+0x42a>
 800ae4c:	495e      	ldr	r1, [pc, #376]	@ (800afc8 <_strtod_l+0x590>)
 800ae4e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ae52:	4652      	mov	r2, sl
 800ae54:	465b      	mov	r3, fp
 800ae56:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae5a:	f7f5 fbcd 	bl	80005f8 <__aeabi_dmul>
 800ae5e:	4682      	mov	sl, r0
 800ae60:	468b      	mov	fp, r1
 800ae62:	f034 040f 	bics.w	r4, r4, #15
 800ae66:	d073      	beq.n	800af50 <_strtod_l+0x518>
 800ae68:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800ae6c:	dd48      	ble.n	800af00 <_strtod_l+0x4c8>
 800ae6e:	2400      	movs	r4, #0
 800ae70:	46a0      	mov	r8, r4
 800ae72:	940a      	str	r4, [sp, #40]	@ 0x28
 800ae74:	46a1      	mov	r9, r4
 800ae76:	9a05      	ldr	r2, [sp, #20]
 800ae78:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800afd0 <_strtod_l+0x598>
 800ae7c:	2322      	movs	r3, #34	@ 0x22
 800ae7e:	6013      	str	r3, [r2, #0]
 800ae80:	f04f 0a00 	mov.w	sl, #0
 800ae84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	f43f ae0f 	beq.w	800aaaa <_strtod_l+0x72>
 800ae8c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ae8e:	9805      	ldr	r0, [sp, #20]
 800ae90:	f7ff f942 	bl	800a118 <_Bfree>
 800ae94:	9805      	ldr	r0, [sp, #20]
 800ae96:	4649      	mov	r1, r9
 800ae98:	f7ff f93e 	bl	800a118 <_Bfree>
 800ae9c:	9805      	ldr	r0, [sp, #20]
 800ae9e:	4641      	mov	r1, r8
 800aea0:	f7ff f93a 	bl	800a118 <_Bfree>
 800aea4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800aea6:	9805      	ldr	r0, [sp, #20]
 800aea8:	f7ff f936 	bl	800a118 <_Bfree>
 800aeac:	9805      	ldr	r0, [sp, #20]
 800aeae:	4621      	mov	r1, r4
 800aeb0:	f7ff f932 	bl	800a118 <_Bfree>
 800aeb4:	e5f9      	b.n	800aaaa <_strtod_l+0x72>
 800aeb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aeb8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800aebc:	4293      	cmp	r3, r2
 800aebe:	dbbc      	blt.n	800ae3a <_strtod_l+0x402>
 800aec0:	4c41      	ldr	r4, [pc, #260]	@ (800afc8 <_strtod_l+0x590>)
 800aec2:	f1c5 050f 	rsb	r5, r5, #15
 800aec6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800aeca:	4652      	mov	r2, sl
 800aecc:	465b      	mov	r3, fp
 800aece:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aed2:	f7f5 fb91 	bl	80005f8 <__aeabi_dmul>
 800aed6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aed8:	1b5d      	subs	r5, r3, r5
 800aeda:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800aede:	e9d4 2300 	ldrd	r2, r3, [r4]
 800aee2:	e78f      	b.n	800ae04 <_strtod_l+0x3cc>
 800aee4:	3316      	adds	r3, #22
 800aee6:	dba8      	blt.n	800ae3a <_strtod_l+0x402>
 800aee8:	4b37      	ldr	r3, [pc, #220]	@ (800afc8 <_strtod_l+0x590>)
 800aeea:	eba9 0808 	sub.w	r8, r9, r8
 800aeee:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800aef2:	e9d8 2300 	ldrd	r2, r3, [r8]
 800aef6:	4650      	mov	r0, sl
 800aef8:	4659      	mov	r1, fp
 800aefa:	f7f5 fca7 	bl	800084c <__aeabi_ddiv>
 800aefe:	e783      	b.n	800ae08 <_strtod_l+0x3d0>
 800af00:	4b32      	ldr	r3, [pc, #200]	@ (800afcc <_strtod_l+0x594>)
 800af02:	9308      	str	r3, [sp, #32]
 800af04:	2300      	movs	r3, #0
 800af06:	1124      	asrs	r4, r4, #4
 800af08:	4650      	mov	r0, sl
 800af0a:	4659      	mov	r1, fp
 800af0c:	461e      	mov	r6, r3
 800af0e:	2c01      	cmp	r4, #1
 800af10:	dc21      	bgt.n	800af56 <_strtod_l+0x51e>
 800af12:	b10b      	cbz	r3, 800af18 <_strtod_l+0x4e0>
 800af14:	4682      	mov	sl, r0
 800af16:	468b      	mov	fp, r1
 800af18:	492c      	ldr	r1, [pc, #176]	@ (800afcc <_strtod_l+0x594>)
 800af1a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800af1e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800af22:	4652      	mov	r2, sl
 800af24:	465b      	mov	r3, fp
 800af26:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af2a:	f7f5 fb65 	bl	80005f8 <__aeabi_dmul>
 800af2e:	4b28      	ldr	r3, [pc, #160]	@ (800afd0 <_strtod_l+0x598>)
 800af30:	460a      	mov	r2, r1
 800af32:	400b      	ands	r3, r1
 800af34:	4927      	ldr	r1, [pc, #156]	@ (800afd4 <_strtod_l+0x59c>)
 800af36:	428b      	cmp	r3, r1
 800af38:	4682      	mov	sl, r0
 800af3a:	d898      	bhi.n	800ae6e <_strtod_l+0x436>
 800af3c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800af40:	428b      	cmp	r3, r1
 800af42:	bf86      	itte	hi
 800af44:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800afd8 <_strtod_l+0x5a0>
 800af48:	f04f 3aff 	movhi.w	sl, #4294967295
 800af4c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800af50:	2300      	movs	r3, #0
 800af52:	9308      	str	r3, [sp, #32]
 800af54:	e07a      	b.n	800b04c <_strtod_l+0x614>
 800af56:	07e2      	lsls	r2, r4, #31
 800af58:	d505      	bpl.n	800af66 <_strtod_l+0x52e>
 800af5a:	9b08      	ldr	r3, [sp, #32]
 800af5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af60:	f7f5 fb4a 	bl	80005f8 <__aeabi_dmul>
 800af64:	2301      	movs	r3, #1
 800af66:	9a08      	ldr	r2, [sp, #32]
 800af68:	3208      	adds	r2, #8
 800af6a:	3601      	adds	r6, #1
 800af6c:	1064      	asrs	r4, r4, #1
 800af6e:	9208      	str	r2, [sp, #32]
 800af70:	e7cd      	b.n	800af0e <_strtod_l+0x4d6>
 800af72:	d0ed      	beq.n	800af50 <_strtod_l+0x518>
 800af74:	4264      	negs	r4, r4
 800af76:	f014 020f 	ands.w	r2, r4, #15
 800af7a:	d00a      	beq.n	800af92 <_strtod_l+0x55a>
 800af7c:	4b12      	ldr	r3, [pc, #72]	@ (800afc8 <_strtod_l+0x590>)
 800af7e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800af82:	4650      	mov	r0, sl
 800af84:	4659      	mov	r1, fp
 800af86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af8a:	f7f5 fc5f 	bl	800084c <__aeabi_ddiv>
 800af8e:	4682      	mov	sl, r0
 800af90:	468b      	mov	fp, r1
 800af92:	1124      	asrs	r4, r4, #4
 800af94:	d0dc      	beq.n	800af50 <_strtod_l+0x518>
 800af96:	2c1f      	cmp	r4, #31
 800af98:	dd20      	ble.n	800afdc <_strtod_l+0x5a4>
 800af9a:	2400      	movs	r4, #0
 800af9c:	46a0      	mov	r8, r4
 800af9e:	940a      	str	r4, [sp, #40]	@ 0x28
 800afa0:	46a1      	mov	r9, r4
 800afa2:	9a05      	ldr	r2, [sp, #20]
 800afa4:	2322      	movs	r3, #34	@ 0x22
 800afa6:	f04f 0a00 	mov.w	sl, #0
 800afaa:	f04f 0b00 	mov.w	fp, #0
 800afae:	6013      	str	r3, [r2, #0]
 800afb0:	e768      	b.n	800ae84 <_strtod_l+0x44c>
 800afb2:	bf00      	nop
 800afb4:	0800d011 	.word	0x0800d011
 800afb8:	0800d2bc 	.word	0x0800d2bc
 800afbc:	0800d009 	.word	0x0800d009
 800afc0:	0800d0ed 	.word	0x0800d0ed
 800afc4:	0800d0e9 	.word	0x0800d0e9
 800afc8:	0800d1f0 	.word	0x0800d1f0
 800afcc:	0800d1c8 	.word	0x0800d1c8
 800afd0:	7ff00000 	.word	0x7ff00000
 800afd4:	7ca00000 	.word	0x7ca00000
 800afd8:	7fefffff 	.word	0x7fefffff
 800afdc:	f014 0310 	ands.w	r3, r4, #16
 800afe0:	bf18      	it	ne
 800afe2:	236a      	movne	r3, #106	@ 0x6a
 800afe4:	4ea9      	ldr	r6, [pc, #676]	@ (800b28c <_strtod_l+0x854>)
 800afe6:	9308      	str	r3, [sp, #32]
 800afe8:	4650      	mov	r0, sl
 800afea:	4659      	mov	r1, fp
 800afec:	2300      	movs	r3, #0
 800afee:	07e2      	lsls	r2, r4, #31
 800aff0:	d504      	bpl.n	800affc <_strtod_l+0x5c4>
 800aff2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800aff6:	f7f5 faff 	bl	80005f8 <__aeabi_dmul>
 800affa:	2301      	movs	r3, #1
 800affc:	1064      	asrs	r4, r4, #1
 800affe:	f106 0608 	add.w	r6, r6, #8
 800b002:	d1f4      	bne.n	800afee <_strtod_l+0x5b6>
 800b004:	b10b      	cbz	r3, 800b00a <_strtod_l+0x5d2>
 800b006:	4682      	mov	sl, r0
 800b008:	468b      	mov	fp, r1
 800b00a:	9b08      	ldr	r3, [sp, #32]
 800b00c:	b1b3      	cbz	r3, 800b03c <_strtod_l+0x604>
 800b00e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b012:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800b016:	2b00      	cmp	r3, #0
 800b018:	4659      	mov	r1, fp
 800b01a:	dd0f      	ble.n	800b03c <_strtod_l+0x604>
 800b01c:	2b1f      	cmp	r3, #31
 800b01e:	dd55      	ble.n	800b0cc <_strtod_l+0x694>
 800b020:	2b34      	cmp	r3, #52	@ 0x34
 800b022:	bfde      	ittt	le
 800b024:	f04f 33ff 	movle.w	r3, #4294967295
 800b028:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800b02c:	4093      	lslle	r3, r2
 800b02e:	f04f 0a00 	mov.w	sl, #0
 800b032:	bfcc      	ite	gt
 800b034:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b038:	ea03 0b01 	andle.w	fp, r3, r1
 800b03c:	2200      	movs	r2, #0
 800b03e:	2300      	movs	r3, #0
 800b040:	4650      	mov	r0, sl
 800b042:	4659      	mov	r1, fp
 800b044:	f7f5 fd40 	bl	8000ac8 <__aeabi_dcmpeq>
 800b048:	2800      	cmp	r0, #0
 800b04a:	d1a6      	bne.n	800af9a <_strtod_l+0x562>
 800b04c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b04e:	9300      	str	r3, [sp, #0]
 800b050:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b052:	9805      	ldr	r0, [sp, #20]
 800b054:	462b      	mov	r3, r5
 800b056:	463a      	mov	r2, r7
 800b058:	f7ff f8c6 	bl	800a1e8 <__s2b>
 800b05c:	900a      	str	r0, [sp, #40]	@ 0x28
 800b05e:	2800      	cmp	r0, #0
 800b060:	f43f af05 	beq.w	800ae6e <_strtod_l+0x436>
 800b064:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b066:	2a00      	cmp	r2, #0
 800b068:	eba9 0308 	sub.w	r3, r9, r8
 800b06c:	bfa8      	it	ge
 800b06e:	2300      	movge	r3, #0
 800b070:	9312      	str	r3, [sp, #72]	@ 0x48
 800b072:	2400      	movs	r4, #0
 800b074:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b078:	9316      	str	r3, [sp, #88]	@ 0x58
 800b07a:	46a0      	mov	r8, r4
 800b07c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b07e:	9805      	ldr	r0, [sp, #20]
 800b080:	6859      	ldr	r1, [r3, #4]
 800b082:	f7ff f809 	bl	800a098 <_Balloc>
 800b086:	4681      	mov	r9, r0
 800b088:	2800      	cmp	r0, #0
 800b08a:	f43f aef4 	beq.w	800ae76 <_strtod_l+0x43e>
 800b08e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b090:	691a      	ldr	r2, [r3, #16]
 800b092:	3202      	adds	r2, #2
 800b094:	f103 010c 	add.w	r1, r3, #12
 800b098:	0092      	lsls	r2, r2, #2
 800b09a:	300c      	adds	r0, #12
 800b09c:	f7fe f87b 	bl	8009196 <memcpy>
 800b0a0:	ec4b ab10 	vmov	d0, sl, fp
 800b0a4:	9805      	ldr	r0, [sp, #20]
 800b0a6:	aa1c      	add	r2, sp, #112	@ 0x70
 800b0a8:	a91b      	add	r1, sp, #108	@ 0x6c
 800b0aa:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800b0ae:	f7ff fbd7 	bl	800a860 <__d2b>
 800b0b2:	901a      	str	r0, [sp, #104]	@ 0x68
 800b0b4:	2800      	cmp	r0, #0
 800b0b6:	f43f aede 	beq.w	800ae76 <_strtod_l+0x43e>
 800b0ba:	9805      	ldr	r0, [sp, #20]
 800b0bc:	2101      	movs	r1, #1
 800b0be:	f7ff f929 	bl	800a314 <__i2b>
 800b0c2:	4680      	mov	r8, r0
 800b0c4:	b948      	cbnz	r0, 800b0da <_strtod_l+0x6a2>
 800b0c6:	f04f 0800 	mov.w	r8, #0
 800b0ca:	e6d4      	b.n	800ae76 <_strtod_l+0x43e>
 800b0cc:	f04f 32ff 	mov.w	r2, #4294967295
 800b0d0:	fa02 f303 	lsl.w	r3, r2, r3
 800b0d4:	ea03 0a0a 	and.w	sl, r3, sl
 800b0d8:	e7b0      	b.n	800b03c <_strtod_l+0x604>
 800b0da:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800b0dc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b0de:	2d00      	cmp	r5, #0
 800b0e0:	bfab      	itete	ge
 800b0e2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800b0e4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800b0e6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800b0e8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800b0ea:	bfac      	ite	ge
 800b0ec:	18ef      	addge	r7, r5, r3
 800b0ee:	1b5e      	sublt	r6, r3, r5
 800b0f0:	9b08      	ldr	r3, [sp, #32]
 800b0f2:	1aed      	subs	r5, r5, r3
 800b0f4:	4415      	add	r5, r2
 800b0f6:	4b66      	ldr	r3, [pc, #408]	@ (800b290 <_strtod_l+0x858>)
 800b0f8:	3d01      	subs	r5, #1
 800b0fa:	429d      	cmp	r5, r3
 800b0fc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b100:	da50      	bge.n	800b1a4 <_strtod_l+0x76c>
 800b102:	1b5b      	subs	r3, r3, r5
 800b104:	2b1f      	cmp	r3, #31
 800b106:	eba2 0203 	sub.w	r2, r2, r3
 800b10a:	f04f 0101 	mov.w	r1, #1
 800b10e:	dc3d      	bgt.n	800b18c <_strtod_l+0x754>
 800b110:	fa01 f303 	lsl.w	r3, r1, r3
 800b114:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b116:	2300      	movs	r3, #0
 800b118:	9310      	str	r3, [sp, #64]	@ 0x40
 800b11a:	18bd      	adds	r5, r7, r2
 800b11c:	9b08      	ldr	r3, [sp, #32]
 800b11e:	42af      	cmp	r7, r5
 800b120:	4416      	add	r6, r2
 800b122:	441e      	add	r6, r3
 800b124:	463b      	mov	r3, r7
 800b126:	bfa8      	it	ge
 800b128:	462b      	movge	r3, r5
 800b12a:	42b3      	cmp	r3, r6
 800b12c:	bfa8      	it	ge
 800b12e:	4633      	movge	r3, r6
 800b130:	2b00      	cmp	r3, #0
 800b132:	bfc2      	ittt	gt
 800b134:	1aed      	subgt	r5, r5, r3
 800b136:	1af6      	subgt	r6, r6, r3
 800b138:	1aff      	subgt	r7, r7, r3
 800b13a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	dd16      	ble.n	800b16e <_strtod_l+0x736>
 800b140:	4641      	mov	r1, r8
 800b142:	9805      	ldr	r0, [sp, #20]
 800b144:	461a      	mov	r2, r3
 800b146:	f7ff f9a5 	bl	800a494 <__pow5mult>
 800b14a:	4680      	mov	r8, r0
 800b14c:	2800      	cmp	r0, #0
 800b14e:	d0ba      	beq.n	800b0c6 <_strtod_l+0x68e>
 800b150:	4601      	mov	r1, r0
 800b152:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b154:	9805      	ldr	r0, [sp, #20]
 800b156:	f7ff f8f3 	bl	800a340 <__multiply>
 800b15a:	900e      	str	r0, [sp, #56]	@ 0x38
 800b15c:	2800      	cmp	r0, #0
 800b15e:	f43f ae8a 	beq.w	800ae76 <_strtod_l+0x43e>
 800b162:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b164:	9805      	ldr	r0, [sp, #20]
 800b166:	f7fe ffd7 	bl	800a118 <_Bfree>
 800b16a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b16c:	931a      	str	r3, [sp, #104]	@ 0x68
 800b16e:	2d00      	cmp	r5, #0
 800b170:	dc1d      	bgt.n	800b1ae <_strtod_l+0x776>
 800b172:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b174:	2b00      	cmp	r3, #0
 800b176:	dd23      	ble.n	800b1c0 <_strtod_l+0x788>
 800b178:	4649      	mov	r1, r9
 800b17a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b17c:	9805      	ldr	r0, [sp, #20]
 800b17e:	f7ff f989 	bl	800a494 <__pow5mult>
 800b182:	4681      	mov	r9, r0
 800b184:	b9e0      	cbnz	r0, 800b1c0 <_strtod_l+0x788>
 800b186:	f04f 0900 	mov.w	r9, #0
 800b18a:	e674      	b.n	800ae76 <_strtod_l+0x43e>
 800b18c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800b190:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800b194:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800b198:	35e2      	adds	r5, #226	@ 0xe2
 800b19a:	fa01 f305 	lsl.w	r3, r1, r5
 800b19e:	9310      	str	r3, [sp, #64]	@ 0x40
 800b1a0:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b1a2:	e7ba      	b.n	800b11a <_strtod_l+0x6e2>
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	9310      	str	r3, [sp, #64]	@ 0x40
 800b1a8:	2301      	movs	r3, #1
 800b1aa:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b1ac:	e7b5      	b.n	800b11a <_strtod_l+0x6e2>
 800b1ae:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b1b0:	9805      	ldr	r0, [sp, #20]
 800b1b2:	462a      	mov	r2, r5
 800b1b4:	f7ff f9c8 	bl	800a548 <__lshift>
 800b1b8:	901a      	str	r0, [sp, #104]	@ 0x68
 800b1ba:	2800      	cmp	r0, #0
 800b1bc:	d1d9      	bne.n	800b172 <_strtod_l+0x73a>
 800b1be:	e65a      	b.n	800ae76 <_strtod_l+0x43e>
 800b1c0:	2e00      	cmp	r6, #0
 800b1c2:	dd07      	ble.n	800b1d4 <_strtod_l+0x79c>
 800b1c4:	4649      	mov	r1, r9
 800b1c6:	9805      	ldr	r0, [sp, #20]
 800b1c8:	4632      	mov	r2, r6
 800b1ca:	f7ff f9bd 	bl	800a548 <__lshift>
 800b1ce:	4681      	mov	r9, r0
 800b1d0:	2800      	cmp	r0, #0
 800b1d2:	d0d8      	beq.n	800b186 <_strtod_l+0x74e>
 800b1d4:	2f00      	cmp	r7, #0
 800b1d6:	dd08      	ble.n	800b1ea <_strtod_l+0x7b2>
 800b1d8:	4641      	mov	r1, r8
 800b1da:	9805      	ldr	r0, [sp, #20]
 800b1dc:	463a      	mov	r2, r7
 800b1de:	f7ff f9b3 	bl	800a548 <__lshift>
 800b1e2:	4680      	mov	r8, r0
 800b1e4:	2800      	cmp	r0, #0
 800b1e6:	f43f ae46 	beq.w	800ae76 <_strtod_l+0x43e>
 800b1ea:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b1ec:	9805      	ldr	r0, [sp, #20]
 800b1ee:	464a      	mov	r2, r9
 800b1f0:	f7ff fa32 	bl	800a658 <__mdiff>
 800b1f4:	4604      	mov	r4, r0
 800b1f6:	2800      	cmp	r0, #0
 800b1f8:	f43f ae3d 	beq.w	800ae76 <_strtod_l+0x43e>
 800b1fc:	68c3      	ldr	r3, [r0, #12]
 800b1fe:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b200:	2300      	movs	r3, #0
 800b202:	60c3      	str	r3, [r0, #12]
 800b204:	4641      	mov	r1, r8
 800b206:	f7ff fa0b 	bl	800a620 <__mcmp>
 800b20a:	2800      	cmp	r0, #0
 800b20c:	da46      	bge.n	800b29c <_strtod_l+0x864>
 800b20e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b210:	ea53 030a 	orrs.w	r3, r3, sl
 800b214:	d16c      	bne.n	800b2f0 <_strtod_l+0x8b8>
 800b216:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d168      	bne.n	800b2f0 <_strtod_l+0x8b8>
 800b21e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b222:	0d1b      	lsrs	r3, r3, #20
 800b224:	051b      	lsls	r3, r3, #20
 800b226:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b22a:	d961      	bls.n	800b2f0 <_strtod_l+0x8b8>
 800b22c:	6963      	ldr	r3, [r4, #20]
 800b22e:	b913      	cbnz	r3, 800b236 <_strtod_l+0x7fe>
 800b230:	6923      	ldr	r3, [r4, #16]
 800b232:	2b01      	cmp	r3, #1
 800b234:	dd5c      	ble.n	800b2f0 <_strtod_l+0x8b8>
 800b236:	4621      	mov	r1, r4
 800b238:	2201      	movs	r2, #1
 800b23a:	9805      	ldr	r0, [sp, #20]
 800b23c:	f7ff f984 	bl	800a548 <__lshift>
 800b240:	4641      	mov	r1, r8
 800b242:	4604      	mov	r4, r0
 800b244:	f7ff f9ec 	bl	800a620 <__mcmp>
 800b248:	2800      	cmp	r0, #0
 800b24a:	dd51      	ble.n	800b2f0 <_strtod_l+0x8b8>
 800b24c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b250:	9a08      	ldr	r2, [sp, #32]
 800b252:	0d1b      	lsrs	r3, r3, #20
 800b254:	051b      	lsls	r3, r3, #20
 800b256:	2a00      	cmp	r2, #0
 800b258:	d06b      	beq.n	800b332 <_strtod_l+0x8fa>
 800b25a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b25e:	d868      	bhi.n	800b332 <_strtod_l+0x8fa>
 800b260:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b264:	f67f ae9d 	bls.w	800afa2 <_strtod_l+0x56a>
 800b268:	4b0a      	ldr	r3, [pc, #40]	@ (800b294 <_strtod_l+0x85c>)
 800b26a:	4650      	mov	r0, sl
 800b26c:	4659      	mov	r1, fp
 800b26e:	2200      	movs	r2, #0
 800b270:	f7f5 f9c2 	bl	80005f8 <__aeabi_dmul>
 800b274:	4b08      	ldr	r3, [pc, #32]	@ (800b298 <_strtod_l+0x860>)
 800b276:	400b      	ands	r3, r1
 800b278:	4682      	mov	sl, r0
 800b27a:	468b      	mov	fp, r1
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	f47f ae05 	bne.w	800ae8c <_strtod_l+0x454>
 800b282:	9a05      	ldr	r2, [sp, #20]
 800b284:	2322      	movs	r3, #34	@ 0x22
 800b286:	6013      	str	r3, [r2, #0]
 800b288:	e600      	b.n	800ae8c <_strtod_l+0x454>
 800b28a:	bf00      	nop
 800b28c:	0800d2e8 	.word	0x0800d2e8
 800b290:	fffffc02 	.word	0xfffffc02
 800b294:	39500000 	.word	0x39500000
 800b298:	7ff00000 	.word	0x7ff00000
 800b29c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b2a0:	d165      	bne.n	800b36e <_strtod_l+0x936>
 800b2a2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b2a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b2a8:	b35a      	cbz	r2, 800b302 <_strtod_l+0x8ca>
 800b2aa:	4a9f      	ldr	r2, [pc, #636]	@ (800b528 <_strtod_l+0xaf0>)
 800b2ac:	4293      	cmp	r3, r2
 800b2ae:	d12b      	bne.n	800b308 <_strtod_l+0x8d0>
 800b2b0:	9b08      	ldr	r3, [sp, #32]
 800b2b2:	4651      	mov	r1, sl
 800b2b4:	b303      	cbz	r3, 800b2f8 <_strtod_l+0x8c0>
 800b2b6:	4b9d      	ldr	r3, [pc, #628]	@ (800b52c <_strtod_l+0xaf4>)
 800b2b8:	465a      	mov	r2, fp
 800b2ba:	4013      	ands	r3, r2
 800b2bc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b2c0:	f04f 32ff 	mov.w	r2, #4294967295
 800b2c4:	d81b      	bhi.n	800b2fe <_strtod_l+0x8c6>
 800b2c6:	0d1b      	lsrs	r3, r3, #20
 800b2c8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b2cc:	fa02 f303 	lsl.w	r3, r2, r3
 800b2d0:	4299      	cmp	r1, r3
 800b2d2:	d119      	bne.n	800b308 <_strtod_l+0x8d0>
 800b2d4:	4b96      	ldr	r3, [pc, #600]	@ (800b530 <_strtod_l+0xaf8>)
 800b2d6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b2d8:	429a      	cmp	r2, r3
 800b2da:	d102      	bne.n	800b2e2 <_strtod_l+0x8aa>
 800b2dc:	3101      	adds	r1, #1
 800b2de:	f43f adca 	beq.w	800ae76 <_strtod_l+0x43e>
 800b2e2:	4b92      	ldr	r3, [pc, #584]	@ (800b52c <_strtod_l+0xaf4>)
 800b2e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b2e6:	401a      	ands	r2, r3
 800b2e8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800b2ec:	f04f 0a00 	mov.w	sl, #0
 800b2f0:	9b08      	ldr	r3, [sp, #32]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d1b8      	bne.n	800b268 <_strtod_l+0x830>
 800b2f6:	e5c9      	b.n	800ae8c <_strtod_l+0x454>
 800b2f8:	f04f 33ff 	mov.w	r3, #4294967295
 800b2fc:	e7e8      	b.n	800b2d0 <_strtod_l+0x898>
 800b2fe:	4613      	mov	r3, r2
 800b300:	e7e6      	b.n	800b2d0 <_strtod_l+0x898>
 800b302:	ea53 030a 	orrs.w	r3, r3, sl
 800b306:	d0a1      	beq.n	800b24c <_strtod_l+0x814>
 800b308:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b30a:	b1db      	cbz	r3, 800b344 <_strtod_l+0x90c>
 800b30c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b30e:	4213      	tst	r3, r2
 800b310:	d0ee      	beq.n	800b2f0 <_strtod_l+0x8b8>
 800b312:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b314:	9a08      	ldr	r2, [sp, #32]
 800b316:	4650      	mov	r0, sl
 800b318:	4659      	mov	r1, fp
 800b31a:	b1bb      	cbz	r3, 800b34c <_strtod_l+0x914>
 800b31c:	f7ff fb6e 	bl	800a9fc <sulp>
 800b320:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b324:	ec53 2b10 	vmov	r2, r3, d0
 800b328:	f7f4 ffb0 	bl	800028c <__adddf3>
 800b32c:	4682      	mov	sl, r0
 800b32e:	468b      	mov	fp, r1
 800b330:	e7de      	b.n	800b2f0 <_strtod_l+0x8b8>
 800b332:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b336:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b33a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b33e:	f04f 3aff 	mov.w	sl, #4294967295
 800b342:	e7d5      	b.n	800b2f0 <_strtod_l+0x8b8>
 800b344:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b346:	ea13 0f0a 	tst.w	r3, sl
 800b34a:	e7e1      	b.n	800b310 <_strtod_l+0x8d8>
 800b34c:	f7ff fb56 	bl	800a9fc <sulp>
 800b350:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b354:	ec53 2b10 	vmov	r2, r3, d0
 800b358:	f7f4 ff96 	bl	8000288 <__aeabi_dsub>
 800b35c:	2200      	movs	r2, #0
 800b35e:	2300      	movs	r3, #0
 800b360:	4682      	mov	sl, r0
 800b362:	468b      	mov	fp, r1
 800b364:	f7f5 fbb0 	bl	8000ac8 <__aeabi_dcmpeq>
 800b368:	2800      	cmp	r0, #0
 800b36a:	d0c1      	beq.n	800b2f0 <_strtod_l+0x8b8>
 800b36c:	e619      	b.n	800afa2 <_strtod_l+0x56a>
 800b36e:	4641      	mov	r1, r8
 800b370:	4620      	mov	r0, r4
 800b372:	f7ff facd 	bl	800a910 <__ratio>
 800b376:	ec57 6b10 	vmov	r6, r7, d0
 800b37a:	2200      	movs	r2, #0
 800b37c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b380:	4630      	mov	r0, r6
 800b382:	4639      	mov	r1, r7
 800b384:	f7f5 fbb4 	bl	8000af0 <__aeabi_dcmple>
 800b388:	2800      	cmp	r0, #0
 800b38a:	d06f      	beq.n	800b46c <_strtod_l+0xa34>
 800b38c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d17a      	bne.n	800b488 <_strtod_l+0xa50>
 800b392:	f1ba 0f00 	cmp.w	sl, #0
 800b396:	d158      	bne.n	800b44a <_strtod_l+0xa12>
 800b398:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b39a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d15a      	bne.n	800b458 <_strtod_l+0xa20>
 800b3a2:	4b64      	ldr	r3, [pc, #400]	@ (800b534 <_strtod_l+0xafc>)
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	4630      	mov	r0, r6
 800b3a8:	4639      	mov	r1, r7
 800b3aa:	f7f5 fb97 	bl	8000adc <__aeabi_dcmplt>
 800b3ae:	2800      	cmp	r0, #0
 800b3b0:	d159      	bne.n	800b466 <_strtod_l+0xa2e>
 800b3b2:	4630      	mov	r0, r6
 800b3b4:	4639      	mov	r1, r7
 800b3b6:	4b60      	ldr	r3, [pc, #384]	@ (800b538 <_strtod_l+0xb00>)
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	f7f5 f91d 	bl	80005f8 <__aeabi_dmul>
 800b3be:	4606      	mov	r6, r0
 800b3c0:	460f      	mov	r7, r1
 800b3c2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b3c6:	9606      	str	r6, [sp, #24]
 800b3c8:	9307      	str	r3, [sp, #28]
 800b3ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b3ce:	4d57      	ldr	r5, [pc, #348]	@ (800b52c <_strtod_l+0xaf4>)
 800b3d0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b3d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b3d6:	401d      	ands	r5, r3
 800b3d8:	4b58      	ldr	r3, [pc, #352]	@ (800b53c <_strtod_l+0xb04>)
 800b3da:	429d      	cmp	r5, r3
 800b3dc:	f040 80b2 	bne.w	800b544 <_strtod_l+0xb0c>
 800b3e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b3e2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b3e6:	ec4b ab10 	vmov	d0, sl, fp
 800b3ea:	f7ff f9c9 	bl	800a780 <__ulp>
 800b3ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b3f2:	ec51 0b10 	vmov	r0, r1, d0
 800b3f6:	f7f5 f8ff 	bl	80005f8 <__aeabi_dmul>
 800b3fa:	4652      	mov	r2, sl
 800b3fc:	465b      	mov	r3, fp
 800b3fe:	f7f4 ff45 	bl	800028c <__adddf3>
 800b402:	460b      	mov	r3, r1
 800b404:	4949      	ldr	r1, [pc, #292]	@ (800b52c <_strtod_l+0xaf4>)
 800b406:	4a4e      	ldr	r2, [pc, #312]	@ (800b540 <_strtod_l+0xb08>)
 800b408:	4019      	ands	r1, r3
 800b40a:	4291      	cmp	r1, r2
 800b40c:	4682      	mov	sl, r0
 800b40e:	d942      	bls.n	800b496 <_strtod_l+0xa5e>
 800b410:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b412:	4b47      	ldr	r3, [pc, #284]	@ (800b530 <_strtod_l+0xaf8>)
 800b414:	429a      	cmp	r2, r3
 800b416:	d103      	bne.n	800b420 <_strtod_l+0x9e8>
 800b418:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b41a:	3301      	adds	r3, #1
 800b41c:	f43f ad2b 	beq.w	800ae76 <_strtod_l+0x43e>
 800b420:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800b530 <_strtod_l+0xaf8>
 800b424:	f04f 3aff 	mov.w	sl, #4294967295
 800b428:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b42a:	9805      	ldr	r0, [sp, #20]
 800b42c:	f7fe fe74 	bl	800a118 <_Bfree>
 800b430:	9805      	ldr	r0, [sp, #20]
 800b432:	4649      	mov	r1, r9
 800b434:	f7fe fe70 	bl	800a118 <_Bfree>
 800b438:	9805      	ldr	r0, [sp, #20]
 800b43a:	4641      	mov	r1, r8
 800b43c:	f7fe fe6c 	bl	800a118 <_Bfree>
 800b440:	9805      	ldr	r0, [sp, #20]
 800b442:	4621      	mov	r1, r4
 800b444:	f7fe fe68 	bl	800a118 <_Bfree>
 800b448:	e618      	b.n	800b07c <_strtod_l+0x644>
 800b44a:	f1ba 0f01 	cmp.w	sl, #1
 800b44e:	d103      	bne.n	800b458 <_strtod_l+0xa20>
 800b450:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b452:	2b00      	cmp	r3, #0
 800b454:	f43f ada5 	beq.w	800afa2 <_strtod_l+0x56a>
 800b458:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800b508 <_strtod_l+0xad0>
 800b45c:	4f35      	ldr	r7, [pc, #212]	@ (800b534 <_strtod_l+0xafc>)
 800b45e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b462:	2600      	movs	r6, #0
 800b464:	e7b1      	b.n	800b3ca <_strtod_l+0x992>
 800b466:	4f34      	ldr	r7, [pc, #208]	@ (800b538 <_strtod_l+0xb00>)
 800b468:	2600      	movs	r6, #0
 800b46a:	e7aa      	b.n	800b3c2 <_strtod_l+0x98a>
 800b46c:	4b32      	ldr	r3, [pc, #200]	@ (800b538 <_strtod_l+0xb00>)
 800b46e:	4630      	mov	r0, r6
 800b470:	4639      	mov	r1, r7
 800b472:	2200      	movs	r2, #0
 800b474:	f7f5 f8c0 	bl	80005f8 <__aeabi_dmul>
 800b478:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b47a:	4606      	mov	r6, r0
 800b47c:	460f      	mov	r7, r1
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d09f      	beq.n	800b3c2 <_strtod_l+0x98a>
 800b482:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b486:	e7a0      	b.n	800b3ca <_strtod_l+0x992>
 800b488:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b510 <_strtod_l+0xad8>
 800b48c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b490:	ec57 6b17 	vmov	r6, r7, d7
 800b494:	e799      	b.n	800b3ca <_strtod_l+0x992>
 800b496:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b49a:	9b08      	ldr	r3, [sp, #32]
 800b49c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d1c1      	bne.n	800b428 <_strtod_l+0x9f0>
 800b4a4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b4a8:	0d1b      	lsrs	r3, r3, #20
 800b4aa:	051b      	lsls	r3, r3, #20
 800b4ac:	429d      	cmp	r5, r3
 800b4ae:	d1bb      	bne.n	800b428 <_strtod_l+0x9f0>
 800b4b0:	4630      	mov	r0, r6
 800b4b2:	4639      	mov	r1, r7
 800b4b4:	f7f5 fc00 	bl	8000cb8 <__aeabi_d2lz>
 800b4b8:	f7f5 f870 	bl	800059c <__aeabi_l2d>
 800b4bc:	4602      	mov	r2, r0
 800b4be:	460b      	mov	r3, r1
 800b4c0:	4630      	mov	r0, r6
 800b4c2:	4639      	mov	r1, r7
 800b4c4:	f7f4 fee0 	bl	8000288 <__aeabi_dsub>
 800b4c8:	460b      	mov	r3, r1
 800b4ca:	4602      	mov	r2, r0
 800b4cc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b4d0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b4d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b4d6:	ea46 060a 	orr.w	r6, r6, sl
 800b4da:	431e      	orrs	r6, r3
 800b4dc:	d06f      	beq.n	800b5be <_strtod_l+0xb86>
 800b4de:	a30e      	add	r3, pc, #56	@ (adr r3, 800b518 <_strtod_l+0xae0>)
 800b4e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4e4:	f7f5 fafa 	bl	8000adc <__aeabi_dcmplt>
 800b4e8:	2800      	cmp	r0, #0
 800b4ea:	f47f accf 	bne.w	800ae8c <_strtod_l+0x454>
 800b4ee:	a30c      	add	r3, pc, #48	@ (adr r3, 800b520 <_strtod_l+0xae8>)
 800b4f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b4f8:	f7f5 fb0e 	bl	8000b18 <__aeabi_dcmpgt>
 800b4fc:	2800      	cmp	r0, #0
 800b4fe:	d093      	beq.n	800b428 <_strtod_l+0x9f0>
 800b500:	e4c4      	b.n	800ae8c <_strtod_l+0x454>
 800b502:	bf00      	nop
 800b504:	f3af 8000 	nop.w
 800b508:	00000000 	.word	0x00000000
 800b50c:	bff00000 	.word	0xbff00000
 800b510:	00000000 	.word	0x00000000
 800b514:	3ff00000 	.word	0x3ff00000
 800b518:	94a03595 	.word	0x94a03595
 800b51c:	3fdfffff 	.word	0x3fdfffff
 800b520:	35afe535 	.word	0x35afe535
 800b524:	3fe00000 	.word	0x3fe00000
 800b528:	000fffff 	.word	0x000fffff
 800b52c:	7ff00000 	.word	0x7ff00000
 800b530:	7fefffff 	.word	0x7fefffff
 800b534:	3ff00000 	.word	0x3ff00000
 800b538:	3fe00000 	.word	0x3fe00000
 800b53c:	7fe00000 	.word	0x7fe00000
 800b540:	7c9fffff 	.word	0x7c9fffff
 800b544:	9b08      	ldr	r3, [sp, #32]
 800b546:	b323      	cbz	r3, 800b592 <_strtod_l+0xb5a>
 800b548:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b54c:	d821      	bhi.n	800b592 <_strtod_l+0xb5a>
 800b54e:	a328      	add	r3, pc, #160	@ (adr r3, 800b5f0 <_strtod_l+0xbb8>)
 800b550:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b554:	4630      	mov	r0, r6
 800b556:	4639      	mov	r1, r7
 800b558:	f7f5 faca 	bl	8000af0 <__aeabi_dcmple>
 800b55c:	b1a0      	cbz	r0, 800b588 <_strtod_l+0xb50>
 800b55e:	4639      	mov	r1, r7
 800b560:	4630      	mov	r0, r6
 800b562:	f7f5 fb21 	bl	8000ba8 <__aeabi_d2uiz>
 800b566:	2801      	cmp	r0, #1
 800b568:	bf38      	it	cc
 800b56a:	2001      	movcc	r0, #1
 800b56c:	f7f4 ffca 	bl	8000504 <__aeabi_ui2d>
 800b570:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b572:	4606      	mov	r6, r0
 800b574:	460f      	mov	r7, r1
 800b576:	b9fb      	cbnz	r3, 800b5b8 <_strtod_l+0xb80>
 800b578:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b57c:	9014      	str	r0, [sp, #80]	@ 0x50
 800b57e:	9315      	str	r3, [sp, #84]	@ 0x54
 800b580:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b584:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b588:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b58a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b58e:	1b5b      	subs	r3, r3, r5
 800b590:	9311      	str	r3, [sp, #68]	@ 0x44
 800b592:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b596:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b59a:	f7ff f8f1 	bl	800a780 <__ulp>
 800b59e:	4650      	mov	r0, sl
 800b5a0:	ec53 2b10 	vmov	r2, r3, d0
 800b5a4:	4659      	mov	r1, fp
 800b5a6:	f7f5 f827 	bl	80005f8 <__aeabi_dmul>
 800b5aa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b5ae:	f7f4 fe6d 	bl	800028c <__adddf3>
 800b5b2:	4682      	mov	sl, r0
 800b5b4:	468b      	mov	fp, r1
 800b5b6:	e770      	b.n	800b49a <_strtod_l+0xa62>
 800b5b8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b5bc:	e7e0      	b.n	800b580 <_strtod_l+0xb48>
 800b5be:	a30e      	add	r3, pc, #56	@ (adr r3, 800b5f8 <_strtod_l+0xbc0>)
 800b5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5c4:	f7f5 fa8a 	bl	8000adc <__aeabi_dcmplt>
 800b5c8:	e798      	b.n	800b4fc <_strtod_l+0xac4>
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b5ce:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b5d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b5d2:	6013      	str	r3, [r2, #0]
 800b5d4:	f7ff ba6d 	b.w	800aab2 <_strtod_l+0x7a>
 800b5d8:	2a65      	cmp	r2, #101	@ 0x65
 800b5da:	f43f ab66 	beq.w	800acaa <_strtod_l+0x272>
 800b5de:	2a45      	cmp	r2, #69	@ 0x45
 800b5e0:	f43f ab63 	beq.w	800acaa <_strtod_l+0x272>
 800b5e4:	2301      	movs	r3, #1
 800b5e6:	f7ff bb9e 	b.w	800ad26 <_strtod_l+0x2ee>
 800b5ea:	bf00      	nop
 800b5ec:	f3af 8000 	nop.w
 800b5f0:	ffc00000 	.word	0xffc00000
 800b5f4:	41dfffff 	.word	0x41dfffff
 800b5f8:	94a03595 	.word	0x94a03595
 800b5fc:	3fcfffff 	.word	0x3fcfffff

0800b600 <_strtod_r>:
 800b600:	4b01      	ldr	r3, [pc, #4]	@ (800b608 <_strtod_r+0x8>)
 800b602:	f7ff ba19 	b.w	800aa38 <_strtod_l>
 800b606:	bf00      	nop
 800b608:	200000b0 	.word	0x200000b0

0800b60c <_strtol_l.constprop.0>:
 800b60c:	2b24      	cmp	r3, #36	@ 0x24
 800b60e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b612:	4686      	mov	lr, r0
 800b614:	4690      	mov	r8, r2
 800b616:	d801      	bhi.n	800b61c <_strtol_l.constprop.0+0x10>
 800b618:	2b01      	cmp	r3, #1
 800b61a:	d106      	bne.n	800b62a <_strtol_l.constprop.0+0x1e>
 800b61c:	f7fd fd8e 	bl	800913c <__errno>
 800b620:	2316      	movs	r3, #22
 800b622:	6003      	str	r3, [r0, #0]
 800b624:	2000      	movs	r0, #0
 800b626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b62a:	4834      	ldr	r0, [pc, #208]	@ (800b6fc <_strtol_l.constprop.0+0xf0>)
 800b62c:	460d      	mov	r5, r1
 800b62e:	462a      	mov	r2, r5
 800b630:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b634:	5d06      	ldrb	r6, [r0, r4]
 800b636:	f016 0608 	ands.w	r6, r6, #8
 800b63a:	d1f8      	bne.n	800b62e <_strtol_l.constprop.0+0x22>
 800b63c:	2c2d      	cmp	r4, #45	@ 0x2d
 800b63e:	d12d      	bne.n	800b69c <_strtol_l.constprop.0+0x90>
 800b640:	782c      	ldrb	r4, [r5, #0]
 800b642:	2601      	movs	r6, #1
 800b644:	1c95      	adds	r5, r2, #2
 800b646:	f033 0210 	bics.w	r2, r3, #16
 800b64a:	d109      	bne.n	800b660 <_strtol_l.constprop.0+0x54>
 800b64c:	2c30      	cmp	r4, #48	@ 0x30
 800b64e:	d12a      	bne.n	800b6a6 <_strtol_l.constprop.0+0x9a>
 800b650:	782a      	ldrb	r2, [r5, #0]
 800b652:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b656:	2a58      	cmp	r2, #88	@ 0x58
 800b658:	d125      	bne.n	800b6a6 <_strtol_l.constprop.0+0x9a>
 800b65a:	786c      	ldrb	r4, [r5, #1]
 800b65c:	2310      	movs	r3, #16
 800b65e:	3502      	adds	r5, #2
 800b660:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b664:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b668:	2200      	movs	r2, #0
 800b66a:	fbbc f9f3 	udiv	r9, ip, r3
 800b66e:	4610      	mov	r0, r2
 800b670:	fb03 ca19 	mls	sl, r3, r9, ip
 800b674:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b678:	2f09      	cmp	r7, #9
 800b67a:	d81b      	bhi.n	800b6b4 <_strtol_l.constprop.0+0xa8>
 800b67c:	463c      	mov	r4, r7
 800b67e:	42a3      	cmp	r3, r4
 800b680:	dd27      	ble.n	800b6d2 <_strtol_l.constprop.0+0xc6>
 800b682:	1c57      	adds	r7, r2, #1
 800b684:	d007      	beq.n	800b696 <_strtol_l.constprop.0+0x8a>
 800b686:	4581      	cmp	r9, r0
 800b688:	d320      	bcc.n	800b6cc <_strtol_l.constprop.0+0xc0>
 800b68a:	d101      	bne.n	800b690 <_strtol_l.constprop.0+0x84>
 800b68c:	45a2      	cmp	sl, r4
 800b68e:	db1d      	blt.n	800b6cc <_strtol_l.constprop.0+0xc0>
 800b690:	fb00 4003 	mla	r0, r0, r3, r4
 800b694:	2201      	movs	r2, #1
 800b696:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b69a:	e7eb      	b.n	800b674 <_strtol_l.constprop.0+0x68>
 800b69c:	2c2b      	cmp	r4, #43	@ 0x2b
 800b69e:	bf04      	itt	eq
 800b6a0:	782c      	ldrbeq	r4, [r5, #0]
 800b6a2:	1c95      	addeq	r5, r2, #2
 800b6a4:	e7cf      	b.n	800b646 <_strtol_l.constprop.0+0x3a>
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d1da      	bne.n	800b660 <_strtol_l.constprop.0+0x54>
 800b6aa:	2c30      	cmp	r4, #48	@ 0x30
 800b6ac:	bf0c      	ite	eq
 800b6ae:	2308      	moveq	r3, #8
 800b6b0:	230a      	movne	r3, #10
 800b6b2:	e7d5      	b.n	800b660 <_strtol_l.constprop.0+0x54>
 800b6b4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b6b8:	2f19      	cmp	r7, #25
 800b6ba:	d801      	bhi.n	800b6c0 <_strtol_l.constprop.0+0xb4>
 800b6bc:	3c37      	subs	r4, #55	@ 0x37
 800b6be:	e7de      	b.n	800b67e <_strtol_l.constprop.0+0x72>
 800b6c0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b6c4:	2f19      	cmp	r7, #25
 800b6c6:	d804      	bhi.n	800b6d2 <_strtol_l.constprop.0+0xc6>
 800b6c8:	3c57      	subs	r4, #87	@ 0x57
 800b6ca:	e7d8      	b.n	800b67e <_strtol_l.constprop.0+0x72>
 800b6cc:	f04f 32ff 	mov.w	r2, #4294967295
 800b6d0:	e7e1      	b.n	800b696 <_strtol_l.constprop.0+0x8a>
 800b6d2:	1c53      	adds	r3, r2, #1
 800b6d4:	d108      	bne.n	800b6e8 <_strtol_l.constprop.0+0xdc>
 800b6d6:	2322      	movs	r3, #34	@ 0x22
 800b6d8:	f8ce 3000 	str.w	r3, [lr]
 800b6dc:	4660      	mov	r0, ip
 800b6de:	f1b8 0f00 	cmp.w	r8, #0
 800b6e2:	d0a0      	beq.n	800b626 <_strtol_l.constprop.0+0x1a>
 800b6e4:	1e69      	subs	r1, r5, #1
 800b6e6:	e006      	b.n	800b6f6 <_strtol_l.constprop.0+0xea>
 800b6e8:	b106      	cbz	r6, 800b6ec <_strtol_l.constprop.0+0xe0>
 800b6ea:	4240      	negs	r0, r0
 800b6ec:	f1b8 0f00 	cmp.w	r8, #0
 800b6f0:	d099      	beq.n	800b626 <_strtol_l.constprop.0+0x1a>
 800b6f2:	2a00      	cmp	r2, #0
 800b6f4:	d1f6      	bne.n	800b6e4 <_strtol_l.constprop.0+0xd8>
 800b6f6:	f8c8 1000 	str.w	r1, [r8]
 800b6fa:	e794      	b.n	800b626 <_strtol_l.constprop.0+0x1a>
 800b6fc:	0800d311 	.word	0x0800d311

0800b700 <_strtol_r>:
 800b700:	f7ff bf84 	b.w	800b60c <_strtol_l.constprop.0>

0800b704 <__ssputs_r>:
 800b704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b708:	688e      	ldr	r6, [r1, #8]
 800b70a:	461f      	mov	r7, r3
 800b70c:	42be      	cmp	r6, r7
 800b70e:	680b      	ldr	r3, [r1, #0]
 800b710:	4682      	mov	sl, r0
 800b712:	460c      	mov	r4, r1
 800b714:	4690      	mov	r8, r2
 800b716:	d82d      	bhi.n	800b774 <__ssputs_r+0x70>
 800b718:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b71c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b720:	d026      	beq.n	800b770 <__ssputs_r+0x6c>
 800b722:	6965      	ldr	r5, [r4, #20]
 800b724:	6909      	ldr	r1, [r1, #16]
 800b726:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b72a:	eba3 0901 	sub.w	r9, r3, r1
 800b72e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b732:	1c7b      	adds	r3, r7, #1
 800b734:	444b      	add	r3, r9
 800b736:	106d      	asrs	r5, r5, #1
 800b738:	429d      	cmp	r5, r3
 800b73a:	bf38      	it	cc
 800b73c:	461d      	movcc	r5, r3
 800b73e:	0553      	lsls	r3, r2, #21
 800b740:	d527      	bpl.n	800b792 <__ssputs_r+0x8e>
 800b742:	4629      	mov	r1, r5
 800b744:	f7fe fc1c 	bl	8009f80 <_malloc_r>
 800b748:	4606      	mov	r6, r0
 800b74a:	b360      	cbz	r0, 800b7a6 <__ssputs_r+0xa2>
 800b74c:	6921      	ldr	r1, [r4, #16]
 800b74e:	464a      	mov	r2, r9
 800b750:	f7fd fd21 	bl	8009196 <memcpy>
 800b754:	89a3      	ldrh	r3, [r4, #12]
 800b756:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b75a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b75e:	81a3      	strh	r3, [r4, #12]
 800b760:	6126      	str	r6, [r4, #16]
 800b762:	6165      	str	r5, [r4, #20]
 800b764:	444e      	add	r6, r9
 800b766:	eba5 0509 	sub.w	r5, r5, r9
 800b76a:	6026      	str	r6, [r4, #0]
 800b76c:	60a5      	str	r5, [r4, #8]
 800b76e:	463e      	mov	r6, r7
 800b770:	42be      	cmp	r6, r7
 800b772:	d900      	bls.n	800b776 <__ssputs_r+0x72>
 800b774:	463e      	mov	r6, r7
 800b776:	6820      	ldr	r0, [r4, #0]
 800b778:	4632      	mov	r2, r6
 800b77a:	4641      	mov	r1, r8
 800b77c:	f000 fb7c 	bl	800be78 <memmove>
 800b780:	68a3      	ldr	r3, [r4, #8]
 800b782:	1b9b      	subs	r3, r3, r6
 800b784:	60a3      	str	r3, [r4, #8]
 800b786:	6823      	ldr	r3, [r4, #0]
 800b788:	4433      	add	r3, r6
 800b78a:	6023      	str	r3, [r4, #0]
 800b78c:	2000      	movs	r0, #0
 800b78e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b792:	462a      	mov	r2, r5
 800b794:	f000 ff29 	bl	800c5ea <_realloc_r>
 800b798:	4606      	mov	r6, r0
 800b79a:	2800      	cmp	r0, #0
 800b79c:	d1e0      	bne.n	800b760 <__ssputs_r+0x5c>
 800b79e:	6921      	ldr	r1, [r4, #16]
 800b7a0:	4650      	mov	r0, sl
 800b7a2:	f7fe fb79 	bl	8009e98 <_free_r>
 800b7a6:	230c      	movs	r3, #12
 800b7a8:	f8ca 3000 	str.w	r3, [sl]
 800b7ac:	89a3      	ldrh	r3, [r4, #12]
 800b7ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b7b2:	81a3      	strh	r3, [r4, #12]
 800b7b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b7b8:	e7e9      	b.n	800b78e <__ssputs_r+0x8a>
	...

0800b7bc <_svfiprintf_r>:
 800b7bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7c0:	4698      	mov	r8, r3
 800b7c2:	898b      	ldrh	r3, [r1, #12]
 800b7c4:	061b      	lsls	r3, r3, #24
 800b7c6:	b09d      	sub	sp, #116	@ 0x74
 800b7c8:	4607      	mov	r7, r0
 800b7ca:	460d      	mov	r5, r1
 800b7cc:	4614      	mov	r4, r2
 800b7ce:	d510      	bpl.n	800b7f2 <_svfiprintf_r+0x36>
 800b7d0:	690b      	ldr	r3, [r1, #16]
 800b7d2:	b973      	cbnz	r3, 800b7f2 <_svfiprintf_r+0x36>
 800b7d4:	2140      	movs	r1, #64	@ 0x40
 800b7d6:	f7fe fbd3 	bl	8009f80 <_malloc_r>
 800b7da:	6028      	str	r0, [r5, #0]
 800b7dc:	6128      	str	r0, [r5, #16]
 800b7de:	b930      	cbnz	r0, 800b7ee <_svfiprintf_r+0x32>
 800b7e0:	230c      	movs	r3, #12
 800b7e2:	603b      	str	r3, [r7, #0]
 800b7e4:	f04f 30ff 	mov.w	r0, #4294967295
 800b7e8:	b01d      	add	sp, #116	@ 0x74
 800b7ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7ee:	2340      	movs	r3, #64	@ 0x40
 800b7f0:	616b      	str	r3, [r5, #20]
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b7f6:	2320      	movs	r3, #32
 800b7f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b7fc:	f8cd 800c 	str.w	r8, [sp, #12]
 800b800:	2330      	movs	r3, #48	@ 0x30
 800b802:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b9a0 <_svfiprintf_r+0x1e4>
 800b806:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b80a:	f04f 0901 	mov.w	r9, #1
 800b80e:	4623      	mov	r3, r4
 800b810:	469a      	mov	sl, r3
 800b812:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b816:	b10a      	cbz	r2, 800b81c <_svfiprintf_r+0x60>
 800b818:	2a25      	cmp	r2, #37	@ 0x25
 800b81a:	d1f9      	bne.n	800b810 <_svfiprintf_r+0x54>
 800b81c:	ebba 0b04 	subs.w	fp, sl, r4
 800b820:	d00b      	beq.n	800b83a <_svfiprintf_r+0x7e>
 800b822:	465b      	mov	r3, fp
 800b824:	4622      	mov	r2, r4
 800b826:	4629      	mov	r1, r5
 800b828:	4638      	mov	r0, r7
 800b82a:	f7ff ff6b 	bl	800b704 <__ssputs_r>
 800b82e:	3001      	adds	r0, #1
 800b830:	f000 80a7 	beq.w	800b982 <_svfiprintf_r+0x1c6>
 800b834:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b836:	445a      	add	r2, fp
 800b838:	9209      	str	r2, [sp, #36]	@ 0x24
 800b83a:	f89a 3000 	ldrb.w	r3, [sl]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	f000 809f 	beq.w	800b982 <_svfiprintf_r+0x1c6>
 800b844:	2300      	movs	r3, #0
 800b846:	f04f 32ff 	mov.w	r2, #4294967295
 800b84a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b84e:	f10a 0a01 	add.w	sl, sl, #1
 800b852:	9304      	str	r3, [sp, #16]
 800b854:	9307      	str	r3, [sp, #28]
 800b856:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b85a:	931a      	str	r3, [sp, #104]	@ 0x68
 800b85c:	4654      	mov	r4, sl
 800b85e:	2205      	movs	r2, #5
 800b860:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b864:	484e      	ldr	r0, [pc, #312]	@ (800b9a0 <_svfiprintf_r+0x1e4>)
 800b866:	f7f4 fcb3 	bl	80001d0 <memchr>
 800b86a:	9a04      	ldr	r2, [sp, #16]
 800b86c:	b9d8      	cbnz	r0, 800b8a6 <_svfiprintf_r+0xea>
 800b86e:	06d0      	lsls	r0, r2, #27
 800b870:	bf44      	itt	mi
 800b872:	2320      	movmi	r3, #32
 800b874:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b878:	0711      	lsls	r1, r2, #28
 800b87a:	bf44      	itt	mi
 800b87c:	232b      	movmi	r3, #43	@ 0x2b
 800b87e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b882:	f89a 3000 	ldrb.w	r3, [sl]
 800b886:	2b2a      	cmp	r3, #42	@ 0x2a
 800b888:	d015      	beq.n	800b8b6 <_svfiprintf_r+0xfa>
 800b88a:	9a07      	ldr	r2, [sp, #28]
 800b88c:	4654      	mov	r4, sl
 800b88e:	2000      	movs	r0, #0
 800b890:	f04f 0c0a 	mov.w	ip, #10
 800b894:	4621      	mov	r1, r4
 800b896:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b89a:	3b30      	subs	r3, #48	@ 0x30
 800b89c:	2b09      	cmp	r3, #9
 800b89e:	d94b      	bls.n	800b938 <_svfiprintf_r+0x17c>
 800b8a0:	b1b0      	cbz	r0, 800b8d0 <_svfiprintf_r+0x114>
 800b8a2:	9207      	str	r2, [sp, #28]
 800b8a4:	e014      	b.n	800b8d0 <_svfiprintf_r+0x114>
 800b8a6:	eba0 0308 	sub.w	r3, r0, r8
 800b8aa:	fa09 f303 	lsl.w	r3, r9, r3
 800b8ae:	4313      	orrs	r3, r2
 800b8b0:	9304      	str	r3, [sp, #16]
 800b8b2:	46a2      	mov	sl, r4
 800b8b4:	e7d2      	b.n	800b85c <_svfiprintf_r+0xa0>
 800b8b6:	9b03      	ldr	r3, [sp, #12]
 800b8b8:	1d19      	adds	r1, r3, #4
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	9103      	str	r1, [sp, #12]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	bfbb      	ittet	lt
 800b8c2:	425b      	neglt	r3, r3
 800b8c4:	f042 0202 	orrlt.w	r2, r2, #2
 800b8c8:	9307      	strge	r3, [sp, #28]
 800b8ca:	9307      	strlt	r3, [sp, #28]
 800b8cc:	bfb8      	it	lt
 800b8ce:	9204      	strlt	r2, [sp, #16]
 800b8d0:	7823      	ldrb	r3, [r4, #0]
 800b8d2:	2b2e      	cmp	r3, #46	@ 0x2e
 800b8d4:	d10a      	bne.n	800b8ec <_svfiprintf_r+0x130>
 800b8d6:	7863      	ldrb	r3, [r4, #1]
 800b8d8:	2b2a      	cmp	r3, #42	@ 0x2a
 800b8da:	d132      	bne.n	800b942 <_svfiprintf_r+0x186>
 800b8dc:	9b03      	ldr	r3, [sp, #12]
 800b8de:	1d1a      	adds	r2, r3, #4
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	9203      	str	r2, [sp, #12]
 800b8e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b8e8:	3402      	adds	r4, #2
 800b8ea:	9305      	str	r3, [sp, #20]
 800b8ec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b9b0 <_svfiprintf_r+0x1f4>
 800b8f0:	7821      	ldrb	r1, [r4, #0]
 800b8f2:	2203      	movs	r2, #3
 800b8f4:	4650      	mov	r0, sl
 800b8f6:	f7f4 fc6b 	bl	80001d0 <memchr>
 800b8fa:	b138      	cbz	r0, 800b90c <_svfiprintf_r+0x150>
 800b8fc:	9b04      	ldr	r3, [sp, #16]
 800b8fe:	eba0 000a 	sub.w	r0, r0, sl
 800b902:	2240      	movs	r2, #64	@ 0x40
 800b904:	4082      	lsls	r2, r0
 800b906:	4313      	orrs	r3, r2
 800b908:	3401      	adds	r4, #1
 800b90a:	9304      	str	r3, [sp, #16]
 800b90c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b910:	4824      	ldr	r0, [pc, #144]	@ (800b9a4 <_svfiprintf_r+0x1e8>)
 800b912:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b916:	2206      	movs	r2, #6
 800b918:	f7f4 fc5a 	bl	80001d0 <memchr>
 800b91c:	2800      	cmp	r0, #0
 800b91e:	d036      	beq.n	800b98e <_svfiprintf_r+0x1d2>
 800b920:	4b21      	ldr	r3, [pc, #132]	@ (800b9a8 <_svfiprintf_r+0x1ec>)
 800b922:	bb1b      	cbnz	r3, 800b96c <_svfiprintf_r+0x1b0>
 800b924:	9b03      	ldr	r3, [sp, #12]
 800b926:	3307      	adds	r3, #7
 800b928:	f023 0307 	bic.w	r3, r3, #7
 800b92c:	3308      	adds	r3, #8
 800b92e:	9303      	str	r3, [sp, #12]
 800b930:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b932:	4433      	add	r3, r6
 800b934:	9309      	str	r3, [sp, #36]	@ 0x24
 800b936:	e76a      	b.n	800b80e <_svfiprintf_r+0x52>
 800b938:	fb0c 3202 	mla	r2, ip, r2, r3
 800b93c:	460c      	mov	r4, r1
 800b93e:	2001      	movs	r0, #1
 800b940:	e7a8      	b.n	800b894 <_svfiprintf_r+0xd8>
 800b942:	2300      	movs	r3, #0
 800b944:	3401      	adds	r4, #1
 800b946:	9305      	str	r3, [sp, #20]
 800b948:	4619      	mov	r1, r3
 800b94a:	f04f 0c0a 	mov.w	ip, #10
 800b94e:	4620      	mov	r0, r4
 800b950:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b954:	3a30      	subs	r2, #48	@ 0x30
 800b956:	2a09      	cmp	r2, #9
 800b958:	d903      	bls.n	800b962 <_svfiprintf_r+0x1a6>
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d0c6      	beq.n	800b8ec <_svfiprintf_r+0x130>
 800b95e:	9105      	str	r1, [sp, #20]
 800b960:	e7c4      	b.n	800b8ec <_svfiprintf_r+0x130>
 800b962:	fb0c 2101 	mla	r1, ip, r1, r2
 800b966:	4604      	mov	r4, r0
 800b968:	2301      	movs	r3, #1
 800b96a:	e7f0      	b.n	800b94e <_svfiprintf_r+0x192>
 800b96c:	ab03      	add	r3, sp, #12
 800b96e:	9300      	str	r3, [sp, #0]
 800b970:	462a      	mov	r2, r5
 800b972:	4b0e      	ldr	r3, [pc, #56]	@ (800b9ac <_svfiprintf_r+0x1f0>)
 800b974:	a904      	add	r1, sp, #16
 800b976:	4638      	mov	r0, r7
 800b978:	f7fc facc 	bl	8007f14 <_printf_float>
 800b97c:	1c42      	adds	r2, r0, #1
 800b97e:	4606      	mov	r6, r0
 800b980:	d1d6      	bne.n	800b930 <_svfiprintf_r+0x174>
 800b982:	89ab      	ldrh	r3, [r5, #12]
 800b984:	065b      	lsls	r3, r3, #25
 800b986:	f53f af2d 	bmi.w	800b7e4 <_svfiprintf_r+0x28>
 800b98a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b98c:	e72c      	b.n	800b7e8 <_svfiprintf_r+0x2c>
 800b98e:	ab03      	add	r3, sp, #12
 800b990:	9300      	str	r3, [sp, #0]
 800b992:	462a      	mov	r2, r5
 800b994:	4b05      	ldr	r3, [pc, #20]	@ (800b9ac <_svfiprintf_r+0x1f0>)
 800b996:	a904      	add	r1, sp, #16
 800b998:	4638      	mov	r0, r7
 800b99a:	f7fc fd53 	bl	8008444 <_printf_i>
 800b99e:	e7ed      	b.n	800b97c <_svfiprintf_r+0x1c0>
 800b9a0:	0800d411 	.word	0x0800d411
 800b9a4:	0800d41b 	.word	0x0800d41b
 800b9a8:	08007f15 	.word	0x08007f15
 800b9ac:	0800b705 	.word	0x0800b705
 800b9b0:	0800d417 	.word	0x0800d417

0800b9b4 <__sfputc_r>:
 800b9b4:	6893      	ldr	r3, [r2, #8]
 800b9b6:	3b01      	subs	r3, #1
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	b410      	push	{r4}
 800b9bc:	6093      	str	r3, [r2, #8]
 800b9be:	da08      	bge.n	800b9d2 <__sfputc_r+0x1e>
 800b9c0:	6994      	ldr	r4, [r2, #24]
 800b9c2:	42a3      	cmp	r3, r4
 800b9c4:	db01      	blt.n	800b9ca <__sfputc_r+0x16>
 800b9c6:	290a      	cmp	r1, #10
 800b9c8:	d103      	bne.n	800b9d2 <__sfputc_r+0x1e>
 800b9ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b9ce:	f7fd ba36 	b.w	8008e3e <__swbuf_r>
 800b9d2:	6813      	ldr	r3, [r2, #0]
 800b9d4:	1c58      	adds	r0, r3, #1
 800b9d6:	6010      	str	r0, [r2, #0]
 800b9d8:	7019      	strb	r1, [r3, #0]
 800b9da:	4608      	mov	r0, r1
 800b9dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b9e0:	4770      	bx	lr

0800b9e2 <__sfputs_r>:
 800b9e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9e4:	4606      	mov	r6, r0
 800b9e6:	460f      	mov	r7, r1
 800b9e8:	4614      	mov	r4, r2
 800b9ea:	18d5      	adds	r5, r2, r3
 800b9ec:	42ac      	cmp	r4, r5
 800b9ee:	d101      	bne.n	800b9f4 <__sfputs_r+0x12>
 800b9f0:	2000      	movs	r0, #0
 800b9f2:	e007      	b.n	800ba04 <__sfputs_r+0x22>
 800b9f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9f8:	463a      	mov	r2, r7
 800b9fa:	4630      	mov	r0, r6
 800b9fc:	f7ff ffda 	bl	800b9b4 <__sfputc_r>
 800ba00:	1c43      	adds	r3, r0, #1
 800ba02:	d1f3      	bne.n	800b9ec <__sfputs_r+0xa>
 800ba04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ba08 <_vfiprintf_r>:
 800ba08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba0c:	460d      	mov	r5, r1
 800ba0e:	b09d      	sub	sp, #116	@ 0x74
 800ba10:	4614      	mov	r4, r2
 800ba12:	4698      	mov	r8, r3
 800ba14:	4606      	mov	r6, r0
 800ba16:	b118      	cbz	r0, 800ba20 <_vfiprintf_r+0x18>
 800ba18:	6a03      	ldr	r3, [r0, #32]
 800ba1a:	b90b      	cbnz	r3, 800ba20 <_vfiprintf_r+0x18>
 800ba1c:	f7fd f8d2 	bl	8008bc4 <__sinit>
 800ba20:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ba22:	07d9      	lsls	r1, r3, #31
 800ba24:	d405      	bmi.n	800ba32 <_vfiprintf_r+0x2a>
 800ba26:	89ab      	ldrh	r3, [r5, #12]
 800ba28:	059a      	lsls	r2, r3, #22
 800ba2a:	d402      	bmi.n	800ba32 <_vfiprintf_r+0x2a>
 800ba2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ba2e:	f7fd fbb0 	bl	8009192 <__retarget_lock_acquire_recursive>
 800ba32:	89ab      	ldrh	r3, [r5, #12]
 800ba34:	071b      	lsls	r3, r3, #28
 800ba36:	d501      	bpl.n	800ba3c <_vfiprintf_r+0x34>
 800ba38:	692b      	ldr	r3, [r5, #16]
 800ba3a:	b99b      	cbnz	r3, 800ba64 <_vfiprintf_r+0x5c>
 800ba3c:	4629      	mov	r1, r5
 800ba3e:	4630      	mov	r0, r6
 800ba40:	f7fd fa3c 	bl	8008ebc <__swsetup_r>
 800ba44:	b170      	cbz	r0, 800ba64 <_vfiprintf_r+0x5c>
 800ba46:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ba48:	07dc      	lsls	r4, r3, #31
 800ba4a:	d504      	bpl.n	800ba56 <_vfiprintf_r+0x4e>
 800ba4c:	f04f 30ff 	mov.w	r0, #4294967295
 800ba50:	b01d      	add	sp, #116	@ 0x74
 800ba52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba56:	89ab      	ldrh	r3, [r5, #12]
 800ba58:	0598      	lsls	r0, r3, #22
 800ba5a:	d4f7      	bmi.n	800ba4c <_vfiprintf_r+0x44>
 800ba5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ba5e:	f7fd fb99 	bl	8009194 <__retarget_lock_release_recursive>
 800ba62:	e7f3      	b.n	800ba4c <_vfiprintf_r+0x44>
 800ba64:	2300      	movs	r3, #0
 800ba66:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba68:	2320      	movs	r3, #32
 800ba6a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ba6e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba72:	2330      	movs	r3, #48	@ 0x30
 800ba74:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bc24 <_vfiprintf_r+0x21c>
 800ba78:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ba7c:	f04f 0901 	mov.w	r9, #1
 800ba80:	4623      	mov	r3, r4
 800ba82:	469a      	mov	sl, r3
 800ba84:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba88:	b10a      	cbz	r2, 800ba8e <_vfiprintf_r+0x86>
 800ba8a:	2a25      	cmp	r2, #37	@ 0x25
 800ba8c:	d1f9      	bne.n	800ba82 <_vfiprintf_r+0x7a>
 800ba8e:	ebba 0b04 	subs.w	fp, sl, r4
 800ba92:	d00b      	beq.n	800baac <_vfiprintf_r+0xa4>
 800ba94:	465b      	mov	r3, fp
 800ba96:	4622      	mov	r2, r4
 800ba98:	4629      	mov	r1, r5
 800ba9a:	4630      	mov	r0, r6
 800ba9c:	f7ff ffa1 	bl	800b9e2 <__sfputs_r>
 800baa0:	3001      	adds	r0, #1
 800baa2:	f000 80a7 	beq.w	800bbf4 <_vfiprintf_r+0x1ec>
 800baa6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800baa8:	445a      	add	r2, fp
 800baaa:	9209      	str	r2, [sp, #36]	@ 0x24
 800baac:	f89a 3000 	ldrb.w	r3, [sl]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	f000 809f 	beq.w	800bbf4 <_vfiprintf_r+0x1ec>
 800bab6:	2300      	movs	r3, #0
 800bab8:	f04f 32ff 	mov.w	r2, #4294967295
 800babc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bac0:	f10a 0a01 	add.w	sl, sl, #1
 800bac4:	9304      	str	r3, [sp, #16]
 800bac6:	9307      	str	r3, [sp, #28]
 800bac8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bacc:	931a      	str	r3, [sp, #104]	@ 0x68
 800bace:	4654      	mov	r4, sl
 800bad0:	2205      	movs	r2, #5
 800bad2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bad6:	4853      	ldr	r0, [pc, #332]	@ (800bc24 <_vfiprintf_r+0x21c>)
 800bad8:	f7f4 fb7a 	bl	80001d0 <memchr>
 800badc:	9a04      	ldr	r2, [sp, #16]
 800bade:	b9d8      	cbnz	r0, 800bb18 <_vfiprintf_r+0x110>
 800bae0:	06d1      	lsls	r1, r2, #27
 800bae2:	bf44      	itt	mi
 800bae4:	2320      	movmi	r3, #32
 800bae6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800baea:	0713      	lsls	r3, r2, #28
 800baec:	bf44      	itt	mi
 800baee:	232b      	movmi	r3, #43	@ 0x2b
 800baf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800baf4:	f89a 3000 	ldrb.w	r3, [sl]
 800baf8:	2b2a      	cmp	r3, #42	@ 0x2a
 800bafa:	d015      	beq.n	800bb28 <_vfiprintf_r+0x120>
 800bafc:	9a07      	ldr	r2, [sp, #28]
 800bafe:	4654      	mov	r4, sl
 800bb00:	2000      	movs	r0, #0
 800bb02:	f04f 0c0a 	mov.w	ip, #10
 800bb06:	4621      	mov	r1, r4
 800bb08:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb0c:	3b30      	subs	r3, #48	@ 0x30
 800bb0e:	2b09      	cmp	r3, #9
 800bb10:	d94b      	bls.n	800bbaa <_vfiprintf_r+0x1a2>
 800bb12:	b1b0      	cbz	r0, 800bb42 <_vfiprintf_r+0x13a>
 800bb14:	9207      	str	r2, [sp, #28]
 800bb16:	e014      	b.n	800bb42 <_vfiprintf_r+0x13a>
 800bb18:	eba0 0308 	sub.w	r3, r0, r8
 800bb1c:	fa09 f303 	lsl.w	r3, r9, r3
 800bb20:	4313      	orrs	r3, r2
 800bb22:	9304      	str	r3, [sp, #16]
 800bb24:	46a2      	mov	sl, r4
 800bb26:	e7d2      	b.n	800bace <_vfiprintf_r+0xc6>
 800bb28:	9b03      	ldr	r3, [sp, #12]
 800bb2a:	1d19      	adds	r1, r3, #4
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	9103      	str	r1, [sp, #12]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	bfbb      	ittet	lt
 800bb34:	425b      	neglt	r3, r3
 800bb36:	f042 0202 	orrlt.w	r2, r2, #2
 800bb3a:	9307      	strge	r3, [sp, #28]
 800bb3c:	9307      	strlt	r3, [sp, #28]
 800bb3e:	bfb8      	it	lt
 800bb40:	9204      	strlt	r2, [sp, #16]
 800bb42:	7823      	ldrb	r3, [r4, #0]
 800bb44:	2b2e      	cmp	r3, #46	@ 0x2e
 800bb46:	d10a      	bne.n	800bb5e <_vfiprintf_r+0x156>
 800bb48:	7863      	ldrb	r3, [r4, #1]
 800bb4a:	2b2a      	cmp	r3, #42	@ 0x2a
 800bb4c:	d132      	bne.n	800bbb4 <_vfiprintf_r+0x1ac>
 800bb4e:	9b03      	ldr	r3, [sp, #12]
 800bb50:	1d1a      	adds	r2, r3, #4
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	9203      	str	r2, [sp, #12]
 800bb56:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bb5a:	3402      	adds	r4, #2
 800bb5c:	9305      	str	r3, [sp, #20]
 800bb5e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bc34 <_vfiprintf_r+0x22c>
 800bb62:	7821      	ldrb	r1, [r4, #0]
 800bb64:	2203      	movs	r2, #3
 800bb66:	4650      	mov	r0, sl
 800bb68:	f7f4 fb32 	bl	80001d0 <memchr>
 800bb6c:	b138      	cbz	r0, 800bb7e <_vfiprintf_r+0x176>
 800bb6e:	9b04      	ldr	r3, [sp, #16]
 800bb70:	eba0 000a 	sub.w	r0, r0, sl
 800bb74:	2240      	movs	r2, #64	@ 0x40
 800bb76:	4082      	lsls	r2, r0
 800bb78:	4313      	orrs	r3, r2
 800bb7a:	3401      	adds	r4, #1
 800bb7c:	9304      	str	r3, [sp, #16]
 800bb7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb82:	4829      	ldr	r0, [pc, #164]	@ (800bc28 <_vfiprintf_r+0x220>)
 800bb84:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bb88:	2206      	movs	r2, #6
 800bb8a:	f7f4 fb21 	bl	80001d0 <memchr>
 800bb8e:	2800      	cmp	r0, #0
 800bb90:	d03f      	beq.n	800bc12 <_vfiprintf_r+0x20a>
 800bb92:	4b26      	ldr	r3, [pc, #152]	@ (800bc2c <_vfiprintf_r+0x224>)
 800bb94:	bb1b      	cbnz	r3, 800bbde <_vfiprintf_r+0x1d6>
 800bb96:	9b03      	ldr	r3, [sp, #12]
 800bb98:	3307      	adds	r3, #7
 800bb9a:	f023 0307 	bic.w	r3, r3, #7
 800bb9e:	3308      	adds	r3, #8
 800bba0:	9303      	str	r3, [sp, #12]
 800bba2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bba4:	443b      	add	r3, r7
 800bba6:	9309      	str	r3, [sp, #36]	@ 0x24
 800bba8:	e76a      	b.n	800ba80 <_vfiprintf_r+0x78>
 800bbaa:	fb0c 3202 	mla	r2, ip, r2, r3
 800bbae:	460c      	mov	r4, r1
 800bbb0:	2001      	movs	r0, #1
 800bbb2:	e7a8      	b.n	800bb06 <_vfiprintf_r+0xfe>
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	3401      	adds	r4, #1
 800bbb8:	9305      	str	r3, [sp, #20]
 800bbba:	4619      	mov	r1, r3
 800bbbc:	f04f 0c0a 	mov.w	ip, #10
 800bbc0:	4620      	mov	r0, r4
 800bbc2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bbc6:	3a30      	subs	r2, #48	@ 0x30
 800bbc8:	2a09      	cmp	r2, #9
 800bbca:	d903      	bls.n	800bbd4 <_vfiprintf_r+0x1cc>
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d0c6      	beq.n	800bb5e <_vfiprintf_r+0x156>
 800bbd0:	9105      	str	r1, [sp, #20]
 800bbd2:	e7c4      	b.n	800bb5e <_vfiprintf_r+0x156>
 800bbd4:	fb0c 2101 	mla	r1, ip, r1, r2
 800bbd8:	4604      	mov	r4, r0
 800bbda:	2301      	movs	r3, #1
 800bbdc:	e7f0      	b.n	800bbc0 <_vfiprintf_r+0x1b8>
 800bbde:	ab03      	add	r3, sp, #12
 800bbe0:	9300      	str	r3, [sp, #0]
 800bbe2:	462a      	mov	r2, r5
 800bbe4:	4b12      	ldr	r3, [pc, #72]	@ (800bc30 <_vfiprintf_r+0x228>)
 800bbe6:	a904      	add	r1, sp, #16
 800bbe8:	4630      	mov	r0, r6
 800bbea:	f7fc f993 	bl	8007f14 <_printf_float>
 800bbee:	4607      	mov	r7, r0
 800bbf0:	1c78      	adds	r0, r7, #1
 800bbf2:	d1d6      	bne.n	800bba2 <_vfiprintf_r+0x19a>
 800bbf4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bbf6:	07d9      	lsls	r1, r3, #31
 800bbf8:	d405      	bmi.n	800bc06 <_vfiprintf_r+0x1fe>
 800bbfa:	89ab      	ldrh	r3, [r5, #12]
 800bbfc:	059a      	lsls	r2, r3, #22
 800bbfe:	d402      	bmi.n	800bc06 <_vfiprintf_r+0x1fe>
 800bc00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bc02:	f7fd fac7 	bl	8009194 <__retarget_lock_release_recursive>
 800bc06:	89ab      	ldrh	r3, [r5, #12]
 800bc08:	065b      	lsls	r3, r3, #25
 800bc0a:	f53f af1f 	bmi.w	800ba4c <_vfiprintf_r+0x44>
 800bc0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bc10:	e71e      	b.n	800ba50 <_vfiprintf_r+0x48>
 800bc12:	ab03      	add	r3, sp, #12
 800bc14:	9300      	str	r3, [sp, #0]
 800bc16:	462a      	mov	r2, r5
 800bc18:	4b05      	ldr	r3, [pc, #20]	@ (800bc30 <_vfiprintf_r+0x228>)
 800bc1a:	a904      	add	r1, sp, #16
 800bc1c:	4630      	mov	r0, r6
 800bc1e:	f7fc fc11 	bl	8008444 <_printf_i>
 800bc22:	e7e4      	b.n	800bbee <_vfiprintf_r+0x1e6>
 800bc24:	0800d411 	.word	0x0800d411
 800bc28:	0800d41b 	.word	0x0800d41b
 800bc2c:	08007f15 	.word	0x08007f15
 800bc30:	0800b9e3 	.word	0x0800b9e3
 800bc34:	0800d417 	.word	0x0800d417

0800bc38 <__sflush_r>:
 800bc38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bc3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc40:	0716      	lsls	r6, r2, #28
 800bc42:	4605      	mov	r5, r0
 800bc44:	460c      	mov	r4, r1
 800bc46:	d454      	bmi.n	800bcf2 <__sflush_r+0xba>
 800bc48:	684b      	ldr	r3, [r1, #4]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	dc02      	bgt.n	800bc54 <__sflush_r+0x1c>
 800bc4e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	dd48      	ble.n	800bce6 <__sflush_r+0xae>
 800bc54:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bc56:	2e00      	cmp	r6, #0
 800bc58:	d045      	beq.n	800bce6 <__sflush_r+0xae>
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bc60:	682f      	ldr	r7, [r5, #0]
 800bc62:	6a21      	ldr	r1, [r4, #32]
 800bc64:	602b      	str	r3, [r5, #0]
 800bc66:	d030      	beq.n	800bcca <__sflush_r+0x92>
 800bc68:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bc6a:	89a3      	ldrh	r3, [r4, #12]
 800bc6c:	0759      	lsls	r1, r3, #29
 800bc6e:	d505      	bpl.n	800bc7c <__sflush_r+0x44>
 800bc70:	6863      	ldr	r3, [r4, #4]
 800bc72:	1ad2      	subs	r2, r2, r3
 800bc74:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bc76:	b10b      	cbz	r3, 800bc7c <__sflush_r+0x44>
 800bc78:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bc7a:	1ad2      	subs	r2, r2, r3
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bc80:	6a21      	ldr	r1, [r4, #32]
 800bc82:	4628      	mov	r0, r5
 800bc84:	47b0      	blx	r6
 800bc86:	1c43      	adds	r3, r0, #1
 800bc88:	89a3      	ldrh	r3, [r4, #12]
 800bc8a:	d106      	bne.n	800bc9a <__sflush_r+0x62>
 800bc8c:	6829      	ldr	r1, [r5, #0]
 800bc8e:	291d      	cmp	r1, #29
 800bc90:	d82b      	bhi.n	800bcea <__sflush_r+0xb2>
 800bc92:	4a2a      	ldr	r2, [pc, #168]	@ (800bd3c <__sflush_r+0x104>)
 800bc94:	410a      	asrs	r2, r1
 800bc96:	07d6      	lsls	r6, r2, #31
 800bc98:	d427      	bmi.n	800bcea <__sflush_r+0xb2>
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	6062      	str	r2, [r4, #4]
 800bc9e:	04d9      	lsls	r1, r3, #19
 800bca0:	6922      	ldr	r2, [r4, #16]
 800bca2:	6022      	str	r2, [r4, #0]
 800bca4:	d504      	bpl.n	800bcb0 <__sflush_r+0x78>
 800bca6:	1c42      	adds	r2, r0, #1
 800bca8:	d101      	bne.n	800bcae <__sflush_r+0x76>
 800bcaa:	682b      	ldr	r3, [r5, #0]
 800bcac:	b903      	cbnz	r3, 800bcb0 <__sflush_r+0x78>
 800bcae:	6560      	str	r0, [r4, #84]	@ 0x54
 800bcb0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bcb2:	602f      	str	r7, [r5, #0]
 800bcb4:	b1b9      	cbz	r1, 800bce6 <__sflush_r+0xae>
 800bcb6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bcba:	4299      	cmp	r1, r3
 800bcbc:	d002      	beq.n	800bcc4 <__sflush_r+0x8c>
 800bcbe:	4628      	mov	r0, r5
 800bcc0:	f7fe f8ea 	bl	8009e98 <_free_r>
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	6363      	str	r3, [r4, #52]	@ 0x34
 800bcc8:	e00d      	b.n	800bce6 <__sflush_r+0xae>
 800bcca:	2301      	movs	r3, #1
 800bccc:	4628      	mov	r0, r5
 800bcce:	47b0      	blx	r6
 800bcd0:	4602      	mov	r2, r0
 800bcd2:	1c50      	adds	r0, r2, #1
 800bcd4:	d1c9      	bne.n	800bc6a <__sflush_r+0x32>
 800bcd6:	682b      	ldr	r3, [r5, #0]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d0c6      	beq.n	800bc6a <__sflush_r+0x32>
 800bcdc:	2b1d      	cmp	r3, #29
 800bcde:	d001      	beq.n	800bce4 <__sflush_r+0xac>
 800bce0:	2b16      	cmp	r3, #22
 800bce2:	d11e      	bne.n	800bd22 <__sflush_r+0xea>
 800bce4:	602f      	str	r7, [r5, #0]
 800bce6:	2000      	movs	r0, #0
 800bce8:	e022      	b.n	800bd30 <__sflush_r+0xf8>
 800bcea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bcee:	b21b      	sxth	r3, r3
 800bcf0:	e01b      	b.n	800bd2a <__sflush_r+0xf2>
 800bcf2:	690f      	ldr	r7, [r1, #16]
 800bcf4:	2f00      	cmp	r7, #0
 800bcf6:	d0f6      	beq.n	800bce6 <__sflush_r+0xae>
 800bcf8:	0793      	lsls	r3, r2, #30
 800bcfa:	680e      	ldr	r6, [r1, #0]
 800bcfc:	bf08      	it	eq
 800bcfe:	694b      	ldreq	r3, [r1, #20]
 800bd00:	600f      	str	r7, [r1, #0]
 800bd02:	bf18      	it	ne
 800bd04:	2300      	movne	r3, #0
 800bd06:	eba6 0807 	sub.w	r8, r6, r7
 800bd0a:	608b      	str	r3, [r1, #8]
 800bd0c:	f1b8 0f00 	cmp.w	r8, #0
 800bd10:	dde9      	ble.n	800bce6 <__sflush_r+0xae>
 800bd12:	6a21      	ldr	r1, [r4, #32]
 800bd14:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bd16:	4643      	mov	r3, r8
 800bd18:	463a      	mov	r2, r7
 800bd1a:	4628      	mov	r0, r5
 800bd1c:	47b0      	blx	r6
 800bd1e:	2800      	cmp	r0, #0
 800bd20:	dc08      	bgt.n	800bd34 <__sflush_r+0xfc>
 800bd22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd2a:	81a3      	strh	r3, [r4, #12]
 800bd2c:	f04f 30ff 	mov.w	r0, #4294967295
 800bd30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd34:	4407      	add	r7, r0
 800bd36:	eba8 0800 	sub.w	r8, r8, r0
 800bd3a:	e7e7      	b.n	800bd0c <__sflush_r+0xd4>
 800bd3c:	dfbffffe 	.word	0xdfbffffe

0800bd40 <_fflush_r>:
 800bd40:	b538      	push	{r3, r4, r5, lr}
 800bd42:	690b      	ldr	r3, [r1, #16]
 800bd44:	4605      	mov	r5, r0
 800bd46:	460c      	mov	r4, r1
 800bd48:	b913      	cbnz	r3, 800bd50 <_fflush_r+0x10>
 800bd4a:	2500      	movs	r5, #0
 800bd4c:	4628      	mov	r0, r5
 800bd4e:	bd38      	pop	{r3, r4, r5, pc}
 800bd50:	b118      	cbz	r0, 800bd5a <_fflush_r+0x1a>
 800bd52:	6a03      	ldr	r3, [r0, #32]
 800bd54:	b90b      	cbnz	r3, 800bd5a <_fflush_r+0x1a>
 800bd56:	f7fc ff35 	bl	8008bc4 <__sinit>
 800bd5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d0f3      	beq.n	800bd4a <_fflush_r+0xa>
 800bd62:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bd64:	07d0      	lsls	r0, r2, #31
 800bd66:	d404      	bmi.n	800bd72 <_fflush_r+0x32>
 800bd68:	0599      	lsls	r1, r3, #22
 800bd6a:	d402      	bmi.n	800bd72 <_fflush_r+0x32>
 800bd6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bd6e:	f7fd fa10 	bl	8009192 <__retarget_lock_acquire_recursive>
 800bd72:	4628      	mov	r0, r5
 800bd74:	4621      	mov	r1, r4
 800bd76:	f7ff ff5f 	bl	800bc38 <__sflush_r>
 800bd7a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bd7c:	07da      	lsls	r2, r3, #31
 800bd7e:	4605      	mov	r5, r0
 800bd80:	d4e4      	bmi.n	800bd4c <_fflush_r+0xc>
 800bd82:	89a3      	ldrh	r3, [r4, #12]
 800bd84:	059b      	lsls	r3, r3, #22
 800bd86:	d4e1      	bmi.n	800bd4c <_fflush_r+0xc>
 800bd88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bd8a:	f7fd fa03 	bl	8009194 <__retarget_lock_release_recursive>
 800bd8e:	e7dd      	b.n	800bd4c <_fflush_r+0xc>

0800bd90 <fiprintf>:
 800bd90:	b40e      	push	{r1, r2, r3}
 800bd92:	b503      	push	{r0, r1, lr}
 800bd94:	4601      	mov	r1, r0
 800bd96:	ab03      	add	r3, sp, #12
 800bd98:	4805      	ldr	r0, [pc, #20]	@ (800bdb0 <fiprintf+0x20>)
 800bd9a:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd9e:	6800      	ldr	r0, [r0, #0]
 800bda0:	9301      	str	r3, [sp, #4]
 800bda2:	f7ff fe31 	bl	800ba08 <_vfiprintf_r>
 800bda6:	b002      	add	sp, #8
 800bda8:	f85d eb04 	ldr.w	lr, [sp], #4
 800bdac:	b003      	add	sp, #12
 800bdae:	4770      	bx	lr
 800bdb0:	20000060 	.word	0x20000060

0800bdb4 <__swhatbuf_r>:
 800bdb4:	b570      	push	{r4, r5, r6, lr}
 800bdb6:	460c      	mov	r4, r1
 800bdb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdbc:	2900      	cmp	r1, #0
 800bdbe:	b096      	sub	sp, #88	@ 0x58
 800bdc0:	4615      	mov	r5, r2
 800bdc2:	461e      	mov	r6, r3
 800bdc4:	da0d      	bge.n	800bde2 <__swhatbuf_r+0x2e>
 800bdc6:	89a3      	ldrh	r3, [r4, #12]
 800bdc8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bdcc:	f04f 0100 	mov.w	r1, #0
 800bdd0:	bf14      	ite	ne
 800bdd2:	2340      	movne	r3, #64	@ 0x40
 800bdd4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bdd8:	2000      	movs	r0, #0
 800bdda:	6031      	str	r1, [r6, #0]
 800bddc:	602b      	str	r3, [r5, #0]
 800bdde:	b016      	add	sp, #88	@ 0x58
 800bde0:	bd70      	pop	{r4, r5, r6, pc}
 800bde2:	466a      	mov	r2, sp
 800bde4:	f000 f862 	bl	800beac <_fstat_r>
 800bde8:	2800      	cmp	r0, #0
 800bdea:	dbec      	blt.n	800bdc6 <__swhatbuf_r+0x12>
 800bdec:	9901      	ldr	r1, [sp, #4]
 800bdee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bdf2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bdf6:	4259      	negs	r1, r3
 800bdf8:	4159      	adcs	r1, r3
 800bdfa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bdfe:	e7eb      	b.n	800bdd8 <__swhatbuf_r+0x24>

0800be00 <__smakebuf_r>:
 800be00:	898b      	ldrh	r3, [r1, #12]
 800be02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800be04:	079d      	lsls	r5, r3, #30
 800be06:	4606      	mov	r6, r0
 800be08:	460c      	mov	r4, r1
 800be0a:	d507      	bpl.n	800be1c <__smakebuf_r+0x1c>
 800be0c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800be10:	6023      	str	r3, [r4, #0]
 800be12:	6123      	str	r3, [r4, #16]
 800be14:	2301      	movs	r3, #1
 800be16:	6163      	str	r3, [r4, #20]
 800be18:	b003      	add	sp, #12
 800be1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be1c:	ab01      	add	r3, sp, #4
 800be1e:	466a      	mov	r2, sp
 800be20:	f7ff ffc8 	bl	800bdb4 <__swhatbuf_r>
 800be24:	9f00      	ldr	r7, [sp, #0]
 800be26:	4605      	mov	r5, r0
 800be28:	4639      	mov	r1, r7
 800be2a:	4630      	mov	r0, r6
 800be2c:	f7fe f8a8 	bl	8009f80 <_malloc_r>
 800be30:	b948      	cbnz	r0, 800be46 <__smakebuf_r+0x46>
 800be32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be36:	059a      	lsls	r2, r3, #22
 800be38:	d4ee      	bmi.n	800be18 <__smakebuf_r+0x18>
 800be3a:	f023 0303 	bic.w	r3, r3, #3
 800be3e:	f043 0302 	orr.w	r3, r3, #2
 800be42:	81a3      	strh	r3, [r4, #12]
 800be44:	e7e2      	b.n	800be0c <__smakebuf_r+0xc>
 800be46:	89a3      	ldrh	r3, [r4, #12]
 800be48:	6020      	str	r0, [r4, #0]
 800be4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be4e:	81a3      	strh	r3, [r4, #12]
 800be50:	9b01      	ldr	r3, [sp, #4]
 800be52:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800be56:	b15b      	cbz	r3, 800be70 <__smakebuf_r+0x70>
 800be58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be5c:	4630      	mov	r0, r6
 800be5e:	f000 f837 	bl	800bed0 <_isatty_r>
 800be62:	b128      	cbz	r0, 800be70 <__smakebuf_r+0x70>
 800be64:	89a3      	ldrh	r3, [r4, #12]
 800be66:	f023 0303 	bic.w	r3, r3, #3
 800be6a:	f043 0301 	orr.w	r3, r3, #1
 800be6e:	81a3      	strh	r3, [r4, #12]
 800be70:	89a3      	ldrh	r3, [r4, #12]
 800be72:	431d      	orrs	r5, r3
 800be74:	81a5      	strh	r5, [r4, #12]
 800be76:	e7cf      	b.n	800be18 <__smakebuf_r+0x18>

0800be78 <memmove>:
 800be78:	4288      	cmp	r0, r1
 800be7a:	b510      	push	{r4, lr}
 800be7c:	eb01 0402 	add.w	r4, r1, r2
 800be80:	d902      	bls.n	800be88 <memmove+0x10>
 800be82:	4284      	cmp	r4, r0
 800be84:	4623      	mov	r3, r4
 800be86:	d807      	bhi.n	800be98 <memmove+0x20>
 800be88:	1e43      	subs	r3, r0, #1
 800be8a:	42a1      	cmp	r1, r4
 800be8c:	d008      	beq.n	800bea0 <memmove+0x28>
 800be8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800be92:	f803 2f01 	strb.w	r2, [r3, #1]!
 800be96:	e7f8      	b.n	800be8a <memmove+0x12>
 800be98:	4402      	add	r2, r0
 800be9a:	4601      	mov	r1, r0
 800be9c:	428a      	cmp	r2, r1
 800be9e:	d100      	bne.n	800bea2 <memmove+0x2a>
 800bea0:	bd10      	pop	{r4, pc}
 800bea2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bea6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800beaa:	e7f7      	b.n	800be9c <memmove+0x24>

0800beac <_fstat_r>:
 800beac:	b538      	push	{r3, r4, r5, lr}
 800beae:	4d07      	ldr	r5, [pc, #28]	@ (800becc <_fstat_r+0x20>)
 800beb0:	2300      	movs	r3, #0
 800beb2:	4604      	mov	r4, r0
 800beb4:	4608      	mov	r0, r1
 800beb6:	4611      	mov	r1, r2
 800beb8:	602b      	str	r3, [r5, #0]
 800beba:	f7f5 fbc6 	bl	800164a <_fstat>
 800bebe:	1c43      	adds	r3, r0, #1
 800bec0:	d102      	bne.n	800bec8 <_fstat_r+0x1c>
 800bec2:	682b      	ldr	r3, [r5, #0]
 800bec4:	b103      	cbz	r3, 800bec8 <_fstat_r+0x1c>
 800bec6:	6023      	str	r3, [r4, #0]
 800bec8:	bd38      	pop	{r3, r4, r5, pc}
 800beca:	bf00      	nop
 800becc:	20000dd0 	.word	0x20000dd0

0800bed0 <_isatty_r>:
 800bed0:	b538      	push	{r3, r4, r5, lr}
 800bed2:	4d06      	ldr	r5, [pc, #24]	@ (800beec <_isatty_r+0x1c>)
 800bed4:	2300      	movs	r3, #0
 800bed6:	4604      	mov	r4, r0
 800bed8:	4608      	mov	r0, r1
 800beda:	602b      	str	r3, [r5, #0]
 800bedc:	f7f5 fbc5 	bl	800166a <_isatty>
 800bee0:	1c43      	adds	r3, r0, #1
 800bee2:	d102      	bne.n	800beea <_isatty_r+0x1a>
 800bee4:	682b      	ldr	r3, [r5, #0]
 800bee6:	b103      	cbz	r3, 800beea <_isatty_r+0x1a>
 800bee8:	6023      	str	r3, [r4, #0]
 800beea:	bd38      	pop	{r3, r4, r5, pc}
 800beec:	20000dd0 	.word	0x20000dd0

0800bef0 <_sbrk_r>:
 800bef0:	b538      	push	{r3, r4, r5, lr}
 800bef2:	4d06      	ldr	r5, [pc, #24]	@ (800bf0c <_sbrk_r+0x1c>)
 800bef4:	2300      	movs	r3, #0
 800bef6:	4604      	mov	r4, r0
 800bef8:	4608      	mov	r0, r1
 800befa:	602b      	str	r3, [r5, #0]
 800befc:	f7f5 fbce 	bl	800169c <_sbrk>
 800bf00:	1c43      	adds	r3, r0, #1
 800bf02:	d102      	bne.n	800bf0a <_sbrk_r+0x1a>
 800bf04:	682b      	ldr	r3, [r5, #0]
 800bf06:	b103      	cbz	r3, 800bf0a <_sbrk_r+0x1a>
 800bf08:	6023      	str	r3, [r4, #0]
 800bf0a:	bd38      	pop	{r3, r4, r5, pc}
 800bf0c:	20000dd0 	.word	0x20000dd0

0800bf10 <nan>:
 800bf10:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800bf18 <nan+0x8>
 800bf14:	4770      	bx	lr
 800bf16:	bf00      	nop
 800bf18:	00000000 	.word	0x00000000
 800bf1c:	7ff80000 	.word	0x7ff80000

0800bf20 <abort>:
 800bf20:	b508      	push	{r3, lr}
 800bf22:	2006      	movs	r0, #6
 800bf24:	f000 fbc4 	bl	800c6b0 <raise>
 800bf28:	2001      	movs	r0, #1
 800bf2a:	f7f5 fb3e 	bl	80015aa <_exit>

0800bf2e <_calloc_r>:
 800bf2e:	b570      	push	{r4, r5, r6, lr}
 800bf30:	fba1 5402 	umull	r5, r4, r1, r2
 800bf34:	b93c      	cbnz	r4, 800bf46 <_calloc_r+0x18>
 800bf36:	4629      	mov	r1, r5
 800bf38:	f7fe f822 	bl	8009f80 <_malloc_r>
 800bf3c:	4606      	mov	r6, r0
 800bf3e:	b928      	cbnz	r0, 800bf4c <_calloc_r+0x1e>
 800bf40:	2600      	movs	r6, #0
 800bf42:	4630      	mov	r0, r6
 800bf44:	bd70      	pop	{r4, r5, r6, pc}
 800bf46:	220c      	movs	r2, #12
 800bf48:	6002      	str	r2, [r0, #0]
 800bf4a:	e7f9      	b.n	800bf40 <_calloc_r+0x12>
 800bf4c:	462a      	mov	r2, r5
 800bf4e:	4621      	mov	r1, r4
 800bf50:	f7fd f80a 	bl	8008f68 <memset>
 800bf54:	e7f5      	b.n	800bf42 <_calloc_r+0x14>

0800bf56 <rshift>:
 800bf56:	6903      	ldr	r3, [r0, #16]
 800bf58:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bf5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bf60:	ea4f 1261 	mov.w	r2, r1, asr #5
 800bf64:	f100 0414 	add.w	r4, r0, #20
 800bf68:	dd45      	ble.n	800bff6 <rshift+0xa0>
 800bf6a:	f011 011f 	ands.w	r1, r1, #31
 800bf6e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bf72:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bf76:	d10c      	bne.n	800bf92 <rshift+0x3c>
 800bf78:	f100 0710 	add.w	r7, r0, #16
 800bf7c:	4629      	mov	r1, r5
 800bf7e:	42b1      	cmp	r1, r6
 800bf80:	d334      	bcc.n	800bfec <rshift+0x96>
 800bf82:	1a9b      	subs	r3, r3, r2
 800bf84:	009b      	lsls	r3, r3, #2
 800bf86:	1eea      	subs	r2, r5, #3
 800bf88:	4296      	cmp	r6, r2
 800bf8a:	bf38      	it	cc
 800bf8c:	2300      	movcc	r3, #0
 800bf8e:	4423      	add	r3, r4
 800bf90:	e015      	b.n	800bfbe <rshift+0x68>
 800bf92:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bf96:	f1c1 0820 	rsb	r8, r1, #32
 800bf9a:	40cf      	lsrs	r7, r1
 800bf9c:	f105 0e04 	add.w	lr, r5, #4
 800bfa0:	46a1      	mov	r9, r4
 800bfa2:	4576      	cmp	r6, lr
 800bfa4:	46f4      	mov	ip, lr
 800bfa6:	d815      	bhi.n	800bfd4 <rshift+0x7e>
 800bfa8:	1a9a      	subs	r2, r3, r2
 800bfaa:	0092      	lsls	r2, r2, #2
 800bfac:	3a04      	subs	r2, #4
 800bfae:	3501      	adds	r5, #1
 800bfb0:	42ae      	cmp	r6, r5
 800bfb2:	bf38      	it	cc
 800bfb4:	2200      	movcc	r2, #0
 800bfb6:	18a3      	adds	r3, r4, r2
 800bfb8:	50a7      	str	r7, [r4, r2]
 800bfba:	b107      	cbz	r7, 800bfbe <rshift+0x68>
 800bfbc:	3304      	adds	r3, #4
 800bfbe:	1b1a      	subs	r2, r3, r4
 800bfc0:	42a3      	cmp	r3, r4
 800bfc2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bfc6:	bf08      	it	eq
 800bfc8:	2300      	moveq	r3, #0
 800bfca:	6102      	str	r2, [r0, #16]
 800bfcc:	bf08      	it	eq
 800bfce:	6143      	streq	r3, [r0, #20]
 800bfd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bfd4:	f8dc c000 	ldr.w	ip, [ip]
 800bfd8:	fa0c fc08 	lsl.w	ip, ip, r8
 800bfdc:	ea4c 0707 	orr.w	r7, ip, r7
 800bfe0:	f849 7b04 	str.w	r7, [r9], #4
 800bfe4:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bfe8:	40cf      	lsrs	r7, r1
 800bfea:	e7da      	b.n	800bfa2 <rshift+0x4c>
 800bfec:	f851 cb04 	ldr.w	ip, [r1], #4
 800bff0:	f847 cf04 	str.w	ip, [r7, #4]!
 800bff4:	e7c3      	b.n	800bf7e <rshift+0x28>
 800bff6:	4623      	mov	r3, r4
 800bff8:	e7e1      	b.n	800bfbe <rshift+0x68>

0800bffa <__hexdig_fun>:
 800bffa:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800bffe:	2b09      	cmp	r3, #9
 800c000:	d802      	bhi.n	800c008 <__hexdig_fun+0xe>
 800c002:	3820      	subs	r0, #32
 800c004:	b2c0      	uxtb	r0, r0
 800c006:	4770      	bx	lr
 800c008:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c00c:	2b05      	cmp	r3, #5
 800c00e:	d801      	bhi.n	800c014 <__hexdig_fun+0x1a>
 800c010:	3847      	subs	r0, #71	@ 0x47
 800c012:	e7f7      	b.n	800c004 <__hexdig_fun+0xa>
 800c014:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c018:	2b05      	cmp	r3, #5
 800c01a:	d801      	bhi.n	800c020 <__hexdig_fun+0x26>
 800c01c:	3827      	subs	r0, #39	@ 0x27
 800c01e:	e7f1      	b.n	800c004 <__hexdig_fun+0xa>
 800c020:	2000      	movs	r0, #0
 800c022:	4770      	bx	lr

0800c024 <__gethex>:
 800c024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c028:	b085      	sub	sp, #20
 800c02a:	468a      	mov	sl, r1
 800c02c:	9302      	str	r3, [sp, #8]
 800c02e:	680b      	ldr	r3, [r1, #0]
 800c030:	9001      	str	r0, [sp, #4]
 800c032:	4690      	mov	r8, r2
 800c034:	1c9c      	adds	r4, r3, #2
 800c036:	46a1      	mov	r9, r4
 800c038:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c03c:	2830      	cmp	r0, #48	@ 0x30
 800c03e:	d0fa      	beq.n	800c036 <__gethex+0x12>
 800c040:	eba9 0303 	sub.w	r3, r9, r3
 800c044:	f1a3 0b02 	sub.w	fp, r3, #2
 800c048:	f7ff ffd7 	bl	800bffa <__hexdig_fun>
 800c04c:	4605      	mov	r5, r0
 800c04e:	2800      	cmp	r0, #0
 800c050:	d168      	bne.n	800c124 <__gethex+0x100>
 800c052:	49a0      	ldr	r1, [pc, #640]	@ (800c2d4 <__gethex+0x2b0>)
 800c054:	2201      	movs	r2, #1
 800c056:	4648      	mov	r0, r9
 800c058:	f7fc ff8e 	bl	8008f78 <strncmp>
 800c05c:	4607      	mov	r7, r0
 800c05e:	2800      	cmp	r0, #0
 800c060:	d167      	bne.n	800c132 <__gethex+0x10e>
 800c062:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c066:	4626      	mov	r6, r4
 800c068:	f7ff ffc7 	bl	800bffa <__hexdig_fun>
 800c06c:	2800      	cmp	r0, #0
 800c06e:	d062      	beq.n	800c136 <__gethex+0x112>
 800c070:	4623      	mov	r3, r4
 800c072:	7818      	ldrb	r0, [r3, #0]
 800c074:	2830      	cmp	r0, #48	@ 0x30
 800c076:	4699      	mov	r9, r3
 800c078:	f103 0301 	add.w	r3, r3, #1
 800c07c:	d0f9      	beq.n	800c072 <__gethex+0x4e>
 800c07e:	f7ff ffbc 	bl	800bffa <__hexdig_fun>
 800c082:	fab0 f580 	clz	r5, r0
 800c086:	096d      	lsrs	r5, r5, #5
 800c088:	f04f 0b01 	mov.w	fp, #1
 800c08c:	464a      	mov	r2, r9
 800c08e:	4616      	mov	r6, r2
 800c090:	3201      	adds	r2, #1
 800c092:	7830      	ldrb	r0, [r6, #0]
 800c094:	f7ff ffb1 	bl	800bffa <__hexdig_fun>
 800c098:	2800      	cmp	r0, #0
 800c09a:	d1f8      	bne.n	800c08e <__gethex+0x6a>
 800c09c:	498d      	ldr	r1, [pc, #564]	@ (800c2d4 <__gethex+0x2b0>)
 800c09e:	2201      	movs	r2, #1
 800c0a0:	4630      	mov	r0, r6
 800c0a2:	f7fc ff69 	bl	8008f78 <strncmp>
 800c0a6:	2800      	cmp	r0, #0
 800c0a8:	d13f      	bne.n	800c12a <__gethex+0x106>
 800c0aa:	b944      	cbnz	r4, 800c0be <__gethex+0x9a>
 800c0ac:	1c74      	adds	r4, r6, #1
 800c0ae:	4622      	mov	r2, r4
 800c0b0:	4616      	mov	r6, r2
 800c0b2:	3201      	adds	r2, #1
 800c0b4:	7830      	ldrb	r0, [r6, #0]
 800c0b6:	f7ff ffa0 	bl	800bffa <__hexdig_fun>
 800c0ba:	2800      	cmp	r0, #0
 800c0bc:	d1f8      	bne.n	800c0b0 <__gethex+0x8c>
 800c0be:	1ba4      	subs	r4, r4, r6
 800c0c0:	00a7      	lsls	r7, r4, #2
 800c0c2:	7833      	ldrb	r3, [r6, #0]
 800c0c4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c0c8:	2b50      	cmp	r3, #80	@ 0x50
 800c0ca:	d13e      	bne.n	800c14a <__gethex+0x126>
 800c0cc:	7873      	ldrb	r3, [r6, #1]
 800c0ce:	2b2b      	cmp	r3, #43	@ 0x2b
 800c0d0:	d033      	beq.n	800c13a <__gethex+0x116>
 800c0d2:	2b2d      	cmp	r3, #45	@ 0x2d
 800c0d4:	d034      	beq.n	800c140 <__gethex+0x11c>
 800c0d6:	1c71      	adds	r1, r6, #1
 800c0d8:	2400      	movs	r4, #0
 800c0da:	7808      	ldrb	r0, [r1, #0]
 800c0dc:	f7ff ff8d 	bl	800bffa <__hexdig_fun>
 800c0e0:	1e43      	subs	r3, r0, #1
 800c0e2:	b2db      	uxtb	r3, r3
 800c0e4:	2b18      	cmp	r3, #24
 800c0e6:	d830      	bhi.n	800c14a <__gethex+0x126>
 800c0e8:	f1a0 0210 	sub.w	r2, r0, #16
 800c0ec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c0f0:	f7ff ff83 	bl	800bffa <__hexdig_fun>
 800c0f4:	f100 3cff 	add.w	ip, r0, #4294967295
 800c0f8:	fa5f fc8c 	uxtb.w	ip, ip
 800c0fc:	f1bc 0f18 	cmp.w	ip, #24
 800c100:	f04f 030a 	mov.w	r3, #10
 800c104:	d91e      	bls.n	800c144 <__gethex+0x120>
 800c106:	b104      	cbz	r4, 800c10a <__gethex+0xe6>
 800c108:	4252      	negs	r2, r2
 800c10a:	4417      	add	r7, r2
 800c10c:	f8ca 1000 	str.w	r1, [sl]
 800c110:	b1ed      	cbz	r5, 800c14e <__gethex+0x12a>
 800c112:	f1bb 0f00 	cmp.w	fp, #0
 800c116:	bf0c      	ite	eq
 800c118:	2506      	moveq	r5, #6
 800c11a:	2500      	movne	r5, #0
 800c11c:	4628      	mov	r0, r5
 800c11e:	b005      	add	sp, #20
 800c120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c124:	2500      	movs	r5, #0
 800c126:	462c      	mov	r4, r5
 800c128:	e7b0      	b.n	800c08c <__gethex+0x68>
 800c12a:	2c00      	cmp	r4, #0
 800c12c:	d1c7      	bne.n	800c0be <__gethex+0x9a>
 800c12e:	4627      	mov	r7, r4
 800c130:	e7c7      	b.n	800c0c2 <__gethex+0x9e>
 800c132:	464e      	mov	r6, r9
 800c134:	462f      	mov	r7, r5
 800c136:	2501      	movs	r5, #1
 800c138:	e7c3      	b.n	800c0c2 <__gethex+0x9e>
 800c13a:	2400      	movs	r4, #0
 800c13c:	1cb1      	adds	r1, r6, #2
 800c13e:	e7cc      	b.n	800c0da <__gethex+0xb6>
 800c140:	2401      	movs	r4, #1
 800c142:	e7fb      	b.n	800c13c <__gethex+0x118>
 800c144:	fb03 0002 	mla	r0, r3, r2, r0
 800c148:	e7ce      	b.n	800c0e8 <__gethex+0xc4>
 800c14a:	4631      	mov	r1, r6
 800c14c:	e7de      	b.n	800c10c <__gethex+0xe8>
 800c14e:	eba6 0309 	sub.w	r3, r6, r9
 800c152:	3b01      	subs	r3, #1
 800c154:	4629      	mov	r1, r5
 800c156:	2b07      	cmp	r3, #7
 800c158:	dc0a      	bgt.n	800c170 <__gethex+0x14c>
 800c15a:	9801      	ldr	r0, [sp, #4]
 800c15c:	f7fd ff9c 	bl	800a098 <_Balloc>
 800c160:	4604      	mov	r4, r0
 800c162:	b940      	cbnz	r0, 800c176 <__gethex+0x152>
 800c164:	4b5c      	ldr	r3, [pc, #368]	@ (800c2d8 <__gethex+0x2b4>)
 800c166:	4602      	mov	r2, r0
 800c168:	21e4      	movs	r1, #228	@ 0xe4
 800c16a:	485c      	ldr	r0, [pc, #368]	@ (800c2dc <__gethex+0x2b8>)
 800c16c:	f7fd f828 	bl	80091c0 <__assert_func>
 800c170:	3101      	adds	r1, #1
 800c172:	105b      	asrs	r3, r3, #1
 800c174:	e7ef      	b.n	800c156 <__gethex+0x132>
 800c176:	f100 0a14 	add.w	sl, r0, #20
 800c17a:	2300      	movs	r3, #0
 800c17c:	4655      	mov	r5, sl
 800c17e:	469b      	mov	fp, r3
 800c180:	45b1      	cmp	r9, r6
 800c182:	d337      	bcc.n	800c1f4 <__gethex+0x1d0>
 800c184:	f845 bb04 	str.w	fp, [r5], #4
 800c188:	eba5 050a 	sub.w	r5, r5, sl
 800c18c:	10ad      	asrs	r5, r5, #2
 800c18e:	6125      	str	r5, [r4, #16]
 800c190:	4658      	mov	r0, fp
 800c192:	f7fe f873 	bl	800a27c <__hi0bits>
 800c196:	016d      	lsls	r5, r5, #5
 800c198:	f8d8 6000 	ldr.w	r6, [r8]
 800c19c:	1a2d      	subs	r5, r5, r0
 800c19e:	42b5      	cmp	r5, r6
 800c1a0:	dd54      	ble.n	800c24c <__gethex+0x228>
 800c1a2:	1bad      	subs	r5, r5, r6
 800c1a4:	4629      	mov	r1, r5
 800c1a6:	4620      	mov	r0, r4
 800c1a8:	f7fe fc07 	bl	800a9ba <__any_on>
 800c1ac:	4681      	mov	r9, r0
 800c1ae:	b178      	cbz	r0, 800c1d0 <__gethex+0x1ac>
 800c1b0:	1e6b      	subs	r3, r5, #1
 800c1b2:	1159      	asrs	r1, r3, #5
 800c1b4:	f003 021f 	and.w	r2, r3, #31
 800c1b8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c1bc:	f04f 0901 	mov.w	r9, #1
 800c1c0:	fa09 f202 	lsl.w	r2, r9, r2
 800c1c4:	420a      	tst	r2, r1
 800c1c6:	d003      	beq.n	800c1d0 <__gethex+0x1ac>
 800c1c8:	454b      	cmp	r3, r9
 800c1ca:	dc36      	bgt.n	800c23a <__gethex+0x216>
 800c1cc:	f04f 0902 	mov.w	r9, #2
 800c1d0:	4629      	mov	r1, r5
 800c1d2:	4620      	mov	r0, r4
 800c1d4:	f7ff febf 	bl	800bf56 <rshift>
 800c1d8:	442f      	add	r7, r5
 800c1da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c1de:	42bb      	cmp	r3, r7
 800c1e0:	da42      	bge.n	800c268 <__gethex+0x244>
 800c1e2:	9801      	ldr	r0, [sp, #4]
 800c1e4:	4621      	mov	r1, r4
 800c1e6:	f7fd ff97 	bl	800a118 <_Bfree>
 800c1ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	6013      	str	r3, [r2, #0]
 800c1f0:	25a3      	movs	r5, #163	@ 0xa3
 800c1f2:	e793      	b.n	800c11c <__gethex+0xf8>
 800c1f4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c1f8:	2a2e      	cmp	r2, #46	@ 0x2e
 800c1fa:	d012      	beq.n	800c222 <__gethex+0x1fe>
 800c1fc:	2b20      	cmp	r3, #32
 800c1fe:	d104      	bne.n	800c20a <__gethex+0x1e6>
 800c200:	f845 bb04 	str.w	fp, [r5], #4
 800c204:	f04f 0b00 	mov.w	fp, #0
 800c208:	465b      	mov	r3, fp
 800c20a:	7830      	ldrb	r0, [r6, #0]
 800c20c:	9303      	str	r3, [sp, #12]
 800c20e:	f7ff fef4 	bl	800bffa <__hexdig_fun>
 800c212:	9b03      	ldr	r3, [sp, #12]
 800c214:	f000 000f 	and.w	r0, r0, #15
 800c218:	4098      	lsls	r0, r3
 800c21a:	ea4b 0b00 	orr.w	fp, fp, r0
 800c21e:	3304      	adds	r3, #4
 800c220:	e7ae      	b.n	800c180 <__gethex+0x15c>
 800c222:	45b1      	cmp	r9, r6
 800c224:	d8ea      	bhi.n	800c1fc <__gethex+0x1d8>
 800c226:	492b      	ldr	r1, [pc, #172]	@ (800c2d4 <__gethex+0x2b0>)
 800c228:	9303      	str	r3, [sp, #12]
 800c22a:	2201      	movs	r2, #1
 800c22c:	4630      	mov	r0, r6
 800c22e:	f7fc fea3 	bl	8008f78 <strncmp>
 800c232:	9b03      	ldr	r3, [sp, #12]
 800c234:	2800      	cmp	r0, #0
 800c236:	d1e1      	bne.n	800c1fc <__gethex+0x1d8>
 800c238:	e7a2      	b.n	800c180 <__gethex+0x15c>
 800c23a:	1ea9      	subs	r1, r5, #2
 800c23c:	4620      	mov	r0, r4
 800c23e:	f7fe fbbc 	bl	800a9ba <__any_on>
 800c242:	2800      	cmp	r0, #0
 800c244:	d0c2      	beq.n	800c1cc <__gethex+0x1a8>
 800c246:	f04f 0903 	mov.w	r9, #3
 800c24a:	e7c1      	b.n	800c1d0 <__gethex+0x1ac>
 800c24c:	da09      	bge.n	800c262 <__gethex+0x23e>
 800c24e:	1b75      	subs	r5, r6, r5
 800c250:	4621      	mov	r1, r4
 800c252:	9801      	ldr	r0, [sp, #4]
 800c254:	462a      	mov	r2, r5
 800c256:	f7fe f977 	bl	800a548 <__lshift>
 800c25a:	1b7f      	subs	r7, r7, r5
 800c25c:	4604      	mov	r4, r0
 800c25e:	f100 0a14 	add.w	sl, r0, #20
 800c262:	f04f 0900 	mov.w	r9, #0
 800c266:	e7b8      	b.n	800c1da <__gethex+0x1b6>
 800c268:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c26c:	42bd      	cmp	r5, r7
 800c26e:	dd6f      	ble.n	800c350 <__gethex+0x32c>
 800c270:	1bed      	subs	r5, r5, r7
 800c272:	42ae      	cmp	r6, r5
 800c274:	dc34      	bgt.n	800c2e0 <__gethex+0x2bc>
 800c276:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c27a:	2b02      	cmp	r3, #2
 800c27c:	d022      	beq.n	800c2c4 <__gethex+0x2a0>
 800c27e:	2b03      	cmp	r3, #3
 800c280:	d024      	beq.n	800c2cc <__gethex+0x2a8>
 800c282:	2b01      	cmp	r3, #1
 800c284:	d115      	bne.n	800c2b2 <__gethex+0x28e>
 800c286:	42ae      	cmp	r6, r5
 800c288:	d113      	bne.n	800c2b2 <__gethex+0x28e>
 800c28a:	2e01      	cmp	r6, #1
 800c28c:	d10b      	bne.n	800c2a6 <__gethex+0x282>
 800c28e:	9a02      	ldr	r2, [sp, #8]
 800c290:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c294:	6013      	str	r3, [r2, #0]
 800c296:	2301      	movs	r3, #1
 800c298:	6123      	str	r3, [r4, #16]
 800c29a:	f8ca 3000 	str.w	r3, [sl]
 800c29e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c2a0:	2562      	movs	r5, #98	@ 0x62
 800c2a2:	601c      	str	r4, [r3, #0]
 800c2a4:	e73a      	b.n	800c11c <__gethex+0xf8>
 800c2a6:	1e71      	subs	r1, r6, #1
 800c2a8:	4620      	mov	r0, r4
 800c2aa:	f7fe fb86 	bl	800a9ba <__any_on>
 800c2ae:	2800      	cmp	r0, #0
 800c2b0:	d1ed      	bne.n	800c28e <__gethex+0x26a>
 800c2b2:	9801      	ldr	r0, [sp, #4]
 800c2b4:	4621      	mov	r1, r4
 800c2b6:	f7fd ff2f 	bl	800a118 <_Bfree>
 800c2ba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c2bc:	2300      	movs	r3, #0
 800c2be:	6013      	str	r3, [r2, #0]
 800c2c0:	2550      	movs	r5, #80	@ 0x50
 800c2c2:	e72b      	b.n	800c11c <__gethex+0xf8>
 800c2c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d1f3      	bne.n	800c2b2 <__gethex+0x28e>
 800c2ca:	e7e0      	b.n	800c28e <__gethex+0x26a>
 800c2cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d1dd      	bne.n	800c28e <__gethex+0x26a>
 800c2d2:	e7ee      	b.n	800c2b2 <__gethex+0x28e>
 800c2d4:	0800d2b8 	.word	0x0800d2b8
 800c2d8:	0800d14f 	.word	0x0800d14f
 800c2dc:	0800d42a 	.word	0x0800d42a
 800c2e0:	1e6f      	subs	r7, r5, #1
 800c2e2:	f1b9 0f00 	cmp.w	r9, #0
 800c2e6:	d130      	bne.n	800c34a <__gethex+0x326>
 800c2e8:	b127      	cbz	r7, 800c2f4 <__gethex+0x2d0>
 800c2ea:	4639      	mov	r1, r7
 800c2ec:	4620      	mov	r0, r4
 800c2ee:	f7fe fb64 	bl	800a9ba <__any_on>
 800c2f2:	4681      	mov	r9, r0
 800c2f4:	117a      	asrs	r2, r7, #5
 800c2f6:	2301      	movs	r3, #1
 800c2f8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c2fc:	f007 071f 	and.w	r7, r7, #31
 800c300:	40bb      	lsls	r3, r7
 800c302:	4213      	tst	r3, r2
 800c304:	4629      	mov	r1, r5
 800c306:	4620      	mov	r0, r4
 800c308:	bf18      	it	ne
 800c30a:	f049 0902 	orrne.w	r9, r9, #2
 800c30e:	f7ff fe22 	bl	800bf56 <rshift>
 800c312:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c316:	1b76      	subs	r6, r6, r5
 800c318:	2502      	movs	r5, #2
 800c31a:	f1b9 0f00 	cmp.w	r9, #0
 800c31e:	d047      	beq.n	800c3b0 <__gethex+0x38c>
 800c320:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c324:	2b02      	cmp	r3, #2
 800c326:	d015      	beq.n	800c354 <__gethex+0x330>
 800c328:	2b03      	cmp	r3, #3
 800c32a:	d017      	beq.n	800c35c <__gethex+0x338>
 800c32c:	2b01      	cmp	r3, #1
 800c32e:	d109      	bne.n	800c344 <__gethex+0x320>
 800c330:	f019 0f02 	tst.w	r9, #2
 800c334:	d006      	beq.n	800c344 <__gethex+0x320>
 800c336:	f8da 3000 	ldr.w	r3, [sl]
 800c33a:	ea49 0903 	orr.w	r9, r9, r3
 800c33e:	f019 0f01 	tst.w	r9, #1
 800c342:	d10e      	bne.n	800c362 <__gethex+0x33e>
 800c344:	f045 0510 	orr.w	r5, r5, #16
 800c348:	e032      	b.n	800c3b0 <__gethex+0x38c>
 800c34a:	f04f 0901 	mov.w	r9, #1
 800c34e:	e7d1      	b.n	800c2f4 <__gethex+0x2d0>
 800c350:	2501      	movs	r5, #1
 800c352:	e7e2      	b.n	800c31a <__gethex+0x2f6>
 800c354:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c356:	f1c3 0301 	rsb	r3, r3, #1
 800c35a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c35c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d0f0      	beq.n	800c344 <__gethex+0x320>
 800c362:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c366:	f104 0314 	add.w	r3, r4, #20
 800c36a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c36e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c372:	f04f 0c00 	mov.w	ip, #0
 800c376:	4618      	mov	r0, r3
 800c378:	f853 2b04 	ldr.w	r2, [r3], #4
 800c37c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c380:	d01b      	beq.n	800c3ba <__gethex+0x396>
 800c382:	3201      	adds	r2, #1
 800c384:	6002      	str	r2, [r0, #0]
 800c386:	2d02      	cmp	r5, #2
 800c388:	f104 0314 	add.w	r3, r4, #20
 800c38c:	d13c      	bne.n	800c408 <__gethex+0x3e4>
 800c38e:	f8d8 2000 	ldr.w	r2, [r8]
 800c392:	3a01      	subs	r2, #1
 800c394:	42b2      	cmp	r2, r6
 800c396:	d109      	bne.n	800c3ac <__gethex+0x388>
 800c398:	1171      	asrs	r1, r6, #5
 800c39a:	2201      	movs	r2, #1
 800c39c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c3a0:	f006 061f 	and.w	r6, r6, #31
 800c3a4:	fa02 f606 	lsl.w	r6, r2, r6
 800c3a8:	421e      	tst	r6, r3
 800c3aa:	d13a      	bne.n	800c422 <__gethex+0x3fe>
 800c3ac:	f045 0520 	orr.w	r5, r5, #32
 800c3b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c3b2:	601c      	str	r4, [r3, #0]
 800c3b4:	9b02      	ldr	r3, [sp, #8]
 800c3b6:	601f      	str	r7, [r3, #0]
 800c3b8:	e6b0      	b.n	800c11c <__gethex+0xf8>
 800c3ba:	4299      	cmp	r1, r3
 800c3bc:	f843 cc04 	str.w	ip, [r3, #-4]
 800c3c0:	d8d9      	bhi.n	800c376 <__gethex+0x352>
 800c3c2:	68a3      	ldr	r3, [r4, #8]
 800c3c4:	459b      	cmp	fp, r3
 800c3c6:	db17      	blt.n	800c3f8 <__gethex+0x3d4>
 800c3c8:	6861      	ldr	r1, [r4, #4]
 800c3ca:	9801      	ldr	r0, [sp, #4]
 800c3cc:	3101      	adds	r1, #1
 800c3ce:	f7fd fe63 	bl	800a098 <_Balloc>
 800c3d2:	4681      	mov	r9, r0
 800c3d4:	b918      	cbnz	r0, 800c3de <__gethex+0x3ba>
 800c3d6:	4b1a      	ldr	r3, [pc, #104]	@ (800c440 <__gethex+0x41c>)
 800c3d8:	4602      	mov	r2, r0
 800c3da:	2184      	movs	r1, #132	@ 0x84
 800c3dc:	e6c5      	b.n	800c16a <__gethex+0x146>
 800c3de:	6922      	ldr	r2, [r4, #16]
 800c3e0:	3202      	adds	r2, #2
 800c3e2:	f104 010c 	add.w	r1, r4, #12
 800c3e6:	0092      	lsls	r2, r2, #2
 800c3e8:	300c      	adds	r0, #12
 800c3ea:	f7fc fed4 	bl	8009196 <memcpy>
 800c3ee:	4621      	mov	r1, r4
 800c3f0:	9801      	ldr	r0, [sp, #4]
 800c3f2:	f7fd fe91 	bl	800a118 <_Bfree>
 800c3f6:	464c      	mov	r4, r9
 800c3f8:	6923      	ldr	r3, [r4, #16]
 800c3fa:	1c5a      	adds	r2, r3, #1
 800c3fc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c400:	6122      	str	r2, [r4, #16]
 800c402:	2201      	movs	r2, #1
 800c404:	615a      	str	r2, [r3, #20]
 800c406:	e7be      	b.n	800c386 <__gethex+0x362>
 800c408:	6922      	ldr	r2, [r4, #16]
 800c40a:	455a      	cmp	r2, fp
 800c40c:	dd0b      	ble.n	800c426 <__gethex+0x402>
 800c40e:	2101      	movs	r1, #1
 800c410:	4620      	mov	r0, r4
 800c412:	f7ff fda0 	bl	800bf56 <rshift>
 800c416:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c41a:	3701      	adds	r7, #1
 800c41c:	42bb      	cmp	r3, r7
 800c41e:	f6ff aee0 	blt.w	800c1e2 <__gethex+0x1be>
 800c422:	2501      	movs	r5, #1
 800c424:	e7c2      	b.n	800c3ac <__gethex+0x388>
 800c426:	f016 061f 	ands.w	r6, r6, #31
 800c42a:	d0fa      	beq.n	800c422 <__gethex+0x3fe>
 800c42c:	4453      	add	r3, sl
 800c42e:	f1c6 0620 	rsb	r6, r6, #32
 800c432:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c436:	f7fd ff21 	bl	800a27c <__hi0bits>
 800c43a:	42b0      	cmp	r0, r6
 800c43c:	dbe7      	blt.n	800c40e <__gethex+0x3ea>
 800c43e:	e7f0      	b.n	800c422 <__gethex+0x3fe>
 800c440:	0800d14f 	.word	0x0800d14f

0800c444 <L_shift>:
 800c444:	f1c2 0208 	rsb	r2, r2, #8
 800c448:	0092      	lsls	r2, r2, #2
 800c44a:	b570      	push	{r4, r5, r6, lr}
 800c44c:	f1c2 0620 	rsb	r6, r2, #32
 800c450:	6843      	ldr	r3, [r0, #4]
 800c452:	6804      	ldr	r4, [r0, #0]
 800c454:	fa03 f506 	lsl.w	r5, r3, r6
 800c458:	432c      	orrs	r4, r5
 800c45a:	40d3      	lsrs	r3, r2
 800c45c:	6004      	str	r4, [r0, #0]
 800c45e:	f840 3f04 	str.w	r3, [r0, #4]!
 800c462:	4288      	cmp	r0, r1
 800c464:	d3f4      	bcc.n	800c450 <L_shift+0xc>
 800c466:	bd70      	pop	{r4, r5, r6, pc}

0800c468 <__match>:
 800c468:	b530      	push	{r4, r5, lr}
 800c46a:	6803      	ldr	r3, [r0, #0]
 800c46c:	3301      	adds	r3, #1
 800c46e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c472:	b914      	cbnz	r4, 800c47a <__match+0x12>
 800c474:	6003      	str	r3, [r0, #0]
 800c476:	2001      	movs	r0, #1
 800c478:	bd30      	pop	{r4, r5, pc}
 800c47a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c47e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c482:	2d19      	cmp	r5, #25
 800c484:	bf98      	it	ls
 800c486:	3220      	addls	r2, #32
 800c488:	42a2      	cmp	r2, r4
 800c48a:	d0f0      	beq.n	800c46e <__match+0x6>
 800c48c:	2000      	movs	r0, #0
 800c48e:	e7f3      	b.n	800c478 <__match+0x10>

0800c490 <__hexnan>:
 800c490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c494:	680b      	ldr	r3, [r1, #0]
 800c496:	6801      	ldr	r1, [r0, #0]
 800c498:	115e      	asrs	r6, r3, #5
 800c49a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c49e:	f013 031f 	ands.w	r3, r3, #31
 800c4a2:	b087      	sub	sp, #28
 800c4a4:	bf18      	it	ne
 800c4a6:	3604      	addne	r6, #4
 800c4a8:	2500      	movs	r5, #0
 800c4aa:	1f37      	subs	r7, r6, #4
 800c4ac:	4682      	mov	sl, r0
 800c4ae:	4690      	mov	r8, r2
 800c4b0:	9301      	str	r3, [sp, #4]
 800c4b2:	f846 5c04 	str.w	r5, [r6, #-4]
 800c4b6:	46b9      	mov	r9, r7
 800c4b8:	463c      	mov	r4, r7
 800c4ba:	9502      	str	r5, [sp, #8]
 800c4bc:	46ab      	mov	fp, r5
 800c4be:	784a      	ldrb	r2, [r1, #1]
 800c4c0:	1c4b      	adds	r3, r1, #1
 800c4c2:	9303      	str	r3, [sp, #12]
 800c4c4:	b342      	cbz	r2, 800c518 <__hexnan+0x88>
 800c4c6:	4610      	mov	r0, r2
 800c4c8:	9105      	str	r1, [sp, #20]
 800c4ca:	9204      	str	r2, [sp, #16]
 800c4cc:	f7ff fd95 	bl	800bffa <__hexdig_fun>
 800c4d0:	2800      	cmp	r0, #0
 800c4d2:	d151      	bne.n	800c578 <__hexnan+0xe8>
 800c4d4:	9a04      	ldr	r2, [sp, #16]
 800c4d6:	9905      	ldr	r1, [sp, #20]
 800c4d8:	2a20      	cmp	r2, #32
 800c4da:	d818      	bhi.n	800c50e <__hexnan+0x7e>
 800c4dc:	9b02      	ldr	r3, [sp, #8]
 800c4de:	459b      	cmp	fp, r3
 800c4e0:	dd13      	ble.n	800c50a <__hexnan+0x7a>
 800c4e2:	454c      	cmp	r4, r9
 800c4e4:	d206      	bcs.n	800c4f4 <__hexnan+0x64>
 800c4e6:	2d07      	cmp	r5, #7
 800c4e8:	dc04      	bgt.n	800c4f4 <__hexnan+0x64>
 800c4ea:	462a      	mov	r2, r5
 800c4ec:	4649      	mov	r1, r9
 800c4ee:	4620      	mov	r0, r4
 800c4f0:	f7ff ffa8 	bl	800c444 <L_shift>
 800c4f4:	4544      	cmp	r4, r8
 800c4f6:	d952      	bls.n	800c59e <__hexnan+0x10e>
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	f1a4 0904 	sub.w	r9, r4, #4
 800c4fe:	f844 3c04 	str.w	r3, [r4, #-4]
 800c502:	f8cd b008 	str.w	fp, [sp, #8]
 800c506:	464c      	mov	r4, r9
 800c508:	461d      	mov	r5, r3
 800c50a:	9903      	ldr	r1, [sp, #12]
 800c50c:	e7d7      	b.n	800c4be <__hexnan+0x2e>
 800c50e:	2a29      	cmp	r2, #41	@ 0x29
 800c510:	d157      	bne.n	800c5c2 <__hexnan+0x132>
 800c512:	3102      	adds	r1, #2
 800c514:	f8ca 1000 	str.w	r1, [sl]
 800c518:	f1bb 0f00 	cmp.w	fp, #0
 800c51c:	d051      	beq.n	800c5c2 <__hexnan+0x132>
 800c51e:	454c      	cmp	r4, r9
 800c520:	d206      	bcs.n	800c530 <__hexnan+0xa0>
 800c522:	2d07      	cmp	r5, #7
 800c524:	dc04      	bgt.n	800c530 <__hexnan+0xa0>
 800c526:	462a      	mov	r2, r5
 800c528:	4649      	mov	r1, r9
 800c52a:	4620      	mov	r0, r4
 800c52c:	f7ff ff8a 	bl	800c444 <L_shift>
 800c530:	4544      	cmp	r4, r8
 800c532:	d936      	bls.n	800c5a2 <__hexnan+0x112>
 800c534:	f1a8 0204 	sub.w	r2, r8, #4
 800c538:	4623      	mov	r3, r4
 800c53a:	f853 1b04 	ldr.w	r1, [r3], #4
 800c53e:	f842 1f04 	str.w	r1, [r2, #4]!
 800c542:	429f      	cmp	r7, r3
 800c544:	d2f9      	bcs.n	800c53a <__hexnan+0xaa>
 800c546:	1b3b      	subs	r3, r7, r4
 800c548:	f023 0303 	bic.w	r3, r3, #3
 800c54c:	3304      	adds	r3, #4
 800c54e:	3401      	adds	r4, #1
 800c550:	3e03      	subs	r6, #3
 800c552:	42b4      	cmp	r4, r6
 800c554:	bf88      	it	hi
 800c556:	2304      	movhi	r3, #4
 800c558:	4443      	add	r3, r8
 800c55a:	2200      	movs	r2, #0
 800c55c:	f843 2b04 	str.w	r2, [r3], #4
 800c560:	429f      	cmp	r7, r3
 800c562:	d2fb      	bcs.n	800c55c <__hexnan+0xcc>
 800c564:	683b      	ldr	r3, [r7, #0]
 800c566:	b91b      	cbnz	r3, 800c570 <__hexnan+0xe0>
 800c568:	4547      	cmp	r7, r8
 800c56a:	d128      	bne.n	800c5be <__hexnan+0x12e>
 800c56c:	2301      	movs	r3, #1
 800c56e:	603b      	str	r3, [r7, #0]
 800c570:	2005      	movs	r0, #5
 800c572:	b007      	add	sp, #28
 800c574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c578:	3501      	adds	r5, #1
 800c57a:	2d08      	cmp	r5, #8
 800c57c:	f10b 0b01 	add.w	fp, fp, #1
 800c580:	dd06      	ble.n	800c590 <__hexnan+0x100>
 800c582:	4544      	cmp	r4, r8
 800c584:	d9c1      	bls.n	800c50a <__hexnan+0x7a>
 800c586:	2300      	movs	r3, #0
 800c588:	f844 3c04 	str.w	r3, [r4, #-4]
 800c58c:	2501      	movs	r5, #1
 800c58e:	3c04      	subs	r4, #4
 800c590:	6822      	ldr	r2, [r4, #0]
 800c592:	f000 000f 	and.w	r0, r0, #15
 800c596:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c59a:	6020      	str	r0, [r4, #0]
 800c59c:	e7b5      	b.n	800c50a <__hexnan+0x7a>
 800c59e:	2508      	movs	r5, #8
 800c5a0:	e7b3      	b.n	800c50a <__hexnan+0x7a>
 800c5a2:	9b01      	ldr	r3, [sp, #4]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d0dd      	beq.n	800c564 <__hexnan+0xd4>
 800c5a8:	f1c3 0320 	rsb	r3, r3, #32
 800c5ac:	f04f 32ff 	mov.w	r2, #4294967295
 800c5b0:	40da      	lsrs	r2, r3
 800c5b2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c5b6:	4013      	ands	r3, r2
 800c5b8:	f846 3c04 	str.w	r3, [r6, #-4]
 800c5bc:	e7d2      	b.n	800c564 <__hexnan+0xd4>
 800c5be:	3f04      	subs	r7, #4
 800c5c0:	e7d0      	b.n	800c564 <__hexnan+0xd4>
 800c5c2:	2004      	movs	r0, #4
 800c5c4:	e7d5      	b.n	800c572 <__hexnan+0xe2>

0800c5c6 <__ascii_mbtowc>:
 800c5c6:	b082      	sub	sp, #8
 800c5c8:	b901      	cbnz	r1, 800c5cc <__ascii_mbtowc+0x6>
 800c5ca:	a901      	add	r1, sp, #4
 800c5cc:	b142      	cbz	r2, 800c5e0 <__ascii_mbtowc+0x1a>
 800c5ce:	b14b      	cbz	r3, 800c5e4 <__ascii_mbtowc+0x1e>
 800c5d0:	7813      	ldrb	r3, [r2, #0]
 800c5d2:	600b      	str	r3, [r1, #0]
 800c5d4:	7812      	ldrb	r2, [r2, #0]
 800c5d6:	1e10      	subs	r0, r2, #0
 800c5d8:	bf18      	it	ne
 800c5da:	2001      	movne	r0, #1
 800c5dc:	b002      	add	sp, #8
 800c5de:	4770      	bx	lr
 800c5e0:	4610      	mov	r0, r2
 800c5e2:	e7fb      	b.n	800c5dc <__ascii_mbtowc+0x16>
 800c5e4:	f06f 0001 	mvn.w	r0, #1
 800c5e8:	e7f8      	b.n	800c5dc <__ascii_mbtowc+0x16>

0800c5ea <_realloc_r>:
 800c5ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5ee:	4680      	mov	r8, r0
 800c5f0:	4615      	mov	r5, r2
 800c5f2:	460c      	mov	r4, r1
 800c5f4:	b921      	cbnz	r1, 800c600 <_realloc_r+0x16>
 800c5f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c5fa:	4611      	mov	r1, r2
 800c5fc:	f7fd bcc0 	b.w	8009f80 <_malloc_r>
 800c600:	b92a      	cbnz	r2, 800c60e <_realloc_r+0x24>
 800c602:	f7fd fc49 	bl	8009e98 <_free_r>
 800c606:	2400      	movs	r4, #0
 800c608:	4620      	mov	r0, r4
 800c60a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c60e:	f000 f86b 	bl	800c6e8 <_malloc_usable_size_r>
 800c612:	4285      	cmp	r5, r0
 800c614:	4606      	mov	r6, r0
 800c616:	d802      	bhi.n	800c61e <_realloc_r+0x34>
 800c618:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c61c:	d8f4      	bhi.n	800c608 <_realloc_r+0x1e>
 800c61e:	4629      	mov	r1, r5
 800c620:	4640      	mov	r0, r8
 800c622:	f7fd fcad 	bl	8009f80 <_malloc_r>
 800c626:	4607      	mov	r7, r0
 800c628:	2800      	cmp	r0, #0
 800c62a:	d0ec      	beq.n	800c606 <_realloc_r+0x1c>
 800c62c:	42b5      	cmp	r5, r6
 800c62e:	462a      	mov	r2, r5
 800c630:	4621      	mov	r1, r4
 800c632:	bf28      	it	cs
 800c634:	4632      	movcs	r2, r6
 800c636:	f7fc fdae 	bl	8009196 <memcpy>
 800c63a:	4621      	mov	r1, r4
 800c63c:	4640      	mov	r0, r8
 800c63e:	f7fd fc2b 	bl	8009e98 <_free_r>
 800c642:	463c      	mov	r4, r7
 800c644:	e7e0      	b.n	800c608 <_realloc_r+0x1e>

0800c646 <__ascii_wctomb>:
 800c646:	4603      	mov	r3, r0
 800c648:	4608      	mov	r0, r1
 800c64a:	b141      	cbz	r1, 800c65e <__ascii_wctomb+0x18>
 800c64c:	2aff      	cmp	r2, #255	@ 0xff
 800c64e:	d904      	bls.n	800c65a <__ascii_wctomb+0x14>
 800c650:	228a      	movs	r2, #138	@ 0x8a
 800c652:	601a      	str	r2, [r3, #0]
 800c654:	f04f 30ff 	mov.w	r0, #4294967295
 800c658:	4770      	bx	lr
 800c65a:	700a      	strb	r2, [r1, #0]
 800c65c:	2001      	movs	r0, #1
 800c65e:	4770      	bx	lr

0800c660 <_raise_r>:
 800c660:	291f      	cmp	r1, #31
 800c662:	b538      	push	{r3, r4, r5, lr}
 800c664:	4605      	mov	r5, r0
 800c666:	460c      	mov	r4, r1
 800c668:	d904      	bls.n	800c674 <_raise_r+0x14>
 800c66a:	2316      	movs	r3, #22
 800c66c:	6003      	str	r3, [r0, #0]
 800c66e:	f04f 30ff 	mov.w	r0, #4294967295
 800c672:	bd38      	pop	{r3, r4, r5, pc}
 800c674:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c676:	b112      	cbz	r2, 800c67e <_raise_r+0x1e>
 800c678:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c67c:	b94b      	cbnz	r3, 800c692 <_raise_r+0x32>
 800c67e:	4628      	mov	r0, r5
 800c680:	f000 f830 	bl	800c6e4 <_getpid_r>
 800c684:	4622      	mov	r2, r4
 800c686:	4601      	mov	r1, r0
 800c688:	4628      	mov	r0, r5
 800c68a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c68e:	f000 b817 	b.w	800c6c0 <_kill_r>
 800c692:	2b01      	cmp	r3, #1
 800c694:	d00a      	beq.n	800c6ac <_raise_r+0x4c>
 800c696:	1c59      	adds	r1, r3, #1
 800c698:	d103      	bne.n	800c6a2 <_raise_r+0x42>
 800c69a:	2316      	movs	r3, #22
 800c69c:	6003      	str	r3, [r0, #0]
 800c69e:	2001      	movs	r0, #1
 800c6a0:	e7e7      	b.n	800c672 <_raise_r+0x12>
 800c6a2:	2100      	movs	r1, #0
 800c6a4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c6a8:	4620      	mov	r0, r4
 800c6aa:	4798      	blx	r3
 800c6ac:	2000      	movs	r0, #0
 800c6ae:	e7e0      	b.n	800c672 <_raise_r+0x12>

0800c6b0 <raise>:
 800c6b0:	4b02      	ldr	r3, [pc, #8]	@ (800c6bc <raise+0xc>)
 800c6b2:	4601      	mov	r1, r0
 800c6b4:	6818      	ldr	r0, [r3, #0]
 800c6b6:	f7ff bfd3 	b.w	800c660 <_raise_r>
 800c6ba:	bf00      	nop
 800c6bc:	20000060 	.word	0x20000060

0800c6c0 <_kill_r>:
 800c6c0:	b538      	push	{r3, r4, r5, lr}
 800c6c2:	4d07      	ldr	r5, [pc, #28]	@ (800c6e0 <_kill_r+0x20>)
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	4604      	mov	r4, r0
 800c6c8:	4608      	mov	r0, r1
 800c6ca:	4611      	mov	r1, r2
 800c6cc:	602b      	str	r3, [r5, #0]
 800c6ce:	f7f4 ff5c 	bl	800158a <_kill>
 800c6d2:	1c43      	adds	r3, r0, #1
 800c6d4:	d102      	bne.n	800c6dc <_kill_r+0x1c>
 800c6d6:	682b      	ldr	r3, [r5, #0]
 800c6d8:	b103      	cbz	r3, 800c6dc <_kill_r+0x1c>
 800c6da:	6023      	str	r3, [r4, #0]
 800c6dc:	bd38      	pop	{r3, r4, r5, pc}
 800c6de:	bf00      	nop
 800c6e0:	20000dd0 	.word	0x20000dd0

0800c6e4 <_getpid_r>:
 800c6e4:	f7f4 bf49 	b.w	800157a <_getpid>

0800c6e8 <_malloc_usable_size_r>:
 800c6e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c6ec:	1f18      	subs	r0, r3, #4
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	bfbc      	itt	lt
 800c6f2:	580b      	ldrlt	r3, [r1, r0]
 800c6f4:	18c0      	addlt	r0, r0, r3
 800c6f6:	4770      	bx	lr

0800c6f8 <_init>:
 800c6f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6fa:	bf00      	nop
 800c6fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6fe:	bc08      	pop	{r3}
 800c700:	469e      	mov	lr, r3
 800c702:	4770      	bx	lr

0800c704 <_fini>:
 800c704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c706:	bf00      	nop
 800c708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c70a:	bc08      	pop	{r3}
 800c70c:	469e      	mov	lr, r3
 800c70e:	4770      	bx	lr
