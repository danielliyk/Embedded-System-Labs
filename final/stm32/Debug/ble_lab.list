
ble_lab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011518  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000894  080116a8  080116a8  000126a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011f3c  08011f3c  00013218  2**0
                  CONTENTS
  4 .ARM          00000008  08011f3c  08011f3c  00012f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011f44  08011f44  00013218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011f44  08011f44  00012f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011f48  08011f48  00012f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000218  20000000  08011f4c  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003f90  20000218  08012164  00013218  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200041a8  08012164  000141a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00013218  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ac22  00000000  00000000  00013248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006319  00000000  00000000  0003de6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002578  00000000  00000000  00044188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001ce4  00000000  00000000  00046700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00031913  00000000  00000000  000483e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002f867  00000000  00000000  00079cf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00116000  00000000  00000000  000a955e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001bf55e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b28c  00000000  00000000  001bf5a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  001ca830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000218 	.word	0x20000218
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011690 	.word	0x08011690

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000021c 	.word	0x2000021c
 80001cc:	08011690 	.word	0x08011690

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <MX_BlueNRG_MS_Init>:
  PRINT_CSV("%02ld:%02ld:%02ld.%03ld", (long)(ms/(60*60*1000)%24), (long)(ms/(60*1000)%60), (long)((ms/1000)%60), (long)(ms%1000));
}
#endif

void MX_BlueNRG_MS_Init(void)
{
 8000fe4:	b5b0      	push	{r4, r5, r7, lr}
 8000fe6:	b08a      	sub	sp, #40	@ 0x28
 8000fe8:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN BlueNRG_MS_Init_PreTreatment */

  /* USER CODE END BlueNRG_MS_Init_PreTreatment */

  /* Initialize the peripherals and the BLE Stack */
  const char *name = "BlueNRG";
 8000fea:	4b65      	ldr	r3, [pc, #404]	@ (8001180 <MX_BlueNRG_MS_Init+0x19c>)
 8000fec:	613b      	str	r3, [r7, #16]
  uint8_t  bdaddr_len_out;
  uint8_t  hwVersion;
  uint16_t fwVersion;
  int ret;

  User_Init();
 8000fee:	f000 f8ef 	bl	80011d0 <User_Init>

  /* Get the User Button initial state */
  //user_button_init_state = BSP_PB_GetState(BUTTON_KEY);

  hci_init(user_notify, NULL);
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	4863      	ldr	r0, [pc, #396]	@ (8001184 <MX_BlueNRG_MS_Init+0x1a0>)
 8000ff6:	f009 fc8b 	bl	800a910 <hci_init>

  /* get the BlueNRG HW and FW versions */
  getBlueNRGVersion(&hwVersion, &fwVersion);
 8000ffa:	1dba      	adds	r2, r7, #6
 8000ffc:	f107 0308 	add.w	r3, r7, #8
 8001000:	4611      	mov	r1, r2
 8001002:	4618      	mov	r0, r3
 8001004:	f009 faf9 	bl	800a5fa <getBlueNRGVersion>
   * Reset BlueNRG again otherwise we won't
   * be able to change its MAC address.
   * aci_hal_write_config_data() must be the first
   * command after reset otherwise it will fail.
   */
  hci_reset();
 8001008:	f009 fb3b 	bl	800a682 <hci_reset>
  HAL_Delay(100);
 800100c:	2064      	movs	r0, #100	@ 0x64
 800100e:	f003 fff5 	bl	8004ffc <HAL_Delay>

  PRINTF("HWver %d\nFWver %d\n", hwVersion, fwVersion);
 8001012:	7a3b      	ldrb	r3, [r7, #8]
 8001014:	4619      	mov	r1, r3
 8001016:	88fb      	ldrh	r3, [r7, #6]
 8001018:	461a      	mov	r2, r3
 800101a:	485b      	ldr	r0, [pc, #364]	@ (8001188 <MX_BlueNRG_MS_Init+0x1a4>)
 800101c:	f00c fe8c 	bl	800dd38 <iprintf>
  if (hwVersion > 0x30) { /* X-NUCLEO-IDB05A1 expansion board is used */
 8001020:	7a3b      	ldrb	r3, [r7, #8]
 8001022:	2b30      	cmp	r3, #48	@ 0x30
 8001024:	d902      	bls.n	800102c <MX_BlueNRG_MS_Init+0x48>
    bnrg_expansion_board = IDB05A1;
 8001026:	4b59      	ldr	r3, [pc, #356]	@ (800118c <MX_BlueNRG_MS_Init+0x1a8>)
 8001028:	2201      	movs	r2, #1
 800102a:	701a      	strb	r2, [r3, #0]
  }

  ret = aci_hal_read_config_data(CONFIG_DATA_RANDOM_ADDRESS, BDADDR_SIZE, &bdaddr_len_out, bdaddr);
 800102c:	f107 0209 	add.w	r2, r7, #9
 8001030:	4b57      	ldr	r3, [pc, #348]	@ (8001190 <MX_BlueNRG_MS_Init+0x1ac>)
 8001032:	2106      	movs	r1, #6
 8001034:	2080      	movs	r0, #128	@ 0x80
 8001036:	f009 fa5a 	bl	800a4ee <aci_hal_read_config_data>
 800103a:	4603      	mov	r3, r0
 800103c:	617b      	str	r3, [r7, #20]

  if (ret) {
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d002      	beq.n	800104a <MX_BlueNRG_MS_Init+0x66>
    PRINTF("Read Static Random address failed.\n");
 8001044:	4853      	ldr	r0, [pc, #332]	@ (8001194 <MX_BlueNRG_MS_Init+0x1b0>)
 8001046:	f00c fedf 	bl	800de08 <puts>
  }

  if ((bdaddr[5] & 0xC0) != 0xC0) {
 800104a:	4b51      	ldr	r3, [pc, #324]	@ (8001190 <MX_BlueNRG_MS_Init+0x1ac>)
 800104c:	795b      	ldrb	r3, [r3, #5]
 800104e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001052:	2bc0      	cmp	r3, #192	@ 0xc0
 8001054:	d004      	beq.n	8001060 <MX_BlueNRG_MS_Init+0x7c>
    PRINTF("Static Random address not well formed.\n");
 8001056:	4850      	ldr	r0, [pc, #320]	@ (8001198 <MX_BlueNRG_MS_Init+0x1b4>)
 8001058:	f00c fed6 	bl	800de08 <puts>
    while(1);
 800105c:	bf00      	nop
 800105e:	e7fd      	b.n	800105c <MX_BlueNRG_MS_Init+0x78>
  }

  /* GATT Init */
  ret = aci_gatt_init();
 8001060:	f008 ff71 	bl	8009f46 <aci_gatt_init>
 8001064:	4603      	mov	r3, r0
 8001066:	617b      	str	r3, [r7, #20]
  if(ret){
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d002      	beq.n	8001074 <MX_BlueNRG_MS_Init+0x90>
    PRINTF("GATT_Init failed.\n");
 800106e:	484b      	ldr	r0, [pc, #300]	@ (800119c <MX_BlueNRG_MS_Init+0x1b8>)
 8001070:	f00c feca 	bl	800de08 <puts>
  }

  /* GAP Init */
  if (bnrg_expansion_board == IDB05A1) {
 8001074:	4b45      	ldr	r3, [pc, #276]	@ (800118c <MX_BlueNRG_MS_Init+0x1a8>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	2b01      	cmp	r3, #1
 800107a:	d110      	bne.n	800109e <MX_BlueNRG_MS_Init+0xba>
    ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 800107c:	f107 020e 	add.w	r2, r7, #14
 8001080:	f107 030a 	add.w	r3, r7, #10
 8001084:	9301      	str	r3, [sp, #4]
 8001086:	f107 030c 	add.w	r3, r7, #12
 800108a:	9300      	str	r3, [sp, #0]
 800108c:	4613      	mov	r3, r2
 800108e:	2207      	movs	r2, #7
 8001090:	2100      	movs	r1, #0
 8001092:	2001      	movs	r0, #1
 8001094:	f008 fd2b 	bl	8009aee <aci_gap_init_IDB05A1>
 8001098:	4603      	mov	r3, r0
 800109a:	617b      	str	r3, [r7, #20]
 800109c:	e00a      	b.n	80010b4 <MX_BlueNRG_MS_Init+0xd0>
  }
  else {
    ret = aci_gap_init_IDB04A1(GAP_PERIPHERAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 800109e:	f107 030a 	add.w	r3, r7, #10
 80010a2:	f107 020c 	add.w	r2, r7, #12
 80010a6:	f107 010e 	add.w	r1, r7, #14
 80010aa:	2001      	movs	r0, #1
 80010ac:	f008 fd6f 	bl	8009b8e <aci_gap_init_IDB04A1>
 80010b0:	4603      	mov	r3, r0
 80010b2:	617b      	str	r3, [r7, #20]
  }
  if (ret != BLE_STATUS_SUCCESS) {
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d002      	beq.n	80010c0 <MX_BlueNRG_MS_Init+0xdc>
    PRINTF("GAP_Init failed.\n");
 80010ba:	4839      	ldr	r0, [pc, #228]	@ (80011a0 <MX_BlueNRG_MS_Init+0x1bc>)
 80010bc:	f00c fea4 	bl	800de08 <puts>
  }

  /* Update device name */
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 80010c0:	89fc      	ldrh	r4, [r7, #14]
 80010c2:	89bd      	ldrh	r5, [r7, #12]
                                   strlen(name), (uint8_t *)name);
 80010c4:	6938      	ldr	r0, [r7, #16]
 80010c6:	f7ff f8d3 	bl	8000270 <strlen>
 80010ca:	4603      	mov	r3, r0
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 80010cc:	b2da      	uxtb	r2, r3
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	9300      	str	r3, [sp, #0]
 80010d2:	4613      	mov	r3, r2
 80010d4:	2200      	movs	r2, #0
 80010d6:	4629      	mov	r1, r5
 80010d8:	4620      	mov	r0, r4
 80010da:	f009 f8ab 	bl	800a234 <aci_gatt_update_char_value>
 80010de:	4603      	mov	r3, r0
 80010e0:	617b      	str	r3, [r7, #20]
  if (ret) {
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d004      	beq.n	80010f2 <MX_BlueNRG_MS_Init+0x10e>
    PRINTF("aci_gatt_update_char_value failed.\n");
 80010e8:	482e      	ldr	r0, [pc, #184]	@ (80011a4 <MX_BlueNRG_MS_Init+0x1c0>)
 80010ea:	f00c fe8d 	bl	800de08 <puts>
    while(1);
 80010ee:	bf00      	nop
 80010f0:	e7fd      	b.n	80010ee <MX_BlueNRG_MS_Init+0x10a>
  }

  ret = aci_gap_set_auth_requirement(MITM_PROTECTION_REQUIRED,
 80010f2:	2301      	movs	r3, #1
 80010f4:	9303      	str	r3, [sp, #12]
 80010f6:	4b2c      	ldr	r3, [pc, #176]	@ (80011a8 <MX_BlueNRG_MS_Init+0x1c4>)
 80010f8:	9302      	str	r3, [sp, #8]
 80010fa:	2300      	movs	r3, #0
 80010fc:	9301      	str	r3, [sp, #4]
 80010fe:	2310      	movs	r3, #16
 8001100:	9300      	str	r3, [sp, #0]
 8001102:	2307      	movs	r3, #7
 8001104:	2200      	movs	r2, #0
 8001106:	2100      	movs	r1, #0
 8001108:	2001      	movs	r0, #1
 800110a:	f008 fe74 	bl	8009df6 <aci_gap_set_auth_requirement>
 800110e:	4603      	mov	r3, r0
 8001110:	617b      	str	r3, [r7, #20]
                                     7,
                                     16,
                                     USE_FIXED_PIN_FOR_PAIRING,
                                     123456,
                                     BONDING);
  if (ret) {
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d004      	beq.n	8001122 <MX_BlueNRG_MS_Init+0x13e>
    PRINTF("aci_gap_set_authentication_requirement failed.\n");
 8001118:	4824      	ldr	r0, [pc, #144]	@ (80011ac <MX_BlueNRG_MS_Init+0x1c8>)
 800111a:	f00c fe75 	bl	800de08 <puts>
    while(1);
 800111e:	bf00      	nop
 8001120:	e7fd      	b.n	800111e <MX_BlueNRG_MS_Init+0x13a>
  }

  PRINTF("BLE Stack Initialized\n");
 8001122:	4823      	ldr	r0, [pc, #140]	@ (80011b0 <MX_BlueNRG_MS_Init+0x1cc>)
 8001124:	f00c fe70 	bl	800de08 <puts>

  ret = Add_HWServW2ST_Service();
 8001128:	f001 fb94 	bl	8002854 <Add_HWServW2ST_Service>
 800112c:	4603      	mov	r3, r0
 800112e:	617b      	str	r3, [r7, #20]
  if(ret == BLE_STATUS_SUCCESS) {
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d10a      	bne.n	800114c <MX_BlueNRG_MS_Init+0x168>
    PRINTF("BlueMS HW service added successfully.\n");
 8001136:	481f      	ldr	r0, [pc, #124]	@ (80011b4 <MX_BlueNRG_MS_Init+0x1d0>)
 8001138:	f00c fe66 	bl	800de08 <puts>
  } else {
    PRINTF("Error while adding BlueMS HW service: 0x%02x\r\n", ret);
    while(1);
  }

  ret = Add_SWServW2ST_Service();
 800113c:	f001 fc52 	bl	80029e4 <Add_SWServW2ST_Service>
 8001140:	4603      	mov	r3, r0
 8001142:	617b      	str	r3, [r7, #20]
  if(ret == BLE_STATUS_SUCCESS) {
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d10a      	bne.n	8001160 <MX_BlueNRG_MS_Init+0x17c>
 800114a:	e005      	b.n	8001158 <MX_BlueNRG_MS_Init+0x174>
    PRINTF("Error while adding BlueMS HW service: 0x%02x\r\n", ret);
 800114c:	6979      	ldr	r1, [r7, #20]
 800114e:	481a      	ldr	r0, [pc, #104]	@ (80011b8 <MX_BlueNRG_MS_Init+0x1d4>)
 8001150:	f00c fdf2 	bl	800dd38 <iprintf>
    while(1);
 8001154:	bf00      	nop
 8001156:	e7fd      	b.n	8001154 <MX_BlueNRG_MS_Init+0x170>
     PRINTF("BlueMS SW service added successfully.\n");
 8001158:	4818      	ldr	r0, [pc, #96]	@ (80011bc <MX_BlueNRG_MS_Init+0x1d8>)
 800115a:	f00c fe55 	bl	800de08 <puts>
 800115e:	e005      	b.n	800116c <MX_BlueNRG_MS_Init+0x188>
  } else {
     PRINTF("Error while adding BlueMS HW service: 0x%02x\r\n", ret);
 8001160:	6979      	ldr	r1, [r7, #20]
 8001162:	4815      	ldr	r0, [pc, #84]	@ (80011b8 <MX_BlueNRG_MS_Init+0x1d4>)
 8001164:	f00c fde8 	bl	800dd38 <iprintf>
     while(1);
 8001168:	bf00      	nop
 800116a:	e7fd      	b.n	8001168 <MX_BlueNRG_MS_Init+0x184>
  }

  /* Set output power level */
  ret = aci_hal_set_tx_power_level(1,4);
 800116c:	2104      	movs	r1, #4
 800116e:	2001      	movs	r0, #1
 8001170:	f009 fa12 	bl	800a598 <aci_hal_set_tx_power_level>
 8001174:	4603      	mov	r3, r0
 8001176:	617b      	str	r3, [r7, #20]

  /* USER CODE BEGIN BlueNRG_MS_Init_PostTreatment */

  /* USER CODE END BlueNRG_MS_Init_PostTreatment */
}
 8001178:	bf00      	nop
 800117a:	3718      	adds	r7, #24
 800117c:	46bd      	mov	sp, r7
 800117e:	bdb0      	pop	{r4, r5, r7, pc}
 8001180:	080116a8 	.word	0x080116a8
 8001184:	08003125 	.word	0x08003125
 8001188:	080116b0 	.word	0x080116b0
 800118c:	20000234 	.word	0x20000234
 8001190:	20000238 	.word	0x20000238
 8001194:	080116c4 	.word	0x080116c4
 8001198:	080116e8 	.word	0x080116e8
 800119c:	08011710 	.word	0x08011710
 80011a0:	08011724 	.word	0x08011724
 80011a4:	08011738 	.word	0x08011738
 80011a8:	0001e240 	.word	0x0001e240
 80011ac:	0801175c 	.word	0x0801175c
 80011b0:	0801178c 	.word	0x0801178c
 80011b4:	080117a4 	.word	0x080117a4
 80011b8:	080117cc 	.word	0x080117cc
 80011bc:	080117fc 	.word	0x080117fc

080011c0 <MX_BlueNRG_MS_Process>:

/*
 * BlueNRG-MS background task
 */
void MX_BlueNRG_MS_Process(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BlueNRG_MS_Process_PreTreatment */

  /* USER CODE END BlueNRG_MS_Process_PreTreatment */

  User_Process();
 80011c4:	f000 f80e 	bl	80011e4 <User_Process>
  hci_user_evt_proc();
 80011c8:	f009 fd1c 	bl	800ac04 <hci_user_evt_proc>

  /* USER CODE BEGIN BlueNRG_MS_Process_PostTreatment */

  /* USER CODE END BlueNRG_MS_Process_PostTreatment */
}
 80011cc:	bf00      	nop
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <User_Init>:
 *
 * @param  None
 * @retval None
 */
static void User_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  //BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
  BSP_LED_Init(LED2);
 80011d4:	2000      	movs	r0, #0
 80011d6:	f003 f99b 	bl	8004510 <BSP_LED_Init>

  BSP_COM_Init(COM1);
 80011da:	2000      	movs	r0, #0
 80011dc:	f003 fa00 	bl	80045e0 <BSP_COM_Init>
}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <User_Process>:
 *
 * @param  None
 * @retval None
 */
static void User_Process(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
  float data_t;
  float data_p;
  static uint32_t counter = 0;

  if (set_connectable)
 80011ea:	4b2c      	ldr	r3, [pc, #176]	@ (800129c <User_Process+0xb8>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d004      	beq.n	80011fe <User_Process+0x1a>
  {
    Set_DeviceConnectable();
 80011f4:	f001 ff0a 	bl	800300c <Set_DeviceConnectable>
    set_connectable = FALSE;
 80011f8:	4b28      	ldr	r3, [pc, #160]	@ (800129c <User_Process+0xb8>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	701a      	strb	r2, [r3, #0]
    while (BSP_PB_GetState(BUTTON_KEY) == !user_button_init_state);

    /* Debouncing */
    HAL_Delay(50);
#endif
    BSP_LED_Toggle(LED2);
 80011fe:	2000      	movs	r0, #0
 8001200:	f003 f998 	bl	8004534 <BSP_LED_Toggle>

    if (connected)
 8001204:	4b26      	ldr	r3, [pc, #152]	@ (80012a0 <User_Process+0xbc>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d042      	beq.n	8001292 <User_Process+0xae>
    {
      /* Set a random seed */
      srand(HAL_GetTick());
 800120c:	f003 feea 	bl	8004fe4 <HAL_GetTick>
 8001210:	4603      	mov	r3, r0
 8001212:	4618      	mov	r0, r3
 8001214:	f00b fdf6 	bl	800ce04 <srand>

      /* Update emulated Environmental data */
      Set_Random_Environmental_Values(&data_t, &data_p);
 8001218:	463a      	mov	r2, r7
 800121a:	1d3b      	adds	r3, r7, #4
 800121c:	4611      	mov	r1, r2
 800121e:	4618      	mov	r0, r3
 8001220:	f000 f84c 	bl	80012bc <Set_Random_Environmental_Values>
      BlueMS_Environmental_Update((int32_t)(data_p *100), (int16_t)(data_t * 10));
 8001224:	edd7 7a00 	vldr	s15, [r7]
 8001228:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 80012a4 <User_Process+0xc0>
 800122c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001230:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8001234:	edd7 7a01 	vldr	s15, [r7, #4]
 8001238:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800123c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001240:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001244:	ee17 3a90 	vmov	r3, s15
 8001248:	b21b      	sxth	r3, r3
 800124a:	4619      	mov	r1, r3
 800124c:	ee16 0a90 	vmov	r0, s13
 8001250:	f001 fe96 	bl	8002f80 <BlueMS_Environmental_Update>

      /* Update emulated Acceleration, Gyroscope and Sensor Fusion data */
      Set_Random_Motion_Values(counter);
 8001254:	4b14      	ldr	r3, [pc, #80]	@ (80012a8 <User_Process+0xc4>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4618      	mov	r0, r3
 800125a:	f000 f8af 	bl	80013bc <Set_Random_Motion_Values>
      Acc_Update(&x_axes, &g_axes, &m_axes);
 800125e:	4a13      	ldr	r2, [pc, #76]	@ (80012ac <User_Process+0xc8>)
 8001260:	4913      	ldr	r1, [pc, #76]	@ (80012b0 <User_Process+0xcc>)
 8001262:	4814      	ldr	r0, [pc, #80]	@ (80012b4 <User_Process+0xd0>)
 8001264:	f001 fc4e 	bl	8002b04 <Acc_Update>
      Quat_Update(&q_axes);
 8001268:	4813      	ldr	r0, [pc, #76]	@ (80012b8 <User_Process+0xd4>)
 800126a:	f001 fd67 	bl	8002d3c <Quat_Update>

      counter ++;
 800126e:	4b0e      	ldr	r3, [pc, #56]	@ (80012a8 <User_Process+0xc4>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	3301      	adds	r3, #1
 8001274:	4a0c      	ldr	r2, [pc, #48]	@ (80012a8 <User_Process+0xc4>)
 8001276:	6013      	str	r3, [r2, #0]
      if (counter == 40) {
 8001278:	4b0b      	ldr	r3, [pc, #44]	@ (80012a8 <User_Process+0xc4>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2b28      	cmp	r3, #40	@ 0x28
 800127e:	d104      	bne.n	800128a <User_Process+0xa6>
        counter = 0;
 8001280:	4b09      	ldr	r3, [pc, #36]	@ (80012a8 <User_Process+0xc4>)
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
        Reset_Motion_Values();
 8001286:	f001 f907 	bl	8002498 <Reset_Motion_Values>
      }
#if !USE_BUTTON
      HAL_Delay(1000); /* wait 1 sec before sending new data */
 800128a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800128e:	f003 feb5 	bl	8004ffc <HAL_Delay>
#if USE_BUTTON
    /* Reset the User Button flag */
    user_button_pressed = 0;
  }
#endif
}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20000000 	.word	0x20000000
 80012a0:	20000400 	.word	0x20000400
 80012a4:	42c80000 	.word	0x42c80000
 80012a8:	20000240 	.word	0x20000240
 80012ac:	2000041c 	.word	0x2000041c
 80012b0:	20000410 	.word	0x20000410
 80012b4:	20000404 	.word	0x20000404
 80012b8:	20000428 	.word	0x20000428

080012bc <Set_Random_Environmental_Values>:
 * @param  float pointer to temperature data
 * @param  float pointer to pressure data
 * @retval None
 */
static void Set_Random_Environmental_Values(float *data_t, float *data_p)
{
 80012bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80012c0:	b084      	sub	sp, #16
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	60f8      	str	r0, [r7, #12]
 80012c6:	60b9      	str	r1, [r7, #8]
  *data_t = 27.0 + ((uint64_t)rand()*5)/RAND_MAX;     /* T sensor emulation */
 80012c8:	f00b fdca 	bl	800ce60 <rand>
 80012cc:	4603      	mov	r3, r0
 80012ce:	17da      	asrs	r2, r3, #31
 80012d0:	469a      	mov	sl, r3
 80012d2:	4693      	mov	fp, r2
 80012d4:	4652      	mov	r2, sl
 80012d6:	465b      	mov	r3, fp
 80012d8:	f04f 0000 	mov.w	r0, #0
 80012dc:	f04f 0100 	mov.w	r1, #0
 80012e0:	0099      	lsls	r1, r3, #2
 80012e2:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80012e6:	0090      	lsls	r0, r2, #2
 80012e8:	4602      	mov	r2, r0
 80012ea:	460b      	mov	r3, r1
 80012ec:	eb12 010a 	adds.w	r1, r2, sl
 80012f0:	6039      	str	r1, [r7, #0]
 80012f2:	eb43 030b 	adc.w	r3, r3, fp
 80012f6:	607b      	str	r3, [r7, #4]
 80012f8:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80012fc:	f04f 0300 	mov.w	r3, #0
 8001300:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001304:	f7ff fcc0 	bl	8000c88 <__aeabi_uldivmod>
 8001308:	4602      	mov	r2, r0
 800130a:	460b      	mov	r3, r1
 800130c:	4610      	mov	r0, r2
 800130e:	4619      	mov	r1, r3
 8001310:	f7ff f93c 	bl	800058c <__aeabi_ul2d>
 8001314:	f04f 0200 	mov.w	r2, #0
 8001318:	4b26      	ldr	r3, [pc, #152]	@ (80013b4 <Set_Random_Environmental_Values+0xf8>)
 800131a:	f7fe ffb7 	bl	800028c <__adddf3>
 800131e:	4602      	mov	r2, r0
 8001320:	460b      	mov	r3, r1
 8001322:	4610      	mov	r0, r2
 8001324:	4619      	mov	r1, r3
 8001326:	f7ff fc5f 	bl	8000be8 <__aeabi_d2f>
 800132a:	4602      	mov	r2, r0
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	601a      	str	r2, [r3, #0]
  *data_p = 1000.0 + ((uint64_t)rand()*80)/RAND_MAX; /* P sensor emulation */
 8001330:	f00b fd96 	bl	800ce60 <rand>
 8001334:	4603      	mov	r3, r0
 8001336:	17da      	asrs	r2, r3, #31
 8001338:	4698      	mov	r8, r3
 800133a:	4691      	mov	r9, r2
 800133c:	4642      	mov	r2, r8
 800133e:	464b      	mov	r3, r9
 8001340:	f04f 0000 	mov.w	r0, #0
 8001344:	f04f 0100 	mov.w	r1, #0
 8001348:	0099      	lsls	r1, r3, #2
 800134a:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800134e:	0090      	lsls	r0, r2, #2
 8001350:	4602      	mov	r2, r0
 8001352:	460b      	mov	r3, r1
 8001354:	eb12 0408 	adds.w	r4, r2, r8
 8001358:	eb43 0509 	adc.w	r5, r3, r9
 800135c:	f04f 0200 	mov.w	r2, #0
 8001360:	f04f 0300 	mov.w	r3, #0
 8001364:	012b      	lsls	r3, r5, #4
 8001366:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800136a:	0122      	lsls	r2, r4, #4
 800136c:	4614      	mov	r4, r2
 800136e:	461d      	mov	r5, r3
 8001370:	4620      	mov	r0, r4
 8001372:	4629      	mov	r1, r5
 8001374:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001378:	f04f 0300 	mov.w	r3, #0
 800137c:	f7ff fc84 	bl	8000c88 <__aeabi_uldivmod>
 8001380:	4602      	mov	r2, r0
 8001382:	460b      	mov	r3, r1
 8001384:	4610      	mov	r0, r2
 8001386:	4619      	mov	r1, r3
 8001388:	f7ff f900 	bl	800058c <__aeabi_ul2d>
 800138c:	f04f 0200 	mov.w	r2, #0
 8001390:	4b09      	ldr	r3, [pc, #36]	@ (80013b8 <Set_Random_Environmental_Values+0xfc>)
 8001392:	f7fe ff7b 	bl	800028c <__adddf3>
 8001396:	4602      	mov	r2, r0
 8001398:	460b      	mov	r3, r1
 800139a:	4610      	mov	r0, r2
 800139c:	4619      	mov	r1, r3
 800139e:	f7ff fc23 	bl	8000be8 <__aeabi_d2f>
 80013a2:	4602      	mov	r2, r0
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	601a      	str	r2, [r3, #0]
}
 80013a8:	bf00      	nop
 80013aa:	3710      	adds	r7, #16
 80013ac:	46bd      	mov	sp, r7
 80013ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80013b2:	bf00      	nop
 80013b4:	403b0000 	.word	0x403b0000
 80013b8:	408f4000 	.word	0x408f4000

080013bc <Set_Random_Motion_Values>:
 * @brief  Set random values for all motion sensor data
 * @param  uint32_t counter for changing the rotation direction
 * @retval None
 */
static void Set_Random_Motion_Values(uint32_t cnt)
{
 80013bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013c0:	f5ad 7d7a 	sub.w	sp, sp, #1000	@ 0x3e8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	f8c7 03e4 	str.w	r0, [r7, #996]	@ 0x3e4
  /* Update Acceleration, Gyroscope and Sensor Fusion data */
  if (cnt < 20) {
 80013ca:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 80013ce:	2b13      	cmp	r3, #19
 80013d0:	f200 8426 	bhi.w	8001c20 <Set_Random_Motion_Values+0x864>
    x_axes.AXIS_X +=  (10  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 80013d4:	f00b fd44 	bl	800ce60 <rand>
 80013d8:	4603      	mov	r3, r0
 80013da:	17da      	asrs	r2, r3, #31
 80013dc:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
 80013e0:	f8c7 232c 	str.w	r2, [r7, #812]	@ 0x32c
 80013e4:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 80013e8:	2200      	movs	r2, #0
 80013ea:	f8c7 3320 	str.w	r3, [r7, #800]	@ 0x320
 80013ee:	f8c7 2324 	str.w	r2, [r7, #804]	@ 0x324
 80013f2:	e9d7 45ca 	ldrd	r4, r5, [r7, #808]	@ 0x328
 80013f6:	462b      	mov	r3, r5
 80013f8:	e9d7 abc8 	ldrd	sl, fp, [r7, #800]	@ 0x320
 80013fc:	4652      	mov	r2, sl
 80013fe:	fb02 f203 	mul.w	r2, r2, r3
 8001402:	465b      	mov	r3, fp
 8001404:	4621      	mov	r1, r4
 8001406:	fb01 f303 	mul.w	r3, r1, r3
 800140a:	4413      	add	r3, r2
 800140c:	4622      	mov	r2, r4
 800140e:	4651      	mov	r1, sl
 8001410:	fba2 8901 	umull	r8, r9, r2, r1
 8001414:	444b      	add	r3, r9
 8001416:	4699      	mov	r9, r3
 8001418:	4642      	mov	r2, r8
 800141a:	464b      	mov	r3, r9
 800141c:	1891      	adds	r1, r2, r2
 800141e:	66b9      	str	r1, [r7, #104]	@ 0x68
 8001420:	415b      	adcs	r3, r3
 8001422:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001424:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8001428:	eb12 0108 	adds.w	r1, r2, r8
 800142c:	f8c7 1318 	str.w	r1, [r7, #792]	@ 0x318
 8001430:	eb43 0309 	adc.w	r3, r3, r9
 8001434:	f8c7 331c 	str.w	r3, [r7, #796]	@ 0x31c
 8001438:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800143c:	f04f 0300 	mov.w	r3, #0
 8001440:	e9d7 01c6 	ldrd	r0, r1, [r7, #792]	@ 0x318
 8001444:	f7ff fc20 	bl	8000c88 <__aeabi_uldivmod>
 8001448:	4602      	mov	r2, r0
 800144a:	460b      	mov	r3, r1
 800144c:	f112 010a 	adds.w	r1, r2, #10
 8001450:	f8c7 10c8 	str.w	r1, [r7, #200]	@ 0xc8
 8001454:	f143 0300 	adc.w	r3, r3, #0
 8001458:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800145c:	4bec      	ldr	r3, [pc, #944]	@ (8001810 <Set_Random_Motion_Values+0x454>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	461a      	mov	r2, r3
 8001462:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001466:	4413      	add	r3, r2
 8001468:	461a      	mov	r2, r3
 800146a:	4be9      	ldr	r3, [pc, #932]	@ (8001810 <Set_Random_Motion_Values+0x454>)
 800146c:	601a      	str	r2, [r3, #0]
    x_axes.AXIS_Y += -(10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 800146e:	f00b fcf7 	bl	800ce60 <rand>
 8001472:	4603      	mov	r3, r0
 8001474:	17da      	asrs	r2, r3, #31
 8001476:	f8c7 3310 	str.w	r3, [r7, #784]	@ 0x310
 800147a:	f8c7 2314 	str.w	r2, [r7, #788]	@ 0x314
 800147e:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001482:	2200      	movs	r2, #0
 8001484:	f8c7 3308 	str.w	r3, [r7, #776]	@ 0x308
 8001488:	f8c7 230c 	str.w	r2, [r7, #780]	@ 0x30c
 800148c:	e9d7 45c4 	ldrd	r4, r5, [r7, #784]	@ 0x310
 8001490:	462b      	mov	r3, r5
 8001492:	e9d7 89c2 	ldrd	r8, r9, [r7, #776]	@ 0x308
 8001496:	4642      	mov	r2, r8
 8001498:	fb02 f203 	mul.w	r2, r2, r3
 800149c:	464b      	mov	r3, r9
 800149e:	4621      	mov	r1, r4
 80014a0:	fb01 f303 	mul.w	r3, r1, r3
 80014a4:	4413      	add	r3, r2
 80014a6:	4622      	mov	r2, r4
 80014a8:	4641      	mov	r1, r8
 80014aa:	fba2 1201 	umull	r1, r2, r2, r1
 80014ae:	f8c7 23dc 	str.w	r2, [r7, #988]	@ 0x3dc
 80014b2:	460a      	mov	r2, r1
 80014b4:	f8c7 23d8 	str.w	r2, [r7, #984]	@ 0x3d8
 80014b8:	f8d7 23dc 	ldr.w	r2, [r7, #988]	@ 0x3dc
 80014bc:	4413      	add	r3, r2
 80014be:	f8c7 33dc 	str.w	r3, [r7, #988]	@ 0x3dc
 80014c2:	e9d7 45f6 	ldrd	r4, r5, [r7, #984]	@ 0x3d8
 80014c6:	4622      	mov	r2, r4
 80014c8:	462b      	mov	r3, r5
 80014ca:	f04f 0000 	mov.w	r0, #0
 80014ce:	f04f 0100 	mov.w	r1, #0
 80014d2:	0099      	lsls	r1, r3, #2
 80014d4:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80014d8:	0090      	lsls	r0, r2, #2
 80014da:	4602      	mov	r2, r0
 80014dc:	460b      	mov	r3, r1
 80014de:	4621      	mov	r1, r4
 80014e0:	1851      	adds	r1, r2, r1
 80014e2:	f8c7 1300 	str.w	r1, [r7, #768]	@ 0x300
 80014e6:	4629      	mov	r1, r5
 80014e8:	eb43 0101 	adc.w	r1, r3, r1
 80014ec:	f8c7 1304 	str.w	r1, [r7, #772]	@ 0x304
 80014f0:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80014f4:	f04f 0300 	mov.w	r3, #0
 80014f8:	e9d7 01c0 	ldrd	r0, r1, [r7, #768]	@ 0x300
 80014fc:	f7ff fbc4 	bl	8000c88 <__aeabi_uldivmod>
 8001500:	4602      	mov	r2, r0
 8001502:	460b      	mov	r3, r1
 8001504:	f06f 0009 	mvn.w	r0, #9
 8001508:	f04f 31ff 	mov.w	r1, #4294967295
 800150c:	1a80      	subs	r0, r0, r2
 800150e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
 8001512:	eb61 0303 	sbc.w	r3, r1, r3
 8001516:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800151a:	4bbd      	ldr	r3, [pc, #756]	@ (8001810 <Set_Random_Motion_Values+0x454>)
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	461a      	mov	r2, r3
 8001520:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001524:	4413      	add	r3, r2
 8001526:	461a      	mov	r2, r3
 8001528:	4bb9      	ldr	r3, [pc, #740]	@ (8001810 <Set_Random_Motion_Values+0x454>)
 800152a:	605a      	str	r2, [r3, #4]
    x_axes.AXIS_Z +=  (10  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 800152c:	f00b fc98 	bl	800ce60 <rand>
 8001530:	4603      	mov	r3, r0
 8001532:	17da      	asrs	r2, r3, #31
 8001534:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8
 8001538:	f8c7 22fc 	str.w	r2, [r7, #764]	@ 0x2fc
 800153c:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001540:	2200      	movs	r2, #0
 8001542:	f8c7 32f0 	str.w	r3, [r7, #752]	@ 0x2f0
 8001546:	f8c7 22f4 	str.w	r2, [r7, #756]	@ 0x2f4
 800154a:	e9d7 45be 	ldrd	r4, r5, [r7, #760]	@ 0x2f8
 800154e:	462b      	mov	r3, r5
 8001550:	e9d7 89bc 	ldrd	r8, r9, [r7, #752]	@ 0x2f0
 8001554:	4642      	mov	r2, r8
 8001556:	fb02 f203 	mul.w	r2, r2, r3
 800155a:	464b      	mov	r3, r9
 800155c:	4621      	mov	r1, r4
 800155e:	fb01 f303 	mul.w	r3, r1, r3
 8001562:	4413      	add	r3, r2
 8001564:	4622      	mov	r2, r4
 8001566:	4641      	mov	r1, r8
 8001568:	fba2 1201 	umull	r1, r2, r2, r1
 800156c:	f8c7 23d4 	str.w	r2, [r7, #980]	@ 0x3d4
 8001570:	460a      	mov	r2, r1
 8001572:	f8c7 23d0 	str.w	r2, [r7, #976]	@ 0x3d0
 8001576:	f8d7 23d4 	ldr.w	r2, [r7, #980]	@ 0x3d4
 800157a:	4413      	add	r3, r2
 800157c:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
 8001580:	e9d7 45f4 	ldrd	r4, r5, [r7, #976]	@ 0x3d0
 8001584:	4622      	mov	r2, r4
 8001586:	462b      	mov	r3, r5
 8001588:	f04f 0000 	mov.w	r0, #0
 800158c:	f04f 0100 	mov.w	r1, #0
 8001590:	00d9      	lsls	r1, r3, #3
 8001592:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001596:	00d0      	lsls	r0, r2, #3
 8001598:	4602      	mov	r2, r0
 800159a:	460b      	mov	r3, r1
 800159c:	4621      	mov	r1, r4
 800159e:	1a51      	subs	r1, r2, r1
 80015a0:	f8c7 12e8 	str.w	r1, [r7, #744]	@ 0x2e8
 80015a4:	4629      	mov	r1, r5
 80015a6:	eb63 0301 	sbc.w	r3, r3, r1
 80015aa:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
 80015ae:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80015b2:	f04f 0300 	mov.w	r3, #0
 80015b6:	e9d7 01ba 	ldrd	r0, r1, [r7, #744]	@ 0x2e8
 80015ba:	f7ff fb65 	bl	8000c88 <__aeabi_uldivmod>
 80015be:	4602      	mov	r2, r0
 80015c0:	460b      	mov	r3, r1
 80015c2:	f112 010a 	adds.w	r1, r2, #10
 80015c6:	f8c7 10b8 	str.w	r1, [r7, #184]	@ 0xb8
 80015ca:	f143 0300 	adc.w	r3, r3, #0
 80015ce:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80015d2:	4b8f      	ldr	r3, [pc, #572]	@ (8001810 <Set_Random_Motion_Values+0x454>)
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	461a      	mov	r2, r3
 80015d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80015dc:	4413      	add	r3, r2
 80015de:	461a      	mov	r2, r3
 80015e0:	4b8b      	ldr	r3, [pc, #556]	@ (8001810 <Set_Random_Motion_Values+0x454>)
 80015e2:	609a      	str	r2, [r3, #8]
    g_axes.AXIS_X +=  (100 + ((uint64_t)rand()*2*cnt)/RAND_MAX);
 80015e4:	f00b fc3c 	bl	800ce60 <rand>
 80015e8:	4603      	mov	r3, r0
 80015ea:	17da      	asrs	r2, r3, #31
 80015ec:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
 80015f0:	f8c7 22e4 	str.w	r2, [r7, #740]	@ 0x2e4
 80015f4:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 80015f8:	2200      	movs	r2, #0
 80015fa:	f8c7 32d8 	str.w	r3, [r7, #728]	@ 0x2d8
 80015fe:	f8c7 22dc 	str.w	r2, [r7, #732]	@ 0x2dc
 8001602:	e9d7 45b8 	ldrd	r4, r5, [r7, #736]	@ 0x2e0
 8001606:	462b      	mov	r3, r5
 8001608:	e9d7 89b6 	ldrd	r8, r9, [r7, #728]	@ 0x2d8
 800160c:	4642      	mov	r2, r8
 800160e:	fb02 f203 	mul.w	r2, r2, r3
 8001612:	464b      	mov	r3, r9
 8001614:	4621      	mov	r1, r4
 8001616:	fb01 f303 	mul.w	r3, r1, r3
 800161a:	4413      	add	r3, r2
 800161c:	4622      	mov	r2, r4
 800161e:	4641      	mov	r1, r8
 8001620:	fba2 1201 	umull	r1, r2, r2, r1
 8001624:	f8c7 23cc 	str.w	r2, [r7, #972]	@ 0x3cc
 8001628:	460a      	mov	r2, r1
 800162a:	f8c7 23c8 	str.w	r2, [r7, #968]	@ 0x3c8
 800162e:	f8d7 23cc 	ldr.w	r2, [r7, #972]	@ 0x3cc
 8001632:	4413      	add	r3, r2
 8001634:	f8c7 33cc 	str.w	r3, [r7, #972]	@ 0x3cc
 8001638:	e9d7 12f2 	ldrd	r1, r2, [r7, #968]	@ 0x3c8
 800163c:	460b      	mov	r3, r1
 800163e:	18db      	adds	r3, r3, r3
 8001640:	663b      	str	r3, [r7, #96]	@ 0x60
 8001642:	4613      	mov	r3, r2
 8001644:	eb42 0303 	adc.w	r3, r2, r3
 8001648:	667b      	str	r3, [r7, #100]	@ 0x64
 800164a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 800164e:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001652:	f04f 0300 	mov.w	r3, #0
 8001656:	f7ff fb17 	bl	8000c88 <__aeabi_uldivmod>
 800165a:	4602      	mov	r2, r0
 800165c:	460b      	mov	r3, r1
 800165e:	f112 0164 	adds.w	r1, r2, #100	@ 0x64
 8001662:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 8001666:	f143 0300 	adc.w	r3, r3, #0
 800166a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800166e:	4b69      	ldr	r3, [pc, #420]	@ (8001814 <Set_Random_Motion_Values+0x458>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	461a      	mov	r2, r3
 8001674:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001678:	4413      	add	r3, r2
 800167a:	461a      	mov	r2, r3
 800167c:	4b65      	ldr	r3, [pc, #404]	@ (8001814 <Set_Random_Motion_Values+0x458>)
 800167e:	601a      	str	r2, [r3, #0]
    g_axes.AXIS_Y += -(100 + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 8001680:	f00b fbee 	bl	800ce60 <rand>
 8001684:	4603      	mov	r3, r0
 8001686:	17da      	asrs	r2, r3, #31
 8001688:	f8c7 32d0 	str.w	r3, [r7, #720]	@ 0x2d0
 800168c:	f8c7 22d4 	str.w	r2, [r7, #724]	@ 0x2d4
 8001690:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001694:	2200      	movs	r2, #0
 8001696:	f8c7 32c8 	str.w	r3, [r7, #712]	@ 0x2c8
 800169a:	f8c7 22cc 	str.w	r2, [r7, #716]	@ 0x2cc
 800169e:	e9d7 45b4 	ldrd	r4, r5, [r7, #720]	@ 0x2d0
 80016a2:	462b      	mov	r3, r5
 80016a4:	e9d7 89b2 	ldrd	r8, r9, [r7, #712]	@ 0x2c8
 80016a8:	4642      	mov	r2, r8
 80016aa:	fb02 f203 	mul.w	r2, r2, r3
 80016ae:	464b      	mov	r3, r9
 80016b0:	4621      	mov	r1, r4
 80016b2:	fb01 f303 	mul.w	r3, r1, r3
 80016b6:	4413      	add	r3, r2
 80016b8:	4622      	mov	r2, r4
 80016ba:	4641      	mov	r1, r8
 80016bc:	fba2 1201 	umull	r1, r2, r2, r1
 80016c0:	f8c7 23c4 	str.w	r2, [r7, #964]	@ 0x3c4
 80016c4:	460a      	mov	r2, r1
 80016c6:	f8c7 23c0 	str.w	r2, [r7, #960]	@ 0x3c0
 80016ca:	f8d7 23c4 	ldr.w	r2, [r7, #964]	@ 0x3c4
 80016ce:	4413      	add	r3, r2
 80016d0:	f8c7 33c4 	str.w	r3, [r7, #964]	@ 0x3c4
 80016d4:	f04f 0000 	mov.w	r0, #0
 80016d8:	f04f 0100 	mov.w	r1, #0
 80016dc:	e9d7 45f0 	ldrd	r4, r5, [r7, #960]	@ 0x3c0
 80016e0:	462b      	mov	r3, r5
 80016e2:	0099      	lsls	r1, r3, #2
 80016e4:	4623      	mov	r3, r4
 80016e6:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 80016ea:	4623      	mov	r3, r4
 80016ec:	0098      	lsls	r0, r3, #2
 80016ee:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80016f2:	f04f 0300 	mov.w	r3, #0
 80016f6:	f7ff fac7 	bl	8000c88 <__aeabi_uldivmod>
 80016fa:	4602      	mov	r2, r0
 80016fc:	460b      	mov	r3, r1
 80016fe:	f06f 0063 	mvn.w	r0, #99	@ 0x63
 8001702:	f04f 31ff 	mov.w	r1, #4294967295
 8001706:	1a80      	subs	r0, r0, r2
 8001708:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
 800170c:	eb61 0303 	sbc.w	r3, r1, r3
 8001710:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001714:	4b3f      	ldr	r3, [pc, #252]	@ (8001814 <Set_Random_Motion_Values+0x458>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	461a      	mov	r2, r3
 800171a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800171e:	4413      	add	r3, r2
 8001720:	461a      	mov	r2, r3
 8001722:	4b3c      	ldr	r3, [pc, #240]	@ (8001814 <Set_Random_Motion_Values+0x458>)
 8001724:	605a      	str	r2, [r3, #4]
    g_axes.AXIS_Z +=  (100 + ((uint64_t)rand()*6*cnt)/RAND_MAX);
 8001726:	f00b fb9b 	bl	800ce60 <rand>
 800172a:	4603      	mov	r3, r0
 800172c:	17da      	asrs	r2, r3, #31
 800172e:	f8c7 32c0 	str.w	r3, [r7, #704]	@ 0x2c0
 8001732:	f8c7 22c4 	str.w	r2, [r7, #708]	@ 0x2c4
 8001736:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 800173a:	2200      	movs	r2, #0
 800173c:	f8c7 32b8 	str.w	r3, [r7, #696]	@ 0x2b8
 8001740:	f8c7 22bc 	str.w	r2, [r7, #700]	@ 0x2bc
 8001744:	e9d7 45b0 	ldrd	r4, r5, [r7, #704]	@ 0x2c0
 8001748:	462b      	mov	r3, r5
 800174a:	e9d7 89ae 	ldrd	r8, r9, [r7, #696]	@ 0x2b8
 800174e:	4642      	mov	r2, r8
 8001750:	fb02 f203 	mul.w	r2, r2, r3
 8001754:	464b      	mov	r3, r9
 8001756:	4621      	mov	r1, r4
 8001758:	fb01 f303 	mul.w	r3, r1, r3
 800175c:	4413      	add	r3, r2
 800175e:	4622      	mov	r2, r4
 8001760:	4641      	mov	r1, r8
 8001762:	fba2 1201 	umull	r1, r2, r2, r1
 8001766:	f8c7 23bc 	str.w	r2, [r7, #956]	@ 0x3bc
 800176a:	460a      	mov	r2, r1
 800176c:	f8c7 23b8 	str.w	r2, [r7, #952]	@ 0x3b8
 8001770:	f8d7 23bc 	ldr.w	r2, [r7, #956]	@ 0x3bc
 8001774:	4413      	add	r3, r2
 8001776:	f8c7 33bc 	str.w	r3, [r7, #956]	@ 0x3bc
 800177a:	e9d7 45ee 	ldrd	r4, r5, [r7, #952]	@ 0x3b8
 800177e:	4622      	mov	r2, r4
 8001780:	462b      	mov	r3, r5
 8001782:	1891      	adds	r1, r2, r2
 8001784:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001786:	415b      	adcs	r3, r3
 8001788:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800178a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800178e:	4621      	mov	r1, r4
 8001790:	1851      	adds	r1, r2, r1
 8001792:	6539      	str	r1, [r7, #80]	@ 0x50
 8001794:	4629      	mov	r1, r5
 8001796:	eb43 0101 	adc.w	r1, r3, r1
 800179a:	6579      	str	r1, [r7, #84]	@ 0x54
 800179c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80017a0:	460b      	mov	r3, r1
 80017a2:	18db      	adds	r3, r3, r3
 80017a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80017a6:	4613      	mov	r3, r2
 80017a8:	eb42 0303 	adc.w	r3, r2, r3
 80017ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80017ae:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 80017b2:	4618      	mov	r0, r3
 80017b4:	4621      	mov	r1, r4
 80017b6:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80017ba:	f04f 0300 	mov.w	r3, #0
 80017be:	f7ff fa63 	bl	8000c88 <__aeabi_uldivmod>
 80017c2:	4602      	mov	r2, r0
 80017c4:	460b      	mov	r3, r1
 80017c6:	f112 0164 	adds.w	r1, r2, #100	@ 0x64
 80017ca:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 80017ce:	f143 0300 	adc.w	r3, r3, #0
 80017d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80017d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001814 <Set_Random_Motion_Values+0x458>)
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	461a      	mov	r2, r3
 80017dc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80017e0:	4413      	add	r3, r2
 80017e2:	461a      	mov	r2, r3
 80017e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001814 <Set_Random_Motion_Values+0x458>)
 80017e6:	609a      	str	r2, [r3, #8]
    m_axes.AXIS_X +=  (3  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 80017e8:	f00b fb3a 	bl	800ce60 <rand>
 80017ec:	4603      	mov	r3, r0
 80017ee:	17da      	asrs	r2, r3, #31
 80017f0:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
 80017f4:	f8c7 22b4 	str.w	r2, [r7, #692]	@ 0x2b4
 80017f8:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 80017fc:	2200      	movs	r2, #0
 80017fe:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
 8001802:	f8c7 22ac 	str.w	r2, [r7, #684]	@ 0x2ac
 8001806:	e9d7 45ac 	ldrd	r4, r5, [r7, #688]	@ 0x2b0
 800180a:	462b      	mov	r3, r5
 800180c:	e004      	b.n	8001818 <Set_Random_Motion_Values+0x45c>
 800180e:	bf00      	nop
 8001810:	20000404 	.word	0x20000404
 8001814:	20000410 	.word	0x20000410
 8001818:	e9d7 89aa 	ldrd	r8, r9, [r7, #680]	@ 0x2a8
 800181c:	4642      	mov	r2, r8
 800181e:	fb02 f203 	mul.w	r2, r2, r3
 8001822:	464b      	mov	r3, r9
 8001824:	4621      	mov	r1, r4
 8001826:	fb01 f303 	mul.w	r3, r1, r3
 800182a:	4413      	add	r3, r2
 800182c:	4622      	mov	r2, r4
 800182e:	4641      	mov	r1, r8
 8001830:	fba2 1201 	umull	r1, r2, r2, r1
 8001834:	f8c7 23b4 	str.w	r2, [r7, #948]	@ 0x3b4
 8001838:	460a      	mov	r2, r1
 800183a:	f8c7 23b0 	str.w	r2, [r7, #944]	@ 0x3b0
 800183e:	f8d7 23b4 	ldr.w	r2, [r7, #948]	@ 0x3b4
 8001842:	4413      	add	r3, r2
 8001844:	f8c7 33b4 	str.w	r3, [r7, #948]	@ 0x3b4
 8001848:	e9d7 45ec 	ldrd	r4, r5, [r7, #944]	@ 0x3b0
 800184c:	4622      	mov	r2, r4
 800184e:	462b      	mov	r3, r5
 8001850:	1891      	adds	r1, r2, r2
 8001852:	6439      	str	r1, [r7, #64]	@ 0x40
 8001854:	415b      	adcs	r3, r3
 8001856:	647b      	str	r3, [r7, #68]	@ 0x44
 8001858:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800185c:	4621      	mov	r1, r4
 800185e:	1851      	adds	r1, r2, r1
 8001860:	f8c7 12a0 	str.w	r1, [r7, #672]	@ 0x2a0
 8001864:	4629      	mov	r1, r5
 8001866:	eb43 0101 	adc.w	r1, r3, r1
 800186a:	f8c7 12a4 	str.w	r1, [r7, #676]	@ 0x2a4
 800186e:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001872:	f04f 0300 	mov.w	r3, #0
 8001876:	e9d7 01a8 	ldrd	r0, r1, [r7, #672]	@ 0x2a0
 800187a:	f7ff fa05 	bl	8000c88 <__aeabi_uldivmod>
 800187e:	4602      	mov	r2, r0
 8001880:	460b      	mov	r3, r1
 8001882:	1cd1      	adds	r1, r2, #3
 8001884:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8001888:	f143 0300 	adc.w	r3, r3, #0
 800188c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001890:	4be1      	ldr	r3, [pc, #900]	@ (8001c18 <Set_Random_Motion_Values+0x85c>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	461a      	mov	r2, r3
 8001896:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800189a:	4413      	add	r3, r2
 800189c:	461a      	mov	r2, r3
 800189e:	4bde      	ldr	r3, [pc, #888]	@ (8001c18 <Set_Random_Motion_Values+0x85c>)
 80018a0:	601a      	str	r2, [r3, #0]
    m_axes.AXIS_Y += -(3  + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 80018a2:	f00b fadd 	bl	800ce60 <rand>
 80018a6:	4603      	mov	r3, r0
 80018a8:	17da      	asrs	r2, r3, #31
 80018aa:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
 80018ae:	f8c7 229c 	str.w	r2, [r7, #668]	@ 0x29c
 80018b2:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 80018b6:	2200      	movs	r2, #0
 80018b8:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
 80018bc:	f8c7 2294 	str.w	r2, [r7, #660]	@ 0x294
 80018c0:	e9d7 45a6 	ldrd	r4, r5, [r7, #664]	@ 0x298
 80018c4:	462b      	mov	r3, r5
 80018c6:	e9d7 89a4 	ldrd	r8, r9, [r7, #656]	@ 0x290
 80018ca:	4642      	mov	r2, r8
 80018cc:	fb02 f203 	mul.w	r2, r2, r3
 80018d0:	464b      	mov	r3, r9
 80018d2:	4621      	mov	r1, r4
 80018d4:	fb01 f303 	mul.w	r3, r1, r3
 80018d8:	4413      	add	r3, r2
 80018da:	4622      	mov	r2, r4
 80018dc:	4641      	mov	r1, r8
 80018de:	fba2 1201 	umull	r1, r2, r2, r1
 80018e2:	f8c7 23ac 	str.w	r2, [r7, #940]	@ 0x3ac
 80018e6:	460a      	mov	r2, r1
 80018e8:	f8c7 23a8 	str.w	r2, [r7, #936]	@ 0x3a8
 80018ec:	f8d7 23ac 	ldr.w	r2, [r7, #940]	@ 0x3ac
 80018f0:	4413      	add	r3, r2
 80018f2:	f8c7 33ac 	str.w	r3, [r7, #940]	@ 0x3ac
 80018f6:	f04f 0000 	mov.w	r0, #0
 80018fa:	f04f 0100 	mov.w	r1, #0
 80018fe:	e9d7 45ea 	ldrd	r4, r5, [r7, #936]	@ 0x3a8
 8001902:	462b      	mov	r3, r5
 8001904:	0099      	lsls	r1, r3, #2
 8001906:	4623      	mov	r3, r4
 8001908:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 800190c:	4623      	mov	r3, r4
 800190e:	0098      	lsls	r0, r3, #2
 8001910:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001914:	f04f 0300 	mov.w	r3, #0
 8001918:	f7ff f9b6 	bl	8000c88 <__aeabi_uldivmod>
 800191c:	4602      	mov	r2, r0
 800191e:	460b      	mov	r3, r1
 8001920:	f06f 0002 	mvn.w	r0, #2
 8001924:	f04f 31ff 	mov.w	r1, #4294967295
 8001928:	1a80      	subs	r0, r0, r2
 800192a:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
 800192e:	eb61 0303 	sbc.w	r3, r1, r3
 8001932:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001936:	4bb8      	ldr	r3, [pc, #736]	@ (8001c18 <Set_Random_Motion_Values+0x85c>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	461a      	mov	r2, r3
 800193c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001940:	4413      	add	r3, r2
 8001942:	461a      	mov	r2, r3
 8001944:	4bb4      	ldr	r3, [pc, #720]	@ (8001c18 <Set_Random_Motion_Values+0x85c>)
 8001946:	605a      	str	r2, [r3, #4]
    m_axes.AXIS_Z +=  (3  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 8001948:	f00b fa8a 	bl	800ce60 <rand>
 800194c:	4603      	mov	r3, r0
 800194e:	17da      	asrs	r2, r3, #31
 8001950:	f8c7 3288 	str.w	r3, [r7, #648]	@ 0x288
 8001954:	f8c7 228c 	str.w	r2, [r7, #652]	@ 0x28c
 8001958:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 800195c:	2200      	movs	r2, #0
 800195e:	f8c7 3280 	str.w	r3, [r7, #640]	@ 0x280
 8001962:	f8c7 2284 	str.w	r2, [r7, #644]	@ 0x284
 8001966:	e9d7 45a2 	ldrd	r4, r5, [r7, #648]	@ 0x288
 800196a:	462b      	mov	r3, r5
 800196c:	e9d7 89a0 	ldrd	r8, r9, [r7, #640]	@ 0x280
 8001970:	4642      	mov	r2, r8
 8001972:	fb02 f203 	mul.w	r2, r2, r3
 8001976:	464b      	mov	r3, r9
 8001978:	4621      	mov	r1, r4
 800197a:	fb01 f303 	mul.w	r3, r1, r3
 800197e:	4413      	add	r3, r2
 8001980:	4622      	mov	r2, r4
 8001982:	4641      	mov	r1, r8
 8001984:	fba2 1201 	umull	r1, r2, r2, r1
 8001988:	f8c7 23a4 	str.w	r2, [r7, #932]	@ 0x3a4
 800198c:	460a      	mov	r2, r1
 800198e:	f8c7 23a0 	str.w	r2, [r7, #928]	@ 0x3a0
 8001992:	f8d7 23a4 	ldr.w	r2, [r7, #932]	@ 0x3a4
 8001996:	4413      	add	r3, r2
 8001998:	f8c7 33a4 	str.w	r3, [r7, #932]	@ 0x3a4
 800199c:	e9d7 45e8 	ldrd	r4, r5, [r7, #928]	@ 0x3a0
 80019a0:	4622      	mov	r2, r4
 80019a2:	462b      	mov	r3, r5
 80019a4:	f04f 0000 	mov.w	r0, #0
 80019a8:	f04f 0100 	mov.w	r1, #0
 80019ac:	0099      	lsls	r1, r3, #2
 80019ae:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80019b2:	0090      	lsls	r0, r2, #2
 80019b4:	4602      	mov	r2, r0
 80019b6:	460b      	mov	r3, r1
 80019b8:	4621      	mov	r1, r4
 80019ba:	1851      	adds	r1, r2, r1
 80019bc:	f8c7 1278 	str.w	r1, [r7, #632]	@ 0x278
 80019c0:	4629      	mov	r1, r5
 80019c2:	eb43 0101 	adc.w	r1, r3, r1
 80019c6:	f8c7 127c 	str.w	r1, [r7, #636]	@ 0x27c
 80019ca:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80019ce:	f04f 0300 	mov.w	r3, #0
 80019d2:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	@ 0x278
 80019d6:	f7ff f957 	bl	8000c88 <__aeabi_uldivmod>
 80019da:	4602      	mov	r2, r0
 80019dc:	460b      	mov	r3, r1
 80019de:	1cd1      	adds	r1, r2, #3
 80019e0:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 80019e4:	f143 0300 	adc.w	r3, r3, #0
 80019e8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80019ec:	4b8a      	ldr	r3, [pc, #552]	@ (8001c18 <Set_Random_Motion_Values+0x85c>)
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	461a      	mov	r2, r3
 80019f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80019f6:	4413      	add	r3, r2
 80019f8:	461a      	mov	r2, r3
 80019fa:	4b87      	ldr	r3, [pc, #540]	@ (8001c18 <Set_Random_Motion_Values+0x85c>)
 80019fc:	609a      	str	r2, [r3, #8]

    q_axes.AXIS_X -= (100  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 80019fe:	f00b fa2f 	bl	800ce60 <rand>
 8001a02:	4603      	mov	r3, r0
 8001a04:	17da      	asrs	r2, r3, #31
 8001a06:	f8c7 3270 	str.w	r3, [r7, #624]	@ 0x270
 8001a0a:	f8c7 2274 	str.w	r2, [r7, #628]	@ 0x274
 8001a0e:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001a12:	2200      	movs	r2, #0
 8001a14:	f8c7 3268 	str.w	r3, [r7, #616]	@ 0x268
 8001a18:	f8c7 226c 	str.w	r2, [r7, #620]	@ 0x26c
 8001a1c:	e9d7 459c 	ldrd	r4, r5, [r7, #624]	@ 0x270
 8001a20:	462b      	mov	r3, r5
 8001a22:	e9d7 899a 	ldrd	r8, r9, [r7, #616]	@ 0x268
 8001a26:	4642      	mov	r2, r8
 8001a28:	fb02 f203 	mul.w	r2, r2, r3
 8001a2c:	464b      	mov	r3, r9
 8001a2e:	4621      	mov	r1, r4
 8001a30:	fb01 f303 	mul.w	r3, r1, r3
 8001a34:	4413      	add	r3, r2
 8001a36:	4622      	mov	r2, r4
 8001a38:	4641      	mov	r1, r8
 8001a3a:	fba2 1201 	umull	r1, r2, r2, r1
 8001a3e:	f8c7 239c 	str.w	r2, [r7, #924]	@ 0x39c
 8001a42:	460a      	mov	r2, r1
 8001a44:	f8c7 2398 	str.w	r2, [r7, #920]	@ 0x398
 8001a48:	f8d7 239c 	ldr.w	r2, [r7, #924]	@ 0x39c
 8001a4c:	4413      	add	r3, r2
 8001a4e:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
 8001a52:	e9d7 45e6 	ldrd	r4, r5, [r7, #920]	@ 0x398
 8001a56:	4622      	mov	r2, r4
 8001a58:	462b      	mov	r3, r5
 8001a5a:	1891      	adds	r1, r2, r2
 8001a5c:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001a5e:	415b      	adcs	r3, r3
 8001a60:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001a62:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001a66:	4621      	mov	r1, r4
 8001a68:	1851      	adds	r1, r2, r1
 8001a6a:	f8c7 1260 	str.w	r1, [r7, #608]	@ 0x260
 8001a6e:	4629      	mov	r1, r5
 8001a70:	eb43 0101 	adc.w	r1, r3, r1
 8001a74:	f8c7 1264 	str.w	r1, [r7, #612]	@ 0x264
 8001a78:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001a7c:	f04f 0300 	mov.w	r3, #0
 8001a80:	e9d7 0198 	ldrd	r0, r1, [r7, #608]	@ 0x260
 8001a84:	f7ff f900 	bl	8000c88 <__aeabi_uldivmod>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	f112 0164 	adds.w	r1, r2, #100	@ 0x64
 8001a90:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 8001a94:	f143 0300 	adc.w	r3, r3, #0
 8001a98:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001a9c:	4b5f      	ldr	r3, [pc, #380]	@ (8001c1c <Set_Random_Motion_Values+0x860>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	4b5c      	ldr	r3, [pc, #368]	@ (8001c1c <Set_Random_Motion_Values+0x860>)
 8001aac:	601a      	str	r2, [r3, #0]
    q_axes.AXIS_Y += (100  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 8001aae:	f00b f9d7 	bl	800ce60 <rand>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	17da      	asrs	r2, r3, #31
 8001ab6:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
 8001aba:	f8c7 225c 	str.w	r2, [r7, #604]	@ 0x25c
 8001abe:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
 8001ac8:	f8c7 2254 	str.w	r2, [r7, #596]	@ 0x254
 8001acc:	e9d7 4596 	ldrd	r4, r5, [r7, #600]	@ 0x258
 8001ad0:	462b      	mov	r3, r5
 8001ad2:	e9d7 8994 	ldrd	r8, r9, [r7, #592]	@ 0x250
 8001ad6:	4642      	mov	r2, r8
 8001ad8:	fb02 f203 	mul.w	r2, r2, r3
 8001adc:	464b      	mov	r3, r9
 8001ade:	4621      	mov	r1, r4
 8001ae0:	fb01 f303 	mul.w	r3, r1, r3
 8001ae4:	4413      	add	r3, r2
 8001ae6:	4622      	mov	r2, r4
 8001ae8:	4641      	mov	r1, r8
 8001aea:	fba2 1201 	umull	r1, r2, r2, r1
 8001aee:	f8c7 2394 	str.w	r2, [r7, #916]	@ 0x394
 8001af2:	460a      	mov	r2, r1
 8001af4:	f8c7 2390 	str.w	r2, [r7, #912]	@ 0x390
 8001af8:	f8d7 2394 	ldr.w	r2, [r7, #916]	@ 0x394
 8001afc:	4413      	add	r3, r2
 8001afe:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
 8001b02:	e9d7 45e4 	ldrd	r4, r5, [r7, #912]	@ 0x390
 8001b06:	4622      	mov	r2, r4
 8001b08:	462b      	mov	r3, r5
 8001b0a:	f04f 0000 	mov.w	r0, #0
 8001b0e:	f04f 0100 	mov.w	r1, #0
 8001b12:	0099      	lsls	r1, r3, #2
 8001b14:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001b18:	0090      	lsls	r0, r2, #2
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	4621      	mov	r1, r4
 8001b20:	1851      	adds	r1, r2, r1
 8001b22:	f8c7 1248 	str.w	r1, [r7, #584]	@ 0x248
 8001b26:	4629      	mov	r1, r5
 8001b28:	eb43 0101 	adc.w	r1, r3, r1
 8001b2c:	f8c7 124c 	str.w	r1, [r7, #588]	@ 0x24c
 8001b30:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001b34:	f04f 0300 	mov.w	r3, #0
 8001b38:	e9d7 0192 	ldrd	r0, r1, [r7, #584]	@ 0x248
 8001b3c:	f7ff f8a4 	bl	8000c88 <__aeabi_uldivmod>
 8001b40:	4602      	mov	r2, r0
 8001b42:	460b      	mov	r3, r1
 8001b44:	f112 0164 	adds.w	r1, r2, #100	@ 0x64
 8001b48:	67b9      	str	r1, [r7, #120]	@ 0x78
 8001b4a:	f143 0300 	adc.w	r3, r3, #0
 8001b4e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001b50:	4b32      	ldr	r3, [pc, #200]	@ (8001c1c <Set_Random_Motion_Values+0x860>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	461a      	mov	r2, r3
 8001b56:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001b58:	4413      	add	r3, r2
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	4b2f      	ldr	r3, [pc, #188]	@ (8001c1c <Set_Random_Motion_Values+0x860>)
 8001b5e:	605a      	str	r2, [r3, #4]
    q_axes.AXIS_Z -= (100  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8001b60:	f00b f97e 	bl	800ce60 <rand>
 8001b64:	4603      	mov	r3, r0
 8001b66:	17da      	asrs	r2, r3, #31
 8001b68:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
 8001b6c:	f8c7 2244 	str.w	r2, [r7, #580]	@ 0x244
 8001b70:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001b74:	2200      	movs	r2, #0
 8001b76:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
 8001b7a:	f8c7 223c 	str.w	r2, [r7, #572]	@ 0x23c
 8001b7e:	e9d7 4590 	ldrd	r4, r5, [r7, #576]	@ 0x240
 8001b82:	462b      	mov	r3, r5
 8001b84:	e9d7 898e 	ldrd	r8, r9, [r7, #568]	@ 0x238
 8001b88:	4642      	mov	r2, r8
 8001b8a:	fb02 f203 	mul.w	r2, r2, r3
 8001b8e:	464b      	mov	r3, r9
 8001b90:	4621      	mov	r1, r4
 8001b92:	fb01 f303 	mul.w	r3, r1, r3
 8001b96:	4413      	add	r3, r2
 8001b98:	4622      	mov	r2, r4
 8001b9a:	4641      	mov	r1, r8
 8001b9c:	fba2 1201 	umull	r1, r2, r2, r1
 8001ba0:	f8c7 238c 	str.w	r2, [r7, #908]	@ 0x38c
 8001ba4:	460a      	mov	r2, r1
 8001ba6:	f8c7 2388 	str.w	r2, [r7, #904]	@ 0x388
 8001baa:	f8d7 238c 	ldr.w	r2, [r7, #908]	@ 0x38c
 8001bae:	4413      	add	r3, r2
 8001bb0:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c
 8001bb4:	e9d7 45e2 	ldrd	r4, r5, [r7, #904]	@ 0x388
 8001bb8:	4622      	mov	r2, r4
 8001bba:	462b      	mov	r3, r5
 8001bbc:	f04f 0000 	mov.w	r0, #0
 8001bc0:	f04f 0100 	mov.w	r1, #0
 8001bc4:	00d9      	lsls	r1, r3, #3
 8001bc6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001bca:	00d0      	lsls	r0, r2, #3
 8001bcc:	4602      	mov	r2, r0
 8001bce:	460b      	mov	r3, r1
 8001bd0:	4621      	mov	r1, r4
 8001bd2:	1a51      	subs	r1, r2, r1
 8001bd4:	f8c7 1230 	str.w	r1, [r7, #560]	@ 0x230
 8001bd8:	4629      	mov	r1, r5
 8001bda:	eb63 0301 	sbc.w	r3, r3, r1
 8001bde:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
 8001be2:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001be6:	f04f 0300 	mov.w	r3, #0
 8001bea:	e9d7 018c 	ldrd	r0, r1, [r7, #560]	@ 0x230
 8001bee:	f7ff f84b 	bl	8000c88 <__aeabi_uldivmod>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	f112 0164 	adds.w	r1, r2, #100	@ 0x64
 8001bfa:	6739      	str	r1, [r7, #112]	@ 0x70
 8001bfc:	f143 0300 	adc.w	r3, r3, #0
 8001c00:	677b      	str	r3, [r7, #116]	@ 0x74
 8001c02:	4b06      	ldr	r3, [pc, #24]	@ (8001c1c <Set_Random_Motion_Values+0x860>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	461a      	mov	r2, r3
 8001c08:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	4b03      	ldr	r3, [pc, #12]	@ (8001c1c <Set_Random_Motion_Values+0x860>)
 8001c10:	609a      	str	r2, [r3, #8]
    q_axes.AXIS_X += (200 + ((uint64_t)rand()*7*cnt)/RAND_MAX);
    q_axes.AXIS_Y -= (150 + ((uint64_t)rand()*3*cnt)/RAND_MAX);
    q_axes.AXIS_Z += (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
  }

}
 8001c12:	f000 bc37 	b.w	8002484 <Set_Random_Motion_Values+0x10c8>
 8001c16:	bf00      	nop
 8001c18:	2000041c 	.word	0x2000041c
 8001c1c:	20000428 	.word	0x20000428
    x_axes.AXIS_X += -(10  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8001c20:	f00b f91e 	bl	800ce60 <rand>
 8001c24:	4603      	mov	r3, r0
 8001c26:	17da      	asrs	r2, r3, #31
 8001c28:	f8c7 3228 	str.w	r3, [r7, #552]	@ 0x228
 8001c2c:	f8c7 222c 	str.w	r2, [r7, #556]	@ 0x22c
 8001c30:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001c34:	2200      	movs	r2, #0
 8001c36:	469a      	mov	sl, r3
 8001c38:	4693      	mov	fp, r2
 8001c3a:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 8001c3e:	460b      	mov	r3, r1
 8001c40:	fb0a f203 	mul.w	r2, sl, r3
 8001c44:	4603      	mov	r3, r0
 8001c46:	fb03 f30b 	mul.w	r3, r3, fp
 8001c4a:	4413      	add	r3, r2
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	fba2 450a 	umull	r4, r5, r2, sl
 8001c52:	442b      	add	r3, r5
 8001c54:	461d      	mov	r5, r3
 8001c56:	4622      	mov	r2, r4
 8001c58:	462b      	mov	r3, r5
 8001c5a:	1891      	adds	r1, r2, r2
 8001c5c:	6339      	str	r1, [r7, #48]	@ 0x30
 8001c5e:	415b      	adcs	r3, r3
 8001c60:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c62:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001c66:	1911      	adds	r1, r2, r4
 8001c68:	f8c7 1220 	str.w	r1, [r7, #544]	@ 0x220
 8001c6c:	416b      	adcs	r3, r5
 8001c6e:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
 8001c72:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001c76:	f04f 0300 	mov.w	r3, #0
 8001c7a:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 8001c7e:	f7ff f803 	bl	8000c88 <__aeabi_uldivmod>
 8001c82:	4602      	mov	r2, r0
 8001c84:	460b      	mov	r3, r1
 8001c86:	f06f 0009 	mvn.w	r0, #9
 8001c8a:	f04f 31ff 	mov.w	r1, #4294967295
 8001c8e:	1a80      	subs	r0, r0, r2
 8001c90:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128
 8001c94:	eb61 0303 	sbc.w	r3, r1, r3
 8001c98:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8001c9c:	4beb      	ldr	r3, [pc, #940]	@ (800204c <Set_Random_Motion_Values+0xc90>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001ca6:	4413      	add	r3, r2
 8001ca8:	461a      	mov	r2, r3
 8001caa:	4be8      	ldr	r3, [pc, #928]	@ (800204c <Set_Random_Motion_Values+0xc90>)
 8001cac:	601a      	str	r2, [r3, #0]
    x_axes.AXIS_Y +=  (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 8001cae:	f00b f8d7 	bl	800ce60 <rand>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	17da      	asrs	r2, r3, #31
 8001cb6:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
 8001cba:	f8c7 221c 	str.w	r2, [r7, #540]	@ 0x21c
 8001cbe:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 8001cc8:	f8c7 2214 	str.w	r2, [r7, #532]	@ 0x214
 8001ccc:	e9d7 4586 	ldrd	r4, r5, [r7, #536]	@ 0x218
 8001cd0:	462b      	mov	r3, r5
 8001cd2:	e9d7 8984 	ldrd	r8, r9, [r7, #528]	@ 0x210
 8001cd6:	4642      	mov	r2, r8
 8001cd8:	fb02 f203 	mul.w	r2, r2, r3
 8001cdc:	464b      	mov	r3, r9
 8001cde:	4621      	mov	r1, r4
 8001ce0:	fb01 f303 	mul.w	r3, r1, r3
 8001ce4:	4413      	add	r3, r2
 8001ce6:	4622      	mov	r2, r4
 8001ce8:	4641      	mov	r1, r8
 8001cea:	fba2 1201 	umull	r1, r2, r2, r1
 8001cee:	f8c7 2384 	str.w	r2, [r7, #900]	@ 0x384
 8001cf2:	460a      	mov	r2, r1
 8001cf4:	f8c7 2380 	str.w	r2, [r7, #896]	@ 0x380
 8001cf8:	f8d7 2384 	ldr.w	r2, [r7, #900]	@ 0x384
 8001cfc:	4413      	add	r3, r2
 8001cfe:	f8c7 3384 	str.w	r3, [r7, #900]	@ 0x384
 8001d02:	e9d7 45e0 	ldrd	r4, r5, [r7, #896]	@ 0x380
 8001d06:	4622      	mov	r2, r4
 8001d08:	462b      	mov	r3, r5
 8001d0a:	f04f 0000 	mov.w	r0, #0
 8001d0e:	f04f 0100 	mov.w	r1, #0
 8001d12:	0099      	lsls	r1, r3, #2
 8001d14:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001d18:	0090      	lsls	r0, r2, #2
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	4621      	mov	r1, r4
 8001d20:	1851      	adds	r1, r2, r1
 8001d22:	f8c7 1208 	str.w	r1, [r7, #520]	@ 0x208
 8001d26:	4629      	mov	r1, r5
 8001d28:	eb43 0101 	adc.w	r1, r3, r1
 8001d2c:	f8c7 120c 	str.w	r1, [r7, #524]	@ 0x20c
 8001d30:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001d34:	f04f 0300 	mov.w	r3, #0
 8001d38:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	@ 0x208
 8001d3c:	f7fe ffa4 	bl	8000c88 <__aeabi_uldivmod>
 8001d40:	4602      	mov	r2, r0
 8001d42:	460b      	mov	r3, r1
 8001d44:	f112 010a 	adds.w	r1, r2, #10
 8001d48:	f8c7 1120 	str.w	r1, [r7, #288]	@ 0x120
 8001d4c:	f143 0300 	adc.w	r3, r3, #0
 8001d50:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001d54:	4bbd      	ldr	r3, [pc, #756]	@ (800204c <Set_Random_Motion_Values+0xc90>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	461a      	mov	r2, r3
 8001d5a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001d5e:	4413      	add	r3, r2
 8001d60:	461a      	mov	r2, r3
 8001d62:	4bba      	ldr	r3, [pc, #744]	@ (800204c <Set_Random_Motion_Values+0xc90>)
 8001d64:	605a      	str	r2, [r3, #4]
    x_axes.AXIS_Z += -(10  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8001d66:	f00b f87b 	bl	800ce60 <rand>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	17da      	asrs	r2, r3, #31
 8001d6e:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
 8001d72:	f8c7 2204 	str.w	r2, [r7, #516]	@ 0x204
 8001d76:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
 8001d80:	f8c7 21fc 	str.w	r2, [r7, #508]	@ 0x1fc
 8001d84:	e9d7 4580 	ldrd	r4, r5, [r7, #512]	@ 0x200
 8001d88:	462b      	mov	r3, r5
 8001d8a:	e9d7 897e 	ldrd	r8, r9, [r7, #504]	@ 0x1f8
 8001d8e:	4642      	mov	r2, r8
 8001d90:	fb02 f203 	mul.w	r2, r2, r3
 8001d94:	464b      	mov	r3, r9
 8001d96:	4621      	mov	r1, r4
 8001d98:	fb01 f303 	mul.w	r3, r1, r3
 8001d9c:	4413      	add	r3, r2
 8001d9e:	4622      	mov	r2, r4
 8001da0:	4641      	mov	r1, r8
 8001da2:	fba2 1201 	umull	r1, r2, r2, r1
 8001da6:	f8c7 237c 	str.w	r2, [r7, #892]	@ 0x37c
 8001daa:	460a      	mov	r2, r1
 8001dac:	f8c7 2378 	str.w	r2, [r7, #888]	@ 0x378
 8001db0:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
 8001db4:	4413      	add	r3, r2
 8001db6:	f8c7 337c 	str.w	r3, [r7, #892]	@ 0x37c
 8001dba:	e9d7 45de 	ldrd	r4, r5, [r7, #888]	@ 0x378
 8001dbe:	4622      	mov	r2, r4
 8001dc0:	462b      	mov	r3, r5
 8001dc2:	f04f 0000 	mov.w	r0, #0
 8001dc6:	f04f 0100 	mov.w	r1, #0
 8001dca:	00d9      	lsls	r1, r3, #3
 8001dcc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001dd0:	00d0      	lsls	r0, r2, #3
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	4621      	mov	r1, r4
 8001dd8:	1a51      	subs	r1, r2, r1
 8001dda:	f8c7 11f0 	str.w	r1, [r7, #496]	@ 0x1f0
 8001dde:	4629      	mov	r1, r5
 8001de0:	eb63 0301 	sbc.w	r3, r3, r1
 8001de4:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
 8001de8:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001dec:	f04f 0300 	mov.w	r3, #0
 8001df0:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	@ 0x1f0
 8001df4:	f7fe ff48 	bl	8000c88 <__aeabi_uldivmod>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	f06f 0009 	mvn.w	r0, #9
 8001e00:	f04f 31ff 	mov.w	r1, #4294967295
 8001e04:	1a80      	subs	r0, r0, r2
 8001e06:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118
 8001e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8001e0e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001e12:	4b8e      	ldr	r3, [pc, #568]	@ (800204c <Set_Random_Motion_Values+0xc90>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	461a      	mov	r2, r3
 8001e18:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001e1c:	4413      	add	r3, r2
 8001e1e:	461a      	mov	r2, r3
 8001e20:	4b8a      	ldr	r3, [pc, #552]	@ (800204c <Set_Random_Motion_Values+0xc90>)
 8001e22:	609a      	str	r2, [r3, #8]
    g_axes.AXIS_X += -(100 + ((uint64_t)rand()*2*cnt)/RAND_MAX);
 8001e24:	f00b f81c 	bl	800ce60 <rand>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	17da      	asrs	r2, r3, #31
 8001e2c:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8001e30:	f8c7 21ec 	str.w	r2, [r7, #492]	@ 0x1ec
 8001e34:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001e3e:	f8c7 21e4 	str.w	r2, [r7, #484]	@ 0x1e4
 8001e42:	e9d7 457a 	ldrd	r4, r5, [r7, #488]	@ 0x1e8
 8001e46:	462b      	mov	r3, r5
 8001e48:	e9d7 8978 	ldrd	r8, r9, [r7, #480]	@ 0x1e0
 8001e4c:	4642      	mov	r2, r8
 8001e4e:	fb02 f203 	mul.w	r2, r2, r3
 8001e52:	464b      	mov	r3, r9
 8001e54:	4621      	mov	r1, r4
 8001e56:	fb01 f303 	mul.w	r3, r1, r3
 8001e5a:	4413      	add	r3, r2
 8001e5c:	4622      	mov	r2, r4
 8001e5e:	4641      	mov	r1, r8
 8001e60:	fba2 1201 	umull	r1, r2, r2, r1
 8001e64:	f8c7 2374 	str.w	r2, [r7, #884]	@ 0x374
 8001e68:	460a      	mov	r2, r1
 8001e6a:	f8c7 2370 	str.w	r2, [r7, #880]	@ 0x370
 8001e6e:	f8d7 2374 	ldr.w	r2, [r7, #884]	@ 0x374
 8001e72:	4413      	add	r3, r2
 8001e74:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374
 8001e78:	e9d7 12dc 	ldrd	r1, r2, [r7, #880]	@ 0x370
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	18db      	adds	r3, r3, r3
 8001e80:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e82:	4613      	mov	r3, r2
 8001e84:	eb42 0303 	adc.w	r3, r2, r3
 8001e88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e8a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001e8e:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001e92:	f04f 0300 	mov.w	r3, #0
 8001e96:	f7fe fef7 	bl	8000c88 <__aeabi_uldivmod>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	f06f 0063 	mvn.w	r0, #99	@ 0x63
 8001ea2:	f04f 31ff 	mov.w	r1, #4294967295
 8001ea6:	1a80      	subs	r0, r0, r2
 8001ea8:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
 8001eac:	eb61 0303 	sbc.w	r3, r1, r3
 8001eb0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8001eb4:	4b66      	ldr	r3, [pc, #408]	@ (8002050 <Set_Random_Motion_Values+0xc94>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	461a      	mov	r2, r3
 8001eba:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001ebe:	4413      	add	r3, r2
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	4b63      	ldr	r3, [pc, #396]	@ (8002050 <Set_Random_Motion_Values+0xc94>)
 8001ec4:	601a      	str	r2, [r3, #0]
    g_axes.AXIS_Y +=  (100 + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 8001ec6:	f00a ffcb 	bl	800ce60 <rand>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	17da      	asrs	r2, r3, #31
 8001ece:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 8001ed2:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8001ed6:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001eda:	2200      	movs	r2, #0
 8001edc:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8001ee0:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
 8001ee4:	e9d7 4576 	ldrd	r4, r5, [r7, #472]	@ 0x1d8
 8001ee8:	462b      	mov	r3, r5
 8001eea:	e9d7 8974 	ldrd	r8, r9, [r7, #464]	@ 0x1d0
 8001eee:	4642      	mov	r2, r8
 8001ef0:	fb02 f203 	mul.w	r2, r2, r3
 8001ef4:	464b      	mov	r3, r9
 8001ef6:	4621      	mov	r1, r4
 8001ef8:	fb01 f303 	mul.w	r3, r1, r3
 8001efc:	4413      	add	r3, r2
 8001efe:	4622      	mov	r2, r4
 8001f00:	4641      	mov	r1, r8
 8001f02:	fba2 1201 	umull	r1, r2, r2, r1
 8001f06:	f8c7 236c 	str.w	r2, [r7, #876]	@ 0x36c
 8001f0a:	460a      	mov	r2, r1
 8001f0c:	f8c7 2368 	str.w	r2, [r7, #872]	@ 0x368
 8001f10:	f8d7 236c 	ldr.w	r2, [r7, #876]	@ 0x36c
 8001f14:	4413      	add	r3, r2
 8001f16:	f8c7 336c 	str.w	r3, [r7, #876]	@ 0x36c
 8001f1a:	f04f 0000 	mov.w	r0, #0
 8001f1e:	f04f 0100 	mov.w	r1, #0
 8001f22:	e9d7 45da 	ldrd	r4, r5, [r7, #872]	@ 0x368
 8001f26:	462b      	mov	r3, r5
 8001f28:	0099      	lsls	r1, r3, #2
 8001f2a:	4623      	mov	r3, r4
 8001f2c:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 8001f30:	4623      	mov	r3, r4
 8001f32:	0098      	lsls	r0, r3, #2
 8001f34:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001f38:	f04f 0300 	mov.w	r3, #0
 8001f3c:	f7fe fea4 	bl	8000c88 <__aeabi_uldivmod>
 8001f40:	4602      	mov	r2, r0
 8001f42:	460b      	mov	r3, r1
 8001f44:	f112 0164 	adds.w	r1, r2, #100	@ 0x64
 8001f48:	f8c7 1108 	str.w	r1, [r7, #264]	@ 0x108
 8001f4c:	f143 0300 	adc.w	r3, r3, #0
 8001f50:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8001f54:	4b3e      	ldr	r3, [pc, #248]	@ (8002050 <Set_Random_Motion_Values+0xc94>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	461a      	mov	r2, r3
 8001f5a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001f5e:	4413      	add	r3, r2
 8001f60:	461a      	mov	r2, r3
 8001f62:	4b3b      	ldr	r3, [pc, #236]	@ (8002050 <Set_Random_Motion_Values+0xc94>)
 8001f64:	605a      	str	r2, [r3, #4]
    g_axes.AXIS_Z += -(100 + ((uint64_t)rand()*6*cnt)/RAND_MAX);
 8001f66:	f00a ff7b 	bl	800ce60 <rand>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	17da      	asrs	r2, r3, #31
 8001f6e:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8001f72:	f8c7 21cc 	str.w	r2, [r7, #460]	@ 0x1cc
 8001f76:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001f80:	f8c7 21c4 	str.w	r2, [r7, #452]	@ 0x1c4
 8001f84:	e9d7 4572 	ldrd	r4, r5, [r7, #456]	@ 0x1c8
 8001f88:	462b      	mov	r3, r5
 8001f8a:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	@ 0x1c0
 8001f8e:	4642      	mov	r2, r8
 8001f90:	fb02 f203 	mul.w	r2, r2, r3
 8001f94:	464b      	mov	r3, r9
 8001f96:	4621      	mov	r1, r4
 8001f98:	fb01 f303 	mul.w	r3, r1, r3
 8001f9c:	4413      	add	r3, r2
 8001f9e:	4622      	mov	r2, r4
 8001fa0:	4641      	mov	r1, r8
 8001fa2:	fba2 1201 	umull	r1, r2, r2, r1
 8001fa6:	f8c7 2364 	str.w	r2, [r7, #868]	@ 0x364
 8001faa:	460a      	mov	r2, r1
 8001fac:	f8c7 2360 	str.w	r2, [r7, #864]	@ 0x360
 8001fb0:	f8d7 2364 	ldr.w	r2, [r7, #868]	@ 0x364
 8001fb4:	4413      	add	r3, r2
 8001fb6:	f8c7 3364 	str.w	r3, [r7, #868]	@ 0x364
 8001fba:	e9d7 45d8 	ldrd	r4, r5, [r7, #864]	@ 0x360
 8001fbe:	4622      	mov	r2, r4
 8001fc0:	462b      	mov	r3, r5
 8001fc2:	1891      	adds	r1, r2, r2
 8001fc4:	6239      	str	r1, [r7, #32]
 8001fc6:	415b      	adcs	r3, r3
 8001fc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001fce:	4621      	mov	r1, r4
 8001fd0:	1851      	adds	r1, r2, r1
 8001fd2:	61b9      	str	r1, [r7, #24]
 8001fd4:	4629      	mov	r1, r5
 8001fd6:	eb43 0101 	adc.w	r1, r3, r1
 8001fda:	61f9      	str	r1, [r7, #28]
 8001fdc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	18db      	adds	r3, r3, r3
 8001fe4:	613b      	str	r3, [r7, #16]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	eb42 0303 	adc.w	r3, r2, r3
 8001fec:	617b      	str	r3, [r7, #20]
 8001fee:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	4621      	mov	r1, r4
 8001ff6:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001ffa:	f04f 0300 	mov.w	r3, #0
 8001ffe:	f7fe fe43 	bl	8000c88 <__aeabi_uldivmod>
 8002002:	4602      	mov	r2, r0
 8002004:	460b      	mov	r3, r1
 8002006:	f06f 0063 	mvn.w	r0, #99	@ 0x63
 800200a:	f04f 31ff 	mov.w	r1, #4294967295
 800200e:	1a80      	subs	r0, r0, r2
 8002010:	f8c7 0100 	str.w	r0, [r7, #256]	@ 0x100
 8002014:	eb61 0303 	sbc.w	r3, r1, r3
 8002018:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800201c:	4b0c      	ldr	r3, [pc, #48]	@ (8002050 <Set_Random_Motion_Values+0xc94>)
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	461a      	mov	r2, r3
 8002022:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8002026:	4413      	add	r3, r2
 8002028:	461a      	mov	r2, r3
 800202a:	4b09      	ldr	r3, [pc, #36]	@ (8002050 <Set_Random_Motion_Values+0xc94>)
 800202c:	609a      	str	r2, [r3, #8]
    m_axes.AXIS_X += -(3  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 800202e:	f00a ff17 	bl	800ce60 <rand>
 8002032:	4603      	mov	r3, r0
 8002034:	17da      	asrs	r2, r3, #31
 8002036:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 800203a:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 800203e:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8002042:	2200      	movs	r2, #0
 8002044:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 8002048:	e004      	b.n	8002054 <Set_Random_Motion_Values+0xc98>
 800204a:	bf00      	nop
 800204c:	20000404 	.word	0x20000404
 8002050:	20000410 	.word	0x20000410
 8002054:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 8002058:	e9d7 456e 	ldrd	r4, r5, [r7, #440]	@ 0x1b8
 800205c:	462b      	mov	r3, r5
 800205e:	e9d7 896c 	ldrd	r8, r9, [r7, #432]	@ 0x1b0
 8002062:	4642      	mov	r2, r8
 8002064:	fb02 f203 	mul.w	r2, r2, r3
 8002068:	464b      	mov	r3, r9
 800206a:	4621      	mov	r1, r4
 800206c:	fb01 f303 	mul.w	r3, r1, r3
 8002070:	4413      	add	r3, r2
 8002072:	4622      	mov	r2, r4
 8002074:	4641      	mov	r1, r8
 8002076:	fba2 1201 	umull	r1, r2, r2, r1
 800207a:	f8c7 235c 	str.w	r2, [r7, #860]	@ 0x35c
 800207e:	460a      	mov	r2, r1
 8002080:	f8c7 2358 	str.w	r2, [r7, #856]	@ 0x358
 8002084:	f8d7 235c 	ldr.w	r2, [r7, #860]	@ 0x35c
 8002088:	4413      	add	r3, r2
 800208a:	f8c7 335c 	str.w	r3, [r7, #860]	@ 0x35c
 800208e:	e9d7 45d6 	ldrd	r4, r5, [r7, #856]	@ 0x358
 8002092:	4622      	mov	r2, r4
 8002094:	462b      	mov	r3, r5
 8002096:	f04f 0000 	mov.w	r0, #0
 800209a:	f04f 0100 	mov.w	r1, #0
 800209e:	00d9      	lsls	r1, r3, #3
 80020a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80020a4:	00d0      	lsls	r0, r2, #3
 80020a6:	4602      	mov	r2, r0
 80020a8:	460b      	mov	r3, r1
 80020aa:	4621      	mov	r1, r4
 80020ac:	1a51      	subs	r1, r2, r1
 80020ae:	f8c7 11a8 	str.w	r1, [r7, #424]	@ 0x1a8
 80020b2:	4629      	mov	r1, r5
 80020b4:	eb63 0301 	sbc.w	r3, r3, r1
 80020b8:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 80020bc:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80020c0:	f04f 0300 	mov.w	r3, #0
 80020c4:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	@ 0x1a8
 80020c8:	f7fe fdde 	bl	8000c88 <__aeabi_uldivmod>
 80020cc:	4602      	mov	r2, r0
 80020ce:	460b      	mov	r3, r1
 80020d0:	f06f 0002 	mvn.w	r0, #2
 80020d4:	f04f 31ff 	mov.w	r1, #4294967295
 80020d8:	1a80      	subs	r0, r0, r2
 80020da:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
 80020de:	eb61 0303 	sbc.w	r3, r1, r3
 80020e2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80020e6:	4bea      	ldr	r3, [pc, #936]	@ (8002490 <Set_Random_Motion_Values+0x10d4>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	461a      	mov	r2, r3
 80020ec:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80020f0:	4413      	add	r3, r2
 80020f2:	461a      	mov	r2, r3
 80020f4:	4be6      	ldr	r3, [pc, #920]	@ (8002490 <Set_Random_Motion_Values+0x10d4>)
 80020f6:	601a      	str	r2, [r3, #0]
    m_axes.AXIS_Y +=  (3  + ((uint64_t)rand()*9*cnt)/RAND_MAX);
 80020f8:	f00a feb2 	bl	800ce60 <rand>
 80020fc:	4603      	mov	r3, r0
 80020fe:	17da      	asrs	r2, r3, #31
 8002100:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002104:	f8c7 21a4 	str.w	r2, [r7, #420]	@ 0x1a4
 8002108:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 800210c:	2200      	movs	r2, #0
 800210e:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 8002112:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8002116:	e9d7 4568 	ldrd	r4, r5, [r7, #416]	@ 0x1a0
 800211a:	462b      	mov	r3, r5
 800211c:	e9d7 8966 	ldrd	r8, r9, [r7, #408]	@ 0x198
 8002120:	4642      	mov	r2, r8
 8002122:	fb02 f203 	mul.w	r2, r2, r3
 8002126:	464b      	mov	r3, r9
 8002128:	4621      	mov	r1, r4
 800212a:	fb01 f303 	mul.w	r3, r1, r3
 800212e:	4413      	add	r3, r2
 8002130:	4622      	mov	r2, r4
 8002132:	4641      	mov	r1, r8
 8002134:	fba2 1201 	umull	r1, r2, r2, r1
 8002138:	f8c7 2354 	str.w	r2, [r7, #852]	@ 0x354
 800213c:	460a      	mov	r2, r1
 800213e:	f8c7 2350 	str.w	r2, [r7, #848]	@ 0x350
 8002142:	f8d7 2354 	ldr.w	r2, [r7, #852]	@ 0x354
 8002146:	4413      	add	r3, r2
 8002148:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 800214c:	e9d7 45d4 	ldrd	r4, r5, [r7, #848]	@ 0x350
 8002150:	4622      	mov	r2, r4
 8002152:	462b      	mov	r3, r5
 8002154:	f04f 0000 	mov.w	r0, #0
 8002158:	f04f 0100 	mov.w	r1, #0
 800215c:	00d9      	lsls	r1, r3, #3
 800215e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002162:	00d0      	lsls	r0, r2, #3
 8002164:	4602      	mov	r2, r0
 8002166:	460b      	mov	r3, r1
 8002168:	4621      	mov	r1, r4
 800216a:	1851      	adds	r1, r2, r1
 800216c:	f8c7 1190 	str.w	r1, [r7, #400]	@ 0x190
 8002170:	4629      	mov	r1, r5
 8002172:	eb43 0101 	adc.w	r1, r3, r1
 8002176:	f8c7 1194 	str.w	r1, [r7, #404]	@ 0x194
 800217a:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800217e:	f04f 0300 	mov.w	r3, #0
 8002182:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8002186:	f7fe fd7f 	bl	8000c88 <__aeabi_uldivmod>
 800218a:	4602      	mov	r2, r0
 800218c:	460b      	mov	r3, r1
 800218e:	1cd1      	adds	r1, r2, #3
 8002190:	f8c7 10f0 	str.w	r1, [r7, #240]	@ 0xf0
 8002194:	f143 0300 	adc.w	r3, r3, #0
 8002198:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800219c:	4bbc      	ldr	r3, [pc, #752]	@ (8002490 <Set_Random_Motion_Values+0x10d4>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	461a      	mov	r2, r3
 80021a2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80021a6:	4413      	add	r3, r2
 80021a8:	461a      	mov	r2, r3
 80021aa:	4bb9      	ldr	r3, [pc, #740]	@ (8002490 <Set_Random_Motion_Values+0x10d4>)
 80021ac:	605a      	str	r2, [r3, #4]
    m_axes.AXIS_Z += -(3  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 80021ae:	f00a fe57 	bl	800ce60 <rand>
 80021b2:	4603      	mov	r3, r0
 80021b4:	17da      	asrs	r2, r3, #31
 80021b6:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 80021ba:	f8c7 218c 	str.w	r2, [r7, #396]	@ 0x18c
 80021be:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 80021c2:	2200      	movs	r2, #0
 80021c4:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80021c8:	f8c7 2184 	str.w	r2, [r7, #388]	@ 0x184
 80021cc:	e9d7 4562 	ldrd	r4, r5, [r7, #392]	@ 0x188
 80021d0:	462b      	mov	r3, r5
 80021d2:	e9d7 8960 	ldrd	r8, r9, [r7, #384]	@ 0x180
 80021d6:	4642      	mov	r2, r8
 80021d8:	fb02 f203 	mul.w	r2, r2, r3
 80021dc:	464b      	mov	r3, r9
 80021de:	4621      	mov	r1, r4
 80021e0:	fb01 f303 	mul.w	r3, r1, r3
 80021e4:	4413      	add	r3, r2
 80021e6:	4622      	mov	r2, r4
 80021e8:	4641      	mov	r1, r8
 80021ea:	fba2 1201 	umull	r1, r2, r2, r1
 80021ee:	f8c7 234c 	str.w	r2, [r7, #844]	@ 0x34c
 80021f2:	460a      	mov	r2, r1
 80021f4:	f8c7 2348 	str.w	r2, [r7, #840]	@ 0x348
 80021f8:	f8d7 234c 	ldr.w	r2, [r7, #844]	@ 0x34c
 80021fc:	4413      	add	r3, r2
 80021fe:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
 8002202:	e9d7 45d2 	ldrd	r4, r5, [r7, #840]	@ 0x348
 8002206:	4622      	mov	r2, r4
 8002208:	462b      	mov	r3, r5
 800220a:	1891      	adds	r1, r2, r2
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	415b      	adcs	r3, r3
 8002210:	60fb      	str	r3, [r7, #12]
 8002212:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002216:	4621      	mov	r1, r4
 8002218:	1851      	adds	r1, r2, r1
 800221a:	f8c7 1178 	str.w	r1, [r7, #376]	@ 0x178
 800221e:	4629      	mov	r1, r5
 8002220:	eb43 0101 	adc.w	r1, r3, r1
 8002224:	f8c7 117c 	str.w	r1, [r7, #380]	@ 0x17c
 8002228:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800222c:	f04f 0300 	mov.w	r3, #0
 8002230:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	@ 0x178
 8002234:	f7fe fd28 	bl	8000c88 <__aeabi_uldivmod>
 8002238:	4602      	mov	r2, r0
 800223a:	460b      	mov	r3, r1
 800223c:	f06f 0002 	mvn.w	r0, #2
 8002240:	f04f 31ff 	mov.w	r1, #4294967295
 8002244:	1a80      	subs	r0, r0, r2
 8002246:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
 800224a:	eb61 0303 	sbc.w	r3, r1, r3
 800224e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002252:	4b8f      	ldr	r3, [pc, #572]	@ (8002490 <Set_Random_Motion_Values+0x10d4>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	461a      	mov	r2, r3
 8002258:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800225c:	4413      	add	r3, r2
 800225e:	461a      	mov	r2, r3
 8002260:	4b8b      	ldr	r3, [pc, #556]	@ (8002490 <Set_Random_Motion_Values+0x10d4>)
 8002262:	609a      	str	r2, [r3, #8]
    q_axes.AXIS_X += (200 + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8002264:	f00a fdfc 	bl	800ce60 <rand>
 8002268:	4603      	mov	r3, r0
 800226a:	17da      	asrs	r2, r3, #31
 800226c:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8002270:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
 8002274:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8002278:	2200      	movs	r2, #0
 800227a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 800227e:	f8c7 216c 	str.w	r2, [r7, #364]	@ 0x16c
 8002282:	e9d7 455c 	ldrd	r4, r5, [r7, #368]	@ 0x170
 8002286:	462b      	mov	r3, r5
 8002288:	e9d7 895a 	ldrd	r8, r9, [r7, #360]	@ 0x168
 800228c:	4642      	mov	r2, r8
 800228e:	fb02 f203 	mul.w	r2, r2, r3
 8002292:	464b      	mov	r3, r9
 8002294:	4621      	mov	r1, r4
 8002296:	fb01 f303 	mul.w	r3, r1, r3
 800229a:	4413      	add	r3, r2
 800229c:	4622      	mov	r2, r4
 800229e:	4641      	mov	r1, r8
 80022a0:	fba2 1201 	umull	r1, r2, r2, r1
 80022a4:	f8c7 2344 	str.w	r2, [r7, #836]	@ 0x344
 80022a8:	460a      	mov	r2, r1
 80022aa:	f8c7 2340 	str.w	r2, [r7, #832]	@ 0x340
 80022ae:	f8d7 2344 	ldr.w	r2, [r7, #836]	@ 0x344
 80022b2:	4413      	add	r3, r2
 80022b4:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
 80022b8:	e9d7 45d0 	ldrd	r4, r5, [r7, #832]	@ 0x340
 80022bc:	4622      	mov	r2, r4
 80022be:	462b      	mov	r3, r5
 80022c0:	f04f 0000 	mov.w	r0, #0
 80022c4:	f04f 0100 	mov.w	r1, #0
 80022c8:	00d9      	lsls	r1, r3, #3
 80022ca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80022ce:	00d0      	lsls	r0, r2, #3
 80022d0:	4602      	mov	r2, r0
 80022d2:	460b      	mov	r3, r1
 80022d4:	4621      	mov	r1, r4
 80022d6:	1a51      	subs	r1, r2, r1
 80022d8:	f8c7 1160 	str.w	r1, [r7, #352]	@ 0x160
 80022dc:	4629      	mov	r1, r5
 80022de:	eb63 0301 	sbc.w	r3, r3, r1
 80022e2:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 80022e6:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80022ea:	f04f 0300 	mov.w	r3, #0
 80022ee:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	@ 0x160
 80022f2:	f7fe fcc9 	bl	8000c88 <__aeabi_uldivmod>
 80022f6:	4602      	mov	r2, r0
 80022f8:	460b      	mov	r3, r1
 80022fa:	f112 01c8 	adds.w	r1, r2, #200	@ 0xc8
 80022fe:	f8c7 10e0 	str.w	r1, [r7, #224]	@ 0xe0
 8002302:	f143 0300 	adc.w	r3, r3, #0
 8002306:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800230a:	4b62      	ldr	r3, [pc, #392]	@ (8002494 <Set_Random_Motion_Values+0x10d8>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	461a      	mov	r2, r3
 8002310:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002314:	4413      	add	r3, r2
 8002316:	461a      	mov	r2, r3
 8002318:	4b5e      	ldr	r3, [pc, #376]	@ (8002494 <Set_Random_Motion_Values+0x10d8>)
 800231a:	601a      	str	r2, [r3, #0]
    q_axes.AXIS_Y -= (150 + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 800231c:	f00a fda0 	bl	800ce60 <rand>
 8002320:	4603      	mov	r3, r0
 8002322:	17da      	asrs	r2, r3, #31
 8002324:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8002328:	f8c7 215c 	str.w	r2, [r7, #348]	@ 0x15c
 800232c:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8002330:	2200      	movs	r2, #0
 8002332:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002336:	f8c7 2154 	str.w	r2, [r7, #340]	@ 0x154
 800233a:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	@ 0x158
 800233e:	462b      	mov	r3, r5
 8002340:	e9d7 8954 	ldrd	r8, r9, [r7, #336]	@ 0x150
 8002344:	4642      	mov	r2, r8
 8002346:	fb02 f203 	mul.w	r2, r2, r3
 800234a:	464b      	mov	r3, r9
 800234c:	4621      	mov	r1, r4
 800234e:	fb01 f303 	mul.w	r3, r1, r3
 8002352:	4413      	add	r3, r2
 8002354:	4622      	mov	r2, r4
 8002356:	4641      	mov	r1, r8
 8002358:	fba2 1201 	umull	r1, r2, r2, r1
 800235c:	f8c7 233c 	str.w	r2, [r7, #828]	@ 0x33c
 8002360:	460a      	mov	r2, r1
 8002362:	f8c7 2338 	str.w	r2, [r7, #824]	@ 0x338
 8002366:	f8d7 233c 	ldr.w	r2, [r7, #828]	@ 0x33c
 800236a:	4413      	add	r3, r2
 800236c:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 8002370:	e9d7 45ce 	ldrd	r4, r5, [r7, #824]	@ 0x338
 8002374:	4622      	mov	r2, r4
 8002376:	462b      	mov	r3, r5
 8002378:	1891      	adds	r1, r2, r2
 800237a:	6039      	str	r1, [r7, #0]
 800237c:	415b      	adcs	r3, r3
 800237e:	607b      	str	r3, [r7, #4]
 8002380:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002384:	4621      	mov	r1, r4
 8002386:	1851      	adds	r1, r2, r1
 8002388:	f8c7 1148 	str.w	r1, [r7, #328]	@ 0x148
 800238c:	4629      	mov	r1, r5
 800238e:	eb43 0101 	adc.w	r1, r3, r1
 8002392:	f8c7 114c 	str.w	r1, [r7, #332]	@ 0x14c
 8002396:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800239a:	f04f 0300 	mov.w	r3, #0
 800239e:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 80023a2:	f7fe fc71 	bl	8000c88 <__aeabi_uldivmod>
 80023a6:	4602      	mov	r2, r0
 80023a8:	460b      	mov	r3, r1
 80023aa:	f112 0196 	adds.w	r1, r2, #150	@ 0x96
 80023ae:	f8c7 10d8 	str.w	r1, [r7, #216]	@ 0xd8
 80023b2:	f143 0300 	adc.w	r3, r3, #0
 80023b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80023ba:	4b36      	ldr	r3, [pc, #216]	@ (8002494 <Set_Random_Motion_Values+0x10d8>)
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	461a      	mov	r2, r3
 80023c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	461a      	mov	r2, r3
 80023c8:	4b32      	ldr	r3, [pc, #200]	@ (8002494 <Set_Random_Motion_Values+0x10d8>)
 80023ca:	605a      	str	r2, [r3, #4]
    q_axes.AXIS_Z += (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 80023cc:	f00a fd48 	bl	800ce60 <rand>
 80023d0:	4603      	mov	r3, r0
 80023d2:	17da      	asrs	r2, r3, #31
 80023d4:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 80023d8:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
 80023dc:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 80023e0:	2200      	movs	r2, #0
 80023e2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80023e6:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 80023ea:	e9d7 4550 	ldrd	r4, r5, [r7, #320]	@ 0x140
 80023ee:	462b      	mov	r3, r5
 80023f0:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	@ 0x138
 80023f4:	4642      	mov	r2, r8
 80023f6:	fb02 f203 	mul.w	r2, r2, r3
 80023fa:	464b      	mov	r3, r9
 80023fc:	4621      	mov	r1, r4
 80023fe:	fb01 f303 	mul.w	r3, r1, r3
 8002402:	4413      	add	r3, r2
 8002404:	4622      	mov	r2, r4
 8002406:	4641      	mov	r1, r8
 8002408:	fba2 1201 	umull	r1, r2, r2, r1
 800240c:	f8c7 2334 	str.w	r2, [r7, #820]	@ 0x334
 8002410:	460a      	mov	r2, r1
 8002412:	f8c7 2330 	str.w	r2, [r7, #816]	@ 0x330
 8002416:	f8d7 2334 	ldr.w	r2, [r7, #820]	@ 0x334
 800241a:	4413      	add	r3, r2
 800241c:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
 8002420:	e9d7 45cc 	ldrd	r4, r5, [r7, #816]	@ 0x330
 8002424:	4622      	mov	r2, r4
 8002426:	462b      	mov	r3, r5
 8002428:	f04f 0000 	mov.w	r0, #0
 800242c:	f04f 0100 	mov.w	r1, #0
 8002430:	0099      	lsls	r1, r3, #2
 8002432:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002436:	0090      	lsls	r0, r2, #2
 8002438:	4602      	mov	r2, r0
 800243a:	460b      	mov	r3, r1
 800243c:	4621      	mov	r1, r4
 800243e:	1851      	adds	r1, r2, r1
 8002440:	f8c7 1130 	str.w	r1, [r7, #304]	@ 0x130
 8002444:	4629      	mov	r1, r5
 8002446:	eb43 0101 	adc.w	r1, r3, r1
 800244a:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 800244e:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8002452:	f04f 0300 	mov.w	r3, #0
 8002456:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	@ 0x130
 800245a:	f7fe fc15 	bl	8000c88 <__aeabi_uldivmod>
 800245e:	4602      	mov	r2, r0
 8002460:	460b      	mov	r3, r1
 8002462:	f112 010a 	adds.w	r1, r2, #10
 8002466:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 800246a:	f143 0300 	adc.w	r3, r3, #0
 800246e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002472:	4b08      	ldr	r3, [pc, #32]	@ (8002494 <Set_Random_Motion_Values+0x10d8>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	461a      	mov	r2, r3
 8002478:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800247c:	4413      	add	r3, r2
 800247e:	461a      	mov	r2, r3
 8002480:	4b04      	ldr	r3, [pc, #16]	@ (8002494 <Set_Random_Motion_Values+0x10d8>)
 8002482:	609a      	str	r2, [r3, #8]
}
 8002484:	bf00      	nop
 8002486:	f507 777a 	add.w	r7, r7, #1000	@ 0x3e8
 800248a:	46bd      	mov	sp, r7
 800248c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002490:	2000041c 	.word	0x2000041c
 8002494:	20000428 	.word	0x20000428

08002498 <Reset_Motion_Values>:
 * @brief  Reset values for all motion sensor data
 * @param  None
 * @retval None
 */
static void Reset_Motion_Values(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  x_axes.AXIS_X = (x_axes.AXIS_X)%2000 == 0 ? -x_axes.AXIS_X : 10;
 800249c:	4b6e      	ldr	r3, [pc, #440]	@ (8002658 <Reset_Motion_Values+0x1c0>)
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	4b6e      	ldr	r3, [pc, #440]	@ (800265c <Reset_Motion_Values+0x1c4>)
 80024a2:	fb83 1302 	smull	r1, r3, r3, r2
 80024a6:	11d9      	asrs	r1, r3, #7
 80024a8:	17d3      	asrs	r3, r2, #31
 80024aa:	1acb      	subs	r3, r1, r3
 80024ac:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80024b0:	fb01 f303 	mul.w	r3, r1, r3
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d103      	bne.n	80024c2 <Reset_Motion_Values+0x2a>
 80024ba:	4b67      	ldr	r3, [pc, #412]	@ (8002658 <Reset_Motion_Values+0x1c0>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	425b      	negs	r3, r3
 80024c0:	e000      	b.n	80024c4 <Reset_Motion_Values+0x2c>
 80024c2:	230a      	movs	r3, #10
 80024c4:	4a64      	ldr	r2, [pc, #400]	@ (8002658 <Reset_Motion_Values+0x1c0>)
 80024c6:	6013      	str	r3, [r2, #0]
  x_axes.AXIS_Y = (x_axes.AXIS_Y)%2000 == 0 ? -x_axes.AXIS_Y : -10;
 80024c8:	4b63      	ldr	r3, [pc, #396]	@ (8002658 <Reset_Motion_Values+0x1c0>)
 80024ca:	685a      	ldr	r2, [r3, #4]
 80024cc:	4b63      	ldr	r3, [pc, #396]	@ (800265c <Reset_Motion_Values+0x1c4>)
 80024ce:	fb83 1302 	smull	r1, r3, r3, r2
 80024d2:	11d9      	asrs	r1, r3, #7
 80024d4:	17d3      	asrs	r3, r2, #31
 80024d6:	1acb      	subs	r3, r1, r3
 80024d8:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80024dc:	fb01 f303 	mul.w	r3, r1, r3
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d103      	bne.n	80024ee <Reset_Motion_Values+0x56>
 80024e6:	4b5c      	ldr	r3, [pc, #368]	@ (8002658 <Reset_Motion_Values+0x1c0>)
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	425b      	negs	r3, r3
 80024ec:	e001      	b.n	80024f2 <Reset_Motion_Values+0x5a>
 80024ee:	f06f 0309 	mvn.w	r3, #9
 80024f2:	4a59      	ldr	r2, [pc, #356]	@ (8002658 <Reset_Motion_Values+0x1c0>)
 80024f4:	6053      	str	r3, [r2, #4]
  x_axes.AXIS_Z = (x_axes.AXIS_Z)%2000 == 0 ? -x_axes.AXIS_Z : 10;
 80024f6:	4b58      	ldr	r3, [pc, #352]	@ (8002658 <Reset_Motion_Values+0x1c0>)
 80024f8:	689a      	ldr	r2, [r3, #8]
 80024fa:	4b58      	ldr	r3, [pc, #352]	@ (800265c <Reset_Motion_Values+0x1c4>)
 80024fc:	fb83 1302 	smull	r1, r3, r3, r2
 8002500:	11d9      	asrs	r1, r3, #7
 8002502:	17d3      	asrs	r3, r2, #31
 8002504:	1acb      	subs	r3, r1, r3
 8002506:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800250a:	fb01 f303 	mul.w	r3, r1, r3
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	2b00      	cmp	r3, #0
 8002512:	d103      	bne.n	800251c <Reset_Motion_Values+0x84>
 8002514:	4b50      	ldr	r3, [pc, #320]	@ (8002658 <Reset_Motion_Values+0x1c0>)
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	425b      	negs	r3, r3
 800251a:	e000      	b.n	800251e <Reset_Motion_Values+0x86>
 800251c:	230a      	movs	r3, #10
 800251e:	4a4e      	ldr	r2, [pc, #312]	@ (8002658 <Reset_Motion_Values+0x1c0>)
 8002520:	6093      	str	r3, [r2, #8]
  g_axes.AXIS_X = (g_axes.AXIS_X)%2000 == 0 ? -g_axes.AXIS_X : 100;
 8002522:	4b4f      	ldr	r3, [pc, #316]	@ (8002660 <Reset_Motion_Values+0x1c8>)
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	4b4d      	ldr	r3, [pc, #308]	@ (800265c <Reset_Motion_Values+0x1c4>)
 8002528:	fb83 1302 	smull	r1, r3, r3, r2
 800252c:	11d9      	asrs	r1, r3, #7
 800252e:	17d3      	asrs	r3, r2, #31
 8002530:	1acb      	subs	r3, r1, r3
 8002532:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8002536:	fb01 f303 	mul.w	r3, r1, r3
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	2b00      	cmp	r3, #0
 800253e:	d103      	bne.n	8002548 <Reset_Motion_Values+0xb0>
 8002540:	4b47      	ldr	r3, [pc, #284]	@ (8002660 <Reset_Motion_Values+0x1c8>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	425b      	negs	r3, r3
 8002546:	e000      	b.n	800254a <Reset_Motion_Values+0xb2>
 8002548:	2364      	movs	r3, #100	@ 0x64
 800254a:	4a45      	ldr	r2, [pc, #276]	@ (8002660 <Reset_Motion_Values+0x1c8>)
 800254c:	6013      	str	r3, [r2, #0]
  g_axes.AXIS_Y = (g_axes.AXIS_Y)%2000 == 0 ? -g_axes.AXIS_Y : -100;
 800254e:	4b44      	ldr	r3, [pc, #272]	@ (8002660 <Reset_Motion_Values+0x1c8>)
 8002550:	685a      	ldr	r2, [r3, #4]
 8002552:	4b42      	ldr	r3, [pc, #264]	@ (800265c <Reset_Motion_Values+0x1c4>)
 8002554:	fb83 1302 	smull	r1, r3, r3, r2
 8002558:	11d9      	asrs	r1, r3, #7
 800255a:	17d3      	asrs	r3, r2, #31
 800255c:	1acb      	subs	r3, r1, r3
 800255e:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8002562:	fb01 f303 	mul.w	r3, r1, r3
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	2b00      	cmp	r3, #0
 800256a:	d103      	bne.n	8002574 <Reset_Motion_Values+0xdc>
 800256c:	4b3c      	ldr	r3, [pc, #240]	@ (8002660 <Reset_Motion_Values+0x1c8>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	425b      	negs	r3, r3
 8002572:	e001      	b.n	8002578 <Reset_Motion_Values+0xe0>
 8002574:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8002578:	4a39      	ldr	r2, [pc, #228]	@ (8002660 <Reset_Motion_Values+0x1c8>)
 800257a:	6053      	str	r3, [r2, #4]
  g_axes.AXIS_Z = (g_axes.AXIS_Z)%2000 == 0 ? -g_axes.AXIS_Z : 100;
 800257c:	4b38      	ldr	r3, [pc, #224]	@ (8002660 <Reset_Motion_Values+0x1c8>)
 800257e:	689a      	ldr	r2, [r3, #8]
 8002580:	4b36      	ldr	r3, [pc, #216]	@ (800265c <Reset_Motion_Values+0x1c4>)
 8002582:	fb83 1302 	smull	r1, r3, r3, r2
 8002586:	11d9      	asrs	r1, r3, #7
 8002588:	17d3      	asrs	r3, r2, #31
 800258a:	1acb      	subs	r3, r1, r3
 800258c:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8002590:	fb01 f303 	mul.w	r3, r1, r3
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b00      	cmp	r3, #0
 8002598:	d103      	bne.n	80025a2 <Reset_Motion_Values+0x10a>
 800259a:	4b31      	ldr	r3, [pc, #196]	@ (8002660 <Reset_Motion_Values+0x1c8>)
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	425b      	negs	r3, r3
 80025a0:	e000      	b.n	80025a4 <Reset_Motion_Values+0x10c>
 80025a2:	2364      	movs	r3, #100	@ 0x64
 80025a4:	4a2e      	ldr	r2, [pc, #184]	@ (8002660 <Reset_Motion_Values+0x1c8>)
 80025a6:	6093      	str	r3, [r2, #8]
  m_axes.AXIS_X = (g_axes.AXIS_X)%2000 == 0 ? -m_axes.AXIS_X : 3;
 80025a8:	4b2d      	ldr	r3, [pc, #180]	@ (8002660 <Reset_Motion_Values+0x1c8>)
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	4b2b      	ldr	r3, [pc, #172]	@ (800265c <Reset_Motion_Values+0x1c4>)
 80025ae:	fb83 1302 	smull	r1, r3, r3, r2
 80025b2:	11d9      	asrs	r1, r3, #7
 80025b4:	17d3      	asrs	r3, r2, #31
 80025b6:	1acb      	subs	r3, r1, r3
 80025b8:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80025bc:	fb01 f303 	mul.w	r3, r1, r3
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d103      	bne.n	80025ce <Reset_Motion_Values+0x136>
 80025c6:	4b27      	ldr	r3, [pc, #156]	@ (8002664 <Reset_Motion_Values+0x1cc>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	425b      	negs	r3, r3
 80025cc:	e000      	b.n	80025d0 <Reset_Motion_Values+0x138>
 80025ce:	2303      	movs	r3, #3
 80025d0:	4a24      	ldr	r2, [pc, #144]	@ (8002664 <Reset_Motion_Values+0x1cc>)
 80025d2:	6013      	str	r3, [r2, #0]
  m_axes.AXIS_Y = (g_axes.AXIS_Y)%2000 == 0 ? -m_axes.AXIS_Y : -3;
 80025d4:	4b22      	ldr	r3, [pc, #136]	@ (8002660 <Reset_Motion_Values+0x1c8>)
 80025d6:	685a      	ldr	r2, [r3, #4]
 80025d8:	4b20      	ldr	r3, [pc, #128]	@ (800265c <Reset_Motion_Values+0x1c4>)
 80025da:	fb83 1302 	smull	r1, r3, r3, r2
 80025de:	11d9      	asrs	r1, r3, #7
 80025e0:	17d3      	asrs	r3, r2, #31
 80025e2:	1acb      	subs	r3, r1, r3
 80025e4:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80025e8:	fb01 f303 	mul.w	r3, r1, r3
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d103      	bne.n	80025fa <Reset_Motion_Values+0x162>
 80025f2:	4b1c      	ldr	r3, [pc, #112]	@ (8002664 <Reset_Motion_Values+0x1cc>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	425b      	negs	r3, r3
 80025f8:	e001      	b.n	80025fe <Reset_Motion_Values+0x166>
 80025fa:	f06f 0302 	mvn.w	r3, #2
 80025fe:	4a19      	ldr	r2, [pc, #100]	@ (8002664 <Reset_Motion_Values+0x1cc>)
 8002600:	6053      	str	r3, [r2, #4]
  m_axes.AXIS_Z = (g_axes.AXIS_Z)%2000 == 0 ? -m_axes.AXIS_Z : 3;
 8002602:	4b17      	ldr	r3, [pc, #92]	@ (8002660 <Reset_Motion_Values+0x1c8>)
 8002604:	689a      	ldr	r2, [r3, #8]
 8002606:	4b15      	ldr	r3, [pc, #84]	@ (800265c <Reset_Motion_Values+0x1c4>)
 8002608:	fb83 1302 	smull	r1, r3, r3, r2
 800260c:	11d9      	asrs	r1, r3, #7
 800260e:	17d3      	asrs	r3, r2, #31
 8002610:	1acb      	subs	r3, r1, r3
 8002612:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8002616:	fb01 f303 	mul.w	r3, r1, r3
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	2b00      	cmp	r3, #0
 800261e:	d103      	bne.n	8002628 <Reset_Motion_Values+0x190>
 8002620:	4b10      	ldr	r3, [pc, #64]	@ (8002664 <Reset_Motion_Values+0x1cc>)
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	425b      	negs	r3, r3
 8002626:	e000      	b.n	800262a <Reset_Motion_Values+0x192>
 8002628:	2303      	movs	r3, #3
 800262a:	4a0e      	ldr	r2, [pc, #56]	@ (8002664 <Reset_Motion_Values+0x1cc>)
 800262c:	6093      	str	r3, [r2, #8]
  q_axes.AXIS_X = -q_axes.AXIS_X;
 800262e:	4b0e      	ldr	r3, [pc, #56]	@ (8002668 <Reset_Motion_Values+0x1d0>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	425b      	negs	r3, r3
 8002634:	4a0c      	ldr	r2, [pc, #48]	@ (8002668 <Reset_Motion_Values+0x1d0>)
 8002636:	6013      	str	r3, [r2, #0]
  q_axes.AXIS_Y = -q_axes.AXIS_Y;
 8002638:	4b0b      	ldr	r3, [pc, #44]	@ (8002668 <Reset_Motion_Values+0x1d0>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	425b      	negs	r3, r3
 800263e:	4a0a      	ldr	r2, [pc, #40]	@ (8002668 <Reset_Motion_Values+0x1d0>)
 8002640:	6053      	str	r3, [r2, #4]
  q_axes.AXIS_Z = -q_axes.AXIS_Z;
 8002642:	4b09      	ldr	r3, [pc, #36]	@ (8002668 <Reset_Motion_Values+0x1d0>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	425b      	negs	r3, r3
 8002648:	4a07      	ldr	r2, [pc, #28]	@ (8002668 <Reset_Motion_Values+0x1d0>)
 800264a:	6093      	str	r3, [r2, #8]
}
 800264c:	bf00      	nop
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	20000404 	.word	0x20000404
 800265c:	10624dd3 	.word	0x10624dd3
 8002660:	20000410 	.word	0x20000410
 8002664:	2000041c 	.word	0x2000041c
 8002668:	20000428 	.word	0x20000428

0800266c <weighted_moving_average>:
// Variables to track threshold exceedance
int threshold_exceeded = 0;
int last_exceeded_threshold = 0;

// Function to compute the weighted moving average
float weighted_moving_average(int16_t* values, int length) {
 800266c:	b480      	push	{r7}
 800266e:	b085      	sub	sp, #20
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
    int sum_weights = 0;
 8002676:	2300      	movs	r3, #0
 8002678:	60fb      	str	r3, [r7, #12]
    int weighted_sum = 0;
 800267a:	2300      	movs	r3, #0
 800267c:	60bb      	str	r3, [r7, #8]

    // Ensure the window size is at least 2, else return the latest value
    if (length < 2) {
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	2b01      	cmp	r3, #1
 8002682:	dc0d      	bgt.n	80026a0 <weighted_moving_average+0x34>
        return values[length - 1];  // Return the most recent value if not enough data
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800268a:	3b01      	subs	r3, #1
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	4413      	add	r3, r2
 8002692:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002696:	ee07 3a90 	vmov	s15, r3
 800269a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800269e:	e022      	b.n	80026e6 <weighted_moving_average+0x7a>
    } else {
        // For the last two values, apply weights 2 for the most recent, 1 for the previous
        sum_weights = 3;  // 2 + 1
 80026a0:	2303      	movs	r3, #3
 80026a2:	60fb      	str	r3, [r7, #12]
        weighted_sum = values[length - 1] * 2 + values[length - 2] * 1;
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80026aa:	3b01      	subs	r3, #1
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	4413      	add	r3, r2
 80026b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026b6:	005a      	lsls	r2, r3, #1
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80026be:	3b02      	subs	r3, #2
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	6879      	ldr	r1, [r7, #4]
 80026c4:	440b      	add	r3, r1
 80026c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026ca:	4413      	add	r3, r2
 80026cc:	60bb      	str	r3, [r7, #8]
    }
    return (float)weighted_sum / sum_weights;
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	ee07 3a90 	vmov	s15, r3
 80026d4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	ee07 3a90 	vmov	s15, r3
 80026de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
}
 80026e6:	eeb0 0a67 	vmov.f32	s0, s15
 80026ea:	3714      	adds	r7, #20
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <check_thresholds_and_send>:

// Function to check the thresholds and send the result over Bluetooth
void check_thresholds_and_send(float value) {
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b08c      	sub	sp, #48	@ 0x30
 80026f8:	af02      	add	r7, sp, #8
 80026fa:	ed87 0a01 	vstr	s0, [r7, #4]
    uint8_t buff = 0;  // Default to idle (0)
 80026fe:	2300      	movs	r3, #0
 8002700:	73fb      	strb	r3, [r7, #15]

    if (!threshold_exceeded) {
 8002702:	4b4b      	ldr	r3, [pc, #300]	@ (8002830 <check_thresholds_and_send+0x13c>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d124      	bne.n	8002754 <check_thresholds_and_send+0x60>
        if (value > POSITIVE_THRESHOLD) {
 800270a:	edd7 7a01 	vldr	s15, [r7, #4]
 800270e:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8002834 <check_thresholds_and_send+0x140>
 8002712:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800271a:	dd08      	ble.n	800272e <check_thresholds_and_send+0x3a>
            threshold_exceeded = 1;
 800271c:	4b44      	ldr	r3, [pc, #272]	@ (8002830 <check_thresholds_and_send+0x13c>)
 800271e:	2201      	movs	r2, #1
 8002720:	601a      	str	r2, [r3, #0]
            last_exceeded_threshold = 1;
 8002722:	4b45      	ldr	r3, [pc, #276]	@ (8002838 <check_thresholds_and_send+0x144>)
 8002724:	2201      	movs	r2, #1
 8002726:	601a      	str	r2, [r3, #0]
            buff = 1;  // Notify 'up' (positive threshold exceeded)
 8002728:	2301      	movs	r3, #1
 800272a:	73fb      	strb	r3, [r7, #15]
 800272c:	e071      	b.n	8002812 <check_thresholds_and_send+0x11e>
        } else if (value < NEGATIVE_THRESHOLD) {
 800272e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002732:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 800283c <check_thresholds_and_send+0x148>
 8002736:	eef4 7ac7 	vcmpe.f32	s15, s14
 800273a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800273e:	d568      	bpl.n	8002812 <check_thresholds_and_send+0x11e>
            threshold_exceeded = 1;
 8002740:	4b3b      	ldr	r3, [pc, #236]	@ (8002830 <check_thresholds_and_send+0x13c>)
 8002742:	2201      	movs	r2, #1
 8002744:	601a      	str	r2, [r3, #0]
            last_exceeded_threshold = -1;
 8002746:	4b3c      	ldr	r3, [pc, #240]	@ (8002838 <check_thresholds_and_send+0x144>)
 8002748:	f04f 32ff 	mov.w	r2, #4294967295
 800274c:	601a      	str	r2, [r3, #0]
            buff = 2;  // Notify 'down' (negative threshold exceeded)
 800274e:	2302      	movs	r3, #2
 8002750:	73fb      	strb	r3, [r7, #15]
 8002752:	e05e      	b.n	8002812 <check_thresholds_and_send+0x11e>
        }
    } else {
        int start = buffer_index - SUB_WINDOW_SIZE;
 8002754:	4b3a      	ldr	r3, [pc, #232]	@ (8002840 <check_thresholds_and_send+0x14c>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	3b02      	subs	r3, #2
 800275a:	627b      	str	r3, [r7, #36]	@ 0x24
        if (start < 0) start += BUFFER_SIZE;
 800275c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800275e:	2b00      	cmp	r3, #0
 8002760:	da02      	bge.n	8002768 <check_thresholds_and_send+0x74>
 8002762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002764:	3340      	adds	r3, #64	@ 0x40
 8002766:	627b      	str	r3, [r7, #36]	@ 0x24
        int count = 0;
 8002768:	2300      	movs	r3, #0
 800276a:	623b      	str	r3, [r7, #32]

        if (last_exceeded_threshold == 1) {
 800276c:	4b32      	ldr	r3, [pc, #200]	@ (8002838 <check_thresholds_and_send+0x144>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2b01      	cmp	r3, #1
 8002772:	d125      	bne.n	80027c0 <check_thresholds_and_send+0xcc>
            // Check if the values are below the positive threshold
            for (int i = 0; i < SUB_WINDOW_SIZE; ++i) {
 8002774:	2300      	movs	r3, #0
 8002776:	61fb      	str	r3, [r7, #28]
 8002778:	e018      	b.n	80027ac <check_thresholds_and_send+0xb8>
                int idx = (start + i) % BUFFER_SIZE;
 800277a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	4413      	add	r3, r2
 8002780:	425a      	negs	r2, r3
 8002782:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002786:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800278a:	bf58      	it	pl
 800278c:	4253      	negpl	r3, r2
 800278e:	613b      	str	r3, [r7, #16]
                if (y_values[idx] <= POSITIVE_THRESHOLD) {
 8002790:	4a2c      	ldr	r2, [pc, #176]	@ (8002844 <check_thresholds_and_send+0x150>)
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002798:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800279c:	4293      	cmp	r3, r2
 800279e:	dc02      	bgt.n	80027a6 <check_thresholds_and_send+0xb2>
                    count++;
 80027a0:	6a3b      	ldr	r3, [r7, #32]
 80027a2:	3301      	adds	r3, #1
 80027a4:	623b      	str	r3, [r7, #32]
            for (int i = 0; i < SUB_WINDOW_SIZE; ++i) {
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	3301      	adds	r3, #1
 80027aa:	61fb      	str	r3, [r7, #28]
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	dde3      	ble.n	800277a <check_thresholds_and_send+0x86>
                }
            }
            if (count == SUB_WINDOW_SIZE) {
 80027b2:	6a3b      	ldr	r3, [r7, #32]
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d12c      	bne.n	8002812 <check_thresholds_and_send+0x11e>
                threshold_exceeded = 0;  // Reset if all recent values are below the threshold
 80027b8:	4b1d      	ldr	r3, [pc, #116]	@ (8002830 <check_thresholds_and_send+0x13c>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	601a      	str	r2, [r3, #0]
 80027be:	e028      	b.n	8002812 <check_thresholds_and_send+0x11e>
            }
        } else if (last_exceeded_threshold == -1) {
 80027c0:	4b1d      	ldr	r3, [pc, #116]	@ (8002838 <check_thresholds_and_send+0x144>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027c8:	d123      	bne.n	8002812 <check_thresholds_and_send+0x11e>
            // Check if the values are above the negative threshold
            for (int i = 0; i < SUB_WINDOW_SIZE; ++i) {
 80027ca:	2300      	movs	r3, #0
 80027cc:	61bb      	str	r3, [r7, #24]
 80027ce:	e017      	b.n	8002800 <check_thresholds_and_send+0x10c>
                int idx = (start + i) % BUFFER_SIZE;
 80027d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	4413      	add	r3, r2
 80027d6:	425a      	negs	r2, r3
 80027d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80027dc:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80027e0:	bf58      	it	pl
 80027e2:	4253      	negpl	r3, r2
 80027e4:	617b      	str	r3, [r7, #20]
                if (y_values[idx] >= NEGATIVE_THRESHOLD) {
 80027e6:	4a17      	ldr	r2, [pc, #92]	@ (8002844 <check_thresholds_and_send+0x150>)
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80027ee:	4a16      	ldr	r2, [pc, #88]	@ (8002848 <check_thresholds_and_send+0x154>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	db02      	blt.n	80027fa <check_thresholds_and_send+0x106>
                    count++;
 80027f4:	6a3b      	ldr	r3, [r7, #32]
 80027f6:	3301      	adds	r3, #1
 80027f8:	623b      	str	r3, [r7, #32]
            for (int i = 0; i < SUB_WINDOW_SIZE; ++i) {
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	3301      	adds	r3, #1
 80027fe:	61bb      	str	r3, [r7, #24]
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	2b01      	cmp	r3, #1
 8002804:	dde4      	ble.n	80027d0 <check_thresholds_and_send+0xdc>
                }
            }
            if (count == SUB_WINDOW_SIZE) {
 8002806:	6a3b      	ldr	r3, [r7, #32]
 8002808:	2b02      	cmp	r3, #2
 800280a:	d102      	bne.n	8002812 <check_thresholds_and_send+0x11e>
                threshold_exceeded = 0;  // Reset if all recent values are above the threshold
 800280c:	4b08      	ldr	r3, [pc, #32]	@ (8002830 <check_thresholds_and_send+0x13c>)
 800280e:	2200      	movs	r2, #0
 8002810:	601a      	str	r2, [r3, #0]
            }
        }
    }

    // Send the determined value (0 for idle, 1 for up, -1 for down)
    aci_gatt_update_char_value(HWServW2STHandle, AccDataCharHandle, 0, 1, &buff);
 8002812:	4b0e      	ldr	r3, [pc, #56]	@ (800284c <check_thresholds_and_send+0x158>)
 8002814:	8818      	ldrh	r0, [r3, #0]
 8002816:	4b0e      	ldr	r3, [pc, #56]	@ (8002850 <check_thresholds_and_send+0x15c>)
 8002818:	8819      	ldrh	r1, [r3, #0]
 800281a:	f107 030f 	add.w	r3, r7, #15
 800281e:	9300      	str	r3, [sp, #0]
 8002820:	2301      	movs	r3, #1
 8002822:	2200      	movs	r2, #0
 8002824:	f007 fd06 	bl	800a234 <aci_gatt_update_char_value>
}
 8002828:	bf00      	nop
 800282a:	3728      	adds	r7, #40	@ 0x28
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	200003f4 	.word	0x200003f4
 8002834:	446d8000 	.word	0x446d8000
 8002838:	200003f8 	.word	0x200003f8
 800283c:	c4098000 	.word	0xc4098000
 8002840:	200003f0 	.word	0x200003f0
 8002844:	200002f0 	.word	0x200002f0
 8002848:	fffffdda 	.word	0xfffffdda
 800284c:	20000244 	.word	0x20000244
 8002850:	2000024a 	.word	0x2000024a

08002854 <Add_HWServW2ST_Service>:
 * @brief  Add the 'HW' service (and the Environmental and AccGyr characteristics).
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_HWServW2ST_Service(void)
{
 8002854:	b590      	push	{r4, r7, lr}
 8002856:	b08d      	sub	sp, #52	@ 0x34
 8002858:	af06      	add	r7, sp, #24
  tBleStatus ret;
  uint8_t uuid[16];

  /* Add_HWServW2ST_Service */
  COPY_HW_SENS_W2ST_SERVICE_UUID(uuid);
 800285a:	231b      	movs	r3, #27
 800285c:	713b      	strb	r3, [r7, #4]
 800285e:	23c5      	movs	r3, #197	@ 0xc5
 8002860:	717b      	strb	r3, [r7, #5]
 8002862:	23d5      	movs	r3, #213	@ 0xd5
 8002864:	71bb      	strb	r3, [r7, #6]
 8002866:	23a5      	movs	r3, #165	@ 0xa5
 8002868:	71fb      	strb	r3, [r7, #7]
 800286a:	2302      	movs	r3, #2
 800286c:	723b      	strb	r3, [r7, #8]
 800286e:	2300      	movs	r3, #0
 8002870:	727b      	strb	r3, [r7, #9]
 8002872:	23b4      	movs	r3, #180	@ 0xb4
 8002874:	72bb      	strb	r3, [r7, #10]
 8002876:	239a      	movs	r3, #154	@ 0x9a
 8002878:	72fb      	strb	r3, [r7, #11]
 800287a:	23e1      	movs	r3, #225	@ 0xe1
 800287c:	733b      	strb	r3, [r7, #12]
 800287e:	2311      	movs	r3, #17
 8002880:	737b      	strb	r3, [r7, #13]
 8002882:	2301      	movs	r3, #1
 8002884:	73bb      	strb	r3, [r7, #14]
 8002886:	2300      	movs	r3, #0
 8002888:	73fb      	strb	r3, [r7, #15]
 800288a:	2300      	movs	r3, #0
 800288c:	743b      	strb	r3, [r7, #16]
 800288e:	2300      	movs	r3, #0
 8002890:	747b      	strb	r3, [r7, #17]
 8002892:	2300      	movs	r3, #0
 8002894:	74bb      	strb	r3, [r7, #18]
 8002896:	2300      	movs	r3, #0
 8002898:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 800289a:	4b4d      	ldr	r3, [pc, #308]	@ (80029d0 <Add_HWServW2ST_Service+0x17c>)
 800289c:	461c      	mov	r4, r3
 800289e:	1d3b      	adds	r3, r7, #4
 80028a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid.Service_UUID_128, PRIMARY_SERVICE,
 80028a6:	4b4b      	ldr	r3, [pc, #300]	@ (80029d4 <Add_HWServW2ST_Service+0x180>)
 80028a8:	9300      	str	r3, [sp, #0]
 80028aa:	2310      	movs	r3, #16
 80028ac:	2201      	movs	r2, #1
 80028ae:	4948      	ldr	r1, [pc, #288]	@ (80029d0 <Add_HWServW2ST_Service+0x17c>)
 80028b0:	2002      	movs	r0, #2
 80028b2:	f007 fb6b 	bl	8009f8c <aci_gatt_add_serv>
 80028b6:	4603      	mov	r3, r0
 80028b8:	75fb      	strb	r3, [r7, #23]
                          1+3*5, &HWServW2STHandle);
  if (ret != BLE_STATUS_SUCCESS)
 80028ba:	7dfb      	ldrb	r3, [r7, #23]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <Add_HWServW2ST_Service+0x70>
    return BLE_STATUS_ERROR;
 80028c0:	2347      	movs	r3, #71	@ 0x47
 80028c2:	e080      	b.n	80029c6 <Add_HWServW2ST_Service+0x172>

  /* Fill the Environmental BLE Characteristc */
  COPY_ENVIRONMENTAL_W2ST_CHAR_UUID(uuid);
 80028c4:	231b      	movs	r3, #27
 80028c6:	713b      	strb	r3, [r7, #4]
 80028c8:	23c5      	movs	r3, #197	@ 0xc5
 80028ca:	717b      	strb	r3, [r7, #5]
 80028cc:	23d5      	movs	r3, #213	@ 0xd5
 80028ce:	71bb      	strb	r3, [r7, #6]
 80028d0:	23a5      	movs	r3, #165	@ 0xa5
 80028d2:	71fb      	strb	r3, [r7, #7]
 80028d4:	2302      	movs	r3, #2
 80028d6:	723b      	strb	r3, [r7, #8]
 80028d8:	2300      	movs	r3, #0
 80028da:	727b      	strb	r3, [r7, #9]
 80028dc:	2336      	movs	r3, #54	@ 0x36
 80028de:	72bb      	strb	r3, [r7, #10]
 80028e0:	23ac      	movs	r3, #172	@ 0xac
 80028e2:	72fb      	strb	r3, [r7, #11]
 80028e4:	23e1      	movs	r3, #225	@ 0xe1
 80028e6:	733b      	strb	r3, [r7, #12]
 80028e8:	2311      	movs	r3, #17
 80028ea:	737b      	strb	r3, [r7, #13]
 80028ec:	2301      	movs	r3, #1
 80028ee:	73bb      	strb	r3, [r7, #14]
 80028f0:	2300      	movs	r3, #0
 80028f2:	73fb      	strb	r3, [r7, #15]
 80028f4:	2300      	movs	r3, #0
 80028f6:	743b      	strb	r3, [r7, #16]
 80028f8:	2300      	movs	r3, #0
 80028fa:	747b      	strb	r3, [r7, #17]
 80028fc:	2300      	movs	r3, #0
 80028fe:	74bb      	strb	r3, [r7, #18]
 8002900:	2300      	movs	r3, #0
 8002902:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8002904:	4b34      	ldr	r3, [pc, #208]	@ (80029d8 <Add_HWServW2ST_Service+0x184>)
 8002906:	461c      	mov	r4, r3
 8002908:	1d3b      	adds	r3, r7, #4
 800290a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800290c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128,
 8002910:	4b30      	ldr	r3, [pc, #192]	@ (80029d4 <Add_HWServW2ST_Service+0x180>)
 8002912:	8818      	ldrh	r0, [r3, #0]
 8002914:	4b31      	ldr	r3, [pc, #196]	@ (80029dc <Add_HWServW2ST_Service+0x188>)
 8002916:	9305      	str	r3, [sp, #20]
 8002918:	2300      	movs	r3, #0
 800291a:	9304      	str	r3, [sp, #16]
 800291c:	2310      	movs	r3, #16
 800291e:	9303      	str	r3, [sp, #12]
 8002920:	2304      	movs	r3, #4
 8002922:	9302      	str	r3, [sp, #8]
 8002924:	2300      	movs	r3, #0
 8002926:	9301      	str	r3, [sp, #4]
 8002928:	2312      	movs	r3, #18
 800292a:	9300      	str	r3, [sp, #0]
 800292c:	2306      	movs	r3, #6
 800292e:	4a2a      	ldr	r2, [pc, #168]	@ (80029d8 <Add_HWServW2ST_Service+0x184>)
 8002930:	2102      	movs	r1, #2
 8002932:	f007 fbb4 	bl	800a09e <aci_gatt_add_char>
 8002936:	4603      	mov	r3, r0
 8002938:	75fb      	strb	r3, [r7, #23]
                           6,
                           CHAR_PROP_NOTIFY|CHAR_PROP_READ,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &AccDataCharHandle);
  if (ret != BLE_STATUS_SUCCESS)
 800293a:	7dfb      	ldrb	r3, [r7, #23]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d001      	beq.n	8002944 <Add_HWServW2ST_Service+0xf0>
    return BLE_STATUS_ERROR;
 8002940:	2347      	movs	r3, #71	@ 0x47
 8002942:	e040      	b.n	80029c6 <Add_HWServW2ST_Service+0x172>

  /* Fill the AccGyroMag BLE Characteristc */
  COPY_ACC_GYRO_MAG_W2ST_CHAR_UUID(uuid);
 8002944:	231b      	movs	r3, #27
 8002946:	713b      	strb	r3, [r7, #4]
 8002948:	23c5      	movs	r3, #197	@ 0xc5
 800294a:	717b      	strb	r3, [r7, #5]
 800294c:	23d5      	movs	r3, #213	@ 0xd5
 800294e:	71bb      	strb	r3, [r7, #6]
 8002950:	23a5      	movs	r3, #165	@ 0xa5
 8002952:	71fb      	strb	r3, [r7, #7]
 8002954:	2302      	movs	r3, #2
 8002956:	723b      	strb	r3, [r7, #8]
 8002958:	2300      	movs	r3, #0
 800295a:	727b      	strb	r3, [r7, #9]
 800295c:	2336      	movs	r3, #54	@ 0x36
 800295e:	72bb      	strb	r3, [r7, #10]
 8002960:	23ac      	movs	r3, #172	@ 0xac
 8002962:	72fb      	strb	r3, [r7, #11]
 8002964:	23e1      	movs	r3, #225	@ 0xe1
 8002966:	733b      	strb	r3, [r7, #12]
 8002968:	2311      	movs	r3, #17
 800296a:	737b      	strb	r3, [r7, #13]
 800296c:	2301      	movs	r3, #1
 800296e:	73bb      	strb	r3, [r7, #14]
 8002970:	2300      	movs	r3, #0
 8002972:	73fb      	strb	r3, [r7, #15]
 8002974:	2300      	movs	r3, #0
 8002976:	743b      	strb	r3, [r7, #16]
 8002978:	2300      	movs	r3, #0
 800297a:	747b      	strb	r3, [r7, #17]
 800297c:	23e0      	movs	r3, #224	@ 0xe0
 800297e:	74bb      	strb	r3, [r7, #18]
 8002980:	2300      	movs	r3, #0
 8002982:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8002984:	4b14      	ldr	r3, [pc, #80]	@ (80029d8 <Add_HWServW2ST_Service+0x184>)
 8002986:	461c      	mov	r4, r3
 8002988:	1d3b      	adds	r3, r7, #4
 800298a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800298c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128,
 8002990:	4b10      	ldr	r3, [pc, #64]	@ (80029d4 <Add_HWServW2ST_Service+0x180>)
 8002992:	8818      	ldrh	r0, [r3, #0]
 8002994:	4b12      	ldr	r3, [pc, #72]	@ (80029e0 <Add_HWServW2ST_Service+0x18c>)
 8002996:	9305      	str	r3, [sp, #20]
 8002998:	2300      	movs	r3, #0
 800299a:	9304      	str	r3, [sp, #16]
 800299c:	2310      	movs	r3, #16
 800299e:	9303      	str	r3, [sp, #12]
 80029a0:	2302      	movs	r3, #2
 80029a2:	9302      	str	r3, [sp, #8]
 80029a4:	2300      	movs	r3, #0
 80029a6:	9301      	str	r3, [sp, #4]
 80029a8:	2304      	movs	r3, #4
 80029aa:	9300      	str	r3, [sp, #0]
 80029ac:	2314      	movs	r3, #20
 80029ae:	4a0a      	ldr	r2, [pc, #40]	@ (80029d8 <Add_HWServW2ST_Service+0x184>)
 80029b0:	2102      	movs	r1, #2
 80029b2:	f007 fb74 	bl	800a09e <aci_gatt_add_char>
 80029b6:	4603      	mov	r3, r0
 80029b8:	75fb      	strb	r3, [r7, #23]
                           2+3*3*2,
						   CHAR_PROP_WRITE_WITHOUT_RESP,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_WRITE_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &AccGyroMagCharHandle);
  if (ret != BLE_STATUS_SUCCESS)
 80029ba:	7dfb      	ldrb	r3, [r7, #23]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d001      	beq.n	80029c4 <Add_HWServW2ST_Service+0x170>
    return BLE_STATUS_ERROR;
 80029c0:	2347      	movs	r3, #71	@ 0x47
 80029c2:	e000      	b.n	80029c6 <Add_HWServW2ST_Service+0x172>

  return BLE_STATUS_SUCCESS;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	371c      	adds	r7, #28
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd90      	pop	{r4, r7, pc}
 80029ce:	bf00      	nop
 80029d0:	20000250 	.word	0x20000250
 80029d4:	20000244 	.word	0x20000244
 80029d8:	20000260 	.word	0x20000260
 80029dc:	2000024a 	.word	0x2000024a
 80029e0:	20000248 	.word	0x20000248

080029e4 <Add_SWServW2ST_Service>:
 * @brief  Add the SW Feature service using a vendor specific profile
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_SWServW2ST_Service(void)
{
 80029e4:	b590      	push	{r4, r7, lr}
 80029e6:	b08d      	sub	sp, #52	@ 0x34
 80029e8:	af06      	add	r7, sp, #24
  tBleStatus ret;
  int32_t NumberOfRecords=1;
 80029ea:	2301      	movs	r3, #1
 80029ec:	617b      	str	r3, [r7, #20]
  uint8_t uuid[16];

  COPY_SW_SENS_W2ST_SERVICE_UUID(uuid);
 80029ee:	231b      	movs	r3, #27
 80029f0:	703b      	strb	r3, [r7, #0]
 80029f2:	23c5      	movs	r3, #197	@ 0xc5
 80029f4:	707b      	strb	r3, [r7, #1]
 80029f6:	23d5      	movs	r3, #213	@ 0xd5
 80029f8:	70bb      	strb	r3, [r7, #2]
 80029fa:	23a5      	movs	r3, #165	@ 0xa5
 80029fc:	70fb      	strb	r3, [r7, #3]
 80029fe:	2302      	movs	r3, #2
 8002a00:	713b      	strb	r3, [r7, #4]
 8002a02:	2300      	movs	r3, #0
 8002a04:	717b      	strb	r3, [r7, #5]
 8002a06:	23b4      	movs	r3, #180	@ 0xb4
 8002a08:	71bb      	strb	r3, [r7, #6]
 8002a0a:	239a      	movs	r3, #154	@ 0x9a
 8002a0c:	71fb      	strb	r3, [r7, #7]
 8002a0e:	23e1      	movs	r3, #225	@ 0xe1
 8002a10:	723b      	strb	r3, [r7, #8]
 8002a12:	2311      	movs	r3, #17
 8002a14:	727b      	strb	r3, [r7, #9]
 8002a16:	2302      	movs	r3, #2
 8002a18:	72bb      	strb	r3, [r7, #10]
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	72fb      	strb	r3, [r7, #11]
 8002a1e:	2300      	movs	r3, #0
 8002a20:	733b      	strb	r3, [r7, #12]
 8002a22:	2300      	movs	r3, #0
 8002a24:	737b      	strb	r3, [r7, #13]
 8002a26:	2300      	movs	r3, #0
 8002a28:	73bb      	strb	r3, [r7, #14]
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	73fb      	strb	r3, [r7, #15]
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 8002a2e:	4b31      	ldr	r3, [pc, #196]	@ (8002af4 <Add_SWServW2ST_Service+0x110>)
 8002a30:	461c      	mov	r4, r3
 8002a32:	463b      	mov	r3, r7
 8002a34:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a36:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid.Service_UUID_128, PRIMARY_SERVICE,
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	461a      	mov	r2, r3
 8002a40:	0052      	lsls	r2, r2, #1
 8002a42:	4413      	add	r3, r2
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	3301      	adds	r3, #1
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	4a2b      	ldr	r2, [pc, #172]	@ (8002af8 <Add_SWServW2ST_Service+0x114>)
 8002a4c:	9200      	str	r2, [sp, #0]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	4928      	ldr	r1, [pc, #160]	@ (8002af4 <Add_SWServW2ST_Service+0x110>)
 8002a52:	2002      	movs	r0, #2
 8002a54:	f007 fa9a 	bl	8009f8c <aci_gatt_add_serv>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	74fb      	strb	r3, [r7, #19]
                          1+3*NumberOfRecords, &SWServW2STHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 8002a5c:	7cfb      	ldrb	r3, [r7, #19]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d13f      	bne.n	8002ae2 <Add_SWServW2ST_Service+0xfe>
    goto fail;
  }

  COPY_QUATERNIONS_W2ST_CHAR_UUID(uuid);
 8002a62:	231b      	movs	r3, #27
 8002a64:	703b      	strb	r3, [r7, #0]
 8002a66:	23c5      	movs	r3, #197	@ 0xc5
 8002a68:	707b      	strb	r3, [r7, #1]
 8002a6a:	23d5      	movs	r3, #213	@ 0xd5
 8002a6c:	70bb      	strb	r3, [r7, #2]
 8002a6e:	23a5      	movs	r3, #165	@ 0xa5
 8002a70:	70fb      	strb	r3, [r7, #3]
 8002a72:	2302      	movs	r3, #2
 8002a74:	713b      	strb	r3, [r7, #4]
 8002a76:	2300      	movs	r3, #0
 8002a78:	717b      	strb	r3, [r7, #5]
 8002a7a:	2336      	movs	r3, #54	@ 0x36
 8002a7c:	71bb      	strb	r3, [r7, #6]
 8002a7e:	23ac      	movs	r3, #172	@ 0xac
 8002a80:	71fb      	strb	r3, [r7, #7]
 8002a82:	23e1      	movs	r3, #225	@ 0xe1
 8002a84:	723b      	strb	r3, [r7, #8]
 8002a86:	2311      	movs	r3, #17
 8002a88:	727b      	strb	r3, [r7, #9]
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	72bb      	strb	r3, [r7, #10]
 8002a8e:	2300      	movs	r3, #0
 8002a90:	72fb      	strb	r3, [r7, #11]
 8002a92:	2300      	movs	r3, #0
 8002a94:	733b      	strb	r3, [r7, #12]
 8002a96:	2301      	movs	r3, #1
 8002a98:	737b      	strb	r3, [r7, #13]
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	73bb      	strb	r3, [r7, #14]
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	73fb      	strb	r3, [r7, #15]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8002aa2:	4b16      	ldr	r3, [pc, #88]	@ (8002afc <Add_SWServW2ST_Service+0x118>)
 8002aa4:	461c      	mov	r4, r3
 8002aa6:	463b      	mov	r3, r7
 8002aa8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002aaa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(SWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128,
 8002aae:	4b12      	ldr	r3, [pc, #72]	@ (8002af8 <Add_SWServW2ST_Service+0x114>)
 8002ab0:	8818      	ldrh	r0, [r3, #0]
 8002ab2:	4b13      	ldr	r3, [pc, #76]	@ (8002b00 <Add_SWServW2ST_Service+0x11c>)
 8002ab4:	9305      	str	r3, [sp, #20]
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	9304      	str	r3, [sp, #16]
 8002aba:	2310      	movs	r3, #16
 8002abc:	9303      	str	r3, [sp, #12]
 8002abe:	2304      	movs	r3, #4
 8002ac0:	9302      	str	r3, [sp, #8]
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	9301      	str	r3, [sp, #4]
 8002ac6:	2310      	movs	r3, #16
 8002ac8:	9300      	str	r3, [sp, #0]
 8002aca:	2308      	movs	r3, #8
 8002acc:	4a0b      	ldr	r2, [pc, #44]	@ (8002afc <Add_SWServW2ST_Service+0x118>)
 8002ace:	2102      	movs	r1, #2
 8002ad0:	f007 fae5 	bl	800a09e <aci_gatt_add_char>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	74fb      	strb	r3, [r7, #19]
                           CHAR_PROP_NOTIFY,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &QuaternionsCharHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 8002ad8:	7cfb      	ldrb	r3, [r7, #19]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d103      	bne.n	8002ae6 <Add_SWServW2ST_Service+0x102>
    goto fail;
  }

  return BLE_STATUS_SUCCESS;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	e003      	b.n	8002aea <Add_SWServW2ST_Service+0x106>
    goto fail;
 8002ae2:	bf00      	nop
 8002ae4:	e000      	b.n	8002ae8 <Add_SWServW2ST_Service+0x104>
    goto fail;
 8002ae6:	bf00      	nop

fail:
  return BLE_STATUS_ERROR;
 8002ae8:	2347      	movs	r3, #71	@ 0x47
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	371c      	adds	r7, #28
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd90      	pop	{r4, r7, pc}
 8002af2:	bf00      	nop
 8002af4:	20000250 	.word	0x20000250
 8002af8:	2000024c 	.word	0x2000024c
 8002afc:	20000260 	.word	0x20000260
 8002b00:	2000024e 	.word	0x2000024e

08002b04 <Acc_Update>:
 * @brief  Update acceleration characteristic value
 * @param  AxesRaw_t structure containing acceleration value in mg.
 * @retval tBleStatus Status
 */
tBleStatus Acc_Update(AxesRaw_t *x_axes, AxesRaw_t *g_axes, AxesRaw_t *m_axes)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b08c      	sub	sp, #48	@ 0x30
 8002b08:	af02      	add	r7, sp, #8
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	607a      	str	r2, [r7, #4]
  uint8_t buff[2+2*3*3];
  tBleStatus ret;

  HOST_TO_LE_16(buff,(HAL_GetTick()>>3));
 8002b10:	f002 fa68 	bl	8004fe4 <HAL_GetTick>
 8002b14:	4603      	mov	r3, r0
 8002b16:	08db      	lsrs	r3, r3, #3
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	743b      	strb	r3, [r7, #16]
 8002b1c:	f002 fa62 	bl	8004fe4 <HAL_GetTick>
 8002b20:	4603      	mov	r3, r0
 8002b22:	0adb      	lsrs	r3, r3, #11
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	747b      	strb	r3, [r7, #17]

  HOST_TO_LE_16(buff+2,-x_axes->AXIS_Y);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	425b      	negs	r3, r3
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	74bb      	strb	r3, [r7, #18]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	425b      	negs	r3, r3
 8002b3a:	121b      	asrs	r3, r3, #8
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	74fb      	strb	r3, [r7, #19]
  HOST_TO_LE_16(buff+4, x_axes->AXIS_X);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	753b      	strb	r3, [r7, #20]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	121b      	asrs	r3, r3, #8
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	757b      	strb	r3, [r7, #21]
  HOST_TO_LE_16(buff+6,-x_axes->AXIS_Z);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	425b      	negs	r3, r3
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	75bb      	strb	r3, [r7, #22]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	425b      	negs	r3, r3
 8002b64:	121b      	asrs	r3, r3, #8
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	75fb      	strb	r3, [r7, #23]

  HOST_TO_LE_16(buff+8,g_axes->AXIS_Y);
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	763b      	strb	r3, [r7, #24]
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	121b      	asrs	r3, r3, #8
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	767b      	strb	r3, [r7, #25]
  HOST_TO_LE_16(buff+10,g_axes->AXIS_X);
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	76bb      	strb	r3, [r7, #26]
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	121b      	asrs	r3, r3, #8
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	76fb      	strb	r3, [r7, #27]
  HOST_TO_LE_16(buff+12,g_axes->AXIS_Z);
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	773b      	strb	r3, [r7, #28]
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	121b      	asrs	r3, r3, #8
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	777b      	strb	r3, [r7, #29]

  HOST_TO_LE_16(buff+14,m_axes->AXIS_Y);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	77bb      	strb	r3, [r7, #30]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	121b      	asrs	r3, r3, #8
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	77fb      	strb	r3, [r7, #31]
  HOST_TO_LE_16(buff+16,m_axes->AXIS_X);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	f887 3020 	strb.w	r3, [r7, #32]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	121b      	asrs	r3, r3, #8
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  HOST_TO_LE_16(buff+18,m_axes->AXIS_Z);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	121b      	asrs	r3, r3, #8
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  ret = aci_gatt_update_char_value(HWServW2STHandle, AccGyroMagCharHandle,
 8002bde:	4b0f      	ldr	r3, [pc, #60]	@ (8002c1c <Acc_Update+0x118>)
 8002be0:	8818      	ldrh	r0, [r3, #0]
 8002be2:	4b0f      	ldr	r3, [pc, #60]	@ (8002c20 <Acc_Update+0x11c>)
 8002be4:	8819      	ldrh	r1, [r3, #0]
 8002be6:	f107 0310 	add.w	r3, r7, #16
 8002bea:	9300      	str	r3, [sp, #0]
 8002bec:	2314      	movs	r3, #20
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f007 fb20 	bl	800a234 <aci_gatt_update_char_value>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				   0, 2+2*3*3, buff);
  if (ret != BLE_STATUS_SUCCESS){
 8002bfa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d007      	beq.n	8002c12 <Acc_Update+0x10e>
    PRINTF("Error while updating Acceleration characteristic: 0x%02X\n",ret) ;
 8002c02:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002c06:	4619      	mov	r1, r3
 8002c08:	4806      	ldr	r0, [pc, #24]	@ (8002c24 <Acc_Update+0x120>)
 8002c0a:	f00b f895 	bl	800dd38 <iprintf>
    return BLE_STATUS_ERROR ;
 8002c0e:	2347      	movs	r3, #71	@ 0x47
 8002c10:	e000      	b.n	8002c14 <Acc_Update+0x110>
  }

  return BLE_STATUS_SUCCESS;
 8002c12:	2300      	movs	r3, #0
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3728      	adds	r7, #40	@ 0x28
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	20000244 	.word	0x20000244
 8002c20:	20000248 	.word	0x20000248
 8002c24:	08011824 	.word	0x08011824

08002c28 <Sample_rate_Update>:

tBleStatus Sample_rate_Update(uint8_t data)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	4603      	mov	r3, r0
 8002c30:	71fb      	strb	r3, [r7, #7]
	sample_rate = data;
 8002c32:	4a05      	ldr	r2, [pc, #20]	@ (8002c48 <Sample_rate_Update+0x20>)
 8002c34:	79fb      	ldrb	r3, [r7, #7]
 8002c36:	7013      	strb	r3, [r2, #0]
}
 8002c38:	bf00      	nop
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	20000001 	.word	0x20000001

08002c4c <ACC_DATA_Update>:


tBleStatus ACC_DATA_Update(int d)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b088      	sub	sp, #32
 8002c50:	af02      	add	r7, sp, #8
 8002c52:	6078      	str	r0, [r7, #4]
	if(d == 1){
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d110      	bne.n	8002c7c <ACC_DATA_Update+0x30>
		uint8_t buff = 3;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	74fb      	strb	r3, [r7, #19]
		printf("button\n");
 8002c5e:	4830      	ldr	r0, [pc, #192]	@ (8002d20 <ACC_DATA_Update+0xd4>)
 8002c60:	f00b f8d2 	bl	800de08 <puts>
	    aci_gatt_update_char_value(HWServW2STHandle, AccDataCharHandle, 0, 1, &buff);
 8002c64:	4b2f      	ldr	r3, [pc, #188]	@ (8002d24 <ACC_DATA_Update+0xd8>)
 8002c66:	8818      	ldrh	r0, [r3, #0]
 8002c68:	4b2f      	ldr	r3, [pc, #188]	@ (8002d28 <ACC_DATA_Update+0xdc>)
 8002c6a:	8819      	ldrh	r1, [r3, #0]
 8002c6c:	f107 0313 	add.w	r3, r7, #19
 8002c70:	9300      	str	r3, [sp, #0]
 8002c72:	2301      	movs	r3, #1
 8002c74:	2200      	movs	r2, #0
 8002c76:	f007 fadd 	bl	800a234 <aci_gatt_update_char_value>
 8002c7a:	e04d      	b.n	8002d18 <ACC_DATA_Update+0xcc>
	}

	else if(d == 2){
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d110      	bne.n	8002ca4 <ACC_DATA_Update+0x58>
		uint8_t buff = 4;
 8002c82:	2304      	movs	r3, #4
 8002c84:	74bb      	strb	r3, [r7, #18]
		printf("button\n");
 8002c86:	4826      	ldr	r0, [pc, #152]	@ (8002d20 <ACC_DATA_Update+0xd4>)
 8002c88:	f00b f8be 	bl	800de08 <puts>
		aci_gatt_update_char_value(HWServW2STHandle, AccDataCharHandle, 0, 1, &buff);
 8002c8c:	4b25      	ldr	r3, [pc, #148]	@ (8002d24 <ACC_DATA_Update+0xd8>)
 8002c8e:	8818      	ldrh	r0, [r3, #0]
 8002c90:	4b25      	ldr	r3, [pc, #148]	@ (8002d28 <ACC_DATA_Update+0xdc>)
 8002c92:	8819      	ldrh	r1, [r3, #0]
 8002c94:	f107 0312 	add.w	r3, r7, #18
 8002c98:	9300      	str	r3, [sp, #0]
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f007 fac9 	bl	800a234 <aci_gatt_update_char_value>
 8002ca2:	e039      	b.n	8002d18 <ACC_DATA_Update+0xcc>
	}

	else{
		int16_t pDataXYZ[3] = {0};
 8002ca4:	f107 030c 	add.w	r3, r7, #12
 8002ca8:	2200      	movs	r2, #0
 8002caa:	601a      	str	r2, [r3, #0]
 8002cac:	809a      	strh	r2, [r3, #4]
		BSP_ACCELERO_AccGetXYZ(pDataXYZ);
 8002cae:	f107 030c 	add.w	r3, r7, #12
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f002 f800 	bl	8004cb8 <BSP_ACCELERO_AccGetXYZ>

		// Store the new values in the buffers
		x_values[buffer_index] = pDataXYZ[0];
 8002cb8:	4b1c      	ldr	r3, [pc, #112]	@ (8002d2c <ACC_DATA_Update+0xe0>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8002cc0:	4a1b      	ldr	r2, [pc, #108]	@ (8002d30 <ACC_DATA_Update+0xe4>)
 8002cc2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		y_values[buffer_index] = pDataXYZ[1];
 8002cc6:	4b19      	ldr	r3, [pc, #100]	@ (8002d2c <ACC_DATA_Update+0xe0>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8002cce:	4a19      	ldr	r2, [pc, #100]	@ (8002d34 <ACC_DATA_Update+0xe8>)
 8002cd0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		z_values[buffer_index] = pDataXYZ[2];
 8002cd4:	4b15      	ldr	r3, [pc, #84]	@ (8002d2c <ACC_DATA_Update+0xe0>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 8002cdc:	4a16      	ldr	r2, [pc, #88]	@ (8002d38 <ACC_DATA_Update+0xec>)
 8002cde:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		/*char buffer[1000];
		snprintf(buffer, sizeof(buffer), "X: %d Y: %d Z: %d\n", pDataXYZ[0], pDataXYZ[1], pDataXYZ[2]);
		printf("sent: %s", buffer);*/

		// Compute the weighted moving average for the y values
		float processed_y = weighted_moving_average(y_values, buffer_index + 1);
 8002ce2:	4b12      	ldr	r3, [pc, #72]	@ (8002d2c <ACC_DATA_Update+0xe0>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	4619      	mov	r1, r3
 8002cea:	4812      	ldr	r0, [pc, #72]	@ (8002d34 <ACC_DATA_Update+0xe8>)
 8002cec:	f7ff fcbe 	bl	800266c <weighted_moving_average>
 8002cf0:	ed87 0a05 	vstr	s0, [r7, #20]

		// Check the thresholds and send the result over Bluetooth
		check_thresholds_and_send(processed_y);
 8002cf4:	ed97 0a05 	vldr	s0, [r7, #20]
 8002cf8:	f7ff fcfc 	bl	80026f4 <check_thresholds_and_send>

		// Update the buffer index
		buffer_index = (buffer_index + 1) % BUFFER_SIZE;
 8002cfc:	4b0b      	ldr	r3, [pc, #44]	@ (8002d2c <ACC_DATA_Update+0xe0>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	3301      	adds	r3, #1
 8002d02:	425a      	negs	r2, r3
 8002d04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d08:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8002d0c:	bf58      	it	pl
 8002d0e:	4253      	negpl	r3, r2
 8002d10:	4a06      	ldr	r2, [pc, #24]	@ (8002d2c <ACC_DATA_Update+0xe0>)
 8002d12:	6013      	str	r3, [r2, #0]

		return BLE_STATUS_SUCCESS;
 8002d14:	2300      	movs	r3, #0
 8002d16:	e7ff      	b.n	8002d18 <ACC_DATA_Update+0xcc>
	  /*printf("%d", bufferx[i]);
	  printf(",");*/
  //}
  //printf("\n");

}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3718      	adds	r7, #24
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	08011860 	.word	0x08011860
 8002d24:	20000244 	.word	0x20000244
 8002d28:	2000024a 	.word	0x2000024a
 8002d2c:	200003f0 	.word	0x200003f0
 8002d30:	20000270 	.word	0x20000270
 8002d34:	200002f0 	.word	0x200002f0
 8002d38:	20000370 	.word	0x20000370

08002d3c <Quat_Update>:
 * @brief  Update quaternions characteristic value
 * @param  SensorAxes_t *data Structure containing the quaterions
 * @retval tBleStatus      Status
 */
tBleStatus Quat_Update(AxesRaw_t *data)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b088      	sub	sp, #32
 8002d40:	af02      	add	r7, sp, #8
 8002d42:	6078      	str	r0, [r7, #4]
  tBleStatus ret;
  uint8_t buff[2+6*SEND_N_QUATERNIONS];

  HOST_TO_LE_16(buff,(HAL_GetTick()>>3));
 8002d44:	f002 f94e 	bl	8004fe4 <HAL_GetTick>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	08db      	lsrs	r3, r3, #3
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	733b      	strb	r3, [r7, #12]
 8002d50:	f002 f948 	bl	8004fe4 <HAL_GetTick>
 8002d54:	4603      	mov	r3, r0
 8002d56:	0adb      	lsrs	r3, r3, #11
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	737b      	strb	r3, [r7, #13]

#if SEND_N_QUATERNIONS == 1
  HOST_TO_LE_16(buff+2,data[0].AXIS_X);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	73bb      	strb	r3, [r7, #14]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	121b      	asrs	r3, r3, #8
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	73fb      	strb	r3, [r7, #15]
  HOST_TO_LE_16(buff+4,data[0].AXIS_Y);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	743b      	strb	r3, [r7, #16]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	121b      	asrs	r3, r3, #8
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	747b      	strb	r3, [r7, #17]
  HOST_TO_LE_16(buff+6,data[0].AXIS_Z);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	74bb      	strb	r3, [r7, #18]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	121b      	asrs	r3, r3, #8
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	74fb      	strb	r3, [r7, #19]
  HOST_TO_LE_16(buff+18,data[2].AXIS_Z);
#else
#error SEND_N_QUATERNIONS could be only 1,2,3
#endif

  ret = aci_gatt_update_char_value(SWServW2STHandle, QuaternionsCharHandle,
 8002d92:	4b0e      	ldr	r3, [pc, #56]	@ (8002dcc <Quat_Update+0x90>)
 8002d94:	8818      	ldrh	r0, [r3, #0]
 8002d96:	4b0e      	ldr	r3, [pc, #56]	@ (8002dd0 <Quat_Update+0x94>)
 8002d98:	8819      	ldrh	r1, [r3, #0]
 8002d9a:	f107 030c 	add.w	r3, r7, #12
 8002d9e:	9300      	str	r3, [sp, #0]
 8002da0:	2308      	movs	r3, #8
 8002da2:	2200      	movs	r2, #0
 8002da4:	f007 fa46 	bl	800a234 <aci_gatt_update_char_value>
 8002da8:	4603      	mov	r3, r0
 8002daa:	75fb      	strb	r3, [r7, #23]
				   0, 2+6*SEND_N_QUATERNIONS, buff);
  if (ret != BLE_STATUS_SUCCESS){
 8002dac:	7dfb      	ldrb	r3, [r7, #23]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d006      	beq.n	8002dc0 <Quat_Update+0x84>
    PRINTF("Error while updating Sensor Fusion characteristic: 0x%02X\n",ret) ;
 8002db2:	7dfb      	ldrb	r3, [r7, #23]
 8002db4:	4619      	mov	r1, r3
 8002db6:	4807      	ldr	r0, [pc, #28]	@ (8002dd4 <Quat_Update+0x98>)
 8002db8:	f00a ffbe 	bl	800dd38 <iprintf>
    return BLE_STATUS_ERROR ;
 8002dbc:	2347      	movs	r3, #71	@ 0x47
 8002dbe:	e000      	b.n	8002dc2 <Quat_Update+0x86>
  }

  return BLE_STATUS_SUCCESS;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3718      	adds	r7, #24
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	2000024c 	.word	0x2000024c
 8002dd0:	2000024e 	.word	0x2000024e
 8002dd4:	08011868 	.word	0x08011868

08002dd8 <Read_Request_CB>:
* Description    : Update the sensor values.
* Input          : Handle of the characteristic to update.
* Return         : None.
*******************************************************************************/
void Read_Request_CB(uint16_t handle)
{
 8002dd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ddc:	b08e      	sub	sp, #56	@ 0x38
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	4603      	mov	r3, r0
 8002de2:	84fb      	strh	r3, [r7, #38]	@ 0x26
  tBleStatus ret;

  if(handle == AccGyroMagCharHandle + 1)
 8002de4:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002de6:	4b5c      	ldr	r3, [pc, #368]	@ (8002f58 <Read_Request_CB+0x180>)
 8002de8:	881b      	ldrh	r3, [r3, #0]
 8002dea:	3301      	adds	r3, #1
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d105      	bne.n	8002dfc <Read_Request_CB+0x24>
  {
    Acc_Update(&x_axes, &g_axes, &m_axes);
 8002df0:	4a5a      	ldr	r2, [pc, #360]	@ (8002f5c <Read_Request_CB+0x184>)
 8002df2:	495b      	ldr	r1, [pc, #364]	@ (8002f60 <Read_Request_CB+0x188>)
 8002df4:	485b      	ldr	r0, [pc, #364]	@ (8002f64 <Read_Request_CB+0x18c>)
 8002df6:	f7ff fe85 	bl	8002b04 <Acc_Update>
 8002dfa:	e091      	b.n	8002f20 <Read_Request_CB+0x148>
  }
  else if (handle == EnvironmentalCharHandle + 1)
 8002dfc:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002dfe:	4b5a      	ldr	r3, [pc, #360]	@ (8002f68 <Read_Request_CB+0x190>)
 8002e00:	881b      	ldrh	r3, [r3, #0]
 8002e02:	3301      	adds	r3, #1
 8002e04:	429a      	cmp	r2, r3
 8002e06:	f040 808b 	bne.w	8002f20 <Read_Request_CB+0x148>
  {
    float data_t, data_p;
    data_t = 27.0 + ((uint64_t)rand()*5)/RAND_MAX; //T sensor emulation
 8002e0a:	f00a f829 	bl	800ce60 <rand>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	17da      	asrs	r2, r3, #31
 8002e12:	61bb      	str	r3, [r7, #24]
 8002e14:	61fa      	str	r2, [r7, #28]
 8002e16:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e1a:	f04f 0000 	mov.w	r0, #0
 8002e1e:	f04f 0100 	mov.w	r1, #0
 8002e22:	0099      	lsls	r1, r3, #2
 8002e24:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002e28:	0090      	lsls	r0, r2, #2
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	69b9      	ldr	r1, [r7, #24]
 8002e30:	1851      	adds	r1, r2, r1
 8002e32:	6139      	str	r1, [r7, #16]
 8002e34:	69f9      	ldr	r1, [r7, #28]
 8002e36:	eb43 0101 	adc.w	r1, r3, r1
 8002e3a:	6179      	str	r1, [r7, #20]
 8002e3c:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8002e40:	f04f 0300 	mov.w	r3, #0
 8002e44:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002e48:	f7fd ff1e 	bl	8000c88 <__aeabi_uldivmod>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	460b      	mov	r3, r1
 8002e50:	4610      	mov	r0, r2
 8002e52:	4619      	mov	r1, r3
 8002e54:	f7fd fb9a 	bl	800058c <__aeabi_ul2d>
 8002e58:	f04f 0200 	mov.w	r2, #0
 8002e5c:	4b43      	ldr	r3, [pc, #268]	@ (8002f6c <Read_Request_CB+0x194>)
 8002e5e:	f7fd fa15 	bl	800028c <__adddf3>
 8002e62:	4602      	mov	r2, r0
 8002e64:	460b      	mov	r3, r1
 8002e66:	4610      	mov	r0, r2
 8002e68:	4619      	mov	r1, r3
 8002e6a:	f7fd febd 	bl	8000be8 <__aeabi_d2f>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	637b      	str	r3, [r7, #52]	@ 0x34
    data_p = 1000.0 + ((uint64_t)rand()*100)/RAND_MAX; //P sensor emulation
 8002e72:	f009 fff5 	bl	800ce60 <rand>
 8002e76:	4603      	mov	r3, r0
 8002e78:	17da      	asrs	r2, r3, #31
 8002e7a:	4698      	mov	r8, r3
 8002e7c:	4691      	mov	r9, r2
 8002e7e:	4642      	mov	r2, r8
 8002e80:	464b      	mov	r3, r9
 8002e82:	1891      	adds	r1, r2, r2
 8002e84:	6039      	str	r1, [r7, #0]
 8002e86:	415b      	adcs	r3, r3
 8002e88:	607b      	str	r3, [r7, #4]
 8002e8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e8e:	eb12 0408 	adds.w	r4, r2, r8
 8002e92:	eb43 0509 	adc.w	r5, r3, r9
 8002e96:	f04f 0200 	mov.w	r2, #0
 8002e9a:	f04f 0300 	mov.w	r3, #0
 8002e9e:	016b      	lsls	r3, r5, #5
 8002ea0:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8002ea4:	0162      	lsls	r2, r4, #5
 8002ea6:	eb14 0a02 	adds.w	sl, r4, r2
 8002eaa:	eb45 0b03 	adc.w	fp, r5, r3
 8002eae:	eb1a 0308 	adds.w	r3, sl, r8
 8002eb2:	60bb      	str	r3, [r7, #8]
 8002eb4:	eb4b 0309 	adc.w	r3, fp, r9
 8002eb8:	60fb      	str	r3, [r7, #12]
 8002eba:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8002ebe:	f04f 0300 	mov.w	r3, #0
 8002ec2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ec6:	f7fd fedf 	bl	8000c88 <__aeabi_uldivmod>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	460b      	mov	r3, r1
 8002ece:	4610      	mov	r0, r2
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	f7fd fb5b 	bl	800058c <__aeabi_ul2d>
 8002ed6:	f04f 0200 	mov.w	r2, #0
 8002eda:	4b25      	ldr	r3, [pc, #148]	@ (8002f70 <Read_Request_CB+0x198>)
 8002edc:	f7fd f9d6 	bl	800028c <__adddf3>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	4610      	mov	r0, r2
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	f7fd fe7e 	bl	8000be8 <__aeabi_d2f>
 8002eec:	4603      	mov	r3, r0
 8002eee:	633b      	str	r3, [r7, #48]	@ 0x30
    BlueMS_Environmental_Update((int32_t)(data_p *100), (int16_t)(data_t * 10));
 8002ef0:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002ef4:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8002f74 <Read_Request_CB+0x19c>
 8002ef8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002efc:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8002f00:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002f04:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002f08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f10:	ee17 3a90 	vmov	r3, s15
 8002f14:	b21b      	sxth	r3, r3
 8002f16:	4619      	mov	r1, r3
 8002f18:	ee16 0a90 	vmov	r0, s13
 8002f1c:	f000 f830 	bl	8002f80 <BlueMS_Environmental_Update>
  }

  if(connection_handle !=0)
 8002f20:	4b15      	ldr	r3, [pc, #84]	@ (8002f78 <Read_Request_CB+0x1a0>)
 8002f22:	881b      	ldrh	r3, [r3, #0]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d011      	beq.n	8002f4c <Read_Request_CB+0x174>
  {
    ret = aci_gatt_allow_read(connection_handle);
 8002f28:	4b13      	ldr	r3, [pc, #76]	@ (8002f78 <Read_Request_CB+0x1a0>)
 8002f2a:	881b      	ldrh	r3, [r3, #0]
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f007 fab1 	bl	800a494 <aci_gatt_allow_read>
 8002f32:	4603      	mov	r3, r0
 8002f34:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (ret != BLE_STATUS_SUCCESS)
 8002f38:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d005      	beq.n	8002f4c <Read_Request_CB+0x174>
    {
      PRINTF("aci_gatt_allow_read() failed: 0x%02x\r\n", ret);
 8002f40:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002f44:	4619      	mov	r1, r3
 8002f46:	480d      	ldr	r0, [pc, #52]	@ (8002f7c <Read_Request_CB+0x1a4>)
 8002f48:	f00a fef6 	bl	800dd38 <iprintf>
    }
  }
}
 8002f4c:	bf00      	nop
 8002f4e:	3738      	adds	r7, #56	@ 0x38
 8002f50:	46bd      	mov	sp, r7
 8002f52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f56:	bf00      	nop
 8002f58:	20000248 	.word	0x20000248
 8002f5c:	2000041c 	.word	0x2000041c
 8002f60:	20000410 	.word	0x20000410
 8002f64:	20000404 	.word	0x20000404
 8002f68:	20000246 	.word	0x20000246
 8002f6c:	403b0000 	.word	0x403b0000
 8002f70:	408f4000 	.word	0x408f4000
 8002f74:	42c80000 	.word	0x42c80000
 8002f78:	200003fc 	.word	0x200003fc
 8002f7c:	080118a4 	.word	0x080118a4

08002f80 <BlueMS_Environmental_Update>:

tBleStatus BlueMS_Environmental_Update(int32_t press, int16_t temp)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b088      	sub	sp, #32
 8002f84:	af02      	add	r7, sp, #8
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	460b      	mov	r3, r1
 8002f8a:	807b      	strh	r3, [r7, #2]
  tBleStatus ret;
  uint8_t buff[8];
  HOST_TO_LE_16(buff, HAL_GetTick()>>3);
 8002f8c:	f002 f82a 	bl	8004fe4 <HAL_GetTick>
 8002f90:	4603      	mov	r3, r0
 8002f92:	08db      	lsrs	r3, r3, #3
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	733b      	strb	r3, [r7, #12]
 8002f98:	f002 f824 	bl	8004fe4 <HAL_GetTick>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	0adb      	lsrs	r3, r3, #11
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	737b      	strb	r3, [r7, #13]

  HOST_TO_LE_32(buff+2,press);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	73bb      	strb	r3, [r7, #14]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	121b      	asrs	r3, r3, #8
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	73fb      	strb	r3, [r7, #15]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	141b      	asrs	r3, r3, #16
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	743b      	strb	r3, [r7, #16]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	161b      	asrs	r3, r3, #24
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	747b      	strb	r3, [r7, #17]
  HOST_TO_LE_16(buff+6,temp);
 8002fc2:	887b      	ldrh	r3, [r7, #2]
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	74bb      	strb	r3, [r7, #18]
 8002fc8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002fcc:	121b      	asrs	r3, r3, #8
 8002fce:	b21b      	sxth	r3, r3
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	74fb      	strb	r3, [r7, #19]

  ret = aci_gatt_update_char_value(HWServW2STHandle, EnvironmentalCharHandle,
 8002fd4:	4b0b      	ldr	r3, [pc, #44]	@ (8003004 <BlueMS_Environmental_Update+0x84>)
 8002fd6:	8818      	ldrh	r0, [r3, #0]
 8002fd8:	4b0b      	ldr	r3, [pc, #44]	@ (8003008 <BlueMS_Environmental_Update+0x88>)
 8002fda:	8819      	ldrh	r1, [r3, #0]
 8002fdc:	f107 030c 	add.w	r3, r7, #12
 8002fe0:	9300      	str	r3, [sp, #0]
 8002fe2:	2308      	movs	r3, #8
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f007 f925 	bl	800a234 <aci_gatt_update_char_value>
 8002fea:	4603      	mov	r3, r0
 8002fec:	75fb      	strb	r3, [r7, #23]
                                   0, 8, buff);

  if (ret != BLE_STATUS_SUCCESS){
 8002fee:	7dfb      	ldrb	r3, [r7, #23]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d001      	beq.n	8002ff8 <BlueMS_Environmental_Update+0x78>
    //PRINTF("Error while updating TEMP characteristic: 0x%04X\n",ret) ;
    return BLE_STATUS_ERROR ;
 8002ff4:	2347      	movs	r3, #71	@ 0x47
 8002ff6:	e000      	b.n	8002ffa <BlueMS_Environmental_Update+0x7a>
  }

  return BLE_STATUS_SUCCESS;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3718      	adds	r7, #24
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	20000244 	.word	0x20000244
 8003008:	20000246 	.word	0x20000246

0800300c <Set_DeviceConnectable>:
 * Input          : None.
 * Output         : None.
 * Return         : None.
 *******************************************************************************/
void Set_DeviceConnectable(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b092      	sub	sp, #72	@ 0x48
 8003010:	af08      	add	r7, sp, #32
  uint8_t ret;
  const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,SENSOR_DEMO_NAME};
 8003012:	4a3f      	ldr	r2, [pc, #252]	@ (8003110 <Set_DeviceConnectable+0x104>)
 8003014:	f107 031c 	add.w	r3, r7, #28
 8003018:	e892 0003 	ldmia.w	r2, {r0, r1}
 800301c:	e883 0003 	stmia.w	r3, {r0, r1}

  uint8_t manuf_data[26] = {
 8003020:	2302      	movs	r3, #2
 8003022:	703b      	strb	r3, [r7, #0]
 8003024:	230a      	movs	r3, #10
 8003026:	707b      	strb	r3, [r7, #1]
 8003028:	2300      	movs	r3, #0
 800302a:	70bb      	strb	r3, [r7, #2]
 800302c:	2308      	movs	r3, #8
 800302e:	70fb      	strb	r3, [r7, #3]
 8003030:	2309      	movs	r3, #9
 8003032:	713b      	strb	r3, [r7, #4]
 8003034:	2342      	movs	r3, #66	@ 0x42
 8003036:	717b      	strb	r3, [r7, #5]
 8003038:	236c      	movs	r3, #108	@ 0x6c
 800303a:	71bb      	strb	r3, [r7, #6]
 800303c:	2375      	movs	r3, #117	@ 0x75
 800303e:	71fb      	strb	r3, [r7, #7]
 8003040:	2365      	movs	r3, #101	@ 0x65
 8003042:	723b      	strb	r3, [r7, #8]
 8003044:	2370      	movs	r3, #112	@ 0x70
 8003046:	727b      	strb	r3, [r7, #9]
 8003048:	2369      	movs	r3, #105	@ 0x69
 800304a:	72bb      	strb	r3, [r7, #10]
 800304c:	236f      	movs	r3, #111	@ 0x6f
 800304e:	72fb      	strb	r3, [r7, #11]
 8003050:	230d      	movs	r3, #13
 8003052:	733b      	strb	r3, [r7, #12]
 8003054:	23ff      	movs	r3, #255	@ 0xff
 8003056:	737b      	strb	r3, [r7, #13]
 8003058:	2301      	movs	r3, #1
 800305a:	73bb      	strb	r3, [r7, #14]
 800305c:	2380      	movs	r3, #128	@ 0x80
 800305e:	73fb      	strb	r3, [r7, #15]
 8003060:	2300      	movs	r3, #0
 8003062:	743b      	strb	r3, [r7, #16]
 8003064:	23f4      	movs	r3, #244	@ 0xf4
 8003066:	747b      	strb	r3, [r7, #17]
 8003068:	2300      	movs	r3, #0
 800306a:	74bb      	strb	r3, [r7, #18]
 800306c:	2300      	movs	r3, #0
 800306e:	74fb      	strb	r3, [r7, #19]
    0x80,
    0x00,
    0xF4, /* ACC+Gyro+Mag 0xE0 | 0x04 Temp | 0x10 Pressure */
    0x00, /*  */
    0x00, /*  */
    bdaddr[5], /* BLE MAC start -MSB first- */
 8003070:	4b28      	ldr	r3, [pc, #160]	@ (8003114 <Set_DeviceConnectable+0x108>)
 8003072:	795b      	ldrb	r3, [r3, #5]
  uint8_t manuf_data[26] = {
 8003074:	753b      	strb	r3, [r7, #20]
    bdaddr[4],
 8003076:	4b27      	ldr	r3, [pc, #156]	@ (8003114 <Set_DeviceConnectable+0x108>)
 8003078:	791b      	ldrb	r3, [r3, #4]
  uint8_t manuf_data[26] = {
 800307a:	757b      	strb	r3, [r7, #21]
    bdaddr[3],
 800307c:	4b25      	ldr	r3, [pc, #148]	@ (8003114 <Set_DeviceConnectable+0x108>)
 800307e:	78db      	ldrb	r3, [r3, #3]
  uint8_t manuf_data[26] = {
 8003080:	75bb      	strb	r3, [r7, #22]
    bdaddr[2],
 8003082:	4b24      	ldr	r3, [pc, #144]	@ (8003114 <Set_DeviceConnectable+0x108>)
 8003084:	789b      	ldrb	r3, [r3, #2]
  uint8_t manuf_data[26] = {
 8003086:	75fb      	strb	r3, [r7, #23]
    bdaddr[1],
 8003088:	4b22      	ldr	r3, [pc, #136]	@ (8003114 <Set_DeviceConnectable+0x108>)
 800308a:	785b      	ldrb	r3, [r3, #1]
  uint8_t manuf_data[26] = {
 800308c:	763b      	strb	r3, [r7, #24]
    bdaddr[0]  /* BLE MAC stop */
 800308e:	4b21      	ldr	r3, [pc, #132]	@ (8003114 <Set_DeviceConnectable+0x108>)
 8003090:	781b      	ldrb	r3, [r3, #0]
  uint8_t manuf_data[26] = {
 8003092:	767b      	strb	r3, [r7, #25]
  };

  manuf_data[18] |= 0x01; /* Sensor Fusion */
 8003094:	7cbb      	ldrb	r3, [r7, #18]
 8003096:	f043 0301 	orr.w	r3, r3, #1
 800309a:	b2db      	uxtb	r3, r3
 800309c:	74bb      	strb	r3, [r7, #18]

  hci_le_set_scan_resp_data(0, NULL);
 800309e:	2100      	movs	r1, #0
 80030a0:	2000      	movs	r0, #0
 80030a2:	f007 fb5a 	bl	800a75a <hci_le_set_scan_resp_data>

  PRINTF("Set General Discoverable Mode.\n");
 80030a6:	481c      	ldr	r0, [pc, #112]	@ (8003118 <Set_DeviceConnectable+0x10c>)
 80030a8:	f00a feae 	bl	800de08 <puts>

  ret = aci_gap_set_discoverable(ADV_DATA_TYPE,
 80030ac:	2300      	movs	r3, #0
 80030ae:	9306      	str	r3, [sp, #24]
 80030b0:	2300      	movs	r3, #0
 80030b2:	9305      	str	r3, [sp, #20]
 80030b4:	2300      	movs	r3, #0
 80030b6:	9304      	str	r3, [sp, #16]
 80030b8:	2300      	movs	r3, #0
 80030ba:	9303      	str	r3, [sp, #12]
 80030bc:	f107 031c 	add.w	r3, r7, #28
 80030c0:	9302      	str	r3, [sp, #8]
 80030c2:	2308      	movs	r3, #8
 80030c4:	9301      	str	r3, [sp, #4]
 80030c6:	2300      	movs	r3, #0
 80030c8:	9300      	str	r3, [sp, #0]
 80030ca:	2301      	movs	r3, #1
 80030cc:	f44f 62f0 	mov.w	r2, #1920	@ 0x780
 80030d0:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 80030d4:	2000      	movs	r0, #0
 80030d6:	f006 fda4 	bl	8009c22 <aci_gap_set_discoverable>
 80030da:	4603      	mov	r3, r0
 80030dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                                (ADV_INTERVAL_MIN_MS*1000)/625,(ADV_INTERVAL_MAX_MS*1000)/625,
                                 STATIC_RANDOM_ADDR, NO_WHITE_LIST_USE,
                                 sizeof(local_name), local_name, 0, NULL, 0, 0);

  aci_gap_update_adv_data(26, manuf_data);
 80030e0:	463b      	mov	r3, r7
 80030e2:	4619      	mov	r1, r3
 80030e4:	201a      	movs	r0, #26
 80030e6:	f006 fedd 	bl	8009ea4 <aci_gap_update_adv_data>

  if(ret != BLE_STATUS_SUCCESS)
 80030ea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d006      	beq.n	8003100 <Set_DeviceConnectable+0xf4>
  {
    PRINTF("aci_gap_set_discoverable() failed: 0x%02x\r\n", ret);
 80030f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80030f6:	4619      	mov	r1, r3
 80030f8:	4808      	ldr	r0, [pc, #32]	@ (800311c <Set_DeviceConnectable+0x110>)
 80030fa:	f00a fe1d 	bl	800dd38 <iprintf>
  }
  else
    PRINTF("aci_gap_set_discoverable() --> SUCCESS\r\n");
}
 80030fe:	e002      	b.n	8003106 <Set_DeviceConnectable+0xfa>
    PRINTF("aci_gap_set_discoverable() --> SUCCESS\r\n");
 8003100:	4807      	ldr	r0, [pc, #28]	@ (8003120 <Set_DeviceConnectable+0x114>)
 8003102:	f00a fe81 	bl	800de08 <puts>
}
 8003106:	bf00      	nop
 8003108:	3728      	adds	r7, #40	@ 0x28
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	08011940 	.word	0x08011940
 8003114:	20000238 	.word	0x20000238
 8003118:	080118cc 	.word	0x080118cc
 800311c:	080118ec 	.word	0x080118ec
 8003120:	08011918 	.word	0x08011918

08003124 <user_notify>:
 *         parsed.
 * @param  void* Pointer to the ACI packet
 * @retval None
 */
void user_notify(void * pData)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b08e      	sub	sp, #56	@ 0x38
 8003128:	af02      	add	r7, sp, #8
 800312a:	6078      	str	r0, [r7, #4]
  hci_uart_pckt *hci_pckt = pData;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* obtain event packet */
  hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 8003130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003132:	3301      	adds	r3, #1
 8003134:	62bb      	str	r3, [r7, #40]	@ 0x28
  if(hci_pckt->type != HCI_EVENT_PKT)
 8003136:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	2b04      	cmp	r3, #4
 800313c:	d15d      	bne.n	80031fa <user_notify+0xd6>
    return;
  evt_blue_aci *blue_evt = (void*)event_pckt->data;
 800313e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003140:	3302      	adds	r3, #2
 8003142:	627b      	str	r3, [r7, #36]	@ 0x24
  switch(event_pckt->evt){
 8003144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	2bff      	cmp	r3, #255	@ 0xff
 800314a:	d01f      	beq.n	800318c <user_notify+0x68>
 800314c:	2bff      	cmp	r3, #255	@ 0xff
 800314e:	dc59      	bgt.n	8003204 <user_notify+0xe0>
 8003150:	2b05      	cmp	r3, #5
 8003152:	d002      	beq.n	800315a <user_notify+0x36>
 8003154:	2b3e      	cmp	r3, #62	@ 0x3e
 8003156:	d003      	beq.n	8003160 <user_notify+0x3c>
 8003158:	e054      	b.n	8003204 <user_notify+0xe0>

  case EVT_DISCONN_COMPLETE:
    {
      GAP_DisconnectionComplete_CB();
 800315a:	f000 f857 	bl	800320c <GAP_DisconnectionComplete_CB>
    }
    break;
 800315e:	e051      	b.n	8003204 <user_notify+0xe0>

  case EVT_LE_META_EVENT:
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 8003160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003162:	3302      	adds	r3, #2
 8003164:	613b      	str	r3, [r7, #16]

      switch(evt->subevent){
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	2b01      	cmp	r3, #1
 800316c:	d147      	bne.n	80031fe <user_notify+0xda>
      case EVT_LE_CONN_COMPLETE:
        {
          evt_le_connection_complete *cc = (void *)evt->data;
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	3301      	adds	r3, #1
 8003172:	60fb      	str	r3, [r7, #12]
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	1d5a      	adds	r2, r3, #5
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800317e:	b29b      	uxth	r3, r3
 8003180:	4619      	mov	r1, r3
 8003182:	4610      	mov	r0, r2
 8003184:	f000 f85a 	bl	800323c <GAP_ConnectionComplete_CB>
        }
        break;
 8003188:	bf00      	nop
      }
    }
    break;
 800318a:	e038      	b.n	80031fe <user_notify+0xda>
  case EVT_VENDOR:
    {
      switch(blue_evt->ecode){
 800318c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800318e:	881b      	ldrh	r3, [r3, #0]
 8003190:	b29b      	uxth	r3, r3
 8003192:	f640 4213 	movw	r2, #3091	@ 0xc13
 8003196:	4293      	cmp	r3, r2
 8003198:	d00d      	beq.n	80031b6 <user_notify+0x92>
 800319a:	f640 4214 	movw	r2, #3092	@ 0xc14
 800319e:	4293      	cmp	r3, r2
 80031a0:	d12f      	bne.n	8003202 <user_notify+0xde>

      case EVT_BLUE_GATT_READ_PERMIT_REQ:
        {
          evt_gatt_read_permit_req *pr = (void*)blue_evt->data;
 80031a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031a4:	3302      	adds	r3, #2
 80031a6:	623b      	str	r3, [r7, #32]
          Read_Request_CB(pr->attr_handle);
 80031a8:	6a3b      	ldr	r3, [r7, #32]
 80031aa:	885b      	ldrh	r3, [r3, #2]
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	4618      	mov	r0, r3
 80031b0:	f7ff fe12 	bl	8002dd8 <Read_Request_CB>
        }
        //Sample_rate_Update(sample_rate);
        break;
 80031b4:	e020      	b.n	80031f8 <user_notify+0xd4>
      case EVT_BLUE_GATT_WRITE_PERMIT_REQ:
		{
			//// OUR CODE
			evt_gatt_write_permit_req *wr = (void*)blue_evt->data;
 80031b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b8:	3302      	adds	r3, #2
 80031ba:	61fb      	str	r3, [r7, #28]
			uint16_t attr_handle = wr->attr_handle;
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	789a      	ldrb	r2, [r3, #2]
 80031c0:	78db      	ldrb	r3, [r3, #3]
 80031c2:	021b      	lsls	r3, r3, #8
 80031c4:	4313      	orrs	r3, r2
 80031c6:	837b      	strh	r3, [r7, #26]
			uint8_t *data = wr->data;
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	3305      	adds	r3, #5
 80031cc:	617b      	str	r3, [r7, #20]


		     Sample_rate_Update( data[0]  );
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7ff fd28 	bl	8002c28 <Sample_rate_Update>
		     aci_gatt_write_response(wr->conn_handle, wr->attr_handle,0x00,
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	881b      	ldrh	r3, [r3, #0]
 80031dc:	b298      	uxth	r0, r3
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	885b      	ldrh	r3, [r3, #2]
 80031e2:	b299      	uxth	r1, r3
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	3305      	adds	r3, #5
 80031e8:	9301      	str	r3, [sp, #4]
 80031ea:	2301      	movs	r3, #1
 80031ec:	9300      	str	r3, [sp, #0]
 80031ee:	2300      	movs	r3, #0
 80031f0:	2200      	movs	r2, #0
 80031f2:	f007 f8af 	bl	800a354 <aci_gatt_write_response>
                     1,
                     (uint8_t *)&(wr->data[0]));;

			//// OUR CODE
		}
		break;
 80031f6:	bf00      	nop
      }

    }
    break;
 80031f8:	e003      	b.n	8003202 <user_notify+0xde>
    return;
 80031fa:	bf00      	nop
 80031fc:	e002      	b.n	8003204 <user_notify+0xe0>
    break;
 80031fe:	bf00      	nop
 8003200:	e000      	b.n	8003204 <user_notify+0xe0>
    break;
 8003202:	bf00      	nop
  }
}
 8003204:	3730      	adds	r7, #48	@ 0x30
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
	...

0800320c <GAP_DisconnectionComplete_CB>:
 * @brief  This function is called when the peer device gets disconnected.
 * @param  None
 * @retval None
 */
void GAP_DisconnectionComplete_CB(void)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	af00      	add	r7, sp, #0
  connected = FALSE;
 8003210:	4b06      	ldr	r3, [pc, #24]	@ (800322c <GAP_DisconnectionComplete_CB+0x20>)
 8003212:	2200      	movs	r2, #0
 8003214:	601a      	str	r2, [r3, #0]
  PRINTF("Disconnected\n");
 8003216:	4806      	ldr	r0, [pc, #24]	@ (8003230 <GAP_DisconnectionComplete_CB+0x24>)
 8003218:	f00a fdf6 	bl	800de08 <puts>
  /* Make the device connectable again. */
  set_connectable = TRUE;
 800321c:	4b05      	ldr	r3, [pc, #20]	@ (8003234 <GAP_DisconnectionComplete_CB+0x28>)
 800321e:	2201      	movs	r2, #1
 8003220:	701a      	strb	r2, [r3, #0]
  notification_enabled = FALSE;
 8003222:	4b05      	ldr	r3, [pc, #20]	@ (8003238 <GAP_DisconnectionComplete_CB+0x2c>)
 8003224:	2200      	movs	r2, #0
 8003226:	701a      	strb	r2, [r3, #0]
}
 8003228:	bf00      	nop
 800322a:	bd80      	pop	{r7, pc}
 800322c:	20000400 	.word	0x20000400
 8003230:	08011948 	.word	0x08011948
 8003234:	20000000 	.word	0x20000000
 8003238:	200003fe 	.word	0x200003fe

0800323c <GAP_ConnectionComplete_CB>:
 * @param  uint8_t Address of peer device
 * @param  uint16_t Connection handle
 * @retval None
 */
void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	460b      	mov	r3, r1
 8003246:	807b      	strh	r3, [r7, #2]
  connected = TRUE;
 8003248:	4b11      	ldr	r3, [pc, #68]	@ (8003290 <GAP_ConnectionComplete_CB+0x54>)
 800324a:	2201      	movs	r2, #1
 800324c:	601a      	str	r2, [r3, #0]
  connection_handle = handle;
 800324e:	4a11      	ldr	r2, [pc, #68]	@ (8003294 <GAP_ConnectionComplete_CB+0x58>)
 8003250:	887b      	ldrh	r3, [r7, #2]
 8003252:	8013      	strh	r3, [r2, #0]

  PRINTF("Connected to device:");
 8003254:	4810      	ldr	r0, [pc, #64]	@ (8003298 <GAP_ConnectionComplete_CB+0x5c>)
 8003256:	f00a fd6f 	bl	800dd38 <iprintf>
  for(uint32_t i = 5; i > 0; i--){
 800325a:	2305      	movs	r3, #5
 800325c:	60fb      	str	r3, [r7, #12]
 800325e:	e00a      	b.n	8003276 <GAP_ConnectionComplete_CB+0x3a>
    PRINTF("%02X-", addr[i]);
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	4413      	add	r3, r2
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	4619      	mov	r1, r3
 800326a:	480c      	ldr	r0, [pc, #48]	@ (800329c <GAP_ConnectionComplete_CB+0x60>)
 800326c:	f00a fd64 	bl	800dd38 <iprintf>
  for(uint32_t i = 5; i > 0; i--){
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	3b01      	subs	r3, #1
 8003274:	60fb      	str	r3, [r7, #12]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d1f1      	bne.n	8003260 <GAP_ConnectionComplete_CB+0x24>
  }
  PRINTF("%02X\n", addr[0]);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	4619      	mov	r1, r3
 8003282:	4807      	ldr	r0, [pc, #28]	@ (80032a0 <GAP_ConnectionComplete_CB+0x64>)
 8003284:	f00a fd58 	bl	800dd38 <iprintf>
}
 8003288:	bf00      	nop
 800328a:	3710      	adds	r7, #16
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	20000400 	.word	0x20000400
 8003294:	200003fc 	.word	0x200003fc
 8003298:	08011958 	.word	0x08011958
 800329c:	08011970 	.word	0x08011970
 80032a0:	08011978 	.word	0x08011978

080032a4 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b088      	sub	sp, #32
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 80032ac:	4b1f      	ldr	r3, [pc, #124]	@ (800332c <HCI_TL_SPI_Init+0x88>)
 80032ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032b0:	4a1e      	ldr	r2, [pc, #120]	@ (800332c <HCI_TL_SPI_Init+0x88>)
 80032b2:	f043 0301 	orr.w	r3, r3, #1
 80032b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80032b8:	4b1c      	ldr	r3, [pc, #112]	@ (800332c <HCI_TL_SPI_Init+0x88>)
 80032ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032bc:	f003 0301 	and.w	r3, r3, #1
 80032c0:	60bb      	str	r3, [r7, #8]
 80032c2:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 80032c4:	2340      	movs	r3, #64	@ 0x40
 80032c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80032c8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80032cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ce:	2300      	movs	r3, #0
 80032d0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 80032d2:	f107 030c 	add.w	r3, r7, #12
 80032d6:	4619      	mov	r1, r3
 80032d8:	4815      	ldr	r0, [pc, #84]	@ (8003330 <HCI_TL_SPI_Init+0x8c>)
 80032da:	f002 f92f 	bl	800553c <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 80032de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80032e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032e4:	2301      	movs	r3, #1
 80032e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e8:	2300      	movs	r3, #0
 80032ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032ec:	2300      	movs	r3, #0
 80032ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 80032f0:	f107 030c 	add.w	r3, r7, #12
 80032f4:	4619      	mov	r1, r3
 80032f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80032fa:	f002 f91f 	bl	800553c <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 80032fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003302:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003304:	2301      	movs	r3, #1
 8003306:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003308:	2300      	movs	r3, #0
 800330a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800330c:	2300      	movs	r3, #0
 800330e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 8003310:	f107 030c 	add.w	r3, r7, #12
 8003314:	4619      	mov	r1, r3
 8003316:	4807      	ldr	r0, [pc, #28]	@ (8003334 <HCI_TL_SPI_Init+0x90>)
 8003318:	f002 f910 	bl	800553c <HAL_GPIO_Init>

  return BSP_SPI3_Init();
 800331c:	f001 fb9c 	bl	8004a58 <BSP_SPI3_Init>
 8003320:	4603      	mov	r3, r0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3720      	adds	r7, #32
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	40021000 	.word	0x40021000
 8003330:	48001000 	.word	0x48001000
 8003334:	48000c00 	.word	0x48000c00

08003338 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 800333c:	2140      	movs	r1, #64	@ 0x40
 800333e:	4808      	ldr	r0, [pc, #32]	@ (8003360 <HCI_TL_SPI_DeInit+0x28>)
 8003340:	f002 faa6 	bl	8005890 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 8003344:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003348:	4806      	ldr	r0, [pc, #24]	@ (8003364 <HCI_TL_SPI_DeInit+0x2c>)
 800334a:	f002 faa1 	bl	8005890 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 800334e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003352:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003356:	f002 fa9b 	bl	8005890 <HAL_GPIO_DeInit>
  return 0;
 800335a:	2300      	movs	r3, #0
}
 800335c:	4618      	mov	r0, r3
 800335e:	bd80      	pop	{r7, pc}
 8003360:	48001000 	.word	0x48001000
 8003364:	48000c00 	.word	0x48000c00

08003368 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 800336c:	2201      	movs	r2, #1
 800336e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003372:	480d      	ldr	r0, [pc, #52]	@ (80033a8 <HCI_TL_SPI_Reset+0x40>)
 8003374:	f002 fb98 	bl	8005aa8 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 8003378:	2200      	movs	r2, #0
 800337a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800337e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003382:	f002 fb91 	bl	8005aa8 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8003386:	2005      	movs	r0, #5
 8003388:	f001 fe38 	bl	8004ffc <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 800338c:	2201      	movs	r2, #1
 800338e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003392:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003396:	f002 fb87 	bl	8005aa8 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 800339a:	2005      	movs	r0, #5
 800339c:	f001 fe2e 	bl	8004ffc <HAL_Delay>
  return 0;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	48000c00 	.word	0x48000c00

080033ac <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b088      	sub	sp, #32
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	460b      	mov	r3, r1
 80033b6:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 80033b8:	2300      	movs	r3, #0
 80033ba:	777b      	strb	r3, [r7, #29]
  uint8_t char_ff = 0xff;
 80033bc:	23ff      	movs	r3, #255	@ 0xff
 80033be:	773b      	strb	r3, [r7, #28]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 80033c0:	4a26      	ldr	r2, [pc, #152]	@ (800345c <HCI_TL_SPI_Receive+0xb0>)
 80033c2:	f107 0314 	add.w	r3, r7, #20
 80033c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80033ca:	6018      	str	r0, [r3, #0]
 80033cc:	3304      	adds	r3, #4
 80033ce:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80033d0:	2200      	movs	r2, #0
 80033d2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80033d6:	4822      	ldr	r0, [pc, #136]	@ (8003460 <HCI_TL_SPI_Receive+0xb4>)
 80033d8:	f002 fb66 	bl	8005aa8 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI3_SendRecv(header_master, header_slave, HEADER_SIZE);
 80033dc:	f107 010c 	add.w	r1, r7, #12
 80033e0:	f107 0314 	add.w	r3, r7, #20
 80033e4:	2205      	movs	r2, #5
 80033e6:	4618      	mov	r0, r3
 80033e8:	f001 fb66 	bl	8004ab8 <BSP_SPI3_SendRecv>

  if(header_slave[0] == 0x02)
 80033ec:	7b3b      	ldrb	r3, [r7, #12]
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d129      	bne.n	8003446 <HCI_TL_SPI_Receive+0x9a>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 80033f2:	7c3b      	ldrb	r3, [r7, #16]
 80033f4:	021b      	lsls	r3, r3, #8
 80033f6:	b21a      	sxth	r2, r3
 80033f8:	7bfb      	ldrb	r3, [r7, #15]
 80033fa:	b21b      	sxth	r3, r3
 80033fc:	4313      	orrs	r3, r2
 80033fe:	b21b      	sxth	r3, r3
 8003400:	83fb      	strh	r3, [r7, #30]

    if(byte_count > 0)
 8003402:	8bfb      	ldrh	r3, [r7, #30]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d01e      	beq.n	8003446 <HCI_TL_SPI_Receive+0x9a>
    {
      /* avoid to read more data than the size of the buffer */
      if (byte_count > size){
 8003408:	8bfa      	ldrh	r2, [r7, #30]
 800340a:	887b      	ldrh	r3, [r7, #2]
 800340c:	429a      	cmp	r2, r3
 800340e:	d901      	bls.n	8003414 <HCI_TL_SPI_Receive+0x68>
        byte_count = size;
 8003410:	887b      	ldrh	r3, [r7, #2]
 8003412:	83fb      	strh	r3, [r7, #30]
      }

      for(len = 0; len < byte_count; len++)
 8003414:	2300      	movs	r3, #0
 8003416:	777b      	strb	r3, [r7, #29]
 8003418:	e010      	b.n	800343c <HCI_TL_SPI_Receive+0x90>
      {
        BSP_SPI3_SendRecv(&char_ff, (uint8_t*)&read_char, 1);
 800341a:	f107 011b 	add.w	r1, r7, #27
 800341e:	f107 031c 	add.w	r3, r7, #28
 8003422:	2201      	movs	r2, #1
 8003424:	4618      	mov	r0, r3
 8003426:	f001 fb47 	bl	8004ab8 <BSP_SPI3_SendRecv>
        buffer[len] = read_char;
 800342a:	7f7b      	ldrb	r3, [r7, #29]
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	4413      	add	r3, r2
 8003430:	7efa      	ldrb	r2, [r7, #27]
 8003432:	b2d2      	uxtb	r2, r2
 8003434:	701a      	strb	r2, [r3, #0]
      for(len = 0; len < byte_count; len++)
 8003436:	7f7b      	ldrb	r3, [r7, #29]
 8003438:	3301      	adds	r3, #1
 800343a:	777b      	strb	r3, [r7, #29]
 800343c:	7f7b      	ldrb	r3, [r7, #29]
 800343e:	b29b      	uxth	r3, r3
 8003440:	8bfa      	ldrh	r2, [r7, #30]
 8003442:	429a      	cmp	r2, r3
 8003444:	d8e9      	bhi.n	800341a <HCI_TL_SPI_Receive+0x6e>
      }
    }
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8003446:	2201      	movs	r2, #1
 8003448:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800344c:	4804      	ldr	r0, [pc, #16]	@ (8003460 <HCI_TL_SPI_Receive+0xb4>)
 800344e:	f002 fb2b 	bl	8005aa8 <HAL_GPIO_WritePin>
    }
    PRINT_CSV("\n");
  }
#endif

  return len;
 8003452:	7f7b      	ldrb	r3, [r7, #29]
}
 8003454:	4618      	mov	r0, r3
 8003456:	3720      	adds	r7, #32
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}
 800345c:	08011980 	.word	0x08011980
 8003460:	48000c00 	.word	0x48000c00

08003464 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b088      	sub	sp, #32
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	460b      	mov	r3, r1
 800346e:	807b      	strh	r3, [r7, #2]
  int32_t result;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8003470:	4a24      	ldr	r2, [pc, #144]	@ (8003504 <HCI_TL_SPI_Send+0xa0>)
 8003472:	f107 0310 	add.w	r3, r7, #16
 8003476:	e892 0003 	ldmia.w	r2, {r0, r1}
 800347a:	6018      	str	r0, [r3, #0]
 800347c:	3304      	adds	r3, #4
 800347e:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 8003480:	f001 fdb0 	bl	8004fe4 <HAL_GetTick>
 8003484:	61b8      	str	r0, [r7, #24]

  do
  {
    result = 0;
 8003486:	2300      	movs	r3, #0
 8003488:	61fb      	str	r3, [r7, #28]

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 800348a:	2200      	movs	r2, #0
 800348c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003490:	481d      	ldr	r0, [pc, #116]	@ (8003508 <HCI_TL_SPI_Send+0xa4>)
 8003492:	f002 fb09 	bl	8005aa8 <HAL_GPIO_WritePin>

    /* Read header */
    BSP_SPI3_SendRecv(header_master, header_slave, HEADER_SIZE);
 8003496:	f107 0108 	add.w	r1, r7, #8
 800349a:	f107 0310 	add.w	r3, r7, #16
 800349e:	2205      	movs	r2, #5
 80034a0:	4618      	mov	r0, r3
 80034a2:	f001 fb09 	bl	8004ab8 <BSP_SPI3_SendRecv>

    if(header_slave[0] == 0x02)
 80034a6:	7a3b      	ldrb	r3, [r7, #8]
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d10f      	bne.n	80034cc <HCI_TL_SPI_Send+0x68>
    {
      /* SPI is ready */
      if(header_slave[1] >= size)
 80034ac:	7a7b      	ldrb	r3, [r7, #9]
 80034ae:	461a      	mov	r2, r3
 80034b0:	887b      	ldrh	r3, [r7, #2]
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d806      	bhi.n	80034c4 <HCI_TL_SPI_Send+0x60>
      {
        BSP_SPI3_SendRecv(buffer, read_char_buf, size);
 80034b6:	887b      	ldrh	r3, [r7, #2]
 80034b8:	461a      	mov	r2, r3
 80034ba:	4914      	ldr	r1, [pc, #80]	@ (800350c <HCI_TL_SPI_Send+0xa8>)
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f001 fafb 	bl	8004ab8 <BSP_SPI3_SendRecv>
 80034c2:	e006      	b.n	80034d2 <HCI_TL_SPI_Send+0x6e>
      }
      else
      {
        /* Buffer is too small */
        result = -2;
 80034c4:	f06f 0301 	mvn.w	r3, #1
 80034c8:	61fb      	str	r3, [r7, #28]
 80034ca:	e002      	b.n	80034d2 <HCI_TL_SPI_Send+0x6e>
      }
    } else {
      /* SPI is not ready */
      result = -1;
 80034cc:	f04f 33ff 	mov.w	r3, #4294967295
 80034d0:	61fb      	str	r3, [r7, #28]
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80034d2:	2201      	movs	r2, #1
 80034d4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80034d8:	480b      	ldr	r0, [pc, #44]	@ (8003508 <HCI_TL_SPI_Send+0xa4>)
 80034da:	f002 fae5 	bl	8005aa8 <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 80034de:	f001 fd81 	bl	8004fe4 <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	2b0f      	cmp	r3, #15
 80034ea:	d903      	bls.n	80034f4 <HCI_TL_SPI_Send+0x90>
    {
      result = -3;
 80034ec:	f06f 0302 	mvn.w	r3, #2
 80034f0:	61fb      	str	r3, [r7, #28]
      break;
 80034f2:	e002      	b.n	80034fa <HCI_TL_SPI_Send+0x96>
    }
  } while(result < 0);
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	dbc5      	blt.n	8003486 <HCI_TL_SPI_Send+0x22>

  return result;
 80034fa:	69fb      	ldr	r3, [r7, #28]
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3720      	adds	r7, #32
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	08011988 	.word	0x08011988
 8003508:	48000c00 	.word	0x48000c00
 800350c:	2000043c 	.word	0x2000043c

08003510 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8003514:	2140      	movs	r1, #64	@ 0x40
 8003516:	4805      	ldr	r0, [pc, #20]	@ (800352c <IsDataAvailable+0x1c>)
 8003518:	f002 faae 	bl	8005a78 <HAL_GPIO_ReadPin>
 800351c:	4603      	mov	r3, r0
 800351e:	2b01      	cmp	r3, #1
 8003520:	bf0c      	ite	eq
 8003522:	2301      	moveq	r3, #1
 8003524:	2300      	movne	r3, #0
 8003526:	b2db      	uxtb	r3, r3
}
 8003528:	4618      	mov	r0, r3
 800352a:	bd80      	pop	{r7, pc}
 800352c:	48001000 	.word	0x48001000

08003530 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b088      	sub	sp, #32
 8003534:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 8003536:	4b12      	ldr	r3, [pc, #72]	@ (8003580 <hci_tl_lowlevel_init+0x50>)
 8003538:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 800353a:	4b12      	ldr	r3, [pc, #72]	@ (8003584 <hci_tl_lowlevel_init+0x54>)
 800353c:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 800353e:	4b12      	ldr	r3, [pc, #72]	@ (8003588 <hci_tl_lowlevel_init+0x58>)
 8003540:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 8003542:	4b12      	ldr	r3, [pc, #72]	@ (800358c <hci_tl_lowlevel_init+0x5c>)
 8003544:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 8003546:	4b12      	ldr	r3, [pc, #72]	@ (8003590 <hci_tl_lowlevel_init+0x60>)
 8003548:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 800354a:	4b12      	ldr	r3, [pc, #72]	@ (8003594 <hci_tl_lowlevel_init+0x64>)
 800354c:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 800354e:	1d3b      	adds	r3, r7, #4
 8003550:	4618      	mov	r0, r3
 8003552:	f007 fa1f 	bl	800a994 <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti6, EXTI_LINE_6);
 8003556:	4910      	ldr	r1, [pc, #64]	@ (8003598 <hci_tl_lowlevel_init+0x68>)
 8003558:	4810      	ldr	r0, [pc, #64]	@ (800359c <hci_tl_lowlevel_init+0x6c>)
 800355a:	f001 ffab 	bl	80054b4 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti6, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 800355e:	4a10      	ldr	r2, [pc, #64]	@ (80035a0 <hci_tl_lowlevel_init+0x70>)
 8003560:	2100      	movs	r1, #0
 8003562:	480e      	ldr	r0, [pc, #56]	@ (800359c <hci_tl_lowlevel_init+0x6c>)
 8003564:	f001 ff8c 	bl	8005480 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003568:	2200      	movs	r2, #0
 800356a:	2100      	movs	r1, #0
 800356c:	2017      	movs	r0, #23
 800356e:	f001 fe44 	bl	80051fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003572:	2017      	movs	r0, #23
 8003574:	f001 fe5d 	bl	8005232 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 8003578:	bf00      	nop
 800357a:	3720      	adds	r7, #32
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	080032a5 	.word	0x080032a5
 8003584:	08003339 	.word	0x08003339
 8003588:	08003465 	.word	0x08003465
 800358c:	080033ad 	.word	0x080033ad
 8003590:	08003369 	.word	0x08003369
 8003594:	08004af9 	.word	0x08004af9
 8003598:	16000006 	.word	0x16000006
 800359c:	20000434 	.word	0x20000434
 80035a0:	080035a5 	.word	0x080035a5

080035a4 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 80035a8:	e005      	b.n	80035b6 <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 80035aa:	2000      	movs	r0, #0
 80035ac:	f007 fb56 	bl	800ac5c <hci_notify_asynch_evt>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d105      	bne.n	80035c2 <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 80035b6:	f7ff ffab 	bl	8003510 <IsDataAvailable>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d1f4      	bne.n	80035aa <hci_tl_lowlevel_isr+0x6>
 80035c0:	e000      	b.n	80035c4 <hci_tl_lowlevel_isr+0x20>
    {
      return;
 80035c2:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 80035c4:	bd80      	pop	{r7, pc}
	...

080035c8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80035c8:	b480      	push	{r7}
 80035ca:	b085      	sub	sp, #20
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	4a07      	ldr	r2, [pc, #28]	@ (80035f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80035d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	4a06      	ldr	r2, [pc, #24]	@ (80035f8 <vApplicationGetIdleTaskMemory+0x30>)
 80035de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2280      	movs	r2, #128	@ 0x80
 80035e4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80035e6:	bf00      	nop
 80035e8:	3714      	adds	r7, #20
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	2000053c 	.word	0x2000053c
 80035f8:	20000590 	.word	0x20000590

080035fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80035fc:	b5b0      	push	{r4, r5, r7, lr}
 80035fe:	b09c      	sub	sp, #112	@ 0x70
 8003600:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003602:	f001 fc87 	bl	8004f14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003606:	f000 f877 	bl	80036f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800360a:	f000 f993 	bl	8003934 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 800360e:	f000 f8d5 	bl	80037bc <MX_DFSDM1_Init>
  //0MX_I2C2_Init();
  MX_QUADSPI_Init();
 8003612:	f000 f90b 	bl	800382c <MX_QUADSPI_Init>
  MX_USART3_UART_Init();
 8003616:	f000 f92f 	bl	8003878 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800361a:	f000 f95d 	bl	80038d8 <MX_USB_OTG_FS_PCD_Init>
  MX_BlueNRG_MS_Init();
 800361e:	f7fd fce1 	bl	8000fe4 <MX_BlueNRG_MS_Init>

  /* USER CODE BEGIN 2 */
  /* USER CODE BEGIN 2 */

  BinarySem01Handle = osSemaphoreCreate(osSemaphore(BinarySem01), 0); // 初始值為0
 8003622:	2100      	movs	r1, #0
 8003624:	482a      	ldr	r0, [pc, #168]	@ (80036d0 <main+0xd4>)
 8003626:	f007 fcfb 	bl	800b020 <osSemaphoreCreate>
 800362a:	4603      	mov	r3, r0
 800362c:	4a29      	ldr	r2, [pc, #164]	@ (80036d4 <main+0xd8>)
 800362e:	6013      	str	r3, [r2, #0]

  BSP_ACCELERO_Init();
 8003630:	f001 fb04 	bl	8004c3c <BSP_ACCELERO_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadStaticDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 512, defaultTaskBuffer, &defaultTaskControlBlock);
 8003634:	4b28      	ldr	r3, [pc, #160]	@ (80036d8 <main+0xdc>)
 8003636:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 800363a:	461d      	mov	r5, r3
 800363c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800363e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003640:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003644:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8003648:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800364c:	2100      	movs	r1, #0
 800364e:	4618      	mov	r0, r3
 8003650:	f007 fc86 	bl	800af60 <osThreadCreate>
 8003654:	4603      	mov	r3, r0
 8003656:	4a21      	ldr	r2, [pc, #132]	@ (80036dc <main+0xe0>)
 8003658:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadStaticDef(myTask02, StartTask02, osPriorityNormal, 0, 512, myTask02Buffer, &myTask02ControlBlock);
 800365a:	4b21      	ldr	r3, [pc, #132]	@ (80036e0 <main+0xe4>)
 800365c:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8003660:	461d      	mov	r5, r3
 8003662:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003664:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003666:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800366a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 800366e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003672:	2100      	movs	r1, #0
 8003674:	4618      	mov	r0, r3
 8003676:	f007 fc73 	bl	800af60 <osThreadCreate>
 800367a:	4603      	mov	r3, r0
 800367c:	4a19      	ldr	r2, [pc, #100]	@ (80036e4 <main+0xe8>)
 800367e:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadStaticDef(myTask03, StartTask03, osPriorityIdle, 0, 512, myTask03Buffer, &myTask03ControlBlock);
 8003680:	4b19      	ldr	r3, [pc, #100]	@ (80036e8 <main+0xec>)
 8003682:	f107 041c 	add.w	r4, r7, #28
 8003686:	461d      	mov	r5, r3
 8003688:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800368a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800368c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003690:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 8003694:	f107 031c 	add.w	r3, r7, #28
 8003698:	2100      	movs	r1, #0
 800369a:	4618      	mov	r0, r3
 800369c:	f007 fc60 	bl	800af60 <osThreadCreate>
 80036a0:	4603      	mov	r3, r0
 80036a2:	4a12      	ldr	r2, [pc, #72]	@ (80036ec <main+0xf0>)
 80036a4:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask04 */
  osThreadStaticDef(myTask04, StartTask04, osPriorityIdle, 0, 512, myTask04Buffer, &myTask04ControlBlock);
 80036a6:	4b12      	ldr	r3, [pc, #72]	@ (80036f0 <main+0xf4>)
 80036a8:	463c      	mov	r4, r7
 80036aa:	461d      	mov	r5, r3
 80036ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80036ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80036b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80036b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask04Handle = osThreadCreate(osThread(myTask04), NULL);
 80036b8:	463b      	mov	r3, r7
 80036ba:	2100      	movs	r1, #0
 80036bc:	4618      	mov	r0, r3
 80036be:	f007 fc4f 	bl	800af60 <osThreadCreate>
 80036c2:	4603      	mov	r3, r0
 80036c4:	4a0b      	ldr	r2, [pc, #44]	@ (80036f4 <main+0xf8>)
 80036c6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80036c8:	f007 fc43 	bl	800af52 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80036cc:	bf00      	nop
 80036ce:	e7fd      	b.n	80036cc <main+0xd0>
 80036d0:	08011a64 	.word	0x08011a64
 80036d4:	20002ee0 	.word	0x20002ee0
 80036d8:	0801199c 	.word	0x0801199c
 80036dc:	20000d78 	.word	0x20000d78
 80036e0:	080119c4 	.word	0x080119c4
 80036e4:	200015d0 	.word	0x200015d0
 80036e8:	080119ec 	.word	0x080119ec
 80036ec:	20001e28 	.word	0x20001e28
 80036f0:	08011a14 	.word	0x08011a14
 80036f4:	20002680 	.word	0x20002680

080036f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b096      	sub	sp, #88	@ 0x58
 80036fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80036fe:	f107 0314 	add.w	r3, r7, #20
 8003702:	2244      	movs	r2, #68	@ 0x44
 8003704:	2100      	movs	r1, #0
 8003706:	4618      	mov	r0, r3
 8003708:	f00a fc7e 	bl	800e008 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800370c:	463b      	mov	r3, r7
 800370e:	2200      	movs	r2, #0
 8003710:	601a      	str	r2, [r3, #0]
 8003712:	605a      	str	r2, [r3, #4]
 8003714:	609a      	str	r2, [r3, #8]
 8003716:	60da      	str	r2, [r3, #12]
 8003718:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800371a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800371e:	f003 f963 	bl	80069e8 <HAL_PWREx_ControlVoltageScaling>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d001      	beq.n	800372c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8003728:	f000 fb4a 	bl	8003dc0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800372c:	f003 f93e 	bl	80069ac <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8003730:	4b21      	ldr	r3, [pc, #132]	@ (80037b8 <SystemClock_Config+0xc0>)
 8003732:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003736:	4a20      	ldr	r2, [pc, #128]	@ (80037b8 <SystemClock_Config+0xc0>)
 8003738:	f023 0318 	bic.w	r3, r3, #24
 800373c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8003740:	2314      	movs	r3, #20
 8003742:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003744:	2301      	movs	r3, #1
 8003746:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003748:	2301      	movs	r3, #1
 800374a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800374c:	2300      	movs	r3, #0
 800374e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8003750:	2360      	movs	r3, #96	@ 0x60
 8003752:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003754:	2302      	movs	r3, #2
 8003756:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8003758:	2301      	movs	r3, #1
 800375a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800375c:	2301      	movs	r3, #1
 800375e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8003760:	2328      	movs	r3, #40	@ 0x28
 8003762:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003764:	2307      	movs	r3, #7
 8003766:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003768:	2302      	movs	r3, #2
 800376a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800376c:	2302      	movs	r3, #2
 800376e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003770:	f107 0314 	add.w	r3, r7, #20
 8003774:	4618      	mov	r0, r3
 8003776:	f003 fa59 	bl	8006c2c <HAL_RCC_OscConfig>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d001      	beq.n	8003784 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8003780:	f000 fb1e 	bl	8003dc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003784:	230f      	movs	r3, #15
 8003786:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003788:	2303      	movs	r3, #3
 800378a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800378c:	2300      	movs	r3, #0
 800378e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003790:	2300      	movs	r3, #0
 8003792:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003794:	2300      	movs	r3, #0
 8003796:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003798:	463b      	mov	r3, r7
 800379a:	2104      	movs	r1, #4
 800379c:	4618      	mov	r0, r3
 800379e:	f003 fe21 	bl	80073e4 <HAL_RCC_ClockConfig>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d001      	beq.n	80037ac <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80037a8:	f000 fb0a 	bl	8003dc0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80037ac:	f004 fb28 	bl	8007e00 <HAL_RCCEx_EnableMSIPLLMode>
}
 80037b0:	bf00      	nop
 80037b2:	3758      	adds	r7, #88	@ 0x58
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	40021000 	.word	0x40021000

080037bc <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80037c0:	4b18      	ldr	r3, [pc, #96]	@ (8003824 <MX_DFSDM1_Init+0x68>)
 80037c2:	4a19      	ldr	r2, [pc, #100]	@ (8003828 <MX_DFSDM1_Init+0x6c>)
 80037c4:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80037c6:	4b17      	ldr	r3, [pc, #92]	@ (8003824 <MX_DFSDM1_Init+0x68>)
 80037c8:	2201      	movs	r2, #1
 80037ca:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80037cc:	4b15      	ldr	r3, [pc, #84]	@ (8003824 <MX_DFSDM1_Init+0x68>)
 80037ce:	2200      	movs	r2, #0
 80037d0:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80037d2:	4b14      	ldr	r3, [pc, #80]	@ (8003824 <MX_DFSDM1_Init+0x68>)
 80037d4:	2202      	movs	r2, #2
 80037d6:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80037d8:	4b12      	ldr	r3, [pc, #72]	@ (8003824 <MX_DFSDM1_Init+0x68>)
 80037da:	2200      	movs	r2, #0
 80037dc:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80037de:	4b11      	ldr	r3, [pc, #68]	@ (8003824 <MX_DFSDM1_Init+0x68>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80037e4:	4b0f      	ldr	r3, [pc, #60]	@ (8003824 <MX_DFSDM1_Init+0x68>)
 80037e6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80037ea:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80037ec:	4b0d      	ldr	r3, [pc, #52]	@ (8003824 <MX_DFSDM1_Init+0x68>)
 80037ee:	2200      	movs	r2, #0
 80037f0:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80037f2:	4b0c      	ldr	r3, [pc, #48]	@ (8003824 <MX_DFSDM1_Init+0x68>)
 80037f4:	2204      	movs	r2, #4
 80037f6:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80037f8:	4b0a      	ldr	r3, [pc, #40]	@ (8003824 <MX_DFSDM1_Init+0x68>)
 80037fa:	2200      	movs	r2, #0
 80037fc:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80037fe:	4b09      	ldr	r3, [pc, #36]	@ (8003824 <MX_DFSDM1_Init+0x68>)
 8003800:	2201      	movs	r2, #1
 8003802:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8003804:	4b07      	ldr	r3, [pc, #28]	@ (8003824 <MX_DFSDM1_Init+0x68>)
 8003806:	2200      	movs	r2, #0
 8003808:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 800380a:	4b06      	ldr	r3, [pc, #24]	@ (8003824 <MX_DFSDM1_Init+0x68>)
 800380c:	2200      	movs	r2, #0
 800380e:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8003810:	4804      	ldr	r0, [pc, #16]	@ (8003824 <MX_DFSDM1_Init+0x68>)
 8003812:	f001 fd29 	bl	8005268 <HAL_DFSDM_ChannelInit>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d001      	beq.n	8003820 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 800381c:	f000 fad0 	bl	8003dc0 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8003820:	bf00      	nop
 8003822:	bd80      	pop	{r7, pc}
 8003824:	20000790 	.word	0x20000790
 8003828:	40016020 	.word	0x40016020

0800382c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8003830:	4b0f      	ldr	r3, [pc, #60]	@ (8003870 <MX_QUADSPI_Init+0x44>)
 8003832:	4a10      	ldr	r2, [pc, #64]	@ (8003874 <MX_QUADSPI_Init+0x48>)
 8003834:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8003836:	4b0e      	ldr	r3, [pc, #56]	@ (8003870 <MX_QUADSPI_Init+0x44>)
 8003838:	2202      	movs	r2, #2
 800383a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 800383c:	4b0c      	ldr	r3, [pc, #48]	@ (8003870 <MX_QUADSPI_Init+0x44>)
 800383e:	2204      	movs	r2, #4
 8003840:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8003842:	4b0b      	ldr	r3, [pc, #44]	@ (8003870 <MX_QUADSPI_Init+0x44>)
 8003844:	2210      	movs	r2, #16
 8003846:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8003848:	4b09      	ldr	r3, [pc, #36]	@ (8003870 <MX_QUADSPI_Init+0x44>)
 800384a:	2217      	movs	r2, #23
 800384c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800384e:	4b08      	ldr	r3, [pc, #32]	@ (8003870 <MX_QUADSPI_Init+0x44>)
 8003850:	2200      	movs	r2, #0
 8003852:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8003854:	4b06      	ldr	r3, [pc, #24]	@ (8003870 <MX_QUADSPI_Init+0x44>)
 8003856:	2200      	movs	r2, #0
 8003858:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800385a:	4805      	ldr	r0, [pc, #20]	@ (8003870 <MX_QUADSPI_Init+0x44>)
 800385c:	f003 f92a 	bl	8006ab4 <HAL_QSPI_Init>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d001      	beq.n	800386a <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8003866:	f000 faab 	bl	8003dc0 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800386a:	bf00      	nop
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	200007c8 	.word	0x200007c8
 8003874:	a0001000 	.word	0xa0001000

08003878 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800387c:	4b14      	ldr	r3, [pc, #80]	@ (80038d0 <MX_USART3_UART_Init+0x58>)
 800387e:	4a15      	ldr	r2, [pc, #84]	@ (80038d4 <MX_USART3_UART_Init+0x5c>)
 8003880:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003882:	4b13      	ldr	r3, [pc, #76]	@ (80038d0 <MX_USART3_UART_Init+0x58>)
 8003884:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003888:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800388a:	4b11      	ldr	r3, [pc, #68]	@ (80038d0 <MX_USART3_UART_Init+0x58>)
 800388c:	2200      	movs	r2, #0
 800388e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003890:	4b0f      	ldr	r3, [pc, #60]	@ (80038d0 <MX_USART3_UART_Init+0x58>)
 8003892:	2200      	movs	r2, #0
 8003894:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003896:	4b0e      	ldr	r3, [pc, #56]	@ (80038d0 <MX_USART3_UART_Init+0x58>)
 8003898:	2200      	movs	r2, #0
 800389a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800389c:	4b0c      	ldr	r3, [pc, #48]	@ (80038d0 <MX_USART3_UART_Init+0x58>)
 800389e:	220c      	movs	r2, #12
 80038a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80038a2:	4b0b      	ldr	r3, [pc, #44]	@ (80038d0 <MX_USART3_UART_Init+0x58>)
 80038a4:	2200      	movs	r2, #0
 80038a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80038a8:	4b09      	ldr	r3, [pc, #36]	@ (80038d0 <MX_USART3_UART_Init+0x58>)
 80038aa:	2200      	movs	r2, #0
 80038ac:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80038ae:	4b08      	ldr	r3, [pc, #32]	@ (80038d0 <MX_USART3_UART_Init+0x58>)
 80038b0:	2200      	movs	r2, #0
 80038b2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80038b4:	4b06      	ldr	r3, [pc, #24]	@ (80038d0 <MX_USART3_UART_Init+0x58>)
 80038b6:	2200      	movs	r2, #0
 80038b8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80038ba:	4805      	ldr	r0, [pc, #20]	@ (80038d0 <MX_USART3_UART_Init+0x58>)
 80038bc:	f005 f8c0 	bl	8008a40 <HAL_UART_Init>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80038c6:	f000 fa7b 	bl	8003dc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80038ca:	bf00      	nop
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	2000080c 	.word	0x2000080c
 80038d4:	40004800 	.word	0x40004800

080038d8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80038dc:	4b14      	ldr	r3, [pc, #80]	@ (8003930 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80038de:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80038e2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80038e4:	4b12      	ldr	r3, [pc, #72]	@ (8003930 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80038e6:	2206      	movs	r2, #6
 80038e8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80038ea:	4b11      	ldr	r3, [pc, #68]	@ (8003930 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80038ec:	2202      	movs	r2, #2
 80038ee:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80038f0:	4b0f      	ldr	r3, [pc, #60]	@ (8003930 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80038f2:	2202      	movs	r2, #2
 80038f4:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80038f6:	4b0e      	ldr	r3, [pc, #56]	@ (8003930 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80038fc:	4b0c      	ldr	r3, [pc, #48]	@ (8003930 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80038fe:	2200      	movs	r2, #0
 8003900:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8003902:	4b0b      	ldr	r3, [pc, #44]	@ (8003930 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003904:	2200      	movs	r2, #0
 8003906:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8003908:	4b09      	ldr	r3, [pc, #36]	@ (8003930 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800390a:	2200      	movs	r2, #0
 800390c:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800390e:	4b08      	ldr	r3, [pc, #32]	@ (8003930 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003910:	2200      	movs	r2, #0
 8003912:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8003914:	4b06      	ldr	r3, [pc, #24]	@ (8003930 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003916:	2200      	movs	r2, #0
 8003918:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800391a:	4805      	ldr	r0, [pc, #20]	@ (8003930 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800391c:	f002 ff13 	bl	8006746 <HAL_PCD_Init>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d001      	beq.n	800392a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8003926:	f000 fa4b 	bl	8003dc0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800392a:	bf00      	nop
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	20000894 	.word	0x20000894

08003934 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b08a      	sub	sp, #40	@ 0x28
 8003938:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800393a:	f107 0314 	add.w	r3, r7, #20
 800393e:	2200      	movs	r2, #0
 8003940:	601a      	str	r2, [r3, #0]
 8003942:	605a      	str	r2, [r3, #4]
 8003944:	609a      	str	r2, [r3, #8]
 8003946:	60da      	str	r2, [r3, #12]
 8003948:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800394a:	4bbd      	ldr	r3, [pc, #756]	@ (8003c40 <MX_GPIO_Init+0x30c>)
 800394c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800394e:	4abc      	ldr	r2, [pc, #752]	@ (8003c40 <MX_GPIO_Init+0x30c>)
 8003950:	f043 0310 	orr.w	r3, r3, #16
 8003954:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003956:	4bba      	ldr	r3, [pc, #744]	@ (8003c40 <MX_GPIO_Init+0x30c>)
 8003958:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800395a:	f003 0310 	and.w	r3, r3, #16
 800395e:	613b      	str	r3, [r7, #16]
 8003960:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003962:	4bb7      	ldr	r3, [pc, #732]	@ (8003c40 <MX_GPIO_Init+0x30c>)
 8003964:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003966:	4ab6      	ldr	r2, [pc, #728]	@ (8003c40 <MX_GPIO_Init+0x30c>)
 8003968:	f043 0304 	orr.w	r3, r3, #4
 800396c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800396e:	4bb4      	ldr	r3, [pc, #720]	@ (8003c40 <MX_GPIO_Init+0x30c>)
 8003970:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003972:	f003 0304 	and.w	r3, r3, #4
 8003976:	60fb      	str	r3, [r7, #12]
 8003978:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800397a:	4bb1      	ldr	r3, [pc, #708]	@ (8003c40 <MX_GPIO_Init+0x30c>)
 800397c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800397e:	4ab0      	ldr	r2, [pc, #704]	@ (8003c40 <MX_GPIO_Init+0x30c>)
 8003980:	f043 0301 	orr.w	r3, r3, #1
 8003984:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003986:	4bae      	ldr	r3, [pc, #696]	@ (8003c40 <MX_GPIO_Init+0x30c>)
 8003988:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	60bb      	str	r3, [r7, #8]
 8003990:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003992:	4bab      	ldr	r3, [pc, #684]	@ (8003c40 <MX_GPIO_Init+0x30c>)
 8003994:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003996:	4aaa      	ldr	r2, [pc, #680]	@ (8003c40 <MX_GPIO_Init+0x30c>)
 8003998:	f043 0302 	orr.w	r3, r3, #2
 800399c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800399e:	4ba8      	ldr	r3, [pc, #672]	@ (8003c40 <MX_GPIO_Init+0x30c>)
 80039a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	607b      	str	r3, [r7, #4]
 80039a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80039aa:	4ba5      	ldr	r3, [pc, #660]	@ (8003c40 <MX_GPIO_Init+0x30c>)
 80039ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039ae:	4aa4      	ldr	r2, [pc, #656]	@ (8003c40 <MX_GPIO_Init+0x30c>)
 80039b0:	f043 0308 	orr.w	r3, r3, #8
 80039b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80039b6:	4ba2      	ldr	r3, [pc, #648]	@ (8003c40 <MX_GPIO_Init+0x30c>)
 80039b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039ba:	f003 0308 	and.w	r3, r3, #8
 80039be:	603b      	str	r3, [r7, #0]
 80039c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 80039c2:	2200      	movs	r2, #0
 80039c4:	f44f 718a 	mov.w	r1, #276	@ 0x114
 80039c8:	489e      	ldr	r0, [pc, #632]	@ (8003c44 <MX_GPIO_Init+0x310>)
 80039ca:	f002 f86d 	bl	8005aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 80039ce:	2200      	movs	r2, #0
 80039d0:	f248 1104 	movw	r1, #33028	@ 0x8104
 80039d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80039d8:	f002 f866 	bl	8005aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80039dc:	2200      	movs	r2, #0
 80039de:	f24f 0114 	movw	r1, #61460	@ 0xf014
 80039e2:	4899      	ldr	r0, [pc, #612]	@ (8003c48 <MX_GPIO_Init+0x314>)
 80039e4:	f002 f860 	bl	8005aa8 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 80039e8:	2200      	movs	r2, #0
 80039ea:	f241 0181 	movw	r1, #4225	@ 0x1081
 80039ee:	4897      	ldr	r0, [pc, #604]	@ (8003c4c <MX_GPIO_Init+0x318>)
 80039f0:	f002 f85a 	bl	8005aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 80039f4:	2201      	movs	r2, #1
 80039f6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80039fa:	4894      	ldr	r0, [pc, #592]	@ (8003c4c <MX_GPIO_Init+0x318>)
 80039fc:	f002 f854 	bl	8005aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8003a00:	2200      	movs	r2, #0
 8003a02:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8003a06:	4892      	ldr	r0, [pc, #584]	@ (8003c50 <MX_GPIO_Init+0x31c>)
 8003a08:	f002 f84e 	bl	8005aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	2120      	movs	r1, #32
 8003a10:	488d      	ldr	r0, [pc, #564]	@ (8003c48 <MX_GPIO_Init+0x314>)
 8003a12:	f002 f849 	bl	8005aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8003a16:	2201      	movs	r2, #1
 8003a18:	2101      	movs	r1, #1
 8003a1a:	488a      	ldr	r0, [pc, #552]	@ (8003c44 <MX_GPIO_Init+0x310>)
 8003a1c:	f002 f844 	bl	8005aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8003a20:	f240 1315 	movw	r3, #277	@ 0x115
 8003a24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a26:	2301      	movs	r3, #1
 8003a28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003a32:	f107 0314 	add.w	r3, r7, #20
 8003a36:	4619      	mov	r1, r3
 8003a38:	4882      	ldr	r0, [pc, #520]	@ (8003c44 <MX_GPIO_Init+0x310>)
 8003a3a:	f001 fd7f 	bl	800553c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8003a3e:	236a      	movs	r3, #106	@ 0x6a
 8003a40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003a42:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003a46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003a4c:	f107 0314 	add.w	r3, r7, #20
 8003a50:	4619      	mov	r1, r3
 8003a52:	487c      	ldr	r0, [pc, #496]	@ (8003c44 <MX_GPIO_Init+0x310>)
 8003a54:	f001 fd72 	bl	800553c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);*/

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8003a58:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003a5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003a5e:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8003a62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a64:	2300      	movs	r3, #0
 8003a66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8003a68:	f107 0314 	add.w	r3, r7, #20
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	4878      	ldr	r0, [pc, #480]	@ (8003c50 <MX_GPIO_Init+0x31c>)
 8003a70:	f001 fd64 	bl	800553c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8003a74:	233f      	movs	r3, #63	@ 0x3f
 8003a76:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003a78:	230b      	movs	r3, #11
 8003a7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a80:	f107 0314 	add.w	r3, r7, #20
 8003a84:	4619      	mov	r1, r3
 8003a86:	4872      	ldr	r0, [pc, #456]	@ (8003c50 <MX_GPIO_Init+0x31c>)
 8003a88:	f001 fd58 	bl	800553c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a90:	2302      	movs	r3, #2
 8003a92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a94:	2300      	movs	r3, #0
 8003a96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003a9c:	2308      	movs	r3, #8
 8003a9e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003aa0:	f107 0314 	add.w	r3, r7, #20
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003aaa:	f001 fd47 	bl	800553c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8003aae:	f248 1304 	movw	r3, #33028	@ 0x8104
 8003ab2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003abc:	2300      	movs	r3, #0
 8003abe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ac0:	f107 0314 	add.w	r3, r7, #20
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003aca:	f001 fd37 	bl	800553c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8003ace:	2308      	movs	r3, #8
 8003ad0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ad2:	2302      	movs	r3, #2
 8003ad4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ada:	2300      	movs	r3, #0
 8003adc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8003ae2:	f107 0314 	add.w	r3, r7, #20
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003aec:	f001 fd26 	bl	800553c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8003af0:	2310      	movs	r3, #16
 8003af2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003af4:	230b      	movs	r3, #11
 8003af6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003af8:	2300      	movs	r3, #0
 8003afa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8003afc:	f107 0314 	add.w	r3, r7, #20
 8003b00:	4619      	mov	r1, r3
 8003b02:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003b06:	f001 fd19 	bl	800553c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8003b0a:	23e0      	movs	r3, #224	@ 0xe0
 8003b0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b0e:	2302      	movs	r3, #2
 8003b10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b12:	2300      	movs	r3, #0
 8003b14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b16:	2303      	movs	r3, #3
 8003b18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003b1a:	2305      	movs	r3, #5
 8003b1c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b1e:	f107 0314 	add.w	r3, r7, #20
 8003b22:	4619      	mov	r1, r3
 8003b24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003b28:	f001 fd08 	bl	800553c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003b30:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003b34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b36:	2300      	movs	r3, #0
 8003b38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8003b3a:	f107 0314 	add.w	r3, r7, #20
 8003b3e:	4619      	mov	r1, r3
 8003b40:	4841      	ldr	r0, [pc, #260]	@ (8003c48 <MX_GPIO_Init+0x314>)
 8003b42:	f001 fcfb 	bl	800553c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8003b46:	2302      	movs	r3, #2
 8003b48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003b4a:	230b      	movs	r3, #11
 8003b4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8003b52:	f107 0314 	add.w	r3, r7, #20
 8003b56:	4619      	mov	r1, r3
 8003b58:	483b      	ldr	r0, [pc, #236]	@ (8003c48 <MX_GPIO_Init+0x314>)
 8003b5a:	f001 fcef 	bl	800553c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8003b5e:	f24f 0334 	movw	r3, #61492	@ 0xf034
 8003b62:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b64:	2301      	movs	r3, #1
 8003b66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b70:	f107 0314 	add.w	r3, r7, #20
 8003b74:	4619      	mov	r1, r3
 8003b76:	4834      	ldr	r0, [pc, #208]	@ (8003c48 <MX_GPIO_Init+0x314>)
 8003b78:	f001 fce0 	bl	800553c <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8003b7c:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 8003b80:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003b82:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003b86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b8c:	f107 0314 	add.w	r3, r7, #20
 8003b90:	4619      	mov	r1, r3
 8003b92:	482e      	ldr	r0, [pc, #184]	@ (8003c4c <MX_GPIO_Init+0x318>)
 8003b94:	f001 fcd2 	bl	800553c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8003b98:	f243 0381 	movw	r3, #12417	@ 0x3081
 8003b9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003baa:	f107 0314 	add.w	r3, r7, #20
 8003bae:	4619      	mov	r1, r3
 8003bb0:	4826      	ldr	r0, [pc, #152]	@ (8003c4c <MX_GPIO_Init+0x318>)
 8003bb2:	f001 fcc3 	bl	800553c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8003bb6:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8003bba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bc8:	f107 0314 	add.w	r3, r7, #20
 8003bcc:	4619      	mov	r1, r3
 8003bce:	4820      	ldr	r0, [pc, #128]	@ (8003c50 <MX_GPIO_Init+0x31c>)
 8003bd0:	f001 fcb4 	bl	800553c <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8003bd4:	2302      	movs	r3, #2
 8003bd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bd8:	2302      	movs	r3, #2
 8003bda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003be0:	2303      	movs	r3, #3
 8003be2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003be4:	2305      	movs	r3, #5
 8003be6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8003be8:	f107 0314 	add.w	r3, r7, #20
 8003bec:	4619      	mov	r1, r3
 8003bee:	4817      	ldr	r0, [pc, #92]	@ (8003c4c <MX_GPIO_Init+0x318>)
 8003bf0:	f001 fca4 	bl	800553c <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8003bf4:	2378      	movs	r3, #120	@ 0x78
 8003bf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bf8:	2302      	movs	r3, #2
 8003bfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c00:	2303      	movs	r3, #3
 8003c02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003c04:	2307      	movs	r3, #7
 8003c06:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003c08:	f107 0314 	add.w	r3, r7, #20
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	480f      	ldr	r0, [pc, #60]	@ (8003c4c <MX_GPIO_Init+0x318>)
 8003c10:	f001 fc94 	bl	800553c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8003c14:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003c18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c1a:	2312      	movs	r3, #18
 8003c1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c22:	2303      	movs	r3, #3
 8003c24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003c26:	2304      	movs	r3, #4
 8003c28:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c2a:	f107 0314 	add.w	r3, r7, #20
 8003c2e:	4619      	mov	r1, r3
 8003c30:	4805      	ldr	r0, [pc, #20]	@ (8003c48 <MX_GPIO_Init+0x314>)
 8003c32:	f001 fc83 	bl	800553c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8003c36:	2200      	movs	r2, #0
 8003c38:	2105      	movs	r1, #5
 8003c3a:	2017      	movs	r0, #23
 8003c3c:	e00a      	b.n	8003c54 <MX_GPIO_Init+0x320>
 8003c3e:	bf00      	nop
 8003c40:	40021000 	.word	0x40021000
 8003c44:	48001000 	.word	0x48001000
 8003c48:	48000400 	.word	0x48000400
 8003c4c:	48000c00 	.word	0x48000c00
 8003c50:	48000800 	.word	0x48000800
 8003c54:	f001 fad1 	bl	80051fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003c58:	2017      	movs	r0, #23
 8003c5a:	f001 faea 	bl	8005232 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8003c5e:	2200      	movs	r2, #0
 8003c60:	2105      	movs	r1, #5
 8003c62:	2028      	movs	r0, #40	@ 0x28
 8003c64:	f001 fac9 	bl	80051fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003c68:	2028      	movs	r0, #40	@ 0x28
 8003c6a:	f001 fae2 	bl	8005232 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003c6e:	bf00      	nop
 8003c70:	3728      	adds	r7, #40	@ 0x28
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop

08003c78 <HAL_GPIO_EXTI_Callback>:


/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	4603      	mov	r3, r0
 8003c80:	80fb      	strh	r3, [r7, #6]
		ACC_DATA_Update(pin);
		printf("Button pressed!\n");
	}*/
 // 檢查是哪個按鈕被按下

	if (GPIO_Pin == BUTTON_EXTI13_Pin){
 8003c82:	88fb      	ldrh	r3, [r7, #6]
 8003c84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c88:	d12a      	bne.n	8003ce0 <HAL_GPIO_EXTI_Callback+0x68>
		//printf("hello \n");
		if (HAL_GPIO_ReadPin(BUTTON_EXTI13_GPIO_Port, BUTTON_EXTI13_Pin) == 0){
 8003c8a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003c8e:	4816      	ldr	r0, [pc, #88]	@ (8003ce8 <HAL_GPIO_EXTI_Callback+0x70>)
 8003c90:	f001 fef2 	bl	8005a78 <HAL_GPIO_ReadPin>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d108      	bne.n	8003cac <HAL_GPIO_EXTI_Callback+0x34>
			 buttonPressTime = xTaskGetTickCount();
 8003c9a:	f008 f89b 	bl	800bdd4 <xTaskGetTickCount>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	4a12      	ldr	r2, [pc, #72]	@ (8003cec <HAL_GPIO_EXTI_Callback+0x74>)
 8003ca2:	6013      	str	r3, [r2, #0]
			 buttonState = 1;
 8003ca4:	4b12      	ldr	r3, [pc, #72]	@ (8003cf0 <HAL_GPIO_EXTI_Callback+0x78>)
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	701a      	strb	r2, [r3, #0]
		       }
		   }
		}

	}
}
 8003caa:	e019      	b.n	8003ce0 <HAL_GPIO_EXTI_Callback+0x68>
		   if (buttonState == 1) {
 8003cac:	4b10      	ldr	r3, [pc, #64]	@ (8003cf0 <HAL_GPIO_EXTI_Callback+0x78>)
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d114      	bne.n	8003ce0 <HAL_GPIO_EXTI_Callback+0x68>
		        uint32_t pressDuration = xTaskGetTickCount() - buttonPressTime;
 8003cb6:	f008 f88d 	bl	800bdd4 <xTaskGetTickCount>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	4b0b      	ldr	r3, [pc, #44]	@ (8003cec <HAL_GPIO_EXTI_Callback+0x74>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	60fb      	str	r3, [r7, #12]
		       buttonState = 0;
 8003cc4:	4b0a      	ldr	r3, [pc, #40]	@ (8003cf0 <HAL_GPIO_EXTI_Callback+0x78>)
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	701a      	strb	r2, [r3, #0]
		       if(  pressDuration >= pdMS_TO_TICKS(1000) ){
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003cd0:	d303      	bcc.n	8003cda <HAL_GPIO_EXTI_Callback+0x62>
		 		  button_pressed = 2;
 8003cd2:	4b08      	ldr	r3, [pc, #32]	@ (8003cf4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8003cd4:	2202      	movs	r2, #2
 8003cd6:	701a      	strb	r2, [r3, #0]
}
 8003cd8:	e002      	b.n	8003ce0 <HAL_GPIO_EXTI_Callback+0x68>
		 		  button_pressed = 1;
 8003cda:	4b06      	ldr	r3, [pc, #24]	@ (8003cf4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8003cdc:	2201      	movs	r2, #1
 8003cde:	701a      	strb	r2, [r3, #0]
}
 8003ce0:	bf00      	nop
 8003ce2:	3710      	adds	r7, #16
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	48000800 	.word	0x48000800
 8003cec:	20002edc 	.word	0x20002edc
 8003cf0:	20002ed9 	.word	0x20002ed9
 8003cf4:	20002ed8 	.word	0x20002ed8

08003cf8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	MX_BlueNRG_MS_Process();
 8003d00:	f7fd fa5e 	bl	80011c0 <MX_BlueNRG_MS_Process>
    osDelay(110);
 8003d04:	206e      	movs	r0, #110	@ 0x6e
 8003d06:	f007 f977 	bl	800aff8 <osDelay>
	MX_BlueNRG_MS_Process();
 8003d0a:	bf00      	nop
 8003d0c:	e7f8      	b.n	8003d00 <StartDefaultTask+0x8>
	...

08003d10 <StartTask02>:
*/
/* USER CODE END Header_StartTask02 */
uint8_t sample_rate = 1;
uint8_t cnt = 0;
void StartTask02(void const * argument)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {

	  if (button_pressed == 1)
 8003d18:	4b18      	ldr	r3, [pc, #96]	@ (8003d7c <StartTask02+0x6c>)
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d10c      	bne.n	8003d3c <StartTask02+0x2c>
	  {
		  // 處理按鈕按下事件
		  printf("one button press...\n");
 8003d22:	4817      	ldr	r0, [pc, #92]	@ (8003d80 <StartTask02+0x70>)
 8003d24:	f00a f870 	bl	800de08 <puts>
		  ACC_DATA_Update(button_pressed);
 8003d28:	4b14      	ldr	r3, [pc, #80]	@ (8003d7c <StartTask02+0x6c>)
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7fe ff8c 	bl	8002c4c <ACC_DATA_Update>
		  // 重置標誌位，避免重複處理
		  button_pressed = 0;
 8003d34:	4b11      	ldr	r3, [pc, #68]	@ (8003d7c <StartTask02+0x6c>)
 8003d36:	2200      	movs	r2, #0
 8003d38:	701a      	strb	r2, [r3, #0]
 8003d3a:	e010      	b.n	8003d5e <StartTask02+0x4e>

	  }

	  else if(button_pressed == 2){
 8003d3c:	4b0f      	ldr	r3, [pc, #60]	@ (8003d7c <StartTask02+0x6c>)
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d10b      	bne.n	8003d5e <StartTask02+0x4e>

		  printf("long button press...\n");
 8003d46:	480f      	ldr	r0, [pc, #60]	@ (8003d84 <StartTask02+0x74>)
 8003d48:	f00a f85e 	bl	800de08 <puts>
		  ACC_DATA_Update(button_pressed);
 8003d4c:	4b0b      	ldr	r3, [pc, #44]	@ (8003d7c <StartTask02+0x6c>)
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	4618      	mov	r0, r3
 8003d54:	f7fe ff7a 	bl	8002c4c <ACC_DATA_Update>
		  button_pressed = 0;
 8003d58:	4b08      	ldr	r3, [pc, #32]	@ (8003d7c <StartTask02+0x6c>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	701a      	strb	r2, [r3, #0]
	  }


	  cnt =sample_rate +1;
 8003d5e:	4b0a      	ldr	r3, [pc, #40]	@ (8003d88 <StartTask02+0x78>)
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	3301      	adds	r3, #1
 8003d64:	b2da      	uxtb	r2, r3
 8003d66:	4b09      	ldr	r3, [pc, #36]	@ (8003d8c <StartTask02+0x7c>)
 8003d68:	701a      	strb	r2, [r3, #0]
	  osDelay(100);
 8003d6a:	2064      	movs	r0, #100	@ 0x64
 8003d6c:	f007 f944 	bl	800aff8 <osDelay>
	  int d = 0 ;
 8003d70:	2300      	movs	r3, #0
 8003d72:	60fb      	str	r3, [r7, #12]
	  ACC_DATA_Update(d);
 8003d74:	68f8      	ldr	r0, [r7, #12]
 8003d76:	f7fe ff69 	bl	8002c4c <ACC_DATA_Update>
  {
 8003d7a:	e7cd      	b.n	8003d18 <StartTask02+0x8>
 8003d7c:	20002ed8 	.word	0x20002ed8
 8003d80:	08011a30 	.word	0x08011a30
 8003d84:	08011a44 	.word	0x08011a44
 8003d88:	20000001 	.word	0x20000001
 8003d8c:	20002ee4 	.word	0x20002ee4

08003d90 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(20);
 8003d98:	2014      	movs	r0, #20
 8003d9a:	f007 f92d 	bl	800aff8 <osDelay>
 8003d9e:	e7fb      	b.n	8003d98 <StartTask03+0x8>

08003da0 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void const * argument)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOB, LED2_Pin);
 8003da8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003dac:	4803      	ldr	r0, [pc, #12]	@ (8003dbc <StartTask04+0x1c>)
 8003dae:	f001 fe93 	bl	8005ad8 <HAL_GPIO_TogglePin>

	//printf("task4");
    osDelay(50);
 8003db2:	2032      	movs	r0, #50	@ 0x32
 8003db4:	f007 f920 	bl	800aff8 <osDelay>
	HAL_GPIO_TogglePin(GPIOB, LED2_Pin);
 8003db8:	bf00      	nop
 8003dba:	e7f5      	b.n	8003da8 <StartTask04+0x8>
 8003dbc:	48000400 	.word	0x48000400

08003dc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003dc4:	b672      	cpsid	i
}
 8003dc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003dc8:	bf00      	nop
 8003dca:	e7fd      	b.n	8003dc8 <Error_Handler+0x8>

08003dcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dd2:	4b11      	ldr	r3, [pc, #68]	@ (8003e18 <HAL_MspInit+0x4c>)
 8003dd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dd6:	4a10      	ldr	r2, [pc, #64]	@ (8003e18 <HAL_MspInit+0x4c>)
 8003dd8:	f043 0301 	orr.w	r3, r3, #1
 8003ddc:	6613      	str	r3, [r2, #96]	@ 0x60
 8003dde:	4b0e      	ldr	r3, [pc, #56]	@ (8003e18 <HAL_MspInit+0x4c>)
 8003de0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003de2:	f003 0301 	and.w	r3, r3, #1
 8003de6:	607b      	str	r3, [r7, #4]
 8003de8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003dea:	4b0b      	ldr	r3, [pc, #44]	@ (8003e18 <HAL_MspInit+0x4c>)
 8003dec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dee:	4a0a      	ldr	r2, [pc, #40]	@ (8003e18 <HAL_MspInit+0x4c>)
 8003df0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003df4:	6593      	str	r3, [r2, #88]	@ 0x58
 8003df6:	4b08      	ldr	r3, [pc, #32]	@ (8003e18 <HAL_MspInit+0x4c>)
 8003df8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dfe:	603b      	str	r3, [r7, #0]
 8003e00:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003e02:	2200      	movs	r2, #0
 8003e04:	210f      	movs	r1, #15
 8003e06:	f06f 0001 	mvn.w	r0, #1
 8003e0a:	f001 f9f6 	bl	80051fa <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e0e:	bf00      	nop
 8003e10:	3708      	adds	r7, #8
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	40021000 	.word	0x40021000

08003e1c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b0ac      	sub	sp, #176	@ 0xb0
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e24:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003e28:	2200      	movs	r2, #0
 8003e2a:	601a      	str	r2, [r3, #0]
 8003e2c:	605a      	str	r2, [r3, #4]
 8003e2e:	609a      	str	r2, [r3, #8]
 8003e30:	60da      	str	r2, [r3, #12]
 8003e32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003e34:	f107 0314 	add.w	r3, r7, #20
 8003e38:	2288      	movs	r2, #136	@ 0x88
 8003e3a:	2100      	movs	r1, #0
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f00a f8e3 	bl	800e008 <memset>
  if(DFSDM1_Init == 0)
 8003e42:	4b25      	ldr	r3, [pc, #148]	@ (8003ed8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d142      	bne.n	8003ed0 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8003e4a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003e4e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8003e50:	2300      	movs	r3, #0
 8003e52:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003e56:	f107 0314 	add.w	r3, r7, #20
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f003 fce6 	bl	800782c <HAL_RCCEx_PeriphCLKConfig>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d001      	beq.n	8003e6a <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8003e66:	f7ff ffab 	bl	8003dc0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8003e6a:	4b1c      	ldr	r3, [pc, #112]	@ (8003edc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8003e6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e6e:	4a1b      	ldr	r2, [pc, #108]	@ (8003edc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8003e70:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e74:	6613      	str	r3, [r2, #96]	@ 0x60
 8003e76:	4b19      	ldr	r3, [pc, #100]	@ (8003edc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8003e78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e7a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e7e:	613b      	str	r3, [r7, #16]
 8003e80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003e82:	4b16      	ldr	r3, [pc, #88]	@ (8003edc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8003e84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e86:	4a15      	ldr	r2, [pc, #84]	@ (8003edc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8003e88:	f043 0310 	orr.w	r3, r3, #16
 8003e8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e8e:	4b13      	ldr	r3, [pc, #76]	@ (8003edc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8003e90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e92:	f003 0310 	and.w	r3, r3, #16
 8003e96:	60fb      	str	r3, [r7, #12]
 8003e98:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8003e9a:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8003e9e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ea2:	2302      	movs	r3, #2
 8003ea4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8003eb4:	2306      	movs	r3, #6
 8003eb6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003eba:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	4807      	ldr	r0, [pc, #28]	@ (8003ee0 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8003ec2:	f001 fb3b 	bl	800553c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 8003ec6:	4b04      	ldr	r3, [pc, #16]	@ (8003ed8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	3301      	adds	r3, #1
 8003ecc:	4a02      	ldr	r2, [pc, #8]	@ (8003ed8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8003ece:	6013      	str	r3, [r2, #0]
  }

}
 8003ed0:	bf00      	nop
 8003ed2:	37b0      	adds	r7, #176	@ 0xb0
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	20002ee8 	.word	0x20002ee8
 8003edc:	40021000 	.word	0x40021000
 8003ee0:	48001000 	.word	0x48001000

08003ee4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b0ac      	sub	sp, #176	@ 0xb0
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003eec:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	601a      	str	r2, [r3, #0]
 8003ef4:	605a      	str	r2, [r3, #4]
 8003ef6:	609a      	str	r2, [r3, #8]
 8003ef8:	60da      	str	r2, [r3, #12]
 8003efa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003efc:	f107 0314 	add.w	r3, r7, #20
 8003f00:	2288      	movs	r2, #136	@ 0x88
 8003f02:	2100      	movs	r1, #0
 8003f04:	4618      	mov	r0, r3
 8003f06:	f00a f87f 	bl	800e008 <memset>
  if(hi2c->Instance==I2C2)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a21      	ldr	r2, [pc, #132]	@ (8003f94 <HAL_I2C_MspInit+0xb0>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d13b      	bne.n	8003f8c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8003f14:	2380      	movs	r3, #128	@ 0x80
 8003f16:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003f1c:	f107 0314 	add.w	r3, r7, #20
 8003f20:	4618      	mov	r0, r3
 8003f22:	f003 fc83 	bl	800782c <HAL_RCCEx_PeriphCLKConfig>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d001      	beq.n	8003f30 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8003f2c:	f7ff ff48 	bl	8003dc0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f30:	4b19      	ldr	r3, [pc, #100]	@ (8003f98 <HAL_I2C_MspInit+0xb4>)
 8003f32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f34:	4a18      	ldr	r2, [pc, #96]	@ (8003f98 <HAL_I2C_MspInit+0xb4>)
 8003f36:	f043 0302 	orr.w	r3, r3, #2
 8003f3a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f3c:	4b16      	ldr	r3, [pc, #88]	@ (8003f98 <HAL_I2C_MspInit+0xb4>)
 8003f3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f40:	f003 0302 	and.w	r3, r3, #2
 8003f44:	613b      	str	r3, [r7, #16]
 8003f46:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8003f48:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003f4c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003f50:	2312      	movs	r3, #18
 8003f52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f56:	2301      	movs	r3, #1
 8003f58:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003f62:	2304      	movs	r3, #4
 8003f64:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f68:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	480b      	ldr	r0, [pc, #44]	@ (8003f9c <HAL_I2C_MspInit+0xb8>)
 8003f70:	f001 fae4 	bl	800553c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003f74:	4b08      	ldr	r3, [pc, #32]	@ (8003f98 <HAL_I2C_MspInit+0xb4>)
 8003f76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f78:	4a07      	ldr	r2, [pc, #28]	@ (8003f98 <HAL_I2C_MspInit+0xb4>)
 8003f7a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003f7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f80:	4b05      	ldr	r3, [pc, #20]	@ (8003f98 <HAL_I2C_MspInit+0xb4>)
 8003f82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f84:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f88:	60fb      	str	r3, [r7, #12]
 8003f8a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8003f8c:	bf00      	nop
 8003f8e:	37b0      	adds	r7, #176	@ 0xb0
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	40005800 	.word	0x40005800
 8003f98:	40021000 	.word	0x40021000
 8003f9c:	48000400 	.word	0x48000400

08003fa0 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a0b      	ldr	r2, [pc, #44]	@ (8003fdc <HAL_I2C_MspDeInit+0x3c>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d10f      	bne.n	8003fd2 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8003fb2:	4b0b      	ldr	r3, [pc, #44]	@ (8003fe0 <HAL_I2C_MspDeInit+0x40>)
 8003fb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fb6:	4a0a      	ldr	r2, [pc, #40]	@ (8003fe0 <HAL_I2C_MspDeInit+0x40>)
 8003fb8:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8003fbc:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 8003fbe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003fc2:	4808      	ldr	r0, [pc, #32]	@ (8003fe4 <HAL_I2C_MspDeInit+0x44>)
 8003fc4:	f001 fc64 	bl	8005890 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 8003fc8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003fcc:	4805      	ldr	r0, [pc, #20]	@ (8003fe4 <HAL_I2C_MspDeInit+0x44>)
 8003fce:	f001 fc5f 	bl	8005890 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8003fd2:	bf00      	nop
 8003fd4:	3708      	adds	r7, #8
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	40005800 	.word	0x40005800
 8003fe0:	40021000 	.word	0x40021000
 8003fe4:	48000400 	.word	0x48000400

08003fe8 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b08a      	sub	sp, #40	@ 0x28
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ff0:	f107 0314 	add.w	r3, r7, #20
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	601a      	str	r2, [r3, #0]
 8003ff8:	605a      	str	r2, [r3, #4]
 8003ffa:	609a      	str	r2, [r3, #8]
 8003ffc:	60da      	str	r2, [r3, #12]
 8003ffe:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a17      	ldr	r2, [pc, #92]	@ (8004064 <HAL_QSPI_MspInit+0x7c>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d128      	bne.n	800405c <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800400a:	4b17      	ldr	r3, [pc, #92]	@ (8004068 <HAL_QSPI_MspInit+0x80>)
 800400c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800400e:	4a16      	ldr	r2, [pc, #88]	@ (8004068 <HAL_QSPI_MspInit+0x80>)
 8004010:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004014:	6513      	str	r3, [r2, #80]	@ 0x50
 8004016:	4b14      	ldr	r3, [pc, #80]	@ (8004068 <HAL_QSPI_MspInit+0x80>)
 8004018:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800401a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800401e:	613b      	str	r3, [r7, #16]
 8004020:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004022:	4b11      	ldr	r3, [pc, #68]	@ (8004068 <HAL_QSPI_MspInit+0x80>)
 8004024:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004026:	4a10      	ldr	r2, [pc, #64]	@ (8004068 <HAL_QSPI_MspInit+0x80>)
 8004028:	f043 0310 	orr.w	r3, r3, #16
 800402c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800402e:	4b0e      	ldr	r3, [pc, #56]	@ (8004068 <HAL_QSPI_MspInit+0x80>)
 8004030:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004032:	f003 0310 	and.w	r3, r3, #16
 8004036:	60fb      	str	r3, [r7, #12]
 8004038:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 800403a:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 800403e:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004040:	2302      	movs	r3, #2
 8004042:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004044:	2300      	movs	r3, #0
 8004046:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004048:	2303      	movs	r3, #3
 800404a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800404c:	230a      	movs	r3, #10
 800404e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004050:	f107 0314 	add.w	r3, r7, #20
 8004054:	4619      	mov	r1, r3
 8004056:	4805      	ldr	r0, [pc, #20]	@ (800406c <HAL_QSPI_MspInit+0x84>)
 8004058:	f001 fa70 	bl	800553c <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 800405c:	bf00      	nop
 800405e:	3728      	adds	r7, #40	@ 0x28
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	a0001000 	.word	0xa0001000
 8004068:	40021000 	.word	0x40021000
 800406c:	48001000 	.word	0x48001000

08004070 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b0ac      	sub	sp, #176	@ 0xb0
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004078:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800407c:	2200      	movs	r2, #0
 800407e:	601a      	str	r2, [r3, #0]
 8004080:	605a      	str	r2, [r3, #4]
 8004082:	609a      	str	r2, [r3, #8]
 8004084:	60da      	str	r2, [r3, #12]
 8004086:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004088:	f107 0314 	add.w	r3, r7, #20
 800408c:	2288      	movs	r2, #136	@ 0x88
 800408e:	2100      	movs	r1, #0
 8004090:	4618      	mov	r0, r3
 8004092:	f009 ffb9 	bl	800e008 <memset>
  if(huart->Instance==USART3)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a21      	ldr	r2, [pc, #132]	@ (8004120 <HAL_UART_MspInit+0xb0>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d13b      	bne.n	8004118 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80040a0:	2304      	movs	r3, #4
 80040a2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80040a4:	2300      	movs	r3, #0
 80040a6:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80040a8:	f107 0314 	add.w	r3, r7, #20
 80040ac:	4618      	mov	r0, r3
 80040ae:	f003 fbbd 	bl	800782c <HAL_RCCEx_PeriphCLKConfig>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d001      	beq.n	80040bc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80040b8:	f7ff fe82 	bl	8003dc0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80040bc:	4b19      	ldr	r3, [pc, #100]	@ (8004124 <HAL_UART_MspInit+0xb4>)
 80040be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040c0:	4a18      	ldr	r2, [pc, #96]	@ (8004124 <HAL_UART_MspInit+0xb4>)
 80040c2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80040c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80040c8:	4b16      	ldr	r3, [pc, #88]	@ (8004124 <HAL_UART_MspInit+0xb4>)
 80040ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80040d0:	613b      	str	r3, [r7, #16]
 80040d2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80040d4:	4b13      	ldr	r3, [pc, #76]	@ (8004124 <HAL_UART_MspInit+0xb4>)
 80040d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040d8:	4a12      	ldr	r2, [pc, #72]	@ (8004124 <HAL_UART_MspInit+0xb4>)
 80040da:	f043 0308 	orr.w	r3, r3, #8
 80040de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80040e0:	4b10      	ldr	r3, [pc, #64]	@ (8004124 <HAL_UART_MspInit+0xb4>)
 80040e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040e4:	f003 0308 	and.w	r3, r3, #8
 80040e8:	60fb      	str	r3, [r7, #12]
 80040ea:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80040ec:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80040f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040f4:	2302      	movs	r3, #2
 80040f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040fa:	2300      	movs	r3, #0
 80040fc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004100:	2303      	movs	r3, #3
 8004102:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004106:	2307      	movs	r3, #7
 8004108:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800410c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8004110:	4619      	mov	r1, r3
 8004112:	4805      	ldr	r0, [pc, #20]	@ (8004128 <HAL_UART_MspInit+0xb8>)
 8004114:	f001 fa12 	bl	800553c <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8004118:	bf00      	nop
 800411a:	37b0      	adds	r7, #176	@ 0xb0
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	40004800 	.word	0x40004800
 8004124:	40021000 	.word	0x40021000
 8004128:	48000c00 	.word	0x48000c00

0800412c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b0ac      	sub	sp, #176	@ 0xb0
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004134:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8004138:	2200      	movs	r2, #0
 800413a:	601a      	str	r2, [r3, #0]
 800413c:	605a      	str	r2, [r3, #4]
 800413e:	609a      	str	r2, [r3, #8]
 8004140:	60da      	str	r2, [r3, #12]
 8004142:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004144:	f107 0314 	add.w	r3, r7, #20
 8004148:	2288      	movs	r2, #136	@ 0x88
 800414a:	2100      	movs	r1, #0
 800414c:	4618      	mov	r0, r3
 800414e:	f009 ff5b 	bl	800e008 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800415a:	d17c      	bne.n	8004256 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800415c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004160:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8004162:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004166:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800416a:	2301      	movs	r3, #1
 800416c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800416e:	2301      	movs	r3, #1
 8004170:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8004172:	2318      	movs	r3, #24
 8004174:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8004176:	2307      	movs	r3, #7
 8004178:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800417a:	2302      	movs	r3, #2
 800417c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800417e:	2302      	movs	r3, #2
 8004180:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8004182:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004186:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004188:	f107 0314 	add.w	r3, r7, #20
 800418c:	4618      	mov	r0, r3
 800418e:	f003 fb4d 	bl	800782c <HAL_RCCEx_PeriphCLKConfig>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d001      	beq.n	800419c <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8004198:	f7ff fe12 	bl	8003dc0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800419c:	4b30      	ldr	r3, [pc, #192]	@ (8004260 <HAL_PCD_MspInit+0x134>)
 800419e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041a0:	4a2f      	ldr	r2, [pc, #188]	@ (8004260 <HAL_PCD_MspInit+0x134>)
 80041a2:	f043 0301 	orr.w	r3, r3, #1
 80041a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80041a8:	4b2d      	ldr	r3, [pc, #180]	@ (8004260 <HAL_PCD_MspInit+0x134>)
 80041aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041ac:	f003 0301 	and.w	r3, r3, #1
 80041b0:	613b      	str	r3, [r7, #16]
 80041b2:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80041b4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80041b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80041bc:	2300      	movs	r3, #0
 80041be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041c2:	2300      	movs	r3, #0
 80041c4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80041c8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80041cc:	4619      	mov	r1, r3
 80041ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80041d2:	f001 f9b3 	bl	800553c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80041d6:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80041da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041de:	2302      	movs	r3, #2
 80041e0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041e4:	2300      	movs	r3, #0
 80041e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041ea:	2303      	movs	r3, #3
 80041ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80041f0:	230a      	movs	r3, #10
 80041f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041f6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80041fa:	4619      	mov	r1, r3
 80041fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004200:	f001 f99c 	bl	800553c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8004204:	4b16      	ldr	r3, [pc, #88]	@ (8004260 <HAL_PCD_MspInit+0x134>)
 8004206:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004208:	4a15      	ldr	r2, [pc, #84]	@ (8004260 <HAL_PCD_MspInit+0x134>)
 800420a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800420e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004210:	4b13      	ldr	r3, [pc, #76]	@ (8004260 <HAL_PCD_MspInit+0x134>)
 8004212:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004214:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004218:	60fb      	str	r3, [r7, #12]
 800421a:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800421c:	4b10      	ldr	r3, [pc, #64]	@ (8004260 <HAL_PCD_MspInit+0x134>)
 800421e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004220:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d114      	bne.n	8004252 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004228:	4b0d      	ldr	r3, [pc, #52]	@ (8004260 <HAL_PCD_MspInit+0x134>)
 800422a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800422c:	4a0c      	ldr	r2, [pc, #48]	@ (8004260 <HAL_PCD_MspInit+0x134>)
 800422e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004232:	6593      	str	r3, [r2, #88]	@ 0x58
 8004234:	4b0a      	ldr	r3, [pc, #40]	@ (8004260 <HAL_PCD_MspInit+0x134>)
 8004236:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004238:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800423c:	60bb      	str	r3, [r7, #8]
 800423e:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8004240:	f002 fc28 	bl	8006a94 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004244:	4b06      	ldr	r3, [pc, #24]	@ (8004260 <HAL_PCD_MspInit+0x134>)
 8004246:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004248:	4a05      	ldr	r2, [pc, #20]	@ (8004260 <HAL_PCD_MspInit+0x134>)
 800424a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800424e:	6593      	str	r3, [r2, #88]	@ 0x58

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8004250:	e001      	b.n	8004256 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8004252:	f002 fc1f 	bl	8006a94 <HAL_PWREx_EnableVddUSB>
}
 8004256:	bf00      	nop
 8004258:	37b0      	adds	r7, #176	@ 0xb0
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	40021000 	.word	0x40021000

08004264 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004264:	b480      	push	{r7}
 8004266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004268:	bf00      	nop
 800426a:	e7fd      	b.n	8004268 <NMI_Handler+0x4>

0800426c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800426c:	b480      	push	{r7}
 800426e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004270:	bf00      	nop
 8004272:	e7fd      	b.n	8004270 <HardFault_Handler+0x4>

08004274 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004274:	b480      	push	{r7}
 8004276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004278:	bf00      	nop
 800427a:	e7fd      	b.n	8004278 <MemManage_Handler+0x4>

0800427c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800427c:	b480      	push	{r7}
 800427e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004280:	bf00      	nop
 8004282:	e7fd      	b.n	8004280 <BusFault_Handler+0x4>

08004284 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004284:	b480      	push	{r7}
 8004286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004288:	bf00      	nop
 800428a:	e7fd      	b.n	8004288 <UsageFault_Handler+0x4>

0800428c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800428c:	b480      	push	{r7}
 800428e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004290:	bf00      	nop
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr

0800429a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800429a:	b580      	push	{r7, lr}
 800429c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800429e:	f000 fe8d 	bl	8004fbc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80042a2:	f008 f8a3 	bl	800c3ec <xTaskGetSchedulerState>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d001      	beq.n	80042b0 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80042ac:	f008 fb6c 	bl	800c988 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80042b0:	bf00      	nop
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void) //blue tooth interrupt
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80042b8:	2020      	movs	r0, #32
 80042ba:	f001 fc27 	bl	8005b0c <HAL_GPIO_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_6); //blue tooth module
 80042be:	4806      	ldr	r0, [pc, #24]	@ (80042d8 <EXTI9_5_IRQHandler+0x24>)
 80042c0:	f001 f90c 	bl	80054dc <HAL_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 80042c4:	2080      	movs	r0, #128	@ 0x80
 80042c6:	f001 fc21 	bl	8005b0c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 80042ca:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80042ce:	f001 fc1d 	bl	8005b0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80042d2:	bf00      	nop
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	20000434 	.word	0x20000434

080042dc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
  HAL_EXTI_IRQHandler(&H_EXTI_13);
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);*/

  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 80042e0:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80042e4:	f001 fc12 	bl	8005b0c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 80042e8:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80042ec:	f001 fc0e 	bl	8005b0c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 80042f0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80042f4:	f001 fc0a 	bl	8005b0c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 80042f8:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80042fc:	f001 fc06 	bl	8005b0c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8004300:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8004304:	f001 fc02 	bl	8005b0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004308:	bf00      	nop
 800430a:	bd80      	pop	{r7, pc}

0800430c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800430c:	b480      	push	{r7}
 800430e:	af00      	add	r7, sp, #0
  return 1;
 8004310:	2301      	movs	r3, #1
}
 8004312:	4618      	mov	r0, r3
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <_kill>:

int _kill(int pid, int sig)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004326:	f009 fec1 	bl	800e0ac <__errno>
 800432a:	4603      	mov	r3, r0
 800432c:	2216      	movs	r2, #22
 800432e:	601a      	str	r2, [r3, #0]
  return -1;
 8004330:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004334:	4618      	mov	r0, r3
 8004336:	3708      	adds	r7, #8
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}

0800433c <_exit>:

void _exit (int status)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b082      	sub	sp, #8
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004344:	f04f 31ff 	mov.w	r1, #4294967295
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f7ff ffe7 	bl	800431c <_kill>
  while (1) {}    /* Make sure we hang here */
 800434e:	bf00      	nop
 8004350:	e7fd      	b.n	800434e <_exit+0x12>

08004352 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004352:	b580      	push	{r7, lr}
 8004354:	b086      	sub	sp, #24
 8004356:	af00      	add	r7, sp, #0
 8004358:	60f8      	str	r0, [r7, #12]
 800435a:	60b9      	str	r1, [r7, #8]
 800435c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800435e:	2300      	movs	r3, #0
 8004360:	617b      	str	r3, [r7, #20]
 8004362:	e00a      	b.n	800437a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004364:	f3af 8000 	nop.w
 8004368:	4601      	mov	r1, r0
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	1c5a      	adds	r2, r3, #1
 800436e:	60ba      	str	r2, [r7, #8]
 8004370:	b2ca      	uxtb	r2, r1
 8004372:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	3301      	adds	r3, #1
 8004378:	617b      	str	r3, [r7, #20]
 800437a:	697a      	ldr	r2, [r7, #20]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	429a      	cmp	r2, r3
 8004380:	dbf0      	blt.n	8004364 <_read+0x12>
  }

  return len;
 8004382:	687b      	ldr	r3, [r7, #4]
}
 8004384:	4618      	mov	r0, r3
 8004386:	3718      	adds	r7, #24
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b086      	sub	sp, #24
 8004390:	af00      	add	r7, sp, #0
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	60b9      	str	r1, [r7, #8]
 8004396:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004398:	2300      	movs	r3, #0
 800439a:	617b      	str	r3, [r7, #20]
 800439c:	e009      	b.n	80043b2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	1c5a      	adds	r2, r3, #1
 80043a2:	60ba      	str	r2, [r7, #8]
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	4618      	mov	r0, r3
 80043a8:	f000 f98c 	bl	80046c4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	3301      	adds	r3, #1
 80043b0:	617b      	str	r3, [r7, #20]
 80043b2:	697a      	ldr	r2, [r7, #20]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	429a      	cmp	r2, r3
 80043b8:	dbf1      	blt.n	800439e <_write+0x12>
  }
  return len;
 80043ba:	687b      	ldr	r3, [r7, #4]
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3718      	adds	r7, #24
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}

080043c4 <_close>:

int _close(int file)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80043cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80043ec:	605a      	str	r2, [r3, #4]
  return 0;
 80043ee:	2300      	movs	r3, #0
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	370c      	adds	r7, #12
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <_isatty>:

int _isatty(int file)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004404:	2301      	movs	r3, #1
}
 8004406:	4618      	mov	r0, r3
 8004408:	370c      	adds	r7, #12
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr

08004412 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004412:	b480      	push	{r7}
 8004414:	b085      	sub	sp, #20
 8004416:	af00      	add	r7, sp, #0
 8004418:	60f8      	str	r0, [r7, #12]
 800441a:	60b9      	str	r1, [r7, #8]
 800441c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	3714      	adds	r7, #20
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b086      	sub	sp, #24
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004434:	4a14      	ldr	r2, [pc, #80]	@ (8004488 <_sbrk+0x5c>)
 8004436:	4b15      	ldr	r3, [pc, #84]	@ (800448c <_sbrk+0x60>)
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004440:	4b13      	ldr	r3, [pc, #76]	@ (8004490 <_sbrk+0x64>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d102      	bne.n	800444e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004448:	4b11      	ldr	r3, [pc, #68]	@ (8004490 <_sbrk+0x64>)
 800444a:	4a12      	ldr	r2, [pc, #72]	@ (8004494 <_sbrk+0x68>)
 800444c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800444e:	4b10      	ldr	r3, [pc, #64]	@ (8004490 <_sbrk+0x64>)
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4413      	add	r3, r2
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	429a      	cmp	r2, r3
 800445a:	d207      	bcs.n	800446c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800445c:	f009 fe26 	bl	800e0ac <__errno>
 8004460:	4603      	mov	r3, r0
 8004462:	220c      	movs	r2, #12
 8004464:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004466:	f04f 33ff 	mov.w	r3, #4294967295
 800446a:	e009      	b.n	8004480 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800446c:	4b08      	ldr	r3, [pc, #32]	@ (8004490 <_sbrk+0x64>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004472:	4b07      	ldr	r3, [pc, #28]	@ (8004490 <_sbrk+0x64>)
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4413      	add	r3, r2
 800447a:	4a05      	ldr	r2, [pc, #20]	@ (8004490 <_sbrk+0x64>)
 800447c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800447e:	68fb      	ldr	r3, [r7, #12]
}
 8004480:	4618      	mov	r0, r3
 8004482:	3718      	adds	r7, #24
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	20018000 	.word	0x20018000
 800448c:	00000400 	.word	0x00000400
 8004490:	20002eec 	.word	0x20002eec
 8004494:	200041a8 	.word	0x200041a8

08004498 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004498:	b480      	push	{r7}
 800449a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800449c:	4b06      	ldr	r3, [pc, #24]	@ (80044b8 <SystemInit+0x20>)
 800449e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044a2:	4a05      	ldr	r2, [pc, #20]	@ (80044b8 <SystemInit+0x20>)
 80044a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80044a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80044ac:	bf00      	nop
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	e000ed00 	.word	0xe000ed00

080044bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80044bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80044f4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80044c0:	f7ff ffea 	bl	8004498 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80044c4:	480c      	ldr	r0, [pc, #48]	@ (80044f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80044c6:	490d      	ldr	r1, [pc, #52]	@ (80044fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80044c8:	4a0d      	ldr	r2, [pc, #52]	@ (8004500 <LoopForever+0xe>)
  movs r3, #0
 80044ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80044cc:	e002      	b.n	80044d4 <LoopCopyDataInit>

080044ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80044ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80044d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80044d2:	3304      	adds	r3, #4

080044d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80044d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80044d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80044d8:	d3f9      	bcc.n	80044ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80044da:	4a0a      	ldr	r2, [pc, #40]	@ (8004504 <LoopForever+0x12>)
  ldr r4, =_ebss
 80044dc:	4c0a      	ldr	r4, [pc, #40]	@ (8004508 <LoopForever+0x16>)
  movs r3, #0
 80044de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80044e0:	e001      	b.n	80044e6 <LoopFillZerobss>

080044e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80044e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80044e4:	3204      	adds	r2, #4

080044e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80044e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80044e8:	d3fb      	bcc.n	80044e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80044ea:	f009 fde5 	bl	800e0b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80044ee:	f7ff f885 	bl	80035fc <main>

080044f2 <LoopForever>:

LoopForever:
    b LoopForever
 80044f2:	e7fe      	b.n	80044f2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80044f4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80044f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80044fc:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 8004500:	08011f4c 	.word	0x08011f4c
  ldr r2, =_sbss
 8004504:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 8004508:	200041a8 	.word	0x200041a8

0800450c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800450c:	e7fe      	b.n	800450c <ADC1_2_IRQHandler>
	...

08004510 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b082      	sub	sp, #8
 8004514:	af00      	add	r7, sp, #0
 8004516:	4603      	mov	r3, r0
 8004518:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 800451a:	79fb      	ldrb	r3, [r7, #7]
 800451c:	4a04      	ldr	r2, [pc, #16]	@ (8004530 <BSP_LED_Init+0x20>)
 800451e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004522:	4798      	blx	r3
  return BSP_ERROR_NONE;
 8004524:	2300      	movs	r3, #0
}
 8004526:	4618      	mov	r0, r3
 8004528:	3708      	adds	r7, #8
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	08011ab4 	.word	0x08011ab4

08004534 <BSP_LED_Toggle>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
 800453a:	4603      	mov	r3, r0
 800453c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 800453e:	79fb      	ldrb	r3, [r7, #7]
 8004540:	4a06      	ldr	r2, [pc, #24]	@ (800455c <BSP_LED_Toggle+0x28>)
 8004542:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004546:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800454a:	4611      	mov	r1, r2
 800454c:	4618      	mov	r0, r3
 800454e:	f001 fac3 	bl	8005ad8 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 8004552:	2300      	movs	r3, #0
}
 8004554:	4618      	mov	r0, r3
 8004556:	3708      	adds	r7, #8
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}
 800455c:	20000008 	.word	0x20000008

08004560 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 8004560:	b580      	push	{r7, lr}
 8004562:	b088      	sub	sp, #32
 8004564:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004566:	4b1c      	ldr	r3, [pc, #112]	@ (80045d8 <LED_USER_GPIO_Init+0x78>)
 8004568:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800456a:	4a1b      	ldr	r2, [pc, #108]	@ (80045d8 <LED_USER_GPIO_Init+0x78>)
 800456c:	f043 0302 	orr.w	r3, r3, #2
 8004570:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004572:	4b19      	ldr	r3, [pc, #100]	@ (80045d8 <LED_USER_GPIO_Init+0x78>)
 8004574:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004576:	f003 0302 	and.w	r3, r3, #2
 800457a:	60bb      	str	r3, [r7, #8]
 800457c:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800457e:	f107 030c 	add.w	r3, r7, #12
 8004582:	2200      	movs	r2, #0
 8004584:	601a      	str	r2, [r3, #0]
 8004586:	605a      	str	r2, [r3, #4]
 8004588:	609a      	str	r2, [r3, #8]
 800458a:	60da      	str	r2, [r3, #12]
 800458c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800458e:	4b12      	ldr	r3, [pc, #72]	@ (80045d8 <LED_USER_GPIO_Init+0x78>)
 8004590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004592:	4a11      	ldr	r2, [pc, #68]	@ (80045d8 <LED_USER_GPIO_Init+0x78>)
 8004594:	f043 0302 	orr.w	r3, r3, #2
 8004598:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800459a:	4b0f      	ldr	r3, [pc, #60]	@ (80045d8 <LED_USER_GPIO_Init+0x78>)
 800459c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800459e:	f003 0302 	and.w	r3, r3, #2
 80045a2:	607b      	str	r3, [r7, #4]
 80045a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 80045a6:	2200      	movs	r2, #0
 80045a8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80045ac:	480b      	ldr	r0, [pc, #44]	@ (80045dc <LED_USER_GPIO_Init+0x7c>)
 80045ae:	f001 fa7b 	bl	8005aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 80045b2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80045b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045b8:	2301      	movs	r3, #1
 80045ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045bc:	2300      	movs	r3, #0
 80045be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045c0:	2300      	movs	r3, #0
 80045c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 80045c4:	f107 030c 	add.w	r3, r7, #12
 80045c8:	4619      	mov	r1, r3
 80045ca:	4804      	ldr	r0, [pc, #16]	@ (80045dc <LED_USER_GPIO_Init+0x7c>)
 80045cc:	f000 ffb6 	bl	800553c <HAL_GPIO_Init>

}
 80045d0:	bf00      	nop
 80045d2:	3720      	adds	r7, #32
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	40021000 	.word	0x40021000
 80045dc:	48000400 	.word	0x48000400

080045e0 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	4603      	mov	r3, r0
 80045e8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80045ea:	2300      	movs	r3, #0
 80045ec:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 80045ee:	79fb      	ldrb	r3, [r7, #7]
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d903      	bls.n	80045fc <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80045f4:	f06f 0301 	mvn.w	r3, #1
 80045f8:	60fb      	str	r3, [r7, #12]
 80045fa:	e025      	b.n	8004648 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 80045fc:	79fb      	ldrb	r3, [r7, #7]
 80045fe:	79fa      	ldrb	r2, [r7, #7]
 8004600:	4914      	ldr	r1, [pc, #80]	@ (8004654 <BSP_COM_Init+0x74>)
 8004602:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8004606:	4814      	ldr	r0, [pc, #80]	@ (8004658 <BSP_COM_Init+0x78>)
 8004608:	4613      	mov	r3, r2
 800460a:	011b      	lsls	r3, r3, #4
 800460c:	4413      	add	r3, r2
 800460e:	00db      	lsls	r3, r3, #3
 8004610:	4403      	add	r3, r0
 8004612:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART1_MspInit(&hcom_uart[COM]);
 8004614:	79fa      	ldrb	r2, [r7, #7]
 8004616:	4613      	mov	r3, r2
 8004618:	011b      	lsls	r3, r3, #4
 800461a:	4413      	add	r3, r2
 800461c:	00db      	lsls	r3, r3, #3
 800461e:	4a0e      	ldr	r2, [pc, #56]	@ (8004658 <BSP_COM_Init+0x78>)
 8004620:	4413      	add	r3, r2
 8004622:	4618      	mov	r0, r3
 8004624:	f000 f86a 	bl	80046fc <USART1_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART1_UART_Init(&hcom_uart[COM]))
 8004628:	79fa      	ldrb	r2, [r7, #7]
 800462a:	4613      	mov	r3, r2
 800462c:	011b      	lsls	r3, r3, #4
 800462e:	4413      	add	r3, r2
 8004630:	00db      	lsls	r3, r3, #3
 8004632:	4a09      	ldr	r2, [pc, #36]	@ (8004658 <BSP_COM_Init+0x78>)
 8004634:	4413      	add	r3, r2
 8004636:	4618      	mov	r0, r3
 8004638:	f000 f810 	bl	800465c <MX_USART1_UART_Init>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d002      	beq.n	8004648 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8004642:	f06f 0303 	mvn.w	r3, #3
 8004646:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8004648:	68fb      	ldr	r3, [r7, #12]
}
 800464a:	4618      	mov	r0, r3
 800464c:	3710      	adds	r7, #16
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
 8004652:	bf00      	nop
 8004654:	2000000c 	.word	0x2000000c
 8004658:	20002ef0 	.word	0x20002ef0

0800465c <MX_USART1_UART_Init>:
 */

/* USART1 init function */

__weak HAL_StatusTypeDef MX_USART1_UART_Init(UART_HandleTypeDef* huart)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8004664:	2300      	movs	r3, #0
 8004666:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART1;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	4a15      	ldr	r2, [pc, #84]	@ (80046c0 <MX_USART1_UART_Init+0x64>)
 800466c:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004674:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	220c      	movs	r2, #12
 800468c:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	621a      	str	r2, [r3, #32]
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(huart) != HAL_OK)
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f004 f9ca 	bl	8008a40 <HAL_UART_Init>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d001      	beq.n	80046b6 <MX_USART1_UART_Init+0x5a>
  {
    ret = HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80046b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3710      	adds	r7, #16
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	40013800 	.word	0x40013800

080046c4 <__io_putchar>:
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
  return ch;
}
#else /* For GCC Toolchains */
int __io_putchar (int ch)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b082      	sub	sp, #8
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 80046cc:	4b09      	ldr	r3, [pc, #36]	@ (80046f4 <__io_putchar+0x30>)
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	461a      	mov	r2, r3
 80046d2:	4613      	mov	r3, r2
 80046d4:	011b      	lsls	r3, r3, #4
 80046d6:	4413      	add	r3, r2
 80046d8:	00db      	lsls	r3, r3, #3
 80046da:	4a07      	ldr	r2, [pc, #28]	@ (80046f8 <__io_putchar+0x34>)
 80046dc:	1898      	adds	r0, r3, r2
 80046de:	1d39      	adds	r1, r7, #4
 80046e0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80046e4:	2201      	movs	r2, #1
 80046e6:	f004 f9f9 	bl	8008adc <HAL_UART_Transmit>
  return ch;
 80046ea:	687b      	ldr	r3, [r7, #4]
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3708      	adds	r7, #8
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	20002f78 	.word	0x20002f78
 80046f8:	20002ef0 	.word	0x20002ef0

080046fc <USART1_MspInit>:
 * @param  huart USART1 handle
 * @retval None
 */

static void USART1_MspInit(UART_HandleTypeDef* uartHandle)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b0ac      	sub	sp, #176	@ 0xb0
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004704:	f107 0314 	add.w	r3, r7, #20
 8004708:	2288      	movs	r2, #136	@ 0x88
 800470a:	2100      	movs	r1, #0
 800470c:	4618      	mov	r0, r3
 800470e:	f009 fc7b 	bl	800e008 <memset>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004712:	2301      	movs	r3, #1
 8004714:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004716:	2300      	movs	r3, #0
 8004718:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800471a:	f107 0314 	add.w	r3, r7, #20
 800471e:	4618      	mov	r0, r3
 8004720:	f003 f884 	bl	800782c <HAL_RCCEx_PeriphCLKConfig>

    /* Enable Peripheral clock */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004724:	4b22      	ldr	r3, [pc, #136]	@ (80047b0 <USART1_MspInit+0xb4>)
 8004726:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004728:	4a21      	ldr	r2, [pc, #132]	@ (80047b0 <USART1_MspInit+0xb4>)
 800472a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800472e:	6613      	str	r3, [r2, #96]	@ 0x60
 8004730:	4b1f      	ldr	r3, [pc, #124]	@ (80047b0 <USART1_MspInit+0xb4>)
 8004732:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004734:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004738:	613b      	str	r3, [r7, #16]
 800473a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800473c:	4b1c      	ldr	r3, [pc, #112]	@ (80047b0 <USART1_MspInit+0xb4>)
 800473e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004740:	4a1b      	ldr	r2, [pc, #108]	@ (80047b0 <USART1_MspInit+0xb4>)
 8004742:	f043 0302 	orr.w	r3, r3, #2
 8004746:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004748:	4b19      	ldr	r3, [pc, #100]	@ (80047b0 <USART1_MspInit+0xb4>)
 800474a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800474c:	f003 0302 	and.w	r3, r3, #2
 8004750:	60fb      	str	r3, [r7, #12]
 8004752:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BUS_USART1_TX_GPIO_PIN;
 8004754:	2340      	movs	r3, #64	@ 0x40
 8004756:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800475a:	2302      	movs	r3, #2
 800475c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004760:	2300      	movs	r3, #0
 8004762:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004766:	2303      	movs	r3, #3
 8004768:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = BUS_USART1_TX_GPIO_AF;
 800476c:	2307      	movs	r3, #7
 800476e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(BUS_USART1_TX_GPIO_PORT, &GPIO_InitStruct);
 8004772:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8004776:	4619      	mov	r1, r3
 8004778:	480e      	ldr	r0, [pc, #56]	@ (80047b4 <USART1_MspInit+0xb8>)
 800477a:	f000 fedf 	bl	800553c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART1_RX_GPIO_PIN;
 800477e:	2380      	movs	r3, #128	@ 0x80
 8004780:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004784:	2302      	movs	r3, #2
 8004786:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800478a:	2300      	movs	r3, #0
 800478c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004790:	2303      	movs	r3, #3
 8004792:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = BUS_USART1_RX_GPIO_AF;
 8004796:	2307      	movs	r3, #7
 8004798:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(BUS_USART1_RX_GPIO_PORT, &GPIO_InitStruct);
 800479c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80047a0:	4619      	mov	r1, r3
 80047a2:	4804      	ldr	r0, [pc, #16]	@ (80047b4 <USART1_MspInit+0xb8>)
 80047a4:	f000 feca 	bl	800553c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
}
 80047a8:	bf00      	nop
 80047aa:	37b0      	adds	r7, #176	@ 0xb0
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	40021000 	.word	0x40021000
 80047b4:	48000400 	.word	0x48000400

080047b8 <I2Cx_MspInit>:
void     NFC_IO_Delay(uint32_t Delay);
/**
 * @}
 */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b08a      	sub	sp, #40	@ 0x28
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80047c0:	4b27      	ldr	r3, [pc, #156]	@ (8004860 <I2Cx_MspInit+0xa8>)
 80047c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047c4:	4a26      	ldr	r2, [pc, #152]	@ (8004860 <I2Cx_MspInit+0xa8>)
 80047c6:	f043 0302 	orr.w	r3, r3, #2
 80047ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80047cc:	4b24      	ldr	r3, [pc, #144]	@ (8004860 <I2Cx_MspInit+0xa8>)
 80047ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047d0:	f003 0302 	and.w	r3, r3, #2
 80047d4:	613b      	str	r3, [r7, #16]
 80047d6:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 80047d8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80047dc:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80047de:	2312      	movs	r3, #18
 80047e0:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80047e2:	2301      	movs	r3, #1
 80047e4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047e6:	2303      	movs	r3, #3
 80047e8:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80047ea:	2304      	movs	r3, #4
 80047ec:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80047ee:	f107 0314 	add.w	r3, r7, #20
 80047f2:	4619      	mov	r1, r3
 80047f4:	481b      	ldr	r0, [pc, #108]	@ (8004864 <I2Cx_MspInit+0xac>)
 80047f6:	f000 fea1 	bl	800553c <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80047fa:	f107 0314 	add.w	r3, r7, #20
 80047fe:	4619      	mov	r1, r3
 8004800:	4818      	ldr	r0, [pc, #96]	@ (8004864 <I2Cx_MspInit+0xac>)
 8004802:	f000 fe9b 	bl	800553c <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8004806:	4b16      	ldr	r3, [pc, #88]	@ (8004860 <I2Cx_MspInit+0xa8>)
 8004808:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800480a:	4a15      	ldr	r2, [pc, #84]	@ (8004860 <I2Cx_MspInit+0xa8>)
 800480c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004810:	6593      	str	r3, [r2, #88]	@ 0x58
 8004812:	4b13      	ldr	r3, [pc, #76]	@ (8004860 <I2Cx_MspInit+0xa8>)
 8004814:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004816:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800481a:	60fb      	str	r3, [r7, #12]
 800481c:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 800481e:	4b10      	ldr	r3, [pc, #64]	@ (8004860 <I2Cx_MspInit+0xa8>)
 8004820:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004822:	4a0f      	ldr	r2, [pc, #60]	@ (8004860 <I2Cx_MspInit+0xa8>)
 8004824:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004828:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800482a:	4b0d      	ldr	r3, [pc, #52]	@ (8004860 <I2Cx_MspInit+0xa8>)
 800482c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800482e:	4a0c      	ldr	r2, [pc, #48]	@ (8004860 <I2Cx_MspInit+0xa8>)
 8004830:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8004834:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8004836:	2200      	movs	r2, #0
 8004838:	210f      	movs	r1, #15
 800483a:	2021      	movs	r0, #33	@ 0x21
 800483c:	f000 fcdd 	bl	80051fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8004840:	2021      	movs	r0, #33	@ 0x21
 8004842:	f000 fcf6 	bl	8005232 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8004846:	2200      	movs	r2, #0
 8004848:	210f      	movs	r1, #15
 800484a:	2022      	movs	r0, #34	@ 0x22
 800484c:	f000 fcd5 	bl	80051fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8004850:	2022      	movs	r0, #34	@ 0x22
 8004852:	f000 fcee 	bl	8005232 <HAL_NVIC_EnableIRQ>
}
 8004856:	bf00      	nop
 8004858:	3728      	adds	r7, #40	@ 0x28
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	40021000 	.word	0x40021000
 8004864:	48000400 	.word	0x48000400

08004868 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4a12      	ldr	r2, [pc, #72]	@ (80048bc <I2Cx_Init+0x54>)
 8004874:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a11      	ldr	r2, [pc, #68]	@ (80048c0 <I2Cx_Init+0x58>)
 800487a:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2201      	movs	r2, #1
 8004886:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f7ff ff89 	bl	80047b8 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f001 f948 	bl	8005b3c <HAL_I2C_Init>

  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);
 80048ac:	2100      	movs	r1, #0
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f001 fefe 	bl	80066b0 <HAL_I2CEx_ConfigAnalogFilter>
}
 80048b4:	bf00      	nop
 80048b6:	3708      	adds	r7, #8
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	40005800 	.word	0x40005800
 80048c0:	00702681 	.word	0x00702681

080048c4 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b08a      	sub	sp, #40	@ 0x28
 80048c8:	af04      	add	r7, sp, #16
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	4608      	mov	r0, r1
 80048ce:	4611      	mov	r1, r2
 80048d0:	461a      	mov	r2, r3
 80048d2:	4603      	mov	r3, r0
 80048d4:	72fb      	strb	r3, [r7, #11]
 80048d6:	460b      	mov	r3, r1
 80048d8:	813b      	strh	r3, [r7, #8]
 80048da:	4613      	mov	r3, r2
 80048dc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80048de:	2300      	movs	r3, #0
 80048e0:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80048e2:	7afb      	ldrb	r3, [r7, #11]
 80048e4:	b299      	uxth	r1, r3
 80048e6:	88f8      	ldrh	r0, [r7, #6]
 80048e8:	893a      	ldrh	r2, [r7, #8]
 80048ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80048ee:	9302      	str	r3, [sp, #8]
 80048f0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80048f2:	9301      	str	r3, [sp, #4]
 80048f4:	6a3b      	ldr	r3, [r7, #32]
 80048f6:	9300      	str	r3, [sp, #0]
 80048f8:	4603      	mov	r3, r0
 80048fa:	68f8      	ldr	r0, [r7, #12]
 80048fc:	f001 fafc 	bl	8005ef8 <HAL_I2C_Mem_Read>
 8004900:	4603      	mov	r3, r0
 8004902:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8004904:	7dfb      	ldrb	r3, [r7, #23]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d004      	beq.n	8004914 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800490a:	7afb      	ldrb	r3, [r7, #11]
 800490c:	4619      	mov	r1, r3
 800490e:	68f8      	ldr	r0, [r7, #12]
 8004910:	f000 f832 	bl	8004978 <I2Cx_Error>
  }
  return status;
 8004914:	7dfb      	ldrb	r3, [r7, #23]
}
 8004916:	4618      	mov	r0, r3
 8004918:	3718      	adds	r7, #24
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}

0800491e <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800491e:	b580      	push	{r7, lr}
 8004920:	b08a      	sub	sp, #40	@ 0x28
 8004922:	af04      	add	r7, sp, #16
 8004924:	60f8      	str	r0, [r7, #12]
 8004926:	4608      	mov	r0, r1
 8004928:	4611      	mov	r1, r2
 800492a:	461a      	mov	r2, r3
 800492c:	4603      	mov	r3, r0
 800492e:	72fb      	strb	r3, [r7, #11]
 8004930:	460b      	mov	r3, r1
 8004932:	813b      	strh	r3, [r7, #8]
 8004934:	4613      	mov	r3, r2
 8004936:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8004938:	2300      	movs	r3, #0
 800493a:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800493c:	7afb      	ldrb	r3, [r7, #11]
 800493e:	b299      	uxth	r1, r3
 8004940:	88f8      	ldrh	r0, [r7, #6]
 8004942:	893a      	ldrh	r2, [r7, #8]
 8004944:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004948:	9302      	str	r3, [sp, #8]
 800494a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800494c:	9301      	str	r3, [sp, #4]
 800494e:	6a3b      	ldr	r3, [r7, #32]
 8004950:	9300      	str	r3, [sp, #0]
 8004952:	4603      	mov	r3, r0
 8004954:	68f8      	ldr	r0, [r7, #12]
 8004956:	f001 f9bb 	bl	8005cd0 <HAL_I2C_Mem_Write>
 800495a:	4603      	mov	r3, r0
 800495c:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800495e:	7dfb      	ldrb	r3, [r7, #23]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d004      	beq.n	800496e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8004964:	7afb      	ldrb	r3, [r7, #11]
 8004966:	4619      	mov	r1, r3
 8004968:	68f8      	ldr	r0, [r7, #12]
 800496a:	f000 f805 	bl	8004978 <I2Cx_Error>
  }
  return status;
 800496e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004970:	4618      	mov	r0, r3
 8004972:	3718      	adds	r7, #24
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}

08004978 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b082      	sub	sp, #8
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	460b      	mov	r3, r1
 8004982:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f001 f974 	bl	8005c72 <HAL_I2C_DeInit>

  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f7ff ff6c 	bl	8004868 <I2Cx_Init>
}
 8004990:	bf00      	nop
 8004992:	3708      	adds	r7, #8
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}

08004998 <SENSOR_IO_Init>:


void SENSOR_IO_Init(void)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 800499c:	4802      	ldr	r0, [pc, #8]	@ (80049a8 <SENSOR_IO_Init+0x10>)
 800499e:	f7ff ff63 	bl	8004868 <I2Cx_Init>
}
 80049a2:	bf00      	nop
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	20002f7c 	.word	0x20002f7c

080049ac <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b084      	sub	sp, #16
 80049b0:	af02      	add	r7, sp, #8
 80049b2:	4603      	mov	r3, r0
 80049b4:	71fb      	strb	r3, [r7, #7]
 80049b6:	460b      	mov	r3, r1
 80049b8:	71bb      	strb	r3, [r7, #6]
 80049ba:	4613      	mov	r3, r2
 80049bc:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80049be:	79bb      	ldrb	r3, [r7, #6]
 80049c0:	b29a      	uxth	r2, r3
 80049c2:	79f9      	ldrb	r1, [r7, #7]
 80049c4:	2301      	movs	r3, #1
 80049c6:	9301      	str	r3, [sp, #4]
 80049c8:	1d7b      	adds	r3, r7, #5
 80049ca:	9300      	str	r3, [sp, #0]
 80049cc:	2301      	movs	r3, #1
 80049ce:	4803      	ldr	r0, [pc, #12]	@ (80049dc <SENSOR_IO_Write+0x30>)
 80049d0:	f7ff ffa5 	bl	800491e <I2Cx_WriteMultiple>
}
 80049d4:	bf00      	nop
 80049d6:	3708      	adds	r7, #8
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	20002f7c 	.word	0x20002f7c

080049e0 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b086      	sub	sp, #24
 80049e4:	af02      	add	r7, sp, #8
 80049e6:	4603      	mov	r3, r0
 80049e8:	460a      	mov	r2, r1
 80049ea:	71fb      	strb	r3, [r7, #7]
 80049ec:	4613      	mov	r3, r2
 80049ee:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80049f0:	2300      	movs	r3, #0
 80049f2:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80049f4:	79bb      	ldrb	r3, [r7, #6]
 80049f6:	b29a      	uxth	r2, r3
 80049f8:	79f9      	ldrb	r1, [r7, #7]
 80049fa:	2301      	movs	r3, #1
 80049fc:	9301      	str	r3, [sp, #4]
 80049fe:	f107 030f 	add.w	r3, r7, #15
 8004a02:	9300      	str	r3, [sp, #0]
 8004a04:	2301      	movs	r3, #1
 8004a06:	4804      	ldr	r0, [pc, #16]	@ (8004a18 <SENSOR_IO_Read+0x38>)
 8004a08:	f7ff ff5c 	bl	80048c4 <I2Cx_ReadMultiple>

  return read_value;
 8004a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3710      	adds	r7, #16
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	20002f7c 	.word	0x20002f7c

08004a1c <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af02      	add	r7, sp, #8
 8004a22:	603a      	str	r2, [r7, #0]
 8004a24:	461a      	mov	r2, r3
 8004a26:	4603      	mov	r3, r0
 8004a28:	71fb      	strb	r3, [r7, #7]
 8004a2a:	460b      	mov	r3, r1
 8004a2c:	71bb      	strb	r3, [r7, #6]
 8004a2e:	4613      	mov	r3, r2
 8004a30:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8004a32:	79bb      	ldrb	r3, [r7, #6]
 8004a34:	b29a      	uxth	r2, r3
 8004a36:	79f9      	ldrb	r1, [r7, #7]
 8004a38:	88bb      	ldrh	r3, [r7, #4]
 8004a3a:	9301      	str	r3, [sp, #4]
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	9300      	str	r3, [sp, #0]
 8004a40:	2301      	movs	r3, #1
 8004a42:	4804      	ldr	r0, [pc, #16]	@ (8004a54 <SENSOR_IO_ReadMultiple+0x38>)
 8004a44:	f7ff ff3e 	bl	80048c4 <I2Cx_ReadMultiple>
 8004a48:	4603      	mov	r3, r0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3708      	adds	r7, #8
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	20002f7c 	.word	0x20002f7c

08004a58 <BSP_SPI3_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI3_Init(void)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b082      	sub	sp, #8
 8004a5c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	607b      	str	r3, [r7, #4]

  hspi3.Instance  = SPI3;
 8004a62:	4b12      	ldr	r3, [pc, #72]	@ (8004aac <BSP_SPI3_Init+0x54>)
 8004a64:	4a12      	ldr	r2, [pc, #72]	@ (8004ab0 <BSP_SPI3_Init+0x58>)
 8004a66:	601a      	str	r2, [r3, #0]

  if(SPI3InitCounter++ == 0)
 8004a68:	4b12      	ldr	r3, [pc, #72]	@ (8004ab4 <BSP_SPI3_Init+0x5c>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	1c5a      	adds	r2, r3, #1
 8004a6e:	4911      	ldr	r1, [pc, #68]	@ (8004ab4 <BSP_SPI3_Init+0x5c>)
 8004a70:	600a      	str	r2, [r1, #0]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d114      	bne.n	8004aa0 <BSP_SPI3_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi3) == HAL_SPI_STATE_RESET)
 8004a76:	480d      	ldr	r0, [pc, #52]	@ (8004aac <BSP_SPI3_Init+0x54>)
 8004a78:	f003 fe70 	bl	800875c <HAL_SPI_GetState>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d10e      	bne.n	8004aa0 <BSP_SPI3_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI3_MspInit(&hspi3);
 8004a82:	480a      	ldr	r0, [pc, #40]	@ (8004aac <BSP_SPI3_Init+0x54>)
 8004a84:	f000 f882 	bl	8004b8c <SPI3_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d108      	bne.n	8004aa0 <BSP_SPI3_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI3_Init(&hspi3) != HAL_OK)
 8004a8e:	4807      	ldr	r0, [pc, #28]	@ (8004aac <BSP_SPI3_Init+0x54>)
 8004a90:	f000 f83a 	bl	8004b08 <MX_SPI3_Init>
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d002      	beq.n	8004aa0 <BSP_SPI3_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8004a9a:	f06f 0307 	mvn.w	r3, #7
 8004a9e:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 8004aa0:	687b      	ldr	r3, [r7, #4]
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3708      	adds	r7, #8
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	20002fd0 	.word	0x20002fd0
 8004ab0:	40003c00 	.word	0x40003c00
 8004ab4:	20003034 	.word	0x20003034

08004ab8 <BSP_SPI3_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI3_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b088      	sub	sp, #32
 8004abc:	af02      	add	r7, sp, #8
 8004abe:	60f8      	str	r0, [r7, #12]
 8004ac0:	60b9      	str	r1, [r7, #8]
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi3, pTxData, pRxData, Length, BUS_SPI3_POLL_TIMEOUT) != HAL_OK)
 8004aca:	88fb      	ldrh	r3, [r7, #6]
 8004acc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004ad0:	9200      	str	r2, [sp, #0]
 8004ad2:	68ba      	ldr	r2, [r7, #8]
 8004ad4:	68f9      	ldr	r1, [r7, #12]
 8004ad6:	4807      	ldr	r0, [pc, #28]	@ (8004af4 <BSP_SPI3_SendRecv+0x3c>)
 8004ad8:	f003 fc21 	bl	800831e <HAL_SPI_TransmitReceive>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d002      	beq.n	8004ae8 <BSP_SPI3_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8004ae2:	f06f 0305 	mvn.w	r3, #5
 8004ae6:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8004ae8:	697b      	ldr	r3, [r7, #20]
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3718      	adds	r7, #24
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	20002fd0 	.word	0x20002fd0

08004af8 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8004af8:	b580      	push	{r7, lr}
 8004afa:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004afc:	f000 fa72 	bl	8004fe4 <HAL_GetTick>
 8004b00:	4603      	mov	r3, r0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	bd80      	pop	{r7, pc}
	...

08004b08 <MX_SPI3_Init>:

/* SPI3 init function */

__weak HAL_StatusTypeDef MX_SPI3_Init(SPI_HandleTypeDef* hspi)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8004b10:	2300      	movs	r3, #0
 8004b12:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI3;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	4a1c      	ldr	r2, [pc, #112]	@ (8004b88 <MX_SPI3_Init+0x80>)
 8004b18:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004b20:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004b2e:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b42:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi->Init.CRCPolynomial = 7;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2207      	movs	r2, #7
 8004b60:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2208      	movs	r2, #8
 8004b6c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f003 fb28 	bl	80081c4 <HAL_SPI_Init>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d001      	beq.n	8004b7e <MX_SPI3_Init+0x76>
  {
    ret = HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3710      	adds	r7, #16
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	40003c00 	.word	0x40003c00

08004b8c <SPI3_MspInit>:

static void SPI3_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b08a      	sub	sp, #40	@ 0x28
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004b94:	4b27      	ldr	r3, [pc, #156]	@ (8004c34 <SPI3_MspInit+0xa8>)
 8004b96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b98:	4a26      	ldr	r2, [pc, #152]	@ (8004c34 <SPI3_MspInit+0xa8>)
 8004b9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b9e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ba0:	4b24      	ldr	r3, [pc, #144]	@ (8004c34 <SPI3_MspInit+0xa8>)
 8004ba2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ba4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ba8:	613b      	str	r3, [r7, #16]
 8004baa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004bac:	4b21      	ldr	r3, [pc, #132]	@ (8004c34 <SPI3_MspInit+0xa8>)
 8004bae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bb0:	4a20      	ldr	r2, [pc, #128]	@ (8004c34 <SPI3_MspInit+0xa8>)
 8004bb2:	f043 0304 	orr.w	r3, r3, #4
 8004bb6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004bb8:	4b1e      	ldr	r3, [pc, #120]	@ (8004c34 <SPI3_MspInit+0xa8>)
 8004bba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bbc:	f003 0304 	and.w	r3, r3, #4
 8004bc0:	60fb      	str	r3, [r7, #12]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = BUS_SPI3_SCK_GPIO_PIN;
 8004bc4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004bc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bca:	2302      	movs	r3, #2
 8004bcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_SCK_GPIO_AF;
 8004bd6:	2306      	movs	r3, #6
 8004bd8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI3_SCK_GPIO_PORT, &GPIO_InitStruct);
 8004bda:	f107 0314 	add.w	r3, r7, #20
 8004bde:	4619      	mov	r1, r3
 8004be0:	4815      	ldr	r0, [pc, #84]	@ (8004c38 <SPI3_MspInit+0xac>)
 8004be2:	f000 fcab 	bl	800553c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI3_MISO_GPIO_PIN;
 8004be6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004bea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bec:	2302      	movs	r3, #2
 8004bee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_MISO_GPIO_AF;
 8004bf8:	2306      	movs	r3, #6
 8004bfa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI3_MISO_GPIO_PORT, &GPIO_InitStruct);
 8004bfc:	f107 0314 	add.w	r3, r7, #20
 8004c00:	4619      	mov	r1, r3
 8004c02:	480d      	ldr	r0, [pc, #52]	@ (8004c38 <SPI3_MspInit+0xac>)
 8004c04:	f000 fc9a 	bl	800553c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI3_MOSI_GPIO_PIN;
 8004c08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004c0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c0e:	2302      	movs	r3, #2
 8004c10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c12:	2300      	movs	r3, #0
 8004c14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c16:	2303      	movs	r3, #3
 8004c18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_MOSI_GPIO_AF;
 8004c1a:	2306      	movs	r3, #6
 8004c1c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI3_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8004c1e:	f107 0314 	add.w	r3, r7, #20
 8004c22:	4619      	mov	r1, r3
 8004c24:	4804      	ldr	r0, [pc, #16]	@ (8004c38 <SPI3_MspInit+0xac>)
 8004c26:	f000 fc89 	bl	800553c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
}
 8004c2a:	bf00      	nop
 8004c2c:	3728      	adds	r7, #40	@ 0x28
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	40021000 	.word	0x40021000
 8004c38:	48000800 	.word	0x48000800

08004c3c <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8004c42:	2300      	movs	r3, #0
 8004c44:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8004c46:	2300      	movs	r3, #0
 8004c48:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8004c4a:	4b19      	ldr	r3, [pc, #100]	@ (8004cb0 <BSP_ACCELERO_Init+0x74>)
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	4798      	blx	r3
 8004c50:	4603      	mov	r3, r0
 8004c52:	2b6a      	cmp	r3, #106	@ 0x6a
 8004c54:	d002      	beq.n	8004c5c <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	73fb      	strb	r3, [r7, #15]
 8004c5a:	e024      	b.n	8004ca6 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8004c5c:	4b15      	ldr	r3, [pc, #84]	@ (8004cb4 <BSP_ACCELERO_Init+0x78>)
 8004c5e:	4a14      	ldr	r2, [pc, #80]	@ (8004cb0 <BSP_ACCELERO_Init+0x74>)
 8004c60:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_3330Hz;
 8004c62:	2390      	movs	r3, #144	@ 0x90
 8004c64:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8004c66:	2300      	movs	r3, #0
 8004c68:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8004c6e:	2340      	movs	r3, #64	@ 0x40
 8004c70:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8004c72:	2300      	movs	r3, #0
 8004c74:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8004c76:	2300      	movs	r3, #0
 8004c78:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8004c7a:	797a      	ldrb	r2, [r7, #5]
 8004c7c:	7abb      	ldrb	r3, [r7, #10]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8004c84:	7a3b      	ldrb	r3, [r7, #8]
 8004c86:	f043 0304 	orr.w	r3, r3, #4
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	021b      	lsls	r3, r3, #8
 8004c8e:	b21a      	sxth	r2, r3
 8004c90:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	b21b      	sxth	r3, r3
 8004c98:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8004c9a:	4b06      	ldr	r3, [pc, #24]	@ (8004cb4 <BSP_ACCELERO_Init+0x78>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	89ba      	ldrh	r2, [r7, #12]
 8004ca2:	4610      	mov	r0, r2
 8004ca4:	4798      	blx	r3
  }  

  return ret;
 8004ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3710      	adds	r7, #16
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}
 8004cb0:	20000010 	.word	0x20000010
 8004cb4:	20003038 	.word	0x20003038

08004cb8 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8004cc0:	4b08      	ldr	r3, [pc, #32]	@ (8004ce4 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d009      	beq.n	8004cdc <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8004cc8:	4b06      	ldr	r3, [pc, #24]	@ (8004ce4 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d004      	beq.n	8004cdc <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8004cd2:	4b04      	ldr	r3, [pc, #16]	@ (8004ce4 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	4798      	blx	r3
    }
  }
}
 8004cdc:	bf00      	nop
 8004cde:	3708      	adds	r7, #8
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}
 8004ce4:	20003038 	.word	0x20003038

08004ce8 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b084      	sub	sp, #16
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	4603      	mov	r3, r0
 8004cf0:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8004cf6:	2110      	movs	r1, #16
 8004cf8:	20d4      	movs	r0, #212	@ 0xd4
 8004cfa:	f7ff fe71 	bl	80049e0 <SENSOR_IO_Read>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t)0x10;
 8004d02:	2310      	movs	r3, #16
 8004d04:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8004d06:	7bbb      	ldrb	r3, [r7, #14]
 8004d08:	f003 0303 	and.w	r3, r3, #3
 8004d0c:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8004d0e:	7bba      	ldrb	r2, [r7, #14]
 8004d10:	7bfb      	ldrb	r3, [r7, #15]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8004d16:	7bbb      	ldrb	r3, [r7, #14]
 8004d18:	461a      	mov	r2, r3
 8004d1a:	2110      	movs	r1, #16
 8004d1c:	20d4      	movs	r0, #212	@ 0xd4
 8004d1e:	f7ff fe45 	bl	80049ac <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8004d22:	2112      	movs	r1, #18
 8004d24:	20d4      	movs	r0, #212	@ 0xd4
 8004d26:	f7ff fe5b 	bl	80049e0 <SENSOR_IO_Read>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8004d2e:	88fb      	ldrh	r3, [r7, #6]
 8004d30:	0a1b      	lsrs	r3, r3, #8
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8004d36:	7bbb      	ldrb	r3, [r7, #14]
 8004d38:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 8004d3c:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8004d3e:	7bba      	ldrb	r2, [r7, #14]
 8004d40:	7bfb      	ldrb	r3, [r7, #15]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8004d46:	7bbb      	ldrb	r3, [r7, #14]
 8004d48:	461a      	mov	r2, r3
 8004d4a:	2112      	movs	r1, #18
 8004d4c:	20d4      	movs	r0, #212	@ 0xd4
 8004d4e:	f7ff fe2d 	bl	80049ac <SENSOR_IO_Write>
}
 8004d52:	bf00      	nop
 8004d54:	3710      	adds	r7, #16
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}

08004d5a <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8004d5a:	b580      	push	{r7, lr}
 8004d5c:	b082      	sub	sp, #8
 8004d5e:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8004d60:	2300      	movs	r3, #0
 8004d62:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8004d64:	2110      	movs	r1, #16
 8004d66:	20d4      	movs	r0, #212	@ 0xd4
 8004d68:	f7ff fe3a 	bl	80049e0 <SENSOR_IO_Read>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8004d70:	79fb      	ldrb	r3, [r7, #7]
 8004d72:	f003 030f 	and.w	r3, r3, #15
 8004d76:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8004d78:	79fb      	ldrb	r3, [r7, #7]
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	2110      	movs	r1, #16
 8004d7e:	20d4      	movs	r0, #212	@ 0xd4
 8004d80:	f7ff fe14 	bl	80049ac <SENSOR_IO_Write>
}
 8004d84:	bf00      	nop
 8004d86:	3708      	adds	r7, #8
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8004d90:	f7ff fe02 	bl	8004998 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8004d94:	210f      	movs	r1, #15
 8004d96:	20d4      	movs	r0, #212	@ 0xd4
 8004d98:	f7ff fe22 	bl	80049e0 <SENSOR_IO_Read>
 8004d9c:	4603      	mov	r3, r0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	bd80      	pop	{r7, pc}

08004da2 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8004da2:	b580      	push	{r7, lr}
 8004da4:	b084      	sub	sp, #16
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	4603      	mov	r3, r0
 8004daa:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8004dac:	2300      	movs	r3, #0
 8004dae:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8004db0:	2115      	movs	r1, #21
 8004db2:	20d4      	movs	r0, #212	@ 0xd4
 8004db4:	f7ff fe14 	bl	80049e0 <SENSOR_IO_Read>
 8004db8:	4603      	mov	r3, r0
 8004dba:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8004dbc:	7bfb      	ldrb	r3, [r7, #15]
 8004dbe:	f023 0310 	bic.w	r3, r3, #16
 8004dc2:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8004dc4:	88fb      	ldrh	r3, [r7, #6]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d003      	beq.n	8004dd2 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8004dca:	7bfb      	ldrb	r3, [r7, #15]
 8004dcc:	f043 0310 	orr.w	r3, r3, #16
 8004dd0:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8004dd2:	7bfb      	ldrb	r3, [r7, #15]
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	2115      	movs	r1, #21
 8004dd8:	20d4      	movs	r0, #212	@ 0xd4
 8004dda:	f7ff fde7 	bl	80049ac <SENSOR_IO_Write>
}
 8004dde:	bf00      	nop
 8004de0:	3710      	adds	r7, #16
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
	...

08004de8 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b088      	sub	sp, #32
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8004df0:	2300      	movs	r3, #0
 8004df2:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8004df4:	2300      	movs	r3, #0
 8004df6:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8004df8:	f04f 0300 	mov.w	r3, #0
 8004dfc:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8004dfe:	2110      	movs	r1, #16
 8004e00:	20d4      	movs	r0, #212	@ 0xd4
 8004e02:	f7ff fded 	bl	80049e0 <SENSOR_IO_Read>
 8004e06:	4603      	mov	r3, r0
 8004e08:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8004e0a:	f107 0208 	add.w	r2, r7, #8
 8004e0e:	2306      	movs	r3, #6
 8004e10:	2128      	movs	r1, #40	@ 0x28
 8004e12:	20d4      	movs	r0, #212	@ 0xd4
 8004e14:	f7ff fe02 	bl	8004a1c <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8004e18:	2300      	movs	r3, #0
 8004e1a:	77fb      	strb	r3, [r7, #31]
 8004e1c:	e01a      	b.n	8004e54 <LSM6DSL_AccReadXYZ+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8004e1e:	7ffb      	ldrb	r3, [r7, #31]
 8004e20:	005b      	lsls	r3, r3, #1
 8004e22:	3301      	adds	r3, #1
 8004e24:	3320      	adds	r3, #32
 8004e26:	443b      	add	r3, r7
 8004e28:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8004e2c:	021b      	lsls	r3, r3, #8
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	7ffa      	ldrb	r2, [r7, #31]
 8004e32:	0052      	lsls	r2, r2, #1
 8004e34:	3220      	adds	r2, #32
 8004e36:	443a      	add	r2, r7
 8004e38:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8004e3c:	4413      	add	r3, r2
 8004e3e:	b29a      	uxth	r2, r3
 8004e40:	7ffb      	ldrb	r3, [r7, #31]
 8004e42:	b212      	sxth	r2, r2
 8004e44:	005b      	lsls	r3, r3, #1
 8004e46:	3320      	adds	r3, #32
 8004e48:	443b      	add	r3, r7
 8004e4a:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8004e4e:	7ffb      	ldrb	r3, [r7, #31]
 8004e50:	3301      	adds	r3, #1
 8004e52:	77fb      	strb	r3, [r7, #31]
 8004e54:	7ffb      	ldrb	r3, [r7, #31]
 8004e56:	2b02      	cmp	r3, #2
 8004e58:	d9e1      	bls.n	8004e1e <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8004e5a:	7dfb      	ldrb	r3, [r7, #23]
 8004e5c:	f003 030c 	and.w	r3, r3, #12
 8004e60:	2b0c      	cmp	r3, #12
 8004e62:	d829      	bhi.n	8004eb8 <LSM6DSL_AccReadXYZ+0xd0>
 8004e64:	a201      	add	r2, pc, #4	@ (adr r2, 8004e6c <LSM6DSL_AccReadXYZ+0x84>)
 8004e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e6a:	bf00      	nop
 8004e6c:	08004ea1 	.word	0x08004ea1
 8004e70:	08004eb9 	.word	0x08004eb9
 8004e74:	08004eb9 	.word	0x08004eb9
 8004e78:	08004eb9 	.word	0x08004eb9
 8004e7c:	08004eb3 	.word	0x08004eb3
 8004e80:	08004eb9 	.word	0x08004eb9
 8004e84:	08004eb9 	.word	0x08004eb9
 8004e88:	08004eb9 	.word	0x08004eb9
 8004e8c:	08004ea7 	.word	0x08004ea7
 8004e90:	08004eb9 	.word	0x08004eb9
 8004e94:	08004eb9 	.word	0x08004eb9
 8004e98:	08004eb9 	.word	0x08004eb9
 8004e9c:	08004ead 	.word	0x08004ead
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8004ea0:	4b18      	ldr	r3, [pc, #96]	@ (8004f04 <LSM6DSL_AccReadXYZ+0x11c>)
 8004ea2:	61bb      	str	r3, [r7, #24]
    break;
 8004ea4:	e008      	b.n	8004eb8 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8004ea6:	4b18      	ldr	r3, [pc, #96]	@ (8004f08 <LSM6DSL_AccReadXYZ+0x120>)
 8004ea8:	61bb      	str	r3, [r7, #24]
    break;
 8004eaa:	e005      	b.n	8004eb8 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8004eac:	4b17      	ldr	r3, [pc, #92]	@ (8004f0c <LSM6DSL_AccReadXYZ+0x124>)
 8004eae:	61bb      	str	r3, [r7, #24]
    break;
 8004eb0:	e002      	b.n	8004eb8 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8004eb2:	4b17      	ldr	r3, [pc, #92]	@ (8004f10 <LSM6DSL_AccReadXYZ+0x128>)
 8004eb4:	61bb      	str	r3, [r7, #24]
    break;    
 8004eb6:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8004eb8:	2300      	movs	r3, #0
 8004eba:	77fb      	strb	r3, [r7, #31]
 8004ebc:	e01a      	b.n	8004ef4 <LSM6DSL_AccReadXYZ+0x10c>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8004ebe:	7ffb      	ldrb	r3, [r7, #31]
 8004ec0:	005b      	lsls	r3, r3, #1
 8004ec2:	3320      	adds	r3, #32
 8004ec4:	443b      	add	r3, r7
 8004ec6:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8004eca:	ee07 3a90 	vmov	s15, r3
 8004ece:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004ed2:	edd7 7a06 	vldr	s15, [r7, #24]
 8004ed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eda:	7ffb      	ldrb	r3, [r7, #31]
 8004edc:	005b      	lsls	r3, r3, #1
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	4413      	add	r3, r2
 8004ee2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ee6:	ee17 2a90 	vmov	r2, s15
 8004eea:	b212      	sxth	r2, r2
 8004eec:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8004eee:	7ffb      	ldrb	r3, [r7, #31]
 8004ef0:	3301      	adds	r3, #1
 8004ef2:	77fb      	strb	r3, [r7, #31]
 8004ef4:	7ffb      	ldrb	r3, [r7, #31]
 8004ef6:	2b02      	cmp	r3, #2
 8004ef8:	d9e1      	bls.n	8004ebe <LSM6DSL_AccReadXYZ+0xd6>
  }
}
 8004efa:	bf00      	nop
 8004efc:	bf00      	nop
 8004efe:	3720      	adds	r7, #32
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}
 8004f04:	3d79db23 	.word	0x3d79db23
 8004f08:	3df9db23 	.word	0x3df9db23
 8004f0c:	3e79db23 	.word	0x3e79db23
 8004f10:	3ef9db23 	.word	0x3ef9db23

08004f14 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b082      	sub	sp, #8
 8004f18:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004f1e:	2003      	movs	r0, #3
 8004f20:	f000 f960 	bl	80051e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004f24:	200f      	movs	r0, #15
 8004f26:	f000 f80d 	bl	8004f44 <HAL_InitTick>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d002      	beq.n	8004f36 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	71fb      	strb	r3, [r7, #7]
 8004f34:	e001      	b.n	8004f3a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004f36:	f7fe ff49 	bl	8003dcc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004f3a:	79fb      	ldrb	r3, [r7, #7]
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3708      	adds	r7, #8
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8004f50:	4b17      	ldr	r3, [pc, #92]	@ (8004fb0 <HAL_InitTick+0x6c>)
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d023      	beq.n	8004fa0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004f58:	4b16      	ldr	r3, [pc, #88]	@ (8004fb4 <HAL_InitTick+0x70>)
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	4b14      	ldr	r3, [pc, #80]	@ (8004fb0 <HAL_InitTick+0x6c>)
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	4619      	mov	r1, r3
 8004f62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004f66:	fbb3 f3f1 	udiv	r3, r3, r1
 8004f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f000 f96d 	bl	800524e <HAL_SYSTICK_Config>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d10f      	bne.n	8004f9a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2b0f      	cmp	r3, #15
 8004f7e:	d809      	bhi.n	8004f94 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004f80:	2200      	movs	r2, #0
 8004f82:	6879      	ldr	r1, [r7, #4]
 8004f84:	f04f 30ff 	mov.w	r0, #4294967295
 8004f88:	f000 f937 	bl	80051fa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004f8c:	4a0a      	ldr	r2, [pc, #40]	@ (8004fb8 <HAL_InitTick+0x74>)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6013      	str	r3, [r2, #0]
 8004f92:	e007      	b.n	8004fa4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	73fb      	strb	r3, [r7, #15]
 8004f98:	e004      	b.n	8004fa4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	73fb      	strb	r3, [r7, #15]
 8004f9e:	e001      	b.n	8004fa4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3710      	adds	r7, #16
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop
 8004fb0:	20000048 	.word	0x20000048
 8004fb4:	20000004 	.word	0x20000004
 8004fb8:	20000044 	.word	0x20000044

08004fbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004fc0:	4b06      	ldr	r3, [pc, #24]	@ (8004fdc <HAL_IncTick+0x20>)
 8004fc2:	781b      	ldrb	r3, [r3, #0]
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	4b06      	ldr	r3, [pc, #24]	@ (8004fe0 <HAL_IncTick+0x24>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4413      	add	r3, r2
 8004fcc:	4a04      	ldr	r2, [pc, #16]	@ (8004fe0 <HAL_IncTick+0x24>)
 8004fce:	6013      	str	r3, [r2, #0]
}
 8004fd0:	bf00      	nop
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop
 8004fdc:	20000048 	.word	0x20000048
 8004fe0:	2000303c 	.word	0x2000303c

08004fe4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	af00      	add	r7, sp, #0
  return uwTick;
 8004fe8:	4b03      	ldr	r3, [pc, #12]	@ (8004ff8 <HAL_GetTick+0x14>)
 8004fea:	681b      	ldr	r3, [r3, #0]
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr
 8004ff6:	bf00      	nop
 8004ff8:	2000303c 	.word	0x2000303c

08004ffc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b084      	sub	sp, #16
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005004:	f7ff ffee 	bl	8004fe4 <HAL_GetTick>
 8005008:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005014:	d005      	beq.n	8005022 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8005016:	4b0a      	ldr	r3, [pc, #40]	@ (8005040 <HAL_Delay+0x44>)
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	461a      	mov	r2, r3
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	4413      	add	r3, r2
 8005020:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005022:	bf00      	nop
 8005024:	f7ff ffde 	bl	8004fe4 <HAL_GetTick>
 8005028:	4602      	mov	r2, r0
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	429a      	cmp	r2, r3
 8005032:	d8f7      	bhi.n	8005024 <HAL_Delay+0x28>
  {
  }
}
 8005034:	bf00      	nop
 8005036:	bf00      	nop
 8005038:	3710      	adds	r7, #16
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	20000048 	.word	0x20000048

08005044 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005044:	b480      	push	{r7}
 8005046:	b085      	sub	sp, #20
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f003 0307 	and.w	r3, r3, #7
 8005052:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005054:	4b0c      	ldr	r3, [pc, #48]	@ (8005088 <__NVIC_SetPriorityGrouping+0x44>)
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800505a:	68ba      	ldr	r2, [r7, #8]
 800505c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005060:	4013      	ands	r3, r2
 8005062:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800506c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005070:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005074:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005076:	4a04      	ldr	r2, [pc, #16]	@ (8005088 <__NVIC_SetPriorityGrouping+0x44>)
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	60d3      	str	r3, [r2, #12]
}
 800507c:	bf00      	nop
 800507e:	3714      	adds	r7, #20
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr
 8005088:	e000ed00 	.word	0xe000ed00

0800508c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800508c:	b480      	push	{r7}
 800508e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005090:	4b04      	ldr	r3, [pc, #16]	@ (80050a4 <__NVIC_GetPriorityGrouping+0x18>)
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	0a1b      	lsrs	r3, r3, #8
 8005096:	f003 0307 	and.w	r3, r3, #7
}
 800509a:	4618      	mov	r0, r3
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr
 80050a4:	e000ed00 	.word	0xe000ed00

080050a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	4603      	mov	r3, r0
 80050b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	db0b      	blt.n	80050d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80050ba:	79fb      	ldrb	r3, [r7, #7]
 80050bc:	f003 021f 	and.w	r2, r3, #31
 80050c0:	4907      	ldr	r1, [pc, #28]	@ (80050e0 <__NVIC_EnableIRQ+0x38>)
 80050c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050c6:	095b      	lsrs	r3, r3, #5
 80050c8:	2001      	movs	r0, #1
 80050ca:	fa00 f202 	lsl.w	r2, r0, r2
 80050ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80050d2:	bf00      	nop
 80050d4:	370c      	adds	r7, #12
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr
 80050de:	bf00      	nop
 80050e0:	e000e100 	.word	0xe000e100

080050e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	4603      	mov	r3, r0
 80050ec:	6039      	str	r1, [r7, #0]
 80050ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	db0a      	blt.n	800510e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	b2da      	uxtb	r2, r3
 80050fc:	490c      	ldr	r1, [pc, #48]	@ (8005130 <__NVIC_SetPriority+0x4c>)
 80050fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005102:	0112      	lsls	r2, r2, #4
 8005104:	b2d2      	uxtb	r2, r2
 8005106:	440b      	add	r3, r1
 8005108:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800510c:	e00a      	b.n	8005124 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	b2da      	uxtb	r2, r3
 8005112:	4908      	ldr	r1, [pc, #32]	@ (8005134 <__NVIC_SetPriority+0x50>)
 8005114:	79fb      	ldrb	r3, [r7, #7]
 8005116:	f003 030f 	and.w	r3, r3, #15
 800511a:	3b04      	subs	r3, #4
 800511c:	0112      	lsls	r2, r2, #4
 800511e:	b2d2      	uxtb	r2, r2
 8005120:	440b      	add	r3, r1
 8005122:	761a      	strb	r2, [r3, #24]
}
 8005124:	bf00      	nop
 8005126:	370c      	adds	r7, #12
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr
 8005130:	e000e100 	.word	0xe000e100
 8005134:	e000ed00 	.word	0xe000ed00

08005138 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005138:	b480      	push	{r7}
 800513a:	b089      	sub	sp, #36	@ 0x24
 800513c:	af00      	add	r7, sp, #0
 800513e:	60f8      	str	r0, [r7, #12]
 8005140:	60b9      	str	r1, [r7, #8]
 8005142:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f003 0307 	and.w	r3, r3, #7
 800514a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	f1c3 0307 	rsb	r3, r3, #7
 8005152:	2b04      	cmp	r3, #4
 8005154:	bf28      	it	cs
 8005156:	2304      	movcs	r3, #4
 8005158:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800515a:	69fb      	ldr	r3, [r7, #28]
 800515c:	3304      	adds	r3, #4
 800515e:	2b06      	cmp	r3, #6
 8005160:	d902      	bls.n	8005168 <NVIC_EncodePriority+0x30>
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	3b03      	subs	r3, #3
 8005166:	e000      	b.n	800516a <NVIC_EncodePriority+0x32>
 8005168:	2300      	movs	r3, #0
 800516a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800516c:	f04f 32ff 	mov.w	r2, #4294967295
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	fa02 f303 	lsl.w	r3, r2, r3
 8005176:	43da      	mvns	r2, r3
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	401a      	ands	r2, r3
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005180:	f04f 31ff 	mov.w	r1, #4294967295
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	fa01 f303 	lsl.w	r3, r1, r3
 800518a:	43d9      	mvns	r1, r3
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005190:	4313      	orrs	r3, r2
         );
}
 8005192:	4618      	mov	r0, r3
 8005194:	3724      	adds	r7, #36	@ 0x24
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr
	...

080051a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b082      	sub	sp, #8
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	3b01      	subs	r3, #1
 80051ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80051b0:	d301      	bcc.n	80051b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80051b2:	2301      	movs	r3, #1
 80051b4:	e00f      	b.n	80051d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80051b6:	4a0a      	ldr	r2, [pc, #40]	@ (80051e0 <SysTick_Config+0x40>)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	3b01      	subs	r3, #1
 80051bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80051be:	210f      	movs	r1, #15
 80051c0:	f04f 30ff 	mov.w	r0, #4294967295
 80051c4:	f7ff ff8e 	bl	80050e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80051c8:	4b05      	ldr	r3, [pc, #20]	@ (80051e0 <SysTick_Config+0x40>)
 80051ca:	2200      	movs	r2, #0
 80051cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80051ce:	4b04      	ldr	r3, [pc, #16]	@ (80051e0 <SysTick_Config+0x40>)
 80051d0:	2207      	movs	r2, #7
 80051d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80051d4:	2300      	movs	r3, #0
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3708      	adds	r7, #8
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	bf00      	nop
 80051e0:	e000e010 	.word	0xe000e010

080051e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b082      	sub	sp, #8
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f7ff ff29 	bl	8005044 <__NVIC_SetPriorityGrouping>
}
 80051f2:	bf00      	nop
 80051f4:	3708      	adds	r7, #8
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}

080051fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80051fa:	b580      	push	{r7, lr}
 80051fc:	b086      	sub	sp, #24
 80051fe:	af00      	add	r7, sp, #0
 8005200:	4603      	mov	r3, r0
 8005202:	60b9      	str	r1, [r7, #8]
 8005204:	607a      	str	r2, [r7, #4]
 8005206:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005208:	2300      	movs	r3, #0
 800520a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800520c:	f7ff ff3e 	bl	800508c <__NVIC_GetPriorityGrouping>
 8005210:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	68b9      	ldr	r1, [r7, #8]
 8005216:	6978      	ldr	r0, [r7, #20]
 8005218:	f7ff ff8e 	bl	8005138 <NVIC_EncodePriority>
 800521c:	4602      	mov	r2, r0
 800521e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005222:	4611      	mov	r1, r2
 8005224:	4618      	mov	r0, r3
 8005226:	f7ff ff5d 	bl	80050e4 <__NVIC_SetPriority>
}
 800522a:	bf00      	nop
 800522c:	3718      	adds	r7, #24
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}

08005232 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005232:	b580      	push	{r7, lr}
 8005234:	b082      	sub	sp, #8
 8005236:	af00      	add	r7, sp, #0
 8005238:	4603      	mov	r3, r0
 800523a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800523c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005240:	4618      	mov	r0, r3
 8005242:	f7ff ff31 	bl	80050a8 <__NVIC_EnableIRQ>
}
 8005246:	bf00      	nop
 8005248:	3708      	adds	r7, #8
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}

0800524e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800524e:	b580      	push	{r7, lr}
 8005250:	b082      	sub	sp, #8
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f7ff ffa2 	bl	80051a0 <SysTick_Config>
 800525c:	4603      	mov	r3, r0
}
 800525e:	4618      	mov	r0, r3
 8005260:	3708      	adds	r7, #8
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
	...

08005268 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b082      	sub	sp, #8
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d101      	bne.n	800527a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e0ac      	b.n	80053d4 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4618      	mov	r0, r3
 8005280:	f000 f8b2 	bl	80053e8 <DFSDM_GetChannelFromInstance>
 8005284:	4603      	mov	r3, r0
 8005286:	4a55      	ldr	r2, [pc, #340]	@ (80053dc <HAL_DFSDM_ChannelInit+0x174>)
 8005288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d001      	beq.n	8005294 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	e09f      	b.n	80053d4 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f7fe fdc1 	bl	8003e1c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800529a:	4b51      	ldr	r3, [pc, #324]	@ (80053e0 <HAL_DFSDM_ChannelInit+0x178>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	3301      	adds	r3, #1
 80052a0:	4a4f      	ldr	r2, [pc, #316]	@ (80053e0 <HAL_DFSDM_ChannelInit+0x178>)
 80052a2:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80052a4:	4b4e      	ldr	r3, [pc, #312]	@ (80053e0 <HAL_DFSDM_ChannelInit+0x178>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d125      	bne.n	80052f8 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80052ac:	4b4d      	ldr	r3, [pc, #308]	@ (80053e4 <HAL_DFSDM_ChannelInit+0x17c>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a4c      	ldr	r2, [pc, #304]	@ (80053e4 <HAL_DFSDM_ChannelInit+0x17c>)
 80052b2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80052b6:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80052b8:	4b4a      	ldr	r3, [pc, #296]	@ (80053e4 <HAL_DFSDM_ChannelInit+0x17c>)
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	4948      	ldr	r1, [pc, #288]	@ (80053e4 <HAL_DFSDM_ChannelInit+0x17c>)
 80052c2:	4313      	orrs	r3, r2
 80052c4:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80052c6:	4b47      	ldr	r3, [pc, #284]	@ (80053e4 <HAL_DFSDM_ChannelInit+0x17c>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a46      	ldr	r2, [pc, #280]	@ (80053e4 <HAL_DFSDM_ChannelInit+0x17c>)
 80052cc:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 80052d0:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	791b      	ldrb	r3, [r3, #4]
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d108      	bne.n	80052ec <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80052da:	4b42      	ldr	r3, [pc, #264]	@ (80053e4 <HAL_DFSDM_ChannelInit+0x17c>)
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	3b01      	subs	r3, #1
 80052e4:	041b      	lsls	r3, r3, #16
 80052e6:	493f      	ldr	r1, [pc, #252]	@ (80053e4 <HAL_DFSDM_ChannelInit+0x17c>)
 80052e8:	4313      	orrs	r3, r2
 80052ea:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80052ec:	4b3d      	ldr	r3, [pc, #244]	@ (80053e4 <HAL_DFSDM_ChannelInit+0x17c>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a3c      	ldr	r2, [pc, #240]	@ (80053e4 <HAL_DFSDM_ChannelInit+0x17c>)
 80052f2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80052f6:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 8005306:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	6819      	ldr	r1, [r3, #0]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8005316:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800531c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	430a      	orrs	r2, r1
 8005324:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f022 020f 	bic.w	r2, r2, #15
 8005334:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	6819      	ldr	r1, [r3, #0]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8005344:	431a      	orrs	r2, r3
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	430a      	orrs	r2, r1
 800534c:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	689a      	ldr	r2, [r3, #8]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 800535c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	6899      	ldr	r1, [r3, #8]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800536c:	3b01      	subs	r3, #1
 800536e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8005370:	431a      	orrs	r2, r3
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	430a      	orrs	r2, r1
 8005378:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	685a      	ldr	r2, [r3, #4]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f002 0207 	and.w	r2, r2, #7
 8005388:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	6859      	ldr	r1, [r3, #4]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005394:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800539a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800539c:	431a      	orrs	r2, r3
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	430a      	orrs	r2, r1
 80053a4:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80053b4:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2201      	movs	r2, #1
 80053ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4618      	mov	r0, r3
 80053c4:	f000 f810 	bl	80053e8 <DFSDM_GetChannelFromInstance>
 80053c8:	4602      	mov	r2, r0
 80053ca:	4904      	ldr	r1, [pc, #16]	@ (80053dc <HAL_DFSDM_ChannelInit+0x174>)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80053d2:	2300      	movs	r3, #0
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3708      	adds	r7, #8
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	20003044 	.word	0x20003044
 80053e0:	20003040 	.word	0x20003040
 80053e4:	40016000 	.word	0x40016000

080053e8 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b085      	sub	sp, #20
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	4a1c      	ldr	r2, [pc, #112]	@ (8005464 <DFSDM_GetChannelFromInstance+0x7c>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d102      	bne.n	80053fe <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80053f8:	2300      	movs	r3, #0
 80053fa:	60fb      	str	r3, [r7, #12]
 80053fc:	e02b      	b.n	8005456 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4a19      	ldr	r2, [pc, #100]	@ (8005468 <DFSDM_GetChannelFromInstance+0x80>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d102      	bne.n	800540c <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8005406:	2301      	movs	r3, #1
 8005408:	60fb      	str	r3, [r7, #12]
 800540a:	e024      	b.n	8005456 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	4a17      	ldr	r2, [pc, #92]	@ (800546c <DFSDM_GetChannelFromInstance+0x84>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d102      	bne.n	800541a <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8005414:	2302      	movs	r3, #2
 8005416:	60fb      	str	r3, [r7, #12]
 8005418:	e01d      	b.n	8005456 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4a14      	ldr	r2, [pc, #80]	@ (8005470 <DFSDM_GetChannelFromInstance+0x88>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d102      	bne.n	8005428 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8005422:	2304      	movs	r3, #4
 8005424:	60fb      	str	r3, [r7, #12]
 8005426:	e016      	b.n	8005456 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	4a12      	ldr	r2, [pc, #72]	@ (8005474 <DFSDM_GetChannelFromInstance+0x8c>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d102      	bne.n	8005436 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8005430:	2305      	movs	r3, #5
 8005432:	60fb      	str	r3, [r7, #12]
 8005434:	e00f      	b.n	8005456 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	4a0f      	ldr	r2, [pc, #60]	@ (8005478 <DFSDM_GetChannelFromInstance+0x90>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d102      	bne.n	8005444 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800543e:	2306      	movs	r3, #6
 8005440:	60fb      	str	r3, [r7, #12]
 8005442:	e008      	b.n	8005456 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	4a0d      	ldr	r2, [pc, #52]	@ (800547c <DFSDM_GetChannelFromInstance+0x94>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d102      	bne.n	8005452 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 800544c:	2307      	movs	r3, #7
 800544e:	60fb      	str	r3, [r7, #12]
 8005450:	e001      	b.n	8005456 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8005452:	2303      	movs	r3, #3
 8005454:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8005456:	68fb      	ldr	r3, [r7, #12]
}
 8005458:	4618      	mov	r0, r3
 800545a:	3714      	adds	r7, #20
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr
 8005464:	40016000 	.word	0x40016000
 8005468:	40016020 	.word	0x40016020
 800546c:	40016040 	.word	0x40016040
 8005470:	40016080 	.word	0x40016080
 8005474:	400160a0 	.word	0x400160a0
 8005478:	400160c0 	.word	0x400160c0
 800547c:	400160e0 	.word	0x400160e0

08005480 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8005480:	b480      	push	{r7}
 8005482:	b087      	sub	sp, #28
 8005484:	af00      	add	r7, sp, #0
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	460b      	mov	r3, r1
 800548a:	607a      	str	r2, [r7, #4]
 800548c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800548e:	2300      	movs	r3, #0
 8005490:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8005492:	7afb      	ldrb	r3, [r7, #11]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d103      	bne.n	80054a0 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	605a      	str	r2, [r3, #4]
      break;
 800549e:	e002      	b.n	80054a6 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	75fb      	strb	r3, [r7, #23]
      break;
 80054a4:	bf00      	nop
  }

  return status;
 80054a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	371c      	adds	r7, #28
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr

080054b4 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d101      	bne.n	80054c8 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e003      	b.n	80054d0 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	683a      	ldr	r2, [r7, #0]
 80054cc:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80054ce:	2300      	movs	r3, #0
  }
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	370c      	adds	r7, #12
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr

080054dc <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b086      	sub	sp, #24
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	0c1b      	lsrs	r3, r3, #16
 80054ea:	f003 0301 	and.w	r3, r3, #1
 80054ee:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 031f 	and.w	r3, r3, #31
 80054f8:	2201      	movs	r2, #1
 80054fa:	fa02 f303 	lsl.w	r3, r2, r3
 80054fe:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	015a      	lsls	r2, r3, #5
 8005504:	4b0c      	ldr	r3, [pc, #48]	@ (8005538 <HAL_EXTI_IRQHandler+0x5c>)
 8005506:	4413      	add	r3, r2
 8005508:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	693a      	ldr	r2, [r7, #16]
 8005510:	4013      	ands	r3, r2
 8005512:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d009      	beq.n	800552e <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	693a      	ldr	r2, [r7, #16]
 800551e:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d002      	beq.n	800552e <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	4798      	blx	r3
    }
  }
}
 800552e:	bf00      	nop
 8005530:	3718      	adds	r7, #24
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	40010414 	.word	0x40010414

0800553c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800553c:	b480      	push	{r7}
 800553e:	b087      	sub	sp, #28
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005546:	2300      	movs	r3, #0
 8005548:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800554a:	e17f      	b.n	800584c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	2101      	movs	r1, #1
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	fa01 f303 	lsl.w	r3, r1, r3
 8005558:	4013      	ands	r3, r2
 800555a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2b00      	cmp	r3, #0
 8005560:	f000 8171 	beq.w	8005846 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	f003 0303 	and.w	r3, r3, #3
 800556c:	2b01      	cmp	r3, #1
 800556e:	d005      	beq.n	800557c <HAL_GPIO_Init+0x40>
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	f003 0303 	and.w	r3, r3, #3
 8005578:	2b02      	cmp	r3, #2
 800557a:	d130      	bne.n	80055de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	005b      	lsls	r3, r3, #1
 8005586:	2203      	movs	r2, #3
 8005588:	fa02 f303 	lsl.w	r3, r2, r3
 800558c:	43db      	mvns	r3, r3
 800558e:	693a      	ldr	r2, [r7, #16]
 8005590:	4013      	ands	r3, r2
 8005592:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	68da      	ldr	r2, [r3, #12]
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	005b      	lsls	r3, r3, #1
 800559c:	fa02 f303 	lsl.w	r3, r2, r3
 80055a0:	693a      	ldr	r2, [r7, #16]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	693a      	ldr	r2, [r7, #16]
 80055aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80055b2:	2201      	movs	r2, #1
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	fa02 f303 	lsl.w	r3, r2, r3
 80055ba:	43db      	mvns	r3, r3
 80055bc:	693a      	ldr	r2, [r7, #16]
 80055be:	4013      	ands	r3, r2
 80055c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	091b      	lsrs	r3, r3, #4
 80055c8:	f003 0201 	and.w	r2, r3, #1
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	fa02 f303 	lsl.w	r3, r2, r3
 80055d2:	693a      	ldr	r2, [r7, #16]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	693a      	ldr	r2, [r7, #16]
 80055dc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	f003 0303 	and.w	r3, r3, #3
 80055e6:	2b03      	cmp	r3, #3
 80055e8:	d118      	bne.n	800561c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80055f0:	2201      	movs	r2, #1
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	fa02 f303 	lsl.w	r3, r2, r3
 80055f8:	43db      	mvns	r3, r3
 80055fa:	693a      	ldr	r2, [r7, #16]
 80055fc:	4013      	ands	r3, r2
 80055fe:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	08db      	lsrs	r3, r3, #3
 8005606:	f003 0201 	and.w	r2, r3, #1
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	fa02 f303 	lsl.w	r3, r2, r3
 8005610:	693a      	ldr	r2, [r7, #16]
 8005612:	4313      	orrs	r3, r2
 8005614:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	693a      	ldr	r2, [r7, #16]
 800561a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	f003 0303 	and.w	r3, r3, #3
 8005624:	2b03      	cmp	r3, #3
 8005626:	d017      	beq.n	8005658 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	005b      	lsls	r3, r3, #1
 8005632:	2203      	movs	r2, #3
 8005634:	fa02 f303 	lsl.w	r3, r2, r3
 8005638:	43db      	mvns	r3, r3
 800563a:	693a      	ldr	r2, [r7, #16]
 800563c:	4013      	ands	r3, r2
 800563e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	689a      	ldr	r2, [r3, #8]
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	005b      	lsls	r3, r3, #1
 8005648:	fa02 f303 	lsl.w	r3, r2, r3
 800564c:	693a      	ldr	r2, [r7, #16]
 800564e:	4313      	orrs	r3, r2
 8005650:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	693a      	ldr	r2, [r7, #16]
 8005656:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	f003 0303 	and.w	r3, r3, #3
 8005660:	2b02      	cmp	r3, #2
 8005662:	d123      	bne.n	80056ac <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	08da      	lsrs	r2, r3, #3
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	3208      	adds	r2, #8
 800566c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005670:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	f003 0307 	and.w	r3, r3, #7
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	220f      	movs	r2, #15
 800567c:	fa02 f303 	lsl.w	r3, r2, r3
 8005680:	43db      	mvns	r3, r3
 8005682:	693a      	ldr	r2, [r7, #16]
 8005684:	4013      	ands	r3, r2
 8005686:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	691a      	ldr	r2, [r3, #16]
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	f003 0307 	and.w	r3, r3, #7
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	fa02 f303 	lsl.w	r3, r2, r3
 8005698:	693a      	ldr	r2, [r7, #16]
 800569a:	4313      	orrs	r3, r2
 800569c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	08da      	lsrs	r2, r3, #3
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	3208      	adds	r2, #8
 80056a6:	6939      	ldr	r1, [r7, #16]
 80056a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	005b      	lsls	r3, r3, #1
 80056b6:	2203      	movs	r2, #3
 80056b8:	fa02 f303 	lsl.w	r3, r2, r3
 80056bc:	43db      	mvns	r3, r3
 80056be:	693a      	ldr	r2, [r7, #16]
 80056c0:	4013      	ands	r3, r2
 80056c2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	f003 0203 	and.w	r2, r3, #3
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	005b      	lsls	r3, r3, #1
 80056d0:	fa02 f303 	lsl.w	r3, r2, r3
 80056d4:	693a      	ldr	r2, [r7, #16]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	693a      	ldr	r2, [r7, #16]
 80056de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	f000 80ac 	beq.w	8005846 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056ee:	4b5f      	ldr	r3, [pc, #380]	@ (800586c <HAL_GPIO_Init+0x330>)
 80056f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056f2:	4a5e      	ldr	r2, [pc, #376]	@ (800586c <HAL_GPIO_Init+0x330>)
 80056f4:	f043 0301 	orr.w	r3, r3, #1
 80056f8:	6613      	str	r3, [r2, #96]	@ 0x60
 80056fa:	4b5c      	ldr	r3, [pc, #368]	@ (800586c <HAL_GPIO_Init+0x330>)
 80056fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056fe:	f003 0301 	and.w	r3, r3, #1
 8005702:	60bb      	str	r3, [r7, #8]
 8005704:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005706:	4a5a      	ldr	r2, [pc, #360]	@ (8005870 <HAL_GPIO_Init+0x334>)
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	089b      	lsrs	r3, r3, #2
 800570c:	3302      	adds	r3, #2
 800570e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005712:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	f003 0303 	and.w	r3, r3, #3
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	220f      	movs	r2, #15
 800571e:	fa02 f303 	lsl.w	r3, r2, r3
 8005722:	43db      	mvns	r3, r3
 8005724:	693a      	ldr	r2, [r7, #16]
 8005726:	4013      	ands	r3, r2
 8005728:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005730:	d025      	beq.n	800577e <HAL_GPIO_Init+0x242>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a4f      	ldr	r2, [pc, #316]	@ (8005874 <HAL_GPIO_Init+0x338>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d01f      	beq.n	800577a <HAL_GPIO_Init+0x23e>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4a4e      	ldr	r2, [pc, #312]	@ (8005878 <HAL_GPIO_Init+0x33c>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d019      	beq.n	8005776 <HAL_GPIO_Init+0x23a>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4a4d      	ldr	r2, [pc, #308]	@ (800587c <HAL_GPIO_Init+0x340>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d013      	beq.n	8005772 <HAL_GPIO_Init+0x236>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a4c      	ldr	r2, [pc, #304]	@ (8005880 <HAL_GPIO_Init+0x344>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d00d      	beq.n	800576e <HAL_GPIO_Init+0x232>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a4b      	ldr	r2, [pc, #300]	@ (8005884 <HAL_GPIO_Init+0x348>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d007      	beq.n	800576a <HAL_GPIO_Init+0x22e>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a4a      	ldr	r2, [pc, #296]	@ (8005888 <HAL_GPIO_Init+0x34c>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d101      	bne.n	8005766 <HAL_GPIO_Init+0x22a>
 8005762:	2306      	movs	r3, #6
 8005764:	e00c      	b.n	8005780 <HAL_GPIO_Init+0x244>
 8005766:	2307      	movs	r3, #7
 8005768:	e00a      	b.n	8005780 <HAL_GPIO_Init+0x244>
 800576a:	2305      	movs	r3, #5
 800576c:	e008      	b.n	8005780 <HAL_GPIO_Init+0x244>
 800576e:	2304      	movs	r3, #4
 8005770:	e006      	b.n	8005780 <HAL_GPIO_Init+0x244>
 8005772:	2303      	movs	r3, #3
 8005774:	e004      	b.n	8005780 <HAL_GPIO_Init+0x244>
 8005776:	2302      	movs	r3, #2
 8005778:	e002      	b.n	8005780 <HAL_GPIO_Init+0x244>
 800577a:	2301      	movs	r3, #1
 800577c:	e000      	b.n	8005780 <HAL_GPIO_Init+0x244>
 800577e:	2300      	movs	r3, #0
 8005780:	697a      	ldr	r2, [r7, #20]
 8005782:	f002 0203 	and.w	r2, r2, #3
 8005786:	0092      	lsls	r2, r2, #2
 8005788:	4093      	lsls	r3, r2
 800578a:	693a      	ldr	r2, [r7, #16]
 800578c:	4313      	orrs	r3, r2
 800578e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005790:	4937      	ldr	r1, [pc, #220]	@ (8005870 <HAL_GPIO_Init+0x334>)
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	089b      	lsrs	r3, r3, #2
 8005796:	3302      	adds	r3, #2
 8005798:	693a      	ldr	r2, [r7, #16]
 800579a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800579e:	4b3b      	ldr	r3, [pc, #236]	@ (800588c <HAL_GPIO_Init+0x350>)
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	43db      	mvns	r3, r3
 80057a8:	693a      	ldr	r2, [r7, #16]
 80057aa:	4013      	ands	r3, r2
 80057ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d003      	beq.n	80057c2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80057ba:	693a      	ldr	r2, [r7, #16]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	4313      	orrs	r3, r2
 80057c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80057c2:	4a32      	ldr	r2, [pc, #200]	@ (800588c <HAL_GPIO_Init+0x350>)
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80057c8:	4b30      	ldr	r3, [pc, #192]	@ (800588c <HAL_GPIO_Init+0x350>)
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	43db      	mvns	r3, r3
 80057d2:	693a      	ldr	r2, [r7, #16]
 80057d4:	4013      	ands	r3, r2
 80057d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d003      	beq.n	80057ec <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80057e4:	693a      	ldr	r2, [r7, #16]
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80057ec:	4a27      	ldr	r2, [pc, #156]	@ (800588c <HAL_GPIO_Init+0x350>)
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80057f2:	4b26      	ldr	r3, [pc, #152]	@ (800588c <HAL_GPIO_Init+0x350>)
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	43db      	mvns	r3, r3
 80057fc:	693a      	ldr	r2, [r7, #16]
 80057fe:	4013      	ands	r3, r2
 8005800:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800580a:	2b00      	cmp	r3, #0
 800580c:	d003      	beq.n	8005816 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800580e:	693a      	ldr	r2, [r7, #16]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	4313      	orrs	r3, r2
 8005814:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005816:	4a1d      	ldr	r2, [pc, #116]	@ (800588c <HAL_GPIO_Init+0x350>)
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800581c:	4b1b      	ldr	r3, [pc, #108]	@ (800588c <HAL_GPIO_Init+0x350>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	43db      	mvns	r3, r3
 8005826:	693a      	ldr	r2, [r7, #16]
 8005828:	4013      	ands	r3, r2
 800582a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005834:	2b00      	cmp	r3, #0
 8005836:	d003      	beq.n	8005840 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8005838:	693a      	ldr	r2, [r7, #16]
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	4313      	orrs	r3, r2
 800583e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005840:	4a12      	ldr	r2, [pc, #72]	@ (800588c <HAL_GPIO_Init+0x350>)
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	3301      	adds	r3, #1
 800584a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	fa22 f303 	lsr.w	r3, r2, r3
 8005856:	2b00      	cmp	r3, #0
 8005858:	f47f ae78 	bne.w	800554c <HAL_GPIO_Init+0x10>
  }
}
 800585c:	bf00      	nop
 800585e:	bf00      	nop
 8005860:	371c      	adds	r7, #28
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr
 800586a:	bf00      	nop
 800586c:	40021000 	.word	0x40021000
 8005870:	40010000 	.word	0x40010000
 8005874:	48000400 	.word	0x48000400
 8005878:	48000800 	.word	0x48000800
 800587c:	48000c00 	.word	0x48000c00
 8005880:	48001000 	.word	0x48001000
 8005884:	48001400 	.word	0x48001400
 8005888:	48001800 	.word	0x48001800
 800588c:	40010400 	.word	0x40010400

08005890 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005890:	b480      	push	{r7}
 8005892:	b087      	sub	sp, #28
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800589a:	2300      	movs	r3, #0
 800589c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800589e:	e0cd      	b.n	8005a3c <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80058a0:	2201      	movs	r2, #1
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	fa02 f303 	lsl.w	r3, r2, r3
 80058a8:	683a      	ldr	r2, [r7, #0]
 80058aa:	4013      	ands	r3, r2
 80058ac:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	f000 80c0 	beq.w	8005a36 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80058b6:	4a68      	ldr	r2, [pc, #416]	@ (8005a58 <HAL_GPIO_DeInit+0x1c8>)
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	089b      	lsrs	r3, r3, #2
 80058bc:	3302      	adds	r3, #2
 80058be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058c2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	f003 0303 	and.w	r3, r3, #3
 80058ca:	009b      	lsls	r3, r3, #2
 80058cc:	220f      	movs	r2, #15
 80058ce:	fa02 f303 	lsl.w	r3, r2, r3
 80058d2:	68fa      	ldr	r2, [r7, #12]
 80058d4:	4013      	ands	r3, r2
 80058d6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80058de:	d025      	beq.n	800592c <HAL_GPIO_DeInit+0x9c>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a5e      	ldr	r2, [pc, #376]	@ (8005a5c <HAL_GPIO_DeInit+0x1cc>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d01f      	beq.n	8005928 <HAL_GPIO_DeInit+0x98>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4a5d      	ldr	r2, [pc, #372]	@ (8005a60 <HAL_GPIO_DeInit+0x1d0>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d019      	beq.n	8005924 <HAL_GPIO_DeInit+0x94>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a5c      	ldr	r2, [pc, #368]	@ (8005a64 <HAL_GPIO_DeInit+0x1d4>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d013      	beq.n	8005920 <HAL_GPIO_DeInit+0x90>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	4a5b      	ldr	r2, [pc, #364]	@ (8005a68 <HAL_GPIO_DeInit+0x1d8>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d00d      	beq.n	800591c <HAL_GPIO_DeInit+0x8c>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4a5a      	ldr	r2, [pc, #360]	@ (8005a6c <HAL_GPIO_DeInit+0x1dc>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d007      	beq.n	8005918 <HAL_GPIO_DeInit+0x88>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	4a59      	ldr	r2, [pc, #356]	@ (8005a70 <HAL_GPIO_DeInit+0x1e0>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d101      	bne.n	8005914 <HAL_GPIO_DeInit+0x84>
 8005910:	2306      	movs	r3, #6
 8005912:	e00c      	b.n	800592e <HAL_GPIO_DeInit+0x9e>
 8005914:	2307      	movs	r3, #7
 8005916:	e00a      	b.n	800592e <HAL_GPIO_DeInit+0x9e>
 8005918:	2305      	movs	r3, #5
 800591a:	e008      	b.n	800592e <HAL_GPIO_DeInit+0x9e>
 800591c:	2304      	movs	r3, #4
 800591e:	e006      	b.n	800592e <HAL_GPIO_DeInit+0x9e>
 8005920:	2303      	movs	r3, #3
 8005922:	e004      	b.n	800592e <HAL_GPIO_DeInit+0x9e>
 8005924:	2302      	movs	r3, #2
 8005926:	e002      	b.n	800592e <HAL_GPIO_DeInit+0x9e>
 8005928:	2301      	movs	r3, #1
 800592a:	e000      	b.n	800592e <HAL_GPIO_DeInit+0x9e>
 800592c:	2300      	movs	r3, #0
 800592e:	697a      	ldr	r2, [r7, #20]
 8005930:	f002 0203 	and.w	r2, r2, #3
 8005934:	0092      	lsls	r2, r2, #2
 8005936:	4093      	lsls	r3, r2
 8005938:	68fa      	ldr	r2, [r7, #12]
 800593a:	429a      	cmp	r2, r3
 800593c:	d132      	bne.n	80059a4 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800593e:	4b4d      	ldr	r3, [pc, #308]	@ (8005a74 <HAL_GPIO_DeInit+0x1e4>)
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	43db      	mvns	r3, r3
 8005946:	494b      	ldr	r1, [pc, #300]	@ (8005a74 <HAL_GPIO_DeInit+0x1e4>)
 8005948:	4013      	ands	r3, r2
 800594a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800594c:	4b49      	ldr	r3, [pc, #292]	@ (8005a74 <HAL_GPIO_DeInit+0x1e4>)
 800594e:	685a      	ldr	r2, [r3, #4]
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	43db      	mvns	r3, r3
 8005954:	4947      	ldr	r1, [pc, #284]	@ (8005a74 <HAL_GPIO_DeInit+0x1e4>)
 8005956:	4013      	ands	r3, r2
 8005958:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800595a:	4b46      	ldr	r3, [pc, #280]	@ (8005a74 <HAL_GPIO_DeInit+0x1e4>)
 800595c:	68da      	ldr	r2, [r3, #12]
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	43db      	mvns	r3, r3
 8005962:	4944      	ldr	r1, [pc, #272]	@ (8005a74 <HAL_GPIO_DeInit+0x1e4>)
 8005964:	4013      	ands	r3, r2
 8005966:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8005968:	4b42      	ldr	r3, [pc, #264]	@ (8005a74 <HAL_GPIO_DeInit+0x1e4>)
 800596a:	689a      	ldr	r2, [r3, #8]
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	43db      	mvns	r3, r3
 8005970:	4940      	ldr	r1, [pc, #256]	@ (8005a74 <HAL_GPIO_DeInit+0x1e4>)
 8005972:	4013      	ands	r3, r2
 8005974:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	f003 0303 	and.w	r3, r3, #3
 800597c:	009b      	lsls	r3, r3, #2
 800597e:	220f      	movs	r2, #15
 8005980:	fa02 f303 	lsl.w	r3, r2, r3
 8005984:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8005986:	4a34      	ldr	r2, [pc, #208]	@ (8005a58 <HAL_GPIO_DeInit+0x1c8>)
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	089b      	lsrs	r3, r3, #2
 800598c:	3302      	adds	r3, #2
 800598e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	43da      	mvns	r2, r3
 8005996:	4830      	ldr	r0, [pc, #192]	@ (8005a58 <HAL_GPIO_DeInit+0x1c8>)
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	089b      	lsrs	r3, r3, #2
 800599c:	400a      	ands	r2, r1
 800599e:	3302      	adds	r3, #2
 80059a0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	005b      	lsls	r3, r3, #1
 80059ac:	2103      	movs	r1, #3
 80059ae:	fa01 f303 	lsl.w	r3, r1, r3
 80059b2:	431a      	orrs	r2, r3
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	08da      	lsrs	r2, r3, #3
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	3208      	adds	r2, #8
 80059c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	f003 0307 	and.w	r3, r3, #7
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	220f      	movs	r2, #15
 80059ce:	fa02 f303 	lsl.w	r3, r2, r3
 80059d2:	43db      	mvns	r3, r3
 80059d4:	697a      	ldr	r2, [r7, #20]
 80059d6:	08d2      	lsrs	r2, r2, #3
 80059d8:	4019      	ands	r1, r3
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	3208      	adds	r2, #8
 80059de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	689a      	ldr	r2, [r3, #8]
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	005b      	lsls	r3, r3, #1
 80059ea:	2103      	movs	r1, #3
 80059ec:	fa01 f303 	lsl.w	r3, r1, r3
 80059f0:	43db      	mvns	r3, r3
 80059f2:	401a      	ands	r2, r3
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	685a      	ldr	r2, [r3, #4]
 80059fc:	2101      	movs	r1, #1
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	fa01 f303 	lsl.w	r3, r1, r3
 8005a04:	43db      	mvns	r3, r3
 8005a06:	401a      	ands	r2, r3
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	68da      	ldr	r2, [r3, #12]
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	005b      	lsls	r3, r3, #1
 8005a14:	2103      	movs	r1, #3
 8005a16:	fa01 f303 	lsl.w	r3, r1, r3
 8005a1a:	43db      	mvns	r3, r3
 8005a1c:	401a      	ands	r2, r3
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a26:	2101      	movs	r1, #1
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8005a2e:	43db      	mvns	r3, r3
 8005a30:	401a      	ands	r2, r3
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	3301      	adds	r3, #1
 8005a3a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8005a3c:	683a      	ldr	r2, [r7, #0]
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	fa22 f303 	lsr.w	r3, r2, r3
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	f47f af2b 	bne.w	80058a0 <HAL_GPIO_DeInit+0x10>
  }
}
 8005a4a:	bf00      	nop
 8005a4c:	bf00      	nop
 8005a4e:	371c      	adds	r7, #28
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr
 8005a58:	40010000 	.word	0x40010000
 8005a5c:	48000400 	.word	0x48000400
 8005a60:	48000800 	.word	0x48000800
 8005a64:	48000c00 	.word	0x48000c00
 8005a68:	48001000 	.word	0x48001000
 8005a6c:	48001400 	.word	0x48001400
 8005a70:	48001800 	.word	0x48001800
 8005a74:	40010400 	.word	0x40010400

08005a78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b085      	sub	sp, #20
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	460b      	mov	r3, r1
 8005a82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	691a      	ldr	r2, [r3, #16]
 8005a88:	887b      	ldrh	r3, [r7, #2]
 8005a8a:	4013      	ands	r3, r2
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d002      	beq.n	8005a96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005a90:	2301      	movs	r3, #1
 8005a92:	73fb      	strb	r3, [r7, #15]
 8005a94:	e001      	b.n	8005a9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005a96:	2300      	movs	r3, #0
 8005a98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3714      	adds	r7, #20
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr

08005aa8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	460b      	mov	r3, r1
 8005ab2:	807b      	strh	r3, [r7, #2]
 8005ab4:	4613      	mov	r3, r2
 8005ab6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005ab8:	787b      	ldrb	r3, [r7, #1]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d003      	beq.n	8005ac6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005abe:	887a      	ldrh	r2, [r7, #2]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005ac4:	e002      	b.n	8005acc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005ac6:	887a      	ldrh	r2, [r7, #2]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005acc:	bf00      	nop
 8005ace:	370c      	adds	r7, #12
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b085      	sub	sp, #20
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	460b      	mov	r3, r1
 8005ae2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	695b      	ldr	r3, [r3, #20]
 8005ae8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005aea:	887a      	ldrh	r2, [r7, #2]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	4013      	ands	r3, r2
 8005af0:	041a      	lsls	r2, r3, #16
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	43d9      	mvns	r1, r3
 8005af6:	887b      	ldrh	r3, [r7, #2]
 8005af8:	400b      	ands	r3, r1
 8005afa:	431a      	orrs	r2, r3
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	619a      	str	r2, [r3, #24]
}
 8005b00:	bf00      	nop
 8005b02:	3714      	adds	r7, #20
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr

08005b0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b082      	sub	sp, #8
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	4603      	mov	r3, r0
 8005b14:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005b16:	4b08      	ldr	r3, [pc, #32]	@ (8005b38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005b18:	695a      	ldr	r2, [r3, #20]
 8005b1a:	88fb      	ldrh	r3, [r7, #6]
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d006      	beq.n	8005b30 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005b22:	4a05      	ldr	r2, [pc, #20]	@ (8005b38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005b24:	88fb      	ldrh	r3, [r7, #6]
 8005b26:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005b28:	88fb      	ldrh	r3, [r7, #6]
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f7fe f8a4 	bl	8003c78 <HAL_GPIO_EXTI_Callback>
  }
}
 8005b30:	bf00      	nop
 8005b32:	3708      	adds	r7, #8
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	40010400 	.word	0x40010400

08005b3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b082      	sub	sp, #8
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d101      	bne.n	8005b4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e08d      	b.n	8005c6a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d106      	bne.n	8005b68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f7fe f9be 	bl	8003ee4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2224      	movs	r2, #36	@ 0x24
 8005b6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f022 0201 	bic.w	r2, r2, #1
 8005b7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	685a      	ldr	r2, [r3, #4]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005b8c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	689a      	ldr	r2, [r3, #8]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005b9c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	68db      	ldr	r3, [r3, #12]
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d107      	bne.n	8005bb6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	689a      	ldr	r2, [r3, #8]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005bb2:	609a      	str	r2, [r3, #8]
 8005bb4:	e006      	b.n	8005bc4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	689a      	ldr	r2, [r3, #8]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005bc2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	68db      	ldr	r3, [r3, #12]
 8005bc8:	2b02      	cmp	r3, #2
 8005bca:	d108      	bne.n	8005bde <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	685a      	ldr	r2, [r3, #4]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005bda:	605a      	str	r2, [r3, #4]
 8005bdc:	e007      	b.n	8005bee <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	685a      	ldr	r2, [r3, #4]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005bec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	6812      	ldr	r2, [r2, #0]
 8005bf8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005bfc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c00:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	68da      	ldr	r2, [r3, #12]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005c10:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	691a      	ldr	r2, [r3, #16]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	695b      	ldr	r3, [r3, #20]
 8005c1a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	699b      	ldr	r3, [r3, #24]
 8005c22:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	430a      	orrs	r2, r1
 8005c2a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	69d9      	ldr	r1, [r3, #28]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6a1a      	ldr	r2, [r3, #32]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	430a      	orrs	r2, r1
 8005c3a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f042 0201 	orr.w	r2, r2, #1
 8005c4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2220      	movs	r2, #32
 8005c56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2200      	movs	r2, #0
 8005c64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005c68:	2300      	movs	r3, #0
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3708      	adds	r7, #8
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}

08005c72 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005c72:	b580      	push	{r7, lr}
 8005c74:	b082      	sub	sp, #8
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d101      	bne.n	8005c84 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	e021      	b.n	8005cc8 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2224      	movs	r2, #36	@ 0x24
 8005c88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f022 0201 	bic.w	r2, r2, #1
 8005c9a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f7fe f97f 	bl	8003fa0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005cc6:	2300      	movs	r3, #0
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3708      	adds	r7, #8
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}

08005cd0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b088      	sub	sp, #32
 8005cd4:	af02      	add	r7, sp, #8
 8005cd6:	60f8      	str	r0, [r7, #12]
 8005cd8:	4608      	mov	r0, r1
 8005cda:	4611      	mov	r1, r2
 8005cdc:	461a      	mov	r2, r3
 8005cde:	4603      	mov	r3, r0
 8005ce0:	817b      	strh	r3, [r7, #10]
 8005ce2:	460b      	mov	r3, r1
 8005ce4:	813b      	strh	r3, [r7, #8]
 8005ce6:	4613      	mov	r3, r2
 8005ce8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	2b20      	cmp	r3, #32
 8005cf4:	f040 80f9 	bne.w	8005eea <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cf8:	6a3b      	ldr	r3, [r7, #32]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d002      	beq.n	8005d04 <HAL_I2C_Mem_Write+0x34>
 8005cfe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d105      	bne.n	8005d10 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d0a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e0ed      	b.n	8005eec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d101      	bne.n	8005d1e <HAL_I2C_Mem_Write+0x4e>
 8005d1a:	2302      	movs	r3, #2
 8005d1c:	e0e6      	b.n	8005eec <HAL_I2C_Mem_Write+0x21c>
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2201      	movs	r2, #1
 8005d22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005d26:	f7ff f95d 	bl	8004fe4 <HAL_GetTick>
 8005d2a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	9300      	str	r3, [sp, #0]
 8005d30:	2319      	movs	r3, #25
 8005d32:	2201      	movs	r2, #1
 8005d34:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005d38:	68f8      	ldr	r0, [r7, #12]
 8005d3a:	f000 fac3 	bl	80062c4 <I2C_WaitOnFlagUntilTimeout>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d001      	beq.n	8005d48 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005d44:	2301      	movs	r3, #1
 8005d46:	e0d1      	b.n	8005eec <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2221      	movs	r2, #33	@ 0x21
 8005d4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2240      	movs	r2, #64	@ 0x40
 8005d54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	6a3a      	ldr	r2, [r7, #32]
 8005d62:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005d68:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005d70:	88f8      	ldrh	r0, [r7, #6]
 8005d72:	893a      	ldrh	r2, [r7, #8]
 8005d74:	8979      	ldrh	r1, [r7, #10]
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	9301      	str	r3, [sp, #4]
 8005d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d7c:	9300      	str	r3, [sp, #0]
 8005d7e:	4603      	mov	r3, r0
 8005d80:	68f8      	ldr	r0, [r7, #12]
 8005d82:	f000 f9d3 	bl	800612c <I2C_RequestMemoryWrite>
 8005d86:	4603      	mov	r3, r0
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d005      	beq.n	8005d98 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	e0a9      	b.n	8005eec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	2bff      	cmp	r3, #255	@ 0xff
 8005da0:	d90e      	bls.n	8005dc0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	22ff      	movs	r2, #255	@ 0xff
 8005da6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dac:	b2da      	uxtb	r2, r3
 8005dae:	8979      	ldrh	r1, [r7, #10]
 8005db0:	2300      	movs	r3, #0
 8005db2:	9300      	str	r3, [sp, #0]
 8005db4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005db8:	68f8      	ldr	r0, [r7, #12]
 8005dba:	f000 fc47 	bl	800664c <I2C_TransferConfig>
 8005dbe:	e00f      	b.n	8005de0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dc4:	b29a      	uxth	r2, r3
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dce:	b2da      	uxtb	r2, r3
 8005dd0:	8979      	ldrh	r1, [r7, #10]
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	9300      	str	r3, [sp, #0]
 8005dd6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005dda:	68f8      	ldr	r0, [r7, #12]
 8005ddc:	f000 fc36 	bl	800664c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005de0:	697a      	ldr	r2, [r7, #20]
 8005de2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005de4:	68f8      	ldr	r0, [r7, #12]
 8005de6:	f000 fac6 	bl	8006376 <I2C_WaitOnTXISFlagUntilTimeout>
 8005dea:	4603      	mov	r3, r0
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d001      	beq.n	8005df4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	e07b      	b.n	8005eec <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005df8:	781a      	ldrb	r2, [r3, #0]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e04:	1c5a      	adds	r2, r3, #1
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	3b01      	subs	r3, #1
 8005e12:	b29a      	uxth	r2, r3
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e1c:	3b01      	subs	r3, #1
 8005e1e:	b29a      	uxth	r2, r3
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d034      	beq.n	8005e98 <HAL_I2C_Mem_Write+0x1c8>
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d130      	bne.n	8005e98 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	9300      	str	r3, [sp, #0]
 8005e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	2180      	movs	r1, #128	@ 0x80
 8005e40:	68f8      	ldr	r0, [r7, #12]
 8005e42:	f000 fa3f 	bl	80062c4 <I2C_WaitOnFlagUntilTimeout>
 8005e46:	4603      	mov	r3, r0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d001      	beq.n	8005e50 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	e04d      	b.n	8005eec <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	2bff      	cmp	r3, #255	@ 0xff
 8005e58:	d90e      	bls.n	8005e78 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	22ff      	movs	r2, #255	@ 0xff
 8005e5e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e64:	b2da      	uxtb	r2, r3
 8005e66:	8979      	ldrh	r1, [r7, #10]
 8005e68:	2300      	movs	r3, #0
 8005e6a:	9300      	str	r3, [sp, #0]
 8005e6c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005e70:	68f8      	ldr	r0, [r7, #12]
 8005e72:	f000 fbeb 	bl	800664c <I2C_TransferConfig>
 8005e76:	e00f      	b.n	8005e98 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e7c:	b29a      	uxth	r2, r3
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e86:	b2da      	uxtb	r2, r3
 8005e88:	8979      	ldrh	r1, [r7, #10]
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	9300      	str	r3, [sp, #0]
 8005e8e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005e92:	68f8      	ldr	r0, [r7, #12]
 8005e94:	f000 fbda 	bl	800664c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d19e      	bne.n	8005de0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ea2:	697a      	ldr	r2, [r7, #20]
 8005ea4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ea6:	68f8      	ldr	r0, [r7, #12]
 8005ea8:	f000 faac 	bl	8006404 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005eac:	4603      	mov	r3, r0
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d001      	beq.n	8005eb6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e01a      	b.n	8005eec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	2220      	movs	r2, #32
 8005ebc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	6859      	ldr	r1, [r3, #4]
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	4b0a      	ldr	r3, [pc, #40]	@ (8005ef4 <HAL_I2C_Mem_Write+0x224>)
 8005eca:	400b      	ands	r3, r1
 8005ecc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2220      	movs	r2, #32
 8005ed2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	e000      	b.n	8005eec <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005eea:	2302      	movs	r3, #2
  }
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3718      	adds	r7, #24
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}
 8005ef4:	fe00e800 	.word	0xfe00e800

08005ef8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b088      	sub	sp, #32
 8005efc:	af02      	add	r7, sp, #8
 8005efe:	60f8      	str	r0, [r7, #12]
 8005f00:	4608      	mov	r0, r1
 8005f02:	4611      	mov	r1, r2
 8005f04:	461a      	mov	r2, r3
 8005f06:	4603      	mov	r3, r0
 8005f08:	817b      	strh	r3, [r7, #10]
 8005f0a:	460b      	mov	r3, r1
 8005f0c:	813b      	strh	r3, [r7, #8]
 8005f0e:	4613      	mov	r3, r2
 8005f10:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	2b20      	cmp	r3, #32
 8005f1c:	f040 80fd 	bne.w	800611a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f20:	6a3b      	ldr	r3, [r7, #32]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d002      	beq.n	8005f2c <HAL_I2C_Mem_Read+0x34>
 8005f26:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d105      	bne.n	8005f38 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f32:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	e0f1      	b.n	800611c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d101      	bne.n	8005f46 <HAL_I2C_Mem_Read+0x4e>
 8005f42:	2302      	movs	r3, #2
 8005f44:	e0ea      	b.n	800611c <HAL_I2C_Mem_Read+0x224>
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2201      	movs	r2, #1
 8005f4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005f4e:	f7ff f849 	bl	8004fe4 <HAL_GetTick>
 8005f52:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	9300      	str	r3, [sp, #0]
 8005f58:	2319      	movs	r3, #25
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005f60:	68f8      	ldr	r0, [r7, #12]
 8005f62:	f000 f9af 	bl	80062c4 <I2C_WaitOnFlagUntilTimeout>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d001      	beq.n	8005f70 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	e0d5      	b.n	800611c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2222      	movs	r2, #34	@ 0x22
 8005f74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2240      	movs	r2, #64	@ 0x40
 8005f7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2200      	movs	r2, #0
 8005f84:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	6a3a      	ldr	r2, [r7, #32]
 8005f8a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005f90:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2200      	movs	r2, #0
 8005f96:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005f98:	88f8      	ldrh	r0, [r7, #6]
 8005f9a:	893a      	ldrh	r2, [r7, #8]
 8005f9c:	8979      	ldrh	r1, [r7, #10]
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	9301      	str	r3, [sp, #4]
 8005fa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fa4:	9300      	str	r3, [sp, #0]
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	68f8      	ldr	r0, [r7, #12]
 8005faa:	f000 f913 	bl	80061d4 <I2C_RequestMemoryRead>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d005      	beq.n	8005fc0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e0ad      	b.n	800611c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	2bff      	cmp	r3, #255	@ 0xff
 8005fc8:	d90e      	bls.n	8005fe8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2201      	movs	r2, #1
 8005fce:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fd4:	b2da      	uxtb	r2, r3
 8005fd6:	8979      	ldrh	r1, [r7, #10]
 8005fd8:	4b52      	ldr	r3, [pc, #328]	@ (8006124 <HAL_I2C_Mem_Read+0x22c>)
 8005fda:	9300      	str	r3, [sp, #0]
 8005fdc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005fe0:	68f8      	ldr	r0, [r7, #12]
 8005fe2:	f000 fb33 	bl	800664c <I2C_TransferConfig>
 8005fe6:	e00f      	b.n	8006008 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fec:	b29a      	uxth	r2, r3
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ff6:	b2da      	uxtb	r2, r3
 8005ff8:	8979      	ldrh	r1, [r7, #10]
 8005ffa:	4b4a      	ldr	r3, [pc, #296]	@ (8006124 <HAL_I2C_Mem_Read+0x22c>)
 8005ffc:	9300      	str	r3, [sp, #0]
 8005ffe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006002:	68f8      	ldr	r0, [r7, #12]
 8006004:	f000 fb22 	bl	800664c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	9300      	str	r3, [sp, #0]
 800600c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800600e:	2200      	movs	r2, #0
 8006010:	2104      	movs	r1, #4
 8006012:	68f8      	ldr	r0, [r7, #12]
 8006014:	f000 f956 	bl	80062c4 <I2C_WaitOnFlagUntilTimeout>
 8006018:	4603      	mov	r3, r0
 800601a:	2b00      	cmp	r3, #0
 800601c:	d001      	beq.n	8006022 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	e07c      	b.n	800611c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800602c:	b2d2      	uxtb	r2, r2
 800602e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006034:	1c5a      	adds	r2, r3, #1
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800603e:	3b01      	subs	r3, #1
 8006040:	b29a      	uxth	r2, r3
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800604a:	b29b      	uxth	r3, r3
 800604c:	3b01      	subs	r3, #1
 800604e:	b29a      	uxth	r2, r3
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006058:	b29b      	uxth	r3, r3
 800605a:	2b00      	cmp	r3, #0
 800605c:	d034      	beq.n	80060c8 <HAL_I2C_Mem_Read+0x1d0>
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006062:	2b00      	cmp	r3, #0
 8006064:	d130      	bne.n	80060c8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	9300      	str	r3, [sp, #0]
 800606a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800606c:	2200      	movs	r2, #0
 800606e:	2180      	movs	r1, #128	@ 0x80
 8006070:	68f8      	ldr	r0, [r7, #12]
 8006072:	f000 f927 	bl	80062c4 <I2C_WaitOnFlagUntilTimeout>
 8006076:	4603      	mov	r3, r0
 8006078:	2b00      	cmp	r3, #0
 800607a:	d001      	beq.n	8006080 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800607c:	2301      	movs	r3, #1
 800607e:	e04d      	b.n	800611c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006084:	b29b      	uxth	r3, r3
 8006086:	2bff      	cmp	r3, #255	@ 0xff
 8006088:	d90e      	bls.n	80060a8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2201      	movs	r2, #1
 800608e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006094:	b2da      	uxtb	r2, r3
 8006096:	8979      	ldrh	r1, [r7, #10]
 8006098:	2300      	movs	r3, #0
 800609a:	9300      	str	r3, [sp, #0]
 800609c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80060a0:	68f8      	ldr	r0, [r7, #12]
 80060a2:	f000 fad3 	bl	800664c <I2C_TransferConfig>
 80060a6:	e00f      	b.n	80060c8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060ac:	b29a      	uxth	r2, r3
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060b6:	b2da      	uxtb	r2, r3
 80060b8:	8979      	ldrh	r1, [r7, #10]
 80060ba:	2300      	movs	r3, #0
 80060bc:	9300      	str	r3, [sp, #0]
 80060be:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80060c2:	68f8      	ldr	r0, [r7, #12]
 80060c4:	f000 fac2 	bl	800664c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d19a      	bne.n	8006008 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060d2:	697a      	ldr	r2, [r7, #20]
 80060d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80060d6:	68f8      	ldr	r0, [r7, #12]
 80060d8:	f000 f994 	bl	8006404 <I2C_WaitOnSTOPFlagUntilTimeout>
 80060dc:	4603      	mov	r3, r0
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d001      	beq.n	80060e6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	e01a      	b.n	800611c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	2220      	movs	r2, #32
 80060ec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	6859      	ldr	r1, [r3, #4]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	4b0b      	ldr	r3, [pc, #44]	@ (8006128 <HAL_I2C_Mem_Read+0x230>)
 80060fa:	400b      	ands	r3, r1
 80060fc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2220      	movs	r2, #32
 8006102:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2200      	movs	r2, #0
 800610a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2200      	movs	r2, #0
 8006112:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006116:	2300      	movs	r3, #0
 8006118:	e000      	b.n	800611c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800611a:	2302      	movs	r3, #2
  }
}
 800611c:	4618      	mov	r0, r3
 800611e:	3718      	adds	r7, #24
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}
 8006124:	80002400 	.word	0x80002400
 8006128:	fe00e800 	.word	0xfe00e800

0800612c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b086      	sub	sp, #24
 8006130:	af02      	add	r7, sp, #8
 8006132:	60f8      	str	r0, [r7, #12]
 8006134:	4608      	mov	r0, r1
 8006136:	4611      	mov	r1, r2
 8006138:	461a      	mov	r2, r3
 800613a:	4603      	mov	r3, r0
 800613c:	817b      	strh	r3, [r7, #10]
 800613e:	460b      	mov	r3, r1
 8006140:	813b      	strh	r3, [r7, #8]
 8006142:	4613      	mov	r3, r2
 8006144:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006146:	88fb      	ldrh	r3, [r7, #6]
 8006148:	b2da      	uxtb	r2, r3
 800614a:	8979      	ldrh	r1, [r7, #10]
 800614c:	4b20      	ldr	r3, [pc, #128]	@ (80061d0 <I2C_RequestMemoryWrite+0xa4>)
 800614e:	9300      	str	r3, [sp, #0]
 8006150:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006154:	68f8      	ldr	r0, [r7, #12]
 8006156:	f000 fa79 	bl	800664c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800615a:	69fa      	ldr	r2, [r7, #28]
 800615c:	69b9      	ldr	r1, [r7, #24]
 800615e:	68f8      	ldr	r0, [r7, #12]
 8006160:	f000 f909 	bl	8006376 <I2C_WaitOnTXISFlagUntilTimeout>
 8006164:	4603      	mov	r3, r0
 8006166:	2b00      	cmp	r3, #0
 8006168:	d001      	beq.n	800616e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	e02c      	b.n	80061c8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800616e:	88fb      	ldrh	r3, [r7, #6]
 8006170:	2b01      	cmp	r3, #1
 8006172:	d105      	bne.n	8006180 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006174:	893b      	ldrh	r3, [r7, #8]
 8006176:	b2da      	uxtb	r2, r3
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	629a      	str	r2, [r3, #40]	@ 0x28
 800617e:	e015      	b.n	80061ac <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006180:	893b      	ldrh	r3, [r7, #8]
 8006182:	0a1b      	lsrs	r3, r3, #8
 8006184:	b29b      	uxth	r3, r3
 8006186:	b2da      	uxtb	r2, r3
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800618e:	69fa      	ldr	r2, [r7, #28]
 8006190:	69b9      	ldr	r1, [r7, #24]
 8006192:	68f8      	ldr	r0, [r7, #12]
 8006194:	f000 f8ef 	bl	8006376 <I2C_WaitOnTXISFlagUntilTimeout>
 8006198:	4603      	mov	r3, r0
 800619a:	2b00      	cmp	r3, #0
 800619c:	d001      	beq.n	80061a2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	e012      	b.n	80061c8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80061a2:	893b      	ldrh	r3, [r7, #8]
 80061a4:	b2da      	uxtb	r2, r3
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80061ac:	69fb      	ldr	r3, [r7, #28]
 80061ae:	9300      	str	r3, [sp, #0]
 80061b0:	69bb      	ldr	r3, [r7, #24]
 80061b2:	2200      	movs	r2, #0
 80061b4:	2180      	movs	r1, #128	@ 0x80
 80061b6:	68f8      	ldr	r0, [r7, #12]
 80061b8:	f000 f884 	bl	80062c4 <I2C_WaitOnFlagUntilTimeout>
 80061bc:	4603      	mov	r3, r0
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d001      	beq.n	80061c6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	e000      	b.n	80061c8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80061c6:	2300      	movs	r3, #0
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3710      	adds	r7, #16
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}
 80061d0:	80002000 	.word	0x80002000

080061d4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b086      	sub	sp, #24
 80061d8:	af02      	add	r7, sp, #8
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	4608      	mov	r0, r1
 80061de:	4611      	mov	r1, r2
 80061e0:	461a      	mov	r2, r3
 80061e2:	4603      	mov	r3, r0
 80061e4:	817b      	strh	r3, [r7, #10]
 80061e6:	460b      	mov	r3, r1
 80061e8:	813b      	strh	r3, [r7, #8]
 80061ea:	4613      	mov	r3, r2
 80061ec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80061ee:	88fb      	ldrh	r3, [r7, #6]
 80061f0:	b2da      	uxtb	r2, r3
 80061f2:	8979      	ldrh	r1, [r7, #10]
 80061f4:	4b20      	ldr	r3, [pc, #128]	@ (8006278 <I2C_RequestMemoryRead+0xa4>)
 80061f6:	9300      	str	r3, [sp, #0]
 80061f8:	2300      	movs	r3, #0
 80061fa:	68f8      	ldr	r0, [r7, #12]
 80061fc:	f000 fa26 	bl	800664c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006200:	69fa      	ldr	r2, [r7, #28]
 8006202:	69b9      	ldr	r1, [r7, #24]
 8006204:	68f8      	ldr	r0, [r7, #12]
 8006206:	f000 f8b6 	bl	8006376 <I2C_WaitOnTXISFlagUntilTimeout>
 800620a:	4603      	mov	r3, r0
 800620c:	2b00      	cmp	r3, #0
 800620e:	d001      	beq.n	8006214 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006210:	2301      	movs	r3, #1
 8006212:	e02c      	b.n	800626e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006214:	88fb      	ldrh	r3, [r7, #6]
 8006216:	2b01      	cmp	r3, #1
 8006218:	d105      	bne.n	8006226 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800621a:	893b      	ldrh	r3, [r7, #8]
 800621c:	b2da      	uxtb	r2, r3
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	629a      	str	r2, [r3, #40]	@ 0x28
 8006224:	e015      	b.n	8006252 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006226:	893b      	ldrh	r3, [r7, #8]
 8006228:	0a1b      	lsrs	r3, r3, #8
 800622a:	b29b      	uxth	r3, r3
 800622c:	b2da      	uxtb	r2, r3
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006234:	69fa      	ldr	r2, [r7, #28]
 8006236:	69b9      	ldr	r1, [r7, #24]
 8006238:	68f8      	ldr	r0, [r7, #12]
 800623a:	f000 f89c 	bl	8006376 <I2C_WaitOnTXISFlagUntilTimeout>
 800623e:	4603      	mov	r3, r0
 8006240:	2b00      	cmp	r3, #0
 8006242:	d001      	beq.n	8006248 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	e012      	b.n	800626e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006248:	893b      	ldrh	r3, [r7, #8]
 800624a:	b2da      	uxtb	r2, r3
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006252:	69fb      	ldr	r3, [r7, #28]
 8006254:	9300      	str	r3, [sp, #0]
 8006256:	69bb      	ldr	r3, [r7, #24]
 8006258:	2200      	movs	r2, #0
 800625a:	2140      	movs	r1, #64	@ 0x40
 800625c:	68f8      	ldr	r0, [r7, #12]
 800625e:	f000 f831 	bl	80062c4 <I2C_WaitOnFlagUntilTimeout>
 8006262:	4603      	mov	r3, r0
 8006264:	2b00      	cmp	r3, #0
 8006266:	d001      	beq.n	800626c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	e000      	b.n	800626e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800626c:	2300      	movs	r3, #0
}
 800626e:	4618      	mov	r0, r3
 8006270:	3710      	adds	r7, #16
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
 8006276:	bf00      	nop
 8006278:	80002000 	.word	0x80002000

0800627c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	699b      	ldr	r3, [r3, #24]
 800628a:	f003 0302 	and.w	r3, r3, #2
 800628e:	2b02      	cmp	r3, #2
 8006290:	d103      	bne.n	800629a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	2200      	movs	r2, #0
 8006298:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	699b      	ldr	r3, [r3, #24]
 80062a0:	f003 0301 	and.w	r3, r3, #1
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d007      	beq.n	80062b8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	699a      	ldr	r2, [r3, #24]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f042 0201 	orr.w	r2, r2, #1
 80062b6:	619a      	str	r2, [r3, #24]
  }
}
 80062b8:	bf00      	nop
 80062ba:	370c      	adds	r7, #12
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b084      	sub	sp, #16
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	60b9      	str	r1, [r7, #8]
 80062ce:	603b      	str	r3, [r7, #0]
 80062d0:	4613      	mov	r3, r2
 80062d2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80062d4:	e03b      	b.n	800634e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80062d6:	69ba      	ldr	r2, [r7, #24]
 80062d8:	6839      	ldr	r1, [r7, #0]
 80062da:	68f8      	ldr	r0, [r7, #12]
 80062dc:	f000 f8d6 	bl	800648c <I2C_IsErrorOccurred>
 80062e0:	4603      	mov	r3, r0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d001      	beq.n	80062ea <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	e041      	b.n	800636e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062f0:	d02d      	beq.n	800634e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062f2:	f7fe fe77 	bl	8004fe4 <HAL_GetTick>
 80062f6:	4602      	mov	r2, r0
 80062f8:	69bb      	ldr	r3, [r7, #24]
 80062fa:	1ad3      	subs	r3, r2, r3
 80062fc:	683a      	ldr	r2, [r7, #0]
 80062fe:	429a      	cmp	r2, r3
 8006300:	d302      	bcc.n	8006308 <I2C_WaitOnFlagUntilTimeout+0x44>
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d122      	bne.n	800634e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	699a      	ldr	r2, [r3, #24]
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	4013      	ands	r3, r2
 8006312:	68ba      	ldr	r2, [r7, #8]
 8006314:	429a      	cmp	r2, r3
 8006316:	bf0c      	ite	eq
 8006318:	2301      	moveq	r3, #1
 800631a:	2300      	movne	r3, #0
 800631c:	b2db      	uxtb	r3, r3
 800631e:	461a      	mov	r2, r3
 8006320:	79fb      	ldrb	r3, [r7, #7]
 8006322:	429a      	cmp	r2, r3
 8006324:	d113      	bne.n	800634e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800632a:	f043 0220 	orr.w	r2, r3, #32
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2220      	movs	r2, #32
 8006336:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2200      	movs	r2, #0
 800633e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2200      	movs	r2, #0
 8006346:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	e00f      	b.n	800636e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	699a      	ldr	r2, [r3, #24]
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	4013      	ands	r3, r2
 8006358:	68ba      	ldr	r2, [r7, #8]
 800635a:	429a      	cmp	r2, r3
 800635c:	bf0c      	ite	eq
 800635e:	2301      	moveq	r3, #1
 8006360:	2300      	movne	r3, #0
 8006362:	b2db      	uxtb	r3, r3
 8006364:	461a      	mov	r2, r3
 8006366:	79fb      	ldrb	r3, [r7, #7]
 8006368:	429a      	cmp	r2, r3
 800636a:	d0b4      	beq.n	80062d6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800636c:	2300      	movs	r3, #0
}
 800636e:	4618      	mov	r0, r3
 8006370:	3710      	adds	r7, #16
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}

08006376 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006376:	b580      	push	{r7, lr}
 8006378:	b084      	sub	sp, #16
 800637a:	af00      	add	r7, sp, #0
 800637c:	60f8      	str	r0, [r7, #12]
 800637e:	60b9      	str	r1, [r7, #8]
 8006380:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006382:	e033      	b.n	80063ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	68b9      	ldr	r1, [r7, #8]
 8006388:	68f8      	ldr	r0, [r7, #12]
 800638a:	f000 f87f 	bl	800648c <I2C_IsErrorOccurred>
 800638e:	4603      	mov	r3, r0
 8006390:	2b00      	cmp	r3, #0
 8006392:	d001      	beq.n	8006398 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006394:	2301      	movs	r3, #1
 8006396:	e031      	b.n	80063fc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800639e:	d025      	beq.n	80063ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063a0:	f7fe fe20 	bl	8004fe4 <HAL_GetTick>
 80063a4:	4602      	mov	r2, r0
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	1ad3      	subs	r3, r2, r3
 80063aa:	68ba      	ldr	r2, [r7, #8]
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d302      	bcc.n	80063b6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d11a      	bne.n	80063ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	699b      	ldr	r3, [r3, #24]
 80063bc:	f003 0302 	and.w	r3, r3, #2
 80063c0:	2b02      	cmp	r3, #2
 80063c2:	d013      	beq.n	80063ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063c8:	f043 0220 	orr.w	r2, r3, #32
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2220      	movs	r2, #32
 80063d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2200      	movs	r2, #0
 80063dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2200      	movs	r2, #0
 80063e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80063e8:	2301      	movs	r3, #1
 80063ea:	e007      	b.n	80063fc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	699b      	ldr	r3, [r3, #24]
 80063f2:	f003 0302 	and.w	r3, r3, #2
 80063f6:	2b02      	cmp	r3, #2
 80063f8:	d1c4      	bne.n	8006384 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80063fa:	2300      	movs	r3, #0
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	3710      	adds	r7, #16
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}

08006404 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b084      	sub	sp, #16
 8006408:	af00      	add	r7, sp, #0
 800640a:	60f8      	str	r0, [r7, #12]
 800640c:	60b9      	str	r1, [r7, #8]
 800640e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006410:	e02f      	b.n	8006472 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	68b9      	ldr	r1, [r7, #8]
 8006416:	68f8      	ldr	r0, [r7, #12]
 8006418:	f000 f838 	bl	800648c <I2C_IsErrorOccurred>
 800641c:	4603      	mov	r3, r0
 800641e:	2b00      	cmp	r3, #0
 8006420:	d001      	beq.n	8006426 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	e02d      	b.n	8006482 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006426:	f7fe fddd 	bl	8004fe4 <HAL_GetTick>
 800642a:	4602      	mov	r2, r0
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	1ad3      	subs	r3, r2, r3
 8006430:	68ba      	ldr	r2, [r7, #8]
 8006432:	429a      	cmp	r2, r3
 8006434:	d302      	bcc.n	800643c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d11a      	bne.n	8006472 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	699b      	ldr	r3, [r3, #24]
 8006442:	f003 0320 	and.w	r3, r3, #32
 8006446:	2b20      	cmp	r3, #32
 8006448:	d013      	beq.n	8006472 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800644e:	f043 0220 	orr.w	r2, r3, #32
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2220      	movs	r2, #32
 800645a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2200      	movs	r2, #0
 8006462:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2200      	movs	r2, #0
 800646a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	e007      	b.n	8006482 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	699b      	ldr	r3, [r3, #24]
 8006478:	f003 0320 	and.w	r3, r3, #32
 800647c:	2b20      	cmp	r3, #32
 800647e:	d1c8      	bne.n	8006412 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006480:	2300      	movs	r3, #0
}
 8006482:	4618      	mov	r0, r3
 8006484:	3710      	adds	r7, #16
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}
	...

0800648c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b08a      	sub	sp, #40	@ 0x28
 8006490:	af00      	add	r7, sp, #0
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	60b9      	str	r1, [r7, #8]
 8006496:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006498:	2300      	movs	r3, #0
 800649a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	699b      	ldr	r3, [r3, #24]
 80064a4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80064a6:	2300      	movs	r3, #0
 80064a8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80064ae:	69bb      	ldr	r3, [r7, #24]
 80064b0:	f003 0310 	and.w	r3, r3, #16
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d068      	beq.n	800658a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	2210      	movs	r2, #16
 80064be:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80064c0:	e049      	b.n	8006556 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064c8:	d045      	beq.n	8006556 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80064ca:	f7fe fd8b 	bl	8004fe4 <HAL_GetTick>
 80064ce:	4602      	mov	r2, r0
 80064d0:	69fb      	ldr	r3, [r7, #28]
 80064d2:	1ad3      	subs	r3, r2, r3
 80064d4:	68ba      	ldr	r2, [r7, #8]
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d302      	bcc.n	80064e0 <I2C_IsErrorOccurred+0x54>
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d13a      	bne.n	8006556 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80064ea:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80064f2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	699b      	ldr	r3, [r3, #24]
 80064fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80064fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006502:	d121      	bne.n	8006548 <I2C_IsErrorOccurred+0xbc>
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800650a:	d01d      	beq.n	8006548 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800650c:	7cfb      	ldrb	r3, [r7, #19]
 800650e:	2b20      	cmp	r3, #32
 8006510:	d01a      	beq.n	8006548 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	685a      	ldr	r2, [r3, #4]
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006520:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006522:	f7fe fd5f 	bl	8004fe4 <HAL_GetTick>
 8006526:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006528:	e00e      	b.n	8006548 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800652a:	f7fe fd5b 	bl	8004fe4 <HAL_GetTick>
 800652e:	4602      	mov	r2, r0
 8006530:	69fb      	ldr	r3, [r7, #28]
 8006532:	1ad3      	subs	r3, r2, r3
 8006534:	2b19      	cmp	r3, #25
 8006536:	d907      	bls.n	8006548 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006538:	6a3b      	ldr	r3, [r7, #32]
 800653a:	f043 0320 	orr.w	r3, r3, #32
 800653e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8006546:	e006      	b.n	8006556 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	699b      	ldr	r3, [r3, #24]
 800654e:	f003 0320 	and.w	r3, r3, #32
 8006552:	2b20      	cmp	r3, #32
 8006554:	d1e9      	bne.n	800652a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	699b      	ldr	r3, [r3, #24]
 800655c:	f003 0320 	and.w	r3, r3, #32
 8006560:	2b20      	cmp	r3, #32
 8006562:	d003      	beq.n	800656c <I2C_IsErrorOccurred+0xe0>
 8006564:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006568:	2b00      	cmp	r3, #0
 800656a:	d0aa      	beq.n	80064c2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800656c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006570:	2b00      	cmp	r3, #0
 8006572:	d103      	bne.n	800657c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	2220      	movs	r2, #32
 800657a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800657c:	6a3b      	ldr	r3, [r7, #32]
 800657e:	f043 0304 	orr.w	r3, r3, #4
 8006582:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006584:	2301      	movs	r3, #1
 8006586:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	699b      	ldr	r3, [r3, #24]
 8006590:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006592:	69bb      	ldr	r3, [r7, #24]
 8006594:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006598:	2b00      	cmp	r3, #0
 800659a:	d00b      	beq.n	80065b4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800659c:	6a3b      	ldr	r3, [r7, #32]
 800659e:	f043 0301 	orr.w	r3, r3, #1
 80065a2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80065ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80065b4:	69bb      	ldr	r3, [r7, #24]
 80065b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d00b      	beq.n	80065d6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80065be:	6a3b      	ldr	r3, [r7, #32]
 80065c0:	f043 0308 	orr.w	r3, r3, #8
 80065c4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80065ce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80065d6:	69bb      	ldr	r3, [r7, #24]
 80065d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d00b      	beq.n	80065f8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80065e0:	6a3b      	ldr	r3, [r7, #32]
 80065e2:	f043 0302 	orr.w	r3, r3, #2
 80065e6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80065f0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80065f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d01c      	beq.n	800663a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006600:	68f8      	ldr	r0, [r7, #12]
 8006602:	f7ff fe3b 	bl	800627c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	6859      	ldr	r1, [r3, #4]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	4b0d      	ldr	r3, [pc, #52]	@ (8006648 <I2C_IsErrorOccurred+0x1bc>)
 8006612:	400b      	ands	r3, r1
 8006614:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800661a:	6a3b      	ldr	r3, [r7, #32]
 800661c:	431a      	orrs	r2, r3
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2220      	movs	r2, #32
 8006626:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2200      	movs	r2, #0
 800662e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2200      	movs	r2, #0
 8006636:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800663a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800663e:	4618      	mov	r0, r3
 8006640:	3728      	adds	r7, #40	@ 0x28
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}
 8006646:	bf00      	nop
 8006648:	fe00e800 	.word	0xfe00e800

0800664c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800664c:	b480      	push	{r7}
 800664e:	b087      	sub	sp, #28
 8006650:	af00      	add	r7, sp, #0
 8006652:	60f8      	str	r0, [r7, #12]
 8006654:	607b      	str	r3, [r7, #4]
 8006656:	460b      	mov	r3, r1
 8006658:	817b      	strh	r3, [r7, #10]
 800665a:	4613      	mov	r3, r2
 800665c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800665e:	897b      	ldrh	r3, [r7, #10]
 8006660:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006664:	7a7b      	ldrb	r3, [r7, #9]
 8006666:	041b      	lsls	r3, r3, #16
 8006668:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800666c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006672:	6a3b      	ldr	r3, [r7, #32]
 8006674:	4313      	orrs	r3, r2
 8006676:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800667a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	685a      	ldr	r2, [r3, #4]
 8006682:	6a3b      	ldr	r3, [r7, #32]
 8006684:	0d5b      	lsrs	r3, r3, #21
 8006686:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800668a:	4b08      	ldr	r3, [pc, #32]	@ (80066ac <I2C_TransferConfig+0x60>)
 800668c:	430b      	orrs	r3, r1
 800668e:	43db      	mvns	r3, r3
 8006690:	ea02 0103 	and.w	r1, r2, r3
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	697a      	ldr	r2, [r7, #20]
 800669a:	430a      	orrs	r2, r1
 800669c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800669e:	bf00      	nop
 80066a0:	371c      	adds	r7, #28
 80066a2:	46bd      	mov	sp, r7
 80066a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a8:	4770      	bx	lr
 80066aa:	bf00      	nop
 80066ac:	03ff63ff 	.word	0x03ff63ff

080066b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b083      	sub	sp, #12
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	2b20      	cmp	r3, #32
 80066c4:	d138      	bne.n	8006738 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d101      	bne.n	80066d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80066d0:	2302      	movs	r3, #2
 80066d2:	e032      	b.n	800673a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2201      	movs	r2, #1
 80066d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2224      	movs	r2, #36	@ 0x24
 80066e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f022 0201 	bic.w	r2, r2, #1
 80066f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006702:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	6819      	ldr	r1, [r3, #0]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	683a      	ldr	r2, [r7, #0]
 8006710:	430a      	orrs	r2, r1
 8006712:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f042 0201 	orr.w	r2, r2, #1
 8006722:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2220      	movs	r2, #32
 8006728:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2200      	movs	r2, #0
 8006730:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006734:	2300      	movs	r3, #0
 8006736:	e000      	b.n	800673a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006738:	2302      	movs	r3, #2
  }
}
 800673a:	4618      	mov	r0, r3
 800673c:	370c      	adds	r7, #12
 800673e:	46bd      	mov	sp, r7
 8006740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006744:	4770      	bx	lr

08006746 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006746:	b580      	push	{r7, lr}
 8006748:	b086      	sub	sp, #24
 800674a:	af02      	add	r7, sp, #8
 800674c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d101      	bne.n	8006758 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006754:	2301      	movs	r3, #1
 8006756:	e101      	b.n	800695c <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800675e:	b2db      	uxtb	r3, r3
 8006760:	2b00      	cmp	r3, #0
 8006762:	d106      	bne.n	8006772 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2200      	movs	r2, #0
 8006768:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f7fd fcdd 	bl	800412c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2203      	movs	r2, #3
 8006776:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2200      	movs	r2, #0
 800677e:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4618      	mov	r0, r3
 8006786:	f002 ff33 	bl	80095f0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6818      	ldr	r0, [r3, #0]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	7c1a      	ldrb	r2, [r3, #16]
 8006792:	f88d 2000 	strb.w	r2, [sp]
 8006796:	3304      	adds	r3, #4
 8006798:	cb0e      	ldmia	r3, {r1, r2, r3}
 800679a:	f002 fefc 	bl	8009596 <USB_CoreInit>
 800679e:	4603      	mov	r3, r0
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d005      	beq.n	80067b0 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2202      	movs	r2, #2
 80067a8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80067ac:	2301      	movs	r3, #1
 80067ae:	e0d5      	b.n	800695c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	2100      	movs	r1, #0
 80067b6:	4618      	mov	r0, r3
 80067b8:	f002 ff2b 	bl	8009612 <USB_SetCurrentMode>
 80067bc:	4603      	mov	r3, r0
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d005      	beq.n	80067ce <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2202      	movs	r2, #2
 80067c6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	e0c6      	b.n	800695c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80067ce:	2300      	movs	r3, #0
 80067d0:	73fb      	strb	r3, [r7, #15]
 80067d2:	e04a      	b.n	800686a <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80067d4:	7bfa      	ldrb	r2, [r7, #15]
 80067d6:	6879      	ldr	r1, [r7, #4]
 80067d8:	4613      	mov	r3, r2
 80067da:	00db      	lsls	r3, r3, #3
 80067dc:	4413      	add	r3, r2
 80067de:	009b      	lsls	r3, r3, #2
 80067e0:	440b      	add	r3, r1
 80067e2:	3315      	adds	r3, #21
 80067e4:	2201      	movs	r2, #1
 80067e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80067e8:	7bfa      	ldrb	r2, [r7, #15]
 80067ea:	6879      	ldr	r1, [r7, #4]
 80067ec:	4613      	mov	r3, r2
 80067ee:	00db      	lsls	r3, r3, #3
 80067f0:	4413      	add	r3, r2
 80067f2:	009b      	lsls	r3, r3, #2
 80067f4:	440b      	add	r3, r1
 80067f6:	3314      	adds	r3, #20
 80067f8:	7bfa      	ldrb	r2, [r7, #15]
 80067fa:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80067fc:	7bfa      	ldrb	r2, [r7, #15]
 80067fe:	7bfb      	ldrb	r3, [r7, #15]
 8006800:	b298      	uxth	r0, r3
 8006802:	6879      	ldr	r1, [r7, #4]
 8006804:	4613      	mov	r3, r2
 8006806:	00db      	lsls	r3, r3, #3
 8006808:	4413      	add	r3, r2
 800680a:	009b      	lsls	r3, r3, #2
 800680c:	440b      	add	r3, r1
 800680e:	332e      	adds	r3, #46	@ 0x2e
 8006810:	4602      	mov	r2, r0
 8006812:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006814:	7bfa      	ldrb	r2, [r7, #15]
 8006816:	6879      	ldr	r1, [r7, #4]
 8006818:	4613      	mov	r3, r2
 800681a:	00db      	lsls	r3, r3, #3
 800681c:	4413      	add	r3, r2
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	440b      	add	r3, r1
 8006822:	3318      	adds	r3, #24
 8006824:	2200      	movs	r2, #0
 8006826:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006828:	7bfa      	ldrb	r2, [r7, #15]
 800682a:	6879      	ldr	r1, [r7, #4]
 800682c:	4613      	mov	r3, r2
 800682e:	00db      	lsls	r3, r3, #3
 8006830:	4413      	add	r3, r2
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	440b      	add	r3, r1
 8006836:	331c      	adds	r3, #28
 8006838:	2200      	movs	r2, #0
 800683a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800683c:	7bfa      	ldrb	r2, [r7, #15]
 800683e:	6879      	ldr	r1, [r7, #4]
 8006840:	4613      	mov	r3, r2
 8006842:	00db      	lsls	r3, r3, #3
 8006844:	4413      	add	r3, r2
 8006846:	009b      	lsls	r3, r3, #2
 8006848:	440b      	add	r3, r1
 800684a:	3320      	adds	r3, #32
 800684c:	2200      	movs	r2, #0
 800684e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006850:	7bfa      	ldrb	r2, [r7, #15]
 8006852:	6879      	ldr	r1, [r7, #4]
 8006854:	4613      	mov	r3, r2
 8006856:	00db      	lsls	r3, r3, #3
 8006858:	4413      	add	r3, r2
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	440b      	add	r3, r1
 800685e:	3324      	adds	r3, #36	@ 0x24
 8006860:	2200      	movs	r2, #0
 8006862:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006864:	7bfb      	ldrb	r3, [r7, #15]
 8006866:	3301      	adds	r3, #1
 8006868:	73fb      	strb	r3, [r7, #15]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	791b      	ldrb	r3, [r3, #4]
 800686e:	7bfa      	ldrb	r2, [r7, #15]
 8006870:	429a      	cmp	r2, r3
 8006872:	d3af      	bcc.n	80067d4 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006874:	2300      	movs	r3, #0
 8006876:	73fb      	strb	r3, [r7, #15]
 8006878:	e044      	b.n	8006904 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800687a:	7bfa      	ldrb	r2, [r7, #15]
 800687c:	6879      	ldr	r1, [r7, #4]
 800687e:	4613      	mov	r3, r2
 8006880:	00db      	lsls	r3, r3, #3
 8006882:	4413      	add	r3, r2
 8006884:	009b      	lsls	r3, r3, #2
 8006886:	440b      	add	r3, r1
 8006888:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800688c:	2200      	movs	r2, #0
 800688e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006890:	7bfa      	ldrb	r2, [r7, #15]
 8006892:	6879      	ldr	r1, [r7, #4]
 8006894:	4613      	mov	r3, r2
 8006896:	00db      	lsls	r3, r3, #3
 8006898:	4413      	add	r3, r2
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	440b      	add	r3, r1
 800689e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80068a2:	7bfa      	ldrb	r2, [r7, #15]
 80068a4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80068a6:	7bfa      	ldrb	r2, [r7, #15]
 80068a8:	6879      	ldr	r1, [r7, #4]
 80068aa:	4613      	mov	r3, r2
 80068ac:	00db      	lsls	r3, r3, #3
 80068ae:	4413      	add	r3, r2
 80068b0:	009b      	lsls	r3, r3, #2
 80068b2:	440b      	add	r3, r1
 80068b4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80068b8:	2200      	movs	r2, #0
 80068ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80068bc:	7bfa      	ldrb	r2, [r7, #15]
 80068be:	6879      	ldr	r1, [r7, #4]
 80068c0:	4613      	mov	r3, r2
 80068c2:	00db      	lsls	r3, r3, #3
 80068c4:	4413      	add	r3, r2
 80068c6:	009b      	lsls	r3, r3, #2
 80068c8:	440b      	add	r3, r1
 80068ca:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80068ce:	2200      	movs	r2, #0
 80068d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80068d2:	7bfa      	ldrb	r2, [r7, #15]
 80068d4:	6879      	ldr	r1, [r7, #4]
 80068d6:	4613      	mov	r3, r2
 80068d8:	00db      	lsls	r3, r3, #3
 80068da:	4413      	add	r3, r2
 80068dc:	009b      	lsls	r3, r3, #2
 80068de:	440b      	add	r3, r1
 80068e0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80068e4:	2200      	movs	r2, #0
 80068e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80068e8:	7bfa      	ldrb	r2, [r7, #15]
 80068ea:	6879      	ldr	r1, [r7, #4]
 80068ec:	4613      	mov	r3, r2
 80068ee:	00db      	lsls	r3, r3, #3
 80068f0:	4413      	add	r3, r2
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	440b      	add	r3, r1
 80068f6:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80068fa:	2200      	movs	r2, #0
 80068fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80068fe:	7bfb      	ldrb	r3, [r7, #15]
 8006900:	3301      	adds	r3, #1
 8006902:	73fb      	strb	r3, [r7, #15]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	791b      	ldrb	r3, [r3, #4]
 8006908:	7bfa      	ldrb	r2, [r7, #15]
 800690a:	429a      	cmp	r2, r3
 800690c:	d3b5      	bcc.n	800687a <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6818      	ldr	r0, [r3, #0]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	7c1a      	ldrb	r2, [r3, #16]
 8006916:	f88d 2000 	strb.w	r2, [sp]
 800691a:	3304      	adds	r3, #4
 800691c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800691e:	f002 fec5 	bl	80096ac <USB_DevInit>
 8006922:	4603      	mov	r3, r0
 8006924:	2b00      	cmp	r3, #0
 8006926:	d005      	beq.n	8006934 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2202      	movs	r2, #2
 800692c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	e013      	b.n	800695c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2200      	movs	r2, #0
 8006938:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2201      	movs	r2, #1
 800693e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	7b1b      	ldrb	r3, [r3, #12]
 8006946:	2b01      	cmp	r3, #1
 8006948:	d102      	bne.n	8006950 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 f80a 	bl	8006964 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4618      	mov	r0, r3
 8006956:	f003 f86a 	bl	8009a2e <USB_DevDisconnect>

  return HAL_OK;
 800695a:	2300      	movs	r3, #0
}
 800695c:	4618      	mov	r0, r3
 800695e:	3710      	adds	r7, #16
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}

08006964 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006964:	b480      	push	{r7}
 8006966:	b085      	sub	sp, #20
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2201      	movs	r2, #1
 8006976:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2200      	movs	r2, #0
 800697e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	699b      	ldr	r3, [r3, #24]
 8006986:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006992:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006996:	f043 0303 	orr.w	r3, r3, #3
 800699a:	68fa      	ldr	r2, [r7, #12]
 800699c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800699e:	2300      	movs	r3, #0
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3714      	adds	r7, #20
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr

080069ac <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80069ac:	b480      	push	{r7}
 80069ae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80069b0:	4b05      	ldr	r3, [pc, #20]	@ (80069c8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a04      	ldr	r2, [pc, #16]	@ (80069c8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80069b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80069ba:	6013      	str	r3, [r2, #0]
}
 80069bc:	bf00      	nop
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr
 80069c6:	bf00      	nop
 80069c8:	40007000 	.word	0x40007000

080069cc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80069cc:	b480      	push	{r7}
 80069ce:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80069d0:	4b04      	ldr	r3, [pc, #16]	@ (80069e4 <HAL_PWREx_GetVoltageRange+0x18>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80069d8:	4618      	mov	r0, r3
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr
 80069e2:	bf00      	nop
 80069e4:	40007000 	.word	0x40007000

080069e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b085      	sub	sp, #20
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069f6:	d130      	bne.n	8006a5a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80069f8:	4b23      	ldr	r3, [pc, #140]	@ (8006a88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006a00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a04:	d038      	beq.n	8006a78 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006a06:	4b20      	ldr	r3, [pc, #128]	@ (8006a88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006a0e:	4a1e      	ldr	r2, [pc, #120]	@ (8006a88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006a10:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006a14:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006a16:	4b1d      	ldr	r3, [pc, #116]	@ (8006a8c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	2232      	movs	r2, #50	@ 0x32
 8006a1c:	fb02 f303 	mul.w	r3, r2, r3
 8006a20:	4a1b      	ldr	r2, [pc, #108]	@ (8006a90 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006a22:	fba2 2303 	umull	r2, r3, r2, r3
 8006a26:	0c9b      	lsrs	r3, r3, #18
 8006a28:	3301      	adds	r3, #1
 8006a2a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006a2c:	e002      	b.n	8006a34 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	3b01      	subs	r3, #1
 8006a32:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006a34:	4b14      	ldr	r3, [pc, #80]	@ (8006a88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006a36:	695b      	ldr	r3, [r3, #20]
 8006a38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a40:	d102      	bne.n	8006a48 <HAL_PWREx_ControlVoltageScaling+0x60>
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d1f2      	bne.n	8006a2e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006a48:	4b0f      	ldr	r3, [pc, #60]	@ (8006a88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006a4a:	695b      	ldr	r3, [r3, #20]
 8006a4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a54:	d110      	bne.n	8006a78 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006a56:	2303      	movs	r3, #3
 8006a58:	e00f      	b.n	8006a7a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006a5a:	4b0b      	ldr	r3, [pc, #44]	@ (8006a88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006a62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a66:	d007      	beq.n	8006a78 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006a68:	4b07      	ldr	r3, [pc, #28]	@ (8006a88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006a70:	4a05      	ldr	r2, [pc, #20]	@ (8006a88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006a72:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006a76:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006a78:	2300      	movs	r3, #0
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3714      	adds	r7, #20
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a84:	4770      	bx	lr
 8006a86:	bf00      	nop
 8006a88:	40007000 	.word	0x40007000
 8006a8c:	20000004 	.word	0x20000004
 8006a90:	431bde83 	.word	0x431bde83

08006a94 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8006a94:	b480      	push	{r7}
 8006a96:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8006a98:	4b05      	ldr	r3, [pc, #20]	@ (8006ab0 <HAL_PWREx_EnableVddUSB+0x1c>)
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	4a04      	ldr	r2, [pc, #16]	@ (8006ab0 <HAL_PWREx_EnableVddUSB+0x1c>)
 8006a9e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006aa2:	6053      	str	r3, [r2, #4]
}
 8006aa4:	bf00      	nop
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr
 8006aae:	bf00      	nop
 8006ab0:	40007000 	.word	0x40007000

08006ab4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b086      	sub	sp, #24
 8006ab8:	af02      	add	r7, sp, #8
 8006aba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006abc:	f7fe fa92 	bl	8004fe4 <HAL_GetTick>
 8006ac0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d101      	bne.n	8006acc <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	e063      	b.n	8006b94 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8006ad2:	b2db      	uxtb	r3, r3
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d10b      	bne.n	8006af0 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2200      	movs	r2, #0
 8006adc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f7fd fa81 	bl	8003fe8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8006ae6:	f241 3188 	movw	r1, #5000	@ 0x1388
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 f858 	bl	8006ba0 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	3b01      	subs	r3, #1
 8006b00:	021a      	lsls	r2, r3, #8
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	430a      	orrs	r2, r1
 8006b08:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b0e:	9300      	str	r3, [sp, #0]
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2200      	movs	r2, #0
 8006b14:	2120      	movs	r1, #32
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f000 f850 	bl	8006bbc <QSPI_WaitFlagStateUntilTimeout>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006b20:	7afb      	ldrb	r3, [r7, #11]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d131      	bne.n	8006b8a <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006b30:	f023 0310 	bic.w	r3, r3, #16
 8006b34:	687a      	ldr	r2, [r7, #4]
 8006b36:	6852      	ldr	r2, [r2, #4]
 8006b38:	0611      	lsls	r1, r2, #24
 8006b3a:	687a      	ldr	r2, [r7, #4]
 8006b3c:	68d2      	ldr	r2, [r2, #12]
 8006b3e:	4311      	orrs	r1, r2
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	6812      	ldr	r2, [r2, #0]
 8006b44:	430b      	orrs	r3, r1
 8006b46:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	685a      	ldr	r2, [r3, #4]
 8006b4e:	4b13      	ldr	r3, [pc, #76]	@ (8006b9c <HAL_QSPI_Init+0xe8>)
 8006b50:	4013      	ands	r3, r2
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	6912      	ldr	r2, [r2, #16]
 8006b56:	0411      	lsls	r1, r2, #16
 8006b58:	687a      	ldr	r2, [r7, #4]
 8006b5a:	6952      	ldr	r2, [r2, #20]
 8006b5c:	4311      	orrs	r1, r2
 8006b5e:	687a      	ldr	r2, [r7, #4]
 8006b60:	6992      	ldr	r2, [r2, #24]
 8006b62:	4311      	orrs	r1, r2
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	6812      	ldr	r2, [r2, #0]
 8006b68:	430b      	orrs	r3, r1
 8006b6a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	681a      	ldr	r2, [r3, #0]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f042 0201 	orr.w	r2, r2, #1
 8006b7a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2201      	movs	r2, #1
 8006b86:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 8006b92:	7afb      	ldrb	r3, [r7, #11]
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3710      	adds	r7, #16
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}
 8006b9c:	ffe0f8fe 	.word	0xffe0f8fe

08006ba0 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b083      	sub	sp, #12
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	683a      	ldr	r2, [r7, #0]
 8006bae:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8006bb0:	bf00      	nop
 8006bb2:	370c      	adds	r7, #12
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr

08006bbc <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b084      	sub	sp, #16
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	60f8      	str	r0, [r7, #12]
 8006bc4:	60b9      	str	r1, [r7, #8]
 8006bc6:	603b      	str	r3, [r7, #0]
 8006bc8:	4613      	mov	r3, r2
 8006bca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006bcc:	e01a      	b.n	8006c04 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bce:	69bb      	ldr	r3, [r7, #24]
 8006bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bd4:	d016      	beq.n	8006c04 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bd6:	f7fe fa05 	bl	8004fe4 <HAL_GetTick>
 8006bda:	4602      	mov	r2, r0
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	1ad3      	subs	r3, r2, r3
 8006be0:	69ba      	ldr	r2, [r7, #24]
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d302      	bcc.n	8006bec <QSPI_WaitFlagStateUntilTimeout+0x30>
 8006be6:	69bb      	ldr	r3, [r7, #24]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d10b      	bne.n	8006c04 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2204      	movs	r2, #4
 8006bf0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bf8:	f043 0201 	orr.w	r2, r3, #1
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006c00:	2301      	movs	r3, #1
 8006c02:	e00e      	b.n	8006c22 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	689a      	ldr	r2, [r3, #8]
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	4013      	ands	r3, r2
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	bf14      	ite	ne
 8006c12:	2301      	movne	r3, #1
 8006c14:	2300      	moveq	r3, #0
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	461a      	mov	r2, r3
 8006c1a:	79fb      	ldrb	r3, [r7, #7]
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d1d6      	bne.n	8006bce <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006c20:	2300      	movs	r3, #0
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3710      	adds	r7, #16
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}
	...

08006c2c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b088      	sub	sp, #32
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d101      	bne.n	8006c3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	e3ca      	b.n	80073d4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c3e:	4b97      	ldr	r3, [pc, #604]	@ (8006e9c <HAL_RCC_OscConfig+0x270>)
 8006c40:	689b      	ldr	r3, [r3, #8]
 8006c42:	f003 030c 	and.w	r3, r3, #12
 8006c46:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006c48:	4b94      	ldr	r3, [pc, #592]	@ (8006e9c <HAL_RCC_OscConfig+0x270>)
 8006c4a:	68db      	ldr	r3, [r3, #12]
 8006c4c:	f003 0303 	and.w	r3, r3, #3
 8006c50:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f003 0310 	and.w	r3, r3, #16
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	f000 80e4 	beq.w	8006e28 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006c60:	69bb      	ldr	r3, [r7, #24]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d007      	beq.n	8006c76 <HAL_RCC_OscConfig+0x4a>
 8006c66:	69bb      	ldr	r3, [r7, #24]
 8006c68:	2b0c      	cmp	r3, #12
 8006c6a:	f040 808b 	bne.w	8006d84 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	f040 8087 	bne.w	8006d84 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006c76:	4b89      	ldr	r3, [pc, #548]	@ (8006e9c <HAL_RCC_OscConfig+0x270>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f003 0302 	and.w	r3, r3, #2
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d005      	beq.n	8006c8e <HAL_RCC_OscConfig+0x62>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	699b      	ldr	r3, [r3, #24]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d101      	bne.n	8006c8e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e3a2      	b.n	80073d4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6a1a      	ldr	r2, [r3, #32]
 8006c92:	4b82      	ldr	r3, [pc, #520]	@ (8006e9c <HAL_RCC_OscConfig+0x270>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f003 0308 	and.w	r3, r3, #8
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d004      	beq.n	8006ca8 <HAL_RCC_OscConfig+0x7c>
 8006c9e:	4b7f      	ldr	r3, [pc, #508]	@ (8006e9c <HAL_RCC_OscConfig+0x270>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006ca6:	e005      	b.n	8006cb4 <HAL_RCC_OscConfig+0x88>
 8006ca8:	4b7c      	ldr	r3, [pc, #496]	@ (8006e9c <HAL_RCC_OscConfig+0x270>)
 8006caa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006cae:	091b      	lsrs	r3, r3, #4
 8006cb0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d223      	bcs.n	8006d00 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6a1b      	ldr	r3, [r3, #32]
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f000 fd55 	bl	800776c <RCC_SetFlashLatencyFromMSIRange>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d001      	beq.n	8006ccc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	e383      	b.n	80073d4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006ccc:	4b73      	ldr	r3, [pc, #460]	@ (8006e9c <HAL_RCC_OscConfig+0x270>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a72      	ldr	r2, [pc, #456]	@ (8006e9c <HAL_RCC_OscConfig+0x270>)
 8006cd2:	f043 0308 	orr.w	r3, r3, #8
 8006cd6:	6013      	str	r3, [r2, #0]
 8006cd8:	4b70      	ldr	r3, [pc, #448]	@ (8006e9c <HAL_RCC_OscConfig+0x270>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6a1b      	ldr	r3, [r3, #32]
 8006ce4:	496d      	ldr	r1, [pc, #436]	@ (8006e9c <HAL_RCC_OscConfig+0x270>)
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006cea:	4b6c      	ldr	r3, [pc, #432]	@ (8006e9c <HAL_RCC_OscConfig+0x270>)
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	69db      	ldr	r3, [r3, #28]
 8006cf6:	021b      	lsls	r3, r3, #8
 8006cf8:	4968      	ldr	r1, [pc, #416]	@ (8006e9c <HAL_RCC_OscConfig+0x270>)
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	604b      	str	r3, [r1, #4]
 8006cfe:	e025      	b.n	8006d4c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006d00:	4b66      	ldr	r3, [pc, #408]	@ (8006e9c <HAL_RCC_OscConfig+0x270>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a65      	ldr	r2, [pc, #404]	@ (8006e9c <HAL_RCC_OscConfig+0x270>)
 8006d06:	f043 0308 	orr.w	r3, r3, #8
 8006d0a:	6013      	str	r3, [r2, #0]
 8006d0c:	4b63      	ldr	r3, [pc, #396]	@ (8006e9c <HAL_RCC_OscConfig+0x270>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6a1b      	ldr	r3, [r3, #32]
 8006d18:	4960      	ldr	r1, [pc, #384]	@ (8006e9c <HAL_RCC_OscConfig+0x270>)
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006d1e:	4b5f      	ldr	r3, [pc, #380]	@ (8006e9c <HAL_RCC_OscConfig+0x270>)
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	69db      	ldr	r3, [r3, #28]
 8006d2a:	021b      	lsls	r3, r3, #8
 8006d2c:	495b      	ldr	r1, [pc, #364]	@ (8006e9c <HAL_RCC_OscConfig+0x270>)
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006d32:	69bb      	ldr	r3, [r7, #24]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d109      	bne.n	8006d4c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6a1b      	ldr	r3, [r3, #32]
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f000 fd15 	bl	800776c <RCC_SetFlashLatencyFromMSIRange>
 8006d42:	4603      	mov	r3, r0
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d001      	beq.n	8006d4c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8006d48:	2301      	movs	r3, #1
 8006d4a:	e343      	b.n	80073d4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006d4c:	f000 fc4a 	bl	80075e4 <HAL_RCC_GetSysClockFreq>
 8006d50:	4602      	mov	r2, r0
 8006d52:	4b52      	ldr	r3, [pc, #328]	@ (8006e9c <HAL_RCC_OscConfig+0x270>)
 8006d54:	689b      	ldr	r3, [r3, #8]
 8006d56:	091b      	lsrs	r3, r3, #4
 8006d58:	f003 030f 	and.w	r3, r3, #15
 8006d5c:	4950      	ldr	r1, [pc, #320]	@ (8006ea0 <HAL_RCC_OscConfig+0x274>)
 8006d5e:	5ccb      	ldrb	r3, [r1, r3]
 8006d60:	f003 031f 	and.w	r3, r3, #31
 8006d64:	fa22 f303 	lsr.w	r3, r2, r3
 8006d68:	4a4e      	ldr	r2, [pc, #312]	@ (8006ea4 <HAL_RCC_OscConfig+0x278>)
 8006d6a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006d6c:	4b4e      	ldr	r3, [pc, #312]	@ (8006ea8 <HAL_RCC_OscConfig+0x27c>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4618      	mov	r0, r3
 8006d72:	f7fe f8e7 	bl	8004f44 <HAL_InitTick>
 8006d76:	4603      	mov	r3, r0
 8006d78:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006d7a:	7bfb      	ldrb	r3, [r7, #15]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d052      	beq.n	8006e26 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8006d80:	7bfb      	ldrb	r3, [r7, #15]
 8006d82:	e327      	b.n	80073d4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	699b      	ldr	r3, [r3, #24]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d032      	beq.n	8006df2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006d8c:	4b43      	ldr	r3, [pc, #268]	@ (8006e9c <HAL_RCC_OscConfig+0x270>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a42      	ldr	r2, [pc, #264]	@ (8006e9c <HAL_RCC_OscConfig+0x270>)
 8006d92:	f043 0301 	orr.w	r3, r3, #1
 8006d96:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006d98:	f7fe f924 	bl	8004fe4 <HAL_GetTick>
 8006d9c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006d9e:	e008      	b.n	8006db2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006da0:	f7fe f920 	bl	8004fe4 <HAL_GetTick>
 8006da4:	4602      	mov	r2, r0
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	1ad3      	subs	r3, r2, r3
 8006daa:	2b02      	cmp	r3, #2
 8006dac:	d901      	bls.n	8006db2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8006dae:	2303      	movs	r3, #3
 8006db0:	e310      	b.n	80073d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006db2:	4b3a      	ldr	r3, [pc, #232]	@ (8006e9c <HAL_RCC_OscConfig+0x270>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f003 0302 	and.w	r3, r3, #2
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d0f0      	beq.n	8006da0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006dbe:	4b37      	ldr	r3, [pc, #220]	@ (8006e9c <HAL_RCC_OscConfig+0x270>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a36      	ldr	r2, [pc, #216]	@ (8006e9c <HAL_RCC_OscConfig+0x270>)
 8006dc4:	f043 0308 	orr.w	r3, r3, #8
 8006dc8:	6013      	str	r3, [r2, #0]
 8006dca:	4b34      	ldr	r3, [pc, #208]	@ (8006e9c <HAL_RCC_OscConfig+0x270>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6a1b      	ldr	r3, [r3, #32]
 8006dd6:	4931      	ldr	r1, [pc, #196]	@ (8006e9c <HAL_RCC_OscConfig+0x270>)
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006ddc:	4b2f      	ldr	r3, [pc, #188]	@ (8006e9c <HAL_RCC_OscConfig+0x270>)
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	69db      	ldr	r3, [r3, #28]
 8006de8:	021b      	lsls	r3, r3, #8
 8006dea:	492c      	ldr	r1, [pc, #176]	@ (8006e9c <HAL_RCC_OscConfig+0x270>)
 8006dec:	4313      	orrs	r3, r2
 8006dee:	604b      	str	r3, [r1, #4]
 8006df0:	e01a      	b.n	8006e28 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006df2:	4b2a      	ldr	r3, [pc, #168]	@ (8006e9c <HAL_RCC_OscConfig+0x270>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a29      	ldr	r2, [pc, #164]	@ (8006e9c <HAL_RCC_OscConfig+0x270>)
 8006df8:	f023 0301 	bic.w	r3, r3, #1
 8006dfc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006dfe:	f7fe f8f1 	bl	8004fe4 <HAL_GetTick>
 8006e02:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006e04:	e008      	b.n	8006e18 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006e06:	f7fe f8ed 	bl	8004fe4 <HAL_GetTick>
 8006e0a:	4602      	mov	r2, r0
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	1ad3      	subs	r3, r2, r3
 8006e10:	2b02      	cmp	r3, #2
 8006e12:	d901      	bls.n	8006e18 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8006e14:	2303      	movs	r3, #3
 8006e16:	e2dd      	b.n	80073d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006e18:	4b20      	ldr	r3, [pc, #128]	@ (8006e9c <HAL_RCC_OscConfig+0x270>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f003 0302 	and.w	r3, r3, #2
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d1f0      	bne.n	8006e06 <HAL_RCC_OscConfig+0x1da>
 8006e24:	e000      	b.n	8006e28 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006e26:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f003 0301 	and.w	r3, r3, #1
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d074      	beq.n	8006f1e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006e34:	69bb      	ldr	r3, [r7, #24]
 8006e36:	2b08      	cmp	r3, #8
 8006e38:	d005      	beq.n	8006e46 <HAL_RCC_OscConfig+0x21a>
 8006e3a:	69bb      	ldr	r3, [r7, #24]
 8006e3c:	2b0c      	cmp	r3, #12
 8006e3e:	d10e      	bne.n	8006e5e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	2b03      	cmp	r3, #3
 8006e44:	d10b      	bne.n	8006e5e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e46:	4b15      	ldr	r3, [pc, #84]	@ (8006e9c <HAL_RCC_OscConfig+0x270>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d064      	beq.n	8006f1c <HAL_RCC_OscConfig+0x2f0>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d160      	bne.n	8006f1c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	e2ba      	b.n	80073d4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e66:	d106      	bne.n	8006e76 <HAL_RCC_OscConfig+0x24a>
 8006e68:	4b0c      	ldr	r3, [pc, #48]	@ (8006e9c <HAL_RCC_OscConfig+0x270>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a0b      	ldr	r2, [pc, #44]	@ (8006e9c <HAL_RCC_OscConfig+0x270>)
 8006e6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e72:	6013      	str	r3, [r2, #0]
 8006e74:	e026      	b.n	8006ec4 <HAL_RCC_OscConfig+0x298>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006e7e:	d115      	bne.n	8006eac <HAL_RCC_OscConfig+0x280>
 8006e80:	4b06      	ldr	r3, [pc, #24]	@ (8006e9c <HAL_RCC_OscConfig+0x270>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a05      	ldr	r2, [pc, #20]	@ (8006e9c <HAL_RCC_OscConfig+0x270>)
 8006e86:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006e8a:	6013      	str	r3, [r2, #0]
 8006e8c:	4b03      	ldr	r3, [pc, #12]	@ (8006e9c <HAL_RCC_OscConfig+0x270>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a02      	ldr	r2, [pc, #8]	@ (8006e9c <HAL_RCC_OscConfig+0x270>)
 8006e92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e96:	6013      	str	r3, [r2, #0]
 8006e98:	e014      	b.n	8006ec4 <HAL_RCC_OscConfig+0x298>
 8006e9a:	bf00      	nop
 8006e9c:	40021000 	.word	0x40021000
 8006ea0:	08011a6c 	.word	0x08011a6c
 8006ea4:	20000004 	.word	0x20000004
 8006ea8:	20000044 	.word	0x20000044
 8006eac:	4ba0      	ldr	r3, [pc, #640]	@ (8007130 <HAL_RCC_OscConfig+0x504>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a9f      	ldr	r2, [pc, #636]	@ (8007130 <HAL_RCC_OscConfig+0x504>)
 8006eb2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006eb6:	6013      	str	r3, [r2, #0]
 8006eb8:	4b9d      	ldr	r3, [pc, #628]	@ (8007130 <HAL_RCC_OscConfig+0x504>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a9c      	ldr	r2, [pc, #624]	@ (8007130 <HAL_RCC_OscConfig+0x504>)
 8006ebe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006ec2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d013      	beq.n	8006ef4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ecc:	f7fe f88a 	bl	8004fe4 <HAL_GetTick>
 8006ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006ed2:	e008      	b.n	8006ee6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ed4:	f7fe f886 	bl	8004fe4 <HAL_GetTick>
 8006ed8:	4602      	mov	r2, r0
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	1ad3      	subs	r3, r2, r3
 8006ede:	2b64      	cmp	r3, #100	@ 0x64
 8006ee0:	d901      	bls.n	8006ee6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006ee2:	2303      	movs	r3, #3
 8006ee4:	e276      	b.n	80073d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006ee6:	4b92      	ldr	r3, [pc, #584]	@ (8007130 <HAL_RCC_OscConfig+0x504>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d0f0      	beq.n	8006ed4 <HAL_RCC_OscConfig+0x2a8>
 8006ef2:	e014      	b.n	8006f1e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ef4:	f7fe f876 	bl	8004fe4 <HAL_GetTick>
 8006ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006efa:	e008      	b.n	8006f0e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006efc:	f7fe f872 	bl	8004fe4 <HAL_GetTick>
 8006f00:	4602      	mov	r2, r0
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	1ad3      	subs	r3, r2, r3
 8006f06:	2b64      	cmp	r3, #100	@ 0x64
 8006f08:	d901      	bls.n	8006f0e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006f0a:	2303      	movs	r3, #3
 8006f0c:	e262      	b.n	80073d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006f0e:	4b88      	ldr	r3, [pc, #544]	@ (8007130 <HAL_RCC_OscConfig+0x504>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d1f0      	bne.n	8006efc <HAL_RCC_OscConfig+0x2d0>
 8006f1a:	e000      	b.n	8006f1e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f003 0302 	and.w	r3, r3, #2
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d060      	beq.n	8006fec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006f2a:	69bb      	ldr	r3, [r7, #24]
 8006f2c:	2b04      	cmp	r3, #4
 8006f2e:	d005      	beq.n	8006f3c <HAL_RCC_OscConfig+0x310>
 8006f30:	69bb      	ldr	r3, [r7, #24]
 8006f32:	2b0c      	cmp	r3, #12
 8006f34:	d119      	bne.n	8006f6a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	2b02      	cmp	r3, #2
 8006f3a:	d116      	bne.n	8006f6a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006f3c:	4b7c      	ldr	r3, [pc, #496]	@ (8007130 <HAL_RCC_OscConfig+0x504>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d005      	beq.n	8006f54 <HAL_RCC_OscConfig+0x328>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	68db      	ldr	r3, [r3, #12]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d101      	bne.n	8006f54 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006f50:	2301      	movs	r3, #1
 8006f52:	e23f      	b.n	80073d4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f54:	4b76      	ldr	r3, [pc, #472]	@ (8007130 <HAL_RCC_OscConfig+0x504>)
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	691b      	ldr	r3, [r3, #16]
 8006f60:	061b      	lsls	r3, r3, #24
 8006f62:	4973      	ldr	r1, [pc, #460]	@ (8007130 <HAL_RCC_OscConfig+0x504>)
 8006f64:	4313      	orrs	r3, r2
 8006f66:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006f68:	e040      	b.n	8006fec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	68db      	ldr	r3, [r3, #12]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d023      	beq.n	8006fba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006f72:	4b6f      	ldr	r3, [pc, #444]	@ (8007130 <HAL_RCC_OscConfig+0x504>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a6e      	ldr	r2, [pc, #440]	@ (8007130 <HAL_RCC_OscConfig+0x504>)
 8006f78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f7e:	f7fe f831 	bl	8004fe4 <HAL_GetTick>
 8006f82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006f84:	e008      	b.n	8006f98 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f86:	f7fe f82d 	bl	8004fe4 <HAL_GetTick>
 8006f8a:	4602      	mov	r2, r0
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	1ad3      	subs	r3, r2, r3
 8006f90:	2b02      	cmp	r3, #2
 8006f92:	d901      	bls.n	8006f98 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006f94:	2303      	movs	r3, #3
 8006f96:	e21d      	b.n	80073d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006f98:	4b65      	ldr	r3, [pc, #404]	@ (8007130 <HAL_RCC_OscConfig+0x504>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d0f0      	beq.n	8006f86 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006fa4:	4b62      	ldr	r3, [pc, #392]	@ (8007130 <HAL_RCC_OscConfig+0x504>)
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	691b      	ldr	r3, [r3, #16]
 8006fb0:	061b      	lsls	r3, r3, #24
 8006fb2:	495f      	ldr	r1, [pc, #380]	@ (8007130 <HAL_RCC_OscConfig+0x504>)
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	604b      	str	r3, [r1, #4]
 8006fb8:	e018      	b.n	8006fec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006fba:	4b5d      	ldr	r3, [pc, #372]	@ (8007130 <HAL_RCC_OscConfig+0x504>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a5c      	ldr	r2, [pc, #368]	@ (8007130 <HAL_RCC_OscConfig+0x504>)
 8006fc0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006fc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fc6:	f7fe f80d 	bl	8004fe4 <HAL_GetTick>
 8006fca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006fcc:	e008      	b.n	8006fe0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006fce:	f7fe f809 	bl	8004fe4 <HAL_GetTick>
 8006fd2:	4602      	mov	r2, r0
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	1ad3      	subs	r3, r2, r3
 8006fd8:	2b02      	cmp	r3, #2
 8006fda:	d901      	bls.n	8006fe0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006fdc:	2303      	movs	r3, #3
 8006fde:	e1f9      	b.n	80073d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006fe0:	4b53      	ldr	r3, [pc, #332]	@ (8007130 <HAL_RCC_OscConfig+0x504>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d1f0      	bne.n	8006fce <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f003 0308 	and.w	r3, r3, #8
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d03c      	beq.n	8007072 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	695b      	ldr	r3, [r3, #20]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d01c      	beq.n	800703a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007000:	4b4b      	ldr	r3, [pc, #300]	@ (8007130 <HAL_RCC_OscConfig+0x504>)
 8007002:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007006:	4a4a      	ldr	r2, [pc, #296]	@ (8007130 <HAL_RCC_OscConfig+0x504>)
 8007008:	f043 0301 	orr.w	r3, r3, #1
 800700c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007010:	f7fd ffe8 	bl	8004fe4 <HAL_GetTick>
 8007014:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007016:	e008      	b.n	800702a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007018:	f7fd ffe4 	bl	8004fe4 <HAL_GetTick>
 800701c:	4602      	mov	r2, r0
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	1ad3      	subs	r3, r2, r3
 8007022:	2b02      	cmp	r3, #2
 8007024:	d901      	bls.n	800702a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8007026:	2303      	movs	r3, #3
 8007028:	e1d4      	b.n	80073d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800702a:	4b41      	ldr	r3, [pc, #260]	@ (8007130 <HAL_RCC_OscConfig+0x504>)
 800702c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007030:	f003 0302 	and.w	r3, r3, #2
 8007034:	2b00      	cmp	r3, #0
 8007036:	d0ef      	beq.n	8007018 <HAL_RCC_OscConfig+0x3ec>
 8007038:	e01b      	b.n	8007072 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800703a:	4b3d      	ldr	r3, [pc, #244]	@ (8007130 <HAL_RCC_OscConfig+0x504>)
 800703c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007040:	4a3b      	ldr	r2, [pc, #236]	@ (8007130 <HAL_RCC_OscConfig+0x504>)
 8007042:	f023 0301 	bic.w	r3, r3, #1
 8007046:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800704a:	f7fd ffcb 	bl	8004fe4 <HAL_GetTick>
 800704e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007050:	e008      	b.n	8007064 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007052:	f7fd ffc7 	bl	8004fe4 <HAL_GetTick>
 8007056:	4602      	mov	r2, r0
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	1ad3      	subs	r3, r2, r3
 800705c:	2b02      	cmp	r3, #2
 800705e:	d901      	bls.n	8007064 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8007060:	2303      	movs	r3, #3
 8007062:	e1b7      	b.n	80073d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007064:	4b32      	ldr	r3, [pc, #200]	@ (8007130 <HAL_RCC_OscConfig+0x504>)
 8007066:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800706a:	f003 0302 	and.w	r3, r3, #2
 800706e:	2b00      	cmp	r3, #0
 8007070:	d1ef      	bne.n	8007052 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f003 0304 	and.w	r3, r3, #4
 800707a:	2b00      	cmp	r3, #0
 800707c:	f000 80a6 	beq.w	80071cc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007080:	2300      	movs	r3, #0
 8007082:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007084:	4b2a      	ldr	r3, [pc, #168]	@ (8007130 <HAL_RCC_OscConfig+0x504>)
 8007086:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007088:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800708c:	2b00      	cmp	r3, #0
 800708e:	d10d      	bne.n	80070ac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007090:	4b27      	ldr	r3, [pc, #156]	@ (8007130 <HAL_RCC_OscConfig+0x504>)
 8007092:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007094:	4a26      	ldr	r2, [pc, #152]	@ (8007130 <HAL_RCC_OscConfig+0x504>)
 8007096:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800709a:	6593      	str	r3, [r2, #88]	@ 0x58
 800709c:	4b24      	ldr	r3, [pc, #144]	@ (8007130 <HAL_RCC_OscConfig+0x504>)
 800709e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80070a4:	60bb      	str	r3, [r7, #8]
 80070a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80070a8:	2301      	movs	r3, #1
 80070aa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80070ac:	4b21      	ldr	r3, [pc, #132]	@ (8007134 <HAL_RCC_OscConfig+0x508>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d118      	bne.n	80070ea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80070b8:	4b1e      	ldr	r3, [pc, #120]	@ (8007134 <HAL_RCC_OscConfig+0x508>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a1d      	ldr	r2, [pc, #116]	@ (8007134 <HAL_RCC_OscConfig+0x508>)
 80070be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80070c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80070c4:	f7fd ff8e 	bl	8004fe4 <HAL_GetTick>
 80070c8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80070ca:	e008      	b.n	80070de <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80070cc:	f7fd ff8a 	bl	8004fe4 <HAL_GetTick>
 80070d0:	4602      	mov	r2, r0
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	1ad3      	subs	r3, r2, r3
 80070d6:	2b02      	cmp	r3, #2
 80070d8:	d901      	bls.n	80070de <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80070da:	2303      	movs	r3, #3
 80070dc:	e17a      	b.n	80073d4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80070de:	4b15      	ldr	r3, [pc, #84]	@ (8007134 <HAL_RCC_OscConfig+0x508>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d0f0      	beq.n	80070cc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	2b01      	cmp	r3, #1
 80070f0:	d108      	bne.n	8007104 <HAL_RCC_OscConfig+0x4d8>
 80070f2:	4b0f      	ldr	r3, [pc, #60]	@ (8007130 <HAL_RCC_OscConfig+0x504>)
 80070f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070f8:	4a0d      	ldr	r2, [pc, #52]	@ (8007130 <HAL_RCC_OscConfig+0x504>)
 80070fa:	f043 0301 	orr.w	r3, r3, #1
 80070fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007102:	e029      	b.n	8007158 <HAL_RCC_OscConfig+0x52c>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	689b      	ldr	r3, [r3, #8]
 8007108:	2b05      	cmp	r3, #5
 800710a:	d115      	bne.n	8007138 <HAL_RCC_OscConfig+0x50c>
 800710c:	4b08      	ldr	r3, [pc, #32]	@ (8007130 <HAL_RCC_OscConfig+0x504>)
 800710e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007112:	4a07      	ldr	r2, [pc, #28]	@ (8007130 <HAL_RCC_OscConfig+0x504>)
 8007114:	f043 0304 	orr.w	r3, r3, #4
 8007118:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800711c:	4b04      	ldr	r3, [pc, #16]	@ (8007130 <HAL_RCC_OscConfig+0x504>)
 800711e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007122:	4a03      	ldr	r2, [pc, #12]	@ (8007130 <HAL_RCC_OscConfig+0x504>)
 8007124:	f043 0301 	orr.w	r3, r3, #1
 8007128:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800712c:	e014      	b.n	8007158 <HAL_RCC_OscConfig+0x52c>
 800712e:	bf00      	nop
 8007130:	40021000 	.word	0x40021000
 8007134:	40007000 	.word	0x40007000
 8007138:	4b9c      	ldr	r3, [pc, #624]	@ (80073ac <HAL_RCC_OscConfig+0x780>)
 800713a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800713e:	4a9b      	ldr	r2, [pc, #620]	@ (80073ac <HAL_RCC_OscConfig+0x780>)
 8007140:	f023 0301 	bic.w	r3, r3, #1
 8007144:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007148:	4b98      	ldr	r3, [pc, #608]	@ (80073ac <HAL_RCC_OscConfig+0x780>)
 800714a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800714e:	4a97      	ldr	r2, [pc, #604]	@ (80073ac <HAL_RCC_OscConfig+0x780>)
 8007150:	f023 0304 	bic.w	r3, r3, #4
 8007154:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d016      	beq.n	800718e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007160:	f7fd ff40 	bl	8004fe4 <HAL_GetTick>
 8007164:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007166:	e00a      	b.n	800717e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007168:	f7fd ff3c 	bl	8004fe4 <HAL_GetTick>
 800716c:	4602      	mov	r2, r0
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	1ad3      	subs	r3, r2, r3
 8007172:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007176:	4293      	cmp	r3, r2
 8007178:	d901      	bls.n	800717e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800717a:	2303      	movs	r3, #3
 800717c:	e12a      	b.n	80073d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800717e:	4b8b      	ldr	r3, [pc, #556]	@ (80073ac <HAL_RCC_OscConfig+0x780>)
 8007180:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007184:	f003 0302 	and.w	r3, r3, #2
 8007188:	2b00      	cmp	r3, #0
 800718a:	d0ed      	beq.n	8007168 <HAL_RCC_OscConfig+0x53c>
 800718c:	e015      	b.n	80071ba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800718e:	f7fd ff29 	bl	8004fe4 <HAL_GetTick>
 8007192:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007194:	e00a      	b.n	80071ac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007196:	f7fd ff25 	bl	8004fe4 <HAL_GetTick>
 800719a:	4602      	mov	r2, r0
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	1ad3      	subs	r3, r2, r3
 80071a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d901      	bls.n	80071ac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80071a8:	2303      	movs	r3, #3
 80071aa:	e113      	b.n	80073d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80071ac:	4b7f      	ldr	r3, [pc, #508]	@ (80073ac <HAL_RCC_OscConfig+0x780>)
 80071ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071b2:	f003 0302 	and.w	r3, r3, #2
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d1ed      	bne.n	8007196 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80071ba:	7ffb      	ldrb	r3, [r7, #31]
 80071bc:	2b01      	cmp	r3, #1
 80071be:	d105      	bne.n	80071cc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80071c0:	4b7a      	ldr	r3, [pc, #488]	@ (80073ac <HAL_RCC_OscConfig+0x780>)
 80071c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071c4:	4a79      	ldr	r2, [pc, #484]	@ (80073ac <HAL_RCC_OscConfig+0x780>)
 80071c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80071ca:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	f000 80fe 	beq.w	80073d2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071da:	2b02      	cmp	r3, #2
 80071dc:	f040 80d0 	bne.w	8007380 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80071e0:	4b72      	ldr	r3, [pc, #456]	@ (80073ac <HAL_RCC_OscConfig+0x780>)
 80071e2:	68db      	ldr	r3, [r3, #12]
 80071e4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	f003 0203 	and.w	r2, r3, #3
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d130      	bne.n	8007256 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071fe:	3b01      	subs	r3, #1
 8007200:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007202:	429a      	cmp	r2, r3
 8007204:	d127      	bne.n	8007256 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007210:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007212:	429a      	cmp	r2, r3
 8007214:	d11f      	bne.n	8007256 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800721c:	687a      	ldr	r2, [r7, #4]
 800721e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007220:	2a07      	cmp	r2, #7
 8007222:	bf14      	ite	ne
 8007224:	2201      	movne	r2, #1
 8007226:	2200      	moveq	r2, #0
 8007228:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800722a:	4293      	cmp	r3, r2
 800722c:	d113      	bne.n	8007256 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007238:	085b      	lsrs	r3, r3, #1
 800723a:	3b01      	subs	r3, #1
 800723c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800723e:	429a      	cmp	r2, r3
 8007240:	d109      	bne.n	8007256 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800724c:	085b      	lsrs	r3, r3, #1
 800724e:	3b01      	subs	r3, #1
 8007250:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007252:	429a      	cmp	r2, r3
 8007254:	d06e      	beq.n	8007334 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007256:	69bb      	ldr	r3, [r7, #24]
 8007258:	2b0c      	cmp	r3, #12
 800725a:	d069      	beq.n	8007330 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800725c:	4b53      	ldr	r3, [pc, #332]	@ (80073ac <HAL_RCC_OscConfig+0x780>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007264:	2b00      	cmp	r3, #0
 8007266:	d105      	bne.n	8007274 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8007268:	4b50      	ldr	r3, [pc, #320]	@ (80073ac <HAL_RCC_OscConfig+0x780>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007270:	2b00      	cmp	r3, #0
 8007272:	d001      	beq.n	8007278 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8007274:	2301      	movs	r3, #1
 8007276:	e0ad      	b.n	80073d4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007278:	4b4c      	ldr	r3, [pc, #304]	@ (80073ac <HAL_RCC_OscConfig+0x780>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a4b      	ldr	r2, [pc, #300]	@ (80073ac <HAL_RCC_OscConfig+0x780>)
 800727e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007282:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007284:	f7fd feae 	bl	8004fe4 <HAL_GetTick>
 8007288:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800728a:	e008      	b.n	800729e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800728c:	f7fd feaa 	bl	8004fe4 <HAL_GetTick>
 8007290:	4602      	mov	r2, r0
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	1ad3      	subs	r3, r2, r3
 8007296:	2b02      	cmp	r3, #2
 8007298:	d901      	bls.n	800729e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800729a:	2303      	movs	r3, #3
 800729c:	e09a      	b.n	80073d4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800729e:	4b43      	ldr	r3, [pc, #268]	@ (80073ac <HAL_RCC_OscConfig+0x780>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d1f0      	bne.n	800728c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80072aa:	4b40      	ldr	r3, [pc, #256]	@ (80073ac <HAL_RCC_OscConfig+0x780>)
 80072ac:	68da      	ldr	r2, [r3, #12]
 80072ae:	4b40      	ldr	r3, [pc, #256]	@ (80073b0 <HAL_RCC_OscConfig+0x784>)
 80072b0:	4013      	ands	r3, r2
 80072b2:	687a      	ldr	r2, [r7, #4]
 80072b4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80072b6:	687a      	ldr	r2, [r7, #4]
 80072b8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80072ba:	3a01      	subs	r2, #1
 80072bc:	0112      	lsls	r2, r2, #4
 80072be:	4311      	orrs	r1, r2
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80072c4:	0212      	lsls	r2, r2, #8
 80072c6:	4311      	orrs	r1, r2
 80072c8:	687a      	ldr	r2, [r7, #4]
 80072ca:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80072cc:	0852      	lsrs	r2, r2, #1
 80072ce:	3a01      	subs	r2, #1
 80072d0:	0552      	lsls	r2, r2, #21
 80072d2:	4311      	orrs	r1, r2
 80072d4:	687a      	ldr	r2, [r7, #4]
 80072d6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80072d8:	0852      	lsrs	r2, r2, #1
 80072da:	3a01      	subs	r2, #1
 80072dc:	0652      	lsls	r2, r2, #25
 80072de:	4311      	orrs	r1, r2
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80072e4:	0912      	lsrs	r2, r2, #4
 80072e6:	0452      	lsls	r2, r2, #17
 80072e8:	430a      	orrs	r2, r1
 80072ea:	4930      	ldr	r1, [pc, #192]	@ (80073ac <HAL_RCC_OscConfig+0x780>)
 80072ec:	4313      	orrs	r3, r2
 80072ee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80072f0:	4b2e      	ldr	r3, [pc, #184]	@ (80073ac <HAL_RCC_OscConfig+0x780>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a2d      	ldr	r2, [pc, #180]	@ (80073ac <HAL_RCC_OscConfig+0x780>)
 80072f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80072fa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80072fc:	4b2b      	ldr	r3, [pc, #172]	@ (80073ac <HAL_RCC_OscConfig+0x780>)
 80072fe:	68db      	ldr	r3, [r3, #12]
 8007300:	4a2a      	ldr	r2, [pc, #168]	@ (80073ac <HAL_RCC_OscConfig+0x780>)
 8007302:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007306:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007308:	f7fd fe6c 	bl	8004fe4 <HAL_GetTick>
 800730c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800730e:	e008      	b.n	8007322 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007310:	f7fd fe68 	bl	8004fe4 <HAL_GetTick>
 8007314:	4602      	mov	r2, r0
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	1ad3      	subs	r3, r2, r3
 800731a:	2b02      	cmp	r3, #2
 800731c:	d901      	bls.n	8007322 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800731e:	2303      	movs	r3, #3
 8007320:	e058      	b.n	80073d4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007322:	4b22      	ldr	r3, [pc, #136]	@ (80073ac <HAL_RCC_OscConfig+0x780>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800732a:	2b00      	cmp	r3, #0
 800732c:	d0f0      	beq.n	8007310 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800732e:	e050      	b.n	80073d2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007330:	2301      	movs	r3, #1
 8007332:	e04f      	b.n	80073d4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007334:	4b1d      	ldr	r3, [pc, #116]	@ (80073ac <HAL_RCC_OscConfig+0x780>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800733c:	2b00      	cmp	r3, #0
 800733e:	d148      	bne.n	80073d2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007340:	4b1a      	ldr	r3, [pc, #104]	@ (80073ac <HAL_RCC_OscConfig+0x780>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a19      	ldr	r2, [pc, #100]	@ (80073ac <HAL_RCC_OscConfig+0x780>)
 8007346:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800734a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800734c:	4b17      	ldr	r3, [pc, #92]	@ (80073ac <HAL_RCC_OscConfig+0x780>)
 800734e:	68db      	ldr	r3, [r3, #12]
 8007350:	4a16      	ldr	r2, [pc, #88]	@ (80073ac <HAL_RCC_OscConfig+0x780>)
 8007352:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007356:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007358:	f7fd fe44 	bl	8004fe4 <HAL_GetTick>
 800735c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800735e:	e008      	b.n	8007372 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007360:	f7fd fe40 	bl	8004fe4 <HAL_GetTick>
 8007364:	4602      	mov	r2, r0
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	1ad3      	subs	r3, r2, r3
 800736a:	2b02      	cmp	r3, #2
 800736c:	d901      	bls.n	8007372 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800736e:	2303      	movs	r3, #3
 8007370:	e030      	b.n	80073d4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007372:	4b0e      	ldr	r3, [pc, #56]	@ (80073ac <HAL_RCC_OscConfig+0x780>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800737a:	2b00      	cmp	r3, #0
 800737c:	d0f0      	beq.n	8007360 <HAL_RCC_OscConfig+0x734>
 800737e:	e028      	b.n	80073d2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007380:	69bb      	ldr	r3, [r7, #24]
 8007382:	2b0c      	cmp	r3, #12
 8007384:	d023      	beq.n	80073ce <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007386:	4b09      	ldr	r3, [pc, #36]	@ (80073ac <HAL_RCC_OscConfig+0x780>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a08      	ldr	r2, [pc, #32]	@ (80073ac <HAL_RCC_OscConfig+0x780>)
 800738c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007390:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007392:	f7fd fe27 	bl	8004fe4 <HAL_GetTick>
 8007396:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007398:	e00c      	b.n	80073b4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800739a:	f7fd fe23 	bl	8004fe4 <HAL_GetTick>
 800739e:	4602      	mov	r2, r0
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	1ad3      	subs	r3, r2, r3
 80073a4:	2b02      	cmp	r3, #2
 80073a6:	d905      	bls.n	80073b4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80073a8:	2303      	movs	r3, #3
 80073aa:	e013      	b.n	80073d4 <HAL_RCC_OscConfig+0x7a8>
 80073ac:	40021000 	.word	0x40021000
 80073b0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80073b4:	4b09      	ldr	r3, [pc, #36]	@ (80073dc <HAL_RCC_OscConfig+0x7b0>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d1ec      	bne.n	800739a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80073c0:	4b06      	ldr	r3, [pc, #24]	@ (80073dc <HAL_RCC_OscConfig+0x7b0>)
 80073c2:	68da      	ldr	r2, [r3, #12]
 80073c4:	4905      	ldr	r1, [pc, #20]	@ (80073dc <HAL_RCC_OscConfig+0x7b0>)
 80073c6:	4b06      	ldr	r3, [pc, #24]	@ (80073e0 <HAL_RCC_OscConfig+0x7b4>)
 80073c8:	4013      	ands	r3, r2
 80073ca:	60cb      	str	r3, [r1, #12]
 80073cc:	e001      	b.n	80073d2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80073ce:	2301      	movs	r3, #1
 80073d0:	e000      	b.n	80073d4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80073d2:	2300      	movs	r3, #0
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3720      	adds	r7, #32
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}
 80073dc:	40021000 	.word	0x40021000
 80073e0:	feeefffc 	.word	0xfeeefffc

080073e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b084      	sub	sp, #16
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
 80073ec:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d101      	bne.n	80073f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80073f4:	2301      	movs	r3, #1
 80073f6:	e0e7      	b.n	80075c8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80073f8:	4b75      	ldr	r3, [pc, #468]	@ (80075d0 <HAL_RCC_ClockConfig+0x1ec>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f003 0307 	and.w	r3, r3, #7
 8007400:	683a      	ldr	r2, [r7, #0]
 8007402:	429a      	cmp	r2, r3
 8007404:	d910      	bls.n	8007428 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007406:	4b72      	ldr	r3, [pc, #456]	@ (80075d0 <HAL_RCC_ClockConfig+0x1ec>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f023 0207 	bic.w	r2, r3, #7
 800740e:	4970      	ldr	r1, [pc, #448]	@ (80075d0 <HAL_RCC_ClockConfig+0x1ec>)
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	4313      	orrs	r3, r2
 8007414:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007416:	4b6e      	ldr	r3, [pc, #440]	@ (80075d0 <HAL_RCC_ClockConfig+0x1ec>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f003 0307 	and.w	r3, r3, #7
 800741e:	683a      	ldr	r2, [r7, #0]
 8007420:	429a      	cmp	r2, r3
 8007422:	d001      	beq.n	8007428 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007424:	2301      	movs	r3, #1
 8007426:	e0cf      	b.n	80075c8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f003 0302 	and.w	r3, r3, #2
 8007430:	2b00      	cmp	r3, #0
 8007432:	d010      	beq.n	8007456 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	689a      	ldr	r2, [r3, #8]
 8007438:	4b66      	ldr	r3, [pc, #408]	@ (80075d4 <HAL_RCC_ClockConfig+0x1f0>)
 800743a:	689b      	ldr	r3, [r3, #8]
 800743c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007440:	429a      	cmp	r2, r3
 8007442:	d908      	bls.n	8007456 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007444:	4b63      	ldr	r3, [pc, #396]	@ (80075d4 <HAL_RCC_ClockConfig+0x1f0>)
 8007446:	689b      	ldr	r3, [r3, #8]
 8007448:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	4960      	ldr	r1, [pc, #384]	@ (80075d4 <HAL_RCC_ClockConfig+0x1f0>)
 8007452:	4313      	orrs	r3, r2
 8007454:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f003 0301 	and.w	r3, r3, #1
 800745e:	2b00      	cmp	r3, #0
 8007460:	d04c      	beq.n	80074fc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	2b03      	cmp	r3, #3
 8007468:	d107      	bne.n	800747a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800746a:	4b5a      	ldr	r3, [pc, #360]	@ (80075d4 <HAL_RCC_ClockConfig+0x1f0>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007472:	2b00      	cmp	r3, #0
 8007474:	d121      	bne.n	80074ba <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8007476:	2301      	movs	r3, #1
 8007478:	e0a6      	b.n	80075c8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	2b02      	cmp	r3, #2
 8007480:	d107      	bne.n	8007492 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007482:	4b54      	ldr	r3, [pc, #336]	@ (80075d4 <HAL_RCC_ClockConfig+0x1f0>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800748a:	2b00      	cmp	r3, #0
 800748c:	d115      	bne.n	80074ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800748e:	2301      	movs	r3, #1
 8007490:	e09a      	b.n	80075c8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	685b      	ldr	r3, [r3, #4]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d107      	bne.n	80074aa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800749a:	4b4e      	ldr	r3, [pc, #312]	@ (80075d4 <HAL_RCC_ClockConfig+0x1f0>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f003 0302 	and.w	r3, r3, #2
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d109      	bne.n	80074ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80074a6:	2301      	movs	r3, #1
 80074a8:	e08e      	b.n	80075c8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80074aa:	4b4a      	ldr	r3, [pc, #296]	@ (80075d4 <HAL_RCC_ClockConfig+0x1f0>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d101      	bne.n	80074ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80074b6:	2301      	movs	r3, #1
 80074b8:	e086      	b.n	80075c8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80074ba:	4b46      	ldr	r3, [pc, #280]	@ (80075d4 <HAL_RCC_ClockConfig+0x1f0>)
 80074bc:	689b      	ldr	r3, [r3, #8]
 80074be:	f023 0203 	bic.w	r2, r3, #3
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	4943      	ldr	r1, [pc, #268]	@ (80075d4 <HAL_RCC_ClockConfig+0x1f0>)
 80074c8:	4313      	orrs	r3, r2
 80074ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074cc:	f7fd fd8a 	bl	8004fe4 <HAL_GetTick>
 80074d0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80074d2:	e00a      	b.n	80074ea <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80074d4:	f7fd fd86 	bl	8004fe4 <HAL_GetTick>
 80074d8:	4602      	mov	r2, r0
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	1ad3      	subs	r3, r2, r3
 80074de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d901      	bls.n	80074ea <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80074e6:	2303      	movs	r3, #3
 80074e8:	e06e      	b.n	80075c8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80074ea:	4b3a      	ldr	r3, [pc, #232]	@ (80075d4 <HAL_RCC_ClockConfig+0x1f0>)
 80074ec:	689b      	ldr	r3, [r3, #8]
 80074ee:	f003 020c 	and.w	r2, r3, #12
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	009b      	lsls	r3, r3, #2
 80074f8:	429a      	cmp	r2, r3
 80074fa:	d1eb      	bne.n	80074d4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f003 0302 	and.w	r3, r3, #2
 8007504:	2b00      	cmp	r3, #0
 8007506:	d010      	beq.n	800752a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	689a      	ldr	r2, [r3, #8]
 800750c:	4b31      	ldr	r3, [pc, #196]	@ (80075d4 <HAL_RCC_ClockConfig+0x1f0>)
 800750e:	689b      	ldr	r3, [r3, #8]
 8007510:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007514:	429a      	cmp	r2, r3
 8007516:	d208      	bcs.n	800752a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007518:	4b2e      	ldr	r3, [pc, #184]	@ (80075d4 <HAL_RCC_ClockConfig+0x1f0>)
 800751a:	689b      	ldr	r3, [r3, #8]
 800751c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	689b      	ldr	r3, [r3, #8]
 8007524:	492b      	ldr	r1, [pc, #172]	@ (80075d4 <HAL_RCC_ClockConfig+0x1f0>)
 8007526:	4313      	orrs	r3, r2
 8007528:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800752a:	4b29      	ldr	r3, [pc, #164]	@ (80075d0 <HAL_RCC_ClockConfig+0x1ec>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f003 0307 	and.w	r3, r3, #7
 8007532:	683a      	ldr	r2, [r7, #0]
 8007534:	429a      	cmp	r2, r3
 8007536:	d210      	bcs.n	800755a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007538:	4b25      	ldr	r3, [pc, #148]	@ (80075d0 <HAL_RCC_ClockConfig+0x1ec>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f023 0207 	bic.w	r2, r3, #7
 8007540:	4923      	ldr	r1, [pc, #140]	@ (80075d0 <HAL_RCC_ClockConfig+0x1ec>)
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	4313      	orrs	r3, r2
 8007546:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007548:	4b21      	ldr	r3, [pc, #132]	@ (80075d0 <HAL_RCC_ClockConfig+0x1ec>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f003 0307 	and.w	r3, r3, #7
 8007550:	683a      	ldr	r2, [r7, #0]
 8007552:	429a      	cmp	r2, r3
 8007554:	d001      	beq.n	800755a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8007556:	2301      	movs	r3, #1
 8007558:	e036      	b.n	80075c8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f003 0304 	and.w	r3, r3, #4
 8007562:	2b00      	cmp	r3, #0
 8007564:	d008      	beq.n	8007578 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007566:	4b1b      	ldr	r3, [pc, #108]	@ (80075d4 <HAL_RCC_ClockConfig+0x1f0>)
 8007568:	689b      	ldr	r3, [r3, #8]
 800756a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	68db      	ldr	r3, [r3, #12]
 8007572:	4918      	ldr	r1, [pc, #96]	@ (80075d4 <HAL_RCC_ClockConfig+0x1f0>)
 8007574:	4313      	orrs	r3, r2
 8007576:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f003 0308 	and.w	r3, r3, #8
 8007580:	2b00      	cmp	r3, #0
 8007582:	d009      	beq.n	8007598 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007584:	4b13      	ldr	r3, [pc, #76]	@ (80075d4 <HAL_RCC_ClockConfig+0x1f0>)
 8007586:	689b      	ldr	r3, [r3, #8]
 8007588:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	691b      	ldr	r3, [r3, #16]
 8007590:	00db      	lsls	r3, r3, #3
 8007592:	4910      	ldr	r1, [pc, #64]	@ (80075d4 <HAL_RCC_ClockConfig+0x1f0>)
 8007594:	4313      	orrs	r3, r2
 8007596:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007598:	f000 f824 	bl	80075e4 <HAL_RCC_GetSysClockFreq>
 800759c:	4602      	mov	r2, r0
 800759e:	4b0d      	ldr	r3, [pc, #52]	@ (80075d4 <HAL_RCC_ClockConfig+0x1f0>)
 80075a0:	689b      	ldr	r3, [r3, #8]
 80075a2:	091b      	lsrs	r3, r3, #4
 80075a4:	f003 030f 	and.w	r3, r3, #15
 80075a8:	490b      	ldr	r1, [pc, #44]	@ (80075d8 <HAL_RCC_ClockConfig+0x1f4>)
 80075aa:	5ccb      	ldrb	r3, [r1, r3]
 80075ac:	f003 031f 	and.w	r3, r3, #31
 80075b0:	fa22 f303 	lsr.w	r3, r2, r3
 80075b4:	4a09      	ldr	r2, [pc, #36]	@ (80075dc <HAL_RCC_ClockConfig+0x1f8>)
 80075b6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80075b8:	4b09      	ldr	r3, [pc, #36]	@ (80075e0 <HAL_RCC_ClockConfig+0x1fc>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4618      	mov	r0, r3
 80075be:	f7fd fcc1 	bl	8004f44 <HAL_InitTick>
 80075c2:	4603      	mov	r3, r0
 80075c4:	72fb      	strb	r3, [r7, #11]

  return status;
 80075c6:	7afb      	ldrb	r3, [r7, #11]
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3710      	adds	r7, #16
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}
 80075d0:	40022000 	.word	0x40022000
 80075d4:	40021000 	.word	0x40021000
 80075d8:	08011a6c 	.word	0x08011a6c
 80075dc:	20000004 	.word	0x20000004
 80075e0:	20000044 	.word	0x20000044

080075e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b089      	sub	sp, #36	@ 0x24
 80075e8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80075ea:	2300      	movs	r3, #0
 80075ec:	61fb      	str	r3, [r7, #28]
 80075ee:	2300      	movs	r3, #0
 80075f0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80075f2:	4b3e      	ldr	r3, [pc, #248]	@ (80076ec <HAL_RCC_GetSysClockFreq+0x108>)
 80075f4:	689b      	ldr	r3, [r3, #8]
 80075f6:	f003 030c 	and.w	r3, r3, #12
 80075fa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80075fc:	4b3b      	ldr	r3, [pc, #236]	@ (80076ec <HAL_RCC_GetSysClockFreq+0x108>)
 80075fe:	68db      	ldr	r3, [r3, #12]
 8007600:	f003 0303 	and.w	r3, r3, #3
 8007604:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d005      	beq.n	8007618 <HAL_RCC_GetSysClockFreq+0x34>
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	2b0c      	cmp	r3, #12
 8007610:	d121      	bne.n	8007656 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2b01      	cmp	r3, #1
 8007616:	d11e      	bne.n	8007656 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007618:	4b34      	ldr	r3, [pc, #208]	@ (80076ec <HAL_RCC_GetSysClockFreq+0x108>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f003 0308 	and.w	r3, r3, #8
 8007620:	2b00      	cmp	r3, #0
 8007622:	d107      	bne.n	8007634 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007624:	4b31      	ldr	r3, [pc, #196]	@ (80076ec <HAL_RCC_GetSysClockFreq+0x108>)
 8007626:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800762a:	0a1b      	lsrs	r3, r3, #8
 800762c:	f003 030f 	and.w	r3, r3, #15
 8007630:	61fb      	str	r3, [r7, #28]
 8007632:	e005      	b.n	8007640 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007634:	4b2d      	ldr	r3, [pc, #180]	@ (80076ec <HAL_RCC_GetSysClockFreq+0x108>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	091b      	lsrs	r3, r3, #4
 800763a:	f003 030f 	and.w	r3, r3, #15
 800763e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007640:	4a2b      	ldr	r2, [pc, #172]	@ (80076f0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007642:	69fb      	ldr	r3, [r7, #28]
 8007644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007648:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d10d      	bne.n	800766c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007650:	69fb      	ldr	r3, [r7, #28]
 8007652:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007654:	e00a      	b.n	800766c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	2b04      	cmp	r3, #4
 800765a:	d102      	bne.n	8007662 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800765c:	4b25      	ldr	r3, [pc, #148]	@ (80076f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800765e:	61bb      	str	r3, [r7, #24]
 8007660:	e004      	b.n	800766c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	2b08      	cmp	r3, #8
 8007666:	d101      	bne.n	800766c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007668:	4b23      	ldr	r3, [pc, #140]	@ (80076f8 <HAL_RCC_GetSysClockFreq+0x114>)
 800766a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	2b0c      	cmp	r3, #12
 8007670:	d134      	bne.n	80076dc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007672:	4b1e      	ldr	r3, [pc, #120]	@ (80076ec <HAL_RCC_GetSysClockFreq+0x108>)
 8007674:	68db      	ldr	r3, [r3, #12]
 8007676:	f003 0303 	and.w	r3, r3, #3
 800767a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	2b02      	cmp	r3, #2
 8007680:	d003      	beq.n	800768a <HAL_RCC_GetSysClockFreq+0xa6>
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	2b03      	cmp	r3, #3
 8007686:	d003      	beq.n	8007690 <HAL_RCC_GetSysClockFreq+0xac>
 8007688:	e005      	b.n	8007696 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800768a:	4b1a      	ldr	r3, [pc, #104]	@ (80076f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800768c:	617b      	str	r3, [r7, #20]
      break;
 800768e:	e005      	b.n	800769c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007690:	4b19      	ldr	r3, [pc, #100]	@ (80076f8 <HAL_RCC_GetSysClockFreq+0x114>)
 8007692:	617b      	str	r3, [r7, #20]
      break;
 8007694:	e002      	b.n	800769c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007696:	69fb      	ldr	r3, [r7, #28]
 8007698:	617b      	str	r3, [r7, #20]
      break;
 800769a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800769c:	4b13      	ldr	r3, [pc, #76]	@ (80076ec <HAL_RCC_GetSysClockFreq+0x108>)
 800769e:	68db      	ldr	r3, [r3, #12]
 80076a0:	091b      	lsrs	r3, r3, #4
 80076a2:	f003 0307 	and.w	r3, r3, #7
 80076a6:	3301      	adds	r3, #1
 80076a8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80076aa:	4b10      	ldr	r3, [pc, #64]	@ (80076ec <HAL_RCC_GetSysClockFreq+0x108>)
 80076ac:	68db      	ldr	r3, [r3, #12]
 80076ae:	0a1b      	lsrs	r3, r3, #8
 80076b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076b4:	697a      	ldr	r2, [r7, #20]
 80076b6:	fb03 f202 	mul.w	r2, r3, r2
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80076c0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80076c2:	4b0a      	ldr	r3, [pc, #40]	@ (80076ec <HAL_RCC_GetSysClockFreq+0x108>)
 80076c4:	68db      	ldr	r3, [r3, #12]
 80076c6:	0e5b      	lsrs	r3, r3, #25
 80076c8:	f003 0303 	and.w	r3, r3, #3
 80076cc:	3301      	adds	r3, #1
 80076ce:	005b      	lsls	r3, r3, #1
 80076d0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80076d2:	697a      	ldr	r2, [r7, #20]
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80076da:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80076dc:	69bb      	ldr	r3, [r7, #24]
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3724      	adds	r7, #36	@ 0x24
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr
 80076ea:	bf00      	nop
 80076ec:	40021000 	.word	0x40021000
 80076f0:	08011a84 	.word	0x08011a84
 80076f4:	00f42400 	.word	0x00f42400
 80076f8:	007a1200 	.word	0x007a1200

080076fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80076fc:	b480      	push	{r7}
 80076fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007700:	4b03      	ldr	r3, [pc, #12]	@ (8007710 <HAL_RCC_GetHCLKFreq+0x14>)
 8007702:	681b      	ldr	r3, [r3, #0]
}
 8007704:	4618      	mov	r0, r3
 8007706:	46bd      	mov	sp, r7
 8007708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770c:	4770      	bx	lr
 800770e:	bf00      	nop
 8007710:	20000004 	.word	0x20000004

08007714 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007718:	f7ff fff0 	bl	80076fc <HAL_RCC_GetHCLKFreq>
 800771c:	4602      	mov	r2, r0
 800771e:	4b06      	ldr	r3, [pc, #24]	@ (8007738 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007720:	689b      	ldr	r3, [r3, #8]
 8007722:	0a1b      	lsrs	r3, r3, #8
 8007724:	f003 0307 	and.w	r3, r3, #7
 8007728:	4904      	ldr	r1, [pc, #16]	@ (800773c <HAL_RCC_GetPCLK1Freq+0x28>)
 800772a:	5ccb      	ldrb	r3, [r1, r3]
 800772c:	f003 031f 	and.w	r3, r3, #31
 8007730:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007734:	4618      	mov	r0, r3
 8007736:	bd80      	pop	{r7, pc}
 8007738:	40021000 	.word	0x40021000
 800773c:	08011a7c 	.word	0x08011a7c

08007740 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007744:	f7ff ffda 	bl	80076fc <HAL_RCC_GetHCLKFreq>
 8007748:	4602      	mov	r2, r0
 800774a:	4b06      	ldr	r3, [pc, #24]	@ (8007764 <HAL_RCC_GetPCLK2Freq+0x24>)
 800774c:	689b      	ldr	r3, [r3, #8]
 800774e:	0adb      	lsrs	r3, r3, #11
 8007750:	f003 0307 	and.w	r3, r3, #7
 8007754:	4904      	ldr	r1, [pc, #16]	@ (8007768 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007756:	5ccb      	ldrb	r3, [r1, r3]
 8007758:	f003 031f 	and.w	r3, r3, #31
 800775c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007760:	4618      	mov	r0, r3
 8007762:	bd80      	pop	{r7, pc}
 8007764:	40021000 	.word	0x40021000
 8007768:	08011a7c 	.word	0x08011a7c

0800776c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b086      	sub	sp, #24
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007774:	2300      	movs	r3, #0
 8007776:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007778:	4b2a      	ldr	r3, [pc, #168]	@ (8007824 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800777a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800777c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007780:	2b00      	cmp	r3, #0
 8007782:	d003      	beq.n	800778c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007784:	f7ff f922 	bl	80069cc <HAL_PWREx_GetVoltageRange>
 8007788:	6178      	str	r0, [r7, #20]
 800778a:	e014      	b.n	80077b6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800778c:	4b25      	ldr	r3, [pc, #148]	@ (8007824 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800778e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007790:	4a24      	ldr	r2, [pc, #144]	@ (8007824 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007792:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007796:	6593      	str	r3, [r2, #88]	@ 0x58
 8007798:	4b22      	ldr	r3, [pc, #136]	@ (8007824 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800779a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800779c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80077a0:	60fb      	str	r3, [r7, #12]
 80077a2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80077a4:	f7ff f912 	bl	80069cc <HAL_PWREx_GetVoltageRange>
 80077a8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80077aa:	4b1e      	ldr	r3, [pc, #120]	@ (8007824 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80077ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077ae:	4a1d      	ldr	r2, [pc, #116]	@ (8007824 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80077b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80077b4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80077bc:	d10b      	bne.n	80077d6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2b80      	cmp	r3, #128	@ 0x80
 80077c2:	d919      	bls.n	80077f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2ba0      	cmp	r3, #160	@ 0xa0
 80077c8:	d902      	bls.n	80077d0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80077ca:	2302      	movs	r3, #2
 80077cc:	613b      	str	r3, [r7, #16]
 80077ce:	e013      	b.n	80077f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80077d0:	2301      	movs	r3, #1
 80077d2:	613b      	str	r3, [r7, #16]
 80077d4:	e010      	b.n	80077f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2b80      	cmp	r3, #128	@ 0x80
 80077da:	d902      	bls.n	80077e2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80077dc:	2303      	movs	r3, #3
 80077de:	613b      	str	r3, [r7, #16]
 80077e0:	e00a      	b.n	80077f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2b80      	cmp	r3, #128	@ 0x80
 80077e6:	d102      	bne.n	80077ee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80077e8:	2302      	movs	r3, #2
 80077ea:	613b      	str	r3, [r7, #16]
 80077ec:	e004      	b.n	80077f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2b70      	cmp	r3, #112	@ 0x70
 80077f2:	d101      	bne.n	80077f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80077f4:	2301      	movs	r3, #1
 80077f6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80077f8:	4b0b      	ldr	r3, [pc, #44]	@ (8007828 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f023 0207 	bic.w	r2, r3, #7
 8007800:	4909      	ldr	r1, [pc, #36]	@ (8007828 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	4313      	orrs	r3, r2
 8007806:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007808:	4b07      	ldr	r3, [pc, #28]	@ (8007828 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f003 0307 	and.w	r3, r3, #7
 8007810:	693a      	ldr	r2, [r7, #16]
 8007812:	429a      	cmp	r2, r3
 8007814:	d001      	beq.n	800781a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007816:	2301      	movs	r3, #1
 8007818:	e000      	b.n	800781c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800781a:	2300      	movs	r3, #0
}
 800781c:	4618      	mov	r0, r3
 800781e:	3718      	adds	r7, #24
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}
 8007824:	40021000 	.word	0x40021000
 8007828:	40022000 	.word	0x40022000

0800782c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b086      	sub	sp, #24
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007834:	2300      	movs	r3, #0
 8007836:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007838:	2300      	movs	r3, #0
 800783a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007844:	2b00      	cmp	r3, #0
 8007846:	d041      	beq.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800784c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007850:	d02a      	beq.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007852:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007856:	d824      	bhi.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007858:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800785c:	d008      	beq.n	8007870 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800785e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007862:	d81e      	bhi.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007864:	2b00      	cmp	r3, #0
 8007866:	d00a      	beq.n	800787e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007868:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800786c:	d010      	beq.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800786e:	e018      	b.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007870:	4b86      	ldr	r3, [pc, #536]	@ (8007a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007872:	68db      	ldr	r3, [r3, #12]
 8007874:	4a85      	ldr	r2, [pc, #532]	@ (8007a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007876:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800787a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800787c:	e015      	b.n	80078aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	3304      	adds	r3, #4
 8007882:	2100      	movs	r1, #0
 8007884:	4618      	mov	r0, r3
 8007886:	f000 facb 	bl	8007e20 <RCCEx_PLLSAI1_Config>
 800788a:	4603      	mov	r3, r0
 800788c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800788e:	e00c      	b.n	80078aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	3320      	adds	r3, #32
 8007894:	2100      	movs	r1, #0
 8007896:	4618      	mov	r0, r3
 8007898:	f000 fbb6 	bl	8008008 <RCCEx_PLLSAI2_Config>
 800789c:	4603      	mov	r3, r0
 800789e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80078a0:	e003      	b.n	80078aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80078a2:	2301      	movs	r3, #1
 80078a4:	74fb      	strb	r3, [r7, #19]
      break;
 80078a6:	e000      	b.n	80078aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80078a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078aa:	7cfb      	ldrb	r3, [r7, #19]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d10b      	bne.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80078b0:	4b76      	ldr	r3, [pc, #472]	@ (8007a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80078b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078b6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80078be:	4973      	ldr	r1, [pc, #460]	@ (8007a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80078c0:	4313      	orrs	r3, r2
 80078c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80078c6:	e001      	b.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078c8:	7cfb      	ldrb	r3, [r7, #19]
 80078ca:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d041      	beq.n	800795c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80078dc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80078e0:	d02a      	beq.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80078e2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80078e6:	d824      	bhi.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80078e8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80078ec:	d008      	beq.n	8007900 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80078ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80078f2:	d81e      	bhi.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d00a      	beq.n	800790e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80078f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80078fc:	d010      	beq.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80078fe:	e018      	b.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007900:	4b62      	ldr	r3, [pc, #392]	@ (8007a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007902:	68db      	ldr	r3, [r3, #12]
 8007904:	4a61      	ldr	r2, [pc, #388]	@ (8007a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007906:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800790a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800790c:	e015      	b.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	3304      	adds	r3, #4
 8007912:	2100      	movs	r1, #0
 8007914:	4618      	mov	r0, r3
 8007916:	f000 fa83 	bl	8007e20 <RCCEx_PLLSAI1_Config>
 800791a:	4603      	mov	r3, r0
 800791c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800791e:	e00c      	b.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	3320      	adds	r3, #32
 8007924:	2100      	movs	r1, #0
 8007926:	4618      	mov	r0, r3
 8007928:	f000 fb6e 	bl	8008008 <RCCEx_PLLSAI2_Config>
 800792c:	4603      	mov	r3, r0
 800792e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007930:	e003      	b.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007932:	2301      	movs	r3, #1
 8007934:	74fb      	strb	r3, [r7, #19]
      break;
 8007936:	e000      	b.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8007938:	bf00      	nop
    }

    if(ret == HAL_OK)
 800793a:	7cfb      	ldrb	r3, [r7, #19]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d10b      	bne.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007940:	4b52      	ldr	r3, [pc, #328]	@ (8007a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007942:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007946:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800794e:	494f      	ldr	r1, [pc, #316]	@ (8007a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007950:	4313      	orrs	r3, r2
 8007952:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8007956:	e001      	b.n	800795c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007958:	7cfb      	ldrb	r3, [r7, #19]
 800795a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007964:	2b00      	cmp	r3, #0
 8007966:	f000 80a0 	beq.w	8007aaa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800796a:	2300      	movs	r3, #0
 800796c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800796e:	4b47      	ldr	r3, [pc, #284]	@ (8007a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007970:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007972:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007976:	2b00      	cmp	r3, #0
 8007978:	d101      	bne.n	800797e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800797a:	2301      	movs	r3, #1
 800797c:	e000      	b.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800797e:	2300      	movs	r3, #0
 8007980:	2b00      	cmp	r3, #0
 8007982:	d00d      	beq.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007984:	4b41      	ldr	r3, [pc, #260]	@ (8007a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007986:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007988:	4a40      	ldr	r2, [pc, #256]	@ (8007a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800798a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800798e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007990:	4b3e      	ldr	r3, [pc, #248]	@ (8007a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007992:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007994:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007998:	60bb      	str	r3, [r7, #8]
 800799a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800799c:	2301      	movs	r3, #1
 800799e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80079a0:	4b3b      	ldr	r3, [pc, #236]	@ (8007a90 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a3a      	ldr	r2, [pc, #232]	@ (8007a90 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80079a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80079aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80079ac:	f7fd fb1a 	bl	8004fe4 <HAL_GetTick>
 80079b0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80079b2:	e009      	b.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80079b4:	f7fd fb16 	bl	8004fe4 <HAL_GetTick>
 80079b8:	4602      	mov	r2, r0
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	1ad3      	subs	r3, r2, r3
 80079be:	2b02      	cmp	r3, #2
 80079c0:	d902      	bls.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80079c2:	2303      	movs	r3, #3
 80079c4:	74fb      	strb	r3, [r7, #19]
        break;
 80079c6:	e005      	b.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80079c8:	4b31      	ldr	r3, [pc, #196]	@ (8007a90 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d0ef      	beq.n	80079b4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80079d4:	7cfb      	ldrb	r3, [r7, #19]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d15c      	bne.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80079da:	4b2c      	ldr	r3, [pc, #176]	@ (8007a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80079dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80079e4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d01f      	beq.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80079f2:	697a      	ldr	r2, [r7, #20]
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d019      	beq.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80079f8:	4b24      	ldr	r3, [pc, #144]	@ (8007a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80079fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a02:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007a04:	4b21      	ldr	r3, [pc, #132]	@ (8007a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a0a:	4a20      	ldr	r2, [pc, #128]	@ (8007a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007a0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007a14:	4b1d      	ldr	r3, [pc, #116]	@ (8007a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a1a:	4a1c      	ldr	r2, [pc, #112]	@ (8007a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007a1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007a20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007a24:	4a19      	ldr	r2, [pc, #100]	@ (8007a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	f003 0301 	and.w	r3, r3, #1
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d016      	beq.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a36:	f7fd fad5 	bl	8004fe4 <HAL_GetTick>
 8007a3a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007a3c:	e00b      	b.n	8007a56 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a3e:	f7fd fad1 	bl	8004fe4 <HAL_GetTick>
 8007a42:	4602      	mov	r2, r0
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	1ad3      	subs	r3, r2, r3
 8007a48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d902      	bls.n	8007a56 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8007a50:	2303      	movs	r3, #3
 8007a52:	74fb      	strb	r3, [r7, #19]
            break;
 8007a54:	e006      	b.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007a56:	4b0d      	ldr	r3, [pc, #52]	@ (8007a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a5c:	f003 0302 	and.w	r3, r3, #2
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d0ec      	beq.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8007a64:	7cfb      	ldrb	r3, [r7, #19]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d10c      	bne.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007a6a:	4b08      	ldr	r3, [pc, #32]	@ (8007a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a70:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a7a:	4904      	ldr	r1, [pc, #16]	@ (8007a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007a82:	e009      	b.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007a84:	7cfb      	ldrb	r3, [r7, #19]
 8007a86:	74bb      	strb	r3, [r7, #18]
 8007a88:	e006      	b.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8007a8a:	bf00      	nop
 8007a8c:	40021000 	.word	0x40021000
 8007a90:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a94:	7cfb      	ldrb	r3, [r7, #19]
 8007a96:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007a98:	7c7b      	ldrb	r3, [r7, #17]
 8007a9a:	2b01      	cmp	r3, #1
 8007a9c:	d105      	bne.n	8007aaa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a9e:	4b9e      	ldr	r3, [pc, #632]	@ (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007aa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007aa2:	4a9d      	ldr	r2, [pc, #628]	@ (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007aa4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007aa8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f003 0301 	and.w	r3, r3, #1
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d00a      	beq.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007ab6:	4b98      	ldr	r3, [pc, #608]	@ (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007abc:	f023 0203 	bic.w	r2, r3, #3
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ac4:	4994      	ldr	r1, [pc, #592]	@ (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f003 0302 	and.w	r3, r3, #2
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d00a      	beq.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007ad8:	4b8f      	ldr	r3, [pc, #572]	@ (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ade:	f023 020c 	bic.w	r2, r3, #12
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ae6:	498c      	ldr	r1, [pc, #560]	@ (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f003 0304 	and.w	r3, r3, #4
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d00a      	beq.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007afa:	4b87      	ldr	r3, [pc, #540]	@ (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b00:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b08:	4983      	ldr	r1, [pc, #524]	@ (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f003 0308 	and.w	r3, r3, #8
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d00a      	beq.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007b1c:	4b7e      	ldr	r3, [pc, #504]	@ (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b22:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b2a:	497b      	ldr	r1, [pc, #492]	@ (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f003 0310 	and.w	r3, r3, #16
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d00a      	beq.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007b3e:	4b76      	ldr	r3, [pc, #472]	@ (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b44:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b4c:	4972      	ldr	r1, [pc, #456]	@ (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f003 0320 	and.w	r3, r3, #32
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d00a      	beq.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007b60:	4b6d      	ldr	r3, [pc, #436]	@ (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b66:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b6e:	496a      	ldr	r1, [pc, #424]	@ (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007b70:	4313      	orrs	r3, r2
 8007b72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d00a      	beq.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007b82:	4b65      	ldr	r3, [pc, #404]	@ (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b88:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b90:	4961      	ldr	r1, [pc, #388]	@ (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007b92:	4313      	orrs	r3, r2
 8007b94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d00a      	beq.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007ba4:	4b5c      	ldr	r3, [pc, #368]	@ (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007baa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007bb2:	4959      	ldr	r1, [pc, #356]	@ (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d00a      	beq.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007bc6:	4b54      	ldr	r3, [pc, #336]	@ (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bcc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bd4:	4950      	ldr	r1, [pc, #320]	@ (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d00a      	beq.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007be8:	4b4b      	ldr	r3, [pc, #300]	@ (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bee:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bf6:	4948      	ldr	r1, [pc, #288]	@ (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d00a      	beq.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007c0a:	4b43      	ldr	r3, [pc, #268]	@ (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c10:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c18:	493f      	ldr	r1, [pc, #252]	@ (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d028      	beq.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007c2c:	4b3a      	ldr	r3, [pc, #232]	@ (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c32:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c3a:	4937      	ldr	r1, [pc, #220]	@ (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c46:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007c4a:	d106      	bne.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007c4c:	4b32      	ldr	r3, [pc, #200]	@ (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007c4e:	68db      	ldr	r3, [r3, #12]
 8007c50:	4a31      	ldr	r2, [pc, #196]	@ (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007c52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007c56:	60d3      	str	r3, [r2, #12]
 8007c58:	e011      	b.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c5e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007c62:	d10c      	bne.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	3304      	adds	r3, #4
 8007c68:	2101      	movs	r1, #1
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f000 f8d8 	bl	8007e20 <RCCEx_PLLSAI1_Config>
 8007c70:	4603      	mov	r3, r0
 8007c72:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007c74:	7cfb      	ldrb	r3, [r7, #19]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d001      	beq.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8007c7a:	7cfb      	ldrb	r3, [r7, #19]
 8007c7c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d028      	beq.n	8007cdc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007c8a:	4b23      	ldr	r3, [pc, #140]	@ (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c90:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c98:	491f      	ldr	r1, [pc, #124]	@ (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ca4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007ca8:	d106      	bne.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007caa:	4b1b      	ldr	r3, [pc, #108]	@ (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007cac:	68db      	ldr	r3, [r3, #12]
 8007cae:	4a1a      	ldr	r2, [pc, #104]	@ (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007cb0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007cb4:	60d3      	str	r3, [r2, #12]
 8007cb6:	e011      	b.n	8007cdc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007cbc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007cc0:	d10c      	bne.n	8007cdc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	3304      	adds	r3, #4
 8007cc6:	2101      	movs	r1, #1
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f000 f8a9 	bl	8007e20 <RCCEx_PLLSAI1_Config>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007cd2:	7cfb      	ldrb	r3, [r7, #19]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d001      	beq.n	8007cdc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8007cd8:	7cfb      	ldrb	r3, [r7, #19]
 8007cda:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d02b      	beq.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007ce8:	4b0b      	ldr	r3, [pc, #44]	@ (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cee:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007cf6:	4908      	ldr	r1, [pc, #32]	@ (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d02:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007d06:	d109      	bne.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d08:	4b03      	ldr	r3, [pc, #12]	@ (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007d0a:	68db      	ldr	r3, [r3, #12]
 8007d0c:	4a02      	ldr	r2, [pc, #8]	@ (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007d0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007d12:	60d3      	str	r3, [r2, #12]
 8007d14:	e014      	b.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8007d16:	bf00      	nop
 8007d18:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d20:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007d24:	d10c      	bne.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	3304      	adds	r3, #4
 8007d2a:	2101      	movs	r1, #1
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f000 f877 	bl	8007e20 <RCCEx_PLLSAI1_Config>
 8007d32:	4603      	mov	r3, r0
 8007d34:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007d36:	7cfb      	ldrb	r3, [r7, #19]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d001      	beq.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8007d3c:	7cfb      	ldrb	r3, [r7, #19]
 8007d3e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d02f      	beq.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007d4c:	4b2b      	ldr	r3, [pc, #172]	@ (8007dfc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d52:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007d5a:	4928      	ldr	r1, [pc, #160]	@ (8007dfc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007d66:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007d6a:	d10d      	bne.n	8007d88 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	3304      	adds	r3, #4
 8007d70:	2102      	movs	r1, #2
 8007d72:	4618      	mov	r0, r3
 8007d74:	f000 f854 	bl	8007e20 <RCCEx_PLLSAI1_Config>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007d7c:	7cfb      	ldrb	r3, [r7, #19]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d014      	beq.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8007d82:	7cfb      	ldrb	r3, [r7, #19]
 8007d84:	74bb      	strb	r3, [r7, #18]
 8007d86:	e011      	b.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007d8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d90:	d10c      	bne.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	3320      	adds	r3, #32
 8007d96:	2102      	movs	r1, #2
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f000 f935 	bl	8008008 <RCCEx_PLLSAI2_Config>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007da2:	7cfb      	ldrb	r3, [r7, #19]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d001      	beq.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8007da8:	7cfb      	ldrb	r3, [r7, #19]
 8007daa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d00a      	beq.n	8007dce <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007db8:	4b10      	ldr	r3, [pc, #64]	@ (8007dfc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007dbe:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007dc6:	490d      	ldr	r1, [pc, #52]	@ (8007dfc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d00b      	beq.n	8007df2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007dda:	4b08      	ldr	r3, [pc, #32]	@ (8007dfc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007de0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007dea:	4904      	ldr	r1, [pc, #16]	@ (8007dfc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007dec:	4313      	orrs	r3, r2
 8007dee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007df2:	7cbb      	ldrb	r3, [r7, #18]
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3718      	adds	r7, #24
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}
 8007dfc:	40021000 	.word	0x40021000

08007e00 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8007e00:	b480      	push	{r7}
 8007e02:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8007e04:	4b05      	ldr	r3, [pc, #20]	@ (8007e1c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4a04      	ldr	r2, [pc, #16]	@ (8007e1c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8007e0a:	f043 0304 	orr.w	r3, r3, #4
 8007e0e:	6013      	str	r3, [r2, #0]
}
 8007e10:	bf00      	nop
 8007e12:	46bd      	mov	sp, r7
 8007e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e18:	4770      	bx	lr
 8007e1a:	bf00      	nop
 8007e1c:	40021000 	.word	0x40021000

08007e20 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b084      	sub	sp, #16
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
 8007e28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007e2e:	4b75      	ldr	r3, [pc, #468]	@ (8008004 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007e30:	68db      	ldr	r3, [r3, #12]
 8007e32:	f003 0303 	and.w	r3, r3, #3
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d018      	beq.n	8007e6c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007e3a:	4b72      	ldr	r3, [pc, #456]	@ (8008004 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007e3c:	68db      	ldr	r3, [r3, #12]
 8007e3e:	f003 0203 	and.w	r2, r3, #3
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	429a      	cmp	r2, r3
 8007e48:	d10d      	bne.n	8007e66 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
       ||
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d009      	beq.n	8007e66 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007e52:	4b6c      	ldr	r3, [pc, #432]	@ (8008004 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007e54:	68db      	ldr	r3, [r3, #12]
 8007e56:	091b      	lsrs	r3, r3, #4
 8007e58:	f003 0307 	and.w	r3, r3, #7
 8007e5c:	1c5a      	adds	r2, r3, #1
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	685b      	ldr	r3, [r3, #4]
       ||
 8007e62:	429a      	cmp	r2, r3
 8007e64:	d047      	beq.n	8007ef6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007e66:	2301      	movs	r3, #1
 8007e68:	73fb      	strb	r3, [r7, #15]
 8007e6a:	e044      	b.n	8007ef6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	2b03      	cmp	r3, #3
 8007e72:	d018      	beq.n	8007ea6 <RCCEx_PLLSAI1_Config+0x86>
 8007e74:	2b03      	cmp	r3, #3
 8007e76:	d825      	bhi.n	8007ec4 <RCCEx_PLLSAI1_Config+0xa4>
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	d002      	beq.n	8007e82 <RCCEx_PLLSAI1_Config+0x62>
 8007e7c:	2b02      	cmp	r3, #2
 8007e7e:	d009      	beq.n	8007e94 <RCCEx_PLLSAI1_Config+0x74>
 8007e80:	e020      	b.n	8007ec4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007e82:	4b60      	ldr	r3, [pc, #384]	@ (8008004 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f003 0302 	and.w	r3, r3, #2
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d11d      	bne.n	8007eca <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8007e8e:	2301      	movs	r3, #1
 8007e90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007e92:	e01a      	b.n	8007eca <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007e94:	4b5b      	ldr	r3, [pc, #364]	@ (8008004 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d116      	bne.n	8007ece <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007ea4:	e013      	b.n	8007ece <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007ea6:	4b57      	ldr	r3, [pc, #348]	@ (8008004 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d10f      	bne.n	8007ed2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007eb2:	4b54      	ldr	r3, [pc, #336]	@ (8008004 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d109      	bne.n	8007ed2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007ec2:	e006      	b.n	8007ed2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	73fb      	strb	r3, [r7, #15]
      break;
 8007ec8:	e004      	b.n	8007ed4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007eca:	bf00      	nop
 8007ecc:	e002      	b.n	8007ed4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007ece:	bf00      	nop
 8007ed0:	e000      	b.n	8007ed4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007ed2:	bf00      	nop
    }

    if(status == HAL_OK)
 8007ed4:	7bfb      	ldrb	r3, [r7, #15]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d10d      	bne.n	8007ef6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007eda:	4b4a      	ldr	r3, [pc, #296]	@ (8008004 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007edc:	68db      	ldr	r3, [r3, #12]
 8007ede:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6819      	ldr	r1, [r3, #0]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	3b01      	subs	r3, #1
 8007eec:	011b      	lsls	r3, r3, #4
 8007eee:	430b      	orrs	r3, r1
 8007ef0:	4944      	ldr	r1, [pc, #272]	@ (8008004 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007ef6:	7bfb      	ldrb	r3, [r7, #15]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d17d      	bne.n	8007ff8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007efc:	4b41      	ldr	r3, [pc, #260]	@ (8008004 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	4a40      	ldr	r2, [pc, #256]	@ (8008004 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007f02:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007f06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f08:	f7fd f86c 	bl	8004fe4 <HAL_GetTick>
 8007f0c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007f0e:	e009      	b.n	8007f24 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007f10:	f7fd f868 	bl	8004fe4 <HAL_GetTick>
 8007f14:	4602      	mov	r2, r0
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	1ad3      	subs	r3, r2, r3
 8007f1a:	2b02      	cmp	r3, #2
 8007f1c:	d902      	bls.n	8007f24 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007f1e:	2303      	movs	r3, #3
 8007f20:	73fb      	strb	r3, [r7, #15]
        break;
 8007f22:	e005      	b.n	8007f30 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007f24:	4b37      	ldr	r3, [pc, #220]	@ (8008004 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d1ef      	bne.n	8007f10 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007f30:	7bfb      	ldrb	r3, [r7, #15]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d160      	bne.n	8007ff8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d111      	bne.n	8007f60 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007f3c:	4b31      	ldr	r3, [pc, #196]	@ (8008004 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007f3e:	691b      	ldr	r3, [r3, #16]
 8007f40:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8007f44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007f48:	687a      	ldr	r2, [r7, #4]
 8007f4a:	6892      	ldr	r2, [r2, #8]
 8007f4c:	0211      	lsls	r1, r2, #8
 8007f4e:	687a      	ldr	r2, [r7, #4]
 8007f50:	68d2      	ldr	r2, [r2, #12]
 8007f52:	0912      	lsrs	r2, r2, #4
 8007f54:	0452      	lsls	r2, r2, #17
 8007f56:	430a      	orrs	r2, r1
 8007f58:	492a      	ldr	r1, [pc, #168]	@ (8008004 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007f5a:	4313      	orrs	r3, r2
 8007f5c:	610b      	str	r3, [r1, #16]
 8007f5e:	e027      	b.n	8007fb0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	2b01      	cmp	r3, #1
 8007f64:	d112      	bne.n	8007f8c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007f66:	4b27      	ldr	r3, [pc, #156]	@ (8008004 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007f68:	691b      	ldr	r3, [r3, #16]
 8007f6a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8007f6e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007f72:	687a      	ldr	r2, [r7, #4]
 8007f74:	6892      	ldr	r2, [r2, #8]
 8007f76:	0211      	lsls	r1, r2, #8
 8007f78:	687a      	ldr	r2, [r7, #4]
 8007f7a:	6912      	ldr	r2, [r2, #16]
 8007f7c:	0852      	lsrs	r2, r2, #1
 8007f7e:	3a01      	subs	r2, #1
 8007f80:	0552      	lsls	r2, r2, #21
 8007f82:	430a      	orrs	r2, r1
 8007f84:	491f      	ldr	r1, [pc, #124]	@ (8008004 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007f86:	4313      	orrs	r3, r2
 8007f88:	610b      	str	r3, [r1, #16]
 8007f8a:	e011      	b.n	8007fb0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007f8c:	4b1d      	ldr	r3, [pc, #116]	@ (8008004 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007f8e:	691b      	ldr	r3, [r3, #16]
 8007f90:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8007f94:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007f98:	687a      	ldr	r2, [r7, #4]
 8007f9a:	6892      	ldr	r2, [r2, #8]
 8007f9c:	0211      	lsls	r1, r2, #8
 8007f9e:	687a      	ldr	r2, [r7, #4]
 8007fa0:	6952      	ldr	r2, [r2, #20]
 8007fa2:	0852      	lsrs	r2, r2, #1
 8007fa4:	3a01      	subs	r2, #1
 8007fa6:	0652      	lsls	r2, r2, #25
 8007fa8:	430a      	orrs	r2, r1
 8007faa:	4916      	ldr	r1, [pc, #88]	@ (8008004 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007fac:	4313      	orrs	r3, r2
 8007fae:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007fb0:	4b14      	ldr	r3, [pc, #80]	@ (8008004 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	4a13      	ldr	r2, [pc, #76]	@ (8008004 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007fb6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007fba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fbc:	f7fd f812 	bl	8004fe4 <HAL_GetTick>
 8007fc0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007fc2:	e009      	b.n	8007fd8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007fc4:	f7fd f80e 	bl	8004fe4 <HAL_GetTick>
 8007fc8:	4602      	mov	r2, r0
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	1ad3      	subs	r3, r2, r3
 8007fce:	2b02      	cmp	r3, #2
 8007fd0:	d902      	bls.n	8007fd8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8007fd2:	2303      	movs	r3, #3
 8007fd4:	73fb      	strb	r3, [r7, #15]
          break;
 8007fd6:	e005      	b.n	8007fe4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007fd8:	4b0a      	ldr	r3, [pc, #40]	@ (8008004 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d0ef      	beq.n	8007fc4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8007fe4:	7bfb      	ldrb	r3, [r7, #15]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d106      	bne.n	8007ff8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007fea:	4b06      	ldr	r3, [pc, #24]	@ (8008004 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007fec:	691a      	ldr	r2, [r3, #16]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	699b      	ldr	r3, [r3, #24]
 8007ff2:	4904      	ldr	r1, [pc, #16]	@ (8008004 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007ff4:	4313      	orrs	r3, r2
 8007ff6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3710      	adds	r7, #16
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}
 8008002:	bf00      	nop
 8008004:	40021000 	.word	0x40021000

08008008 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b084      	sub	sp, #16
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
 8008010:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008012:	2300      	movs	r3, #0
 8008014:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008016:	4b6a      	ldr	r3, [pc, #424]	@ (80081c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008018:	68db      	ldr	r3, [r3, #12]
 800801a:	f003 0303 	and.w	r3, r3, #3
 800801e:	2b00      	cmp	r3, #0
 8008020:	d018      	beq.n	8008054 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8008022:	4b67      	ldr	r3, [pc, #412]	@ (80081c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008024:	68db      	ldr	r3, [r3, #12]
 8008026:	f003 0203 	and.w	r2, r3, #3
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	429a      	cmp	r2, r3
 8008030:	d10d      	bne.n	800804e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
       ||
 8008036:	2b00      	cmp	r3, #0
 8008038:	d009      	beq.n	800804e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800803a:	4b61      	ldr	r3, [pc, #388]	@ (80081c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800803c:	68db      	ldr	r3, [r3, #12]
 800803e:	091b      	lsrs	r3, r3, #4
 8008040:	f003 0307 	and.w	r3, r3, #7
 8008044:	1c5a      	adds	r2, r3, #1
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	685b      	ldr	r3, [r3, #4]
       ||
 800804a:	429a      	cmp	r2, r3
 800804c:	d047      	beq.n	80080de <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800804e:	2301      	movs	r3, #1
 8008050:	73fb      	strb	r3, [r7, #15]
 8008052:	e044      	b.n	80080de <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	2b03      	cmp	r3, #3
 800805a:	d018      	beq.n	800808e <RCCEx_PLLSAI2_Config+0x86>
 800805c:	2b03      	cmp	r3, #3
 800805e:	d825      	bhi.n	80080ac <RCCEx_PLLSAI2_Config+0xa4>
 8008060:	2b01      	cmp	r3, #1
 8008062:	d002      	beq.n	800806a <RCCEx_PLLSAI2_Config+0x62>
 8008064:	2b02      	cmp	r3, #2
 8008066:	d009      	beq.n	800807c <RCCEx_PLLSAI2_Config+0x74>
 8008068:	e020      	b.n	80080ac <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800806a:	4b55      	ldr	r3, [pc, #340]	@ (80081c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f003 0302 	and.w	r3, r3, #2
 8008072:	2b00      	cmp	r3, #0
 8008074:	d11d      	bne.n	80080b2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8008076:	2301      	movs	r3, #1
 8008078:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800807a:	e01a      	b.n	80080b2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800807c:	4b50      	ldr	r3, [pc, #320]	@ (80081c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008084:	2b00      	cmp	r3, #0
 8008086:	d116      	bne.n	80080b6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8008088:	2301      	movs	r3, #1
 800808a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800808c:	e013      	b.n	80080b6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800808e:	4b4c      	ldr	r3, [pc, #304]	@ (80081c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008096:	2b00      	cmp	r3, #0
 8008098:	d10f      	bne.n	80080ba <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800809a:	4b49      	ldr	r3, [pc, #292]	@ (80081c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d109      	bne.n	80080ba <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80080a6:	2301      	movs	r3, #1
 80080a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80080aa:	e006      	b.n	80080ba <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80080ac:	2301      	movs	r3, #1
 80080ae:	73fb      	strb	r3, [r7, #15]
      break;
 80080b0:	e004      	b.n	80080bc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80080b2:	bf00      	nop
 80080b4:	e002      	b.n	80080bc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80080b6:	bf00      	nop
 80080b8:	e000      	b.n	80080bc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80080ba:	bf00      	nop
    }

    if(status == HAL_OK)
 80080bc:	7bfb      	ldrb	r3, [r7, #15]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d10d      	bne.n	80080de <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80080c2:	4b3f      	ldr	r3, [pc, #252]	@ (80081c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80080c4:	68db      	ldr	r3, [r3, #12]
 80080c6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6819      	ldr	r1, [r3, #0]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	685b      	ldr	r3, [r3, #4]
 80080d2:	3b01      	subs	r3, #1
 80080d4:	011b      	lsls	r3, r3, #4
 80080d6:	430b      	orrs	r3, r1
 80080d8:	4939      	ldr	r1, [pc, #228]	@ (80081c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80080da:	4313      	orrs	r3, r2
 80080dc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80080de:	7bfb      	ldrb	r3, [r7, #15]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d167      	bne.n	80081b4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80080e4:	4b36      	ldr	r3, [pc, #216]	@ (80081c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4a35      	ldr	r2, [pc, #212]	@ (80081c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80080ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80080ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080f0:	f7fc ff78 	bl	8004fe4 <HAL_GetTick>
 80080f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80080f6:	e009      	b.n	800810c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80080f8:	f7fc ff74 	bl	8004fe4 <HAL_GetTick>
 80080fc:	4602      	mov	r2, r0
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	1ad3      	subs	r3, r2, r3
 8008102:	2b02      	cmp	r3, #2
 8008104:	d902      	bls.n	800810c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8008106:	2303      	movs	r3, #3
 8008108:	73fb      	strb	r3, [r7, #15]
        break;
 800810a:	e005      	b.n	8008118 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800810c:	4b2c      	ldr	r3, [pc, #176]	@ (80081c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008114:	2b00      	cmp	r3, #0
 8008116:	d1ef      	bne.n	80080f8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8008118:	7bfb      	ldrb	r3, [r7, #15]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d14a      	bne.n	80081b4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d111      	bne.n	8008148 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008124:	4b26      	ldr	r3, [pc, #152]	@ (80081c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008126:	695b      	ldr	r3, [r3, #20]
 8008128:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800812c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008130:	687a      	ldr	r2, [r7, #4]
 8008132:	6892      	ldr	r2, [r2, #8]
 8008134:	0211      	lsls	r1, r2, #8
 8008136:	687a      	ldr	r2, [r7, #4]
 8008138:	68d2      	ldr	r2, [r2, #12]
 800813a:	0912      	lsrs	r2, r2, #4
 800813c:	0452      	lsls	r2, r2, #17
 800813e:	430a      	orrs	r2, r1
 8008140:	491f      	ldr	r1, [pc, #124]	@ (80081c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008142:	4313      	orrs	r3, r2
 8008144:	614b      	str	r3, [r1, #20]
 8008146:	e011      	b.n	800816c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008148:	4b1d      	ldr	r3, [pc, #116]	@ (80081c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800814a:	695b      	ldr	r3, [r3, #20]
 800814c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8008150:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8008154:	687a      	ldr	r2, [r7, #4]
 8008156:	6892      	ldr	r2, [r2, #8]
 8008158:	0211      	lsls	r1, r2, #8
 800815a:	687a      	ldr	r2, [r7, #4]
 800815c:	6912      	ldr	r2, [r2, #16]
 800815e:	0852      	lsrs	r2, r2, #1
 8008160:	3a01      	subs	r2, #1
 8008162:	0652      	lsls	r2, r2, #25
 8008164:	430a      	orrs	r2, r1
 8008166:	4916      	ldr	r1, [pc, #88]	@ (80081c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008168:	4313      	orrs	r3, r2
 800816a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800816c:	4b14      	ldr	r3, [pc, #80]	@ (80081c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4a13      	ldr	r2, [pc, #76]	@ (80081c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008172:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008176:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008178:	f7fc ff34 	bl	8004fe4 <HAL_GetTick>
 800817c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800817e:	e009      	b.n	8008194 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008180:	f7fc ff30 	bl	8004fe4 <HAL_GetTick>
 8008184:	4602      	mov	r2, r0
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	1ad3      	subs	r3, r2, r3
 800818a:	2b02      	cmp	r3, #2
 800818c:	d902      	bls.n	8008194 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800818e:	2303      	movs	r3, #3
 8008190:	73fb      	strb	r3, [r7, #15]
          break;
 8008192:	e005      	b.n	80081a0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008194:	4b0a      	ldr	r3, [pc, #40]	@ (80081c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800819c:	2b00      	cmp	r3, #0
 800819e:	d0ef      	beq.n	8008180 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80081a0:	7bfb      	ldrb	r3, [r7, #15]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d106      	bne.n	80081b4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80081a6:	4b06      	ldr	r3, [pc, #24]	@ (80081c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80081a8:	695a      	ldr	r2, [r3, #20]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	695b      	ldr	r3, [r3, #20]
 80081ae:	4904      	ldr	r1, [pc, #16]	@ (80081c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80081b0:	4313      	orrs	r3, r2
 80081b2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80081b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3710      	adds	r7, #16
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}
 80081be:	bf00      	nop
 80081c0:	40021000 	.word	0x40021000

080081c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b084      	sub	sp, #16
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d101      	bne.n	80081d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80081d2:	2301      	movs	r3, #1
 80081d4:	e095      	b.n	8008302 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d108      	bne.n	80081f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	685b      	ldr	r3, [r3, #4]
 80081e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80081e6:	d009      	beq.n	80081fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2200      	movs	r2, #0
 80081ec:	61da      	str	r2, [r3, #28]
 80081ee:	e005      	b.n	80081fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2200      	movs	r2, #0
 80081f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2200      	movs	r2, #0
 80081fa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2200      	movs	r2, #0
 8008200:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008208:	b2db      	uxtb	r3, r3
 800820a:	2b00      	cmp	r3, #0
 800820c:	d106      	bne.n	800821c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2200      	movs	r2, #0
 8008212:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f000 f877 	bl	800830a <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2202      	movs	r2, #2
 8008220:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	681a      	ldr	r2, [r3, #0]
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008232:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	68db      	ldr	r3, [r3, #12]
 8008238:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800823c:	d902      	bls.n	8008244 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800823e:	2300      	movs	r3, #0
 8008240:	60fb      	str	r3, [r7, #12]
 8008242:	e002      	b.n	800824a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008244:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008248:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	68db      	ldr	r3, [r3, #12]
 800824e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8008252:	d007      	beq.n	8008264 <HAL_SPI_Init+0xa0>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	68db      	ldr	r3, [r3, #12]
 8008258:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800825c:	d002      	beq.n	8008264 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2200      	movs	r2, #0
 8008262:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	685b      	ldr	r3, [r3, #4]
 8008268:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	689b      	ldr	r3, [r3, #8]
 8008270:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008274:	431a      	orrs	r2, r3
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	691b      	ldr	r3, [r3, #16]
 800827a:	f003 0302 	and.w	r3, r3, #2
 800827e:	431a      	orrs	r2, r3
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	695b      	ldr	r3, [r3, #20]
 8008284:	f003 0301 	and.w	r3, r3, #1
 8008288:	431a      	orrs	r2, r3
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	699b      	ldr	r3, [r3, #24]
 800828e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008292:	431a      	orrs	r2, r3
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	69db      	ldr	r3, [r3, #28]
 8008298:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800829c:	431a      	orrs	r2, r3
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6a1b      	ldr	r3, [r3, #32]
 80082a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082a6:	ea42 0103 	orr.w	r1, r2, r3
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082ae:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	430a      	orrs	r2, r1
 80082b8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	699b      	ldr	r3, [r3, #24]
 80082be:	0c1b      	lsrs	r3, r3, #16
 80082c0:	f003 0204 	and.w	r2, r3, #4
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082c8:	f003 0310 	and.w	r3, r3, #16
 80082cc:	431a      	orrs	r2, r3
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082d2:	f003 0308 	and.w	r3, r3, #8
 80082d6:	431a      	orrs	r2, r3
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	68db      	ldr	r3, [r3, #12]
 80082dc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80082e0:	ea42 0103 	orr.w	r1, r2, r3
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	430a      	orrs	r2, r1
 80082f0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2200      	movs	r2, #0
 80082f6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2201      	movs	r2, #1
 80082fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8008300:	2300      	movs	r3, #0
}
 8008302:	4618      	mov	r0, r3
 8008304:	3710      	adds	r7, #16
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}

0800830a <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800830a:	b480      	push	{r7}
 800830c:	b083      	sub	sp, #12
 800830e:	af00      	add	r7, sp, #0
 8008310:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8008312:	bf00      	nop
 8008314:	370c      	adds	r7, #12
 8008316:	46bd      	mov	sp, r7
 8008318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831c:	4770      	bx	lr

0800831e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800831e:	b580      	push	{r7, lr}
 8008320:	b08a      	sub	sp, #40	@ 0x28
 8008322:	af00      	add	r7, sp, #0
 8008324:	60f8      	str	r0, [r7, #12]
 8008326:	60b9      	str	r1, [r7, #8]
 8008328:	607a      	str	r2, [r7, #4]
 800832a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800832c:	2301      	movs	r3, #1
 800832e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008330:	f7fc fe58 	bl	8004fe4 <HAL_GetTick>
 8008334:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800833c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	685b      	ldr	r3, [r3, #4]
 8008342:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8008344:	887b      	ldrh	r3, [r7, #2]
 8008346:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8008348:	887b      	ldrh	r3, [r7, #2]
 800834a:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800834c:	7ffb      	ldrb	r3, [r7, #31]
 800834e:	2b01      	cmp	r3, #1
 8008350:	d00c      	beq.n	800836c <HAL_SPI_TransmitReceive+0x4e>
 8008352:	69bb      	ldr	r3, [r7, #24]
 8008354:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008358:	d106      	bne.n	8008368 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	689b      	ldr	r3, [r3, #8]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d102      	bne.n	8008368 <HAL_SPI_TransmitReceive+0x4a>
 8008362:	7ffb      	ldrb	r3, [r7, #31]
 8008364:	2b04      	cmp	r3, #4
 8008366:	d001      	beq.n	800836c <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8008368:	2302      	movs	r3, #2
 800836a:	e1f3      	b.n	8008754 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d005      	beq.n	800837e <HAL_SPI_TransmitReceive+0x60>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d002      	beq.n	800837e <HAL_SPI_TransmitReceive+0x60>
 8008378:	887b      	ldrh	r3, [r7, #2]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d101      	bne.n	8008382 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800837e:	2301      	movs	r3, #1
 8008380:	e1e8      	b.n	8008754 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008388:	2b01      	cmp	r3, #1
 800838a:	d101      	bne.n	8008390 <HAL_SPI_TransmitReceive+0x72>
 800838c:	2302      	movs	r3, #2
 800838e:	e1e1      	b.n	8008754 <HAL_SPI_TransmitReceive+0x436>
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	2201      	movs	r2, #1
 8008394:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800839e:	b2db      	uxtb	r3, r3
 80083a0:	2b04      	cmp	r3, #4
 80083a2:	d003      	beq.n	80083ac <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	2205      	movs	r2, #5
 80083a8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2200      	movs	r2, #0
 80083b0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	687a      	ldr	r2, [r7, #4]
 80083b6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	887a      	ldrh	r2, [r7, #2]
 80083bc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	887a      	ldrh	r2, [r7, #2]
 80083c4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	68ba      	ldr	r2, [r7, #8]
 80083cc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	887a      	ldrh	r2, [r7, #2]
 80083d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	887a      	ldrh	r2, [r7, #2]
 80083d8:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	2200      	movs	r2, #0
 80083de:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	2200      	movs	r2, #0
 80083e4:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	68db      	ldr	r3, [r3, #12]
 80083ea:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80083ee:	d802      	bhi.n	80083f6 <HAL_SPI_TransmitReceive+0xd8>
 80083f0:	8abb      	ldrh	r3, [r7, #20]
 80083f2:	2b01      	cmp	r3, #1
 80083f4:	d908      	bls.n	8008408 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	685a      	ldr	r2, [r3, #4]
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008404:	605a      	str	r2, [r3, #4]
 8008406:	e007      	b.n	8008418 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	685a      	ldr	r2, [r3, #4]
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008416:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008422:	2b40      	cmp	r3, #64	@ 0x40
 8008424:	d007      	beq.n	8008436 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	681a      	ldr	r2, [r3, #0]
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008434:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	68db      	ldr	r3, [r3, #12]
 800843a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800843e:	f240 8083 	bls.w	8008548 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	685b      	ldr	r3, [r3, #4]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d002      	beq.n	8008450 <HAL_SPI_TransmitReceive+0x132>
 800844a:	8afb      	ldrh	r3, [r7, #22]
 800844c:	2b01      	cmp	r3, #1
 800844e:	d16f      	bne.n	8008530 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008454:	881a      	ldrh	r2, [r3, #0]
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008460:	1c9a      	adds	r2, r3, #2
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800846a:	b29b      	uxth	r3, r3
 800846c:	3b01      	subs	r3, #1
 800846e:	b29a      	uxth	r2, r3
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008474:	e05c      	b.n	8008530 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	689b      	ldr	r3, [r3, #8]
 800847c:	f003 0302 	and.w	r3, r3, #2
 8008480:	2b02      	cmp	r3, #2
 8008482:	d11b      	bne.n	80084bc <HAL_SPI_TransmitReceive+0x19e>
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008488:	b29b      	uxth	r3, r3
 800848a:	2b00      	cmp	r3, #0
 800848c:	d016      	beq.n	80084bc <HAL_SPI_TransmitReceive+0x19e>
 800848e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008490:	2b01      	cmp	r3, #1
 8008492:	d113      	bne.n	80084bc <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008498:	881a      	ldrh	r2, [r3, #0]
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084a4:	1c9a      	adds	r2, r3, #2
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80084ae:	b29b      	uxth	r3, r3
 80084b0:	3b01      	subs	r3, #1
 80084b2:	b29a      	uxth	r2, r3
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80084b8:	2300      	movs	r3, #0
 80084ba:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	689b      	ldr	r3, [r3, #8]
 80084c2:	f003 0301 	and.w	r3, r3, #1
 80084c6:	2b01      	cmp	r3, #1
 80084c8:	d11c      	bne.n	8008504 <HAL_SPI_TransmitReceive+0x1e6>
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80084d0:	b29b      	uxth	r3, r3
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d016      	beq.n	8008504 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	68da      	ldr	r2, [r3, #12]
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084e0:	b292      	uxth	r2, r2
 80084e2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084e8:	1c9a      	adds	r2, r3, #2
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80084f4:	b29b      	uxth	r3, r3
 80084f6:	3b01      	subs	r3, #1
 80084f8:	b29a      	uxth	r2, r3
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008500:	2301      	movs	r3, #1
 8008502:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008504:	f7fc fd6e 	bl	8004fe4 <HAL_GetTick>
 8008508:	4602      	mov	r2, r0
 800850a:	6a3b      	ldr	r3, [r7, #32]
 800850c:	1ad3      	subs	r3, r2, r3
 800850e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008510:	429a      	cmp	r2, r3
 8008512:	d80d      	bhi.n	8008530 <HAL_SPI_TransmitReceive+0x212>
 8008514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800851a:	d009      	beq.n	8008530 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	2201      	movs	r2, #1
 8008520:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	2200      	movs	r2, #0
 8008528:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800852c:	2303      	movs	r3, #3
 800852e:	e111      	b.n	8008754 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008534:	b29b      	uxth	r3, r3
 8008536:	2b00      	cmp	r3, #0
 8008538:	d19d      	bne.n	8008476 <HAL_SPI_TransmitReceive+0x158>
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008540:	b29b      	uxth	r3, r3
 8008542:	2b00      	cmp	r3, #0
 8008544:	d197      	bne.n	8008476 <HAL_SPI_TransmitReceive+0x158>
 8008546:	e0e5      	b.n	8008714 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d003      	beq.n	8008558 <HAL_SPI_TransmitReceive+0x23a>
 8008550:	8afb      	ldrh	r3, [r7, #22]
 8008552:	2b01      	cmp	r3, #1
 8008554:	f040 80d1 	bne.w	80086fa <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800855c:	b29b      	uxth	r3, r3
 800855e:	2b01      	cmp	r3, #1
 8008560:	d912      	bls.n	8008588 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008566:	881a      	ldrh	r2, [r3, #0]
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008572:	1c9a      	adds	r2, r3, #2
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800857c:	b29b      	uxth	r3, r3
 800857e:	3b02      	subs	r3, #2
 8008580:	b29a      	uxth	r2, r3
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008586:	e0b8      	b.n	80086fa <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	330c      	adds	r3, #12
 8008592:	7812      	ldrb	r2, [r2, #0]
 8008594:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800859a:	1c5a      	adds	r2, r3, #1
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80085a4:	b29b      	uxth	r3, r3
 80085a6:	3b01      	subs	r3, #1
 80085a8:	b29a      	uxth	r2, r3
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80085ae:	e0a4      	b.n	80086fa <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	689b      	ldr	r3, [r3, #8]
 80085b6:	f003 0302 	and.w	r3, r3, #2
 80085ba:	2b02      	cmp	r3, #2
 80085bc:	d134      	bne.n	8008628 <HAL_SPI_TransmitReceive+0x30a>
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80085c2:	b29b      	uxth	r3, r3
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d02f      	beq.n	8008628 <HAL_SPI_TransmitReceive+0x30a>
 80085c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085ca:	2b01      	cmp	r3, #1
 80085cc:	d12c      	bne.n	8008628 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80085d2:	b29b      	uxth	r3, r3
 80085d4:	2b01      	cmp	r3, #1
 80085d6:	d912      	bls.n	80085fe <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085dc:	881a      	ldrh	r2, [r3, #0]
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085e8:	1c9a      	adds	r2, r3, #2
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80085f2:	b29b      	uxth	r3, r3
 80085f4:	3b02      	subs	r3, #2
 80085f6:	b29a      	uxth	r2, r3
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80085fc:	e012      	b.n	8008624 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	330c      	adds	r3, #12
 8008608:	7812      	ldrb	r2, [r2, #0]
 800860a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008610:	1c5a      	adds	r2, r3, #1
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800861a:	b29b      	uxth	r3, r3
 800861c:	3b01      	subs	r3, #1
 800861e:	b29a      	uxth	r2, r3
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008624:	2300      	movs	r3, #0
 8008626:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	689b      	ldr	r3, [r3, #8]
 800862e:	f003 0301 	and.w	r3, r3, #1
 8008632:	2b01      	cmp	r3, #1
 8008634:	d148      	bne.n	80086c8 <HAL_SPI_TransmitReceive+0x3aa>
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800863c:	b29b      	uxth	r3, r3
 800863e:	2b00      	cmp	r3, #0
 8008640:	d042      	beq.n	80086c8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008648:	b29b      	uxth	r3, r3
 800864a:	2b01      	cmp	r3, #1
 800864c:	d923      	bls.n	8008696 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	68da      	ldr	r2, [r3, #12]
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008658:	b292      	uxth	r2, r2
 800865a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008660:	1c9a      	adds	r2, r3, #2
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800866c:	b29b      	uxth	r3, r3
 800866e:	3b02      	subs	r3, #2
 8008670:	b29a      	uxth	r2, r3
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800867e:	b29b      	uxth	r3, r3
 8008680:	2b01      	cmp	r3, #1
 8008682:	d81f      	bhi.n	80086c4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	685a      	ldr	r2, [r3, #4]
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008692:	605a      	str	r2, [r3, #4]
 8008694:	e016      	b.n	80086c4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f103 020c 	add.w	r2, r3, #12
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086a2:	7812      	ldrb	r2, [r2, #0]
 80086a4:	b2d2      	uxtb	r2, r2
 80086a6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086ac:	1c5a      	adds	r2, r3, #1
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80086b8:	b29b      	uxth	r3, r3
 80086ba:	3b01      	subs	r3, #1
 80086bc:	b29a      	uxth	r2, r3
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80086c4:	2301      	movs	r3, #1
 80086c6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80086c8:	f7fc fc8c 	bl	8004fe4 <HAL_GetTick>
 80086cc:	4602      	mov	r2, r0
 80086ce:	6a3b      	ldr	r3, [r7, #32]
 80086d0:	1ad3      	subs	r3, r2, r3
 80086d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80086d4:	429a      	cmp	r2, r3
 80086d6:	d803      	bhi.n	80086e0 <HAL_SPI_TransmitReceive+0x3c2>
 80086d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086de:	d102      	bne.n	80086e6 <HAL_SPI_TransmitReceive+0x3c8>
 80086e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d109      	bne.n	80086fa <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	2201      	movs	r2, #1
 80086ea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	2200      	movs	r2, #0
 80086f2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80086f6:	2303      	movs	r3, #3
 80086f8:	e02c      	b.n	8008754 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80086fe:	b29b      	uxth	r3, r3
 8008700:	2b00      	cmp	r3, #0
 8008702:	f47f af55 	bne.w	80085b0 <HAL_SPI_TransmitReceive+0x292>
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800870c:	b29b      	uxth	r3, r3
 800870e:	2b00      	cmp	r3, #0
 8008710:	f47f af4e 	bne.w	80085b0 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008714:	6a3a      	ldr	r2, [r7, #32]
 8008716:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008718:	68f8      	ldr	r0, [r7, #12]
 800871a:	f000 f94b 	bl	80089b4 <SPI_EndRxTxTransaction>
 800871e:	4603      	mov	r3, r0
 8008720:	2b00      	cmp	r3, #0
 8008722:	d008      	beq.n	8008736 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	2220      	movs	r2, #32
 8008728:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	2200      	movs	r2, #0
 800872e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8008732:	2301      	movs	r3, #1
 8008734:	e00e      	b.n	8008754 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	2201      	movs	r2, #1
 800873a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	2200      	movs	r2, #0
 8008742:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800874a:	2b00      	cmp	r3, #0
 800874c:	d001      	beq.n	8008752 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800874e:	2301      	movs	r3, #1
 8008750:	e000      	b.n	8008754 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8008752:	2300      	movs	r3, #0
  }
}
 8008754:	4618      	mov	r0, r3
 8008756:	3728      	adds	r7, #40	@ 0x28
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}

0800875c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800875c:	b480      	push	{r7}
 800875e:	b083      	sub	sp, #12
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800876a:	b2db      	uxtb	r3, r3
}
 800876c:	4618      	mov	r0, r3
 800876e:	370c      	adds	r7, #12
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr

08008778 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b088      	sub	sp, #32
 800877c:	af00      	add	r7, sp, #0
 800877e:	60f8      	str	r0, [r7, #12]
 8008780:	60b9      	str	r1, [r7, #8]
 8008782:	603b      	str	r3, [r7, #0]
 8008784:	4613      	mov	r3, r2
 8008786:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008788:	f7fc fc2c 	bl	8004fe4 <HAL_GetTick>
 800878c:	4602      	mov	r2, r0
 800878e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008790:	1a9b      	subs	r3, r3, r2
 8008792:	683a      	ldr	r2, [r7, #0]
 8008794:	4413      	add	r3, r2
 8008796:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008798:	f7fc fc24 	bl	8004fe4 <HAL_GetTick>
 800879c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800879e:	4b39      	ldr	r3, [pc, #228]	@ (8008884 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	015b      	lsls	r3, r3, #5
 80087a4:	0d1b      	lsrs	r3, r3, #20
 80087a6:	69fa      	ldr	r2, [r7, #28]
 80087a8:	fb02 f303 	mul.w	r3, r2, r3
 80087ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80087ae:	e054      	b.n	800885a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087b6:	d050      	beq.n	800885a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80087b8:	f7fc fc14 	bl	8004fe4 <HAL_GetTick>
 80087bc:	4602      	mov	r2, r0
 80087be:	69bb      	ldr	r3, [r7, #24]
 80087c0:	1ad3      	subs	r3, r2, r3
 80087c2:	69fa      	ldr	r2, [r7, #28]
 80087c4:	429a      	cmp	r2, r3
 80087c6:	d902      	bls.n	80087ce <SPI_WaitFlagStateUntilTimeout+0x56>
 80087c8:	69fb      	ldr	r3, [r7, #28]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d13d      	bne.n	800884a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	685a      	ldr	r2, [r3, #4]
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80087dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	685b      	ldr	r3, [r3, #4]
 80087e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80087e6:	d111      	bne.n	800880c <SPI_WaitFlagStateUntilTimeout+0x94>
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	689b      	ldr	r3, [r3, #8]
 80087ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80087f0:	d004      	beq.n	80087fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	689b      	ldr	r3, [r3, #8]
 80087f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80087fa:	d107      	bne.n	800880c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	681a      	ldr	r2, [r3, #0]
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800880a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008810:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008814:	d10f      	bne.n	8008836 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	681a      	ldr	r2, [r3, #0]
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008824:	601a      	str	r2, [r3, #0]
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	681a      	ldr	r2, [r3, #0]
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008834:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	2201      	movs	r2, #1
 800883a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	2200      	movs	r2, #0
 8008842:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8008846:	2303      	movs	r3, #3
 8008848:	e017      	b.n	800887a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d101      	bne.n	8008854 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008850:	2300      	movs	r3, #0
 8008852:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	3b01      	subs	r3, #1
 8008858:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	689a      	ldr	r2, [r3, #8]
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	4013      	ands	r3, r2
 8008864:	68ba      	ldr	r2, [r7, #8]
 8008866:	429a      	cmp	r2, r3
 8008868:	bf0c      	ite	eq
 800886a:	2301      	moveq	r3, #1
 800886c:	2300      	movne	r3, #0
 800886e:	b2db      	uxtb	r3, r3
 8008870:	461a      	mov	r2, r3
 8008872:	79fb      	ldrb	r3, [r7, #7]
 8008874:	429a      	cmp	r2, r3
 8008876:	d19b      	bne.n	80087b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008878:	2300      	movs	r3, #0
}
 800887a:	4618      	mov	r0, r3
 800887c:	3720      	adds	r7, #32
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}
 8008882:	bf00      	nop
 8008884:	20000004 	.word	0x20000004

08008888 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b08a      	sub	sp, #40	@ 0x28
 800888c:	af00      	add	r7, sp, #0
 800888e:	60f8      	str	r0, [r7, #12]
 8008890:	60b9      	str	r1, [r7, #8]
 8008892:	607a      	str	r2, [r7, #4]
 8008894:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008896:	2300      	movs	r3, #0
 8008898:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800889a:	f7fc fba3 	bl	8004fe4 <HAL_GetTick>
 800889e:	4602      	mov	r2, r0
 80088a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088a2:	1a9b      	subs	r3, r3, r2
 80088a4:	683a      	ldr	r2, [r7, #0]
 80088a6:	4413      	add	r3, r2
 80088a8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80088aa:	f7fc fb9b 	bl	8004fe4 <HAL_GetTick>
 80088ae:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	330c      	adds	r3, #12
 80088b6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80088b8:	4b3d      	ldr	r3, [pc, #244]	@ (80089b0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80088ba:	681a      	ldr	r2, [r3, #0]
 80088bc:	4613      	mov	r3, r2
 80088be:	009b      	lsls	r3, r3, #2
 80088c0:	4413      	add	r3, r2
 80088c2:	00da      	lsls	r2, r3, #3
 80088c4:	1ad3      	subs	r3, r2, r3
 80088c6:	0d1b      	lsrs	r3, r3, #20
 80088c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80088ca:	fb02 f303 	mul.w	r3, r2, r3
 80088ce:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80088d0:	e060      	b.n	8008994 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80088d8:	d107      	bne.n	80088ea <SPI_WaitFifoStateUntilTimeout+0x62>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d104      	bne.n	80088ea <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80088e0:	69fb      	ldr	r3, [r7, #28]
 80088e2:	781b      	ldrb	r3, [r3, #0]
 80088e4:	b2db      	uxtb	r3, r3
 80088e6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80088e8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088f0:	d050      	beq.n	8008994 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80088f2:	f7fc fb77 	bl	8004fe4 <HAL_GetTick>
 80088f6:	4602      	mov	r2, r0
 80088f8:	6a3b      	ldr	r3, [r7, #32]
 80088fa:	1ad3      	subs	r3, r2, r3
 80088fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80088fe:	429a      	cmp	r2, r3
 8008900:	d902      	bls.n	8008908 <SPI_WaitFifoStateUntilTimeout+0x80>
 8008902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008904:	2b00      	cmp	r3, #0
 8008906:	d13d      	bne.n	8008984 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	685a      	ldr	r2, [r3, #4]
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008916:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	685b      	ldr	r3, [r3, #4]
 800891c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008920:	d111      	bne.n	8008946 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	689b      	ldr	r3, [r3, #8]
 8008926:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800892a:	d004      	beq.n	8008936 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	689b      	ldr	r3, [r3, #8]
 8008930:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008934:	d107      	bne.n	8008946 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	681a      	ldr	r2, [r3, #0]
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008944:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800894a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800894e:	d10f      	bne.n	8008970 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	681a      	ldr	r2, [r3, #0]
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800895e:	601a      	str	r2, [r3, #0]
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	681a      	ldr	r2, [r3, #0]
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800896e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	2201      	movs	r2, #1
 8008974:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2200      	movs	r2, #0
 800897c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8008980:	2303      	movs	r3, #3
 8008982:	e010      	b.n	80089a6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008984:	69bb      	ldr	r3, [r7, #24]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d101      	bne.n	800898e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800898a:	2300      	movs	r3, #0
 800898c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800898e:	69bb      	ldr	r3, [r7, #24]
 8008990:	3b01      	subs	r3, #1
 8008992:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	689a      	ldr	r2, [r3, #8]
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	4013      	ands	r3, r2
 800899e:	687a      	ldr	r2, [r7, #4]
 80089a0:	429a      	cmp	r2, r3
 80089a2:	d196      	bne.n	80088d2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80089a4:	2300      	movs	r3, #0
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	3728      	adds	r7, #40	@ 0x28
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}
 80089ae:	bf00      	nop
 80089b0:	20000004 	.word	0x20000004

080089b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b086      	sub	sp, #24
 80089b8:	af02      	add	r7, sp, #8
 80089ba:	60f8      	str	r0, [r7, #12]
 80089bc:	60b9      	str	r1, [r7, #8]
 80089be:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	9300      	str	r3, [sp, #0]
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	2200      	movs	r2, #0
 80089c8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80089cc:	68f8      	ldr	r0, [r7, #12]
 80089ce:	f7ff ff5b 	bl	8008888 <SPI_WaitFifoStateUntilTimeout>
 80089d2:	4603      	mov	r3, r0
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d007      	beq.n	80089e8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80089dc:	f043 0220 	orr.w	r2, r3, #32
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80089e4:	2303      	movs	r3, #3
 80089e6:	e027      	b.n	8008a38 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	9300      	str	r3, [sp, #0]
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	2200      	movs	r2, #0
 80089f0:	2180      	movs	r1, #128	@ 0x80
 80089f2:	68f8      	ldr	r0, [r7, #12]
 80089f4:	f7ff fec0 	bl	8008778 <SPI_WaitFlagStateUntilTimeout>
 80089f8:	4603      	mov	r3, r0
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d007      	beq.n	8008a0e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a02:	f043 0220 	orr.w	r2, r3, #32
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008a0a:	2303      	movs	r3, #3
 8008a0c:	e014      	b.n	8008a38 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	9300      	str	r3, [sp, #0]
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	2200      	movs	r2, #0
 8008a16:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8008a1a:	68f8      	ldr	r0, [r7, #12]
 8008a1c:	f7ff ff34 	bl	8008888 <SPI_WaitFifoStateUntilTimeout>
 8008a20:	4603      	mov	r3, r0
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d007      	beq.n	8008a36 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a2a:	f043 0220 	orr.w	r2, r3, #32
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008a32:	2303      	movs	r3, #3
 8008a34:	e000      	b.n	8008a38 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008a36:	2300      	movs	r3, #0
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3710      	adds	r7, #16
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}

08008a40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b082      	sub	sp, #8
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d101      	bne.n	8008a52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008a4e:	2301      	movs	r3, #1
 8008a50:	e040      	b.n	8008ad4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d106      	bne.n	8008a68 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f7fb fb04 	bl	8004070 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2224      	movs	r2, #36	@ 0x24
 8008a6c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	681a      	ldr	r2, [r3, #0]
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f022 0201 	bic.w	r2, r2, #1
 8008a7c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d002      	beq.n	8008a8c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f000 fb6a 	bl	8009160 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f000 f8af 	bl	8008bf0 <UART_SetConfig>
 8008a92:	4603      	mov	r3, r0
 8008a94:	2b01      	cmp	r3, #1
 8008a96:	d101      	bne.n	8008a9c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8008a98:	2301      	movs	r3, #1
 8008a9a:	e01b      	b.n	8008ad4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	685a      	ldr	r2, [r3, #4]
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008aaa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	689a      	ldr	r2, [r3, #8]
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008aba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	681a      	ldr	r2, [r3, #0]
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f042 0201 	orr.w	r2, r2, #1
 8008aca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f000 fbe9 	bl	80092a4 <UART_CheckIdleState>
 8008ad2:	4603      	mov	r3, r0
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3708      	adds	r7, #8
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}

08008adc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b08a      	sub	sp, #40	@ 0x28
 8008ae0:	af02      	add	r7, sp, #8
 8008ae2:	60f8      	str	r0, [r7, #12]
 8008ae4:	60b9      	str	r1, [r7, #8]
 8008ae6:	603b      	str	r3, [r7, #0]
 8008ae8:	4613      	mov	r3, r2
 8008aea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008af0:	2b20      	cmp	r3, #32
 8008af2:	d177      	bne.n	8008be4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d002      	beq.n	8008b00 <HAL_UART_Transmit+0x24>
 8008afa:	88fb      	ldrh	r3, [r7, #6]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d101      	bne.n	8008b04 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008b00:	2301      	movs	r3, #1
 8008b02:	e070      	b.n	8008be6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	2200      	movs	r2, #0
 8008b08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	2221      	movs	r2, #33	@ 0x21
 8008b10:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008b12:	f7fc fa67 	bl	8004fe4 <HAL_GetTick>
 8008b16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	88fa      	ldrh	r2, [r7, #6]
 8008b1c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	88fa      	ldrh	r2, [r7, #6]
 8008b24:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	689b      	ldr	r3, [r3, #8]
 8008b2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b30:	d108      	bne.n	8008b44 <HAL_UART_Transmit+0x68>
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	691b      	ldr	r3, [r3, #16]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d104      	bne.n	8008b44 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	61bb      	str	r3, [r7, #24]
 8008b42:	e003      	b.n	8008b4c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008b4c:	e02f      	b.n	8008bae <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	9300      	str	r3, [sp, #0]
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	2200      	movs	r2, #0
 8008b56:	2180      	movs	r1, #128	@ 0x80
 8008b58:	68f8      	ldr	r0, [r7, #12]
 8008b5a:	f000 fc4b 	bl	80093f4 <UART_WaitOnFlagUntilTimeout>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d004      	beq.n	8008b6e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	2220      	movs	r2, #32
 8008b68:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8008b6a:	2303      	movs	r3, #3
 8008b6c:	e03b      	b.n	8008be6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8008b6e:	69fb      	ldr	r3, [r7, #28]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d10b      	bne.n	8008b8c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008b74:	69bb      	ldr	r3, [r7, #24]
 8008b76:	881a      	ldrh	r2, [r3, #0]
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008b80:	b292      	uxth	r2, r2
 8008b82:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008b84:	69bb      	ldr	r3, [r7, #24]
 8008b86:	3302      	adds	r3, #2
 8008b88:	61bb      	str	r3, [r7, #24]
 8008b8a:	e007      	b.n	8008b9c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008b8c:	69fb      	ldr	r3, [r7, #28]
 8008b8e:	781a      	ldrb	r2, [r3, #0]
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008b96:	69fb      	ldr	r3, [r7, #28]
 8008b98:	3301      	adds	r3, #1
 8008b9a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008ba2:	b29b      	uxth	r3, r3
 8008ba4:	3b01      	subs	r3, #1
 8008ba6:	b29a      	uxth	r2, r3
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008bb4:	b29b      	uxth	r3, r3
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d1c9      	bne.n	8008b4e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	9300      	str	r3, [sp, #0]
 8008bbe:	697b      	ldr	r3, [r7, #20]
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	2140      	movs	r1, #64	@ 0x40
 8008bc4:	68f8      	ldr	r0, [r7, #12]
 8008bc6:	f000 fc15 	bl	80093f4 <UART_WaitOnFlagUntilTimeout>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d004      	beq.n	8008bda <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	2220      	movs	r2, #32
 8008bd4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8008bd6:	2303      	movs	r3, #3
 8008bd8:	e005      	b.n	8008be6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	2220      	movs	r2, #32
 8008bde:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8008be0:	2300      	movs	r3, #0
 8008be2:	e000      	b.n	8008be6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8008be4:	2302      	movs	r3, #2
  }
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3720      	adds	r7, #32
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}
	...

08008bf0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008bf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008bf4:	b08a      	sub	sp, #40	@ 0x28
 8008bf6:	af00      	add	r7, sp, #0
 8008bf8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	689a      	ldr	r2, [r3, #8]
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	691b      	ldr	r3, [r3, #16]
 8008c08:	431a      	orrs	r2, r3
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	695b      	ldr	r3, [r3, #20]
 8008c0e:	431a      	orrs	r2, r3
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	69db      	ldr	r3, [r3, #28]
 8008c14:	4313      	orrs	r3, r2
 8008c16:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	681a      	ldr	r2, [r3, #0]
 8008c1e:	4ba4      	ldr	r3, [pc, #656]	@ (8008eb0 <UART_SetConfig+0x2c0>)
 8008c20:	4013      	ands	r3, r2
 8008c22:	68fa      	ldr	r2, [r7, #12]
 8008c24:	6812      	ldr	r2, [r2, #0]
 8008c26:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008c28:	430b      	orrs	r3, r1
 8008c2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	685b      	ldr	r3, [r3, #4]
 8008c32:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	68da      	ldr	r2, [r3, #12]
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	430a      	orrs	r2, r1
 8008c40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	699b      	ldr	r3, [r3, #24]
 8008c46:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	4a99      	ldr	r2, [pc, #612]	@ (8008eb4 <UART_SetConfig+0x2c4>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d004      	beq.n	8008c5c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	6a1b      	ldr	r3, [r3, #32]
 8008c56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c58:	4313      	orrs	r3, r2
 8008c5a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	689b      	ldr	r3, [r3, #8]
 8008c62:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c6c:	430a      	orrs	r2, r1
 8008c6e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	4a90      	ldr	r2, [pc, #576]	@ (8008eb8 <UART_SetConfig+0x2c8>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d126      	bne.n	8008cc8 <UART_SetConfig+0xd8>
 8008c7a:	4b90      	ldr	r3, [pc, #576]	@ (8008ebc <UART_SetConfig+0x2cc>)
 8008c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c80:	f003 0303 	and.w	r3, r3, #3
 8008c84:	2b03      	cmp	r3, #3
 8008c86:	d81b      	bhi.n	8008cc0 <UART_SetConfig+0xd0>
 8008c88:	a201      	add	r2, pc, #4	@ (adr r2, 8008c90 <UART_SetConfig+0xa0>)
 8008c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c8e:	bf00      	nop
 8008c90:	08008ca1 	.word	0x08008ca1
 8008c94:	08008cb1 	.word	0x08008cb1
 8008c98:	08008ca9 	.word	0x08008ca9
 8008c9c:	08008cb9 	.word	0x08008cb9
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008ca6:	e116      	b.n	8008ed6 <UART_SetConfig+0x2e6>
 8008ca8:	2302      	movs	r3, #2
 8008caa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008cae:	e112      	b.n	8008ed6 <UART_SetConfig+0x2e6>
 8008cb0:	2304      	movs	r3, #4
 8008cb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008cb6:	e10e      	b.n	8008ed6 <UART_SetConfig+0x2e6>
 8008cb8:	2308      	movs	r3, #8
 8008cba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008cbe:	e10a      	b.n	8008ed6 <UART_SetConfig+0x2e6>
 8008cc0:	2310      	movs	r3, #16
 8008cc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008cc6:	e106      	b.n	8008ed6 <UART_SetConfig+0x2e6>
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	4a7c      	ldr	r2, [pc, #496]	@ (8008ec0 <UART_SetConfig+0x2d0>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d138      	bne.n	8008d44 <UART_SetConfig+0x154>
 8008cd2:	4b7a      	ldr	r3, [pc, #488]	@ (8008ebc <UART_SetConfig+0x2cc>)
 8008cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008cd8:	f003 030c 	and.w	r3, r3, #12
 8008cdc:	2b0c      	cmp	r3, #12
 8008cde:	d82d      	bhi.n	8008d3c <UART_SetConfig+0x14c>
 8008ce0:	a201      	add	r2, pc, #4	@ (adr r2, 8008ce8 <UART_SetConfig+0xf8>)
 8008ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ce6:	bf00      	nop
 8008ce8:	08008d1d 	.word	0x08008d1d
 8008cec:	08008d3d 	.word	0x08008d3d
 8008cf0:	08008d3d 	.word	0x08008d3d
 8008cf4:	08008d3d 	.word	0x08008d3d
 8008cf8:	08008d2d 	.word	0x08008d2d
 8008cfc:	08008d3d 	.word	0x08008d3d
 8008d00:	08008d3d 	.word	0x08008d3d
 8008d04:	08008d3d 	.word	0x08008d3d
 8008d08:	08008d25 	.word	0x08008d25
 8008d0c:	08008d3d 	.word	0x08008d3d
 8008d10:	08008d3d 	.word	0x08008d3d
 8008d14:	08008d3d 	.word	0x08008d3d
 8008d18:	08008d35 	.word	0x08008d35
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008d22:	e0d8      	b.n	8008ed6 <UART_SetConfig+0x2e6>
 8008d24:	2302      	movs	r3, #2
 8008d26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008d2a:	e0d4      	b.n	8008ed6 <UART_SetConfig+0x2e6>
 8008d2c:	2304      	movs	r3, #4
 8008d2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008d32:	e0d0      	b.n	8008ed6 <UART_SetConfig+0x2e6>
 8008d34:	2308      	movs	r3, #8
 8008d36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008d3a:	e0cc      	b.n	8008ed6 <UART_SetConfig+0x2e6>
 8008d3c:	2310      	movs	r3, #16
 8008d3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008d42:	e0c8      	b.n	8008ed6 <UART_SetConfig+0x2e6>
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	4a5e      	ldr	r2, [pc, #376]	@ (8008ec4 <UART_SetConfig+0x2d4>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d125      	bne.n	8008d9a <UART_SetConfig+0x1aa>
 8008d4e:	4b5b      	ldr	r3, [pc, #364]	@ (8008ebc <UART_SetConfig+0x2cc>)
 8008d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d54:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008d58:	2b30      	cmp	r3, #48	@ 0x30
 8008d5a:	d016      	beq.n	8008d8a <UART_SetConfig+0x19a>
 8008d5c:	2b30      	cmp	r3, #48	@ 0x30
 8008d5e:	d818      	bhi.n	8008d92 <UART_SetConfig+0x1a2>
 8008d60:	2b20      	cmp	r3, #32
 8008d62:	d00a      	beq.n	8008d7a <UART_SetConfig+0x18a>
 8008d64:	2b20      	cmp	r3, #32
 8008d66:	d814      	bhi.n	8008d92 <UART_SetConfig+0x1a2>
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d002      	beq.n	8008d72 <UART_SetConfig+0x182>
 8008d6c:	2b10      	cmp	r3, #16
 8008d6e:	d008      	beq.n	8008d82 <UART_SetConfig+0x192>
 8008d70:	e00f      	b.n	8008d92 <UART_SetConfig+0x1a2>
 8008d72:	2300      	movs	r3, #0
 8008d74:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008d78:	e0ad      	b.n	8008ed6 <UART_SetConfig+0x2e6>
 8008d7a:	2302      	movs	r3, #2
 8008d7c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008d80:	e0a9      	b.n	8008ed6 <UART_SetConfig+0x2e6>
 8008d82:	2304      	movs	r3, #4
 8008d84:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008d88:	e0a5      	b.n	8008ed6 <UART_SetConfig+0x2e6>
 8008d8a:	2308      	movs	r3, #8
 8008d8c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008d90:	e0a1      	b.n	8008ed6 <UART_SetConfig+0x2e6>
 8008d92:	2310      	movs	r3, #16
 8008d94:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008d98:	e09d      	b.n	8008ed6 <UART_SetConfig+0x2e6>
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	4a4a      	ldr	r2, [pc, #296]	@ (8008ec8 <UART_SetConfig+0x2d8>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d125      	bne.n	8008df0 <UART_SetConfig+0x200>
 8008da4:	4b45      	ldr	r3, [pc, #276]	@ (8008ebc <UART_SetConfig+0x2cc>)
 8008da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008daa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008dae:	2bc0      	cmp	r3, #192	@ 0xc0
 8008db0:	d016      	beq.n	8008de0 <UART_SetConfig+0x1f0>
 8008db2:	2bc0      	cmp	r3, #192	@ 0xc0
 8008db4:	d818      	bhi.n	8008de8 <UART_SetConfig+0x1f8>
 8008db6:	2b80      	cmp	r3, #128	@ 0x80
 8008db8:	d00a      	beq.n	8008dd0 <UART_SetConfig+0x1e0>
 8008dba:	2b80      	cmp	r3, #128	@ 0x80
 8008dbc:	d814      	bhi.n	8008de8 <UART_SetConfig+0x1f8>
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d002      	beq.n	8008dc8 <UART_SetConfig+0x1d8>
 8008dc2:	2b40      	cmp	r3, #64	@ 0x40
 8008dc4:	d008      	beq.n	8008dd8 <UART_SetConfig+0x1e8>
 8008dc6:	e00f      	b.n	8008de8 <UART_SetConfig+0x1f8>
 8008dc8:	2300      	movs	r3, #0
 8008dca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008dce:	e082      	b.n	8008ed6 <UART_SetConfig+0x2e6>
 8008dd0:	2302      	movs	r3, #2
 8008dd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008dd6:	e07e      	b.n	8008ed6 <UART_SetConfig+0x2e6>
 8008dd8:	2304      	movs	r3, #4
 8008dda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008dde:	e07a      	b.n	8008ed6 <UART_SetConfig+0x2e6>
 8008de0:	2308      	movs	r3, #8
 8008de2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008de6:	e076      	b.n	8008ed6 <UART_SetConfig+0x2e6>
 8008de8:	2310      	movs	r3, #16
 8008dea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008dee:	e072      	b.n	8008ed6 <UART_SetConfig+0x2e6>
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	4a35      	ldr	r2, [pc, #212]	@ (8008ecc <UART_SetConfig+0x2dc>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d12a      	bne.n	8008e50 <UART_SetConfig+0x260>
 8008dfa:	4b30      	ldr	r3, [pc, #192]	@ (8008ebc <UART_SetConfig+0x2cc>)
 8008dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e00:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008e04:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008e08:	d01a      	beq.n	8008e40 <UART_SetConfig+0x250>
 8008e0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008e0e:	d81b      	bhi.n	8008e48 <UART_SetConfig+0x258>
 8008e10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e14:	d00c      	beq.n	8008e30 <UART_SetConfig+0x240>
 8008e16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e1a:	d815      	bhi.n	8008e48 <UART_SetConfig+0x258>
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d003      	beq.n	8008e28 <UART_SetConfig+0x238>
 8008e20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e24:	d008      	beq.n	8008e38 <UART_SetConfig+0x248>
 8008e26:	e00f      	b.n	8008e48 <UART_SetConfig+0x258>
 8008e28:	2300      	movs	r3, #0
 8008e2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008e2e:	e052      	b.n	8008ed6 <UART_SetConfig+0x2e6>
 8008e30:	2302      	movs	r3, #2
 8008e32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008e36:	e04e      	b.n	8008ed6 <UART_SetConfig+0x2e6>
 8008e38:	2304      	movs	r3, #4
 8008e3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008e3e:	e04a      	b.n	8008ed6 <UART_SetConfig+0x2e6>
 8008e40:	2308      	movs	r3, #8
 8008e42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008e46:	e046      	b.n	8008ed6 <UART_SetConfig+0x2e6>
 8008e48:	2310      	movs	r3, #16
 8008e4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008e4e:	e042      	b.n	8008ed6 <UART_SetConfig+0x2e6>
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	4a17      	ldr	r2, [pc, #92]	@ (8008eb4 <UART_SetConfig+0x2c4>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d13a      	bne.n	8008ed0 <UART_SetConfig+0x2e0>
 8008e5a:	4b18      	ldr	r3, [pc, #96]	@ (8008ebc <UART_SetConfig+0x2cc>)
 8008e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e60:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008e64:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008e68:	d01a      	beq.n	8008ea0 <UART_SetConfig+0x2b0>
 8008e6a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008e6e:	d81b      	bhi.n	8008ea8 <UART_SetConfig+0x2b8>
 8008e70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008e74:	d00c      	beq.n	8008e90 <UART_SetConfig+0x2a0>
 8008e76:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008e7a:	d815      	bhi.n	8008ea8 <UART_SetConfig+0x2b8>
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d003      	beq.n	8008e88 <UART_SetConfig+0x298>
 8008e80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e84:	d008      	beq.n	8008e98 <UART_SetConfig+0x2a8>
 8008e86:	e00f      	b.n	8008ea8 <UART_SetConfig+0x2b8>
 8008e88:	2300      	movs	r3, #0
 8008e8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008e8e:	e022      	b.n	8008ed6 <UART_SetConfig+0x2e6>
 8008e90:	2302      	movs	r3, #2
 8008e92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008e96:	e01e      	b.n	8008ed6 <UART_SetConfig+0x2e6>
 8008e98:	2304      	movs	r3, #4
 8008e9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008e9e:	e01a      	b.n	8008ed6 <UART_SetConfig+0x2e6>
 8008ea0:	2308      	movs	r3, #8
 8008ea2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008ea6:	e016      	b.n	8008ed6 <UART_SetConfig+0x2e6>
 8008ea8:	2310      	movs	r3, #16
 8008eaa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008eae:	e012      	b.n	8008ed6 <UART_SetConfig+0x2e6>
 8008eb0:	efff69f3 	.word	0xefff69f3
 8008eb4:	40008000 	.word	0x40008000
 8008eb8:	40013800 	.word	0x40013800
 8008ebc:	40021000 	.word	0x40021000
 8008ec0:	40004400 	.word	0x40004400
 8008ec4:	40004800 	.word	0x40004800
 8008ec8:	40004c00 	.word	0x40004c00
 8008ecc:	40005000 	.word	0x40005000
 8008ed0:	2310      	movs	r3, #16
 8008ed2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	4a9f      	ldr	r2, [pc, #636]	@ (8009158 <UART_SetConfig+0x568>)
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d17a      	bne.n	8008fd6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008ee0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008ee4:	2b08      	cmp	r3, #8
 8008ee6:	d824      	bhi.n	8008f32 <UART_SetConfig+0x342>
 8008ee8:	a201      	add	r2, pc, #4	@ (adr r2, 8008ef0 <UART_SetConfig+0x300>)
 8008eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eee:	bf00      	nop
 8008ef0:	08008f15 	.word	0x08008f15
 8008ef4:	08008f33 	.word	0x08008f33
 8008ef8:	08008f1d 	.word	0x08008f1d
 8008efc:	08008f33 	.word	0x08008f33
 8008f00:	08008f23 	.word	0x08008f23
 8008f04:	08008f33 	.word	0x08008f33
 8008f08:	08008f33 	.word	0x08008f33
 8008f0c:	08008f33 	.word	0x08008f33
 8008f10:	08008f2b 	.word	0x08008f2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f14:	f7fe fbfe 	bl	8007714 <HAL_RCC_GetPCLK1Freq>
 8008f18:	61f8      	str	r0, [r7, #28]
        break;
 8008f1a:	e010      	b.n	8008f3e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008f1c:	4b8f      	ldr	r3, [pc, #572]	@ (800915c <UART_SetConfig+0x56c>)
 8008f1e:	61fb      	str	r3, [r7, #28]
        break;
 8008f20:	e00d      	b.n	8008f3e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008f22:	f7fe fb5f 	bl	80075e4 <HAL_RCC_GetSysClockFreq>
 8008f26:	61f8      	str	r0, [r7, #28]
        break;
 8008f28:	e009      	b.n	8008f3e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008f2e:	61fb      	str	r3, [r7, #28]
        break;
 8008f30:	e005      	b.n	8008f3e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8008f32:	2300      	movs	r3, #0
 8008f34:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008f36:	2301      	movs	r3, #1
 8008f38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008f3c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008f3e:	69fb      	ldr	r3, [r7, #28]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	f000 80fb 	beq.w	800913c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	685a      	ldr	r2, [r3, #4]
 8008f4a:	4613      	mov	r3, r2
 8008f4c:	005b      	lsls	r3, r3, #1
 8008f4e:	4413      	add	r3, r2
 8008f50:	69fa      	ldr	r2, [r7, #28]
 8008f52:	429a      	cmp	r2, r3
 8008f54:	d305      	bcc.n	8008f62 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	685b      	ldr	r3, [r3, #4]
 8008f5a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008f5c:	69fa      	ldr	r2, [r7, #28]
 8008f5e:	429a      	cmp	r2, r3
 8008f60:	d903      	bls.n	8008f6a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8008f62:	2301      	movs	r3, #1
 8008f64:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008f68:	e0e8      	b.n	800913c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008f6a:	69fb      	ldr	r3, [r7, #28]
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	461c      	mov	r4, r3
 8008f70:	4615      	mov	r5, r2
 8008f72:	f04f 0200 	mov.w	r2, #0
 8008f76:	f04f 0300 	mov.w	r3, #0
 8008f7a:	022b      	lsls	r3, r5, #8
 8008f7c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008f80:	0222      	lsls	r2, r4, #8
 8008f82:	68f9      	ldr	r1, [r7, #12]
 8008f84:	6849      	ldr	r1, [r1, #4]
 8008f86:	0849      	lsrs	r1, r1, #1
 8008f88:	2000      	movs	r0, #0
 8008f8a:	4688      	mov	r8, r1
 8008f8c:	4681      	mov	r9, r0
 8008f8e:	eb12 0a08 	adds.w	sl, r2, r8
 8008f92:	eb43 0b09 	adc.w	fp, r3, r9
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	685b      	ldr	r3, [r3, #4]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	603b      	str	r3, [r7, #0]
 8008f9e:	607a      	str	r2, [r7, #4]
 8008fa0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fa4:	4650      	mov	r0, sl
 8008fa6:	4659      	mov	r1, fp
 8008fa8:	f7f7 fe6e 	bl	8000c88 <__aeabi_uldivmod>
 8008fac:	4602      	mov	r2, r0
 8008fae:	460b      	mov	r3, r1
 8008fb0:	4613      	mov	r3, r2
 8008fb2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008fb4:	69bb      	ldr	r3, [r7, #24]
 8008fb6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008fba:	d308      	bcc.n	8008fce <UART_SetConfig+0x3de>
 8008fbc:	69bb      	ldr	r3, [r7, #24]
 8008fbe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008fc2:	d204      	bcs.n	8008fce <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	69ba      	ldr	r2, [r7, #24]
 8008fca:	60da      	str	r2, [r3, #12]
 8008fcc:	e0b6      	b.n	800913c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8008fce:	2301      	movs	r3, #1
 8008fd0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008fd4:	e0b2      	b.n	800913c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	69db      	ldr	r3, [r3, #28]
 8008fda:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008fde:	d15e      	bne.n	800909e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8008fe0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008fe4:	2b08      	cmp	r3, #8
 8008fe6:	d828      	bhi.n	800903a <UART_SetConfig+0x44a>
 8008fe8:	a201      	add	r2, pc, #4	@ (adr r2, 8008ff0 <UART_SetConfig+0x400>)
 8008fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fee:	bf00      	nop
 8008ff0:	08009015 	.word	0x08009015
 8008ff4:	0800901d 	.word	0x0800901d
 8008ff8:	08009025 	.word	0x08009025
 8008ffc:	0800903b 	.word	0x0800903b
 8009000:	0800902b 	.word	0x0800902b
 8009004:	0800903b 	.word	0x0800903b
 8009008:	0800903b 	.word	0x0800903b
 800900c:	0800903b 	.word	0x0800903b
 8009010:	08009033 	.word	0x08009033
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009014:	f7fe fb7e 	bl	8007714 <HAL_RCC_GetPCLK1Freq>
 8009018:	61f8      	str	r0, [r7, #28]
        break;
 800901a:	e014      	b.n	8009046 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800901c:	f7fe fb90 	bl	8007740 <HAL_RCC_GetPCLK2Freq>
 8009020:	61f8      	str	r0, [r7, #28]
        break;
 8009022:	e010      	b.n	8009046 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009024:	4b4d      	ldr	r3, [pc, #308]	@ (800915c <UART_SetConfig+0x56c>)
 8009026:	61fb      	str	r3, [r7, #28]
        break;
 8009028:	e00d      	b.n	8009046 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800902a:	f7fe fadb 	bl	80075e4 <HAL_RCC_GetSysClockFreq>
 800902e:	61f8      	str	r0, [r7, #28]
        break;
 8009030:	e009      	b.n	8009046 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009032:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009036:	61fb      	str	r3, [r7, #28]
        break;
 8009038:	e005      	b.n	8009046 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800903a:	2300      	movs	r3, #0
 800903c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800903e:	2301      	movs	r3, #1
 8009040:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8009044:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009046:	69fb      	ldr	r3, [r7, #28]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d077      	beq.n	800913c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800904c:	69fb      	ldr	r3, [r7, #28]
 800904e:	005a      	lsls	r2, r3, #1
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	685b      	ldr	r3, [r3, #4]
 8009054:	085b      	lsrs	r3, r3, #1
 8009056:	441a      	add	r2, r3
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	685b      	ldr	r3, [r3, #4]
 800905c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009060:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009062:	69bb      	ldr	r3, [r7, #24]
 8009064:	2b0f      	cmp	r3, #15
 8009066:	d916      	bls.n	8009096 <UART_SetConfig+0x4a6>
 8009068:	69bb      	ldr	r3, [r7, #24]
 800906a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800906e:	d212      	bcs.n	8009096 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009070:	69bb      	ldr	r3, [r7, #24]
 8009072:	b29b      	uxth	r3, r3
 8009074:	f023 030f 	bic.w	r3, r3, #15
 8009078:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800907a:	69bb      	ldr	r3, [r7, #24]
 800907c:	085b      	lsrs	r3, r3, #1
 800907e:	b29b      	uxth	r3, r3
 8009080:	f003 0307 	and.w	r3, r3, #7
 8009084:	b29a      	uxth	r2, r3
 8009086:	8afb      	ldrh	r3, [r7, #22]
 8009088:	4313      	orrs	r3, r2
 800908a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	8afa      	ldrh	r2, [r7, #22]
 8009092:	60da      	str	r2, [r3, #12]
 8009094:	e052      	b.n	800913c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8009096:	2301      	movs	r3, #1
 8009098:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800909c:	e04e      	b.n	800913c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800909e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80090a2:	2b08      	cmp	r3, #8
 80090a4:	d827      	bhi.n	80090f6 <UART_SetConfig+0x506>
 80090a6:	a201      	add	r2, pc, #4	@ (adr r2, 80090ac <UART_SetConfig+0x4bc>)
 80090a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090ac:	080090d1 	.word	0x080090d1
 80090b0:	080090d9 	.word	0x080090d9
 80090b4:	080090e1 	.word	0x080090e1
 80090b8:	080090f7 	.word	0x080090f7
 80090bc:	080090e7 	.word	0x080090e7
 80090c0:	080090f7 	.word	0x080090f7
 80090c4:	080090f7 	.word	0x080090f7
 80090c8:	080090f7 	.word	0x080090f7
 80090cc:	080090ef 	.word	0x080090ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80090d0:	f7fe fb20 	bl	8007714 <HAL_RCC_GetPCLK1Freq>
 80090d4:	61f8      	str	r0, [r7, #28]
        break;
 80090d6:	e014      	b.n	8009102 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80090d8:	f7fe fb32 	bl	8007740 <HAL_RCC_GetPCLK2Freq>
 80090dc:	61f8      	str	r0, [r7, #28]
        break;
 80090de:	e010      	b.n	8009102 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80090e0:	4b1e      	ldr	r3, [pc, #120]	@ (800915c <UART_SetConfig+0x56c>)
 80090e2:	61fb      	str	r3, [r7, #28]
        break;
 80090e4:	e00d      	b.n	8009102 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80090e6:	f7fe fa7d 	bl	80075e4 <HAL_RCC_GetSysClockFreq>
 80090ea:	61f8      	str	r0, [r7, #28]
        break;
 80090ec:	e009      	b.n	8009102 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80090ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80090f2:	61fb      	str	r3, [r7, #28]
        break;
 80090f4:	e005      	b.n	8009102 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80090f6:	2300      	movs	r3, #0
 80090f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80090fa:	2301      	movs	r3, #1
 80090fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8009100:	bf00      	nop
    }

    if (pclk != 0U)
 8009102:	69fb      	ldr	r3, [r7, #28]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d019      	beq.n	800913c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	685b      	ldr	r3, [r3, #4]
 800910c:	085a      	lsrs	r2, r3, #1
 800910e:	69fb      	ldr	r3, [r7, #28]
 8009110:	441a      	add	r2, r3
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	685b      	ldr	r3, [r3, #4]
 8009116:	fbb2 f3f3 	udiv	r3, r2, r3
 800911a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800911c:	69bb      	ldr	r3, [r7, #24]
 800911e:	2b0f      	cmp	r3, #15
 8009120:	d909      	bls.n	8009136 <UART_SetConfig+0x546>
 8009122:	69bb      	ldr	r3, [r7, #24]
 8009124:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009128:	d205      	bcs.n	8009136 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800912a:	69bb      	ldr	r3, [r7, #24]
 800912c:	b29a      	uxth	r2, r3
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	60da      	str	r2, [r3, #12]
 8009134:	e002      	b.n	800913c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8009136:	2301      	movs	r3, #1
 8009138:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	2200      	movs	r2, #0
 8009140:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	2200      	movs	r2, #0
 8009146:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8009148:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800914c:	4618      	mov	r0, r3
 800914e:	3728      	adds	r7, #40	@ 0x28
 8009150:	46bd      	mov	sp, r7
 8009152:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009156:	bf00      	nop
 8009158:	40008000 	.word	0x40008000
 800915c:	00f42400 	.word	0x00f42400

08009160 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009160:	b480      	push	{r7}
 8009162:	b083      	sub	sp, #12
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800916c:	f003 0308 	and.w	r3, r3, #8
 8009170:	2b00      	cmp	r3, #0
 8009172:	d00a      	beq.n	800918a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	685b      	ldr	r3, [r3, #4]
 800917a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	430a      	orrs	r2, r1
 8009188:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800918e:	f003 0301 	and.w	r3, r3, #1
 8009192:	2b00      	cmp	r3, #0
 8009194:	d00a      	beq.n	80091ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	685b      	ldr	r3, [r3, #4]
 800919c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	430a      	orrs	r2, r1
 80091aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091b0:	f003 0302 	and.w	r3, r3, #2
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d00a      	beq.n	80091ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	685b      	ldr	r3, [r3, #4]
 80091be:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	430a      	orrs	r2, r1
 80091cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091d2:	f003 0304 	and.w	r3, r3, #4
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d00a      	beq.n	80091f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	685b      	ldr	r3, [r3, #4]
 80091e0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	430a      	orrs	r2, r1
 80091ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091f4:	f003 0310 	and.w	r3, r3, #16
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d00a      	beq.n	8009212 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	689b      	ldr	r3, [r3, #8]
 8009202:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	430a      	orrs	r2, r1
 8009210:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009216:	f003 0320 	and.w	r3, r3, #32
 800921a:	2b00      	cmp	r3, #0
 800921c:	d00a      	beq.n	8009234 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	689b      	ldr	r3, [r3, #8]
 8009224:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	430a      	orrs	r2, r1
 8009232:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009238:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800923c:	2b00      	cmp	r3, #0
 800923e:	d01a      	beq.n	8009276 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	685b      	ldr	r3, [r3, #4]
 8009246:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	430a      	orrs	r2, r1
 8009254:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800925a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800925e:	d10a      	bne.n	8009276 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	685b      	ldr	r3, [r3, #4]
 8009266:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	430a      	orrs	r2, r1
 8009274:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800927a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800927e:	2b00      	cmp	r3, #0
 8009280:	d00a      	beq.n	8009298 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	685b      	ldr	r3, [r3, #4]
 8009288:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	430a      	orrs	r2, r1
 8009296:	605a      	str	r2, [r3, #4]
  }
}
 8009298:	bf00      	nop
 800929a:	370c      	adds	r7, #12
 800929c:	46bd      	mov	sp, r7
 800929e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a2:	4770      	bx	lr

080092a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b098      	sub	sp, #96	@ 0x60
 80092a8:	af02      	add	r7, sp, #8
 80092aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2200      	movs	r2, #0
 80092b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80092b4:	f7fb fe96 	bl	8004fe4 <HAL_GetTick>
 80092b8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f003 0308 	and.w	r3, r3, #8
 80092c4:	2b08      	cmp	r3, #8
 80092c6:	d12e      	bne.n	8009326 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80092c8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80092cc:	9300      	str	r3, [sp, #0]
 80092ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80092d0:	2200      	movs	r2, #0
 80092d2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f000 f88c 	bl	80093f4 <UART_WaitOnFlagUntilTimeout>
 80092dc:	4603      	mov	r3, r0
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d021      	beq.n	8009326 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092ea:	e853 3f00 	ldrex	r3, [r3]
 80092ee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80092f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80092f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	461a      	mov	r2, r3
 80092fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009300:	647b      	str	r3, [r7, #68]	@ 0x44
 8009302:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009304:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009306:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009308:	e841 2300 	strex	r3, r2, [r1]
 800930c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800930e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009310:	2b00      	cmp	r3, #0
 8009312:	d1e6      	bne.n	80092e2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2220      	movs	r2, #32
 8009318:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2200      	movs	r2, #0
 800931e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009322:	2303      	movs	r3, #3
 8009324:	e062      	b.n	80093ec <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f003 0304 	and.w	r3, r3, #4
 8009330:	2b04      	cmp	r3, #4
 8009332:	d149      	bne.n	80093c8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009334:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009338:	9300      	str	r3, [sp, #0]
 800933a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800933c:	2200      	movs	r2, #0
 800933e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f000 f856 	bl	80093f4 <UART_WaitOnFlagUntilTimeout>
 8009348:	4603      	mov	r3, r0
 800934a:	2b00      	cmp	r3, #0
 800934c:	d03c      	beq.n	80093c8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009356:	e853 3f00 	ldrex	r3, [r3]
 800935a:	623b      	str	r3, [r7, #32]
   return(result);
 800935c:	6a3b      	ldr	r3, [r7, #32]
 800935e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009362:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	461a      	mov	r2, r3
 800936a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800936c:	633b      	str	r3, [r7, #48]	@ 0x30
 800936e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009370:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009372:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009374:	e841 2300 	strex	r3, r2, [r1]
 8009378:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800937a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800937c:	2b00      	cmp	r3, #0
 800937e:	d1e6      	bne.n	800934e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	3308      	adds	r3, #8
 8009386:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009388:	693b      	ldr	r3, [r7, #16]
 800938a:	e853 3f00 	ldrex	r3, [r3]
 800938e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	f023 0301 	bic.w	r3, r3, #1
 8009396:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	3308      	adds	r3, #8
 800939e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80093a0:	61fa      	str	r2, [r7, #28]
 80093a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093a4:	69b9      	ldr	r1, [r7, #24]
 80093a6:	69fa      	ldr	r2, [r7, #28]
 80093a8:	e841 2300 	strex	r3, r2, [r1]
 80093ac:	617b      	str	r3, [r7, #20]
   return(result);
 80093ae:	697b      	ldr	r3, [r7, #20]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d1e5      	bne.n	8009380 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2220      	movs	r2, #32
 80093b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2200      	movs	r2, #0
 80093c0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80093c4:	2303      	movs	r3, #3
 80093c6:	e011      	b.n	80093ec <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2220      	movs	r2, #32
 80093cc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2220      	movs	r2, #32
 80093d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2200      	movs	r2, #0
 80093da:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2200      	movs	r2, #0
 80093e0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2200      	movs	r2, #0
 80093e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80093ea:	2300      	movs	r3, #0
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3758      	adds	r7, #88	@ 0x58
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}

080093f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b084      	sub	sp, #16
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	60f8      	str	r0, [r7, #12]
 80093fc:	60b9      	str	r1, [r7, #8]
 80093fe:	603b      	str	r3, [r7, #0]
 8009400:	4613      	mov	r3, r2
 8009402:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009404:	e04f      	b.n	80094a6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009406:	69bb      	ldr	r3, [r7, #24]
 8009408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800940c:	d04b      	beq.n	80094a6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800940e:	f7fb fde9 	bl	8004fe4 <HAL_GetTick>
 8009412:	4602      	mov	r2, r0
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	1ad3      	subs	r3, r2, r3
 8009418:	69ba      	ldr	r2, [r7, #24]
 800941a:	429a      	cmp	r2, r3
 800941c:	d302      	bcc.n	8009424 <UART_WaitOnFlagUntilTimeout+0x30>
 800941e:	69bb      	ldr	r3, [r7, #24]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d101      	bne.n	8009428 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009424:	2303      	movs	r3, #3
 8009426:	e04e      	b.n	80094c6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f003 0304 	and.w	r3, r3, #4
 8009432:	2b00      	cmp	r3, #0
 8009434:	d037      	beq.n	80094a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	2b80      	cmp	r3, #128	@ 0x80
 800943a:	d034      	beq.n	80094a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	2b40      	cmp	r3, #64	@ 0x40
 8009440:	d031      	beq.n	80094a6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	69db      	ldr	r3, [r3, #28]
 8009448:	f003 0308 	and.w	r3, r3, #8
 800944c:	2b08      	cmp	r3, #8
 800944e:	d110      	bne.n	8009472 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	2208      	movs	r2, #8
 8009456:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009458:	68f8      	ldr	r0, [r7, #12]
 800945a:	f000 f838 	bl	80094ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	2208      	movs	r2, #8
 8009462:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	2200      	movs	r2, #0
 800946a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800946e:	2301      	movs	r3, #1
 8009470:	e029      	b.n	80094c6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	69db      	ldr	r3, [r3, #28]
 8009478:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800947c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009480:	d111      	bne.n	80094a6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800948a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800948c:	68f8      	ldr	r0, [r7, #12]
 800948e:	f000 f81e 	bl	80094ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	2220      	movs	r2, #32
 8009496:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	2200      	movs	r2, #0
 800949e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80094a2:	2303      	movs	r3, #3
 80094a4:	e00f      	b.n	80094c6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	69da      	ldr	r2, [r3, #28]
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	4013      	ands	r3, r2
 80094b0:	68ba      	ldr	r2, [r7, #8]
 80094b2:	429a      	cmp	r2, r3
 80094b4:	bf0c      	ite	eq
 80094b6:	2301      	moveq	r3, #1
 80094b8:	2300      	movne	r3, #0
 80094ba:	b2db      	uxtb	r3, r3
 80094bc:	461a      	mov	r2, r3
 80094be:	79fb      	ldrb	r3, [r7, #7]
 80094c0:	429a      	cmp	r2, r3
 80094c2:	d0a0      	beq.n	8009406 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80094c4:	2300      	movs	r3, #0
}
 80094c6:	4618      	mov	r0, r3
 80094c8:	3710      	adds	r7, #16
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}

080094ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80094ce:	b480      	push	{r7}
 80094d0:	b095      	sub	sp, #84	@ 0x54
 80094d2:	af00      	add	r7, sp, #0
 80094d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094de:	e853 3f00 	ldrex	r3, [r3]
 80094e2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80094e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80094ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	461a      	mov	r2, r3
 80094f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80094f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80094f6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094f8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80094fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80094fc:	e841 2300 	strex	r3, r2, [r1]
 8009500:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009502:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009504:	2b00      	cmp	r3, #0
 8009506:	d1e6      	bne.n	80094d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	3308      	adds	r3, #8
 800950e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009510:	6a3b      	ldr	r3, [r7, #32]
 8009512:	e853 3f00 	ldrex	r3, [r3]
 8009516:	61fb      	str	r3, [r7, #28]
   return(result);
 8009518:	69fb      	ldr	r3, [r7, #28]
 800951a:	f023 0301 	bic.w	r3, r3, #1
 800951e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	3308      	adds	r3, #8
 8009526:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009528:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800952a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800952c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800952e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009530:	e841 2300 	strex	r3, r2, [r1]
 8009534:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009538:	2b00      	cmp	r3, #0
 800953a:	d1e5      	bne.n	8009508 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009540:	2b01      	cmp	r3, #1
 8009542:	d118      	bne.n	8009576 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	e853 3f00 	ldrex	r3, [r3]
 8009550:	60bb      	str	r3, [r7, #8]
   return(result);
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	f023 0310 	bic.w	r3, r3, #16
 8009558:	647b      	str	r3, [r7, #68]	@ 0x44
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	461a      	mov	r2, r3
 8009560:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009562:	61bb      	str	r3, [r7, #24]
 8009564:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009566:	6979      	ldr	r1, [r7, #20]
 8009568:	69ba      	ldr	r2, [r7, #24]
 800956a:	e841 2300 	strex	r3, r2, [r1]
 800956e:	613b      	str	r3, [r7, #16]
   return(result);
 8009570:	693b      	ldr	r3, [r7, #16]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d1e6      	bne.n	8009544 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2220      	movs	r2, #32
 800957a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2200      	movs	r2, #0
 8009582:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2200      	movs	r2, #0
 8009588:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800958a:	bf00      	nop
 800958c:	3754      	adds	r7, #84	@ 0x54
 800958e:	46bd      	mov	sp, r7
 8009590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009594:	4770      	bx	lr

08009596 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009596:	b084      	sub	sp, #16
 8009598:	b580      	push	{r7, lr}
 800959a:	b084      	sub	sp, #16
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
 80095a0:	f107 001c 	add.w	r0, r7, #28
 80095a4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	68db      	ldr	r3, [r3, #12]
 80095ac:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f000 fa69 	bl	8009a8c <USB_CoreReset>
 80095ba:	4603      	mov	r3, r0
 80095bc:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80095be:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d106      	bne.n	80095d4 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095ca:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	639a      	str	r2, [r3, #56]	@ 0x38
 80095d2:	e005      	b.n	80095e0 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095d8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 80095e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3710      	adds	r7, #16
 80095e6:	46bd      	mov	sp, r7
 80095e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80095ec:	b004      	add	sp, #16
 80095ee:	4770      	bx	lr

080095f0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80095f0:	b480      	push	{r7}
 80095f2:	b083      	sub	sp, #12
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	689b      	ldr	r3, [r3, #8]
 80095fc:	f023 0201 	bic.w	r2, r3, #1
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009604:	2300      	movs	r3, #0
}
 8009606:	4618      	mov	r0, r3
 8009608:	370c      	adds	r7, #12
 800960a:	46bd      	mov	sp, r7
 800960c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009610:	4770      	bx	lr

08009612 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8009612:	b580      	push	{r7, lr}
 8009614:	b084      	sub	sp, #16
 8009616:	af00      	add	r7, sp, #0
 8009618:	6078      	str	r0, [r7, #4]
 800961a:	460b      	mov	r3, r1
 800961c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800961e:	2300      	movs	r3, #0
 8009620:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	68db      	ldr	r3, [r3, #12]
 8009626:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800962e:	78fb      	ldrb	r3, [r7, #3]
 8009630:	2b01      	cmp	r3, #1
 8009632:	d115      	bne.n	8009660 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	68db      	ldr	r3, [r3, #12]
 8009638:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009640:	200a      	movs	r0, #10
 8009642:	f7fb fcdb 	bl	8004ffc <HAL_Delay>
      ms += 10U;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	330a      	adds	r3, #10
 800964a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f000 fa0f 	bl	8009a70 <USB_GetMode>
 8009652:	4603      	mov	r3, r0
 8009654:	2b01      	cmp	r3, #1
 8009656:	d01e      	beq.n	8009696 <USB_SetCurrentMode+0x84>
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	2bc7      	cmp	r3, #199	@ 0xc7
 800965c:	d9f0      	bls.n	8009640 <USB_SetCurrentMode+0x2e>
 800965e:	e01a      	b.n	8009696 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009660:	78fb      	ldrb	r3, [r7, #3]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d115      	bne.n	8009692 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	68db      	ldr	r3, [r3, #12]
 800966a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009672:	200a      	movs	r0, #10
 8009674:	f7fb fcc2 	bl	8004ffc <HAL_Delay>
      ms += 10U;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	330a      	adds	r3, #10
 800967c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f000 f9f6 	bl	8009a70 <USB_GetMode>
 8009684:	4603      	mov	r3, r0
 8009686:	2b00      	cmp	r3, #0
 8009688:	d005      	beq.n	8009696 <USB_SetCurrentMode+0x84>
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	2bc7      	cmp	r3, #199	@ 0xc7
 800968e:	d9f0      	bls.n	8009672 <USB_SetCurrentMode+0x60>
 8009690:	e001      	b.n	8009696 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009692:	2301      	movs	r3, #1
 8009694:	e005      	b.n	80096a2 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	2bc8      	cmp	r3, #200	@ 0xc8
 800969a:	d101      	bne.n	80096a0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800969c:	2301      	movs	r3, #1
 800969e:	e000      	b.n	80096a2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80096a0:	2300      	movs	r3, #0
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	3710      	adds	r7, #16
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}
	...

080096ac <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80096ac:	b084      	sub	sp, #16
 80096ae:	b580      	push	{r7, lr}
 80096b0:	b086      	sub	sp, #24
 80096b2:	af00      	add	r7, sp, #0
 80096b4:	6078      	str	r0, [r7, #4]
 80096b6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80096ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80096be:	2300      	movs	r3, #0
 80096c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80096c6:	2300      	movs	r3, #0
 80096c8:	613b      	str	r3, [r7, #16]
 80096ca:	e009      	b.n	80096e0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80096cc:	687a      	ldr	r2, [r7, #4]
 80096ce:	693b      	ldr	r3, [r7, #16]
 80096d0:	3340      	adds	r3, #64	@ 0x40
 80096d2:	009b      	lsls	r3, r3, #2
 80096d4:	4413      	add	r3, r2
 80096d6:	2200      	movs	r2, #0
 80096d8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80096da:	693b      	ldr	r3, [r7, #16]
 80096dc:	3301      	adds	r3, #1
 80096de:	613b      	str	r3, [r7, #16]
 80096e0:	693b      	ldr	r3, [r7, #16]
 80096e2:	2b0e      	cmp	r3, #14
 80096e4:	d9f2      	bls.n	80096cc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80096e6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d11c      	bne.n	8009728 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80096f4:	685b      	ldr	r3, [r3, #4]
 80096f6:	68fa      	ldr	r2, [r7, #12]
 80096f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80096fc:	f043 0302 	orr.w	r3, r3, #2
 8009700:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009706:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	601a      	str	r2, [r3, #0]
 8009726:	e005      	b.n	8009734 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800972c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800973a:	461a      	mov	r2, r3
 800973c:	2300      	movs	r3, #0
 800973e:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009740:	2103      	movs	r1, #3
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f000 f95a 	bl	80099fc <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009748:	2110      	movs	r1, #16
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f000 f8f6 	bl	800993c <USB_FlushTxFifo>
 8009750:	4603      	mov	r3, r0
 8009752:	2b00      	cmp	r3, #0
 8009754:	d001      	beq.n	800975a <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8009756:	2301      	movs	r3, #1
 8009758:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f000 f920 	bl	80099a0 <USB_FlushRxFifo>
 8009760:	4603      	mov	r3, r0
 8009762:	2b00      	cmp	r3, #0
 8009764:	d001      	beq.n	800976a <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8009766:	2301      	movs	r3, #1
 8009768:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009770:	461a      	mov	r2, r3
 8009772:	2300      	movs	r3, #0
 8009774:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800977c:	461a      	mov	r2, r3
 800977e:	2300      	movs	r3, #0
 8009780:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009788:	461a      	mov	r2, r3
 800978a:	2300      	movs	r3, #0
 800978c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800978e:	2300      	movs	r3, #0
 8009790:	613b      	str	r3, [r7, #16]
 8009792:	e043      	b.n	800981c <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009794:	693b      	ldr	r3, [r7, #16]
 8009796:	015a      	lsls	r2, r3, #5
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	4413      	add	r3, r2
 800979c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80097a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80097aa:	d118      	bne.n	80097de <USB_DevInit+0x132>
    {
      if (i == 0U)
 80097ac:	693b      	ldr	r3, [r7, #16]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d10a      	bne.n	80097c8 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80097b2:	693b      	ldr	r3, [r7, #16]
 80097b4:	015a      	lsls	r2, r3, #5
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	4413      	add	r3, r2
 80097ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097be:	461a      	mov	r2, r3
 80097c0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80097c4:	6013      	str	r3, [r2, #0]
 80097c6:	e013      	b.n	80097f0 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80097c8:	693b      	ldr	r3, [r7, #16]
 80097ca:	015a      	lsls	r2, r3, #5
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	4413      	add	r3, r2
 80097d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097d4:	461a      	mov	r2, r3
 80097d6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80097da:	6013      	str	r3, [r2, #0]
 80097dc:	e008      	b.n	80097f0 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80097de:	693b      	ldr	r3, [r7, #16]
 80097e0:	015a      	lsls	r2, r3, #5
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	4413      	add	r3, r2
 80097e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097ea:	461a      	mov	r2, r3
 80097ec:	2300      	movs	r3, #0
 80097ee:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80097f0:	693b      	ldr	r3, [r7, #16]
 80097f2:	015a      	lsls	r2, r3, #5
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	4413      	add	r3, r2
 80097f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097fc:	461a      	mov	r2, r3
 80097fe:	2300      	movs	r3, #0
 8009800:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009802:	693b      	ldr	r3, [r7, #16]
 8009804:	015a      	lsls	r2, r3, #5
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	4413      	add	r3, r2
 800980a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800980e:	461a      	mov	r2, r3
 8009810:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009814:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009816:	693b      	ldr	r3, [r7, #16]
 8009818:	3301      	adds	r3, #1
 800981a:	613b      	str	r3, [r7, #16]
 800981c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009820:	461a      	mov	r2, r3
 8009822:	693b      	ldr	r3, [r7, #16]
 8009824:	4293      	cmp	r3, r2
 8009826:	d3b5      	bcc.n	8009794 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009828:	2300      	movs	r3, #0
 800982a:	613b      	str	r3, [r7, #16]
 800982c:	e043      	b.n	80098b6 <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800982e:	693b      	ldr	r3, [r7, #16]
 8009830:	015a      	lsls	r2, r3, #5
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	4413      	add	r3, r2
 8009836:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009840:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009844:	d118      	bne.n	8009878 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8009846:	693b      	ldr	r3, [r7, #16]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d10a      	bne.n	8009862 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800984c:	693b      	ldr	r3, [r7, #16]
 800984e:	015a      	lsls	r2, r3, #5
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	4413      	add	r3, r2
 8009854:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009858:	461a      	mov	r2, r3
 800985a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800985e:	6013      	str	r3, [r2, #0]
 8009860:	e013      	b.n	800988a <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009862:	693b      	ldr	r3, [r7, #16]
 8009864:	015a      	lsls	r2, r3, #5
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	4413      	add	r3, r2
 800986a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800986e:	461a      	mov	r2, r3
 8009870:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009874:	6013      	str	r3, [r2, #0]
 8009876:	e008      	b.n	800988a <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009878:	693b      	ldr	r3, [r7, #16]
 800987a:	015a      	lsls	r2, r3, #5
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	4413      	add	r3, r2
 8009880:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009884:	461a      	mov	r2, r3
 8009886:	2300      	movs	r3, #0
 8009888:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800988a:	693b      	ldr	r3, [r7, #16]
 800988c:	015a      	lsls	r2, r3, #5
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	4413      	add	r3, r2
 8009892:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009896:	461a      	mov	r2, r3
 8009898:	2300      	movs	r3, #0
 800989a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800989c:	693b      	ldr	r3, [r7, #16]
 800989e:	015a      	lsls	r2, r3, #5
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	4413      	add	r3, r2
 80098a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098a8:	461a      	mov	r2, r3
 80098aa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80098ae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80098b0:	693b      	ldr	r3, [r7, #16]
 80098b2:	3301      	adds	r3, #1
 80098b4:	613b      	str	r3, [r7, #16]
 80098b6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80098ba:	461a      	mov	r2, r3
 80098bc:	693b      	ldr	r3, [r7, #16]
 80098be:	4293      	cmp	r3, r2
 80098c0:	d3b5      	bcc.n	800982e <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098c8:	691b      	ldr	r3, [r3, #16]
 80098ca:	68fa      	ldr	r2, [r7, #12]
 80098cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80098d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80098d4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2200      	movs	r2, #0
 80098da:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80098e2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	699b      	ldr	r3, [r3, #24]
 80098e8:	f043 0210 	orr.w	r2, r3, #16
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	699a      	ldr	r2, [r3, #24]
 80098f4:	4b10      	ldr	r3, [pc, #64]	@ (8009938 <USB_DevInit+0x28c>)
 80098f6:	4313      	orrs	r3, r2
 80098f8:	687a      	ldr	r2, [r7, #4]
 80098fa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80098fc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009900:	2b00      	cmp	r3, #0
 8009902:	d005      	beq.n	8009910 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	699b      	ldr	r3, [r3, #24]
 8009908:	f043 0208 	orr.w	r2, r3, #8
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009910:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009914:	2b01      	cmp	r3, #1
 8009916:	d107      	bne.n	8009928 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	699b      	ldr	r3, [r3, #24]
 800991c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009920:	f043 0304 	orr.w	r3, r3, #4
 8009924:	687a      	ldr	r2, [r7, #4]
 8009926:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009928:	7dfb      	ldrb	r3, [r7, #23]
}
 800992a:	4618      	mov	r0, r3
 800992c:	3718      	adds	r7, #24
 800992e:	46bd      	mov	sp, r7
 8009930:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009934:	b004      	add	sp, #16
 8009936:	4770      	bx	lr
 8009938:	803c3800 	.word	0x803c3800

0800993c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800993c:	b480      	push	{r7}
 800993e:	b085      	sub	sp, #20
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
 8009944:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009946:	2300      	movs	r3, #0
 8009948:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	3301      	adds	r3, #1
 800994e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009956:	d901      	bls.n	800995c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009958:	2303      	movs	r3, #3
 800995a:	e01b      	b.n	8009994 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	691b      	ldr	r3, [r3, #16]
 8009960:	2b00      	cmp	r3, #0
 8009962:	daf2      	bge.n	800994a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009964:	2300      	movs	r3, #0
 8009966:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	019b      	lsls	r3, r3, #6
 800996c:	f043 0220 	orr.w	r2, r3, #32
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	3301      	adds	r3, #1
 8009978:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009980:	d901      	bls.n	8009986 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009982:	2303      	movs	r3, #3
 8009984:	e006      	b.n	8009994 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	691b      	ldr	r3, [r3, #16]
 800998a:	f003 0320 	and.w	r3, r3, #32
 800998e:	2b20      	cmp	r3, #32
 8009990:	d0f0      	beq.n	8009974 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009992:	2300      	movs	r3, #0
}
 8009994:	4618      	mov	r0, r3
 8009996:	3714      	adds	r7, #20
 8009998:	46bd      	mov	sp, r7
 800999a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999e:	4770      	bx	lr

080099a0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80099a0:	b480      	push	{r7}
 80099a2:	b085      	sub	sp, #20
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80099a8:	2300      	movs	r3, #0
 80099aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	3301      	adds	r3, #1
 80099b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80099b8:	d901      	bls.n	80099be <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80099ba:	2303      	movs	r3, #3
 80099bc:	e018      	b.n	80099f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	691b      	ldr	r3, [r3, #16]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	daf2      	bge.n	80099ac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80099c6:	2300      	movs	r3, #0
 80099c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2210      	movs	r2, #16
 80099ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	3301      	adds	r3, #1
 80099d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80099dc:	d901      	bls.n	80099e2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80099de:	2303      	movs	r3, #3
 80099e0:	e006      	b.n	80099f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	691b      	ldr	r3, [r3, #16]
 80099e6:	f003 0310 	and.w	r3, r3, #16
 80099ea:	2b10      	cmp	r3, #16
 80099ec:	d0f0      	beq.n	80099d0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80099ee:	2300      	movs	r3, #0
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	3714      	adds	r7, #20
 80099f4:	46bd      	mov	sp, r7
 80099f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fa:	4770      	bx	lr

080099fc <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80099fc:	b480      	push	{r7}
 80099fe:	b085      	sub	sp, #20
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
 8009a04:	460b      	mov	r3, r1
 8009a06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a12:	681a      	ldr	r2, [r3, #0]
 8009a14:	78fb      	ldrb	r3, [r7, #3]
 8009a16:	68f9      	ldr	r1, [r7, #12]
 8009a18:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009a1c:	4313      	orrs	r3, r2
 8009a1e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009a20:	2300      	movs	r3, #0
}
 8009a22:	4618      	mov	r0, r3
 8009a24:	3714      	adds	r7, #20
 8009a26:	46bd      	mov	sp, r7
 8009a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2c:	4770      	bx	lr

08009a2e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009a2e:	b480      	push	{r7}
 8009a30:	b085      	sub	sp, #20
 8009a32:	af00      	add	r7, sp, #0
 8009a34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	68fa      	ldr	r2, [r7, #12]
 8009a44:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009a48:	f023 0303 	bic.w	r3, r3, #3
 8009a4c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a54:	685b      	ldr	r3, [r3, #4]
 8009a56:	68fa      	ldr	r2, [r7, #12]
 8009a58:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009a5c:	f043 0302 	orr.w	r3, r3, #2
 8009a60:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009a62:	2300      	movs	r3, #0
}
 8009a64:	4618      	mov	r0, r3
 8009a66:	3714      	adds	r7, #20
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6e:	4770      	bx	lr

08009a70 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009a70:	b480      	push	{r7}
 8009a72:	b083      	sub	sp, #12
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	695b      	ldr	r3, [r3, #20]
 8009a7c:	f003 0301 	and.w	r3, r3, #1
}
 8009a80:	4618      	mov	r0, r3
 8009a82:	370c      	adds	r7, #12
 8009a84:	46bd      	mov	sp, r7
 8009a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8a:	4770      	bx	lr

08009a8c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009a8c:	b480      	push	{r7}
 8009a8e:	b085      	sub	sp, #20
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009a94:	2300      	movs	r3, #0
 8009a96:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	3301      	adds	r3, #1
 8009a9c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009aa4:	d901      	bls.n	8009aaa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009aa6:	2303      	movs	r3, #3
 8009aa8:	e01b      	b.n	8009ae2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	691b      	ldr	r3, [r3, #16]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	daf2      	bge.n	8009a98 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	691b      	ldr	r3, [r3, #16]
 8009aba:	f043 0201 	orr.w	r2, r3, #1
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	3301      	adds	r3, #1
 8009ac6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009ace:	d901      	bls.n	8009ad4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009ad0:	2303      	movs	r3, #3
 8009ad2:	e006      	b.n	8009ae2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	691b      	ldr	r3, [r3, #16]
 8009ad8:	f003 0301 	and.w	r3, r3, #1
 8009adc:	2b01      	cmp	r3, #1
 8009ade:	d0f0      	beq.n	8009ac2 <USB_CoreReset+0x36>

  return HAL_OK;
 8009ae0:	2300      	movs	r3, #0
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	3714      	adds	r7, #20
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aec:	4770      	bx	lr

08009aee <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 8009aee:	b580      	push	{r7, lr}
 8009af0:	b08c      	sub	sp, #48	@ 0x30
 8009af2:	af00      	add	r7, sp, #0
 8009af4:	603b      	str	r3, [r7, #0]
 8009af6:	4603      	mov	r3, r0
 8009af8:	71fb      	strb	r3, [r7, #7]
 8009afa:	460b      	mov	r3, r1
 8009afc:	71bb      	strb	r3, [r7, #6]
 8009afe:	4613      	mov	r3, r2
 8009b00:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 8009b02:	79fb      	ldrb	r3, [r7, #7]
 8009b04:	753b      	strb	r3, [r7, #20]
  cp.privacy_enabled = privacy_enabled;
 8009b06:	79bb      	ldrb	r3, [r7, #6]
 8009b08:	757b      	strb	r3, [r7, #21]
  cp.device_name_char_len = device_name_char_len;
 8009b0a:	797b      	ldrb	r3, [r7, #5]
 8009b0c:	75bb      	strb	r3, [r7, #22]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8009b0e:	f107 030c 	add.w	r3, r7, #12
 8009b12:	2207      	movs	r2, #7
 8009b14:	2100      	movs	r1, #0
 8009b16:	4618      	mov	r0, r3
 8009b18:	f004 fa76 	bl	800e008 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009b1c:	f107 0318 	add.w	r3, r7, #24
 8009b20:	2218      	movs	r2, #24
 8009b22:	2100      	movs	r1, #0
 8009b24:	4618      	mov	r0, r3
 8009b26:	f004 fa6f 	bl	800e008 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8009b2a:	233f      	movs	r3, #63	@ 0x3f
 8009b2c:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_GAP_INIT;
 8009b2e:	238a      	movs	r3, #138	@ 0x8a
 8009b30:	837b      	strh	r3, [r7, #26]
  rq.cparam = &cp;
 8009b32:	f107 0314 	add.w	r3, r7, #20
 8009b36:	623b      	str	r3, [r7, #32]
  rq.clen = sizeof(cp);
 8009b38:	2303      	movs	r3, #3
 8009b3a:	627b      	str	r3, [r7, #36]	@ 0x24
  rq.rparam = &resp;
 8009b3c:	f107 030c 	add.w	r3, r7, #12
 8009b40:	62bb      	str	r3, [r7, #40]	@ 0x28
  rq.rlen = GAP_INIT_RP_SIZE;
 8009b42:	2307      	movs	r3, #7
 8009b44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 8009b46:	f107 0318 	add.w	r3, r7, #24
 8009b4a:	2100      	movs	r1, #0
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	f000 ff41 	bl	800a9d4 <hci_send_req>
 8009b52:	4603      	mov	r3, r0
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	da01      	bge.n	8009b5c <aci_gap_init_IDB05A1+0x6e>
    return BLE_STATUS_TIMEOUT;
 8009b58:	23ff      	movs	r3, #255	@ 0xff
 8009b5a:	e014      	b.n	8009b86 <aci_gap_init_IDB05A1+0x98>
  
  if (resp.status) {
 8009b5c:	7b3b      	ldrb	r3, [r7, #12]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d001      	beq.n	8009b66 <aci_gap_init_IDB05A1+0x78>
    return resp.status;
 8009b62:	7b3b      	ldrb	r3, [r7, #12]
 8009b64:	e00f      	b.n	8009b86 <aci_gap_init_IDB05A1+0x98>
  }
  
  *service_handle = btohs(resp.service_handle);
 8009b66:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 8009b6a:	b29a      	uxth	r2, r3
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8009b70:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 8009b74:	b29a      	uxth	r2, r3
 8009b76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b78:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8009b7a:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 8009b7e:	b29a      	uxth	r2, r3
 8009b80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b82:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8009b84:	2300      	movs	r3, #0
}
 8009b86:	4618      	mov	r0, r3
 8009b88:	3730      	adds	r7, #48	@ 0x30
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bd80      	pop	{r7, pc}

08009b8e <aci_gap_init_IDB04A1>:

tBleStatus aci_gap_init_IDB04A1(uint8_t role, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 8009b8e:	b580      	push	{r7, lr}
 8009b90:	b08e      	sub	sp, #56	@ 0x38
 8009b92:	af00      	add	r7, sp, #0
 8009b94:	60b9      	str	r1, [r7, #8]
 8009b96:	607a      	str	r2, [r7, #4]
 8009b98:	603b      	str	r3, [r7, #0]
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	73fb      	strb	r3, [r7, #15]
  struct hci_request rq;
  gap_init_cp_IDB04A1 cp;
  gap_init_rp resp;

  cp.role = role;
 8009b9e:	7bfb      	ldrb	r3, [r7, #15]
 8009ba0:	773b      	strb	r3, [r7, #28]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8009ba2:	f107 0314 	add.w	r3, r7, #20
 8009ba6:	2207      	movs	r2, #7
 8009ba8:	2100      	movs	r1, #0
 8009baa:	4618      	mov	r0, r3
 8009bac:	f004 fa2c 	bl	800e008 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009bb0:	f107 0320 	add.w	r3, r7, #32
 8009bb4:	2218      	movs	r2, #24
 8009bb6:	2100      	movs	r1, #0
 8009bb8:	4618      	mov	r0, r3
 8009bba:	f004 fa25 	bl	800e008 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8009bbe:	233f      	movs	r3, #63	@ 0x3f
 8009bc0:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_GAP_INIT;
 8009bc2:	238a      	movs	r3, #138	@ 0x8a
 8009bc4:	847b      	strh	r3, [r7, #34]	@ 0x22
  rq.cparam = &cp;
 8009bc6:	f107 031c 	add.w	r3, r7, #28
 8009bca:	62bb      	str	r3, [r7, #40]	@ 0x28
  rq.clen = sizeof(cp);
 8009bcc:	2301      	movs	r3, #1
 8009bce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  rq.rparam = &resp;
 8009bd0:	f107 0314 	add.w	r3, r7, #20
 8009bd4:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.rlen = GAP_INIT_RP_SIZE;
 8009bd6:	2307      	movs	r3, #7
 8009bd8:	637b      	str	r3, [r7, #52]	@ 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 8009bda:	f107 0320 	add.w	r3, r7, #32
 8009bde:	2100      	movs	r1, #0
 8009be0:	4618      	mov	r0, r3
 8009be2:	f000 fef7 	bl	800a9d4 <hci_send_req>
 8009be6:	4603      	mov	r3, r0
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	da01      	bge.n	8009bf0 <aci_gap_init_IDB04A1+0x62>
    return BLE_STATUS_TIMEOUT;
 8009bec:	23ff      	movs	r3, #255	@ 0xff
 8009bee:	e014      	b.n	8009c1a <aci_gap_init_IDB04A1+0x8c>
  
  if (resp.status) {
 8009bf0:	7d3b      	ldrb	r3, [r7, #20]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d001      	beq.n	8009bfa <aci_gap_init_IDB04A1+0x6c>
    return resp.status;
 8009bf6:	7d3b      	ldrb	r3, [r7, #20]
 8009bf8:	e00f      	b.n	8009c1a <aci_gap_init_IDB04A1+0x8c>
  }
  
  *service_handle = btohs(resp.service_handle);
 8009bfa:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 8009bfe:	b29a      	uxth	r2, r3
 8009c00:	68bb      	ldr	r3, [r7, #8]
 8009c02:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8009c04:	f8b7 3017 	ldrh.w	r3, [r7, #23]
 8009c08:	b29a      	uxth	r2, r3
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8009c0e:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 8009c12:	b29a      	uxth	r2, r3
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8009c18:	2300      	movs	r3, #0
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	3738      	adds	r7, #56	@ 0x38
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}

08009c22 <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 8009c22:	b590      	push	{r4, r7, lr}
 8009c24:	b095      	sub	sp, #84	@ 0x54
 8009c26:	af00      	add	r7, sp, #0
 8009c28:	4604      	mov	r4, r0
 8009c2a:	4608      	mov	r0, r1
 8009c2c:	4611      	mov	r1, r2
 8009c2e:	461a      	mov	r2, r3
 8009c30:	4623      	mov	r3, r4
 8009c32:	71fb      	strb	r3, [r7, #7]
 8009c34:	4603      	mov	r3, r0
 8009c36:	80bb      	strh	r3, [r7, #4]
 8009c38:	460b      	mov	r3, r1
 8009c3a:	807b      	strh	r3, [r7, #2]
 8009c3c:	4613      	mov	r3, r2
 8009c3e:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
 8009c40:	2300      	movs	r3, #0
 8009c42:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 8009c46:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 8009c4a:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8009c4e:	4413      	add	r3, r2
 8009c50:	330e      	adds	r3, #14
 8009c52:	2b28      	cmp	r3, #40	@ 0x28
 8009c54:	d901      	bls.n	8009c5a <aci_gap_set_discoverable+0x38>
    return BLE_STATUS_INVALID_PARAMS;
 8009c56:	2342      	movs	r3, #66	@ 0x42
 8009c58:	e0c9      	b.n	8009dee <aci_gap_set_discoverable+0x1cc>

  buffer[indx] = AdvType;
 8009c5a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009c5e:	3350      	adds	r3, #80	@ 0x50
 8009c60:	443b      	add	r3, r7
 8009c62:	79fa      	ldrb	r2, [r7, #7]
 8009c64:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8009c68:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009c6c:	3301      	adds	r3, #1
 8009c6e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  AdvIntervMin = htobs(AdvIntervMin);
 8009c72:	88bb      	ldrh	r3, [r7, #4]
 8009c74:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 8009c76:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009c7a:	f107 0208 	add.w	r2, r7, #8
 8009c7e:	4413      	add	r3, r2
 8009c80:	88ba      	ldrh	r2, [r7, #4]
 8009c82:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8009c84:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009c88:	3302      	adds	r3, #2
 8009c8a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  AdvIntervMax = htobs(AdvIntervMax);
 8009c8e:	887b      	ldrh	r3, [r7, #2]
 8009c90:	807b      	strh	r3, [r7, #2]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 8009c92:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009c96:	f107 0208 	add.w	r2, r7, #8
 8009c9a:	4413      	add	r3, r2
 8009c9c:	887a      	ldrh	r2, [r7, #2]
 8009c9e:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8009ca0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009ca4:	3302      	adds	r3, #2
 8009ca6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  buffer[indx] = OwnAddrType;
 8009caa:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009cae:	3350      	adds	r3, #80	@ 0x50
 8009cb0:	443b      	add	r3, r7
 8009cb2:	79ba      	ldrb	r2, [r7, #6]
 8009cb4:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8009cb8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009cbc:	3301      	adds	r3, #1
 8009cbe:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  buffer[indx] = AdvFilterPolicy;
 8009cc2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009cc6:	3350      	adds	r3, #80	@ 0x50
 8009cc8:	443b      	add	r3, r7
 8009cca:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 8009cce:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8009cd2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009cd6:	3301      	adds	r3, #1
 8009cd8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  buffer[indx] = LocalNameLen;
 8009cdc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009ce0:	3350      	adds	r3, #80	@ 0x50
 8009ce2:	443b      	add	r3, r7
 8009ce4:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 8009ce8:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8009cec:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009cf0:	3301      	adds	r3, #1
 8009cf2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 8009cf6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009cfa:	f107 0208 	add.w	r2, r7, #8
 8009cfe:	4413      	add	r3, r2
 8009d00:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 8009d04:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009d06:	4618      	mov	r0, r3
 8009d08:	f004 f9fd 	bl	800e106 <memcpy>
  indx +=  LocalNameLen;
 8009d0c:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8009d10:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8009d14:	4413      	add	r3, r2
 8009d16:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  buffer[indx] = ServiceUUIDLen;
 8009d1a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009d1e:	3350      	adds	r3, #80	@ 0x50
 8009d20:	443b      	add	r3, r7
 8009d22:	f897 206c 	ldrb.w	r2, [r7, #108]	@ 0x6c
 8009d26:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8009d2a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009d2e:	3301      	adds	r3, #1
 8009d30:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 8009d34:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009d38:	f107 0208 	add.w	r2, r7, #8
 8009d3c:	4413      	add	r3, r2
 8009d3e:	f897 206c 	ldrb.w	r2, [r7, #108]	@ 0x6c
 8009d42:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8009d44:	4618      	mov	r0, r3
 8009d46:	f004 f9de 	bl	800e106 <memcpy>
  indx +=  ServiceUUIDLen;  
 8009d4a:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8009d4e:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8009d52:	4413      	add	r3, r2
 8009d54:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
 8009d58:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8009d5c:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 8009d60:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009d64:	f107 0208 	add.w	r2, r7, #8
 8009d68:	4413      	add	r3, r2
 8009d6a:	f8b7 2074 	ldrh.w	r2, [r7, #116]	@ 0x74
 8009d6e:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8009d70:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009d74:	3302      	adds	r3, #2
 8009d76:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
 8009d7a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 8009d7e:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 8009d82:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009d86:	f107 0208 	add.w	r2, r7, #8
 8009d8a:	4413      	add	r3, r2
 8009d8c:	f8b7 2078 	ldrh.w	r2, [r7, #120]	@ 0x78
 8009d90:	801a      	strh	r2, [r3, #0]
  indx +=  2;    
 8009d92:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009d96:	3302      	adds	r3, #2
 8009d98:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009d9c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8009da0:	2218      	movs	r2, #24
 8009da2:	2100      	movs	r1, #0
 8009da4:	4618      	mov	r0, r3
 8009da6:	f004 f92f 	bl	800e008 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8009daa:	233f      	movs	r3, #63	@ 0x3f
 8009dac:	86bb      	strh	r3, [r7, #52]	@ 0x34
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 8009dae:	2383      	movs	r3, #131	@ 0x83
 8009db0:	86fb      	strh	r3, [r7, #54]	@ 0x36
  rq.cparam = (void *)buffer;
 8009db2:	f107 0308 	add.w	r3, r7, #8
 8009db6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.clen = indx;
 8009db8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009dbc:	643b      	str	r3, [r7, #64]	@ 0x40
  rq.rparam = &status;
 8009dbe:	f107 0333 	add.w	r3, r7, #51	@ 0x33
 8009dc2:	647b      	str	r3, [r7, #68]	@ 0x44
  rq.rlen = 1;
 8009dc4:	2301      	movs	r3, #1
 8009dc6:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (hci_send_req(&rq, FALSE) < 0)
 8009dc8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8009dcc:	2100      	movs	r1, #0
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f000 fe00 	bl	800a9d4 <hci_send_req>
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	da01      	bge.n	8009dde <aci_gap_set_discoverable+0x1bc>
    return BLE_STATUS_TIMEOUT;
 8009dda:	23ff      	movs	r3, #255	@ 0xff
 8009ddc:	e007      	b.n	8009dee <aci_gap_set_discoverable+0x1cc>

  if (status) {
 8009dde:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d002      	beq.n	8009dec <aci_gap_set_discoverable+0x1ca>
    return status;
 8009de6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009dea:	e000      	b.n	8009dee <aci_gap_set_discoverable+0x1cc>
  }

  return 0;
 8009dec:	2300      	movs	r3, #0
}
 8009dee:	4618      	mov	r0, r3
 8009df0:	3754      	adds	r7, #84	@ 0x54
 8009df2:	46bd      	mov	sp, r7
 8009df4:	bd90      	pop	{r4, r7, pc}

08009df6 <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 8009df6:	b590      	push	{r4, r7, lr}
 8009df8:	b091      	sub	sp, #68	@ 0x44
 8009dfa:	af00      	add	r7, sp, #0
 8009dfc:	603a      	str	r2, [r7, #0]
 8009dfe:	461a      	mov	r2, r3
 8009e00:	4603      	mov	r3, r0
 8009e02:	71fb      	strb	r3, [r7, #7]
 8009e04:	460b      	mov	r3, r1
 8009e06:	71bb      	strb	r3, [r7, #6]
 8009e08:	4613      	mov	r3, r2
 8009e0a:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 8009e0c:	79fb      	ldrb	r3, [r7, #7]
 8009e0e:	733b      	strb	r3, [r7, #12]
  cp.oob_enable = oob_enable;
 8009e10:	79bb      	ldrb	r3, [r7, #6]
 8009e12:	737b      	strb	r3, [r7, #13]
  /* FIX: check on oob_enable introduced to fix issue in projects for Cortex-M33 */
  if (oob_enable) {
 8009e14:	79bb      	ldrb	r3, [r7, #6]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d00a      	beq.n	8009e30 <aci_gap_set_auth_requirement+0x3a>
    BLUENRG_memcpy(cp.oob_data, oob_data, 16);
 8009e1a:	683a      	ldr	r2, [r7, #0]
 8009e1c:	f107 030e 	add.w	r3, r7, #14
 8009e20:	6814      	ldr	r4, [r2, #0]
 8009e22:	6850      	ldr	r0, [r2, #4]
 8009e24:	6891      	ldr	r1, [r2, #8]
 8009e26:	68d2      	ldr	r2, [r2, #12]
 8009e28:	601c      	str	r4, [r3, #0]
 8009e2a:	6058      	str	r0, [r3, #4]
 8009e2c:	6099      	str	r1, [r3, #8]
 8009e2e:	60da      	str	r2, [r3, #12]
  }
  cp.min_encryption_key_size = min_encryption_key_size;
 8009e30:	797b      	ldrb	r3, [r7, #5]
 8009e32:	77bb      	strb	r3, [r7, #30]
  cp.max_encryption_key_size = max_encryption_key_size;
 8009e34:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8009e38:	77fb      	strb	r3, [r7, #31]
  cp.use_fixed_pin = use_fixed_pin;
 8009e3a:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8009e3e:	f887 3020 	strb.w	r3, [r7, #32]
  cp.fixed_pin = htobl(fixed_pin);
 8009e42:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009e44:	f8c7 3021 	str.w	r3, [r7, #33]	@ 0x21
  cp.bonding_mode = bonding_mode;
 8009e48:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 8009e4c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009e50:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8009e54:	2218      	movs	r2, #24
 8009e56:	2100      	movs	r1, #0
 8009e58:	4618      	mov	r0, r3
 8009e5a:	f004 f8d5 	bl	800e008 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8009e5e:	233f      	movs	r3, #63	@ 0x3f
 8009e60:	853b      	strh	r3, [r7, #40]	@ 0x28
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 8009e62:	2386      	movs	r3, #134	@ 0x86
 8009e64:	857b      	strh	r3, [r7, #42]	@ 0x2a
  rq.cparam = &cp;
 8009e66:	f107 030c 	add.w	r3, r7, #12
 8009e6a:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.clen = sizeof(cp);
 8009e6c:	231a      	movs	r3, #26
 8009e6e:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.rparam = &status;
 8009e70:	f107 030b 	add.w	r3, r7, #11
 8009e74:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.rlen = 1;
 8009e76:	2301      	movs	r3, #1
 8009e78:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (hci_send_req(&rq, FALSE) < 0)
 8009e7a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8009e7e:	2100      	movs	r1, #0
 8009e80:	4618      	mov	r0, r3
 8009e82:	f000 fda7 	bl	800a9d4 <hci_send_req>
 8009e86:	4603      	mov	r3, r0
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	da01      	bge.n	8009e90 <aci_gap_set_auth_requirement+0x9a>
    return BLE_STATUS_TIMEOUT;
 8009e8c:	23ff      	movs	r3, #255	@ 0xff
 8009e8e:	e005      	b.n	8009e9c <aci_gap_set_auth_requirement+0xa6>

  if (status) {
 8009e90:	7afb      	ldrb	r3, [r7, #11]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d001      	beq.n	8009e9a <aci_gap_set_auth_requirement+0xa4>
    return status;
 8009e96:	7afb      	ldrb	r3, [r7, #11]
 8009e98:	e000      	b.n	8009e9c <aci_gap_set_auth_requirement+0xa6>
  }
    
  return 0;
 8009e9a:	2300      	movs	r3, #0
}
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	3744      	adds	r7, #68	@ 0x44
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	bd90      	pop	{r4, r7, pc}

08009ea4 <aci_gap_update_adv_data>:
  return status;

}

tBleStatus aci_gap_update_adv_data(uint8_t AdvLen, const uint8_t *AdvData)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b092      	sub	sp, #72	@ 0x48
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	4603      	mov	r3, r0
 8009eac:	6039      	str	r1, [r7, #0]
 8009eae:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[32];
  uint8_t indx = 0;
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  if (AdvLen > (sizeof(buffer)-1))
 8009eb6:	79fb      	ldrb	r3, [r7, #7]
 8009eb8:	2b1f      	cmp	r3, #31
 8009eba:	d901      	bls.n	8009ec0 <aci_gap_update_adv_data+0x1c>
    return BLE_STATUS_INVALID_PARAMS;
 8009ebc:	2342      	movs	r3, #66	@ 0x42
 8009ebe:	e03e      	b.n	8009f3e <aci_gap_update_adv_data+0x9a>

  buffer[indx] = AdvLen;
 8009ec0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009ec4:	3348      	adds	r3, #72	@ 0x48
 8009ec6:	443b      	add	r3, r7
 8009ec8:	79fa      	ldrb	r2, [r7, #7]
 8009eca:	f803 2c40 	strb.w	r2, [r3, #-64]
  indx++;
 8009ece:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009ed2:	3301      	adds	r3, #1
 8009ed4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  BLUENRG_memcpy(buffer + indx, AdvData, AdvLen);
 8009ed8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009edc:	f107 0208 	add.w	r2, r7, #8
 8009ee0:	4413      	add	r3, r2
 8009ee2:	79fa      	ldrb	r2, [r7, #7]
 8009ee4:	6839      	ldr	r1, [r7, #0]
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f004 f90d 	bl	800e106 <memcpy>
  indx +=  AdvLen;
 8009eec:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8009ef0:	79fb      	ldrb	r3, [r7, #7]
 8009ef2:	4413      	add	r3, r2
 8009ef4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009ef8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009efc:	2218      	movs	r2, #24
 8009efe:	2100      	movs	r1, #0
 8009f00:	4618      	mov	r0, r3
 8009f02:	f004 f881 	bl	800e008 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8009f06:	233f      	movs	r3, #63	@ 0x3f
 8009f08:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  rq.ocf = OCF_GAP_UPDATE_ADV_DATA;
 8009f0a:	238e      	movs	r3, #142	@ 0x8e
 8009f0c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  rq.cparam = (void *)buffer;
 8009f0e:	f107 0308 	add.w	r3, r7, #8
 8009f12:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.clen = indx;
 8009f14:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009f18:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.rparam = &status;
 8009f1a:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 8009f1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.rlen = 1;
 8009f20:	2301      	movs	r3, #1
 8009f22:	643b      	str	r3, [r7, #64]	@ 0x40
    
  if (hci_send_req(&rq, FALSE) < 0)
 8009f24:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009f28:	2100      	movs	r1, #0
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f000 fd52 	bl	800a9d4 <hci_send_req>
 8009f30:	4603      	mov	r3, r0
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	da01      	bge.n	8009f3a <aci_gap_update_adv_data+0x96>
    return BLE_STATUS_TIMEOUT;
 8009f36:	23ff      	movs	r3, #255	@ 0xff
 8009f38:	e001      	b.n	8009f3e <aci_gap_update_adv_data+0x9a>
    
  return status;
 8009f3a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8009f3e:	4618      	mov	r0, r3
 8009f40:	3748      	adds	r7, #72	@ 0x48
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}

08009f46 <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 8009f46:	b580      	push	{r7, lr}
 8009f48:	b088      	sub	sp, #32
 8009f4a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009f4c:	f107 0308 	add.w	r3, r7, #8
 8009f50:	2218      	movs	r2, #24
 8009f52:	2100      	movs	r1, #0
 8009f54:	4618      	mov	r0, r3
 8009f56:	f004 f857 	bl	800e008 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8009f5a:	233f      	movs	r3, #63	@ 0x3f
 8009f5c:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_GATT_INIT;
 8009f5e:	f240 1301 	movw	r3, #257	@ 0x101
 8009f62:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009f64:	1dfb      	adds	r3, r7, #7
 8009f66:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009f68:	2301      	movs	r3, #1
 8009f6a:	61fb      	str	r3, [r7, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 8009f6c:	f107 0308 	add.w	r3, r7, #8
 8009f70:	2100      	movs	r1, #0
 8009f72:	4618      	mov	r0, r3
 8009f74:	f000 fd2e 	bl	800a9d4 <hci_send_req>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	da01      	bge.n	8009f82 <aci_gatt_init+0x3c>
    return BLE_STATUS_TIMEOUT;
 8009f7e:	23ff      	movs	r3, #255	@ 0xff
 8009f80:	e000      	b.n	8009f84 <aci_gatt_init+0x3e>

  return status;
 8009f82:	79fb      	ldrb	r3, [r7, #7]
}
 8009f84:	4618      	mov	r0, r3
 8009f86:	3720      	adds	r7, #32
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	bd80      	pop	{r7, pc}

08009f8c <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b090      	sub	sp, #64	@ 0x40
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6039      	str	r1, [r7, #0]
 8009f94:	4611      	mov	r1, r2
 8009f96:	461a      	mov	r2, r3
 8009f98:	4603      	mov	r3, r0
 8009f9a:	71fb      	strb	r3, [r7, #7]
 8009f9c:	460b      	mov	r3, r1
 8009f9e:	71bb      	strb	r3, [r7, #6]
 8009fa0:	4613      	mov	r3, r2
 8009fa2:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  buffer[indx] = service_uuid_type;
 8009faa:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8009fae:	3340      	adds	r3, #64	@ 0x40
 8009fb0:	443b      	add	r3, r7
 8009fb2:	79fa      	ldrb	r2, [r7, #7]
 8009fb4:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8009fb8:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8009fbc:	3301      	adds	r3, #1
 8009fbe:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  if(service_uuid_type == UUID_TYPE_16){
 8009fc2:	79fb      	ldrb	r3, [r7, #7]
 8009fc4:	2b01      	cmp	r3, #1
 8009fc6:	d103      	bne.n	8009fd0 <aci_gatt_add_serv+0x44>
    uuid_len = 2;
 8009fc8:	2302      	movs	r3, #2
 8009fca:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8009fce:	e002      	b.n	8009fd6 <aci_gatt_add_serv+0x4a>
  }
  else {
    uuid_len = 16;
 8009fd0:	2310      	movs	r3, #16
 8009fd2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 8009fd6:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8009fda:	f107 020c 	add.w	r2, r7, #12
 8009fde:	4413      	add	r3, r2
 8009fe0:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8009fe4:	6839      	ldr	r1, [r7, #0]
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	f004 f88d 	bl	800e106 <memcpy>
  indx +=  uuid_len;
 8009fec:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 8009ff0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009ff4:	4413      	add	r3, r2
 8009ff6:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  buffer[indx] = service_type;
 8009ffa:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8009ffe:	3340      	adds	r3, #64	@ 0x40
 800a000:	443b      	add	r3, r7
 800a002:	79ba      	ldrb	r2, [r7, #6]
 800a004:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 800a008:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800a00c:	3301      	adds	r3, #1
 800a00e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  buffer[indx] = max_attr_records;
 800a012:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800a016:	3340      	adds	r3, #64	@ 0x40
 800a018:	443b      	add	r3, r7
 800a01a:	797a      	ldrb	r2, [r7, #5]
 800a01c:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 800a020:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800a024:	3301      	adds	r3, #1
 800a026:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800a02a:	f107 0320 	add.w	r3, r7, #32
 800a02e:	2203      	movs	r2, #3
 800a030:	2100      	movs	r1, #0
 800a032:	4618      	mov	r0, r3
 800a034:	f003 ffe8 	bl	800e008 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a038:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a03c:	2218      	movs	r2, #24
 800a03e:	2100      	movs	r1, #0
 800a040:	4618      	mov	r0, r3
 800a042:	f003 ffe1 	bl	800e008 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800a046:	233f      	movs	r3, #63	@ 0x3f
 800a048:	84bb      	strh	r3, [r7, #36]	@ 0x24
  rq.ocf = OCF_GATT_ADD_SERV;
 800a04a:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800a04e:	84fb      	strh	r3, [r7, #38]	@ 0x26
  rq.cparam = (void *)buffer;
 800a050:	f107 030c 	add.w	r3, r7, #12
 800a054:	62fb      	str	r3, [r7, #44]	@ 0x2c
  rq.clen = indx;
 800a056:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800a05a:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.rparam = &resp;
 800a05c:	f107 0320 	add.w	r3, r7, #32
 800a060:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 800a062:	2303      	movs	r3, #3
 800a064:	63bb      	str	r3, [r7, #56]	@ 0x38

  if (hci_send_req(&rq, FALSE) < 0)
 800a066:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a06a:	2100      	movs	r1, #0
 800a06c:	4618      	mov	r0, r3
 800a06e:	f000 fcb1 	bl	800a9d4 <hci_send_req>
 800a072:	4603      	mov	r3, r0
 800a074:	2b00      	cmp	r3, #0
 800a076:	da01      	bge.n	800a07c <aci_gatt_add_serv+0xf0>
    return BLE_STATUS_TIMEOUT;
 800a078:	23ff      	movs	r3, #255	@ 0xff
 800a07a:	e00c      	b.n	800a096 <aci_gatt_add_serv+0x10a>

  if (resp.status) {
 800a07c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d002      	beq.n	800a08a <aci_gatt_add_serv+0xfe>
    return resp.status;
 800a084:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a088:	e005      	b.n	800a096 <aci_gatt_add_serv+0x10a>
  }
    
  *serviceHandle = btohs(resp.handle);
 800a08a:	f8b7 3021 	ldrh.w	r3, [r7, #33]	@ 0x21
 800a08e:	b29a      	uxth	r2, r3
 800a090:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a092:	801a      	strh	r2, [r3, #0]

  return 0;
 800a094:	2300      	movs	r3, #0
}
 800a096:	4618      	mov	r0, r3
 800a098:	3740      	adds	r7, #64	@ 0x40
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}

0800a09e <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 800a09e:	b580      	push	{r7, lr}
 800a0a0:	b092      	sub	sp, #72	@ 0x48
 800a0a2:	af00      	add	r7, sp, #0
 800a0a4:	603a      	str	r2, [r7, #0]
 800a0a6:	461a      	mov	r2, r3
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	80fb      	strh	r3, [r7, #6]
 800a0ac:	460b      	mov	r3, r1
 800a0ae:	717b      	strb	r3, [r7, #5]
 800a0b0:	4613      	mov	r3, r2
 800a0b2:	713b      	strb	r3, [r7, #4]
  struct hci_request rq;
  gatt_add_serv_rp resp;
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  serviceHandle = htobs(serviceHandle);
 800a0ba:	88fb      	ldrh	r3, [r7, #6]
 800a0bc:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 800a0be:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800a0c2:	f107 020c 	add.w	r2, r7, #12
 800a0c6:	4413      	add	r3, r2
 800a0c8:	88fa      	ldrh	r2, [r7, #6]
 800a0ca:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800a0cc:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800a0d0:	3302      	adds	r3, #2
 800a0d2:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = charUuidType;
 800a0d6:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800a0da:	3348      	adds	r3, #72	@ 0x48
 800a0dc:	443b      	add	r3, r7
 800a0de:	797a      	ldrb	r2, [r7, #5]
 800a0e0:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800a0e4:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800a0e8:	3301      	adds	r3, #1
 800a0ea:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  if(charUuidType == UUID_TYPE_16){
 800a0ee:	797b      	ldrb	r3, [r7, #5]
 800a0f0:	2b01      	cmp	r3, #1
 800a0f2:	d103      	bne.n	800a0fc <aci_gatt_add_char+0x5e>
    uuid_len = 2;
 800a0f4:	2302      	movs	r3, #2
 800a0f6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a0fa:	e002      	b.n	800a102 <aci_gatt_add_char+0x64>
  }
  else {
    uuid_len = 16;
 800a0fc:	2310      	movs	r3, #16
 800a0fe:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 800a102:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800a106:	f107 020c 	add.w	r2, r7, #12
 800a10a:	4413      	add	r3, r2
 800a10c:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 800a110:	6839      	ldr	r1, [r7, #0]
 800a112:	4618      	mov	r0, r3
 800a114:	f003 fff7 	bl	800e106 <memcpy>
  indx +=  uuid_len;
 800a118:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 800a11c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a120:	4413      	add	r3, r2
 800a122:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = charValueLen;
 800a126:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800a12a:	3348      	adds	r3, #72	@ 0x48
 800a12c:	443b      	add	r3, r7
 800a12e:	793a      	ldrb	r2, [r7, #4]
 800a130:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800a134:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800a138:	3301      	adds	r3, #1
 800a13a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = charProperties;
 800a13e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800a142:	3348      	adds	r3, #72	@ 0x48
 800a144:	443b      	add	r3, r7
 800a146:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 800a14a:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800a14e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800a152:	3301      	adds	r3, #1
 800a154:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = secPermissions;
 800a158:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800a15c:	3348      	adds	r3, #72	@ 0x48
 800a15e:	443b      	add	r3, r7
 800a160:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800a164:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800a168:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800a16c:	3301      	adds	r3, #1
 800a16e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = gattEvtMask;
 800a172:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800a176:	3348      	adds	r3, #72	@ 0x48
 800a178:	443b      	add	r3, r7
 800a17a:	f897 2058 	ldrb.w	r2, [r7, #88]	@ 0x58
 800a17e:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800a182:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800a186:	3301      	adds	r3, #1
 800a188:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = encryKeySize;
 800a18c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800a190:	3348      	adds	r3, #72	@ 0x48
 800a192:	443b      	add	r3, r7
 800a194:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800a198:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800a19c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800a1a0:	3301      	adds	r3, #1
 800a1a2:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = isVariable;
 800a1a6:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800a1aa:	3348      	adds	r3, #72	@ 0x48
 800a1ac:	443b      	add	r3, r7
 800a1ae:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 800a1b2:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800a1b6:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800a1ba:	3301      	adds	r3, #1
 800a1bc:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800a1c0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800a1c4:	2203      	movs	r2, #3
 800a1c6:	2100      	movs	r1, #0
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	f003 ff1d 	bl	800e008 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a1ce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a1d2:	2218      	movs	r2, #24
 800a1d4:	2100      	movs	r1, #0
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	f003 ff16 	bl	800e008 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800a1dc:	233f      	movs	r3, #63	@ 0x3f
 800a1de:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  rq.ocf = OCF_GATT_ADD_CHAR;
 800a1e0:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800a1e4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  rq.cparam = (void *)buffer;
 800a1e6:	f107 030c 	add.w	r3, r7, #12
 800a1ea:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.clen = indx;
 800a1ec:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800a1f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.rparam = &resp;
 800a1f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800a1f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 800a1f8:	2303      	movs	r3, #3
 800a1fa:	643b      	str	r3, [r7, #64]	@ 0x40

  if (hci_send_req(&rq, FALSE) < 0)
 800a1fc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a200:	2100      	movs	r1, #0
 800a202:	4618      	mov	r0, r3
 800a204:	f000 fbe6 	bl	800a9d4 <hci_send_req>
 800a208:	4603      	mov	r3, r0
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	da01      	bge.n	800a212 <aci_gatt_add_char+0x174>
    return BLE_STATUS_TIMEOUT;
 800a20e:	23ff      	movs	r3, #255	@ 0xff
 800a210:	e00c      	b.n	800a22c <aci_gatt_add_char+0x18e>

  if (resp.status) {
 800a212:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a216:	2b00      	cmp	r3, #0
 800a218:	d002      	beq.n	800a220 <aci_gatt_add_char+0x182>
    return resp.status;
 800a21a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a21e:	e005      	b.n	800a22c <aci_gatt_add_char+0x18e>
  }
    
  *charHandle = btohs(resp.handle);
 800a220:	f8b7 3029 	ldrh.w	r3, [r7, #41]	@ 0x29
 800a224:	b29a      	uxth	r2, r3
 800a226:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a228:	801a      	strh	r2, [r3, #0]

  return 0;
 800a22a:	2300      	movs	r3, #0
}
 800a22c:	4618      	mov	r0, r3
 800a22e:	3748      	adds	r7, #72	@ 0x48
 800a230:	46bd      	mov	sp, r7
 800a232:	bd80      	pop	{r7, pc}

0800a234 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 800a234:	b590      	push	{r4, r7, lr}
 800a236:	b0ab      	sub	sp, #172	@ 0xac
 800a238:	af00      	add	r7, sp, #0
 800a23a:	4604      	mov	r4, r0
 800a23c:	4608      	mov	r0, r1
 800a23e:	4611      	mov	r1, r2
 800a240:	461a      	mov	r2, r3
 800a242:	4623      	mov	r3, r4
 800a244:	80fb      	strh	r3, [r7, #6]
 800a246:	4603      	mov	r3, r0
 800a248:	80bb      	strh	r3, [r7, #4]
 800a24a:	460b      	mov	r3, r1
 800a24c:	70fb      	strb	r3, [r7, #3]
 800a24e:	4613      	mov	r3, r2
 800a250:	70bb      	strb	r3, [r7, #2]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 800a252:	2300      	movs	r3, #0
 800a254:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 800a258:	78bb      	ldrb	r3, [r7, #2]
 800a25a:	2b7a      	cmp	r3, #122	@ 0x7a
 800a25c:	d901      	bls.n	800a262 <aci_gatt_update_char_value+0x2e>
    return BLE_STATUS_INVALID_PARAMS;
 800a25e:	2342      	movs	r3, #66	@ 0x42
 800a260:	e074      	b.n	800a34c <aci_gatt_update_char_value+0x118>

  servHandle = htobs(servHandle);
 800a262:	88fb      	ldrh	r3, [r7, #6]
 800a264:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 800a266:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800a26a:	f107 0208 	add.w	r2, r7, #8
 800a26e:	4413      	add	r3, r2
 800a270:	88fa      	ldrh	r2, [r7, #6]
 800a272:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800a274:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800a278:	3302      	adds	r3, #2
 800a27a:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  charHandle = htobs(charHandle);
 800a27e:	88bb      	ldrh	r3, [r7, #4]
 800a280:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 800a282:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800a286:	f107 0208 	add.w	r2, r7, #8
 800a28a:	4413      	add	r3, r2
 800a28c:	88ba      	ldrh	r2, [r7, #4]
 800a28e:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800a290:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800a294:	3302      	adds	r3, #2
 800a296:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  buffer[indx] = charValOffset;
 800a29a:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800a29e:	33a8      	adds	r3, #168	@ 0xa8
 800a2a0:	443b      	add	r3, r7
 800a2a2:	78fa      	ldrb	r2, [r7, #3]
 800a2a4:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 800a2a8:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800a2ac:	3301      	adds	r3, #1
 800a2ae:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  buffer[indx] = charValueLen;
 800a2b2:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800a2b6:	33a8      	adds	r3, #168	@ 0xa8
 800a2b8:	443b      	add	r3, r7
 800a2ba:	78ba      	ldrb	r2, [r7, #2]
 800a2bc:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 800a2c0:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800a2c4:	3301      	adds	r3, #1
 800a2c6:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 800a2ca:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800a2ce:	f107 0208 	add.w	r2, r7, #8
 800a2d2:	4413      	add	r3, r2
 800a2d4:	78ba      	ldrb	r2, [r7, #2]
 800a2d6:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f003 ff13 	bl	800e106 <memcpy>
  indx +=  charValueLen;
 800a2e0:	f897 20a7 	ldrb.w	r2, [r7, #167]	@ 0xa7
 800a2e4:	78bb      	ldrb	r3, [r7, #2]
 800a2e6:	4413      	add	r3, r2
 800a2e8:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a2ec:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800a2f0:	2218      	movs	r2, #24
 800a2f2:	2100      	movs	r1, #0
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	f003 fe87 	bl	800e008 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800a2fa:	233f      	movs	r3, #63	@ 0x3f
 800a2fc:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 800a300:	f44f 7383 	mov.w	r3, #262	@ 0x106
 800a304:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
  rq.cparam = (void *)buffer;
 800a308:	f107 0308 	add.w	r3, r7, #8
 800a30c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  rq.clen = indx;
 800a310:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800a314:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  rq.rparam = &status;
 800a318:	f107 038b 	add.w	r3, r7, #139	@ 0x8b
 800a31c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  rq.rlen = 1;
 800a320:	2301      	movs	r3, #1
 800a322:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 800a326:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800a32a:	2100      	movs	r1, #0
 800a32c:	4618      	mov	r0, r3
 800a32e:	f000 fb51 	bl	800a9d4 <hci_send_req>
 800a332:	4603      	mov	r3, r0
 800a334:	2b00      	cmp	r3, #0
 800a336:	da01      	bge.n	800a33c <aci_gatt_update_char_value+0x108>
    return BLE_STATUS_TIMEOUT;
 800a338:	23ff      	movs	r3, #255	@ 0xff
 800a33a:	e007      	b.n	800a34c <aci_gatt_update_char_value+0x118>

  if (status) {
 800a33c:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 800a340:	2b00      	cmp	r3, #0
 800a342:	d002      	beq.n	800a34a <aci_gatt_update_char_value+0x116>
    return status;
 800a344:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 800a348:	e000      	b.n	800a34c <aci_gatt_update_char_value+0x118>
  }

  return 0;
 800a34a:	2300      	movs	r3, #0
}
 800a34c:	4618      	mov	r0, r3
 800a34e:	37ac      	adds	r7, #172	@ 0xac
 800a350:	46bd      	mov	sp, r7
 800a352:	bd90      	pop	{r4, r7, pc}

0800a354 <aci_gatt_write_response>:
                                   uint16_t attr_handle,
                                   uint8_t write_status,
                                   uint8_t err_code,
                                   uint8_t att_val_len,
                                   uint8_t *att_val)
{
 800a354:	b590      	push	{r4, r7, lr}
 800a356:	b0ab      	sub	sp, #172	@ 0xac
 800a358:	af00      	add	r7, sp, #0
 800a35a:	4604      	mov	r4, r0
 800a35c:	4608      	mov	r0, r1
 800a35e:	4611      	mov	r1, r2
 800a360:	461a      	mov	r2, r3
 800a362:	4623      	mov	r3, r4
 800a364:	80fb      	strh	r3, [r7, #6]
 800a366:	4603      	mov	r3, r0
 800a368:	80bb      	strh	r3, [r7, #4]
 800a36a:	460b      	mov	r3, r1
 800a36c:	70fb      	strb	r3, [r7, #3]
 800a36e:	4613      	mov	r3, r2
 800a370:	70bb      	strb	r3, [r7, #2]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 800a372:	2300      	movs	r3, #0
 800a374:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
  
  if ((att_val_len+7) > HCI_MAX_PAYLOAD_SIZE)
 800a378:	f897 30b8 	ldrb.w	r3, [r7, #184]	@ 0xb8
 800a37c:	2b79      	cmp	r3, #121	@ 0x79
 800a37e:	d901      	bls.n	800a384 <aci_gatt_write_response+0x30>
    return BLE_STATUS_INVALID_PARAMS;
 800a380:	2342      	movs	r3, #66	@ 0x42
 800a382:	e083      	b.n	800a48c <aci_gatt_write_response+0x138>

  conn_handle = htobs(conn_handle);  
 800a384:	88fb      	ldrh	r3, [r7, #6]
 800a386:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &conn_handle, 2);
 800a388:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800a38c:	f107 0208 	add.w	r2, r7, #8
 800a390:	4413      	add	r3, r2
 800a392:	88fa      	ldrh	r2, [r7, #6]
 800a394:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800a396:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800a39a:	3302      	adds	r3, #2
 800a39c:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  attr_handle = htobs(attr_handle);
 800a3a0:	88bb      	ldrh	r3, [r7, #4]
 800a3a2:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &attr_handle, 2);
 800a3a4:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800a3a8:	f107 0208 	add.w	r2, r7, #8
 800a3ac:	4413      	add	r3, r2
 800a3ae:	88ba      	ldrh	r2, [r7, #4]
 800a3b0:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800a3b2:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800a3b6:	3302      	adds	r3, #2
 800a3b8:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  buffer[indx] = write_status;
 800a3bc:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800a3c0:	33a8      	adds	r3, #168	@ 0xa8
 800a3c2:	443b      	add	r3, r7
 800a3c4:	78fa      	ldrb	r2, [r7, #3]
 800a3c6:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx += 1;
 800a3ca:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800a3ce:	3301      	adds	r3, #1
 800a3d0:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  buffer[indx] = err_code;
 800a3d4:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800a3d8:	33a8      	adds	r3, #168	@ 0xa8
 800a3da:	443b      	add	r3, r7
 800a3dc:	78ba      	ldrb	r2, [r7, #2]
 800a3de:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx += 1;
 800a3e2:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800a3e6:	3301      	adds	r3, #1
 800a3e8:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  buffer[indx] = att_val_len;
 800a3ec:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800a3f0:	33a8      	adds	r3, #168	@ 0xa8
 800a3f2:	443b      	add	r3, r7
 800a3f4:	f897 20b8 	ldrb.w	r2, [r7, #184]	@ 0xb8
 800a3f8:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx += 1;
 800a3fc:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800a400:	3301      	adds	r3, #1
 800a402:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  BLUENRG_memcpy(buffer + indx, att_val, att_val_len);
 800a406:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800a40a:	f107 0208 	add.w	r2, r7, #8
 800a40e:	4413      	add	r3, r2
 800a410:	f897 20b8 	ldrb.w	r2, [r7, #184]	@ 0xb8
 800a414:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 800a418:	4618      	mov	r0, r3
 800a41a:	f003 fe74 	bl	800e106 <memcpy>
  indx += att_val_len;
 800a41e:	f897 20a7 	ldrb.w	r2, [r7, #167]	@ 0xa7
 800a422:	f897 30b8 	ldrb.w	r3, [r7, #184]	@ 0xb8
 800a426:	4413      	add	r3, r2
 800a428:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a42c:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800a430:	2218      	movs	r2, #24
 800a432:	2100      	movs	r1, #0
 800a434:	4618      	mov	r0, r3
 800a436:	f003 fde7 	bl	800e008 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800a43a:	233f      	movs	r3, #63	@ 0x3f
 800a43c:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
  rq.ocf = OCF_GATT_WRITE_RESPONSE;
 800a440:	f44f 7393 	mov.w	r3, #294	@ 0x126
 800a444:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
  rq.cparam = (void *)buffer;
 800a448:	f107 0308 	add.w	r3, r7, #8
 800a44c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  rq.clen = indx;
 800a450:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800a454:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  rq.rparam = &status;
 800a458:	f107 038b 	add.w	r3, r7, #139	@ 0x8b
 800a45c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  rq.rlen = 1;
 800a460:	2301      	movs	r3, #1
 800a462:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 800a466:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800a46a:	2100      	movs	r1, #0
 800a46c:	4618      	mov	r0, r3
 800a46e:	f000 fab1 	bl	800a9d4 <hci_send_req>
 800a472:	4603      	mov	r3, r0
 800a474:	2b00      	cmp	r3, #0
 800a476:	da01      	bge.n	800a47c <aci_gatt_write_response+0x128>
    return BLE_STATUS_TIMEOUT;
 800a478:	23ff      	movs	r3, #255	@ 0xff
 800a47a:	e007      	b.n	800a48c <aci_gatt_write_response+0x138>

  if (status) {
 800a47c:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 800a480:	2b00      	cmp	r3, #0
 800a482:	d002      	beq.n	800a48a <aci_gatt_write_response+0x136>
    return status;
 800a484:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 800a488:	e000      	b.n	800a48c <aci_gatt_write_response+0x138>
  }

  return 0;
 800a48a:	2300      	movs	r3, #0
}
 800a48c:	4618      	mov	r0, r3
 800a48e:	37ac      	adds	r7, #172	@ 0xac
 800a490:	46bd      	mov	sp, r7
 800a492:	bd90      	pop	{r4, r7, pc}

0800a494 <aci_gatt_allow_read>:

tBleStatus aci_gatt_allow_read(uint16_t conn_handle)
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b08a      	sub	sp, #40	@ 0x28
 800a498:	af00      	add	r7, sp, #0
 800a49a:	4603      	mov	r3, r0
 800a49c:	80fb      	strh	r3, [r7, #6]
    struct hci_request rq;
    gatt_allow_read_cp cp;
    uint8_t status;
    
    cp.conn_handle = htobs(conn_handle);
 800a49e:	88fb      	ldrh	r3, [r7, #6]
 800a4a0:	81bb      	strh	r3, [r7, #12]

    BLUENRG_memset(&rq, 0, sizeof(rq));
 800a4a2:	f107 0310 	add.w	r3, r7, #16
 800a4a6:	2218      	movs	r2, #24
 800a4a8:	2100      	movs	r1, #0
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	f003 fdac 	bl	800e008 <memset>
    rq.ogf = OGF_VENDOR_CMD;
 800a4b0:	233f      	movs	r3, #63	@ 0x3f
 800a4b2:	823b      	strh	r3, [r7, #16]
    rq.ocf = OCF_GATT_ALLOW_READ;
 800a4b4:	f240 1327 	movw	r3, #295	@ 0x127
 800a4b8:	827b      	strh	r3, [r7, #18]
    rq.cparam = &cp;
 800a4ba:	f107 030c 	add.w	r3, r7, #12
 800a4be:	61bb      	str	r3, [r7, #24]
    rq.clen = GATT_ALLOW_READ_CP_SIZE;
 800a4c0:	2302      	movs	r3, #2
 800a4c2:	61fb      	str	r3, [r7, #28]
    rq.rparam = &status;
 800a4c4:	f107 030b 	add.w	r3, r7, #11
 800a4c8:	623b      	str	r3, [r7, #32]
    rq.rlen = 1;
 800a4ca:	2301      	movs	r3, #1
 800a4cc:	627b      	str	r3, [r7, #36]	@ 0x24

    if (hci_send_req(&rq, FALSE) < 0)
 800a4ce:	f107 0310 	add.w	r3, r7, #16
 800a4d2:	2100      	movs	r1, #0
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	f000 fa7d 	bl	800a9d4 <hci_send_req>
 800a4da:	4603      	mov	r3, r0
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	da01      	bge.n	800a4e4 <aci_gatt_allow_read+0x50>
      return BLE_STATUS_TIMEOUT;
 800a4e0:	23ff      	movs	r3, #255	@ 0xff
 800a4e2:	e000      	b.n	800a4e6 <aci_gatt_allow_read+0x52>

    return status;
 800a4e4:	7afb      	ldrb	r3, [r7, #11]
}
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	3728      	adds	r7, #40	@ 0x28
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bd80      	pop	{r7, pc}

0800a4ee <aci_hal_read_config_data>:

  return status;
}

tBleStatus aci_hal_read_config_data(uint8_t offset, uint16_t data_len, uint8_t *data_len_out_p, uint8_t *data)
{
 800a4ee:	b580      	push	{r7, lr}
 800a4f0:	b0ac      	sub	sp, #176	@ 0xb0
 800a4f2:	af00      	add	r7, sp, #0
 800a4f4:	60ba      	str	r2, [r7, #8]
 800a4f6:	607b      	str	r3, [r7, #4]
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	73fb      	strb	r3, [r7, #15]
 800a4fc:	460b      	mov	r3, r1
 800a4fe:	81bb      	strh	r3, [r7, #12]
  struct hci_request rq;
  hal_read_config_data_cp cp;
  hal_read_config_data_rp rp;
  
  cp.offset = offset;
 800a500:	7bfb      	ldrb	r3, [r7, #15]
 800a502:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a506:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800a50a:	2218      	movs	r2, #24
 800a50c:	2100      	movs	r1, #0
 800a50e:	4618      	mov	r0, r3
 800a510:	f003 fd7a 	bl	800e008 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800a514:	233f      	movs	r3, #63	@ 0x3f
 800a516:	f8a7 3098 	strh.w	r3, [r7, #152]	@ 0x98
  rq.ocf = OCF_HAL_READ_CONFIG_DATA;
 800a51a:	230d      	movs	r3, #13
 800a51c:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
  rq.cparam = &cp;
 800a520:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800a524:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  rq.clen = sizeof(cp);
 800a528:	2301      	movs	r3, #1
 800a52a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  rq.rparam = &rp;
 800a52e:	f107 0314 	add.w	r3, r7, #20
 800a532:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  rq.rlen = sizeof(rp);
 800a536:	2380      	movs	r3, #128	@ 0x80
 800a538:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  
  if (hci_send_req(&rq, FALSE) < 0)
 800a53c:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800a540:	2100      	movs	r1, #0
 800a542:	4618      	mov	r0, r3
 800a544:	f000 fa46 	bl	800a9d4 <hci_send_req>
 800a548:	4603      	mov	r3, r0
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	da01      	bge.n	800a552 <aci_hal_read_config_data+0x64>
    return BLE_STATUS_TIMEOUT;
 800a54e:	23ff      	movs	r3, #255	@ 0xff
 800a550:	e01e      	b.n	800a590 <aci_hal_read_config_data+0xa2>
  
  if(rp.status)
 800a552:	7d3b      	ldrb	r3, [r7, #20]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d001      	beq.n	800a55c <aci_hal_read_config_data+0x6e>
    return rp.status;
 800a558:	7d3b      	ldrb	r3, [r7, #20]
 800a55a:	e019      	b.n	800a590 <aci_hal_read_config_data+0xa2>
  
  *data_len_out_p = rq.rlen-1;
 800a55c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a560:	b2db      	uxtb	r3, r3
 800a562:	3b01      	subs	r3, #1
 800a564:	b2da      	uxtb	r2, r3
 800a566:	68bb      	ldr	r3, [r7, #8]
 800a568:	701a      	strb	r2, [r3, #0]
  
  BLUENRG_memcpy(data, rp.data, MIN(data_len, *data_len_out_p));
 800a56a:	68bb      	ldr	r3, [r7, #8]
 800a56c:	781b      	ldrb	r3, [r3, #0]
 800a56e:	461a      	mov	r2, r3
 800a570:	89bb      	ldrh	r3, [r7, #12]
 800a572:	4293      	cmp	r3, r2
 800a574:	d201      	bcs.n	800a57a <aci_hal_read_config_data+0x8c>
 800a576:	89ba      	ldrh	r2, [r7, #12]
 800a578:	e002      	b.n	800a580 <aci_hal_read_config_data+0x92>
 800a57a:	68bb      	ldr	r3, [r7, #8]
 800a57c:	781b      	ldrb	r3, [r3, #0]
 800a57e:	461a      	mov	r2, r3
 800a580:	f107 0314 	add.w	r3, r7, #20
 800a584:	3301      	adds	r3, #1
 800a586:	4619      	mov	r1, r3
 800a588:	6878      	ldr	r0, [r7, #4]
 800a58a:	f003 fdbc 	bl	800e106 <memcpy>
  
  return 0;
 800a58e:	2300      	movs	r3, #0
}
 800a590:	4618      	mov	r0, r3
 800a592:	37b0      	adds	r7, #176	@ 0xb0
 800a594:	46bd      	mov	sp, r7
 800a596:	bd80      	pop	{r7, pc}

0800a598 <aci_hal_set_tx_power_level>:

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b08a      	sub	sp, #40	@ 0x28
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	4603      	mov	r3, r0
 800a5a0:	460a      	mov	r2, r1
 800a5a2:	71fb      	strb	r3, [r7, #7]
 800a5a4:	4613      	mov	r3, r2
 800a5a6:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  hal_set_tx_power_level_cp cp;    
  uint8_t status;
    
  cp.en_high_power = en_high_power;
 800a5a8:	79fb      	ldrb	r3, [r7, #7]
 800a5aa:	733b      	strb	r3, [r7, #12]
  cp.pa_level = pa_level;
 800a5ac:	79bb      	ldrb	r3, [r7, #6]
 800a5ae:	737b      	strb	r3, [r7, #13]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a5b0:	f107 0310 	add.w	r3, r7, #16
 800a5b4:	2218      	movs	r2, #24
 800a5b6:	2100      	movs	r1, #0
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	f003 fd25 	bl	800e008 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800a5be:	233f      	movs	r3, #63	@ 0x3f
 800a5c0:	823b      	strh	r3, [r7, #16]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
 800a5c2:	230f      	movs	r3, #15
 800a5c4:	827b      	strh	r3, [r7, #18]
  rq.cparam = &cp;
 800a5c6:	f107 030c 	add.w	r3, r7, #12
 800a5ca:	61bb      	str	r3, [r7, #24]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 800a5cc:	2302      	movs	r3, #2
 800a5ce:	61fb      	str	r3, [r7, #28]
  rq.rparam = &status;
 800a5d0:	f107 030b 	add.w	r3, r7, #11
 800a5d4:	623b      	str	r3, [r7, #32]
  rq.rlen = 1;
 800a5d6:	2301      	movs	r3, #1
 800a5d8:	627b      	str	r3, [r7, #36]	@ 0x24

  if (hci_send_req(&rq, FALSE) < 0)
 800a5da:	f107 0310 	add.w	r3, r7, #16
 800a5de:	2100      	movs	r1, #0
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	f000 f9f7 	bl	800a9d4 <hci_send_req>
 800a5e6:	4603      	mov	r3, r0
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	da01      	bge.n	800a5f0 <aci_hal_set_tx_power_level+0x58>
    return BLE_STATUS_TIMEOUT;
 800a5ec:	23ff      	movs	r3, #255	@ 0xff
 800a5ee:	e000      	b.n	800a5f2 <aci_hal_set_tx_power_level+0x5a>

  return status;
 800a5f0:	7afb      	ldrb	r3, [r7, #11]
}
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	3728      	adds	r7, #40	@ 0x28
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	bd80      	pop	{r7, pc}

0800a5fa <getBlueNRGVersion>:
#include "hci.h"
#include "hci_le.h"
#include "string.h"

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 800a5fa:	b590      	push	{r4, r7, lr}
 800a5fc:	b089      	sub	sp, #36	@ 0x24
 800a5fe:	af02      	add	r7, sp, #8
 800a600:	6078      	str	r0, [r7, #4]
 800a602:	6039      	str	r1, [r7, #0]
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 800a604:	f107 0410 	add.w	r4, r7, #16
 800a608:	f107 0215 	add.w	r2, r7, #21
 800a60c:	f107 0112 	add.w	r1, r7, #18
 800a610:	f107 0016 	add.w	r0, r7, #22
 800a614:	f107 030e 	add.w	r3, r7, #14
 800a618:	9300      	str	r3, [sp, #0]
 800a61a:	4623      	mov	r3, r4
 800a61c:	f000 f853 	bl	800a6c6 <hci_le_read_local_version>
 800a620:	4603      	mov	r3, r0
 800a622:	75fb      	strb	r3, [r7, #23]
                                     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 800a624:	7dfb      	ldrb	r3, [r7, #23]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d126      	bne.n	800a678 <getBlueNRGVersion+0x7e>
    *hwVersion = hci_revision >> 8;
 800a62a:	8a7b      	ldrh	r3, [r7, #18]
 800a62c:	0a1b      	lsrs	r3, r3, #8
 800a62e:	b29b      	uxth	r3, r3
 800a630:	b2da      	uxtb	r2, r3
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	701a      	strb	r2, [r3, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
 800a636:	8a7b      	ldrh	r3, [r7, #18]
 800a638:	021b      	lsls	r3, r3, #8
 800a63a:	b29a      	uxth	r2, r3
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	801a      	strh	r2, [r3, #0]
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	881b      	ldrh	r3, [r3, #0]
 800a644:	b21a      	sxth	r2, r3
 800a646:	89fb      	ldrh	r3, [r7, #14]
 800a648:	091b      	lsrs	r3, r3, #4
 800a64a:	b29b      	uxth	r3, r3
 800a64c:	011b      	lsls	r3, r3, #4
 800a64e:	b21b      	sxth	r3, r3
 800a650:	b2db      	uxtb	r3, r3
 800a652:	b21b      	sxth	r3, r3
 800a654:	4313      	orrs	r3, r2
 800a656:	b21b      	sxth	r3, r3
 800a658:	b29a      	uxth	r2, r3
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	801a      	strh	r2, [r3, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	881b      	ldrh	r3, [r3, #0]
 800a662:	b21a      	sxth	r2, r3
 800a664:	89fb      	ldrh	r3, [r7, #14]
 800a666:	b21b      	sxth	r3, r3
 800a668:	f003 030f 	and.w	r3, r3, #15
 800a66c:	b21b      	sxth	r3, r3
 800a66e:	4313      	orrs	r3, r2
 800a670:	b21b      	sxth	r3, r3
 800a672:	b29a      	uxth	r2, r3
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	801a      	strh	r2, [r3, #0]
  }
  return status;
 800a678:	7dfb      	ldrb	r3, [r7, #23]
}
 800a67a:	4618      	mov	r0, r3
 800a67c:	371c      	adds	r7, #28
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd90      	pop	{r4, r7, pc}

0800a682 <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 800a682:	b580      	push	{r7, lr}
 800a684:	b088      	sub	sp, #32
 800a686:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a688:	f107 0308 	add.w	r3, r7, #8
 800a68c:	2218      	movs	r2, #24
 800a68e:	2100      	movs	r1, #0
 800a690:	4618      	mov	r0, r3
 800a692:	f003 fcb9 	bl	800e008 <memset>
  rq.ogf = OGF_HOST_CTL;
 800a696:	2303      	movs	r3, #3
 800a698:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_RESET;
 800a69a:	2303      	movs	r3, #3
 800a69c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800a69e:	1dfb      	adds	r3, r7, #7
 800a6a0:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800a6a2:	2301      	movs	r3, #1
 800a6a4:	61fb      	str	r3, [r7, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 800a6a6:	f107 0308 	add.w	r3, r7, #8
 800a6aa:	2100      	movs	r1, #0
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	f000 f991 	bl	800a9d4 <hci_send_req>
 800a6b2:	4603      	mov	r3, r0
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	da01      	bge.n	800a6bc <hci_reset+0x3a>
    return BLE_STATUS_TIMEOUT;
 800a6b8:	23ff      	movs	r3, #255	@ 0xff
 800a6ba:	e000      	b.n	800a6be <hci_reset+0x3c>
  
  return status;  
 800a6bc:	79fb      	ldrb	r3, [r7, #7]
}
 800a6be:	4618      	mov	r0, r3
 800a6c0:	3720      	adds	r7, #32
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bd80      	pop	{r7, pc}

0800a6c6 <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 800a6c6:	b580      	push	{r7, lr}
 800a6c8:	b08e      	sub	sp, #56	@ 0x38
 800a6ca:	af00      	add	r7, sp, #0
 800a6cc:	60f8      	str	r0, [r7, #12]
 800a6ce:	60b9      	str	r1, [r7, #8]
 800a6d0:	607a      	str	r2, [r7, #4]
 800a6d2:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  read_local_version_rp resp;
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800a6d4:	f107 0314 	add.w	r3, r7, #20
 800a6d8:	2209      	movs	r2, #9
 800a6da:	2100      	movs	r1, #0
 800a6dc:	4618      	mov	r0, r3
 800a6de:	f003 fc93 	bl	800e008 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a6e2:	f107 0320 	add.w	r3, r7, #32
 800a6e6:	2218      	movs	r2, #24
 800a6e8:	2100      	movs	r1, #0
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	f003 fc8c 	bl	800e008 <memset>
  rq.ogf = OGF_INFO_PARAM;
 800a6f0:	2304      	movs	r3, #4
 800a6f2:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_READ_LOCAL_VERSION;
 800a6f4:	2301      	movs	r3, #1
 800a6f6:	847b      	strh	r3, [r7, #34]	@ 0x22
  rq.cparam = NULL;
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  rq.clen = 0;
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  rq.rparam = &resp;
 800a700:	f107 0314 	add.w	r3, r7, #20
 800a704:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 800a706:	2309      	movs	r3, #9
 800a708:	637b      	str	r3, [r7, #52]	@ 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 800a70a:	f107 0320 	add.w	r3, r7, #32
 800a70e:	2100      	movs	r1, #0
 800a710:	4618      	mov	r0, r3
 800a712:	f000 f95f 	bl	800a9d4 <hci_send_req>
 800a716:	4603      	mov	r3, r0
 800a718:	2b00      	cmp	r3, #0
 800a71a:	da01      	bge.n	800a720 <hci_le_read_local_version+0x5a>
    return BLE_STATUS_TIMEOUT;
 800a71c:	23ff      	movs	r3, #255	@ 0xff
 800a71e:	e018      	b.n	800a752 <hci_le_read_local_version+0x8c>
  
  if (resp.status) {
 800a720:	7d3b      	ldrb	r3, [r7, #20]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d001      	beq.n	800a72a <hci_le_read_local_version+0x64>
    return resp.status;
 800a726:	7d3b      	ldrb	r3, [r7, #20]
 800a728:	e013      	b.n	800a752 <hci_le_read_local_version+0x8c>
  }
  
  
  *hci_version = resp.hci_version;
 800a72a:	7d7a      	ldrb	r2, [r7, #21]
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	701a      	strb	r2, [r3, #0]
  *hci_revision =  btohs(resp.hci_revision);
 800a730:	8afa      	ldrh	r2, [r7, #22]
 800a732:	68bb      	ldr	r3, [r7, #8]
 800a734:	801a      	strh	r2, [r3, #0]
  *lmp_pal_version = resp.lmp_pal_version;
 800a736:	7e3a      	ldrb	r2, [r7, #24]
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	701a      	strb	r2, [r3, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 800a73c:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 800a740:	b29a      	uxth	r2, r3
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	801a      	strh	r2, [r3, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 800a746:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 800a74a:	b29a      	uxth	r2, r3
 800a74c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a74e:	801a      	strh	r2, [r3, #0]
  
  return 0;
 800a750:	2300      	movs	r3, #0
}
 800a752:	4618      	mov	r0, r3
 800a754:	3738      	adds	r7, #56	@ 0x38
 800a756:	46bd      	mov	sp, r7
 800a758:	bd80      	pop	{r7, pc}

0800a75a <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 800a75a:	b580      	push	{r7, lr}
 800a75c:	b092      	sub	sp, #72	@ 0x48
 800a75e:	af00      	add	r7, sp, #0
 800a760:	4603      	mov	r3, r0
 800a762:	6039      	str	r1, [r7, #0]
 800a764:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 800a766:	f107 0310 	add.w	r3, r7, #16
 800a76a:	2220      	movs	r2, #32
 800a76c:	2100      	movs	r1, #0
 800a76e:	4618      	mov	r0, r3
 800a770:	f003 fc4a 	bl	800e008 <memset>
  scan_resp_cp.length = length;
 800a774:	79fb      	ldrb	r3, [r7, #7]
 800a776:	743b      	strb	r3, [r7, #16]
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 800a778:	79fb      	ldrb	r3, [r7, #7]
 800a77a:	2b1f      	cmp	r3, #31
 800a77c:	bf28      	it	cs
 800a77e:	231f      	movcs	r3, #31
 800a780:	b2db      	uxtb	r3, r3
 800a782:	461a      	mov	r2, r3
 800a784:	f107 0310 	add.w	r3, r7, #16
 800a788:	3301      	adds	r3, #1
 800a78a:	6839      	ldr	r1, [r7, #0]
 800a78c:	4618      	mov	r0, r3
 800a78e:	f003 fcba 	bl	800e106 <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a792:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800a796:	2218      	movs	r2, #24
 800a798:	2100      	movs	r1, #0
 800a79a:	4618      	mov	r0, r3
 800a79c:	f003 fc34 	bl	800e008 <memset>
  rq.ogf = OGF_LE_CTL;
 800a7a0:	2308      	movs	r3, #8
 800a7a2:	863b      	strh	r3, [r7, #48]	@ 0x30
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 800a7a4:	2309      	movs	r3, #9
 800a7a6:	867b      	strh	r3, [r7, #50]	@ 0x32
  rq.cparam = &scan_resp_cp;
 800a7a8:	f107 0310 	add.w	r3, r7, #16
 800a7ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 800a7ae:	2320      	movs	r3, #32
 800a7b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.rparam = &status;
 800a7b2:	f107 030f 	add.w	r3, r7, #15
 800a7b6:	643b      	str	r3, [r7, #64]	@ 0x40
  rq.rlen = 1;
 800a7b8:	2301      	movs	r3, #1
 800a7ba:	647b      	str	r3, [r7, #68]	@ 0x44
  
  if (hci_send_req(&rq, FALSE) < 0)
 800a7bc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800a7c0:	2100      	movs	r1, #0
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	f000 f906 	bl	800a9d4 <hci_send_req>
 800a7c8:	4603      	mov	r3, r0
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	da01      	bge.n	800a7d2 <hci_le_set_scan_resp_data+0x78>
    return BLE_STATUS_TIMEOUT;
 800a7ce:	23ff      	movs	r3, #255	@ 0xff
 800a7d0:	e000      	b.n	800a7d4 <hci_le_set_scan_resp_data+0x7a>
  
  return status;
 800a7d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	3748      	adds	r7, #72	@ 0x48
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	bd80      	pop	{r7, pc}

0800a7dc <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 800a7dc:	b480      	push	{r7}
 800a7de:	b085      	sub	sp, #20
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	3308      	adds	r3, #8
 800a7e8:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	781b      	ldrb	r3, [r3, #0]
 800a7ee:	2b04      	cmp	r3, #4
 800a7f0:	d001      	beq.n	800a7f6 <verify_packet+0x1a>
    return 1; /* Incorrect type */
 800a7f2:	2301      	movs	r3, #1
 800a7f4:	e00c      	b.n	800a810 <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	3302      	adds	r3, #2
 800a7fa:	781b      	ldrb	r3, [r3, #0]
 800a7fc:	461a      	mov	r2, r3
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800a804:	3b03      	subs	r3, #3
 800a806:	429a      	cmp	r2, r3
 800a808:	d001      	beq.n	800a80e <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 800a80a:	2302      	movs	r3, #2
 800a80c:	e000      	b.n	800a810 <verify_packet+0x34>
  
  return 0;      
 800a80e:	2300      	movs	r3, #0
}
 800a810:	4618      	mov	r0, r3
 800a812:	3714      	adds	r7, #20
 800a814:	46bd      	mov	sp, r7
 800a816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81a:	4770      	bx	lr

0800a81c <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b0a6      	sub	sp, #152	@ 0x98
 800a820:	af00      	add	r7, sp, #0
 800a822:	607b      	str	r3, [r7, #4]
 800a824:	4603      	mov	r3, r0
 800a826:	81fb      	strh	r3, [r7, #14]
 800a828:	460b      	mov	r3, r1
 800a82a:	81bb      	strh	r3, [r7, #12]
 800a82c:	4613      	mov	r3, r2
 800a82e:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 800a830:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800a834:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a838:	b21a      	sxth	r2, r3
 800a83a:	89fb      	ldrh	r3, [r7, #14]
 800a83c:	029b      	lsls	r3, r3, #10
 800a83e:	b21b      	sxth	r3, r3
 800a840:	4313      	orrs	r3, r2
 800a842:	b21b      	sxth	r3, r3
 800a844:	b29b      	uxth	r3, r3
 800a846:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 800a848:	7afb      	ldrb	r3, [r7, #11]
 800a84a:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 800a84c:	2301      	movs	r3, #1
 800a84e:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 800a850:	f107 0318 	add.w	r3, r7, #24
 800a854:	3301      	adds	r3, #1
 800a856:	461a      	mov	r2, r3
 800a858:	f107 0314 	add.w	r3, r7, #20
 800a85c:	8819      	ldrh	r1, [r3, #0]
 800a85e:	789b      	ldrb	r3, [r3, #2]
 800a860:	8011      	strh	r1, [r2, #0]
 800a862:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 800a864:	f107 0318 	add.w	r3, r7, #24
 800a868:	3304      	adds	r3, #4
 800a86a:	7afa      	ldrb	r2, [r7, #11]
 800a86c:	6879      	ldr	r1, [r7, #4]
 800a86e:	4618      	mov	r0, r3
 800a870:	f003 fc49 	bl	800e106 <memcpy>
  
  if (hciContext.io.Send)
 800a874:	4b08      	ldr	r3, [pc, #32]	@ (800a898 <send_cmd+0x7c>)
 800a876:	691b      	ldr	r3, [r3, #16]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d009      	beq.n	800a890 <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 800a87c:	4b06      	ldr	r3, [pc, #24]	@ (800a898 <send_cmd+0x7c>)
 800a87e:	691b      	ldr	r3, [r3, #16]
 800a880:	7afa      	ldrb	r2, [r7, #11]
 800a882:	b292      	uxth	r2, r2
 800a884:	3204      	adds	r2, #4
 800a886:	b291      	uxth	r1, r2
 800a888:	f107 0218 	add.w	r2, r7, #24
 800a88c:	4610      	mov	r0, r2
 800a88e:	4798      	blx	r3
  }
}
 800a890:	bf00      	nop
 800a892:	3798      	adds	r7, #152	@ 0x98
 800a894:	46bd      	mov	sp, r7
 800a896:	bd80      	pop	{r7, pc}
 800a898:	20003330 	.word	0x20003330

0800a89c <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b084      	sub	sp, #16
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
 800a8a4:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 800a8a6:	e00a      	b.n	800a8be <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 800a8a8:	f107 030c 	add.w	r3, r7, #12
 800a8ac:	4619      	mov	r1, r3
 800a8ae:	6838      	ldr	r0, [r7, #0]
 800a8b0:	f000 fae8 	bl	800ae84 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	4619      	mov	r1, r3
 800a8b8:	6878      	ldr	r0, [r7, #4]
 800a8ba:	f000 fa4f 	bl	800ad5c <list_insert_head>
  while (!list_is_empty(src_list))
 800a8be:	6838      	ldr	r0, [r7, #0]
 800a8c0:	f000 fa2a 	bl	800ad18 <list_is_empty>
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d0ee      	beq.n	800a8a8 <move_list+0xc>
  }
}
 800a8ca:	bf00      	nop
 800a8cc:	bf00      	nop
 800a8ce:	3710      	adds	r7, #16
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	bd80      	pop	{r7, pc}

0800a8d4 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b082      	sub	sp, #8
 800a8d8:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800a8da:	e009      	b.n	800a8f0 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 800a8dc:	1d3b      	adds	r3, r7, #4
 800a8de:	4619      	mov	r1, r3
 800a8e0:	4809      	ldr	r0, [pc, #36]	@ (800a908 <free_event_list+0x34>)
 800a8e2:	f000 faa8 	bl	800ae36 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	4619      	mov	r1, r3
 800a8ea:	4808      	ldr	r0, [pc, #32]	@ (800a90c <free_event_list+0x38>)
 800a8ec:	f000 fa5c 	bl	800ada8 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800a8f0:	4806      	ldr	r0, [pc, #24]	@ (800a90c <free_event_list+0x38>)
 800a8f2:	f000 faee 	bl	800aed2 <list_get_size>
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	2b01      	cmp	r3, #1
 800a8fa:	ddef      	ble.n	800a8dc <free_event_list+0x8>
  }
}
 800a8fc:	bf00      	nop
 800a8fe:	bf00      	nop
 800a900:	3708      	adds	r7, #8
 800a902:	46bd      	mov	sp, r7
 800a904:	bd80      	pop	{r7, pc}
 800a906:	bf00      	nop
 800a908:	2000306c 	.word	0x2000306c
 800a90c:	20003064 	.word	0x20003064

0800a910 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b084      	sub	sp, #16
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
 800a918:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d002      	beq.n	800a926 <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 800a920:	4a18      	ldr	r2, [pc, #96]	@ (800a984 <hci_init+0x74>)
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 800a926:	4818      	ldr	r0, [pc, #96]	@ (800a988 <hci_init+0x78>)
 800a928:	f000 f9e6 	bl	800acf8 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 800a92c:	4817      	ldr	r0, [pc, #92]	@ (800a98c <hci_init+0x7c>)
 800a92e:	f000 f9e3 	bl	800acf8 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 800a932:	f7f8 fdfd 	bl	8003530 <hci_tl_lowlevel_init>
    
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800a936:	2300      	movs	r3, #0
 800a938:	73fb      	strb	r3, [r7, #15]
 800a93a:	e00c      	b.n	800a956 <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 800a93c:	7bfb      	ldrb	r3, [r7, #15]
 800a93e:	228c      	movs	r2, #140	@ 0x8c
 800a940:	fb02 f303 	mul.w	r3, r2, r3
 800a944:	4a12      	ldr	r2, [pc, #72]	@ (800a990 <hci_init+0x80>)
 800a946:	4413      	add	r3, r2
 800a948:	4619      	mov	r1, r3
 800a94a:	480f      	ldr	r0, [pc, #60]	@ (800a988 <hci_init+0x78>)
 800a94c:	f000 fa2c 	bl	800ada8 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800a950:	7bfb      	ldrb	r3, [r7, #15]
 800a952:	3301      	adds	r3, #1
 800a954:	73fb      	strb	r3, [r7, #15]
 800a956:	7bfb      	ldrb	r3, [r7, #15]
 800a958:	2b04      	cmp	r3, #4
 800a95a:	d9ef      	bls.n	800a93c <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 800a95c:	4b09      	ldr	r3, [pc, #36]	@ (800a984 <hci_init+0x74>)
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d003      	beq.n	800a96c <hci_init+0x5c>
 800a964:	4b07      	ldr	r3, [pc, #28]	@ (800a984 <hci_init+0x74>)
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	2000      	movs	r0, #0
 800a96a:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 800a96c:	4b05      	ldr	r3, [pc, #20]	@ (800a984 <hci_init+0x74>)
 800a96e:	689b      	ldr	r3, [r3, #8]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d002      	beq.n	800a97a <hci_init+0x6a>
 800a974:	4b03      	ldr	r3, [pc, #12]	@ (800a984 <hci_init+0x74>)
 800a976:	689b      	ldr	r3, [r3, #8]
 800a978:	4798      	blx	r3
}
 800a97a:	bf00      	nop
 800a97c:	3710      	adds	r7, #16
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}
 800a982:	bf00      	nop
 800a984:	20003330 	.word	0x20003330
 800a988:	20003064 	.word	0x20003064
 800a98c:	2000306c 	.word	0x2000306c
 800a990:	20003074 	.word	0x20003074

0800a994 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 800a994:	b480      	push	{r7}
 800a996:	b083      	sub	sp, #12
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	4a0b      	ldr	r2, [pc, #44]	@ (800a9d0 <hci_register_io_bus+0x3c>)
 800a9a2:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	68db      	ldr	r3, [r3, #12]
 800a9a8:	4a09      	ldr	r2, [pc, #36]	@ (800a9d0 <hci_register_io_bus+0x3c>)
 800a9aa:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	691b      	ldr	r3, [r3, #16]
 800a9b0:	4a07      	ldr	r2, [pc, #28]	@ (800a9d0 <hci_register_io_bus+0x3c>)
 800a9b2:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	699b      	ldr	r3, [r3, #24]
 800a9b8:	4a05      	ldr	r2, [pc, #20]	@ (800a9d0 <hci_register_io_bus+0x3c>)
 800a9ba:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	689b      	ldr	r3, [r3, #8]
 800a9c0:	4a03      	ldr	r2, [pc, #12]	@ (800a9d0 <hci_register_io_bus+0x3c>)
 800a9c2:	6093      	str	r3, [r2, #8]
}
 800a9c4:	bf00      	nop
 800a9c6:	370c      	adds	r7, #12
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ce:	4770      	bx	lr
 800a9d0:	20003330 	.word	0x20003330

0800a9d4 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b08e      	sub	sp, #56	@ 0x38
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
 800a9dc:	460b      	mov	r3, r1
 800a9de:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	885b      	ldrh	r3, [r3, #2]
 800a9e4:	b21b      	sxth	r3, r3
 800a9e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a9ea:	b21a      	sxth	r2, r3
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	881b      	ldrh	r3, [r3, #0]
 800a9f0:	029b      	lsls	r3, r3, #10
 800a9f2:	b21b      	sxth	r3, r3
 800a9f4:	4313      	orrs	r3, r2
 800a9f6:	b21b      	sxth	r3, r3
 800a9f8:	86fb      	strh	r3, [r7, #54]	@ 0x36
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 800a9fe:	f107 0308 	add.w	r3, r7, #8
 800aa02:	4618      	mov	r0, r3
 800aa04:	f000 f978 	bl	800acf8 <list_init_head>

  free_event_list();
 800aa08:	f7ff ff64 	bl	800a8d4 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	8818      	ldrh	r0, [r3, #0]
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	8859      	ldrh	r1, [r3, #2]
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	68db      	ldr	r3, [r3, #12]
 800aa18:	b2da      	uxtb	r2, r3
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	689b      	ldr	r3, [r3, #8]
 800aa1e:	f7ff fefd 	bl	800a81c <send_cmd>
  
  if (async)
 800aa22:	78fb      	ldrb	r3, [r7, #3]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d001      	beq.n	800aa2c <hci_send_req+0x58>
  {
    return 0;
 800aa28:	2300      	movs	r3, #0
 800aa2a:	e0e2      	b.n	800abf2 <hci_send_req+0x21e>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 800aa2c:	f7fa fada 	bl	8004fe4 <HAL_GetTick>
 800aa30:	6338      	str	r0, [r7, #48]	@ 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800aa32:	f7fa fad7 	bl	8004fe4 <HAL_GetTick>
 800aa36:	4602      	mov	r2, r0
 800aa38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa3a:	1ad3      	subs	r3, r2, r3
 800aa3c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800aa40:	f200 80b3 	bhi.w	800abaa <hci_send_req+0x1d6>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 800aa44:	486d      	ldr	r0, [pc, #436]	@ (800abfc <hci_send_req+0x228>)
 800aa46:	f000 f967 	bl	800ad18 <list_is_empty>
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d000      	beq.n	800aa52 <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800aa50:	e7ef      	b.n	800aa32 <hci_send_req+0x5e>
      {
        break;
 800aa52:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 800aa54:	f107 0310 	add.w	r3, r7, #16
 800aa58:	4619      	mov	r1, r3
 800aa5a:	4868      	ldr	r0, [pc, #416]	@ (800abfc <hci_send_req+0x228>)
 800aa5c:	f000 f9eb 	bl	800ae36 <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 800aa60:	693b      	ldr	r3, [r7, #16]
 800aa62:	3308      	adds	r3, #8
 800aa64:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 800aa66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa68:	781b      	ldrb	r3, [r3, #0]
 800aa6a:	2b04      	cmp	r3, #4
 800aa6c:	d17f      	bne.n	800ab6e <hci_send_req+0x19a>
    {
      event_pckt = (void *)(hci_hdr->data);
 800aa6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa70:	3301      	adds	r3, #1
 800aa72:	62bb      	str	r3, [r7, #40]	@ 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 800aa74:	693b      	ldr	r3, [r7, #16]
 800aa76:	3308      	adds	r3, #8
 800aa78:	3303      	adds	r3, #3
 800aa7a:	627b      	str	r3, [r7, #36]	@ 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 800aa7c:	693b      	ldr	r3, [r7, #16]
 800aa7e:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800aa82:	3b03      	subs	r3, #3
 800aa84:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 800aa86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa88:	781b      	ldrb	r3, [r3, #0]
 800aa8a:	2b3e      	cmp	r3, #62	@ 0x3e
 800aa8c:	d04c      	beq.n	800ab28 <hci_send_req+0x154>
 800aa8e:	2b3e      	cmp	r3, #62	@ 0x3e
 800aa90:	dc68      	bgt.n	800ab64 <hci_send_req+0x190>
 800aa92:	2b10      	cmp	r3, #16
 800aa94:	f000 808b 	beq.w	800abae <hci_send_req+0x1da>
 800aa98:	2b10      	cmp	r3, #16
 800aa9a:	dc63      	bgt.n	800ab64 <hci_send_req+0x190>
 800aa9c:	2b0e      	cmp	r3, #14
 800aa9e:	d023      	beq.n	800aae8 <hci_send_req+0x114>
 800aaa0:	2b0f      	cmp	r3, #15
 800aaa2:	d15f      	bne.n	800ab64 <hci_send_req+0x190>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 800aaa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaa6:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 800aaa8:	69bb      	ldr	r3, [r7, #24]
 800aaaa:	885b      	ldrh	r3, [r3, #2]
 800aaac:	b29b      	uxth	r3, r3
 800aaae:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800aab0:	429a      	cmp	r2, r3
 800aab2:	d17e      	bne.n	800abb2 <hci_send_req+0x1de>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	685b      	ldr	r3, [r3, #4]
 800aab8:	2b0f      	cmp	r3, #15
 800aaba:	d004      	beq.n	800aac6 <hci_send_req+0xf2>
          if (cs->status) {
 800aabc:	69bb      	ldr	r3, [r7, #24]
 800aabe:	781b      	ldrb	r3, [r3, #0]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d051      	beq.n	800ab68 <hci_send_req+0x194>
            goto failed;
 800aac4:	e078      	b.n	800abb8 <hci_send_req+0x1e4>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	695a      	ldr	r2, [r3, #20]
 800aaca:	6a3b      	ldr	r3, [r7, #32]
 800aacc:	429a      	cmp	r2, r3
 800aace:	bf28      	it	cs
 800aad0:	461a      	movcs	r2, r3
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	6918      	ldr	r0, [r3, #16]
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	695b      	ldr	r3, [r3, #20]
 800aade:	461a      	mov	r2, r3
 800aae0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800aae2:	f003 fb10 	bl	800e106 <memcpy>
        goto done;
 800aae6:	e078      	b.n	800abda <hci_send_req+0x206>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 800aae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaea:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 800aaec:	697b      	ldr	r3, [r7, #20]
 800aaee:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800aaf2:	b29b      	uxth	r3, r3
 800aaf4:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800aaf6:	429a      	cmp	r2, r3
 800aaf8:	d15d      	bne.n	800abb6 <hci_send_req+0x1e2>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 800aafa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aafc:	3303      	adds	r3, #3
 800aafe:	627b      	str	r3, [r7, #36]	@ 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 800ab00:	6a3b      	ldr	r3, [r7, #32]
 800ab02:	3b03      	subs	r3, #3
 800ab04:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	695a      	ldr	r2, [r3, #20]
 800ab0a:	6a3b      	ldr	r3, [r7, #32]
 800ab0c:	429a      	cmp	r2, r3
 800ab0e:	bf28      	it	cs
 800ab10:	461a      	movcs	r2, r3
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	6918      	ldr	r0, [r3, #16]
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	695b      	ldr	r3, [r3, #20]
 800ab1e:	461a      	mov	r2, r3
 800ab20:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ab22:	f003 faf0 	bl	800e106 <memcpy>
        goto done;
 800ab26:	e058      	b.n	800abda <hci_send_req+0x206>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 800ab28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab2a:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 800ab2c:	69fb      	ldr	r3, [r7, #28]
 800ab2e:	781b      	ldrb	r3, [r3, #0]
 800ab30:	461a      	mov	r2, r3
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	685b      	ldr	r3, [r3, #4]
 800ab36:	429a      	cmp	r2, r3
 800ab38:	d118      	bne.n	800ab6c <hci_send_req+0x198>
          break;
      
        len -= 1;
 800ab3a:	6a3b      	ldr	r3, [r7, #32]
 800ab3c:	3b01      	subs	r3, #1
 800ab3e:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	695a      	ldr	r2, [r3, #20]
 800ab44:	6a3b      	ldr	r3, [r7, #32]
 800ab46:	429a      	cmp	r2, r3
 800ab48:	bf28      	it	cs
 800ab4a:	461a      	movcs	r2, r3
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	6918      	ldr	r0, [r3, #16]
 800ab54:	69fb      	ldr	r3, [r7, #28]
 800ab56:	1c59      	adds	r1, r3, #1
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	695b      	ldr	r3, [r3, #20]
 800ab5c:	461a      	mov	r2, r3
 800ab5e:	f003 fad2 	bl	800e106 <memcpy>
        goto done;
 800ab62:	e03a      	b.n	800abda <hci_send_req+0x206>
      
      case EVT_HARDWARE_ERROR:            
        goto failed;
      
      default:      
        break;
 800ab64:	bf00      	nop
 800ab66:	e002      	b.n	800ab6e <hci_send_req+0x19a>
          break;
 800ab68:	bf00      	nop
 800ab6a:	e000      	b.n	800ab6e <hci_send_req+0x19a>
          break;
 800ab6c:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 800ab6e:	4824      	ldr	r0, [pc, #144]	@ (800ac00 <hci_send_req+0x22c>)
 800ab70:	f000 f8d2 	bl	800ad18 <list_is_empty>
 800ab74:	4603      	mov	r3, r0
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d00d      	beq.n	800ab96 <hci_send_req+0x1c2>
 800ab7a:	4820      	ldr	r0, [pc, #128]	@ (800abfc <hci_send_req+0x228>)
 800ab7c:	f000 f8cc 	bl	800ad18 <list_is_empty>
 800ab80:	4603      	mov	r3, r0
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d007      	beq.n	800ab96 <hci_send_req+0x1c2>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800ab86:	693b      	ldr	r3, [r7, #16]
 800ab88:	4619      	mov	r1, r3
 800ab8a:	481d      	ldr	r0, [pc, #116]	@ (800ac00 <hci_send_req+0x22c>)
 800ab8c:	f000 f90c 	bl	800ada8 <list_insert_tail>
      hciReadPacket=NULL;
 800ab90:	2300      	movs	r3, #0
 800ab92:	613b      	str	r3, [r7, #16]
 800ab94:	e008      	b.n	800aba8 <hci_send_req+0x1d4>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 800ab96:	693a      	ldr	r2, [r7, #16]
 800ab98:	f107 0308 	add.w	r3, r7, #8
 800ab9c:	4611      	mov	r1, r2
 800ab9e:	4618      	mov	r0, r3
 800aba0:	f000 f902 	bl	800ada8 <list_insert_tail>
      hciReadPacket=NULL;
 800aba4:	2300      	movs	r3, #0
 800aba6:	613b      	str	r3, [r7, #16]
  {
 800aba8:	e740      	b.n	800aa2c <hci_send_req+0x58>
        goto failed;
 800abaa:	bf00      	nop
 800abac:	e004      	b.n	800abb8 <hci_send_req+0x1e4>
        goto failed;
 800abae:	bf00      	nop
 800abb0:	e002      	b.n	800abb8 <hci_send_req+0x1e4>
          goto failed;
 800abb2:	bf00      	nop
 800abb4:	e000      	b.n	800abb8 <hci_send_req+0x1e4>
          goto failed;
 800abb6:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 800abb8:	693b      	ldr	r3, [r7, #16]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d004      	beq.n	800abc8 <hci_send_req+0x1f4>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800abbe:	693b      	ldr	r3, [r7, #16]
 800abc0:	4619      	mov	r1, r3
 800abc2:	480f      	ldr	r0, [pc, #60]	@ (800ac00 <hci_send_req+0x22c>)
 800abc4:	f000 f8ca 	bl	800ad5c <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800abc8:	f107 0308 	add.w	r3, r7, #8
 800abcc:	4619      	mov	r1, r3
 800abce:	480b      	ldr	r0, [pc, #44]	@ (800abfc <hci_send_req+0x228>)
 800abd0:	f7ff fe64 	bl	800a89c <move_list>

  return -1;
 800abd4:	f04f 33ff 	mov.w	r3, #4294967295
 800abd8:	e00b      	b.n	800abf2 <hci_send_req+0x21e>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 800abda:	693b      	ldr	r3, [r7, #16]
 800abdc:	4619      	mov	r1, r3
 800abde:	4808      	ldr	r0, [pc, #32]	@ (800ac00 <hci_send_req+0x22c>)
 800abe0:	f000 f8bc 	bl	800ad5c <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800abe4:	f107 0308 	add.w	r3, r7, #8
 800abe8:	4619      	mov	r1, r3
 800abea:	4804      	ldr	r0, [pc, #16]	@ (800abfc <hci_send_req+0x228>)
 800abec:	f7ff fe56 	bl	800a89c <move_list>

  return 0;
 800abf0:	2300      	movs	r3, #0
}
 800abf2:	4618      	mov	r0, r3
 800abf4:	3738      	adds	r7, #56	@ 0x38
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bd80      	pop	{r7, pc}
 800abfa:	bf00      	nop
 800abfc:	2000306c 	.word	0x2000306c
 800ac00:	20003064 	.word	0x20003064

0800ac04 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b082      	sub	sp, #8
 800ac08:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800ac0e:	e013      	b.n	800ac38 <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 800ac10:	1d3b      	adds	r3, r7, #4
 800ac12:	4619      	mov	r1, r3
 800ac14:	480e      	ldr	r0, [pc, #56]	@ (800ac50 <hci_user_evt_proc+0x4c>)
 800ac16:	f000 f90e 	bl	800ae36 <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800ac1a:	4b0e      	ldr	r3, [pc, #56]	@ (800ac54 <hci_user_evt_proc+0x50>)
 800ac1c:	69db      	ldr	r3, [r3, #28]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d005      	beq.n	800ac2e <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 800ac22:	4b0c      	ldr	r3, [pc, #48]	@ (800ac54 <hci_user_evt_proc+0x50>)
 800ac24:	69db      	ldr	r3, [r3, #28]
 800ac26:	687a      	ldr	r2, [r7, #4]
 800ac28:	3208      	adds	r2, #8
 800ac2a:	4610      	mov	r0, r2
 800ac2c:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	4619      	mov	r1, r3
 800ac32:	4809      	ldr	r0, [pc, #36]	@ (800ac58 <hci_user_evt_proc+0x54>)
 800ac34:	f000 f8b8 	bl	800ada8 <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800ac38:	4805      	ldr	r0, [pc, #20]	@ (800ac50 <hci_user_evt_proc+0x4c>)
 800ac3a:	f000 f86d 	bl	800ad18 <list_is_empty>
 800ac3e:	4603      	mov	r3, r0
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d0e5      	beq.n	800ac10 <hci_user_evt_proc+0xc>
  }
}
 800ac44:	bf00      	nop
 800ac46:	bf00      	nop
 800ac48:	3708      	adds	r7, #8
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	bd80      	pop	{r7, pc}
 800ac4e:	bf00      	nop
 800ac50:	2000306c 	.word	0x2000306c
 800ac54:	20003330 	.word	0x20003330
 800ac58:	20003064 	.word	0x20003064

0800ac5c <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b086      	sub	sp, #24
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 800ac64:	2300      	movs	r3, #0
 800ac66:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 800ac68:	2300      	movs	r3, #0
 800ac6a:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 800ac6c:	481f      	ldr	r0, [pc, #124]	@ (800acec <hci_notify_asynch_evt+0x90>)
 800ac6e:	f000 f853 	bl	800ad18 <list_is_empty>
 800ac72:	4603      	mov	r3, r0
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d132      	bne.n	800acde <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 800ac78:	f107 030c 	add.w	r3, r7, #12
 800ac7c:	4619      	mov	r1, r3
 800ac7e:	481b      	ldr	r0, [pc, #108]	@ (800acec <hci_notify_asynch_evt+0x90>)
 800ac80:	f000 f8d9 	bl	800ae36 <list_remove_head>
    
    if (hciContext.io.Receive)
 800ac84:	4b1a      	ldr	r3, [pc, #104]	@ (800acf0 <hci_notify_asynch_evt+0x94>)
 800ac86:	68db      	ldr	r3, [r3, #12]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d02a      	beq.n	800ace2 <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 800ac8c:	4b18      	ldr	r3, [pc, #96]	@ (800acf0 <hci_notify_asynch_evt+0x94>)
 800ac8e:	68db      	ldr	r3, [r3, #12]
 800ac90:	68fa      	ldr	r2, [r7, #12]
 800ac92:	3208      	adds	r2, #8
 800ac94:	2180      	movs	r1, #128	@ 0x80
 800ac96:	4610      	mov	r0, r2
 800ac98:	4798      	blx	r3
 800ac9a:	4603      	mov	r3, r0
 800ac9c:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 800ac9e:	7cfb      	ldrb	r3, [r7, #19]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d016      	beq.n	800acd2 <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	7cfa      	ldrb	r2, [r7, #19]
 800aca8:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
        if (verify_packet(hciReadPacket) == 0)
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	4618      	mov	r0, r3
 800acb0:	f7ff fd94 	bl	800a7dc <verify_packet>
 800acb4:	4603      	mov	r3, r0
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d105      	bne.n	800acc6 <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	4619      	mov	r1, r3
 800acbe:	480d      	ldr	r0, [pc, #52]	@ (800acf4 <hci_notify_asynch_evt+0x98>)
 800acc0:	f000 f872 	bl	800ada8 <list_insert_tail>
 800acc4:	e00d      	b.n	800ace2 <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	4619      	mov	r1, r3
 800acca:	4808      	ldr	r0, [pc, #32]	@ (800acec <hci_notify_asynch_evt+0x90>)
 800accc:	f000 f846 	bl	800ad5c <list_insert_head>
 800acd0:	e007      	b.n	800ace2 <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	4619      	mov	r1, r3
 800acd6:	4805      	ldr	r0, [pc, #20]	@ (800acec <hci_notify_asynch_evt+0x90>)
 800acd8:	f000 f840 	bl	800ad5c <list_insert_head>
 800acdc:	e001      	b.n	800ace2 <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 800acde:	2301      	movs	r3, #1
 800ace0:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800ace2:	697b      	ldr	r3, [r7, #20]

}
 800ace4:	4618      	mov	r0, r3
 800ace6:	3718      	adds	r7, #24
 800ace8:	46bd      	mov	sp, r7
 800acea:	bd80      	pop	{r7, pc}
 800acec:	20003064 	.word	0x20003064
 800acf0:	20003330 	.word	0x20003330
 800acf4:	2000306c 	.word	0x2000306c

0800acf8 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 800acf8:	b480      	push	{r7}
 800acfa:	b083      	sub	sp, #12
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	687a      	ldr	r2, [r7, #4]
 800ad04:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	687a      	ldr	r2, [r7, #4]
 800ad0a:	605a      	str	r2, [r3, #4]
}
 800ad0c:	bf00      	nop
 800ad0e:	370c      	adds	r7, #12
 800ad10:	46bd      	mov	sp, r7
 800ad12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad16:	4770      	bx	lr

0800ad18 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 800ad18:	b480      	push	{r7}
 800ad1a:	b087      	sub	sp, #28
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ad20:	f3ef 8310 	mrs	r3, PRIMASK
 800ad24:	60fb      	str	r3, [r7, #12]
  return(result);
 800ad26:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ad28:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800ad2a:	b672      	cpsid	i
}
 800ad2c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	687a      	ldr	r2, [r7, #4]
 800ad34:	429a      	cmp	r2, r3
 800ad36:	d102      	bne.n	800ad3e <list_is_empty+0x26>
  {
    return_value = 1;
 800ad38:	2301      	movs	r3, #1
 800ad3a:	75fb      	strb	r3, [r7, #23]
 800ad3c:	e001      	b.n	800ad42 <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 800ad3e:	2300      	movs	r3, #0
 800ad40:	75fb      	strb	r3, [r7, #23]
 800ad42:	693b      	ldr	r3, [r7, #16]
 800ad44:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ad46:	68bb      	ldr	r3, [r7, #8]
 800ad48:	f383 8810 	msr	PRIMASK, r3
}
 800ad4c:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 800ad4e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad50:	4618      	mov	r0, r3
 800ad52:	371c      	adds	r7, #28
 800ad54:	46bd      	mov	sp, r7
 800ad56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5a:	4770      	bx	lr

0800ad5c <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 800ad5c:	b480      	push	{r7}
 800ad5e:	b087      	sub	sp, #28
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
 800ad64:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ad66:	f3ef 8310 	mrs	r3, PRIMASK
 800ad6a:	60fb      	str	r3, [r7, #12]
  return(result);
 800ad6c:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ad6e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ad70:	b672      	cpsid	i
}
 800ad72:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681a      	ldr	r2, [r3, #0]
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800ad7c:	683b      	ldr	r3, [r7, #0]
 800ad7e:	687a      	ldr	r2, [r7, #4]
 800ad80:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	683a      	ldr	r2, [r7, #0]
 800ad86:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	683a      	ldr	r2, [r7, #0]
 800ad8e:	605a      	str	r2, [r3, #4]
 800ad90:	697b      	ldr	r3, [r7, #20]
 800ad92:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ad94:	693b      	ldr	r3, [r7, #16]
 800ad96:	f383 8810 	msr	PRIMASK, r3
}
 800ad9a:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800ad9c:	bf00      	nop
 800ad9e:	371c      	adds	r7, #28
 800ada0:	46bd      	mov	sp, r7
 800ada2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada6:	4770      	bx	lr

0800ada8 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 800ada8:	b480      	push	{r7}
 800adaa:	b087      	sub	sp, #28
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
 800adb0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800adb2:	f3ef 8310 	mrs	r3, PRIMASK
 800adb6:	60fb      	str	r3, [r7, #12]
  return(result);
 800adb8:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800adba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800adbc:	b672      	cpsid	i
}
 800adbe:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	687a      	ldr	r2, [r7, #4]
 800adc4:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	685a      	ldr	r2, [r3, #4]
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	683a      	ldr	r2, [r7, #0]
 800add2:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	685b      	ldr	r3, [r3, #4]
 800add8:	683a      	ldr	r2, [r7, #0]
 800adda:	601a      	str	r2, [r3, #0]
 800addc:	697b      	ldr	r3, [r7, #20]
 800adde:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ade0:	693b      	ldr	r3, [r7, #16]
 800ade2:	f383 8810 	msr	PRIMASK, r3
}
 800ade6:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800ade8:	bf00      	nop
 800adea:	371c      	adds	r7, #28
 800adec:	46bd      	mov	sp, r7
 800adee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf2:	4770      	bx	lr

0800adf4 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 800adf4:	b480      	push	{r7}
 800adf6:	b087      	sub	sp, #28
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800adfc:	f3ef 8310 	mrs	r3, PRIMASK
 800ae00:	60fb      	str	r3, [r7, #12]
  return(result);
 800ae02:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ae04:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ae06:	b672      	cpsid	i
}
 800ae08:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	685b      	ldr	r3, [r3, #4]
 800ae0e:	687a      	ldr	r2, [r7, #4]
 800ae10:	6812      	ldr	r2, [r2, #0]
 800ae12:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	687a      	ldr	r2, [r7, #4]
 800ae1a:	6852      	ldr	r2, [r2, #4]
 800ae1c:	605a      	str	r2, [r3, #4]
 800ae1e:	697b      	ldr	r3, [r7, #20]
 800ae20:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae22:	693b      	ldr	r3, [r7, #16]
 800ae24:	f383 8810 	msr	PRIMASK, r3
}
 800ae28:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800ae2a:	bf00      	nop
 800ae2c:	371c      	adds	r7, #28
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae34:	4770      	bx	lr

0800ae36 <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 800ae36:	b580      	push	{r7, lr}
 800ae38:	b086      	sub	sp, #24
 800ae3a:	af00      	add	r7, sp, #0
 800ae3c:	6078      	str	r0, [r7, #4]
 800ae3e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ae40:	f3ef 8310 	mrs	r3, PRIMASK
 800ae44:	60fb      	str	r3, [r7, #12]
  return(result);
 800ae46:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ae48:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ae4a:	b672      	cpsid	i
}
 800ae4c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681a      	ldr	r2, [r3, #0]
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	f7ff ffca 	bl	800adf4 <list_remove_node>
  (*node)->next = NULL;
 800ae60:	683b      	ldr	r3, [r7, #0]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	2200      	movs	r2, #0
 800ae66:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	605a      	str	r2, [r3, #4]
 800ae70:	697b      	ldr	r3, [r7, #20]
 800ae72:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae74:	693b      	ldr	r3, [r7, #16]
 800ae76:	f383 8810 	msr	PRIMASK, r3
}
 800ae7a:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800ae7c:	bf00      	nop
 800ae7e:	3718      	adds	r7, #24
 800ae80:	46bd      	mov	sp, r7
 800ae82:	bd80      	pop	{r7, pc}

0800ae84 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b086      	sub	sp, #24
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
 800ae8c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ae8e:	f3ef 8310 	mrs	r3, PRIMASK
 800ae92:	60fb      	str	r3, [r7, #12]
  return(result);
 800ae94:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ae96:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ae98:	b672      	cpsid	i
}
 800ae9a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	685a      	ldr	r2, [r3, #4]
 800aea0:	683b      	ldr	r3, [r7, #0]
 800aea2:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	685b      	ldr	r3, [r3, #4]
 800aea8:	4618      	mov	r0, r3
 800aeaa:	f7ff ffa3 	bl	800adf4 <list_remove_node>
  (*node)->next = NULL;
 800aeae:	683b      	ldr	r3, [r7, #0]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	2200      	movs	r2, #0
 800aebc:	605a      	str	r2, [r3, #4]
 800aebe:	697b      	ldr	r3, [r7, #20]
 800aec0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aec2:	693b      	ldr	r3, [r7, #16]
 800aec4:	f383 8810 	msr	PRIMASK, r3
}
 800aec8:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800aeca:	bf00      	nop
 800aecc:	3718      	adds	r7, #24
 800aece:	46bd      	mov	sp, r7
 800aed0:	bd80      	pop	{r7, pc}

0800aed2 <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 800aed2:	b480      	push	{r7}
 800aed4:	b089      	sub	sp, #36	@ 0x24
 800aed6:	af00      	add	r7, sp, #0
 800aed8:	6078      	str	r0, [r7, #4]
  int size = 0;
 800aeda:	2300      	movs	r3, #0
 800aedc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aede:	f3ef 8310 	mrs	r3, PRIMASK
 800aee2:	613b      	str	r3, [r7, #16]
  return(result);
 800aee4:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800aee6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800aee8:	b672      	cpsid	i
}
 800aeea:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800aef2:	e005      	b.n	800af00 <list_get_size+0x2e>
  {
    size++;
 800aef4:	69fb      	ldr	r3, [r7, #28]
 800aef6:	3301      	adds	r3, #1
 800aef8:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 800aefa:	69bb      	ldr	r3, [r7, #24]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800af00:	69ba      	ldr	r2, [r7, #24]
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	429a      	cmp	r2, r3
 800af06:	d1f5      	bne.n	800aef4 <list_get_size+0x22>
 800af08:	697b      	ldr	r3, [r7, #20]
 800af0a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	f383 8810 	msr	PRIMASK, r3
}
 800af12:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 800af14:	69fb      	ldr	r3, [r7, #28]
}
 800af16:	4618      	mov	r0, r3
 800af18:	3724      	adds	r7, #36	@ 0x24
 800af1a:	46bd      	mov	sp, r7
 800af1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af20:	4770      	bx	lr

0800af22 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800af22:	b480      	push	{r7}
 800af24:	b085      	sub	sp, #20
 800af26:	af00      	add	r7, sp, #0
 800af28:	4603      	mov	r3, r0
 800af2a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800af2c:	2300      	movs	r3, #0
 800af2e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800af30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800af34:	2b84      	cmp	r3, #132	@ 0x84
 800af36:	d005      	beq.n	800af44 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800af38:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	4413      	add	r3, r2
 800af40:	3303      	adds	r3, #3
 800af42:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800af44:	68fb      	ldr	r3, [r7, #12]
}
 800af46:	4618      	mov	r0, r3
 800af48:	3714      	adds	r7, #20
 800af4a:	46bd      	mov	sp, r7
 800af4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af50:	4770      	bx	lr

0800af52 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800af52:	b580      	push	{r7, lr}
 800af54:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800af56:	f000 fe2f 	bl	800bbb8 <vTaskStartScheduler>
  
  return osOK;
 800af5a:	2300      	movs	r3, #0
}
 800af5c:	4618      	mov	r0, r3
 800af5e:	bd80      	pop	{r7, pc}

0800af60 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800af60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af62:	b089      	sub	sp, #36	@ 0x24
 800af64:	af04      	add	r7, sp, #16
 800af66:	6078      	str	r0, [r7, #4]
 800af68:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	695b      	ldr	r3, [r3, #20]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d020      	beq.n	800afb4 <osThreadCreate+0x54>
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	699b      	ldr	r3, [r3, #24]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d01c      	beq.n	800afb4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	685c      	ldr	r4, [r3, #4]
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	691e      	ldr	r6, [r3, #16]
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800af8c:	4618      	mov	r0, r3
 800af8e:	f7ff ffc8 	bl	800af22 <makeFreeRtosPriority>
 800af92:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	695b      	ldr	r3, [r3, #20]
 800af98:	687a      	ldr	r2, [r7, #4]
 800af9a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800af9c:	9202      	str	r2, [sp, #8]
 800af9e:	9301      	str	r3, [sp, #4]
 800afa0:	9100      	str	r1, [sp, #0]
 800afa2:	683b      	ldr	r3, [r7, #0]
 800afa4:	4632      	mov	r2, r6
 800afa6:	4629      	mov	r1, r5
 800afa8:	4620      	mov	r0, r4
 800afaa:	f000 fc37 	bl	800b81c <xTaskCreateStatic>
 800afae:	4603      	mov	r3, r0
 800afb0:	60fb      	str	r3, [r7, #12]
 800afb2:	e01c      	b.n	800afee <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	685c      	ldr	r4, [r3, #4]
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800afc0:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800afc8:	4618      	mov	r0, r3
 800afca:	f7ff ffaa 	bl	800af22 <makeFreeRtosPriority>
 800afce:	4602      	mov	r2, r0
 800afd0:	f107 030c 	add.w	r3, r7, #12
 800afd4:	9301      	str	r3, [sp, #4]
 800afd6:	9200      	str	r2, [sp, #0]
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	4632      	mov	r2, r6
 800afdc:	4629      	mov	r1, r5
 800afde:	4620      	mov	r0, r4
 800afe0:	f000 fc7c 	bl	800b8dc <xTaskCreate>
 800afe4:	4603      	mov	r3, r0
 800afe6:	2b01      	cmp	r3, #1
 800afe8:	d001      	beq.n	800afee <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800afea:	2300      	movs	r3, #0
 800afec:	e000      	b.n	800aff0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800afee:	68fb      	ldr	r3, [r7, #12]
}
 800aff0:	4618      	mov	r0, r3
 800aff2:	3714      	adds	r7, #20
 800aff4:	46bd      	mov	sp, r7
 800aff6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800aff8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b084      	sub	sp, #16
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d001      	beq.n	800b00e <osDelay+0x16>
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	e000      	b.n	800b010 <osDelay+0x18>
 800b00e:	2301      	movs	r3, #1
 800b010:	4618      	mov	r0, r3
 800b012:	f000 fd9b 	bl	800bb4c <vTaskDelay>
  
  return osOK;
 800b016:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b018:	4618      	mov	r0, r3
 800b01a:	3710      	adds	r7, #16
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}

0800b020 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800b020:	b580      	push	{r7, lr}
 800b022:	b086      	sub	sp, #24
 800b024:	af02      	add	r7, sp, #8
 800b026:	6078      	str	r0, [r7, #4]
 800b028:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	685b      	ldr	r3, [r3, #4]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d00f      	beq.n	800b052 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800b032:	683b      	ldr	r3, [r7, #0]
 800b034:	2b01      	cmp	r3, #1
 800b036:	d10a      	bne.n	800b04e <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	685b      	ldr	r3, [r3, #4]
 800b03c:	2203      	movs	r2, #3
 800b03e:	9200      	str	r2, [sp, #0]
 800b040:	2200      	movs	r2, #0
 800b042:	2100      	movs	r1, #0
 800b044:	2001      	movs	r0, #1
 800b046:	f000 f93b 	bl	800b2c0 <xQueueGenericCreateStatic>
 800b04a:	4603      	mov	r3, r0
 800b04c:	e016      	b.n	800b07c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800b04e:	2300      	movs	r3, #0
 800b050:	e014      	b.n	800b07c <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800b052:	683b      	ldr	r3, [r7, #0]
 800b054:	2b01      	cmp	r3, #1
 800b056:	d110      	bne.n	800b07a <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800b058:	2203      	movs	r2, #3
 800b05a:	2100      	movs	r1, #0
 800b05c:	2001      	movs	r0, #1
 800b05e:	f000 f9ac 	bl	800b3ba <xQueueGenericCreate>
 800b062:	60f8      	str	r0, [r7, #12]
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d005      	beq.n	800b076 <osSemaphoreCreate+0x56>
 800b06a:	2300      	movs	r3, #0
 800b06c:	2200      	movs	r2, #0
 800b06e:	2100      	movs	r1, #0
 800b070:	68f8      	ldr	r0, [r7, #12]
 800b072:	f000 f9fd 	bl	800b470 <xQueueGenericSend>
      return sema;
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	e000      	b.n	800b07c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800b07a:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800b07c:	4618      	mov	r0, r3
 800b07e:	3710      	adds	r7, #16
 800b080:	46bd      	mov	sp, r7
 800b082:	bd80      	pop	{r7, pc}

0800b084 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b084:	b480      	push	{r7}
 800b086:	b083      	sub	sp, #12
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	f103 0208 	add.w	r2, r3, #8
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	f04f 32ff 	mov.w	r2, #4294967295
 800b09c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	f103 0208 	add.w	r2, r3, #8
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	f103 0208 	add.w	r2, r3, #8
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b0b8:	bf00      	nop
 800b0ba:	370c      	adds	r7, #12
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c2:	4770      	bx	lr

0800b0c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b0c4:	b480      	push	{r7}
 800b0c6:	b083      	sub	sp, #12
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b0d2:	bf00      	nop
 800b0d4:	370c      	adds	r7, #12
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0dc:	4770      	bx	lr

0800b0de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b0de:	b480      	push	{r7}
 800b0e0:	b085      	sub	sp, #20
 800b0e2:	af00      	add	r7, sp, #0
 800b0e4:	6078      	str	r0, [r7, #4]
 800b0e6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	685b      	ldr	r3, [r3, #4]
 800b0ec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b0ee:	683b      	ldr	r3, [r7, #0]
 800b0f0:	68fa      	ldr	r2, [r7, #12]
 800b0f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	689a      	ldr	r2, [r3, #8]
 800b0f8:	683b      	ldr	r3, [r7, #0]
 800b0fa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	689b      	ldr	r3, [r3, #8]
 800b100:	683a      	ldr	r2, [r7, #0]
 800b102:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	683a      	ldr	r2, [r7, #0]
 800b108:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	687a      	ldr	r2, [r7, #4]
 800b10e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	1c5a      	adds	r2, r3, #1
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	601a      	str	r2, [r3, #0]
}
 800b11a:	bf00      	nop
 800b11c:	3714      	adds	r7, #20
 800b11e:	46bd      	mov	sp, r7
 800b120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b124:	4770      	bx	lr

0800b126 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b126:	b480      	push	{r7}
 800b128:	b085      	sub	sp, #20
 800b12a:	af00      	add	r7, sp, #0
 800b12c:	6078      	str	r0, [r7, #4]
 800b12e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b130:	683b      	ldr	r3, [r7, #0]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b136:	68bb      	ldr	r3, [r7, #8]
 800b138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b13c:	d103      	bne.n	800b146 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	691b      	ldr	r3, [r3, #16]
 800b142:	60fb      	str	r3, [r7, #12]
 800b144:	e00c      	b.n	800b160 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	3308      	adds	r3, #8
 800b14a:	60fb      	str	r3, [r7, #12]
 800b14c:	e002      	b.n	800b154 <vListInsert+0x2e>
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	685b      	ldr	r3, [r3, #4]
 800b152:	60fb      	str	r3, [r7, #12]
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	685b      	ldr	r3, [r3, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	68ba      	ldr	r2, [r7, #8]
 800b15c:	429a      	cmp	r2, r3
 800b15e:	d2f6      	bcs.n	800b14e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	685a      	ldr	r2, [r3, #4]
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	685b      	ldr	r3, [r3, #4]
 800b16c:	683a      	ldr	r2, [r7, #0]
 800b16e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b170:	683b      	ldr	r3, [r7, #0]
 800b172:	68fa      	ldr	r2, [r7, #12]
 800b174:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	683a      	ldr	r2, [r7, #0]
 800b17a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	687a      	ldr	r2, [r7, #4]
 800b180:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	1c5a      	adds	r2, r3, #1
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	601a      	str	r2, [r3, #0]
}
 800b18c:	bf00      	nop
 800b18e:	3714      	adds	r7, #20
 800b190:	46bd      	mov	sp, r7
 800b192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b196:	4770      	bx	lr

0800b198 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b198:	b480      	push	{r7}
 800b19a:	b085      	sub	sp, #20
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	691b      	ldr	r3, [r3, #16]
 800b1a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	685b      	ldr	r3, [r3, #4]
 800b1aa:	687a      	ldr	r2, [r7, #4]
 800b1ac:	6892      	ldr	r2, [r2, #8]
 800b1ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	689b      	ldr	r3, [r3, #8]
 800b1b4:	687a      	ldr	r2, [r7, #4]
 800b1b6:	6852      	ldr	r2, [r2, #4]
 800b1b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	685b      	ldr	r3, [r3, #4]
 800b1be:	687a      	ldr	r2, [r7, #4]
 800b1c0:	429a      	cmp	r2, r3
 800b1c2:	d103      	bne.n	800b1cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	689a      	ldr	r2, [r3, #8]
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	1e5a      	subs	r2, r3, #1
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	681b      	ldr	r3, [r3, #0]
}
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	3714      	adds	r7, #20
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ea:	4770      	bx	lr

0800b1ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b084      	sub	sp, #16
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
 800b1f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d10b      	bne.n	800b218 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b204:	f383 8811 	msr	BASEPRI, r3
 800b208:	f3bf 8f6f 	isb	sy
 800b20c:	f3bf 8f4f 	dsb	sy
 800b210:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b212:	bf00      	nop
 800b214:	bf00      	nop
 800b216:	e7fd      	b.n	800b214 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b218:	f001 fb26 	bl	800c868 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	681a      	ldr	r2, [r3, #0]
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b224:	68f9      	ldr	r1, [r7, #12]
 800b226:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b228:	fb01 f303 	mul.w	r3, r1, r3
 800b22c:	441a      	add	r2, r3
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	2200      	movs	r2, #0
 800b236:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	681a      	ldr	r2, [r3, #0]
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	681a      	ldr	r2, [r3, #0]
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b248:	3b01      	subs	r3, #1
 800b24a:	68f9      	ldr	r1, [r7, #12]
 800b24c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b24e:	fb01 f303 	mul.w	r3, r1, r3
 800b252:	441a      	add	r2, r3
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	22ff      	movs	r2, #255	@ 0xff
 800b25c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	22ff      	movs	r2, #255	@ 0xff
 800b264:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d114      	bne.n	800b298 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	691b      	ldr	r3, [r3, #16]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d01a      	beq.n	800b2ac <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	3310      	adds	r3, #16
 800b27a:	4618      	mov	r0, r3
 800b27c:	f000 fef6 	bl	800c06c <xTaskRemoveFromEventList>
 800b280:	4603      	mov	r3, r0
 800b282:	2b00      	cmp	r3, #0
 800b284:	d012      	beq.n	800b2ac <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b286:	4b0d      	ldr	r3, [pc, #52]	@ (800b2bc <xQueueGenericReset+0xd0>)
 800b288:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b28c:	601a      	str	r2, [r3, #0]
 800b28e:	f3bf 8f4f 	dsb	sy
 800b292:	f3bf 8f6f 	isb	sy
 800b296:	e009      	b.n	800b2ac <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	3310      	adds	r3, #16
 800b29c:	4618      	mov	r0, r3
 800b29e:	f7ff fef1 	bl	800b084 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	3324      	adds	r3, #36	@ 0x24
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	f7ff feec 	bl	800b084 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b2ac:	f001 fb0e 	bl	800c8cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b2b0:	2301      	movs	r3, #1
}
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	3710      	adds	r7, #16
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	bd80      	pop	{r7, pc}
 800b2ba:	bf00      	nop
 800b2bc:	e000ed04 	.word	0xe000ed04

0800b2c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b08e      	sub	sp, #56	@ 0x38
 800b2c4:	af02      	add	r7, sp, #8
 800b2c6:	60f8      	str	r0, [r7, #12]
 800b2c8:	60b9      	str	r1, [r7, #8]
 800b2ca:	607a      	str	r2, [r7, #4]
 800b2cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d10b      	bne.n	800b2ec <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800b2d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2d8:	f383 8811 	msr	BASEPRI, r3
 800b2dc:	f3bf 8f6f 	isb	sy
 800b2e0:	f3bf 8f4f 	dsb	sy
 800b2e4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b2e6:	bf00      	nop
 800b2e8:	bf00      	nop
 800b2ea:	e7fd      	b.n	800b2e8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b2ec:	683b      	ldr	r3, [r7, #0]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d10b      	bne.n	800b30a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800b2f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2f6:	f383 8811 	msr	BASEPRI, r3
 800b2fa:	f3bf 8f6f 	isb	sy
 800b2fe:	f3bf 8f4f 	dsb	sy
 800b302:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b304:	bf00      	nop
 800b306:	bf00      	nop
 800b308:	e7fd      	b.n	800b306 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d002      	beq.n	800b316 <xQueueGenericCreateStatic+0x56>
 800b310:	68bb      	ldr	r3, [r7, #8]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d001      	beq.n	800b31a <xQueueGenericCreateStatic+0x5a>
 800b316:	2301      	movs	r3, #1
 800b318:	e000      	b.n	800b31c <xQueueGenericCreateStatic+0x5c>
 800b31a:	2300      	movs	r3, #0
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d10b      	bne.n	800b338 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800b320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b324:	f383 8811 	msr	BASEPRI, r3
 800b328:	f3bf 8f6f 	isb	sy
 800b32c:	f3bf 8f4f 	dsb	sy
 800b330:	623b      	str	r3, [r7, #32]
}
 800b332:	bf00      	nop
 800b334:	bf00      	nop
 800b336:	e7fd      	b.n	800b334 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d102      	bne.n	800b344 <xQueueGenericCreateStatic+0x84>
 800b33e:	68bb      	ldr	r3, [r7, #8]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d101      	bne.n	800b348 <xQueueGenericCreateStatic+0x88>
 800b344:	2301      	movs	r3, #1
 800b346:	e000      	b.n	800b34a <xQueueGenericCreateStatic+0x8a>
 800b348:	2300      	movs	r3, #0
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d10b      	bne.n	800b366 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800b34e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b352:	f383 8811 	msr	BASEPRI, r3
 800b356:	f3bf 8f6f 	isb	sy
 800b35a:	f3bf 8f4f 	dsb	sy
 800b35e:	61fb      	str	r3, [r7, #28]
}
 800b360:	bf00      	nop
 800b362:	bf00      	nop
 800b364:	e7fd      	b.n	800b362 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b366:	2348      	movs	r3, #72	@ 0x48
 800b368:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b36a:	697b      	ldr	r3, [r7, #20]
 800b36c:	2b48      	cmp	r3, #72	@ 0x48
 800b36e:	d00b      	beq.n	800b388 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800b370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b374:	f383 8811 	msr	BASEPRI, r3
 800b378:	f3bf 8f6f 	isb	sy
 800b37c:	f3bf 8f4f 	dsb	sy
 800b380:	61bb      	str	r3, [r7, #24]
}
 800b382:	bf00      	nop
 800b384:	bf00      	nop
 800b386:	e7fd      	b.n	800b384 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b388:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b38a:	683b      	ldr	r3, [r7, #0]
 800b38c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800b38e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b390:	2b00      	cmp	r3, #0
 800b392:	d00d      	beq.n	800b3b0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b396:	2201      	movs	r2, #1
 800b398:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b39c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800b3a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3a2:	9300      	str	r3, [sp, #0]
 800b3a4:	4613      	mov	r3, r2
 800b3a6:	687a      	ldr	r2, [r7, #4]
 800b3a8:	68b9      	ldr	r1, [r7, #8]
 800b3aa:	68f8      	ldr	r0, [r7, #12]
 800b3ac:	f000 f840 	bl	800b430 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b3b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	3730      	adds	r7, #48	@ 0x30
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	bd80      	pop	{r7, pc}

0800b3ba <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b3ba:	b580      	push	{r7, lr}
 800b3bc:	b08a      	sub	sp, #40	@ 0x28
 800b3be:	af02      	add	r7, sp, #8
 800b3c0:	60f8      	str	r0, [r7, #12]
 800b3c2:	60b9      	str	r1, [r7, #8]
 800b3c4:	4613      	mov	r3, r2
 800b3c6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d10b      	bne.n	800b3e6 <xQueueGenericCreate+0x2c>
	__asm volatile
 800b3ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3d2:	f383 8811 	msr	BASEPRI, r3
 800b3d6:	f3bf 8f6f 	isb	sy
 800b3da:	f3bf 8f4f 	dsb	sy
 800b3de:	613b      	str	r3, [r7, #16]
}
 800b3e0:	bf00      	nop
 800b3e2:	bf00      	nop
 800b3e4:	e7fd      	b.n	800b3e2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	68ba      	ldr	r2, [r7, #8]
 800b3ea:	fb02 f303 	mul.w	r3, r2, r3
 800b3ee:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b3f0:	69fb      	ldr	r3, [r7, #28]
 800b3f2:	3348      	adds	r3, #72	@ 0x48
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	f001 fb17 	bl	800ca28 <pvPortMalloc>
 800b3fa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b3fc:	69bb      	ldr	r3, [r7, #24]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d011      	beq.n	800b426 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b402:	69bb      	ldr	r3, [r7, #24]
 800b404:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b406:	697b      	ldr	r3, [r7, #20]
 800b408:	3348      	adds	r3, #72	@ 0x48
 800b40a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b40c:	69bb      	ldr	r3, [r7, #24]
 800b40e:	2200      	movs	r2, #0
 800b410:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b414:	79fa      	ldrb	r2, [r7, #7]
 800b416:	69bb      	ldr	r3, [r7, #24]
 800b418:	9300      	str	r3, [sp, #0]
 800b41a:	4613      	mov	r3, r2
 800b41c:	697a      	ldr	r2, [r7, #20]
 800b41e:	68b9      	ldr	r1, [r7, #8]
 800b420:	68f8      	ldr	r0, [r7, #12]
 800b422:	f000 f805 	bl	800b430 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b426:	69bb      	ldr	r3, [r7, #24]
	}
 800b428:	4618      	mov	r0, r3
 800b42a:	3720      	adds	r7, #32
 800b42c:	46bd      	mov	sp, r7
 800b42e:	bd80      	pop	{r7, pc}

0800b430 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b430:	b580      	push	{r7, lr}
 800b432:	b084      	sub	sp, #16
 800b434:	af00      	add	r7, sp, #0
 800b436:	60f8      	str	r0, [r7, #12]
 800b438:	60b9      	str	r1, [r7, #8]
 800b43a:	607a      	str	r2, [r7, #4]
 800b43c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b43e:	68bb      	ldr	r3, [r7, #8]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d103      	bne.n	800b44c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b444:	69bb      	ldr	r3, [r7, #24]
 800b446:	69ba      	ldr	r2, [r7, #24]
 800b448:	601a      	str	r2, [r3, #0]
 800b44a:	e002      	b.n	800b452 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b44c:	69bb      	ldr	r3, [r7, #24]
 800b44e:	687a      	ldr	r2, [r7, #4]
 800b450:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b452:	69bb      	ldr	r3, [r7, #24]
 800b454:	68fa      	ldr	r2, [r7, #12]
 800b456:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b458:	69bb      	ldr	r3, [r7, #24]
 800b45a:	68ba      	ldr	r2, [r7, #8]
 800b45c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b45e:	2101      	movs	r1, #1
 800b460:	69b8      	ldr	r0, [r7, #24]
 800b462:	f7ff fec3 	bl	800b1ec <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b466:	bf00      	nop
 800b468:	3710      	adds	r7, #16
 800b46a:	46bd      	mov	sp, r7
 800b46c:	bd80      	pop	{r7, pc}
	...

0800b470 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b08e      	sub	sp, #56	@ 0x38
 800b474:	af00      	add	r7, sp, #0
 800b476:	60f8      	str	r0, [r7, #12]
 800b478:	60b9      	str	r1, [r7, #8]
 800b47a:	607a      	str	r2, [r7, #4]
 800b47c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b47e:	2300      	movs	r3, #0
 800b480:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d10b      	bne.n	800b4a4 <xQueueGenericSend+0x34>
	__asm volatile
 800b48c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b490:	f383 8811 	msr	BASEPRI, r3
 800b494:	f3bf 8f6f 	isb	sy
 800b498:	f3bf 8f4f 	dsb	sy
 800b49c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b49e:	bf00      	nop
 800b4a0:	bf00      	nop
 800b4a2:	e7fd      	b.n	800b4a0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b4a4:	68bb      	ldr	r3, [r7, #8]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d103      	bne.n	800b4b2 <xQueueGenericSend+0x42>
 800b4aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d101      	bne.n	800b4b6 <xQueueGenericSend+0x46>
 800b4b2:	2301      	movs	r3, #1
 800b4b4:	e000      	b.n	800b4b8 <xQueueGenericSend+0x48>
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d10b      	bne.n	800b4d4 <xQueueGenericSend+0x64>
	__asm volatile
 800b4bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4c0:	f383 8811 	msr	BASEPRI, r3
 800b4c4:	f3bf 8f6f 	isb	sy
 800b4c8:	f3bf 8f4f 	dsb	sy
 800b4cc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b4ce:	bf00      	nop
 800b4d0:	bf00      	nop
 800b4d2:	e7fd      	b.n	800b4d0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	2b02      	cmp	r3, #2
 800b4d8:	d103      	bne.n	800b4e2 <xQueueGenericSend+0x72>
 800b4da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b4de:	2b01      	cmp	r3, #1
 800b4e0:	d101      	bne.n	800b4e6 <xQueueGenericSend+0x76>
 800b4e2:	2301      	movs	r3, #1
 800b4e4:	e000      	b.n	800b4e8 <xQueueGenericSend+0x78>
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d10b      	bne.n	800b504 <xQueueGenericSend+0x94>
	__asm volatile
 800b4ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4f0:	f383 8811 	msr	BASEPRI, r3
 800b4f4:	f3bf 8f6f 	isb	sy
 800b4f8:	f3bf 8f4f 	dsb	sy
 800b4fc:	623b      	str	r3, [r7, #32]
}
 800b4fe:	bf00      	nop
 800b500:	bf00      	nop
 800b502:	e7fd      	b.n	800b500 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b504:	f000 ff72 	bl	800c3ec <xTaskGetSchedulerState>
 800b508:	4603      	mov	r3, r0
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d102      	bne.n	800b514 <xQueueGenericSend+0xa4>
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d101      	bne.n	800b518 <xQueueGenericSend+0xa8>
 800b514:	2301      	movs	r3, #1
 800b516:	e000      	b.n	800b51a <xQueueGenericSend+0xaa>
 800b518:	2300      	movs	r3, #0
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d10b      	bne.n	800b536 <xQueueGenericSend+0xc6>
	__asm volatile
 800b51e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b522:	f383 8811 	msr	BASEPRI, r3
 800b526:	f3bf 8f6f 	isb	sy
 800b52a:	f3bf 8f4f 	dsb	sy
 800b52e:	61fb      	str	r3, [r7, #28]
}
 800b530:	bf00      	nop
 800b532:	bf00      	nop
 800b534:	e7fd      	b.n	800b532 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b536:	f001 f997 	bl	800c868 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b53a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b53c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b53e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b540:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b542:	429a      	cmp	r2, r3
 800b544:	d302      	bcc.n	800b54c <xQueueGenericSend+0xdc>
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	2b02      	cmp	r3, #2
 800b54a:	d129      	bne.n	800b5a0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b54c:	683a      	ldr	r2, [r7, #0]
 800b54e:	68b9      	ldr	r1, [r7, #8]
 800b550:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b552:	f000 f88f 	bl	800b674 <prvCopyDataToQueue>
 800b556:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b55a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d010      	beq.n	800b582 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b562:	3324      	adds	r3, #36	@ 0x24
 800b564:	4618      	mov	r0, r3
 800b566:	f000 fd81 	bl	800c06c <xTaskRemoveFromEventList>
 800b56a:	4603      	mov	r3, r0
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d013      	beq.n	800b598 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b570:	4b3f      	ldr	r3, [pc, #252]	@ (800b670 <xQueueGenericSend+0x200>)
 800b572:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b576:	601a      	str	r2, [r3, #0]
 800b578:	f3bf 8f4f 	dsb	sy
 800b57c:	f3bf 8f6f 	isb	sy
 800b580:	e00a      	b.n	800b598 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b584:	2b00      	cmp	r3, #0
 800b586:	d007      	beq.n	800b598 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b588:	4b39      	ldr	r3, [pc, #228]	@ (800b670 <xQueueGenericSend+0x200>)
 800b58a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b58e:	601a      	str	r2, [r3, #0]
 800b590:	f3bf 8f4f 	dsb	sy
 800b594:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b598:	f001 f998 	bl	800c8cc <vPortExitCritical>
				return pdPASS;
 800b59c:	2301      	movs	r3, #1
 800b59e:	e063      	b.n	800b668 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d103      	bne.n	800b5ae <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b5a6:	f001 f991 	bl	800c8cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	e05c      	b.n	800b668 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b5ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d106      	bne.n	800b5c2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b5b4:	f107 0314 	add.w	r3, r7, #20
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	f000 fdbb 	bl	800c134 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b5be:	2301      	movs	r3, #1
 800b5c0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b5c2:	f001 f983 	bl	800c8cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b5c6:	f000 fb59 	bl	800bc7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b5ca:	f001 f94d 	bl	800c868 <vPortEnterCritical>
 800b5ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b5d4:	b25b      	sxtb	r3, r3
 800b5d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5da:	d103      	bne.n	800b5e4 <xQueueGenericSend+0x174>
 800b5dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5de:	2200      	movs	r2, #0
 800b5e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b5e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5e6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b5ea:	b25b      	sxtb	r3, r3
 800b5ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5f0:	d103      	bne.n	800b5fa <xQueueGenericSend+0x18a>
 800b5f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b5fa:	f001 f967 	bl	800c8cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b5fe:	1d3a      	adds	r2, r7, #4
 800b600:	f107 0314 	add.w	r3, r7, #20
 800b604:	4611      	mov	r1, r2
 800b606:	4618      	mov	r0, r3
 800b608:	f000 fdaa 	bl	800c160 <xTaskCheckForTimeOut>
 800b60c:	4603      	mov	r3, r0
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d124      	bne.n	800b65c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b612:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b614:	f000 f8ea 	bl	800b7ec <prvIsQueueFull>
 800b618:	4603      	mov	r3, r0
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d018      	beq.n	800b650 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b61e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b620:	3310      	adds	r3, #16
 800b622:	687a      	ldr	r2, [r7, #4]
 800b624:	4611      	mov	r1, r2
 800b626:	4618      	mov	r0, r3
 800b628:	f000 fcfa 	bl	800c020 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b62c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b62e:	f000 f88b 	bl	800b748 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b632:	f000 fb31 	bl	800bc98 <xTaskResumeAll>
 800b636:	4603      	mov	r3, r0
 800b638:	2b00      	cmp	r3, #0
 800b63a:	f47f af7c 	bne.w	800b536 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800b63e:	4b0c      	ldr	r3, [pc, #48]	@ (800b670 <xQueueGenericSend+0x200>)
 800b640:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b644:	601a      	str	r2, [r3, #0]
 800b646:	f3bf 8f4f 	dsb	sy
 800b64a:	f3bf 8f6f 	isb	sy
 800b64e:	e772      	b.n	800b536 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b650:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b652:	f000 f879 	bl	800b748 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b656:	f000 fb1f 	bl	800bc98 <xTaskResumeAll>
 800b65a:	e76c      	b.n	800b536 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b65c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b65e:	f000 f873 	bl	800b748 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b662:	f000 fb19 	bl	800bc98 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b666:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b668:	4618      	mov	r0, r3
 800b66a:	3738      	adds	r7, #56	@ 0x38
 800b66c:	46bd      	mov	sp, r7
 800b66e:	bd80      	pop	{r7, pc}
 800b670:	e000ed04 	.word	0xe000ed04

0800b674 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b086      	sub	sp, #24
 800b678:	af00      	add	r7, sp, #0
 800b67a:	60f8      	str	r0, [r7, #12]
 800b67c:	60b9      	str	r1, [r7, #8]
 800b67e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b680:	2300      	movs	r3, #0
 800b682:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b688:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d10d      	bne.n	800b6ae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d14d      	bne.n	800b736 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	689b      	ldr	r3, [r3, #8]
 800b69e:	4618      	mov	r0, r3
 800b6a0:	f000 fec2 	bl	800c428 <xTaskPriorityDisinherit>
 800b6a4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	609a      	str	r2, [r3, #8]
 800b6ac:	e043      	b.n	800b736 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d119      	bne.n	800b6e8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	6858      	ldr	r0, [r3, #4]
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6bc:	461a      	mov	r2, r3
 800b6be:	68b9      	ldr	r1, [r7, #8]
 800b6c0:	f002 fd21 	bl	800e106 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	685a      	ldr	r2, [r3, #4]
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6cc:	441a      	add	r2, r3
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	685a      	ldr	r2, [r3, #4]
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	689b      	ldr	r3, [r3, #8]
 800b6da:	429a      	cmp	r2, r3
 800b6dc:	d32b      	bcc.n	800b736 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	681a      	ldr	r2, [r3, #0]
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	605a      	str	r2, [r3, #4]
 800b6e6:	e026      	b.n	800b736 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	68d8      	ldr	r0, [r3, #12]
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6f0:	461a      	mov	r2, r3
 800b6f2:	68b9      	ldr	r1, [r7, #8]
 800b6f4:	f002 fd07 	bl	800e106 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	68da      	ldr	r2, [r3, #12]
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b700:	425b      	negs	r3, r3
 800b702:	441a      	add	r2, r3
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	68da      	ldr	r2, [r3, #12]
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	429a      	cmp	r2, r3
 800b712:	d207      	bcs.n	800b724 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	689a      	ldr	r2, [r3, #8]
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b71c:	425b      	negs	r3, r3
 800b71e:	441a      	add	r2, r3
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	2b02      	cmp	r3, #2
 800b728:	d105      	bne.n	800b736 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b72a:	693b      	ldr	r3, [r7, #16]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d002      	beq.n	800b736 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b730:	693b      	ldr	r3, [r7, #16]
 800b732:	3b01      	subs	r3, #1
 800b734:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b736:	693b      	ldr	r3, [r7, #16]
 800b738:	1c5a      	adds	r2, r3, #1
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800b73e:	697b      	ldr	r3, [r7, #20]
}
 800b740:	4618      	mov	r0, r3
 800b742:	3718      	adds	r7, #24
 800b744:	46bd      	mov	sp, r7
 800b746:	bd80      	pop	{r7, pc}

0800b748 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b084      	sub	sp, #16
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b750:	f001 f88a 	bl	800c868 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b75a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b75c:	e011      	b.n	800b782 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b762:	2b00      	cmp	r3, #0
 800b764:	d012      	beq.n	800b78c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	3324      	adds	r3, #36	@ 0x24
 800b76a:	4618      	mov	r0, r3
 800b76c:	f000 fc7e 	bl	800c06c <xTaskRemoveFromEventList>
 800b770:	4603      	mov	r3, r0
 800b772:	2b00      	cmp	r3, #0
 800b774:	d001      	beq.n	800b77a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b776:	f000 fd57 	bl	800c228 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b77a:	7bfb      	ldrb	r3, [r7, #15]
 800b77c:	3b01      	subs	r3, #1
 800b77e:	b2db      	uxtb	r3, r3
 800b780:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b782:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b786:	2b00      	cmp	r3, #0
 800b788:	dce9      	bgt.n	800b75e <prvUnlockQueue+0x16>
 800b78a:	e000      	b.n	800b78e <prvUnlockQueue+0x46>
					break;
 800b78c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	22ff      	movs	r2, #255	@ 0xff
 800b792:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800b796:	f001 f899 	bl	800c8cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b79a:	f001 f865 	bl	800c868 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b7a4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b7a6:	e011      	b.n	800b7cc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	691b      	ldr	r3, [r3, #16]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d012      	beq.n	800b7d6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	3310      	adds	r3, #16
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	f000 fc59 	bl	800c06c <xTaskRemoveFromEventList>
 800b7ba:	4603      	mov	r3, r0
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d001      	beq.n	800b7c4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b7c0:	f000 fd32 	bl	800c228 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b7c4:	7bbb      	ldrb	r3, [r7, #14]
 800b7c6:	3b01      	subs	r3, #1
 800b7c8:	b2db      	uxtb	r3, r3
 800b7ca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b7cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	dce9      	bgt.n	800b7a8 <prvUnlockQueue+0x60>
 800b7d4:	e000      	b.n	800b7d8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b7d6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	22ff      	movs	r2, #255	@ 0xff
 800b7dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800b7e0:	f001 f874 	bl	800c8cc <vPortExitCritical>
}
 800b7e4:	bf00      	nop
 800b7e6:	3710      	adds	r7, #16
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	bd80      	pop	{r7, pc}

0800b7ec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b084      	sub	sp, #16
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b7f4:	f001 f838 	bl	800c868 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b800:	429a      	cmp	r2, r3
 800b802:	d102      	bne.n	800b80a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b804:	2301      	movs	r3, #1
 800b806:	60fb      	str	r3, [r7, #12]
 800b808:	e001      	b.n	800b80e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b80a:	2300      	movs	r3, #0
 800b80c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b80e:	f001 f85d 	bl	800c8cc <vPortExitCritical>

	return xReturn;
 800b812:	68fb      	ldr	r3, [r7, #12]
}
 800b814:	4618      	mov	r0, r3
 800b816:	3710      	adds	r7, #16
 800b818:	46bd      	mov	sp, r7
 800b81a:	bd80      	pop	{r7, pc}

0800b81c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b08e      	sub	sp, #56	@ 0x38
 800b820:	af04      	add	r7, sp, #16
 800b822:	60f8      	str	r0, [r7, #12]
 800b824:	60b9      	str	r1, [r7, #8]
 800b826:	607a      	str	r2, [r7, #4]
 800b828:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b82a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d10b      	bne.n	800b848 <xTaskCreateStatic+0x2c>
	__asm volatile
 800b830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b834:	f383 8811 	msr	BASEPRI, r3
 800b838:	f3bf 8f6f 	isb	sy
 800b83c:	f3bf 8f4f 	dsb	sy
 800b840:	623b      	str	r3, [r7, #32]
}
 800b842:	bf00      	nop
 800b844:	bf00      	nop
 800b846:	e7fd      	b.n	800b844 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d10b      	bne.n	800b866 <xTaskCreateStatic+0x4a>
	__asm volatile
 800b84e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b852:	f383 8811 	msr	BASEPRI, r3
 800b856:	f3bf 8f6f 	isb	sy
 800b85a:	f3bf 8f4f 	dsb	sy
 800b85e:	61fb      	str	r3, [r7, #28]
}
 800b860:	bf00      	nop
 800b862:	bf00      	nop
 800b864:	e7fd      	b.n	800b862 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b866:	2354      	movs	r3, #84	@ 0x54
 800b868:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b86a:	693b      	ldr	r3, [r7, #16]
 800b86c:	2b54      	cmp	r3, #84	@ 0x54
 800b86e:	d00b      	beq.n	800b888 <xTaskCreateStatic+0x6c>
	__asm volatile
 800b870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b874:	f383 8811 	msr	BASEPRI, r3
 800b878:	f3bf 8f6f 	isb	sy
 800b87c:	f3bf 8f4f 	dsb	sy
 800b880:	61bb      	str	r3, [r7, #24]
}
 800b882:	bf00      	nop
 800b884:	bf00      	nop
 800b886:	e7fd      	b.n	800b884 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b888:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b88a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d01e      	beq.n	800b8ce <xTaskCreateStatic+0xb2>
 800b890:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b892:	2b00      	cmp	r3, #0
 800b894:	d01b      	beq.n	800b8ce <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b898:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b89a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b89c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b89e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b8a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8a2:	2202      	movs	r2, #2
 800b8a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	9303      	str	r3, [sp, #12]
 800b8ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8ae:	9302      	str	r3, [sp, #8]
 800b8b0:	f107 0314 	add.w	r3, r7, #20
 800b8b4:	9301      	str	r3, [sp, #4]
 800b8b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8b8:	9300      	str	r3, [sp, #0]
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	687a      	ldr	r2, [r7, #4]
 800b8be:	68b9      	ldr	r1, [r7, #8]
 800b8c0:	68f8      	ldr	r0, [r7, #12]
 800b8c2:	f000 f850 	bl	800b966 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b8c6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b8c8:	f000 f8d6 	bl	800ba78 <prvAddNewTaskToReadyList>
 800b8cc:	e001      	b.n	800b8d2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b8d2:	697b      	ldr	r3, [r7, #20]
	}
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	3728      	adds	r7, #40	@ 0x28
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	bd80      	pop	{r7, pc}

0800b8dc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b08c      	sub	sp, #48	@ 0x30
 800b8e0:	af04      	add	r7, sp, #16
 800b8e2:	60f8      	str	r0, [r7, #12]
 800b8e4:	60b9      	str	r1, [r7, #8]
 800b8e6:	603b      	str	r3, [r7, #0]
 800b8e8:	4613      	mov	r3, r2
 800b8ea:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b8ec:	88fb      	ldrh	r3, [r7, #6]
 800b8ee:	009b      	lsls	r3, r3, #2
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	f001 f899 	bl	800ca28 <pvPortMalloc>
 800b8f6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b8f8:	697b      	ldr	r3, [r7, #20]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d00e      	beq.n	800b91c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b8fe:	2054      	movs	r0, #84	@ 0x54
 800b900:	f001 f892 	bl	800ca28 <pvPortMalloc>
 800b904:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b906:	69fb      	ldr	r3, [r7, #28]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d003      	beq.n	800b914 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b90c:	69fb      	ldr	r3, [r7, #28]
 800b90e:	697a      	ldr	r2, [r7, #20]
 800b910:	631a      	str	r2, [r3, #48]	@ 0x30
 800b912:	e005      	b.n	800b920 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b914:	6978      	ldr	r0, [r7, #20]
 800b916:	f001 f955 	bl	800cbc4 <vPortFree>
 800b91a:	e001      	b.n	800b920 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b91c:	2300      	movs	r3, #0
 800b91e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b920:	69fb      	ldr	r3, [r7, #28]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d017      	beq.n	800b956 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b926:	69fb      	ldr	r3, [r7, #28]
 800b928:	2200      	movs	r2, #0
 800b92a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b92e:	88fa      	ldrh	r2, [r7, #6]
 800b930:	2300      	movs	r3, #0
 800b932:	9303      	str	r3, [sp, #12]
 800b934:	69fb      	ldr	r3, [r7, #28]
 800b936:	9302      	str	r3, [sp, #8]
 800b938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b93a:	9301      	str	r3, [sp, #4]
 800b93c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b93e:	9300      	str	r3, [sp, #0]
 800b940:	683b      	ldr	r3, [r7, #0]
 800b942:	68b9      	ldr	r1, [r7, #8]
 800b944:	68f8      	ldr	r0, [r7, #12]
 800b946:	f000 f80e 	bl	800b966 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b94a:	69f8      	ldr	r0, [r7, #28]
 800b94c:	f000 f894 	bl	800ba78 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b950:	2301      	movs	r3, #1
 800b952:	61bb      	str	r3, [r7, #24]
 800b954:	e002      	b.n	800b95c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b956:	f04f 33ff 	mov.w	r3, #4294967295
 800b95a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b95c:	69bb      	ldr	r3, [r7, #24]
	}
 800b95e:	4618      	mov	r0, r3
 800b960:	3720      	adds	r7, #32
 800b962:	46bd      	mov	sp, r7
 800b964:	bd80      	pop	{r7, pc}

0800b966 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b966:	b580      	push	{r7, lr}
 800b968:	b088      	sub	sp, #32
 800b96a:	af00      	add	r7, sp, #0
 800b96c:	60f8      	str	r0, [r7, #12]
 800b96e:	60b9      	str	r1, [r7, #8]
 800b970:	607a      	str	r2, [r7, #4]
 800b972:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b976:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b97e:	3b01      	subs	r3, #1
 800b980:	009b      	lsls	r3, r3, #2
 800b982:	4413      	add	r3, r2
 800b984:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b986:	69bb      	ldr	r3, [r7, #24]
 800b988:	f023 0307 	bic.w	r3, r3, #7
 800b98c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b98e:	69bb      	ldr	r3, [r7, #24]
 800b990:	f003 0307 	and.w	r3, r3, #7
 800b994:	2b00      	cmp	r3, #0
 800b996:	d00b      	beq.n	800b9b0 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800b998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b99c:	f383 8811 	msr	BASEPRI, r3
 800b9a0:	f3bf 8f6f 	isb	sy
 800b9a4:	f3bf 8f4f 	dsb	sy
 800b9a8:	617b      	str	r3, [r7, #20]
}
 800b9aa:	bf00      	nop
 800b9ac:	bf00      	nop
 800b9ae:	e7fd      	b.n	800b9ac <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b9b0:	68bb      	ldr	r3, [r7, #8]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d01f      	beq.n	800b9f6 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	61fb      	str	r3, [r7, #28]
 800b9ba:	e012      	b.n	800b9e2 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b9bc:	68ba      	ldr	r2, [r7, #8]
 800b9be:	69fb      	ldr	r3, [r7, #28]
 800b9c0:	4413      	add	r3, r2
 800b9c2:	7819      	ldrb	r1, [r3, #0]
 800b9c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b9c6:	69fb      	ldr	r3, [r7, #28]
 800b9c8:	4413      	add	r3, r2
 800b9ca:	3334      	adds	r3, #52	@ 0x34
 800b9cc:	460a      	mov	r2, r1
 800b9ce:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b9d0:	68ba      	ldr	r2, [r7, #8]
 800b9d2:	69fb      	ldr	r3, [r7, #28]
 800b9d4:	4413      	add	r3, r2
 800b9d6:	781b      	ldrb	r3, [r3, #0]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d006      	beq.n	800b9ea <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b9dc:	69fb      	ldr	r3, [r7, #28]
 800b9de:	3301      	adds	r3, #1
 800b9e0:	61fb      	str	r3, [r7, #28]
 800b9e2:	69fb      	ldr	r3, [r7, #28]
 800b9e4:	2b0f      	cmp	r3, #15
 800b9e6:	d9e9      	bls.n	800b9bc <prvInitialiseNewTask+0x56>
 800b9e8:	e000      	b.n	800b9ec <prvInitialiseNewTask+0x86>
			{
				break;
 800b9ea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b9ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b9f4:	e003      	b.n	800b9fe <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b9f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b9fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba00:	2b06      	cmp	r3, #6
 800ba02:	d901      	bls.n	800ba08 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ba04:	2306      	movs	r3, #6
 800ba06:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ba08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba0a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ba0c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ba0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba10:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ba12:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800ba14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba16:	2200      	movs	r2, #0
 800ba18:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ba1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba1c:	3304      	adds	r3, #4
 800ba1e:	4618      	mov	r0, r3
 800ba20:	f7ff fb50 	bl	800b0c4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ba24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba26:	3318      	adds	r3, #24
 800ba28:	4618      	mov	r0, r3
 800ba2a:	f7ff fb4b 	bl	800b0c4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ba2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ba32:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba36:	f1c3 0207 	rsb	r2, r3, #7
 800ba3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba3c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ba3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ba42:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ba44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba46:	2200      	movs	r2, #0
 800ba48:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ba4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ba52:	683a      	ldr	r2, [r7, #0]
 800ba54:	68f9      	ldr	r1, [r7, #12]
 800ba56:	69b8      	ldr	r0, [r7, #24]
 800ba58:	f000 fdd4 	bl	800c604 <pxPortInitialiseStack>
 800ba5c:	4602      	mov	r2, r0
 800ba5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba60:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ba62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d002      	beq.n	800ba6e <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ba68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ba6c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ba6e:	bf00      	nop
 800ba70:	3720      	adds	r7, #32
 800ba72:	46bd      	mov	sp, r7
 800ba74:	bd80      	pop	{r7, pc}
	...

0800ba78 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b082      	sub	sp, #8
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ba80:	f000 fef2 	bl	800c868 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ba84:	4b2a      	ldr	r3, [pc, #168]	@ (800bb30 <prvAddNewTaskToReadyList+0xb8>)
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	3301      	adds	r3, #1
 800ba8a:	4a29      	ldr	r2, [pc, #164]	@ (800bb30 <prvAddNewTaskToReadyList+0xb8>)
 800ba8c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ba8e:	4b29      	ldr	r3, [pc, #164]	@ (800bb34 <prvAddNewTaskToReadyList+0xbc>)
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d109      	bne.n	800baaa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ba96:	4a27      	ldr	r2, [pc, #156]	@ (800bb34 <prvAddNewTaskToReadyList+0xbc>)
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ba9c:	4b24      	ldr	r3, [pc, #144]	@ (800bb30 <prvAddNewTaskToReadyList+0xb8>)
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	2b01      	cmp	r3, #1
 800baa2:	d110      	bne.n	800bac6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800baa4:	f000 fbe4 	bl	800c270 <prvInitialiseTaskLists>
 800baa8:	e00d      	b.n	800bac6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800baaa:	4b23      	ldr	r3, [pc, #140]	@ (800bb38 <prvAddNewTaskToReadyList+0xc0>)
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d109      	bne.n	800bac6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bab2:	4b20      	ldr	r3, [pc, #128]	@ (800bb34 <prvAddNewTaskToReadyList+0xbc>)
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800babc:	429a      	cmp	r2, r3
 800babe:	d802      	bhi.n	800bac6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bac0:	4a1c      	ldr	r2, [pc, #112]	@ (800bb34 <prvAddNewTaskToReadyList+0xbc>)
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bac6:	4b1d      	ldr	r3, [pc, #116]	@ (800bb3c <prvAddNewTaskToReadyList+0xc4>)
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	3301      	adds	r3, #1
 800bacc:	4a1b      	ldr	r2, [pc, #108]	@ (800bb3c <prvAddNewTaskToReadyList+0xc4>)
 800bace:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bad4:	2201      	movs	r2, #1
 800bad6:	409a      	lsls	r2, r3
 800bad8:	4b19      	ldr	r3, [pc, #100]	@ (800bb40 <prvAddNewTaskToReadyList+0xc8>)
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	4313      	orrs	r3, r2
 800bade:	4a18      	ldr	r2, [pc, #96]	@ (800bb40 <prvAddNewTaskToReadyList+0xc8>)
 800bae0:	6013      	str	r3, [r2, #0]
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bae6:	4613      	mov	r3, r2
 800bae8:	009b      	lsls	r3, r3, #2
 800baea:	4413      	add	r3, r2
 800baec:	009b      	lsls	r3, r3, #2
 800baee:	4a15      	ldr	r2, [pc, #84]	@ (800bb44 <prvAddNewTaskToReadyList+0xcc>)
 800baf0:	441a      	add	r2, r3
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	3304      	adds	r3, #4
 800baf6:	4619      	mov	r1, r3
 800baf8:	4610      	mov	r0, r2
 800bafa:	f7ff faf0 	bl	800b0de <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bafe:	f000 fee5 	bl	800c8cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bb02:	4b0d      	ldr	r3, [pc, #52]	@ (800bb38 <prvAddNewTaskToReadyList+0xc0>)
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d00e      	beq.n	800bb28 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bb0a:	4b0a      	ldr	r3, [pc, #40]	@ (800bb34 <prvAddNewTaskToReadyList+0xbc>)
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb14:	429a      	cmp	r2, r3
 800bb16:	d207      	bcs.n	800bb28 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bb18:	4b0b      	ldr	r3, [pc, #44]	@ (800bb48 <prvAddNewTaskToReadyList+0xd0>)
 800bb1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bb1e:	601a      	str	r2, [r3, #0]
 800bb20:	f3bf 8f4f 	dsb	sy
 800bb24:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bb28:	bf00      	nop
 800bb2a:	3708      	adds	r7, #8
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	bd80      	pop	{r7, pc}
 800bb30:	20003450 	.word	0x20003450
 800bb34:	20003350 	.word	0x20003350
 800bb38:	2000345c 	.word	0x2000345c
 800bb3c:	2000346c 	.word	0x2000346c
 800bb40:	20003458 	.word	0x20003458
 800bb44:	20003354 	.word	0x20003354
 800bb48:	e000ed04 	.word	0xe000ed04

0800bb4c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b084      	sub	sp, #16
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bb54:	2300      	movs	r3, #0
 800bb56:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d018      	beq.n	800bb90 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800bb5e:	4b14      	ldr	r3, [pc, #80]	@ (800bbb0 <vTaskDelay+0x64>)
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d00b      	beq.n	800bb7e <vTaskDelay+0x32>
	__asm volatile
 800bb66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb6a:	f383 8811 	msr	BASEPRI, r3
 800bb6e:	f3bf 8f6f 	isb	sy
 800bb72:	f3bf 8f4f 	dsb	sy
 800bb76:	60bb      	str	r3, [r7, #8]
}
 800bb78:	bf00      	nop
 800bb7a:	bf00      	nop
 800bb7c:	e7fd      	b.n	800bb7a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800bb7e:	f000 f87d 	bl	800bc7c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bb82:	2100      	movs	r1, #0
 800bb84:	6878      	ldr	r0, [r7, #4]
 800bb86:	f000 fcd7 	bl	800c538 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bb8a:	f000 f885 	bl	800bc98 <xTaskResumeAll>
 800bb8e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d107      	bne.n	800bba6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800bb96:	4b07      	ldr	r3, [pc, #28]	@ (800bbb4 <vTaskDelay+0x68>)
 800bb98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bb9c:	601a      	str	r2, [r3, #0]
 800bb9e:	f3bf 8f4f 	dsb	sy
 800bba2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bba6:	bf00      	nop
 800bba8:	3710      	adds	r7, #16
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	bd80      	pop	{r7, pc}
 800bbae:	bf00      	nop
 800bbb0:	20003478 	.word	0x20003478
 800bbb4:	e000ed04 	.word	0xe000ed04

0800bbb8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b08a      	sub	sp, #40	@ 0x28
 800bbbc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bbc6:	463a      	mov	r2, r7
 800bbc8:	1d39      	adds	r1, r7, #4
 800bbca:	f107 0308 	add.w	r3, r7, #8
 800bbce:	4618      	mov	r0, r3
 800bbd0:	f7f7 fcfa 	bl	80035c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bbd4:	6839      	ldr	r1, [r7, #0]
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	68ba      	ldr	r2, [r7, #8]
 800bbda:	9202      	str	r2, [sp, #8]
 800bbdc:	9301      	str	r3, [sp, #4]
 800bbde:	2300      	movs	r3, #0
 800bbe0:	9300      	str	r3, [sp, #0]
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	460a      	mov	r2, r1
 800bbe6:	491f      	ldr	r1, [pc, #124]	@ (800bc64 <vTaskStartScheduler+0xac>)
 800bbe8:	481f      	ldr	r0, [pc, #124]	@ (800bc68 <vTaskStartScheduler+0xb0>)
 800bbea:	f7ff fe17 	bl	800b81c <xTaskCreateStatic>
 800bbee:	4603      	mov	r3, r0
 800bbf0:	4a1e      	ldr	r2, [pc, #120]	@ (800bc6c <vTaskStartScheduler+0xb4>)
 800bbf2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bbf4:	4b1d      	ldr	r3, [pc, #116]	@ (800bc6c <vTaskStartScheduler+0xb4>)
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d002      	beq.n	800bc02 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bbfc:	2301      	movs	r3, #1
 800bbfe:	617b      	str	r3, [r7, #20]
 800bc00:	e001      	b.n	800bc06 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bc02:	2300      	movs	r3, #0
 800bc04:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bc06:	697b      	ldr	r3, [r7, #20]
 800bc08:	2b01      	cmp	r3, #1
 800bc0a:	d116      	bne.n	800bc3a <vTaskStartScheduler+0x82>
	__asm volatile
 800bc0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc10:	f383 8811 	msr	BASEPRI, r3
 800bc14:	f3bf 8f6f 	isb	sy
 800bc18:	f3bf 8f4f 	dsb	sy
 800bc1c:	613b      	str	r3, [r7, #16]
}
 800bc1e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bc20:	4b13      	ldr	r3, [pc, #76]	@ (800bc70 <vTaskStartScheduler+0xb8>)
 800bc22:	f04f 32ff 	mov.w	r2, #4294967295
 800bc26:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bc28:	4b12      	ldr	r3, [pc, #72]	@ (800bc74 <vTaskStartScheduler+0xbc>)
 800bc2a:	2201      	movs	r2, #1
 800bc2c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bc2e:	4b12      	ldr	r3, [pc, #72]	@ (800bc78 <vTaskStartScheduler+0xc0>)
 800bc30:	2200      	movs	r2, #0
 800bc32:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bc34:	f000 fd74 	bl	800c720 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bc38:	e00f      	b.n	800bc5a <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bc3a:	697b      	ldr	r3, [r7, #20]
 800bc3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc40:	d10b      	bne.n	800bc5a <vTaskStartScheduler+0xa2>
	__asm volatile
 800bc42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc46:	f383 8811 	msr	BASEPRI, r3
 800bc4a:	f3bf 8f6f 	isb	sy
 800bc4e:	f3bf 8f4f 	dsb	sy
 800bc52:	60fb      	str	r3, [r7, #12]
}
 800bc54:	bf00      	nop
 800bc56:	bf00      	nop
 800bc58:	e7fd      	b.n	800bc56 <vTaskStartScheduler+0x9e>
}
 800bc5a:	bf00      	nop
 800bc5c:	3718      	adds	r7, #24
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	bd80      	pop	{r7, pc}
 800bc62:	bf00      	nop
 800bc64:	08011a5c 	.word	0x08011a5c
 800bc68:	0800c241 	.word	0x0800c241
 800bc6c:	20003474 	.word	0x20003474
 800bc70:	20003470 	.word	0x20003470
 800bc74:	2000345c 	.word	0x2000345c
 800bc78:	20003454 	.word	0x20003454

0800bc7c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bc7c:	b480      	push	{r7}
 800bc7e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800bc80:	4b04      	ldr	r3, [pc, #16]	@ (800bc94 <vTaskSuspendAll+0x18>)
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	3301      	adds	r3, #1
 800bc86:	4a03      	ldr	r2, [pc, #12]	@ (800bc94 <vTaskSuspendAll+0x18>)
 800bc88:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800bc8a:	bf00      	nop
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc92:	4770      	bx	lr
 800bc94:	20003478 	.word	0x20003478

0800bc98 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b084      	sub	sp, #16
 800bc9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bc9e:	2300      	movs	r3, #0
 800bca0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bca2:	2300      	movs	r3, #0
 800bca4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bca6:	4b42      	ldr	r3, [pc, #264]	@ (800bdb0 <xTaskResumeAll+0x118>)
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d10b      	bne.n	800bcc6 <xTaskResumeAll+0x2e>
	__asm volatile
 800bcae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcb2:	f383 8811 	msr	BASEPRI, r3
 800bcb6:	f3bf 8f6f 	isb	sy
 800bcba:	f3bf 8f4f 	dsb	sy
 800bcbe:	603b      	str	r3, [r7, #0]
}
 800bcc0:	bf00      	nop
 800bcc2:	bf00      	nop
 800bcc4:	e7fd      	b.n	800bcc2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bcc6:	f000 fdcf 	bl	800c868 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bcca:	4b39      	ldr	r3, [pc, #228]	@ (800bdb0 <xTaskResumeAll+0x118>)
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	3b01      	subs	r3, #1
 800bcd0:	4a37      	ldr	r2, [pc, #220]	@ (800bdb0 <xTaskResumeAll+0x118>)
 800bcd2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bcd4:	4b36      	ldr	r3, [pc, #216]	@ (800bdb0 <xTaskResumeAll+0x118>)
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d161      	bne.n	800bda0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bcdc:	4b35      	ldr	r3, [pc, #212]	@ (800bdb4 <xTaskResumeAll+0x11c>)
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d05d      	beq.n	800bda0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bce4:	e02e      	b.n	800bd44 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bce6:	4b34      	ldr	r3, [pc, #208]	@ (800bdb8 <xTaskResumeAll+0x120>)
 800bce8:	68db      	ldr	r3, [r3, #12]
 800bcea:	68db      	ldr	r3, [r3, #12]
 800bcec:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	3318      	adds	r3, #24
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	f7ff fa50 	bl	800b198 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	3304      	adds	r3, #4
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	f7ff fa4b 	bl	800b198 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd06:	2201      	movs	r2, #1
 800bd08:	409a      	lsls	r2, r3
 800bd0a:	4b2c      	ldr	r3, [pc, #176]	@ (800bdbc <xTaskResumeAll+0x124>)
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	4313      	orrs	r3, r2
 800bd10:	4a2a      	ldr	r2, [pc, #168]	@ (800bdbc <xTaskResumeAll+0x124>)
 800bd12:	6013      	str	r3, [r2, #0]
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd18:	4613      	mov	r3, r2
 800bd1a:	009b      	lsls	r3, r3, #2
 800bd1c:	4413      	add	r3, r2
 800bd1e:	009b      	lsls	r3, r3, #2
 800bd20:	4a27      	ldr	r2, [pc, #156]	@ (800bdc0 <xTaskResumeAll+0x128>)
 800bd22:	441a      	add	r2, r3
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	3304      	adds	r3, #4
 800bd28:	4619      	mov	r1, r3
 800bd2a:	4610      	mov	r0, r2
 800bd2c:	f7ff f9d7 	bl	800b0de <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd34:	4b23      	ldr	r3, [pc, #140]	@ (800bdc4 <xTaskResumeAll+0x12c>)
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd3a:	429a      	cmp	r2, r3
 800bd3c:	d302      	bcc.n	800bd44 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800bd3e:	4b22      	ldr	r3, [pc, #136]	@ (800bdc8 <xTaskResumeAll+0x130>)
 800bd40:	2201      	movs	r2, #1
 800bd42:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bd44:	4b1c      	ldr	r3, [pc, #112]	@ (800bdb8 <xTaskResumeAll+0x120>)
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d1cc      	bne.n	800bce6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d001      	beq.n	800bd56 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bd52:	f000 fb2b 	bl	800c3ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800bd56:	4b1d      	ldr	r3, [pc, #116]	@ (800bdcc <xTaskResumeAll+0x134>)
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d010      	beq.n	800bd84 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bd62:	f000 f847 	bl	800bdf4 <xTaskIncrementTick>
 800bd66:	4603      	mov	r3, r0
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d002      	beq.n	800bd72 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800bd6c:	4b16      	ldr	r3, [pc, #88]	@ (800bdc8 <xTaskResumeAll+0x130>)
 800bd6e:	2201      	movs	r2, #1
 800bd70:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	3b01      	subs	r3, #1
 800bd76:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d1f1      	bne.n	800bd62 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800bd7e:	4b13      	ldr	r3, [pc, #76]	@ (800bdcc <xTaskResumeAll+0x134>)
 800bd80:	2200      	movs	r2, #0
 800bd82:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bd84:	4b10      	ldr	r3, [pc, #64]	@ (800bdc8 <xTaskResumeAll+0x130>)
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d009      	beq.n	800bda0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bd8c:	2301      	movs	r3, #1
 800bd8e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bd90:	4b0f      	ldr	r3, [pc, #60]	@ (800bdd0 <xTaskResumeAll+0x138>)
 800bd92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bd96:	601a      	str	r2, [r3, #0]
 800bd98:	f3bf 8f4f 	dsb	sy
 800bd9c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bda0:	f000 fd94 	bl	800c8cc <vPortExitCritical>

	return xAlreadyYielded;
 800bda4:	68bb      	ldr	r3, [r7, #8]
}
 800bda6:	4618      	mov	r0, r3
 800bda8:	3710      	adds	r7, #16
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	bd80      	pop	{r7, pc}
 800bdae:	bf00      	nop
 800bdb0:	20003478 	.word	0x20003478
 800bdb4:	20003450 	.word	0x20003450
 800bdb8:	20003410 	.word	0x20003410
 800bdbc:	20003458 	.word	0x20003458
 800bdc0:	20003354 	.word	0x20003354
 800bdc4:	20003350 	.word	0x20003350
 800bdc8:	20003464 	.word	0x20003464
 800bdcc:	20003460 	.word	0x20003460
 800bdd0:	e000ed04 	.word	0xe000ed04

0800bdd4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bdd4:	b480      	push	{r7}
 800bdd6:	b083      	sub	sp, #12
 800bdd8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bdda:	4b05      	ldr	r3, [pc, #20]	@ (800bdf0 <xTaskGetTickCount+0x1c>)
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bde0:	687b      	ldr	r3, [r7, #4]
}
 800bde2:	4618      	mov	r0, r3
 800bde4:	370c      	adds	r7, #12
 800bde6:	46bd      	mov	sp, r7
 800bde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdec:	4770      	bx	lr
 800bdee:	bf00      	nop
 800bdf0:	20003454 	.word	0x20003454

0800bdf4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b086      	sub	sp, #24
 800bdf8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bdfe:	4b4f      	ldr	r3, [pc, #316]	@ (800bf3c <xTaskIncrementTick+0x148>)
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	2b00      	cmp	r3, #0
 800be04:	f040 808f 	bne.w	800bf26 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800be08:	4b4d      	ldr	r3, [pc, #308]	@ (800bf40 <xTaskIncrementTick+0x14c>)
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	3301      	adds	r3, #1
 800be0e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800be10:	4a4b      	ldr	r2, [pc, #300]	@ (800bf40 <xTaskIncrementTick+0x14c>)
 800be12:	693b      	ldr	r3, [r7, #16]
 800be14:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800be16:	693b      	ldr	r3, [r7, #16]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d121      	bne.n	800be60 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800be1c:	4b49      	ldr	r3, [pc, #292]	@ (800bf44 <xTaskIncrementTick+0x150>)
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d00b      	beq.n	800be3e <xTaskIncrementTick+0x4a>
	__asm volatile
 800be26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be2a:	f383 8811 	msr	BASEPRI, r3
 800be2e:	f3bf 8f6f 	isb	sy
 800be32:	f3bf 8f4f 	dsb	sy
 800be36:	603b      	str	r3, [r7, #0]
}
 800be38:	bf00      	nop
 800be3a:	bf00      	nop
 800be3c:	e7fd      	b.n	800be3a <xTaskIncrementTick+0x46>
 800be3e:	4b41      	ldr	r3, [pc, #260]	@ (800bf44 <xTaskIncrementTick+0x150>)
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	60fb      	str	r3, [r7, #12]
 800be44:	4b40      	ldr	r3, [pc, #256]	@ (800bf48 <xTaskIncrementTick+0x154>)
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	4a3e      	ldr	r2, [pc, #248]	@ (800bf44 <xTaskIncrementTick+0x150>)
 800be4a:	6013      	str	r3, [r2, #0]
 800be4c:	4a3e      	ldr	r2, [pc, #248]	@ (800bf48 <xTaskIncrementTick+0x154>)
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	6013      	str	r3, [r2, #0]
 800be52:	4b3e      	ldr	r3, [pc, #248]	@ (800bf4c <xTaskIncrementTick+0x158>)
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	3301      	adds	r3, #1
 800be58:	4a3c      	ldr	r2, [pc, #240]	@ (800bf4c <xTaskIncrementTick+0x158>)
 800be5a:	6013      	str	r3, [r2, #0]
 800be5c:	f000 faa6 	bl	800c3ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800be60:	4b3b      	ldr	r3, [pc, #236]	@ (800bf50 <xTaskIncrementTick+0x15c>)
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	693a      	ldr	r2, [r7, #16]
 800be66:	429a      	cmp	r2, r3
 800be68:	d348      	bcc.n	800befc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800be6a:	4b36      	ldr	r3, [pc, #216]	@ (800bf44 <xTaskIncrementTick+0x150>)
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d104      	bne.n	800be7e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be74:	4b36      	ldr	r3, [pc, #216]	@ (800bf50 <xTaskIncrementTick+0x15c>)
 800be76:	f04f 32ff 	mov.w	r2, #4294967295
 800be7a:	601a      	str	r2, [r3, #0]
					break;
 800be7c:	e03e      	b.n	800befc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be7e:	4b31      	ldr	r3, [pc, #196]	@ (800bf44 <xTaskIncrementTick+0x150>)
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	68db      	ldr	r3, [r3, #12]
 800be84:	68db      	ldr	r3, [r3, #12]
 800be86:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800be88:	68bb      	ldr	r3, [r7, #8]
 800be8a:	685b      	ldr	r3, [r3, #4]
 800be8c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800be8e:	693a      	ldr	r2, [r7, #16]
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	429a      	cmp	r2, r3
 800be94:	d203      	bcs.n	800be9e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800be96:	4a2e      	ldr	r2, [pc, #184]	@ (800bf50 <xTaskIncrementTick+0x15c>)
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800be9c:	e02e      	b.n	800befc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800be9e:	68bb      	ldr	r3, [r7, #8]
 800bea0:	3304      	adds	r3, #4
 800bea2:	4618      	mov	r0, r3
 800bea4:	f7ff f978 	bl	800b198 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bea8:	68bb      	ldr	r3, [r7, #8]
 800beaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800beac:	2b00      	cmp	r3, #0
 800beae:	d004      	beq.n	800beba <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800beb0:	68bb      	ldr	r3, [r7, #8]
 800beb2:	3318      	adds	r3, #24
 800beb4:	4618      	mov	r0, r3
 800beb6:	f7ff f96f 	bl	800b198 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800beba:	68bb      	ldr	r3, [r7, #8]
 800bebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bebe:	2201      	movs	r2, #1
 800bec0:	409a      	lsls	r2, r3
 800bec2:	4b24      	ldr	r3, [pc, #144]	@ (800bf54 <xTaskIncrementTick+0x160>)
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	4313      	orrs	r3, r2
 800bec8:	4a22      	ldr	r2, [pc, #136]	@ (800bf54 <xTaskIncrementTick+0x160>)
 800beca:	6013      	str	r3, [r2, #0]
 800becc:	68bb      	ldr	r3, [r7, #8]
 800bece:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bed0:	4613      	mov	r3, r2
 800bed2:	009b      	lsls	r3, r3, #2
 800bed4:	4413      	add	r3, r2
 800bed6:	009b      	lsls	r3, r3, #2
 800bed8:	4a1f      	ldr	r2, [pc, #124]	@ (800bf58 <xTaskIncrementTick+0x164>)
 800beda:	441a      	add	r2, r3
 800bedc:	68bb      	ldr	r3, [r7, #8]
 800bede:	3304      	adds	r3, #4
 800bee0:	4619      	mov	r1, r3
 800bee2:	4610      	mov	r0, r2
 800bee4:	f7ff f8fb 	bl	800b0de <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bee8:	68bb      	ldr	r3, [r7, #8]
 800beea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800beec:	4b1b      	ldr	r3, [pc, #108]	@ (800bf5c <xTaskIncrementTick+0x168>)
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bef2:	429a      	cmp	r2, r3
 800bef4:	d3b9      	bcc.n	800be6a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800bef6:	2301      	movs	r3, #1
 800bef8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800befa:	e7b6      	b.n	800be6a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800befc:	4b17      	ldr	r3, [pc, #92]	@ (800bf5c <xTaskIncrementTick+0x168>)
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf02:	4915      	ldr	r1, [pc, #84]	@ (800bf58 <xTaskIncrementTick+0x164>)
 800bf04:	4613      	mov	r3, r2
 800bf06:	009b      	lsls	r3, r3, #2
 800bf08:	4413      	add	r3, r2
 800bf0a:	009b      	lsls	r3, r3, #2
 800bf0c:	440b      	add	r3, r1
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	2b01      	cmp	r3, #1
 800bf12:	d901      	bls.n	800bf18 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800bf14:	2301      	movs	r3, #1
 800bf16:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bf18:	4b11      	ldr	r3, [pc, #68]	@ (800bf60 <xTaskIncrementTick+0x16c>)
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d007      	beq.n	800bf30 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800bf20:	2301      	movs	r3, #1
 800bf22:	617b      	str	r3, [r7, #20]
 800bf24:	e004      	b.n	800bf30 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bf26:	4b0f      	ldr	r3, [pc, #60]	@ (800bf64 <xTaskIncrementTick+0x170>)
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	3301      	adds	r3, #1
 800bf2c:	4a0d      	ldr	r2, [pc, #52]	@ (800bf64 <xTaskIncrementTick+0x170>)
 800bf2e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bf30:	697b      	ldr	r3, [r7, #20]
}
 800bf32:	4618      	mov	r0, r3
 800bf34:	3718      	adds	r7, #24
 800bf36:	46bd      	mov	sp, r7
 800bf38:	bd80      	pop	{r7, pc}
 800bf3a:	bf00      	nop
 800bf3c:	20003478 	.word	0x20003478
 800bf40:	20003454 	.word	0x20003454
 800bf44:	20003408 	.word	0x20003408
 800bf48:	2000340c 	.word	0x2000340c
 800bf4c:	20003468 	.word	0x20003468
 800bf50:	20003470 	.word	0x20003470
 800bf54:	20003458 	.word	0x20003458
 800bf58:	20003354 	.word	0x20003354
 800bf5c:	20003350 	.word	0x20003350
 800bf60:	20003464 	.word	0x20003464
 800bf64:	20003460 	.word	0x20003460

0800bf68 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bf68:	b480      	push	{r7}
 800bf6a:	b087      	sub	sp, #28
 800bf6c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bf6e:	4b27      	ldr	r3, [pc, #156]	@ (800c00c <vTaskSwitchContext+0xa4>)
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d003      	beq.n	800bf7e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bf76:	4b26      	ldr	r3, [pc, #152]	@ (800c010 <vTaskSwitchContext+0xa8>)
 800bf78:	2201      	movs	r2, #1
 800bf7a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bf7c:	e040      	b.n	800c000 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800bf7e:	4b24      	ldr	r3, [pc, #144]	@ (800c010 <vTaskSwitchContext+0xa8>)
 800bf80:	2200      	movs	r2, #0
 800bf82:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf84:	4b23      	ldr	r3, [pc, #140]	@ (800c014 <vTaskSwitchContext+0xac>)
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	fab3 f383 	clz	r3, r3
 800bf90:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800bf92:	7afb      	ldrb	r3, [r7, #11]
 800bf94:	f1c3 031f 	rsb	r3, r3, #31
 800bf98:	617b      	str	r3, [r7, #20]
 800bf9a:	491f      	ldr	r1, [pc, #124]	@ (800c018 <vTaskSwitchContext+0xb0>)
 800bf9c:	697a      	ldr	r2, [r7, #20]
 800bf9e:	4613      	mov	r3, r2
 800bfa0:	009b      	lsls	r3, r3, #2
 800bfa2:	4413      	add	r3, r2
 800bfa4:	009b      	lsls	r3, r3, #2
 800bfa6:	440b      	add	r3, r1
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d10b      	bne.n	800bfc6 <vTaskSwitchContext+0x5e>
	__asm volatile
 800bfae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfb2:	f383 8811 	msr	BASEPRI, r3
 800bfb6:	f3bf 8f6f 	isb	sy
 800bfba:	f3bf 8f4f 	dsb	sy
 800bfbe:	607b      	str	r3, [r7, #4]
}
 800bfc0:	bf00      	nop
 800bfc2:	bf00      	nop
 800bfc4:	e7fd      	b.n	800bfc2 <vTaskSwitchContext+0x5a>
 800bfc6:	697a      	ldr	r2, [r7, #20]
 800bfc8:	4613      	mov	r3, r2
 800bfca:	009b      	lsls	r3, r3, #2
 800bfcc:	4413      	add	r3, r2
 800bfce:	009b      	lsls	r3, r3, #2
 800bfd0:	4a11      	ldr	r2, [pc, #68]	@ (800c018 <vTaskSwitchContext+0xb0>)
 800bfd2:	4413      	add	r3, r2
 800bfd4:	613b      	str	r3, [r7, #16]
 800bfd6:	693b      	ldr	r3, [r7, #16]
 800bfd8:	685b      	ldr	r3, [r3, #4]
 800bfda:	685a      	ldr	r2, [r3, #4]
 800bfdc:	693b      	ldr	r3, [r7, #16]
 800bfde:	605a      	str	r2, [r3, #4]
 800bfe0:	693b      	ldr	r3, [r7, #16]
 800bfe2:	685a      	ldr	r2, [r3, #4]
 800bfe4:	693b      	ldr	r3, [r7, #16]
 800bfe6:	3308      	adds	r3, #8
 800bfe8:	429a      	cmp	r2, r3
 800bfea:	d104      	bne.n	800bff6 <vTaskSwitchContext+0x8e>
 800bfec:	693b      	ldr	r3, [r7, #16]
 800bfee:	685b      	ldr	r3, [r3, #4]
 800bff0:	685a      	ldr	r2, [r3, #4]
 800bff2:	693b      	ldr	r3, [r7, #16]
 800bff4:	605a      	str	r2, [r3, #4]
 800bff6:	693b      	ldr	r3, [r7, #16]
 800bff8:	685b      	ldr	r3, [r3, #4]
 800bffa:	68db      	ldr	r3, [r3, #12]
 800bffc:	4a07      	ldr	r2, [pc, #28]	@ (800c01c <vTaskSwitchContext+0xb4>)
 800bffe:	6013      	str	r3, [r2, #0]
}
 800c000:	bf00      	nop
 800c002:	371c      	adds	r7, #28
 800c004:	46bd      	mov	sp, r7
 800c006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00a:	4770      	bx	lr
 800c00c:	20003478 	.word	0x20003478
 800c010:	20003464 	.word	0x20003464
 800c014:	20003458 	.word	0x20003458
 800c018:	20003354 	.word	0x20003354
 800c01c:	20003350 	.word	0x20003350

0800c020 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c020:	b580      	push	{r7, lr}
 800c022:	b084      	sub	sp, #16
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
 800c028:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d10b      	bne.n	800c048 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800c030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c034:	f383 8811 	msr	BASEPRI, r3
 800c038:	f3bf 8f6f 	isb	sy
 800c03c:	f3bf 8f4f 	dsb	sy
 800c040:	60fb      	str	r3, [r7, #12]
}
 800c042:	bf00      	nop
 800c044:	bf00      	nop
 800c046:	e7fd      	b.n	800c044 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c048:	4b07      	ldr	r3, [pc, #28]	@ (800c068 <vTaskPlaceOnEventList+0x48>)
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	3318      	adds	r3, #24
 800c04e:	4619      	mov	r1, r3
 800c050:	6878      	ldr	r0, [r7, #4]
 800c052:	f7ff f868 	bl	800b126 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c056:	2101      	movs	r1, #1
 800c058:	6838      	ldr	r0, [r7, #0]
 800c05a:	f000 fa6d 	bl	800c538 <prvAddCurrentTaskToDelayedList>
}
 800c05e:	bf00      	nop
 800c060:	3710      	adds	r7, #16
 800c062:	46bd      	mov	sp, r7
 800c064:	bd80      	pop	{r7, pc}
 800c066:	bf00      	nop
 800c068:	20003350 	.word	0x20003350

0800c06c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b086      	sub	sp, #24
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	68db      	ldr	r3, [r3, #12]
 800c078:	68db      	ldr	r3, [r3, #12]
 800c07a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c07c:	693b      	ldr	r3, [r7, #16]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d10b      	bne.n	800c09a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800c082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c086:	f383 8811 	msr	BASEPRI, r3
 800c08a:	f3bf 8f6f 	isb	sy
 800c08e:	f3bf 8f4f 	dsb	sy
 800c092:	60fb      	str	r3, [r7, #12]
}
 800c094:	bf00      	nop
 800c096:	bf00      	nop
 800c098:	e7fd      	b.n	800c096 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c09a:	693b      	ldr	r3, [r7, #16]
 800c09c:	3318      	adds	r3, #24
 800c09e:	4618      	mov	r0, r3
 800c0a0:	f7ff f87a 	bl	800b198 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c0a4:	4b1d      	ldr	r3, [pc, #116]	@ (800c11c <xTaskRemoveFromEventList+0xb0>)
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d11c      	bne.n	800c0e6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c0ac:	693b      	ldr	r3, [r7, #16]
 800c0ae:	3304      	adds	r3, #4
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	f7ff f871 	bl	800b198 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c0b6:	693b      	ldr	r3, [r7, #16]
 800c0b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0ba:	2201      	movs	r2, #1
 800c0bc:	409a      	lsls	r2, r3
 800c0be:	4b18      	ldr	r3, [pc, #96]	@ (800c120 <xTaskRemoveFromEventList+0xb4>)
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	4313      	orrs	r3, r2
 800c0c4:	4a16      	ldr	r2, [pc, #88]	@ (800c120 <xTaskRemoveFromEventList+0xb4>)
 800c0c6:	6013      	str	r3, [r2, #0]
 800c0c8:	693b      	ldr	r3, [r7, #16]
 800c0ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c0cc:	4613      	mov	r3, r2
 800c0ce:	009b      	lsls	r3, r3, #2
 800c0d0:	4413      	add	r3, r2
 800c0d2:	009b      	lsls	r3, r3, #2
 800c0d4:	4a13      	ldr	r2, [pc, #76]	@ (800c124 <xTaskRemoveFromEventList+0xb8>)
 800c0d6:	441a      	add	r2, r3
 800c0d8:	693b      	ldr	r3, [r7, #16]
 800c0da:	3304      	adds	r3, #4
 800c0dc:	4619      	mov	r1, r3
 800c0de:	4610      	mov	r0, r2
 800c0e0:	f7fe fffd 	bl	800b0de <vListInsertEnd>
 800c0e4:	e005      	b.n	800c0f2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c0e6:	693b      	ldr	r3, [r7, #16]
 800c0e8:	3318      	adds	r3, #24
 800c0ea:	4619      	mov	r1, r3
 800c0ec:	480e      	ldr	r0, [pc, #56]	@ (800c128 <xTaskRemoveFromEventList+0xbc>)
 800c0ee:	f7fe fff6 	bl	800b0de <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c0f2:	693b      	ldr	r3, [r7, #16]
 800c0f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c0f6:	4b0d      	ldr	r3, [pc, #52]	@ (800c12c <xTaskRemoveFromEventList+0xc0>)
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0fc:	429a      	cmp	r2, r3
 800c0fe:	d905      	bls.n	800c10c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c100:	2301      	movs	r3, #1
 800c102:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c104:	4b0a      	ldr	r3, [pc, #40]	@ (800c130 <xTaskRemoveFromEventList+0xc4>)
 800c106:	2201      	movs	r2, #1
 800c108:	601a      	str	r2, [r3, #0]
 800c10a:	e001      	b.n	800c110 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800c10c:	2300      	movs	r3, #0
 800c10e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c110:	697b      	ldr	r3, [r7, #20]
}
 800c112:	4618      	mov	r0, r3
 800c114:	3718      	adds	r7, #24
 800c116:	46bd      	mov	sp, r7
 800c118:	bd80      	pop	{r7, pc}
 800c11a:	bf00      	nop
 800c11c:	20003478 	.word	0x20003478
 800c120:	20003458 	.word	0x20003458
 800c124:	20003354 	.word	0x20003354
 800c128:	20003410 	.word	0x20003410
 800c12c:	20003350 	.word	0x20003350
 800c130:	20003464 	.word	0x20003464

0800c134 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c134:	b480      	push	{r7}
 800c136:	b083      	sub	sp, #12
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c13c:	4b06      	ldr	r3, [pc, #24]	@ (800c158 <vTaskInternalSetTimeOutState+0x24>)
 800c13e:	681a      	ldr	r2, [r3, #0]
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c144:	4b05      	ldr	r3, [pc, #20]	@ (800c15c <vTaskInternalSetTimeOutState+0x28>)
 800c146:	681a      	ldr	r2, [r3, #0]
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	605a      	str	r2, [r3, #4]
}
 800c14c:	bf00      	nop
 800c14e:	370c      	adds	r7, #12
 800c150:	46bd      	mov	sp, r7
 800c152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c156:	4770      	bx	lr
 800c158:	20003468 	.word	0x20003468
 800c15c:	20003454 	.word	0x20003454

0800c160 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c160:	b580      	push	{r7, lr}
 800c162:	b088      	sub	sp, #32
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
 800c168:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d10b      	bne.n	800c188 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800c170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c174:	f383 8811 	msr	BASEPRI, r3
 800c178:	f3bf 8f6f 	isb	sy
 800c17c:	f3bf 8f4f 	dsb	sy
 800c180:	613b      	str	r3, [r7, #16]
}
 800c182:	bf00      	nop
 800c184:	bf00      	nop
 800c186:	e7fd      	b.n	800c184 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c188:	683b      	ldr	r3, [r7, #0]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d10b      	bne.n	800c1a6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800c18e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c192:	f383 8811 	msr	BASEPRI, r3
 800c196:	f3bf 8f6f 	isb	sy
 800c19a:	f3bf 8f4f 	dsb	sy
 800c19e:	60fb      	str	r3, [r7, #12]
}
 800c1a0:	bf00      	nop
 800c1a2:	bf00      	nop
 800c1a4:	e7fd      	b.n	800c1a2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800c1a6:	f000 fb5f 	bl	800c868 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c1aa:	4b1d      	ldr	r3, [pc, #116]	@ (800c220 <xTaskCheckForTimeOut+0xc0>)
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	685b      	ldr	r3, [r3, #4]
 800c1b4:	69ba      	ldr	r2, [r7, #24]
 800c1b6:	1ad3      	subs	r3, r2, r3
 800c1b8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c1ba:	683b      	ldr	r3, [r7, #0]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1c2:	d102      	bne.n	800c1ca <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	61fb      	str	r3, [r7, #28]
 800c1c8:	e023      	b.n	800c212 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	681a      	ldr	r2, [r3, #0]
 800c1ce:	4b15      	ldr	r3, [pc, #84]	@ (800c224 <xTaskCheckForTimeOut+0xc4>)
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	429a      	cmp	r2, r3
 800c1d4:	d007      	beq.n	800c1e6 <xTaskCheckForTimeOut+0x86>
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	685b      	ldr	r3, [r3, #4]
 800c1da:	69ba      	ldr	r2, [r7, #24]
 800c1dc:	429a      	cmp	r2, r3
 800c1de:	d302      	bcc.n	800c1e6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c1e0:	2301      	movs	r3, #1
 800c1e2:	61fb      	str	r3, [r7, #28]
 800c1e4:	e015      	b.n	800c212 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c1e6:	683b      	ldr	r3, [r7, #0]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	697a      	ldr	r2, [r7, #20]
 800c1ec:	429a      	cmp	r2, r3
 800c1ee:	d20b      	bcs.n	800c208 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c1f0:	683b      	ldr	r3, [r7, #0]
 800c1f2:	681a      	ldr	r2, [r3, #0]
 800c1f4:	697b      	ldr	r3, [r7, #20]
 800c1f6:	1ad2      	subs	r2, r2, r3
 800c1f8:	683b      	ldr	r3, [r7, #0]
 800c1fa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c1fc:	6878      	ldr	r0, [r7, #4]
 800c1fe:	f7ff ff99 	bl	800c134 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c202:	2300      	movs	r3, #0
 800c204:	61fb      	str	r3, [r7, #28]
 800c206:	e004      	b.n	800c212 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800c208:	683b      	ldr	r3, [r7, #0]
 800c20a:	2200      	movs	r2, #0
 800c20c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c20e:	2301      	movs	r3, #1
 800c210:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c212:	f000 fb5b 	bl	800c8cc <vPortExitCritical>

	return xReturn;
 800c216:	69fb      	ldr	r3, [r7, #28]
}
 800c218:	4618      	mov	r0, r3
 800c21a:	3720      	adds	r7, #32
 800c21c:	46bd      	mov	sp, r7
 800c21e:	bd80      	pop	{r7, pc}
 800c220:	20003454 	.word	0x20003454
 800c224:	20003468 	.word	0x20003468

0800c228 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c228:	b480      	push	{r7}
 800c22a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c22c:	4b03      	ldr	r3, [pc, #12]	@ (800c23c <vTaskMissedYield+0x14>)
 800c22e:	2201      	movs	r2, #1
 800c230:	601a      	str	r2, [r3, #0]
}
 800c232:	bf00      	nop
 800c234:	46bd      	mov	sp, r7
 800c236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c23a:	4770      	bx	lr
 800c23c:	20003464 	.word	0x20003464

0800c240 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c240:	b580      	push	{r7, lr}
 800c242:	b082      	sub	sp, #8
 800c244:	af00      	add	r7, sp, #0
 800c246:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c248:	f000 f852 	bl	800c2f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c24c:	4b06      	ldr	r3, [pc, #24]	@ (800c268 <prvIdleTask+0x28>)
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	2b01      	cmp	r3, #1
 800c252:	d9f9      	bls.n	800c248 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c254:	4b05      	ldr	r3, [pc, #20]	@ (800c26c <prvIdleTask+0x2c>)
 800c256:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c25a:	601a      	str	r2, [r3, #0]
 800c25c:	f3bf 8f4f 	dsb	sy
 800c260:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c264:	e7f0      	b.n	800c248 <prvIdleTask+0x8>
 800c266:	bf00      	nop
 800c268:	20003354 	.word	0x20003354
 800c26c:	e000ed04 	.word	0xe000ed04

0800c270 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b082      	sub	sp, #8
 800c274:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c276:	2300      	movs	r3, #0
 800c278:	607b      	str	r3, [r7, #4]
 800c27a:	e00c      	b.n	800c296 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c27c:	687a      	ldr	r2, [r7, #4]
 800c27e:	4613      	mov	r3, r2
 800c280:	009b      	lsls	r3, r3, #2
 800c282:	4413      	add	r3, r2
 800c284:	009b      	lsls	r3, r3, #2
 800c286:	4a12      	ldr	r2, [pc, #72]	@ (800c2d0 <prvInitialiseTaskLists+0x60>)
 800c288:	4413      	add	r3, r2
 800c28a:	4618      	mov	r0, r3
 800c28c:	f7fe fefa 	bl	800b084 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	3301      	adds	r3, #1
 800c294:	607b      	str	r3, [r7, #4]
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	2b06      	cmp	r3, #6
 800c29a:	d9ef      	bls.n	800c27c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c29c:	480d      	ldr	r0, [pc, #52]	@ (800c2d4 <prvInitialiseTaskLists+0x64>)
 800c29e:	f7fe fef1 	bl	800b084 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c2a2:	480d      	ldr	r0, [pc, #52]	@ (800c2d8 <prvInitialiseTaskLists+0x68>)
 800c2a4:	f7fe feee 	bl	800b084 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c2a8:	480c      	ldr	r0, [pc, #48]	@ (800c2dc <prvInitialiseTaskLists+0x6c>)
 800c2aa:	f7fe feeb 	bl	800b084 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c2ae:	480c      	ldr	r0, [pc, #48]	@ (800c2e0 <prvInitialiseTaskLists+0x70>)
 800c2b0:	f7fe fee8 	bl	800b084 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c2b4:	480b      	ldr	r0, [pc, #44]	@ (800c2e4 <prvInitialiseTaskLists+0x74>)
 800c2b6:	f7fe fee5 	bl	800b084 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c2ba:	4b0b      	ldr	r3, [pc, #44]	@ (800c2e8 <prvInitialiseTaskLists+0x78>)
 800c2bc:	4a05      	ldr	r2, [pc, #20]	@ (800c2d4 <prvInitialiseTaskLists+0x64>)
 800c2be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c2c0:	4b0a      	ldr	r3, [pc, #40]	@ (800c2ec <prvInitialiseTaskLists+0x7c>)
 800c2c2:	4a05      	ldr	r2, [pc, #20]	@ (800c2d8 <prvInitialiseTaskLists+0x68>)
 800c2c4:	601a      	str	r2, [r3, #0]
}
 800c2c6:	bf00      	nop
 800c2c8:	3708      	adds	r7, #8
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	bd80      	pop	{r7, pc}
 800c2ce:	bf00      	nop
 800c2d0:	20003354 	.word	0x20003354
 800c2d4:	200033e0 	.word	0x200033e0
 800c2d8:	200033f4 	.word	0x200033f4
 800c2dc:	20003410 	.word	0x20003410
 800c2e0:	20003424 	.word	0x20003424
 800c2e4:	2000343c 	.word	0x2000343c
 800c2e8:	20003408 	.word	0x20003408
 800c2ec:	2000340c 	.word	0x2000340c

0800c2f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	b082      	sub	sp, #8
 800c2f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c2f6:	e019      	b.n	800c32c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c2f8:	f000 fab6 	bl	800c868 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c2fc:	4b10      	ldr	r3, [pc, #64]	@ (800c340 <prvCheckTasksWaitingTermination+0x50>)
 800c2fe:	68db      	ldr	r3, [r3, #12]
 800c300:	68db      	ldr	r3, [r3, #12]
 800c302:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	3304      	adds	r3, #4
 800c308:	4618      	mov	r0, r3
 800c30a:	f7fe ff45 	bl	800b198 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c30e:	4b0d      	ldr	r3, [pc, #52]	@ (800c344 <prvCheckTasksWaitingTermination+0x54>)
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	3b01      	subs	r3, #1
 800c314:	4a0b      	ldr	r2, [pc, #44]	@ (800c344 <prvCheckTasksWaitingTermination+0x54>)
 800c316:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c318:	4b0b      	ldr	r3, [pc, #44]	@ (800c348 <prvCheckTasksWaitingTermination+0x58>)
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	3b01      	subs	r3, #1
 800c31e:	4a0a      	ldr	r2, [pc, #40]	@ (800c348 <prvCheckTasksWaitingTermination+0x58>)
 800c320:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c322:	f000 fad3 	bl	800c8cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c326:	6878      	ldr	r0, [r7, #4]
 800c328:	f000 f810 	bl	800c34c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c32c:	4b06      	ldr	r3, [pc, #24]	@ (800c348 <prvCheckTasksWaitingTermination+0x58>)
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d1e1      	bne.n	800c2f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c334:	bf00      	nop
 800c336:	bf00      	nop
 800c338:	3708      	adds	r7, #8
 800c33a:	46bd      	mov	sp, r7
 800c33c:	bd80      	pop	{r7, pc}
 800c33e:	bf00      	nop
 800c340:	20003424 	.word	0x20003424
 800c344:	20003450 	.word	0x20003450
 800c348:	20003438 	.word	0x20003438

0800c34c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b084      	sub	sp, #16
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d108      	bne.n	800c370 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c362:	4618      	mov	r0, r3
 800c364:	f000 fc2e 	bl	800cbc4 <vPortFree>
				vPortFree( pxTCB );
 800c368:	6878      	ldr	r0, [r7, #4]
 800c36a:	f000 fc2b 	bl	800cbc4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c36e:	e019      	b.n	800c3a4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800c376:	2b01      	cmp	r3, #1
 800c378:	d103      	bne.n	800c382 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c37a:	6878      	ldr	r0, [r7, #4]
 800c37c:	f000 fc22 	bl	800cbc4 <vPortFree>
	}
 800c380:	e010      	b.n	800c3a4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800c388:	2b02      	cmp	r3, #2
 800c38a:	d00b      	beq.n	800c3a4 <prvDeleteTCB+0x58>
	__asm volatile
 800c38c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c390:	f383 8811 	msr	BASEPRI, r3
 800c394:	f3bf 8f6f 	isb	sy
 800c398:	f3bf 8f4f 	dsb	sy
 800c39c:	60fb      	str	r3, [r7, #12]
}
 800c39e:	bf00      	nop
 800c3a0:	bf00      	nop
 800c3a2:	e7fd      	b.n	800c3a0 <prvDeleteTCB+0x54>
	}
 800c3a4:	bf00      	nop
 800c3a6:	3710      	adds	r7, #16
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	bd80      	pop	{r7, pc}

0800c3ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c3ac:	b480      	push	{r7}
 800c3ae:	b083      	sub	sp, #12
 800c3b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c3b2:	4b0c      	ldr	r3, [pc, #48]	@ (800c3e4 <prvResetNextTaskUnblockTime+0x38>)
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d104      	bne.n	800c3c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c3bc:	4b0a      	ldr	r3, [pc, #40]	@ (800c3e8 <prvResetNextTaskUnblockTime+0x3c>)
 800c3be:	f04f 32ff 	mov.w	r2, #4294967295
 800c3c2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c3c4:	e008      	b.n	800c3d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c3c6:	4b07      	ldr	r3, [pc, #28]	@ (800c3e4 <prvResetNextTaskUnblockTime+0x38>)
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	68db      	ldr	r3, [r3, #12]
 800c3cc:	68db      	ldr	r3, [r3, #12]
 800c3ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	685b      	ldr	r3, [r3, #4]
 800c3d4:	4a04      	ldr	r2, [pc, #16]	@ (800c3e8 <prvResetNextTaskUnblockTime+0x3c>)
 800c3d6:	6013      	str	r3, [r2, #0]
}
 800c3d8:	bf00      	nop
 800c3da:	370c      	adds	r7, #12
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e2:	4770      	bx	lr
 800c3e4:	20003408 	.word	0x20003408
 800c3e8:	20003470 	.word	0x20003470

0800c3ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c3ec:	b480      	push	{r7}
 800c3ee:	b083      	sub	sp, #12
 800c3f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c3f2:	4b0b      	ldr	r3, [pc, #44]	@ (800c420 <xTaskGetSchedulerState+0x34>)
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d102      	bne.n	800c400 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c3fa:	2301      	movs	r3, #1
 800c3fc:	607b      	str	r3, [r7, #4]
 800c3fe:	e008      	b.n	800c412 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c400:	4b08      	ldr	r3, [pc, #32]	@ (800c424 <xTaskGetSchedulerState+0x38>)
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d102      	bne.n	800c40e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c408:	2302      	movs	r3, #2
 800c40a:	607b      	str	r3, [r7, #4]
 800c40c:	e001      	b.n	800c412 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c40e:	2300      	movs	r3, #0
 800c410:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c412:	687b      	ldr	r3, [r7, #4]
	}
 800c414:	4618      	mov	r0, r3
 800c416:	370c      	adds	r7, #12
 800c418:	46bd      	mov	sp, r7
 800c41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41e:	4770      	bx	lr
 800c420:	2000345c 	.word	0x2000345c
 800c424:	20003478 	.word	0x20003478

0800c428 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b086      	sub	sp, #24
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c434:	2300      	movs	r3, #0
 800c436:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d070      	beq.n	800c520 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c43e:	4b3b      	ldr	r3, [pc, #236]	@ (800c52c <xTaskPriorityDisinherit+0x104>)
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	693a      	ldr	r2, [r7, #16]
 800c444:	429a      	cmp	r2, r3
 800c446:	d00b      	beq.n	800c460 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800c448:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c44c:	f383 8811 	msr	BASEPRI, r3
 800c450:	f3bf 8f6f 	isb	sy
 800c454:	f3bf 8f4f 	dsb	sy
 800c458:	60fb      	str	r3, [r7, #12]
}
 800c45a:	bf00      	nop
 800c45c:	bf00      	nop
 800c45e:	e7fd      	b.n	800c45c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c460:	693b      	ldr	r3, [r7, #16]
 800c462:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c464:	2b00      	cmp	r3, #0
 800c466:	d10b      	bne.n	800c480 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800c468:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c46c:	f383 8811 	msr	BASEPRI, r3
 800c470:	f3bf 8f6f 	isb	sy
 800c474:	f3bf 8f4f 	dsb	sy
 800c478:	60bb      	str	r3, [r7, #8]
}
 800c47a:	bf00      	nop
 800c47c:	bf00      	nop
 800c47e:	e7fd      	b.n	800c47c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800c480:	693b      	ldr	r3, [r7, #16]
 800c482:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c484:	1e5a      	subs	r2, r3, #1
 800c486:	693b      	ldr	r3, [r7, #16]
 800c488:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c48a:	693b      	ldr	r3, [r7, #16]
 800c48c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c48e:	693b      	ldr	r3, [r7, #16]
 800c490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c492:	429a      	cmp	r2, r3
 800c494:	d044      	beq.n	800c520 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c496:	693b      	ldr	r3, [r7, #16]
 800c498:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d140      	bne.n	800c520 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c49e:	693b      	ldr	r3, [r7, #16]
 800c4a0:	3304      	adds	r3, #4
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	f7fe fe78 	bl	800b198 <uxListRemove>
 800c4a8:	4603      	mov	r3, r0
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d115      	bne.n	800c4da <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c4ae:	693b      	ldr	r3, [r7, #16]
 800c4b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c4b2:	491f      	ldr	r1, [pc, #124]	@ (800c530 <xTaskPriorityDisinherit+0x108>)
 800c4b4:	4613      	mov	r3, r2
 800c4b6:	009b      	lsls	r3, r3, #2
 800c4b8:	4413      	add	r3, r2
 800c4ba:	009b      	lsls	r3, r3, #2
 800c4bc:	440b      	add	r3, r1
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d10a      	bne.n	800c4da <xTaskPriorityDisinherit+0xb2>
 800c4c4:	693b      	ldr	r3, [r7, #16]
 800c4c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4c8:	2201      	movs	r2, #1
 800c4ca:	fa02 f303 	lsl.w	r3, r2, r3
 800c4ce:	43da      	mvns	r2, r3
 800c4d0:	4b18      	ldr	r3, [pc, #96]	@ (800c534 <xTaskPriorityDisinherit+0x10c>)
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	4013      	ands	r3, r2
 800c4d6:	4a17      	ldr	r2, [pc, #92]	@ (800c534 <xTaskPriorityDisinherit+0x10c>)
 800c4d8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c4da:	693b      	ldr	r3, [r7, #16]
 800c4dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c4de:	693b      	ldr	r3, [r7, #16]
 800c4e0:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c4e2:	693b      	ldr	r3, [r7, #16]
 800c4e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4e6:	f1c3 0207 	rsb	r2, r3, #7
 800c4ea:	693b      	ldr	r3, [r7, #16]
 800c4ec:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c4ee:	693b      	ldr	r3, [r7, #16]
 800c4f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4f2:	2201      	movs	r2, #1
 800c4f4:	409a      	lsls	r2, r3
 800c4f6:	4b0f      	ldr	r3, [pc, #60]	@ (800c534 <xTaskPriorityDisinherit+0x10c>)
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	4313      	orrs	r3, r2
 800c4fc:	4a0d      	ldr	r2, [pc, #52]	@ (800c534 <xTaskPriorityDisinherit+0x10c>)
 800c4fe:	6013      	str	r3, [r2, #0]
 800c500:	693b      	ldr	r3, [r7, #16]
 800c502:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c504:	4613      	mov	r3, r2
 800c506:	009b      	lsls	r3, r3, #2
 800c508:	4413      	add	r3, r2
 800c50a:	009b      	lsls	r3, r3, #2
 800c50c:	4a08      	ldr	r2, [pc, #32]	@ (800c530 <xTaskPriorityDisinherit+0x108>)
 800c50e:	441a      	add	r2, r3
 800c510:	693b      	ldr	r3, [r7, #16]
 800c512:	3304      	adds	r3, #4
 800c514:	4619      	mov	r1, r3
 800c516:	4610      	mov	r0, r2
 800c518:	f7fe fde1 	bl	800b0de <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c51c:	2301      	movs	r3, #1
 800c51e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c520:	697b      	ldr	r3, [r7, #20]
	}
 800c522:	4618      	mov	r0, r3
 800c524:	3718      	adds	r7, #24
 800c526:	46bd      	mov	sp, r7
 800c528:	bd80      	pop	{r7, pc}
 800c52a:	bf00      	nop
 800c52c:	20003350 	.word	0x20003350
 800c530:	20003354 	.word	0x20003354
 800c534:	20003458 	.word	0x20003458

0800c538 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	b084      	sub	sp, #16
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	6078      	str	r0, [r7, #4]
 800c540:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c542:	4b29      	ldr	r3, [pc, #164]	@ (800c5e8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c548:	4b28      	ldr	r3, [pc, #160]	@ (800c5ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	3304      	adds	r3, #4
 800c54e:	4618      	mov	r0, r3
 800c550:	f7fe fe22 	bl	800b198 <uxListRemove>
 800c554:	4603      	mov	r3, r0
 800c556:	2b00      	cmp	r3, #0
 800c558:	d10b      	bne.n	800c572 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800c55a:	4b24      	ldr	r3, [pc, #144]	@ (800c5ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c560:	2201      	movs	r2, #1
 800c562:	fa02 f303 	lsl.w	r3, r2, r3
 800c566:	43da      	mvns	r2, r3
 800c568:	4b21      	ldr	r3, [pc, #132]	@ (800c5f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	4013      	ands	r3, r2
 800c56e:	4a20      	ldr	r2, [pc, #128]	@ (800c5f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c570:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c578:	d10a      	bne.n	800c590 <prvAddCurrentTaskToDelayedList+0x58>
 800c57a:	683b      	ldr	r3, [r7, #0]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d007      	beq.n	800c590 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c580:	4b1a      	ldr	r3, [pc, #104]	@ (800c5ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	3304      	adds	r3, #4
 800c586:	4619      	mov	r1, r3
 800c588:	481a      	ldr	r0, [pc, #104]	@ (800c5f4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800c58a:	f7fe fda8 	bl	800b0de <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c58e:	e026      	b.n	800c5de <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c590:	68fa      	ldr	r2, [r7, #12]
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	4413      	add	r3, r2
 800c596:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c598:	4b14      	ldr	r3, [pc, #80]	@ (800c5ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	68ba      	ldr	r2, [r7, #8]
 800c59e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c5a0:	68ba      	ldr	r2, [r7, #8]
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	429a      	cmp	r2, r3
 800c5a6:	d209      	bcs.n	800c5bc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c5a8:	4b13      	ldr	r3, [pc, #76]	@ (800c5f8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800c5aa:	681a      	ldr	r2, [r3, #0]
 800c5ac:	4b0f      	ldr	r3, [pc, #60]	@ (800c5ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	3304      	adds	r3, #4
 800c5b2:	4619      	mov	r1, r3
 800c5b4:	4610      	mov	r0, r2
 800c5b6:	f7fe fdb6 	bl	800b126 <vListInsert>
}
 800c5ba:	e010      	b.n	800c5de <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c5bc:	4b0f      	ldr	r3, [pc, #60]	@ (800c5fc <prvAddCurrentTaskToDelayedList+0xc4>)
 800c5be:	681a      	ldr	r2, [r3, #0]
 800c5c0:	4b0a      	ldr	r3, [pc, #40]	@ (800c5ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	3304      	adds	r3, #4
 800c5c6:	4619      	mov	r1, r3
 800c5c8:	4610      	mov	r0, r2
 800c5ca:	f7fe fdac 	bl	800b126 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c5ce:	4b0c      	ldr	r3, [pc, #48]	@ (800c600 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	68ba      	ldr	r2, [r7, #8]
 800c5d4:	429a      	cmp	r2, r3
 800c5d6:	d202      	bcs.n	800c5de <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c5d8:	4a09      	ldr	r2, [pc, #36]	@ (800c600 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c5da:	68bb      	ldr	r3, [r7, #8]
 800c5dc:	6013      	str	r3, [r2, #0]
}
 800c5de:	bf00      	nop
 800c5e0:	3710      	adds	r7, #16
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	bd80      	pop	{r7, pc}
 800c5e6:	bf00      	nop
 800c5e8:	20003454 	.word	0x20003454
 800c5ec:	20003350 	.word	0x20003350
 800c5f0:	20003458 	.word	0x20003458
 800c5f4:	2000343c 	.word	0x2000343c
 800c5f8:	2000340c 	.word	0x2000340c
 800c5fc:	20003408 	.word	0x20003408
 800c600:	20003470 	.word	0x20003470

0800c604 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c604:	b480      	push	{r7}
 800c606:	b085      	sub	sp, #20
 800c608:	af00      	add	r7, sp, #0
 800c60a:	60f8      	str	r0, [r7, #12]
 800c60c:	60b9      	str	r1, [r7, #8]
 800c60e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	3b04      	subs	r3, #4
 800c614:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c61c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	3b04      	subs	r3, #4
 800c622:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c624:	68bb      	ldr	r3, [r7, #8]
 800c626:	f023 0201 	bic.w	r2, r3, #1
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	3b04      	subs	r3, #4
 800c632:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c634:	4a0c      	ldr	r2, [pc, #48]	@ (800c668 <pxPortInitialiseStack+0x64>)
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	3b14      	subs	r3, #20
 800c63e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c640:	687a      	ldr	r2, [r7, #4]
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	3b04      	subs	r3, #4
 800c64a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	f06f 0202 	mvn.w	r2, #2
 800c652:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	3b20      	subs	r3, #32
 800c658:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c65a:	68fb      	ldr	r3, [r7, #12]
}
 800c65c:	4618      	mov	r0, r3
 800c65e:	3714      	adds	r7, #20
 800c660:	46bd      	mov	sp, r7
 800c662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c666:	4770      	bx	lr
 800c668:	0800c66d 	.word	0x0800c66d

0800c66c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c66c:	b480      	push	{r7}
 800c66e:	b085      	sub	sp, #20
 800c670:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c672:	2300      	movs	r3, #0
 800c674:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c676:	4b13      	ldr	r3, [pc, #76]	@ (800c6c4 <prvTaskExitError+0x58>)
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c67e:	d00b      	beq.n	800c698 <prvTaskExitError+0x2c>
	__asm volatile
 800c680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c684:	f383 8811 	msr	BASEPRI, r3
 800c688:	f3bf 8f6f 	isb	sy
 800c68c:	f3bf 8f4f 	dsb	sy
 800c690:	60fb      	str	r3, [r7, #12]
}
 800c692:	bf00      	nop
 800c694:	bf00      	nop
 800c696:	e7fd      	b.n	800c694 <prvTaskExitError+0x28>
	__asm volatile
 800c698:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c69c:	f383 8811 	msr	BASEPRI, r3
 800c6a0:	f3bf 8f6f 	isb	sy
 800c6a4:	f3bf 8f4f 	dsb	sy
 800c6a8:	60bb      	str	r3, [r7, #8]
}
 800c6aa:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c6ac:	bf00      	nop
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d0fc      	beq.n	800c6ae <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c6b4:	bf00      	nop
 800c6b6:	bf00      	nop
 800c6b8:	3714      	adds	r7, #20
 800c6ba:	46bd      	mov	sp, r7
 800c6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c0:	4770      	bx	lr
 800c6c2:	bf00      	nop
 800c6c4:	2000004c 	.word	0x2000004c
	...

0800c6d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c6d0:	4b07      	ldr	r3, [pc, #28]	@ (800c6f0 <pxCurrentTCBConst2>)
 800c6d2:	6819      	ldr	r1, [r3, #0]
 800c6d4:	6808      	ldr	r0, [r1, #0]
 800c6d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6da:	f380 8809 	msr	PSP, r0
 800c6de:	f3bf 8f6f 	isb	sy
 800c6e2:	f04f 0000 	mov.w	r0, #0
 800c6e6:	f380 8811 	msr	BASEPRI, r0
 800c6ea:	4770      	bx	lr
 800c6ec:	f3af 8000 	nop.w

0800c6f0 <pxCurrentTCBConst2>:
 800c6f0:	20003350 	.word	0x20003350
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c6f4:	bf00      	nop
 800c6f6:	bf00      	nop

0800c6f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c6f8:	4808      	ldr	r0, [pc, #32]	@ (800c71c <prvPortStartFirstTask+0x24>)
 800c6fa:	6800      	ldr	r0, [r0, #0]
 800c6fc:	6800      	ldr	r0, [r0, #0]
 800c6fe:	f380 8808 	msr	MSP, r0
 800c702:	f04f 0000 	mov.w	r0, #0
 800c706:	f380 8814 	msr	CONTROL, r0
 800c70a:	b662      	cpsie	i
 800c70c:	b661      	cpsie	f
 800c70e:	f3bf 8f4f 	dsb	sy
 800c712:	f3bf 8f6f 	isb	sy
 800c716:	df00      	svc	0
 800c718:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c71a:	bf00      	nop
 800c71c:	e000ed08 	.word	0xe000ed08

0800c720 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c720:	b580      	push	{r7, lr}
 800c722:	b086      	sub	sp, #24
 800c724:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c726:	4b47      	ldr	r3, [pc, #284]	@ (800c844 <xPortStartScheduler+0x124>)
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	4a47      	ldr	r2, [pc, #284]	@ (800c848 <xPortStartScheduler+0x128>)
 800c72c:	4293      	cmp	r3, r2
 800c72e:	d10b      	bne.n	800c748 <xPortStartScheduler+0x28>
	__asm volatile
 800c730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c734:	f383 8811 	msr	BASEPRI, r3
 800c738:	f3bf 8f6f 	isb	sy
 800c73c:	f3bf 8f4f 	dsb	sy
 800c740:	613b      	str	r3, [r7, #16]
}
 800c742:	bf00      	nop
 800c744:	bf00      	nop
 800c746:	e7fd      	b.n	800c744 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c748:	4b3e      	ldr	r3, [pc, #248]	@ (800c844 <xPortStartScheduler+0x124>)
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	4a3f      	ldr	r2, [pc, #252]	@ (800c84c <xPortStartScheduler+0x12c>)
 800c74e:	4293      	cmp	r3, r2
 800c750:	d10b      	bne.n	800c76a <xPortStartScheduler+0x4a>
	__asm volatile
 800c752:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c756:	f383 8811 	msr	BASEPRI, r3
 800c75a:	f3bf 8f6f 	isb	sy
 800c75e:	f3bf 8f4f 	dsb	sy
 800c762:	60fb      	str	r3, [r7, #12]
}
 800c764:	bf00      	nop
 800c766:	bf00      	nop
 800c768:	e7fd      	b.n	800c766 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c76a:	4b39      	ldr	r3, [pc, #228]	@ (800c850 <xPortStartScheduler+0x130>)
 800c76c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c76e:	697b      	ldr	r3, [r7, #20]
 800c770:	781b      	ldrb	r3, [r3, #0]
 800c772:	b2db      	uxtb	r3, r3
 800c774:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c776:	697b      	ldr	r3, [r7, #20]
 800c778:	22ff      	movs	r2, #255	@ 0xff
 800c77a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c77c:	697b      	ldr	r3, [r7, #20]
 800c77e:	781b      	ldrb	r3, [r3, #0]
 800c780:	b2db      	uxtb	r3, r3
 800c782:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c784:	78fb      	ldrb	r3, [r7, #3]
 800c786:	b2db      	uxtb	r3, r3
 800c788:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c78c:	b2da      	uxtb	r2, r3
 800c78e:	4b31      	ldr	r3, [pc, #196]	@ (800c854 <xPortStartScheduler+0x134>)
 800c790:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c792:	4b31      	ldr	r3, [pc, #196]	@ (800c858 <xPortStartScheduler+0x138>)
 800c794:	2207      	movs	r2, #7
 800c796:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c798:	e009      	b.n	800c7ae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c79a:	4b2f      	ldr	r3, [pc, #188]	@ (800c858 <xPortStartScheduler+0x138>)
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	3b01      	subs	r3, #1
 800c7a0:	4a2d      	ldr	r2, [pc, #180]	@ (800c858 <xPortStartScheduler+0x138>)
 800c7a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c7a4:	78fb      	ldrb	r3, [r7, #3]
 800c7a6:	b2db      	uxtb	r3, r3
 800c7a8:	005b      	lsls	r3, r3, #1
 800c7aa:	b2db      	uxtb	r3, r3
 800c7ac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c7ae:	78fb      	ldrb	r3, [r7, #3]
 800c7b0:	b2db      	uxtb	r3, r3
 800c7b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c7b6:	2b80      	cmp	r3, #128	@ 0x80
 800c7b8:	d0ef      	beq.n	800c79a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c7ba:	4b27      	ldr	r3, [pc, #156]	@ (800c858 <xPortStartScheduler+0x138>)
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	f1c3 0307 	rsb	r3, r3, #7
 800c7c2:	2b04      	cmp	r3, #4
 800c7c4:	d00b      	beq.n	800c7de <xPortStartScheduler+0xbe>
	__asm volatile
 800c7c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7ca:	f383 8811 	msr	BASEPRI, r3
 800c7ce:	f3bf 8f6f 	isb	sy
 800c7d2:	f3bf 8f4f 	dsb	sy
 800c7d6:	60bb      	str	r3, [r7, #8]
}
 800c7d8:	bf00      	nop
 800c7da:	bf00      	nop
 800c7dc:	e7fd      	b.n	800c7da <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c7de:	4b1e      	ldr	r3, [pc, #120]	@ (800c858 <xPortStartScheduler+0x138>)
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	021b      	lsls	r3, r3, #8
 800c7e4:	4a1c      	ldr	r2, [pc, #112]	@ (800c858 <xPortStartScheduler+0x138>)
 800c7e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c7e8:	4b1b      	ldr	r3, [pc, #108]	@ (800c858 <xPortStartScheduler+0x138>)
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c7f0:	4a19      	ldr	r2, [pc, #100]	@ (800c858 <xPortStartScheduler+0x138>)
 800c7f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	b2da      	uxtb	r2, r3
 800c7f8:	697b      	ldr	r3, [r7, #20]
 800c7fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c7fc:	4b17      	ldr	r3, [pc, #92]	@ (800c85c <xPortStartScheduler+0x13c>)
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	4a16      	ldr	r2, [pc, #88]	@ (800c85c <xPortStartScheduler+0x13c>)
 800c802:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c806:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c808:	4b14      	ldr	r3, [pc, #80]	@ (800c85c <xPortStartScheduler+0x13c>)
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	4a13      	ldr	r2, [pc, #76]	@ (800c85c <xPortStartScheduler+0x13c>)
 800c80e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c812:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c814:	f000 f8da 	bl	800c9cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c818:	4b11      	ldr	r3, [pc, #68]	@ (800c860 <xPortStartScheduler+0x140>)
 800c81a:	2200      	movs	r2, #0
 800c81c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c81e:	f000 f8f9 	bl	800ca14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c822:	4b10      	ldr	r3, [pc, #64]	@ (800c864 <xPortStartScheduler+0x144>)
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	4a0f      	ldr	r2, [pc, #60]	@ (800c864 <xPortStartScheduler+0x144>)
 800c828:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c82c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c82e:	f7ff ff63 	bl	800c6f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c832:	f7ff fb99 	bl	800bf68 <vTaskSwitchContext>
	prvTaskExitError();
 800c836:	f7ff ff19 	bl	800c66c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c83a:	2300      	movs	r3, #0
}
 800c83c:	4618      	mov	r0, r3
 800c83e:	3718      	adds	r7, #24
 800c840:	46bd      	mov	sp, r7
 800c842:	bd80      	pop	{r7, pc}
 800c844:	e000ed00 	.word	0xe000ed00
 800c848:	410fc271 	.word	0x410fc271
 800c84c:	410fc270 	.word	0x410fc270
 800c850:	e000e400 	.word	0xe000e400
 800c854:	2000347c 	.word	0x2000347c
 800c858:	20003480 	.word	0x20003480
 800c85c:	e000ed20 	.word	0xe000ed20
 800c860:	2000004c 	.word	0x2000004c
 800c864:	e000ef34 	.word	0xe000ef34

0800c868 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c868:	b480      	push	{r7}
 800c86a:	b083      	sub	sp, #12
 800c86c:	af00      	add	r7, sp, #0
	__asm volatile
 800c86e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c872:	f383 8811 	msr	BASEPRI, r3
 800c876:	f3bf 8f6f 	isb	sy
 800c87a:	f3bf 8f4f 	dsb	sy
 800c87e:	607b      	str	r3, [r7, #4]
}
 800c880:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c882:	4b10      	ldr	r3, [pc, #64]	@ (800c8c4 <vPortEnterCritical+0x5c>)
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	3301      	adds	r3, #1
 800c888:	4a0e      	ldr	r2, [pc, #56]	@ (800c8c4 <vPortEnterCritical+0x5c>)
 800c88a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c88c:	4b0d      	ldr	r3, [pc, #52]	@ (800c8c4 <vPortEnterCritical+0x5c>)
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	2b01      	cmp	r3, #1
 800c892:	d110      	bne.n	800c8b6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c894:	4b0c      	ldr	r3, [pc, #48]	@ (800c8c8 <vPortEnterCritical+0x60>)
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	b2db      	uxtb	r3, r3
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d00b      	beq.n	800c8b6 <vPortEnterCritical+0x4e>
	__asm volatile
 800c89e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8a2:	f383 8811 	msr	BASEPRI, r3
 800c8a6:	f3bf 8f6f 	isb	sy
 800c8aa:	f3bf 8f4f 	dsb	sy
 800c8ae:	603b      	str	r3, [r7, #0]
}
 800c8b0:	bf00      	nop
 800c8b2:	bf00      	nop
 800c8b4:	e7fd      	b.n	800c8b2 <vPortEnterCritical+0x4a>
	}
}
 800c8b6:	bf00      	nop
 800c8b8:	370c      	adds	r7, #12
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c0:	4770      	bx	lr
 800c8c2:	bf00      	nop
 800c8c4:	2000004c 	.word	0x2000004c
 800c8c8:	e000ed04 	.word	0xe000ed04

0800c8cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c8cc:	b480      	push	{r7}
 800c8ce:	b083      	sub	sp, #12
 800c8d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c8d2:	4b12      	ldr	r3, [pc, #72]	@ (800c91c <vPortExitCritical+0x50>)
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d10b      	bne.n	800c8f2 <vPortExitCritical+0x26>
	__asm volatile
 800c8da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8de:	f383 8811 	msr	BASEPRI, r3
 800c8e2:	f3bf 8f6f 	isb	sy
 800c8e6:	f3bf 8f4f 	dsb	sy
 800c8ea:	607b      	str	r3, [r7, #4]
}
 800c8ec:	bf00      	nop
 800c8ee:	bf00      	nop
 800c8f0:	e7fd      	b.n	800c8ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c8f2:	4b0a      	ldr	r3, [pc, #40]	@ (800c91c <vPortExitCritical+0x50>)
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	3b01      	subs	r3, #1
 800c8f8:	4a08      	ldr	r2, [pc, #32]	@ (800c91c <vPortExitCritical+0x50>)
 800c8fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c8fc:	4b07      	ldr	r3, [pc, #28]	@ (800c91c <vPortExitCritical+0x50>)
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d105      	bne.n	800c910 <vPortExitCritical+0x44>
 800c904:	2300      	movs	r3, #0
 800c906:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c908:	683b      	ldr	r3, [r7, #0]
 800c90a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c90e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c910:	bf00      	nop
 800c912:	370c      	adds	r7, #12
 800c914:	46bd      	mov	sp, r7
 800c916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91a:	4770      	bx	lr
 800c91c:	2000004c 	.word	0x2000004c

0800c920 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c920:	f3ef 8009 	mrs	r0, PSP
 800c924:	f3bf 8f6f 	isb	sy
 800c928:	4b15      	ldr	r3, [pc, #84]	@ (800c980 <pxCurrentTCBConst>)
 800c92a:	681a      	ldr	r2, [r3, #0]
 800c92c:	f01e 0f10 	tst.w	lr, #16
 800c930:	bf08      	it	eq
 800c932:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c936:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c93a:	6010      	str	r0, [r2, #0]
 800c93c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c940:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c944:	f380 8811 	msr	BASEPRI, r0
 800c948:	f3bf 8f4f 	dsb	sy
 800c94c:	f3bf 8f6f 	isb	sy
 800c950:	f7ff fb0a 	bl	800bf68 <vTaskSwitchContext>
 800c954:	f04f 0000 	mov.w	r0, #0
 800c958:	f380 8811 	msr	BASEPRI, r0
 800c95c:	bc09      	pop	{r0, r3}
 800c95e:	6819      	ldr	r1, [r3, #0]
 800c960:	6808      	ldr	r0, [r1, #0]
 800c962:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c966:	f01e 0f10 	tst.w	lr, #16
 800c96a:	bf08      	it	eq
 800c96c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c970:	f380 8809 	msr	PSP, r0
 800c974:	f3bf 8f6f 	isb	sy
 800c978:	4770      	bx	lr
 800c97a:	bf00      	nop
 800c97c:	f3af 8000 	nop.w

0800c980 <pxCurrentTCBConst>:
 800c980:	20003350 	.word	0x20003350
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c984:	bf00      	nop
 800c986:	bf00      	nop

0800c988 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b082      	sub	sp, #8
 800c98c:	af00      	add	r7, sp, #0
	__asm volatile
 800c98e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c992:	f383 8811 	msr	BASEPRI, r3
 800c996:	f3bf 8f6f 	isb	sy
 800c99a:	f3bf 8f4f 	dsb	sy
 800c99e:	607b      	str	r3, [r7, #4]
}
 800c9a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c9a2:	f7ff fa27 	bl	800bdf4 <xTaskIncrementTick>
 800c9a6:	4603      	mov	r3, r0
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d003      	beq.n	800c9b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c9ac:	4b06      	ldr	r3, [pc, #24]	@ (800c9c8 <xPortSysTickHandler+0x40>)
 800c9ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c9b2:	601a      	str	r2, [r3, #0]
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c9b8:	683b      	ldr	r3, [r7, #0]
 800c9ba:	f383 8811 	msr	BASEPRI, r3
}
 800c9be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c9c0:	bf00      	nop
 800c9c2:	3708      	adds	r7, #8
 800c9c4:	46bd      	mov	sp, r7
 800c9c6:	bd80      	pop	{r7, pc}
 800c9c8:	e000ed04 	.word	0xe000ed04

0800c9cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c9cc:	b480      	push	{r7}
 800c9ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c9d0:	4b0b      	ldr	r3, [pc, #44]	@ (800ca00 <vPortSetupTimerInterrupt+0x34>)
 800c9d2:	2200      	movs	r2, #0
 800c9d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c9d6:	4b0b      	ldr	r3, [pc, #44]	@ (800ca04 <vPortSetupTimerInterrupt+0x38>)
 800c9d8:	2200      	movs	r2, #0
 800c9da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c9dc:	4b0a      	ldr	r3, [pc, #40]	@ (800ca08 <vPortSetupTimerInterrupt+0x3c>)
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	4a0a      	ldr	r2, [pc, #40]	@ (800ca0c <vPortSetupTimerInterrupt+0x40>)
 800c9e2:	fba2 2303 	umull	r2, r3, r2, r3
 800c9e6:	099b      	lsrs	r3, r3, #6
 800c9e8:	4a09      	ldr	r2, [pc, #36]	@ (800ca10 <vPortSetupTimerInterrupt+0x44>)
 800c9ea:	3b01      	subs	r3, #1
 800c9ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c9ee:	4b04      	ldr	r3, [pc, #16]	@ (800ca00 <vPortSetupTimerInterrupt+0x34>)
 800c9f0:	2207      	movs	r2, #7
 800c9f2:	601a      	str	r2, [r3, #0]
}
 800c9f4:	bf00      	nop
 800c9f6:	46bd      	mov	sp, r7
 800c9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fc:	4770      	bx	lr
 800c9fe:	bf00      	nop
 800ca00:	e000e010 	.word	0xe000e010
 800ca04:	e000e018 	.word	0xe000e018
 800ca08:	20000004 	.word	0x20000004
 800ca0c:	10624dd3 	.word	0x10624dd3
 800ca10:	e000e014 	.word	0xe000e014

0800ca14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ca14:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800ca24 <vPortEnableVFP+0x10>
 800ca18:	6801      	ldr	r1, [r0, #0]
 800ca1a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800ca1e:	6001      	str	r1, [r0, #0]
 800ca20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ca22:	bf00      	nop
 800ca24:	e000ed88 	.word	0xe000ed88

0800ca28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b08a      	sub	sp, #40	@ 0x28
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ca30:	2300      	movs	r3, #0
 800ca32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ca34:	f7ff f922 	bl	800bc7c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ca38:	4b5c      	ldr	r3, [pc, #368]	@ (800cbac <pvPortMalloc+0x184>)
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d101      	bne.n	800ca44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ca40:	f000 f924 	bl	800cc8c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ca44:	4b5a      	ldr	r3, [pc, #360]	@ (800cbb0 <pvPortMalloc+0x188>)
 800ca46:	681a      	ldr	r2, [r3, #0]
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	4013      	ands	r3, r2
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	f040 8095 	bne.w	800cb7c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d01e      	beq.n	800ca96 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800ca58:	2208      	movs	r2, #8
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	4413      	add	r3, r2
 800ca5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	f003 0307 	and.w	r3, r3, #7
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d015      	beq.n	800ca96 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	f023 0307 	bic.w	r3, r3, #7
 800ca70:	3308      	adds	r3, #8
 800ca72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	f003 0307 	and.w	r3, r3, #7
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d00b      	beq.n	800ca96 <pvPortMalloc+0x6e>
	__asm volatile
 800ca7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca82:	f383 8811 	msr	BASEPRI, r3
 800ca86:	f3bf 8f6f 	isb	sy
 800ca8a:	f3bf 8f4f 	dsb	sy
 800ca8e:	617b      	str	r3, [r7, #20]
}
 800ca90:	bf00      	nop
 800ca92:	bf00      	nop
 800ca94:	e7fd      	b.n	800ca92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d06f      	beq.n	800cb7c <pvPortMalloc+0x154>
 800ca9c:	4b45      	ldr	r3, [pc, #276]	@ (800cbb4 <pvPortMalloc+0x18c>)
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	687a      	ldr	r2, [r7, #4]
 800caa2:	429a      	cmp	r2, r3
 800caa4:	d86a      	bhi.n	800cb7c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800caa6:	4b44      	ldr	r3, [pc, #272]	@ (800cbb8 <pvPortMalloc+0x190>)
 800caa8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800caaa:	4b43      	ldr	r3, [pc, #268]	@ (800cbb8 <pvPortMalloc+0x190>)
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cab0:	e004      	b.n	800cabc <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800cab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cab4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cabc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cabe:	685b      	ldr	r3, [r3, #4]
 800cac0:	687a      	ldr	r2, [r7, #4]
 800cac2:	429a      	cmp	r2, r3
 800cac4:	d903      	bls.n	800cace <pvPortMalloc+0xa6>
 800cac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d1f1      	bne.n	800cab2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cace:	4b37      	ldr	r3, [pc, #220]	@ (800cbac <pvPortMalloc+0x184>)
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cad4:	429a      	cmp	r2, r3
 800cad6:	d051      	beq.n	800cb7c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cad8:	6a3b      	ldr	r3, [r7, #32]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	2208      	movs	r2, #8
 800cade:	4413      	add	r3, r2
 800cae0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cae4:	681a      	ldr	r2, [r3, #0]
 800cae6:	6a3b      	ldr	r3, [r7, #32]
 800cae8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800caea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caec:	685a      	ldr	r2, [r3, #4]
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	1ad2      	subs	r2, r2, r3
 800caf2:	2308      	movs	r3, #8
 800caf4:	005b      	lsls	r3, r3, #1
 800caf6:	429a      	cmp	r2, r3
 800caf8:	d920      	bls.n	800cb3c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cafa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	4413      	add	r3, r2
 800cb00:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cb02:	69bb      	ldr	r3, [r7, #24]
 800cb04:	f003 0307 	and.w	r3, r3, #7
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d00b      	beq.n	800cb24 <pvPortMalloc+0xfc>
	__asm volatile
 800cb0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb10:	f383 8811 	msr	BASEPRI, r3
 800cb14:	f3bf 8f6f 	isb	sy
 800cb18:	f3bf 8f4f 	dsb	sy
 800cb1c:	613b      	str	r3, [r7, #16]
}
 800cb1e:	bf00      	nop
 800cb20:	bf00      	nop
 800cb22:	e7fd      	b.n	800cb20 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cb24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb26:	685a      	ldr	r2, [r3, #4]
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	1ad2      	subs	r2, r2, r3
 800cb2c:	69bb      	ldr	r3, [r7, #24]
 800cb2e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cb30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb32:	687a      	ldr	r2, [r7, #4]
 800cb34:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cb36:	69b8      	ldr	r0, [r7, #24]
 800cb38:	f000 f90a 	bl	800cd50 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cb3c:	4b1d      	ldr	r3, [pc, #116]	@ (800cbb4 <pvPortMalloc+0x18c>)
 800cb3e:	681a      	ldr	r2, [r3, #0]
 800cb40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb42:	685b      	ldr	r3, [r3, #4]
 800cb44:	1ad3      	subs	r3, r2, r3
 800cb46:	4a1b      	ldr	r2, [pc, #108]	@ (800cbb4 <pvPortMalloc+0x18c>)
 800cb48:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cb4a:	4b1a      	ldr	r3, [pc, #104]	@ (800cbb4 <pvPortMalloc+0x18c>)
 800cb4c:	681a      	ldr	r2, [r3, #0]
 800cb4e:	4b1b      	ldr	r3, [pc, #108]	@ (800cbbc <pvPortMalloc+0x194>)
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	429a      	cmp	r2, r3
 800cb54:	d203      	bcs.n	800cb5e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cb56:	4b17      	ldr	r3, [pc, #92]	@ (800cbb4 <pvPortMalloc+0x18c>)
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	4a18      	ldr	r2, [pc, #96]	@ (800cbbc <pvPortMalloc+0x194>)
 800cb5c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cb5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb60:	685a      	ldr	r2, [r3, #4]
 800cb62:	4b13      	ldr	r3, [pc, #76]	@ (800cbb0 <pvPortMalloc+0x188>)
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	431a      	orrs	r2, r3
 800cb68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb6a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cb6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb6e:	2200      	movs	r2, #0
 800cb70:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cb72:	4b13      	ldr	r3, [pc, #76]	@ (800cbc0 <pvPortMalloc+0x198>)
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	3301      	adds	r3, #1
 800cb78:	4a11      	ldr	r2, [pc, #68]	@ (800cbc0 <pvPortMalloc+0x198>)
 800cb7a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cb7c:	f7ff f88c 	bl	800bc98 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cb80:	69fb      	ldr	r3, [r7, #28]
 800cb82:	f003 0307 	and.w	r3, r3, #7
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d00b      	beq.n	800cba2 <pvPortMalloc+0x17a>
	__asm volatile
 800cb8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb8e:	f383 8811 	msr	BASEPRI, r3
 800cb92:	f3bf 8f6f 	isb	sy
 800cb96:	f3bf 8f4f 	dsb	sy
 800cb9a:	60fb      	str	r3, [r7, #12]
}
 800cb9c:	bf00      	nop
 800cb9e:	bf00      	nop
 800cba0:	e7fd      	b.n	800cb9e <pvPortMalloc+0x176>
	return pvReturn;
 800cba2:	69fb      	ldr	r3, [r7, #28]
}
 800cba4:	4618      	mov	r0, r3
 800cba6:	3728      	adds	r7, #40	@ 0x28
 800cba8:	46bd      	mov	sp, r7
 800cbaa:	bd80      	pop	{r7, pc}
 800cbac:	20004044 	.word	0x20004044
 800cbb0:	20004058 	.word	0x20004058
 800cbb4:	20004048 	.word	0x20004048
 800cbb8:	2000403c 	.word	0x2000403c
 800cbbc:	2000404c 	.word	0x2000404c
 800cbc0:	20004050 	.word	0x20004050

0800cbc4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	b086      	sub	sp, #24
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d04f      	beq.n	800cc76 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cbd6:	2308      	movs	r3, #8
 800cbd8:	425b      	negs	r3, r3
 800cbda:	697a      	ldr	r2, [r7, #20]
 800cbdc:	4413      	add	r3, r2
 800cbde:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cbe0:	697b      	ldr	r3, [r7, #20]
 800cbe2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cbe4:	693b      	ldr	r3, [r7, #16]
 800cbe6:	685a      	ldr	r2, [r3, #4]
 800cbe8:	4b25      	ldr	r3, [pc, #148]	@ (800cc80 <vPortFree+0xbc>)
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	4013      	ands	r3, r2
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d10b      	bne.n	800cc0a <vPortFree+0x46>
	__asm volatile
 800cbf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbf6:	f383 8811 	msr	BASEPRI, r3
 800cbfa:	f3bf 8f6f 	isb	sy
 800cbfe:	f3bf 8f4f 	dsb	sy
 800cc02:	60fb      	str	r3, [r7, #12]
}
 800cc04:	bf00      	nop
 800cc06:	bf00      	nop
 800cc08:	e7fd      	b.n	800cc06 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cc0a:	693b      	ldr	r3, [r7, #16]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d00b      	beq.n	800cc2a <vPortFree+0x66>
	__asm volatile
 800cc12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc16:	f383 8811 	msr	BASEPRI, r3
 800cc1a:	f3bf 8f6f 	isb	sy
 800cc1e:	f3bf 8f4f 	dsb	sy
 800cc22:	60bb      	str	r3, [r7, #8]
}
 800cc24:	bf00      	nop
 800cc26:	bf00      	nop
 800cc28:	e7fd      	b.n	800cc26 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cc2a:	693b      	ldr	r3, [r7, #16]
 800cc2c:	685a      	ldr	r2, [r3, #4]
 800cc2e:	4b14      	ldr	r3, [pc, #80]	@ (800cc80 <vPortFree+0xbc>)
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	4013      	ands	r3, r2
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d01e      	beq.n	800cc76 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cc38:	693b      	ldr	r3, [r7, #16]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d11a      	bne.n	800cc76 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cc40:	693b      	ldr	r3, [r7, #16]
 800cc42:	685a      	ldr	r2, [r3, #4]
 800cc44:	4b0e      	ldr	r3, [pc, #56]	@ (800cc80 <vPortFree+0xbc>)
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	43db      	mvns	r3, r3
 800cc4a:	401a      	ands	r2, r3
 800cc4c:	693b      	ldr	r3, [r7, #16]
 800cc4e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cc50:	f7ff f814 	bl	800bc7c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cc54:	693b      	ldr	r3, [r7, #16]
 800cc56:	685a      	ldr	r2, [r3, #4]
 800cc58:	4b0a      	ldr	r3, [pc, #40]	@ (800cc84 <vPortFree+0xc0>)
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	4413      	add	r3, r2
 800cc5e:	4a09      	ldr	r2, [pc, #36]	@ (800cc84 <vPortFree+0xc0>)
 800cc60:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cc62:	6938      	ldr	r0, [r7, #16]
 800cc64:	f000 f874 	bl	800cd50 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800cc68:	4b07      	ldr	r3, [pc, #28]	@ (800cc88 <vPortFree+0xc4>)
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	3301      	adds	r3, #1
 800cc6e:	4a06      	ldr	r2, [pc, #24]	@ (800cc88 <vPortFree+0xc4>)
 800cc70:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800cc72:	f7ff f811 	bl	800bc98 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cc76:	bf00      	nop
 800cc78:	3718      	adds	r7, #24
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	bd80      	pop	{r7, pc}
 800cc7e:	bf00      	nop
 800cc80:	20004058 	.word	0x20004058
 800cc84:	20004048 	.word	0x20004048
 800cc88:	20004054 	.word	0x20004054

0800cc8c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cc8c:	b480      	push	{r7}
 800cc8e:	b085      	sub	sp, #20
 800cc90:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cc92:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800cc96:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cc98:	4b27      	ldr	r3, [pc, #156]	@ (800cd38 <prvHeapInit+0xac>)
 800cc9a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	f003 0307 	and.w	r3, r3, #7
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d00c      	beq.n	800ccc0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	3307      	adds	r3, #7
 800ccaa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	f023 0307 	bic.w	r3, r3, #7
 800ccb2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ccb4:	68ba      	ldr	r2, [r7, #8]
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	1ad3      	subs	r3, r2, r3
 800ccba:	4a1f      	ldr	r2, [pc, #124]	@ (800cd38 <prvHeapInit+0xac>)
 800ccbc:	4413      	add	r3, r2
 800ccbe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ccc4:	4a1d      	ldr	r2, [pc, #116]	@ (800cd3c <prvHeapInit+0xb0>)
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ccca:	4b1c      	ldr	r3, [pc, #112]	@ (800cd3c <prvHeapInit+0xb0>)
 800cccc:	2200      	movs	r2, #0
 800ccce:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	68ba      	ldr	r2, [r7, #8]
 800ccd4:	4413      	add	r3, r2
 800ccd6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ccd8:	2208      	movs	r2, #8
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	1a9b      	subs	r3, r3, r2
 800ccde:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	f023 0307 	bic.w	r3, r3, #7
 800cce6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	4a15      	ldr	r2, [pc, #84]	@ (800cd40 <prvHeapInit+0xb4>)
 800ccec:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ccee:	4b14      	ldr	r3, [pc, #80]	@ (800cd40 <prvHeapInit+0xb4>)
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	2200      	movs	r2, #0
 800ccf4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ccf6:	4b12      	ldr	r3, [pc, #72]	@ (800cd40 <prvHeapInit+0xb4>)
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	2200      	movs	r2, #0
 800ccfc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cd02:	683b      	ldr	r3, [r7, #0]
 800cd04:	68fa      	ldr	r2, [r7, #12]
 800cd06:	1ad2      	subs	r2, r2, r3
 800cd08:	683b      	ldr	r3, [r7, #0]
 800cd0a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cd0c:	4b0c      	ldr	r3, [pc, #48]	@ (800cd40 <prvHeapInit+0xb4>)
 800cd0e:	681a      	ldr	r2, [r3, #0]
 800cd10:	683b      	ldr	r3, [r7, #0]
 800cd12:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cd14:	683b      	ldr	r3, [r7, #0]
 800cd16:	685b      	ldr	r3, [r3, #4]
 800cd18:	4a0a      	ldr	r2, [pc, #40]	@ (800cd44 <prvHeapInit+0xb8>)
 800cd1a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cd1c:	683b      	ldr	r3, [r7, #0]
 800cd1e:	685b      	ldr	r3, [r3, #4]
 800cd20:	4a09      	ldr	r2, [pc, #36]	@ (800cd48 <prvHeapInit+0xbc>)
 800cd22:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cd24:	4b09      	ldr	r3, [pc, #36]	@ (800cd4c <prvHeapInit+0xc0>)
 800cd26:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800cd2a:	601a      	str	r2, [r3, #0]
}
 800cd2c:	bf00      	nop
 800cd2e:	3714      	adds	r7, #20
 800cd30:	46bd      	mov	sp, r7
 800cd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd36:	4770      	bx	lr
 800cd38:	20003484 	.word	0x20003484
 800cd3c:	2000403c 	.word	0x2000403c
 800cd40:	20004044 	.word	0x20004044
 800cd44:	2000404c 	.word	0x2000404c
 800cd48:	20004048 	.word	0x20004048
 800cd4c:	20004058 	.word	0x20004058

0800cd50 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cd50:	b480      	push	{r7}
 800cd52:	b085      	sub	sp, #20
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cd58:	4b28      	ldr	r3, [pc, #160]	@ (800cdfc <prvInsertBlockIntoFreeList+0xac>)
 800cd5a:	60fb      	str	r3, [r7, #12]
 800cd5c:	e002      	b.n	800cd64 <prvInsertBlockIntoFreeList+0x14>
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	60fb      	str	r3, [r7, #12]
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	687a      	ldr	r2, [r7, #4]
 800cd6a:	429a      	cmp	r2, r3
 800cd6c:	d8f7      	bhi.n	800cd5e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	685b      	ldr	r3, [r3, #4]
 800cd76:	68ba      	ldr	r2, [r7, #8]
 800cd78:	4413      	add	r3, r2
 800cd7a:	687a      	ldr	r2, [r7, #4]
 800cd7c:	429a      	cmp	r2, r3
 800cd7e:	d108      	bne.n	800cd92 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	685a      	ldr	r2, [r3, #4]
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	685b      	ldr	r3, [r3, #4]
 800cd88:	441a      	add	r2, r3
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	685b      	ldr	r3, [r3, #4]
 800cd9a:	68ba      	ldr	r2, [r7, #8]
 800cd9c:	441a      	add	r2, r3
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	429a      	cmp	r2, r3
 800cda4:	d118      	bne.n	800cdd8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	681a      	ldr	r2, [r3, #0]
 800cdaa:	4b15      	ldr	r3, [pc, #84]	@ (800ce00 <prvInsertBlockIntoFreeList+0xb0>)
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	429a      	cmp	r2, r3
 800cdb0:	d00d      	beq.n	800cdce <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	685a      	ldr	r2, [r3, #4]
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	685b      	ldr	r3, [r3, #4]
 800cdbc:	441a      	add	r2, r3
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	681a      	ldr	r2, [r3, #0]
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	601a      	str	r2, [r3, #0]
 800cdcc:	e008      	b.n	800cde0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cdce:	4b0c      	ldr	r3, [pc, #48]	@ (800ce00 <prvInsertBlockIntoFreeList+0xb0>)
 800cdd0:	681a      	ldr	r2, [r3, #0]
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	601a      	str	r2, [r3, #0]
 800cdd6:	e003      	b.n	800cde0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	681a      	ldr	r2, [r3, #0]
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cde0:	68fa      	ldr	r2, [r7, #12]
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	429a      	cmp	r2, r3
 800cde6:	d002      	beq.n	800cdee <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	687a      	ldr	r2, [r7, #4]
 800cdec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cdee:	bf00      	nop
 800cdf0:	3714      	adds	r7, #20
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf8:	4770      	bx	lr
 800cdfa:	bf00      	nop
 800cdfc:	2000403c 	.word	0x2000403c
 800ce00:	20004044 	.word	0x20004044

0800ce04 <srand>:
 800ce04:	b538      	push	{r3, r4, r5, lr}
 800ce06:	4b10      	ldr	r3, [pc, #64]	@ (800ce48 <srand+0x44>)
 800ce08:	681d      	ldr	r5, [r3, #0]
 800ce0a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800ce0c:	4604      	mov	r4, r0
 800ce0e:	b9b3      	cbnz	r3, 800ce3e <srand+0x3a>
 800ce10:	2018      	movs	r0, #24
 800ce12:	f002 f843 	bl	800ee9c <malloc>
 800ce16:	4602      	mov	r2, r0
 800ce18:	6328      	str	r0, [r5, #48]	@ 0x30
 800ce1a:	b920      	cbnz	r0, 800ce26 <srand+0x22>
 800ce1c:	4b0b      	ldr	r3, [pc, #44]	@ (800ce4c <srand+0x48>)
 800ce1e:	480c      	ldr	r0, [pc, #48]	@ (800ce50 <srand+0x4c>)
 800ce20:	2146      	movs	r1, #70	@ 0x46
 800ce22:	f001 f985 	bl	800e130 <__assert_func>
 800ce26:	490b      	ldr	r1, [pc, #44]	@ (800ce54 <srand+0x50>)
 800ce28:	4b0b      	ldr	r3, [pc, #44]	@ (800ce58 <srand+0x54>)
 800ce2a:	e9c0 1300 	strd	r1, r3, [r0]
 800ce2e:	4b0b      	ldr	r3, [pc, #44]	@ (800ce5c <srand+0x58>)
 800ce30:	6083      	str	r3, [r0, #8]
 800ce32:	230b      	movs	r3, #11
 800ce34:	8183      	strh	r3, [r0, #12]
 800ce36:	2100      	movs	r1, #0
 800ce38:	2001      	movs	r0, #1
 800ce3a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800ce3e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800ce40:	2200      	movs	r2, #0
 800ce42:	611c      	str	r4, [r3, #16]
 800ce44:	615a      	str	r2, [r3, #20]
 800ce46:	bd38      	pop	{r3, r4, r5, pc}
 800ce48:	2000005c 	.word	0x2000005c
 800ce4c:	08011ab8 	.word	0x08011ab8
 800ce50:	08011acf 	.word	0x08011acf
 800ce54:	abcd330e 	.word	0xabcd330e
 800ce58:	e66d1234 	.word	0xe66d1234
 800ce5c:	0005deec 	.word	0x0005deec

0800ce60 <rand>:
 800ce60:	4b16      	ldr	r3, [pc, #88]	@ (800cebc <rand+0x5c>)
 800ce62:	b510      	push	{r4, lr}
 800ce64:	681c      	ldr	r4, [r3, #0]
 800ce66:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ce68:	b9b3      	cbnz	r3, 800ce98 <rand+0x38>
 800ce6a:	2018      	movs	r0, #24
 800ce6c:	f002 f816 	bl	800ee9c <malloc>
 800ce70:	4602      	mov	r2, r0
 800ce72:	6320      	str	r0, [r4, #48]	@ 0x30
 800ce74:	b920      	cbnz	r0, 800ce80 <rand+0x20>
 800ce76:	4b12      	ldr	r3, [pc, #72]	@ (800cec0 <rand+0x60>)
 800ce78:	4812      	ldr	r0, [pc, #72]	@ (800cec4 <rand+0x64>)
 800ce7a:	2152      	movs	r1, #82	@ 0x52
 800ce7c:	f001 f958 	bl	800e130 <__assert_func>
 800ce80:	4911      	ldr	r1, [pc, #68]	@ (800cec8 <rand+0x68>)
 800ce82:	4b12      	ldr	r3, [pc, #72]	@ (800cecc <rand+0x6c>)
 800ce84:	e9c0 1300 	strd	r1, r3, [r0]
 800ce88:	4b11      	ldr	r3, [pc, #68]	@ (800ced0 <rand+0x70>)
 800ce8a:	6083      	str	r3, [r0, #8]
 800ce8c:	230b      	movs	r3, #11
 800ce8e:	8183      	strh	r3, [r0, #12]
 800ce90:	2100      	movs	r1, #0
 800ce92:	2001      	movs	r0, #1
 800ce94:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800ce98:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ce9a:	480e      	ldr	r0, [pc, #56]	@ (800ced4 <rand+0x74>)
 800ce9c:	690b      	ldr	r3, [r1, #16]
 800ce9e:	694c      	ldr	r4, [r1, #20]
 800cea0:	4a0d      	ldr	r2, [pc, #52]	@ (800ced8 <rand+0x78>)
 800cea2:	4358      	muls	r0, r3
 800cea4:	fb02 0004 	mla	r0, r2, r4, r0
 800cea8:	fba3 3202 	umull	r3, r2, r3, r2
 800ceac:	3301      	adds	r3, #1
 800ceae:	eb40 0002 	adc.w	r0, r0, r2
 800ceb2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800ceb6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800ceba:	bd10      	pop	{r4, pc}
 800cebc:	2000005c 	.word	0x2000005c
 800cec0:	08011ab8 	.word	0x08011ab8
 800cec4:	08011acf 	.word	0x08011acf
 800cec8:	abcd330e 	.word	0xabcd330e
 800cecc:	e66d1234 	.word	0xe66d1234
 800ced0:	0005deec 	.word	0x0005deec
 800ced4:	5851f42d 	.word	0x5851f42d
 800ced8:	4c957f2d 	.word	0x4c957f2d

0800cedc <__cvt>:
 800cedc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cee0:	ec57 6b10 	vmov	r6, r7, d0
 800cee4:	2f00      	cmp	r7, #0
 800cee6:	460c      	mov	r4, r1
 800cee8:	4619      	mov	r1, r3
 800ceea:	463b      	mov	r3, r7
 800ceec:	bfbb      	ittet	lt
 800ceee:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800cef2:	461f      	movlt	r7, r3
 800cef4:	2300      	movge	r3, #0
 800cef6:	232d      	movlt	r3, #45	@ 0x2d
 800cef8:	700b      	strb	r3, [r1, #0]
 800cefa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cefc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800cf00:	4691      	mov	r9, r2
 800cf02:	f023 0820 	bic.w	r8, r3, #32
 800cf06:	bfbc      	itt	lt
 800cf08:	4632      	movlt	r2, r6
 800cf0a:	4616      	movlt	r6, r2
 800cf0c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cf10:	d005      	beq.n	800cf1e <__cvt+0x42>
 800cf12:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800cf16:	d100      	bne.n	800cf1a <__cvt+0x3e>
 800cf18:	3401      	adds	r4, #1
 800cf1a:	2102      	movs	r1, #2
 800cf1c:	e000      	b.n	800cf20 <__cvt+0x44>
 800cf1e:	2103      	movs	r1, #3
 800cf20:	ab03      	add	r3, sp, #12
 800cf22:	9301      	str	r3, [sp, #4]
 800cf24:	ab02      	add	r3, sp, #8
 800cf26:	9300      	str	r3, [sp, #0]
 800cf28:	ec47 6b10 	vmov	d0, r6, r7
 800cf2c:	4653      	mov	r3, sl
 800cf2e:	4622      	mov	r2, r4
 800cf30:	f001 f9a6 	bl	800e280 <_dtoa_r>
 800cf34:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800cf38:	4605      	mov	r5, r0
 800cf3a:	d119      	bne.n	800cf70 <__cvt+0x94>
 800cf3c:	f019 0f01 	tst.w	r9, #1
 800cf40:	d00e      	beq.n	800cf60 <__cvt+0x84>
 800cf42:	eb00 0904 	add.w	r9, r0, r4
 800cf46:	2200      	movs	r2, #0
 800cf48:	2300      	movs	r3, #0
 800cf4a:	4630      	mov	r0, r6
 800cf4c:	4639      	mov	r1, r7
 800cf4e:	f7f3 fdbb 	bl	8000ac8 <__aeabi_dcmpeq>
 800cf52:	b108      	cbz	r0, 800cf58 <__cvt+0x7c>
 800cf54:	f8cd 900c 	str.w	r9, [sp, #12]
 800cf58:	2230      	movs	r2, #48	@ 0x30
 800cf5a:	9b03      	ldr	r3, [sp, #12]
 800cf5c:	454b      	cmp	r3, r9
 800cf5e:	d31e      	bcc.n	800cf9e <__cvt+0xc2>
 800cf60:	9b03      	ldr	r3, [sp, #12]
 800cf62:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cf64:	1b5b      	subs	r3, r3, r5
 800cf66:	4628      	mov	r0, r5
 800cf68:	6013      	str	r3, [r2, #0]
 800cf6a:	b004      	add	sp, #16
 800cf6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf70:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cf74:	eb00 0904 	add.w	r9, r0, r4
 800cf78:	d1e5      	bne.n	800cf46 <__cvt+0x6a>
 800cf7a:	7803      	ldrb	r3, [r0, #0]
 800cf7c:	2b30      	cmp	r3, #48	@ 0x30
 800cf7e:	d10a      	bne.n	800cf96 <__cvt+0xba>
 800cf80:	2200      	movs	r2, #0
 800cf82:	2300      	movs	r3, #0
 800cf84:	4630      	mov	r0, r6
 800cf86:	4639      	mov	r1, r7
 800cf88:	f7f3 fd9e 	bl	8000ac8 <__aeabi_dcmpeq>
 800cf8c:	b918      	cbnz	r0, 800cf96 <__cvt+0xba>
 800cf8e:	f1c4 0401 	rsb	r4, r4, #1
 800cf92:	f8ca 4000 	str.w	r4, [sl]
 800cf96:	f8da 3000 	ldr.w	r3, [sl]
 800cf9a:	4499      	add	r9, r3
 800cf9c:	e7d3      	b.n	800cf46 <__cvt+0x6a>
 800cf9e:	1c59      	adds	r1, r3, #1
 800cfa0:	9103      	str	r1, [sp, #12]
 800cfa2:	701a      	strb	r2, [r3, #0]
 800cfa4:	e7d9      	b.n	800cf5a <__cvt+0x7e>

0800cfa6 <__exponent>:
 800cfa6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cfa8:	2900      	cmp	r1, #0
 800cfaa:	bfba      	itte	lt
 800cfac:	4249      	neglt	r1, r1
 800cfae:	232d      	movlt	r3, #45	@ 0x2d
 800cfb0:	232b      	movge	r3, #43	@ 0x2b
 800cfb2:	2909      	cmp	r1, #9
 800cfb4:	7002      	strb	r2, [r0, #0]
 800cfb6:	7043      	strb	r3, [r0, #1]
 800cfb8:	dd29      	ble.n	800d00e <__exponent+0x68>
 800cfba:	f10d 0307 	add.w	r3, sp, #7
 800cfbe:	461d      	mov	r5, r3
 800cfc0:	270a      	movs	r7, #10
 800cfc2:	461a      	mov	r2, r3
 800cfc4:	fbb1 f6f7 	udiv	r6, r1, r7
 800cfc8:	fb07 1416 	mls	r4, r7, r6, r1
 800cfcc:	3430      	adds	r4, #48	@ 0x30
 800cfce:	f802 4c01 	strb.w	r4, [r2, #-1]
 800cfd2:	460c      	mov	r4, r1
 800cfd4:	2c63      	cmp	r4, #99	@ 0x63
 800cfd6:	f103 33ff 	add.w	r3, r3, #4294967295
 800cfda:	4631      	mov	r1, r6
 800cfdc:	dcf1      	bgt.n	800cfc2 <__exponent+0x1c>
 800cfde:	3130      	adds	r1, #48	@ 0x30
 800cfe0:	1e94      	subs	r4, r2, #2
 800cfe2:	f803 1c01 	strb.w	r1, [r3, #-1]
 800cfe6:	1c41      	adds	r1, r0, #1
 800cfe8:	4623      	mov	r3, r4
 800cfea:	42ab      	cmp	r3, r5
 800cfec:	d30a      	bcc.n	800d004 <__exponent+0x5e>
 800cfee:	f10d 0309 	add.w	r3, sp, #9
 800cff2:	1a9b      	subs	r3, r3, r2
 800cff4:	42ac      	cmp	r4, r5
 800cff6:	bf88      	it	hi
 800cff8:	2300      	movhi	r3, #0
 800cffa:	3302      	adds	r3, #2
 800cffc:	4403      	add	r3, r0
 800cffe:	1a18      	subs	r0, r3, r0
 800d000:	b003      	add	sp, #12
 800d002:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d004:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d008:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d00c:	e7ed      	b.n	800cfea <__exponent+0x44>
 800d00e:	2330      	movs	r3, #48	@ 0x30
 800d010:	3130      	adds	r1, #48	@ 0x30
 800d012:	7083      	strb	r3, [r0, #2]
 800d014:	70c1      	strb	r1, [r0, #3]
 800d016:	1d03      	adds	r3, r0, #4
 800d018:	e7f1      	b.n	800cffe <__exponent+0x58>
	...

0800d01c <_printf_float>:
 800d01c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d020:	b08d      	sub	sp, #52	@ 0x34
 800d022:	460c      	mov	r4, r1
 800d024:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800d028:	4616      	mov	r6, r2
 800d02a:	461f      	mov	r7, r3
 800d02c:	4605      	mov	r5, r0
 800d02e:	f000 fff3 	bl	800e018 <_localeconv_r>
 800d032:	6803      	ldr	r3, [r0, #0]
 800d034:	9304      	str	r3, [sp, #16]
 800d036:	4618      	mov	r0, r3
 800d038:	f7f3 f91a 	bl	8000270 <strlen>
 800d03c:	2300      	movs	r3, #0
 800d03e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d040:	f8d8 3000 	ldr.w	r3, [r8]
 800d044:	9005      	str	r0, [sp, #20]
 800d046:	3307      	adds	r3, #7
 800d048:	f023 0307 	bic.w	r3, r3, #7
 800d04c:	f103 0208 	add.w	r2, r3, #8
 800d050:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d054:	f8d4 b000 	ldr.w	fp, [r4]
 800d058:	f8c8 2000 	str.w	r2, [r8]
 800d05c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d060:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d064:	9307      	str	r3, [sp, #28]
 800d066:	f8cd 8018 	str.w	r8, [sp, #24]
 800d06a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d06e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d072:	4b9c      	ldr	r3, [pc, #624]	@ (800d2e4 <_printf_float+0x2c8>)
 800d074:	f04f 32ff 	mov.w	r2, #4294967295
 800d078:	f7f3 fd58 	bl	8000b2c <__aeabi_dcmpun>
 800d07c:	bb70      	cbnz	r0, 800d0dc <_printf_float+0xc0>
 800d07e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d082:	4b98      	ldr	r3, [pc, #608]	@ (800d2e4 <_printf_float+0x2c8>)
 800d084:	f04f 32ff 	mov.w	r2, #4294967295
 800d088:	f7f3 fd32 	bl	8000af0 <__aeabi_dcmple>
 800d08c:	bb30      	cbnz	r0, 800d0dc <_printf_float+0xc0>
 800d08e:	2200      	movs	r2, #0
 800d090:	2300      	movs	r3, #0
 800d092:	4640      	mov	r0, r8
 800d094:	4649      	mov	r1, r9
 800d096:	f7f3 fd21 	bl	8000adc <__aeabi_dcmplt>
 800d09a:	b110      	cbz	r0, 800d0a2 <_printf_float+0x86>
 800d09c:	232d      	movs	r3, #45	@ 0x2d
 800d09e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d0a2:	4a91      	ldr	r2, [pc, #580]	@ (800d2e8 <_printf_float+0x2cc>)
 800d0a4:	4b91      	ldr	r3, [pc, #580]	@ (800d2ec <_printf_float+0x2d0>)
 800d0a6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d0aa:	bf94      	ite	ls
 800d0ac:	4690      	movls	r8, r2
 800d0ae:	4698      	movhi	r8, r3
 800d0b0:	2303      	movs	r3, #3
 800d0b2:	6123      	str	r3, [r4, #16]
 800d0b4:	f02b 0304 	bic.w	r3, fp, #4
 800d0b8:	6023      	str	r3, [r4, #0]
 800d0ba:	f04f 0900 	mov.w	r9, #0
 800d0be:	9700      	str	r7, [sp, #0]
 800d0c0:	4633      	mov	r3, r6
 800d0c2:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d0c4:	4621      	mov	r1, r4
 800d0c6:	4628      	mov	r0, r5
 800d0c8:	f000 f9d2 	bl	800d470 <_printf_common>
 800d0cc:	3001      	adds	r0, #1
 800d0ce:	f040 808d 	bne.w	800d1ec <_printf_float+0x1d0>
 800d0d2:	f04f 30ff 	mov.w	r0, #4294967295
 800d0d6:	b00d      	add	sp, #52	@ 0x34
 800d0d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0dc:	4642      	mov	r2, r8
 800d0de:	464b      	mov	r3, r9
 800d0e0:	4640      	mov	r0, r8
 800d0e2:	4649      	mov	r1, r9
 800d0e4:	f7f3 fd22 	bl	8000b2c <__aeabi_dcmpun>
 800d0e8:	b140      	cbz	r0, 800d0fc <_printf_float+0xe0>
 800d0ea:	464b      	mov	r3, r9
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	bfbc      	itt	lt
 800d0f0:	232d      	movlt	r3, #45	@ 0x2d
 800d0f2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d0f6:	4a7e      	ldr	r2, [pc, #504]	@ (800d2f0 <_printf_float+0x2d4>)
 800d0f8:	4b7e      	ldr	r3, [pc, #504]	@ (800d2f4 <_printf_float+0x2d8>)
 800d0fa:	e7d4      	b.n	800d0a6 <_printf_float+0x8a>
 800d0fc:	6863      	ldr	r3, [r4, #4]
 800d0fe:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800d102:	9206      	str	r2, [sp, #24]
 800d104:	1c5a      	adds	r2, r3, #1
 800d106:	d13b      	bne.n	800d180 <_printf_float+0x164>
 800d108:	2306      	movs	r3, #6
 800d10a:	6063      	str	r3, [r4, #4]
 800d10c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800d110:	2300      	movs	r3, #0
 800d112:	6022      	str	r2, [r4, #0]
 800d114:	9303      	str	r3, [sp, #12]
 800d116:	ab0a      	add	r3, sp, #40	@ 0x28
 800d118:	e9cd a301 	strd	sl, r3, [sp, #4]
 800d11c:	ab09      	add	r3, sp, #36	@ 0x24
 800d11e:	9300      	str	r3, [sp, #0]
 800d120:	6861      	ldr	r1, [r4, #4]
 800d122:	ec49 8b10 	vmov	d0, r8, r9
 800d126:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d12a:	4628      	mov	r0, r5
 800d12c:	f7ff fed6 	bl	800cedc <__cvt>
 800d130:	9b06      	ldr	r3, [sp, #24]
 800d132:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d134:	2b47      	cmp	r3, #71	@ 0x47
 800d136:	4680      	mov	r8, r0
 800d138:	d129      	bne.n	800d18e <_printf_float+0x172>
 800d13a:	1cc8      	adds	r0, r1, #3
 800d13c:	db02      	blt.n	800d144 <_printf_float+0x128>
 800d13e:	6863      	ldr	r3, [r4, #4]
 800d140:	4299      	cmp	r1, r3
 800d142:	dd41      	ble.n	800d1c8 <_printf_float+0x1ac>
 800d144:	f1aa 0a02 	sub.w	sl, sl, #2
 800d148:	fa5f fa8a 	uxtb.w	sl, sl
 800d14c:	3901      	subs	r1, #1
 800d14e:	4652      	mov	r2, sl
 800d150:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d154:	9109      	str	r1, [sp, #36]	@ 0x24
 800d156:	f7ff ff26 	bl	800cfa6 <__exponent>
 800d15a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d15c:	1813      	adds	r3, r2, r0
 800d15e:	2a01      	cmp	r2, #1
 800d160:	4681      	mov	r9, r0
 800d162:	6123      	str	r3, [r4, #16]
 800d164:	dc02      	bgt.n	800d16c <_printf_float+0x150>
 800d166:	6822      	ldr	r2, [r4, #0]
 800d168:	07d2      	lsls	r2, r2, #31
 800d16a:	d501      	bpl.n	800d170 <_printf_float+0x154>
 800d16c:	3301      	adds	r3, #1
 800d16e:	6123      	str	r3, [r4, #16]
 800d170:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d174:	2b00      	cmp	r3, #0
 800d176:	d0a2      	beq.n	800d0be <_printf_float+0xa2>
 800d178:	232d      	movs	r3, #45	@ 0x2d
 800d17a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d17e:	e79e      	b.n	800d0be <_printf_float+0xa2>
 800d180:	9a06      	ldr	r2, [sp, #24]
 800d182:	2a47      	cmp	r2, #71	@ 0x47
 800d184:	d1c2      	bne.n	800d10c <_printf_float+0xf0>
 800d186:	2b00      	cmp	r3, #0
 800d188:	d1c0      	bne.n	800d10c <_printf_float+0xf0>
 800d18a:	2301      	movs	r3, #1
 800d18c:	e7bd      	b.n	800d10a <_printf_float+0xee>
 800d18e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d192:	d9db      	bls.n	800d14c <_printf_float+0x130>
 800d194:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d198:	d118      	bne.n	800d1cc <_printf_float+0x1b0>
 800d19a:	2900      	cmp	r1, #0
 800d19c:	6863      	ldr	r3, [r4, #4]
 800d19e:	dd0b      	ble.n	800d1b8 <_printf_float+0x19c>
 800d1a0:	6121      	str	r1, [r4, #16]
 800d1a2:	b913      	cbnz	r3, 800d1aa <_printf_float+0x18e>
 800d1a4:	6822      	ldr	r2, [r4, #0]
 800d1a6:	07d0      	lsls	r0, r2, #31
 800d1a8:	d502      	bpl.n	800d1b0 <_printf_float+0x194>
 800d1aa:	3301      	adds	r3, #1
 800d1ac:	440b      	add	r3, r1
 800d1ae:	6123      	str	r3, [r4, #16]
 800d1b0:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d1b2:	f04f 0900 	mov.w	r9, #0
 800d1b6:	e7db      	b.n	800d170 <_printf_float+0x154>
 800d1b8:	b913      	cbnz	r3, 800d1c0 <_printf_float+0x1a4>
 800d1ba:	6822      	ldr	r2, [r4, #0]
 800d1bc:	07d2      	lsls	r2, r2, #31
 800d1be:	d501      	bpl.n	800d1c4 <_printf_float+0x1a8>
 800d1c0:	3302      	adds	r3, #2
 800d1c2:	e7f4      	b.n	800d1ae <_printf_float+0x192>
 800d1c4:	2301      	movs	r3, #1
 800d1c6:	e7f2      	b.n	800d1ae <_printf_float+0x192>
 800d1c8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d1cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d1ce:	4299      	cmp	r1, r3
 800d1d0:	db05      	blt.n	800d1de <_printf_float+0x1c2>
 800d1d2:	6823      	ldr	r3, [r4, #0]
 800d1d4:	6121      	str	r1, [r4, #16]
 800d1d6:	07d8      	lsls	r0, r3, #31
 800d1d8:	d5ea      	bpl.n	800d1b0 <_printf_float+0x194>
 800d1da:	1c4b      	adds	r3, r1, #1
 800d1dc:	e7e7      	b.n	800d1ae <_printf_float+0x192>
 800d1de:	2900      	cmp	r1, #0
 800d1e0:	bfd4      	ite	le
 800d1e2:	f1c1 0202 	rsble	r2, r1, #2
 800d1e6:	2201      	movgt	r2, #1
 800d1e8:	4413      	add	r3, r2
 800d1ea:	e7e0      	b.n	800d1ae <_printf_float+0x192>
 800d1ec:	6823      	ldr	r3, [r4, #0]
 800d1ee:	055a      	lsls	r2, r3, #21
 800d1f0:	d407      	bmi.n	800d202 <_printf_float+0x1e6>
 800d1f2:	6923      	ldr	r3, [r4, #16]
 800d1f4:	4642      	mov	r2, r8
 800d1f6:	4631      	mov	r1, r6
 800d1f8:	4628      	mov	r0, r5
 800d1fa:	47b8      	blx	r7
 800d1fc:	3001      	adds	r0, #1
 800d1fe:	d12b      	bne.n	800d258 <_printf_float+0x23c>
 800d200:	e767      	b.n	800d0d2 <_printf_float+0xb6>
 800d202:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d206:	f240 80dd 	bls.w	800d3c4 <_printf_float+0x3a8>
 800d20a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d20e:	2200      	movs	r2, #0
 800d210:	2300      	movs	r3, #0
 800d212:	f7f3 fc59 	bl	8000ac8 <__aeabi_dcmpeq>
 800d216:	2800      	cmp	r0, #0
 800d218:	d033      	beq.n	800d282 <_printf_float+0x266>
 800d21a:	4a37      	ldr	r2, [pc, #220]	@ (800d2f8 <_printf_float+0x2dc>)
 800d21c:	2301      	movs	r3, #1
 800d21e:	4631      	mov	r1, r6
 800d220:	4628      	mov	r0, r5
 800d222:	47b8      	blx	r7
 800d224:	3001      	adds	r0, #1
 800d226:	f43f af54 	beq.w	800d0d2 <_printf_float+0xb6>
 800d22a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d22e:	4543      	cmp	r3, r8
 800d230:	db02      	blt.n	800d238 <_printf_float+0x21c>
 800d232:	6823      	ldr	r3, [r4, #0]
 800d234:	07d8      	lsls	r0, r3, #31
 800d236:	d50f      	bpl.n	800d258 <_printf_float+0x23c>
 800d238:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d23c:	4631      	mov	r1, r6
 800d23e:	4628      	mov	r0, r5
 800d240:	47b8      	blx	r7
 800d242:	3001      	adds	r0, #1
 800d244:	f43f af45 	beq.w	800d0d2 <_printf_float+0xb6>
 800d248:	f04f 0900 	mov.w	r9, #0
 800d24c:	f108 38ff 	add.w	r8, r8, #4294967295
 800d250:	f104 0a1a 	add.w	sl, r4, #26
 800d254:	45c8      	cmp	r8, r9
 800d256:	dc09      	bgt.n	800d26c <_printf_float+0x250>
 800d258:	6823      	ldr	r3, [r4, #0]
 800d25a:	079b      	lsls	r3, r3, #30
 800d25c:	f100 8103 	bmi.w	800d466 <_printf_float+0x44a>
 800d260:	68e0      	ldr	r0, [r4, #12]
 800d262:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d264:	4298      	cmp	r0, r3
 800d266:	bfb8      	it	lt
 800d268:	4618      	movlt	r0, r3
 800d26a:	e734      	b.n	800d0d6 <_printf_float+0xba>
 800d26c:	2301      	movs	r3, #1
 800d26e:	4652      	mov	r2, sl
 800d270:	4631      	mov	r1, r6
 800d272:	4628      	mov	r0, r5
 800d274:	47b8      	blx	r7
 800d276:	3001      	adds	r0, #1
 800d278:	f43f af2b 	beq.w	800d0d2 <_printf_float+0xb6>
 800d27c:	f109 0901 	add.w	r9, r9, #1
 800d280:	e7e8      	b.n	800d254 <_printf_float+0x238>
 800d282:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d284:	2b00      	cmp	r3, #0
 800d286:	dc39      	bgt.n	800d2fc <_printf_float+0x2e0>
 800d288:	4a1b      	ldr	r2, [pc, #108]	@ (800d2f8 <_printf_float+0x2dc>)
 800d28a:	2301      	movs	r3, #1
 800d28c:	4631      	mov	r1, r6
 800d28e:	4628      	mov	r0, r5
 800d290:	47b8      	blx	r7
 800d292:	3001      	adds	r0, #1
 800d294:	f43f af1d 	beq.w	800d0d2 <_printf_float+0xb6>
 800d298:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d29c:	ea59 0303 	orrs.w	r3, r9, r3
 800d2a0:	d102      	bne.n	800d2a8 <_printf_float+0x28c>
 800d2a2:	6823      	ldr	r3, [r4, #0]
 800d2a4:	07d9      	lsls	r1, r3, #31
 800d2a6:	d5d7      	bpl.n	800d258 <_printf_float+0x23c>
 800d2a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d2ac:	4631      	mov	r1, r6
 800d2ae:	4628      	mov	r0, r5
 800d2b0:	47b8      	blx	r7
 800d2b2:	3001      	adds	r0, #1
 800d2b4:	f43f af0d 	beq.w	800d0d2 <_printf_float+0xb6>
 800d2b8:	f04f 0a00 	mov.w	sl, #0
 800d2bc:	f104 0b1a 	add.w	fp, r4, #26
 800d2c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2c2:	425b      	negs	r3, r3
 800d2c4:	4553      	cmp	r3, sl
 800d2c6:	dc01      	bgt.n	800d2cc <_printf_float+0x2b0>
 800d2c8:	464b      	mov	r3, r9
 800d2ca:	e793      	b.n	800d1f4 <_printf_float+0x1d8>
 800d2cc:	2301      	movs	r3, #1
 800d2ce:	465a      	mov	r2, fp
 800d2d0:	4631      	mov	r1, r6
 800d2d2:	4628      	mov	r0, r5
 800d2d4:	47b8      	blx	r7
 800d2d6:	3001      	adds	r0, #1
 800d2d8:	f43f aefb 	beq.w	800d0d2 <_printf_float+0xb6>
 800d2dc:	f10a 0a01 	add.w	sl, sl, #1
 800d2e0:	e7ee      	b.n	800d2c0 <_printf_float+0x2a4>
 800d2e2:	bf00      	nop
 800d2e4:	7fefffff 	.word	0x7fefffff
 800d2e8:	08011b27 	.word	0x08011b27
 800d2ec:	08011b2b 	.word	0x08011b2b
 800d2f0:	08011b2f 	.word	0x08011b2f
 800d2f4:	08011b33 	.word	0x08011b33
 800d2f8:	08011b37 	.word	0x08011b37
 800d2fc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d2fe:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d302:	4553      	cmp	r3, sl
 800d304:	bfa8      	it	ge
 800d306:	4653      	movge	r3, sl
 800d308:	2b00      	cmp	r3, #0
 800d30a:	4699      	mov	r9, r3
 800d30c:	dc36      	bgt.n	800d37c <_printf_float+0x360>
 800d30e:	f04f 0b00 	mov.w	fp, #0
 800d312:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d316:	f104 021a 	add.w	r2, r4, #26
 800d31a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d31c:	9306      	str	r3, [sp, #24]
 800d31e:	eba3 0309 	sub.w	r3, r3, r9
 800d322:	455b      	cmp	r3, fp
 800d324:	dc31      	bgt.n	800d38a <_printf_float+0x36e>
 800d326:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d328:	459a      	cmp	sl, r3
 800d32a:	dc3a      	bgt.n	800d3a2 <_printf_float+0x386>
 800d32c:	6823      	ldr	r3, [r4, #0]
 800d32e:	07da      	lsls	r2, r3, #31
 800d330:	d437      	bmi.n	800d3a2 <_printf_float+0x386>
 800d332:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d334:	ebaa 0903 	sub.w	r9, sl, r3
 800d338:	9b06      	ldr	r3, [sp, #24]
 800d33a:	ebaa 0303 	sub.w	r3, sl, r3
 800d33e:	4599      	cmp	r9, r3
 800d340:	bfa8      	it	ge
 800d342:	4699      	movge	r9, r3
 800d344:	f1b9 0f00 	cmp.w	r9, #0
 800d348:	dc33      	bgt.n	800d3b2 <_printf_float+0x396>
 800d34a:	f04f 0800 	mov.w	r8, #0
 800d34e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d352:	f104 0b1a 	add.w	fp, r4, #26
 800d356:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d358:	ebaa 0303 	sub.w	r3, sl, r3
 800d35c:	eba3 0309 	sub.w	r3, r3, r9
 800d360:	4543      	cmp	r3, r8
 800d362:	f77f af79 	ble.w	800d258 <_printf_float+0x23c>
 800d366:	2301      	movs	r3, #1
 800d368:	465a      	mov	r2, fp
 800d36a:	4631      	mov	r1, r6
 800d36c:	4628      	mov	r0, r5
 800d36e:	47b8      	blx	r7
 800d370:	3001      	adds	r0, #1
 800d372:	f43f aeae 	beq.w	800d0d2 <_printf_float+0xb6>
 800d376:	f108 0801 	add.w	r8, r8, #1
 800d37a:	e7ec      	b.n	800d356 <_printf_float+0x33a>
 800d37c:	4642      	mov	r2, r8
 800d37e:	4631      	mov	r1, r6
 800d380:	4628      	mov	r0, r5
 800d382:	47b8      	blx	r7
 800d384:	3001      	adds	r0, #1
 800d386:	d1c2      	bne.n	800d30e <_printf_float+0x2f2>
 800d388:	e6a3      	b.n	800d0d2 <_printf_float+0xb6>
 800d38a:	2301      	movs	r3, #1
 800d38c:	4631      	mov	r1, r6
 800d38e:	4628      	mov	r0, r5
 800d390:	9206      	str	r2, [sp, #24]
 800d392:	47b8      	blx	r7
 800d394:	3001      	adds	r0, #1
 800d396:	f43f ae9c 	beq.w	800d0d2 <_printf_float+0xb6>
 800d39a:	9a06      	ldr	r2, [sp, #24]
 800d39c:	f10b 0b01 	add.w	fp, fp, #1
 800d3a0:	e7bb      	b.n	800d31a <_printf_float+0x2fe>
 800d3a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d3a6:	4631      	mov	r1, r6
 800d3a8:	4628      	mov	r0, r5
 800d3aa:	47b8      	blx	r7
 800d3ac:	3001      	adds	r0, #1
 800d3ae:	d1c0      	bne.n	800d332 <_printf_float+0x316>
 800d3b0:	e68f      	b.n	800d0d2 <_printf_float+0xb6>
 800d3b2:	9a06      	ldr	r2, [sp, #24]
 800d3b4:	464b      	mov	r3, r9
 800d3b6:	4442      	add	r2, r8
 800d3b8:	4631      	mov	r1, r6
 800d3ba:	4628      	mov	r0, r5
 800d3bc:	47b8      	blx	r7
 800d3be:	3001      	adds	r0, #1
 800d3c0:	d1c3      	bne.n	800d34a <_printf_float+0x32e>
 800d3c2:	e686      	b.n	800d0d2 <_printf_float+0xb6>
 800d3c4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d3c8:	f1ba 0f01 	cmp.w	sl, #1
 800d3cc:	dc01      	bgt.n	800d3d2 <_printf_float+0x3b6>
 800d3ce:	07db      	lsls	r3, r3, #31
 800d3d0:	d536      	bpl.n	800d440 <_printf_float+0x424>
 800d3d2:	2301      	movs	r3, #1
 800d3d4:	4642      	mov	r2, r8
 800d3d6:	4631      	mov	r1, r6
 800d3d8:	4628      	mov	r0, r5
 800d3da:	47b8      	blx	r7
 800d3dc:	3001      	adds	r0, #1
 800d3de:	f43f ae78 	beq.w	800d0d2 <_printf_float+0xb6>
 800d3e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d3e6:	4631      	mov	r1, r6
 800d3e8:	4628      	mov	r0, r5
 800d3ea:	47b8      	blx	r7
 800d3ec:	3001      	adds	r0, #1
 800d3ee:	f43f ae70 	beq.w	800d0d2 <_printf_float+0xb6>
 800d3f2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	2300      	movs	r3, #0
 800d3fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d3fe:	f7f3 fb63 	bl	8000ac8 <__aeabi_dcmpeq>
 800d402:	b9c0      	cbnz	r0, 800d436 <_printf_float+0x41a>
 800d404:	4653      	mov	r3, sl
 800d406:	f108 0201 	add.w	r2, r8, #1
 800d40a:	4631      	mov	r1, r6
 800d40c:	4628      	mov	r0, r5
 800d40e:	47b8      	blx	r7
 800d410:	3001      	adds	r0, #1
 800d412:	d10c      	bne.n	800d42e <_printf_float+0x412>
 800d414:	e65d      	b.n	800d0d2 <_printf_float+0xb6>
 800d416:	2301      	movs	r3, #1
 800d418:	465a      	mov	r2, fp
 800d41a:	4631      	mov	r1, r6
 800d41c:	4628      	mov	r0, r5
 800d41e:	47b8      	blx	r7
 800d420:	3001      	adds	r0, #1
 800d422:	f43f ae56 	beq.w	800d0d2 <_printf_float+0xb6>
 800d426:	f108 0801 	add.w	r8, r8, #1
 800d42a:	45d0      	cmp	r8, sl
 800d42c:	dbf3      	blt.n	800d416 <_printf_float+0x3fa>
 800d42e:	464b      	mov	r3, r9
 800d430:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d434:	e6df      	b.n	800d1f6 <_printf_float+0x1da>
 800d436:	f04f 0800 	mov.w	r8, #0
 800d43a:	f104 0b1a 	add.w	fp, r4, #26
 800d43e:	e7f4      	b.n	800d42a <_printf_float+0x40e>
 800d440:	2301      	movs	r3, #1
 800d442:	4642      	mov	r2, r8
 800d444:	e7e1      	b.n	800d40a <_printf_float+0x3ee>
 800d446:	2301      	movs	r3, #1
 800d448:	464a      	mov	r2, r9
 800d44a:	4631      	mov	r1, r6
 800d44c:	4628      	mov	r0, r5
 800d44e:	47b8      	blx	r7
 800d450:	3001      	adds	r0, #1
 800d452:	f43f ae3e 	beq.w	800d0d2 <_printf_float+0xb6>
 800d456:	f108 0801 	add.w	r8, r8, #1
 800d45a:	68e3      	ldr	r3, [r4, #12]
 800d45c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d45e:	1a5b      	subs	r3, r3, r1
 800d460:	4543      	cmp	r3, r8
 800d462:	dcf0      	bgt.n	800d446 <_printf_float+0x42a>
 800d464:	e6fc      	b.n	800d260 <_printf_float+0x244>
 800d466:	f04f 0800 	mov.w	r8, #0
 800d46a:	f104 0919 	add.w	r9, r4, #25
 800d46e:	e7f4      	b.n	800d45a <_printf_float+0x43e>

0800d470 <_printf_common>:
 800d470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d474:	4616      	mov	r6, r2
 800d476:	4698      	mov	r8, r3
 800d478:	688a      	ldr	r2, [r1, #8]
 800d47a:	690b      	ldr	r3, [r1, #16]
 800d47c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d480:	4293      	cmp	r3, r2
 800d482:	bfb8      	it	lt
 800d484:	4613      	movlt	r3, r2
 800d486:	6033      	str	r3, [r6, #0]
 800d488:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d48c:	4607      	mov	r7, r0
 800d48e:	460c      	mov	r4, r1
 800d490:	b10a      	cbz	r2, 800d496 <_printf_common+0x26>
 800d492:	3301      	adds	r3, #1
 800d494:	6033      	str	r3, [r6, #0]
 800d496:	6823      	ldr	r3, [r4, #0]
 800d498:	0699      	lsls	r1, r3, #26
 800d49a:	bf42      	ittt	mi
 800d49c:	6833      	ldrmi	r3, [r6, #0]
 800d49e:	3302      	addmi	r3, #2
 800d4a0:	6033      	strmi	r3, [r6, #0]
 800d4a2:	6825      	ldr	r5, [r4, #0]
 800d4a4:	f015 0506 	ands.w	r5, r5, #6
 800d4a8:	d106      	bne.n	800d4b8 <_printf_common+0x48>
 800d4aa:	f104 0a19 	add.w	sl, r4, #25
 800d4ae:	68e3      	ldr	r3, [r4, #12]
 800d4b0:	6832      	ldr	r2, [r6, #0]
 800d4b2:	1a9b      	subs	r3, r3, r2
 800d4b4:	42ab      	cmp	r3, r5
 800d4b6:	dc26      	bgt.n	800d506 <_printf_common+0x96>
 800d4b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d4bc:	6822      	ldr	r2, [r4, #0]
 800d4be:	3b00      	subs	r3, #0
 800d4c0:	bf18      	it	ne
 800d4c2:	2301      	movne	r3, #1
 800d4c4:	0692      	lsls	r2, r2, #26
 800d4c6:	d42b      	bmi.n	800d520 <_printf_common+0xb0>
 800d4c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d4cc:	4641      	mov	r1, r8
 800d4ce:	4638      	mov	r0, r7
 800d4d0:	47c8      	blx	r9
 800d4d2:	3001      	adds	r0, #1
 800d4d4:	d01e      	beq.n	800d514 <_printf_common+0xa4>
 800d4d6:	6823      	ldr	r3, [r4, #0]
 800d4d8:	6922      	ldr	r2, [r4, #16]
 800d4da:	f003 0306 	and.w	r3, r3, #6
 800d4de:	2b04      	cmp	r3, #4
 800d4e0:	bf02      	ittt	eq
 800d4e2:	68e5      	ldreq	r5, [r4, #12]
 800d4e4:	6833      	ldreq	r3, [r6, #0]
 800d4e6:	1aed      	subeq	r5, r5, r3
 800d4e8:	68a3      	ldr	r3, [r4, #8]
 800d4ea:	bf0c      	ite	eq
 800d4ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d4f0:	2500      	movne	r5, #0
 800d4f2:	4293      	cmp	r3, r2
 800d4f4:	bfc4      	itt	gt
 800d4f6:	1a9b      	subgt	r3, r3, r2
 800d4f8:	18ed      	addgt	r5, r5, r3
 800d4fa:	2600      	movs	r6, #0
 800d4fc:	341a      	adds	r4, #26
 800d4fe:	42b5      	cmp	r5, r6
 800d500:	d11a      	bne.n	800d538 <_printf_common+0xc8>
 800d502:	2000      	movs	r0, #0
 800d504:	e008      	b.n	800d518 <_printf_common+0xa8>
 800d506:	2301      	movs	r3, #1
 800d508:	4652      	mov	r2, sl
 800d50a:	4641      	mov	r1, r8
 800d50c:	4638      	mov	r0, r7
 800d50e:	47c8      	blx	r9
 800d510:	3001      	adds	r0, #1
 800d512:	d103      	bne.n	800d51c <_printf_common+0xac>
 800d514:	f04f 30ff 	mov.w	r0, #4294967295
 800d518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d51c:	3501      	adds	r5, #1
 800d51e:	e7c6      	b.n	800d4ae <_printf_common+0x3e>
 800d520:	18e1      	adds	r1, r4, r3
 800d522:	1c5a      	adds	r2, r3, #1
 800d524:	2030      	movs	r0, #48	@ 0x30
 800d526:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d52a:	4422      	add	r2, r4
 800d52c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d530:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d534:	3302      	adds	r3, #2
 800d536:	e7c7      	b.n	800d4c8 <_printf_common+0x58>
 800d538:	2301      	movs	r3, #1
 800d53a:	4622      	mov	r2, r4
 800d53c:	4641      	mov	r1, r8
 800d53e:	4638      	mov	r0, r7
 800d540:	47c8      	blx	r9
 800d542:	3001      	adds	r0, #1
 800d544:	d0e6      	beq.n	800d514 <_printf_common+0xa4>
 800d546:	3601      	adds	r6, #1
 800d548:	e7d9      	b.n	800d4fe <_printf_common+0x8e>
	...

0800d54c <_printf_i>:
 800d54c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d550:	7e0f      	ldrb	r7, [r1, #24]
 800d552:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d554:	2f78      	cmp	r7, #120	@ 0x78
 800d556:	4691      	mov	r9, r2
 800d558:	4680      	mov	r8, r0
 800d55a:	460c      	mov	r4, r1
 800d55c:	469a      	mov	sl, r3
 800d55e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d562:	d807      	bhi.n	800d574 <_printf_i+0x28>
 800d564:	2f62      	cmp	r7, #98	@ 0x62
 800d566:	d80a      	bhi.n	800d57e <_printf_i+0x32>
 800d568:	2f00      	cmp	r7, #0
 800d56a:	f000 80d2 	beq.w	800d712 <_printf_i+0x1c6>
 800d56e:	2f58      	cmp	r7, #88	@ 0x58
 800d570:	f000 80b9 	beq.w	800d6e6 <_printf_i+0x19a>
 800d574:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d578:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d57c:	e03a      	b.n	800d5f4 <_printf_i+0xa8>
 800d57e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d582:	2b15      	cmp	r3, #21
 800d584:	d8f6      	bhi.n	800d574 <_printf_i+0x28>
 800d586:	a101      	add	r1, pc, #4	@ (adr r1, 800d58c <_printf_i+0x40>)
 800d588:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d58c:	0800d5e5 	.word	0x0800d5e5
 800d590:	0800d5f9 	.word	0x0800d5f9
 800d594:	0800d575 	.word	0x0800d575
 800d598:	0800d575 	.word	0x0800d575
 800d59c:	0800d575 	.word	0x0800d575
 800d5a0:	0800d575 	.word	0x0800d575
 800d5a4:	0800d5f9 	.word	0x0800d5f9
 800d5a8:	0800d575 	.word	0x0800d575
 800d5ac:	0800d575 	.word	0x0800d575
 800d5b0:	0800d575 	.word	0x0800d575
 800d5b4:	0800d575 	.word	0x0800d575
 800d5b8:	0800d6f9 	.word	0x0800d6f9
 800d5bc:	0800d623 	.word	0x0800d623
 800d5c0:	0800d6b3 	.word	0x0800d6b3
 800d5c4:	0800d575 	.word	0x0800d575
 800d5c8:	0800d575 	.word	0x0800d575
 800d5cc:	0800d71b 	.word	0x0800d71b
 800d5d0:	0800d575 	.word	0x0800d575
 800d5d4:	0800d623 	.word	0x0800d623
 800d5d8:	0800d575 	.word	0x0800d575
 800d5dc:	0800d575 	.word	0x0800d575
 800d5e0:	0800d6bb 	.word	0x0800d6bb
 800d5e4:	6833      	ldr	r3, [r6, #0]
 800d5e6:	1d1a      	adds	r2, r3, #4
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	6032      	str	r2, [r6, #0]
 800d5ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d5f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d5f4:	2301      	movs	r3, #1
 800d5f6:	e09d      	b.n	800d734 <_printf_i+0x1e8>
 800d5f8:	6833      	ldr	r3, [r6, #0]
 800d5fa:	6820      	ldr	r0, [r4, #0]
 800d5fc:	1d19      	adds	r1, r3, #4
 800d5fe:	6031      	str	r1, [r6, #0]
 800d600:	0606      	lsls	r6, r0, #24
 800d602:	d501      	bpl.n	800d608 <_printf_i+0xbc>
 800d604:	681d      	ldr	r5, [r3, #0]
 800d606:	e003      	b.n	800d610 <_printf_i+0xc4>
 800d608:	0645      	lsls	r5, r0, #25
 800d60a:	d5fb      	bpl.n	800d604 <_printf_i+0xb8>
 800d60c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d610:	2d00      	cmp	r5, #0
 800d612:	da03      	bge.n	800d61c <_printf_i+0xd0>
 800d614:	232d      	movs	r3, #45	@ 0x2d
 800d616:	426d      	negs	r5, r5
 800d618:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d61c:	4859      	ldr	r0, [pc, #356]	@ (800d784 <_printf_i+0x238>)
 800d61e:	230a      	movs	r3, #10
 800d620:	e011      	b.n	800d646 <_printf_i+0xfa>
 800d622:	6821      	ldr	r1, [r4, #0]
 800d624:	6833      	ldr	r3, [r6, #0]
 800d626:	0608      	lsls	r0, r1, #24
 800d628:	f853 5b04 	ldr.w	r5, [r3], #4
 800d62c:	d402      	bmi.n	800d634 <_printf_i+0xe8>
 800d62e:	0649      	lsls	r1, r1, #25
 800d630:	bf48      	it	mi
 800d632:	b2ad      	uxthmi	r5, r5
 800d634:	2f6f      	cmp	r7, #111	@ 0x6f
 800d636:	4853      	ldr	r0, [pc, #332]	@ (800d784 <_printf_i+0x238>)
 800d638:	6033      	str	r3, [r6, #0]
 800d63a:	bf14      	ite	ne
 800d63c:	230a      	movne	r3, #10
 800d63e:	2308      	moveq	r3, #8
 800d640:	2100      	movs	r1, #0
 800d642:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d646:	6866      	ldr	r6, [r4, #4]
 800d648:	60a6      	str	r6, [r4, #8]
 800d64a:	2e00      	cmp	r6, #0
 800d64c:	bfa2      	ittt	ge
 800d64e:	6821      	ldrge	r1, [r4, #0]
 800d650:	f021 0104 	bicge.w	r1, r1, #4
 800d654:	6021      	strge	r1, [r4, #0]
 800d656:	b90d      	cbnz	r5, 800d65c <_printf_i+0x110>
 800d658:	2e00      	cmp	r6, #0
 800d65a:	d04b      	beq.n	800d6f4 <_printf_i+0x1a8>
 800d65c:	4616      	mov	r6, r2
 800d65e:	fbb5 f1f3 	udiv	r1, r5, r3
 800d662:	fb03 5711 	mls	r7, r3, r1, r5
 800d666:	5dc7      	ldrb	r7, [r0, r7]
 800d668:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d66c:	462f      	mov	r7, r5
 800d66e:	42bb      	cmp	r3, r7
 800d670:	460d      	mov	r5, r1
 800d672:	d9f4      	bls.n	800d65e <_printf_i+0x112>
 800d674:	2b08      	cmp	r3, #8
 800d676:	d10b      	bne.n	800d690 <_printf_i+0x144>
 800d678:	6823      	ldr	r3, [r4, #0]
 800d67a:	07df      	lsls	r7, r3, #31
 800d67c:	d508      	bpl.n	800d690 <_printf_i+0x144>
 800d67e:	6923      	ldr	r3, [r4, #16]
 800d680:	6861      	ldr	r1, [r4, #4]
 800d682:	4299      	cmp	r1, r3
 800d684:	bfde      	ittt	le
 800d686:	2330      	movle	r3, #48	@ 0x30
 800d688:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d68c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d690:	1b92      	subs	r2, r2, r6
 800d692:	6122      	str	r2, [r4, #16]
 800d694:	f8cd a000 	str.w	sl, [sp]
 800d698:	464b      	mov	r3, r9
 800d69a:	aa03      	add	r2, sp, #12
 800d69c:	4621      	mov	r1, r4
 800d69e:	4640      	mov	r0, r8
 800d6a0:	f7ff fee6 	bl	800d470 <_printf_common>
 800d6a4:	3001      	adds	r0, #1
 800d6a6:	d14a      	bne.n	800d73e <_printf_i+0x1f2>
 800d6a8:	f04f 30ff 	mov.w	r0, #4294967295
 800d6ac:	b004      	add	sp, #16
 800d6ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6b2:	6823      	ldr	r3, [r4, #0]
 800d6b4:	f043 0320 	orr.w	r3, r3, #32
 800d6b8:	6023      	str	r3, [r4, #0]
 800d6ba:	4833      	ldr	r0, [pc, #204]	@ (800d788 <_printf_i+0x23c>)
 800d6bc:	2778      	movs	r7, #120	@ 0x78
 800d6be:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d6c2:	6823      	ldr	r3, [r4, #0]
 800d6c4:	6831      	ldr	r1, [r6, #0]
 800d6c6:	061f      	lsls	r7, r3, #24
 800d6c8:	f851 5b04 	ldr.w	r5, [r1], #4
 800d6cc:	d402      	bmi.n	800d6d4 <_printf_i+0x188>
 800d6ce:	065f      	lsls	r7, r3, #25
 800d6d0:	bf48      	it	mi
 800d6d2:	b2ad      	uxthmi	r5, r5
 800d6d4:	6031      	str	r1, [r6, #0]
 800d6d6:	07d9      	lsls	r1, r3, #31
 800d6d8:	bf44      	itt	mi
 800d6da:	f043 0320 	orrmi.w	r3, r3, #32
 800d6de:	6023      	strmi	r3, [r4, #0]
 800d6e0:	b11d      	cbz	r5, 800d6ea <_printf_i+0x19e>
 800d6e2:	2310      	movs	r3, #16
 800d6e4:	e7ac      	b.n	800d640 <_printf_i+0xf4>
 800d6e6:	4827      	ldr	r0, [pc, #156]	@ (800d784 <_printf_i+0x238>)
 800d6e8:	e7e9      	b.n	800d6be <_printf_i+0x172>
 800d6ea:	6823      	ldr	r3, [r4, #0]
 800d6ec:	f023 0320 	bic.w	r3, r3, #32
 800d6f0:	6023      	str	r3, [r4, #0]
 800d6f2:	e7f6      	b.n	800d6e2 <_printf_i+0x196>
 800d6f4:	4616      	mov	r6, r2
 800d6f6:	e7bd      	b.n	800d674 <_printf_i+0x128>
 800d6f8:	6833      	ldr	r3, [r6, #0]
 800d6fa:	6825      	ldr	r5, [r4, #0]
 800d6fc:	6961      	ldr	r1, [r4, #20]
 800d6fe:	1d18      	adds	r0, r3, #4
 800d700:	6030      	str	r0, [r6, #0]
 800d702:	062e      	lsls	r6, r5, #24
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	d501      	bpl.n	800d70c <_printf_i+0x1c0>
 800d708:	6019      	str	r1, [r3, #0]
 800d70a:	e002      	b.n	800d712 <_printf_i+0x1c6>
 800d70c:	0668      	lsls	r0, r5, #25
 800d70e:	d5fb      	bpl.n	800d708 <_printf_i+0x1bc>
 800d710:	8019      	strh	r1, [r3, #0]
 800d712:	2300      	movs	r3, #0
 800d714:	6123      	str	r3, [r4, #16]
 800d716:	4616      	mov	r6, r2
 800d718:	e7bc      	b.n	800d694 <_printf_i+0x148>
 800d71a:	6833      	ldr	r3, [r6, #0]
 800d71c:	1d1a      	adds	r2, r3, #4
 800d71e:	6032      	str	r2, [r6, #0]
 800d720:	681e      	ldr	r6, [r3, #0]
 800d722:	6862      	ldr	r2, [r4, #4]
 800d724:	2100      	movs	r1, #0
 800d726:	4630      	mov	r0, r6
 800d728:	f7f2 fd52 	bl	80001d0 <memchr>
 800d72c:	b108      	cbz	r0, 800d732 <_printf_i+0x1e6>
 800d72e:	1b80      	subs	r0, r0, r6
 800d730:	6060      	str	r0, [r4, #4]
 800d732:	6863      	ldr	r3, [r4, #4]
 800d734:	6123      	str	r3, [r4, #16]
 800d736:	2300      	movs	r3, #0
 800d738:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d73c:	e7aa      	b.n	800d694 <_printf_i+0x148>
 800d73e:	6923      	ldr	r3, [r4, #16]
 800d740:	4632      	mov	r2, r6
 800d742:	4649      	mov	r1, r9
 800d744:	4640      	mov	r0, r8
 800d746:	47d0      	blx	sl
 800d748:	3001      	adds	r0, #1
 800d74a:	d0ad      	beq.n	800d6a8 <_printf_i+0x15c>
 800d74c:	6823      	ldr	r3, [r4, #0]
 800d74e:	079b      	lsls	r3, r3, #30
 800d750:	d413      	bmi.n	800d77a <_printf_i+0x22e>
 800d752:	68e0      	ldr	r0, [r4, #12]
 800d754:	9b03      	ldr	r3, [sp, #12]
 800d756:	4298      	cmp	r0, r3
 800d758:	bfb8      	it	lt
 800d75a:	4618      	movlt	r0, r3
 800d75c:	e7a6      	b.n	800d6ac <_printf_i+0x160>
 800d75e:	2301      	movs	r3, #1
 800d760:	4632      	mov	r2, r6
 800d762:	4649      	mov	r1, r9
 800d764:	4640      	mov	r0, r8
 800d766:	47d0      	blx	sl
 800d768:	3001      	adds	r0, #1
 800d76a:	d09d      	beq.n	800d6a8 <_printf_i+0x15c>
 800d76c:	3501      	adds	r5, #1
 800d76e:	68e3      	ldr	r3, [r4, #12]
 800d770:	9903      	ldr	r1, [sp, #12]
 800d772:	1a5b      	subs	r3, r3, r1
 800d774:	42ab      	cmp	r3, r5
 800d776:	dcf2      	bgt.n	800d75e <_printf_i+0x212>
 800d778:	e7eb      	b.n	800d752 <_printf_i+0x206>
 800d77a:	2500      	movs	r5, #0
 800d77c:	f104 0619 	add.w	r6, r4, #25
 800d780:	e7f5      	b.n	800d76e <_printf_i+0x222>
 800d782:	bf00      	nop
 800d784:	08011b39 	.word	0x08011b39
 800d788:	08011b4a 	.word	0x08011b4a

0800d78c <_scanf_float>:
 800d78c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d790:	b087      	sub	sp, #28
 800d792:	4617      	mov	r7, r2
 800d794:	9303      	str	r3, [sp, #12]
 800d796:	688b      	ldr	r3, [r1, #8]
 800d798:	1e5a      	subs	r2, r3, #1
 800d79a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800d79e:	bf81      	itttt	hi
 800d7a0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800d7a4:	eb03 0b05 	addhi.w	fp, r3, r5
 800d7a8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800d7ac:	608b      	strhi	r3, [r1, #8]
 800d7ae:	680b      	ldr	r3, [r1, #0]
 800d7b0:	460a      	mov	r2, r1
 800d7b2:	f04f 0500 	mov.w	r5, #0
 800d7b6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800d7ba:	f842 3b1c 	str.w	r3, [r2], #28
 800d7be:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800d7c2:	4680      	mov	r8, r0
 800d7c4:	460c      	mov	r4, r1
 800d7c6:	bf98      	it	ls
 800d7c8:	f04f 0b00 	movls.w	fp, #0
 800d7cc:	9201      	str	r2, [sp, #4]
 800d7ce:	4616      	mov	r6, r2
 800d7d0:	46aa      	mov	sl, r5
 800d7d2:	46a9      	mov	r9, r5
 800d7d4:	9502      	str	r5, [sp, #8]
 800d7d6:	68a2      	ldr	r2, [r4, #8]
 800d7d8:	b152      	cbz	r2, 800d7f0 <_scanf_float+0x64>
 800d7da:	683b      	ldr	r3, [r7, #0]
 800d7dc:	781b      	ldrb	r3, [r3, #0]
 800d7de:	2b4e      	cmp	r3, #78	@ 0x4e
 800d7e0:	d864      	bhi.n	800d8ac <_scanf_float+0x120>
 800d7e2:	2b40      	cmp	r3, #64	@ 0x40
 800d7e4:	d83c      	bhi.n	800d860 <_scanf_float+0xd4>
 800d7e6:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800d7ea:	b2c8      	uxtb	r0, r1
 800d7ec:	280e      	cmp	r0, #14
 800d7ee:	d93a      	bls.n	800d866 <_scanf_float+0xda>
 800d7f0:	f1b9 0f00 	cmp.w	r9, #0
 800d7f4:	d003      	beq.n	800d7fe <_scanf_float+0x72>
 800d7f6:	6823      	ldr	r3, [r4, #0]
 800d7f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d7fc:	6023      	str	r3, [r4, #0]
 800d7fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d802:	f1ba 0f01 	cmp.w	sl, #1
 800d806:	f200 8117 	bhi.w	800da38 <_scanf_float+0x2ac>
 800d80a:	9b01      	ldr	r3, [sp, #4]
 800d80c:	429e      	cmp	r6, r3
 800d80e:	f200 8108 	bhi.w	800da22 <_scanf_float+0x296>
 800d812:	2001      	movs	r0, #1
 800d814:	b007      	add	sp, #28
 800d816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d81a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800d81e:	2a0d      	cmp	r2, #13
 800d820:	d8e6      	bhi.n	800d7f0 <_scanf_float+0x64>
 800d822:	a101      	add	r1, pc, #4	@ (adr r1, 800d828 <_scanf_float+0x9c>)
 800d824:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d828:	0800d96f 	.word	0x0800d96f
 800d82c:	0800d7f1 	.word	0x0800d7f1
 800d830:	0800d7f1 	.word	0x0800d7f1
 800d834:	0800d7f1 	.word	0x0800d7f1
 800d838:	0800d9cf 	.word	0x0800d9cf
 800d83c:	0800d9a7 	.word	0x0800d9a7
 800d840:	0800d7f1 	.word	0x0800d7f1
 800d844:	0800d7f1 	.word	0x0800d7f1
 800d848:	0800d97d 	.word	0x0800d97d
 800d84c:	0800d7f1 	.word	0x0800d7f1
 800d850:	0800d7f1 	.word	0x0800d7f1
 800d854:	0800d7f1 	.word	0x0800d7f1
 800d858:	0800d7f1 	.word	0x0800d7f1
 800d85c:	0800d935 	.word	0x0800d935
 800d860:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800d864:	e7db      	b.n	800d81e <_scanf_float+0x92>
 800d866:	290e      	cmp	r1, #14
 800d868:	d8c2      	bhi.n	800d7f0 <_scanf_float+0x64>
 800d86a:	a001      	add	r0, pc, #4	@ (adr r0, 800d870 <_scanf_float+0xe4>)
 800d86c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800d870:	0800d925 	.word	0x0800d925
 800d874:	0800d7f1 	.word	0x0800d7f1
 800d878:	0800d925 	.word	0x0800d925
 800d87c:	0800d9bb 	.word	0x0800d9bb
 800d880:	0800d7f1 	.word	0x0800d7f1
 800d884:	0800d8cd 	.word	0x0800d8cd
 800d888:	0800d90b 	.word	0x0800d90b
 800d88c:	0800d90b 	.word	0x0800d90b
 800d890:	0800d90b 	.word	0x0800d90b
 800d894:	0800d90b 	.word	0x0800d90b
 800d898:	0800d90b 	.word	0x0800d90b
 800d89c:	0800d90b 	.word	0x0800d90b
 800d8a0:	0800d90b 	.word	0x0800d90b
 800d8a4:	0800d90b 	.word	0x0800d90b
 800d8a8:	0800d90b 	.word	0x0800d90b
 800d8ac:	2b6e      	cmp	r3, #110	@ 0x6e
 800d8ae:	d809      	bhi.n	800d8c4 <_scanf_float+0x138>
 800d8b0:	2b60      	cmp	r3, #96	@ 0x60
 800d8b2:	d8b2      	bhi.n	800d81a <_scanf_float+0x8e>
 800d8b4:	2b54      	cmp	r3, #84	@ 0x54
 800d8b6:	d07b      	beq.n	800d9b0 <_scanf_float+0x224>
 800d8b8:	2b59      	cmp	r3, #89	@ 0x59
 800d8ba:	d199      	bne.n	800d7f0 <_scanf_float+0x64>
 800d8bc:	2d07      	cmp	r5, #7
 800d8be:	d197      	bne.n	800d7f0 <_scanf_float+0x64>
 800d8c0:	2508      	movs	r5, #8
 800d8c2:	e02c      	b.n	800d91e <_scanf_float+0x192>
 800d8c4:	2b74      	cmp	r3, #116	@ 0x74
 800d8c6:	d073      	beq.n	800d9b0 <_scanf_float+0x224>
 800d8c8:	2b79      	cmp	r3, #121	@ 0x79
 800d8ca:	e7f6      	b.n	800d8ba <_scanf_float+0x12e>
 800d8cc:	6821      	ldr	r1, [r4, #0]
 800d8ce:	05c8      	lsls	r0, r1, #23
 800d8d0:	d51b      	bpl.n	800d90a <_scanf_float+0x17e>
 800d8d2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800d8d6:	6021      	str	r1, [r4, #0]
 800d8d8:	f109 0901 	add.w	r9, r9, #1
 800d8dc:	f1bb 0f00 	cmp.w	fp, #0
 800d8e0:	d003      	beq.n	800d8ea <_scanf_float+0x15e>
 800d8e2:	3201      	adds	r2, #1
 800d8e4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d8e8:	60a2      	str	r2, [r4, #8]
 800d8ea:	68a3      	ldr	r3, [r4, #8]
 800d8ec:	3b01      	subs	r3, #1
 800d8ee:	60a3      	str	r3, [r4, #8]
 800d8f0:	6923      	ldr	r3, [r4, #16]
 800d8f2:	3301      	adds	r3, #1
 800d8f4:	6123      	str	r3, [r4, #16]
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	3b01      	subs	r3, #1
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	607b      	str	r3, [r7, #4]
 800d8fe:	f340 8087 	ble.w	800da10 <_scanf_float+0x284>
 800d902:	683b      	ldr	r3, [r7, #0]
 800d904:	3301      	adds	r3, #1
 800d906:	603b      	str	r3, [r7, #0]
 800d908:	e765      	b.n	800d7d6 <_scanf_float+0x4a>
 800d90a:	eb1a 0105 	adds.w	r1, sl, r5
 800d90e:	f47f af6f 	bne.w	800d7f0 <_scanf_float+0x64>
 800d912:	6822      	ldr	r2, [r4, #0]
 800d914:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800d918:	6022      	str	r2, [r4, #0]
 800d91a:	460d      	mov	r5, r1
 800d91c:	468a      	mov	sl, r1
 800d91e:	f806 3b01 	strb.w	r3, [r6], #1
 800d922:	e7e2      	b.n	800d8ea <_scanf_float+0x15e>
 800d924:	6822      	ldr	r2, [r4, #0]
 800d926:	0610      	lsls	r0, r2, #24
 800d928:	f57f af62 	bpl.w	800d7f0 <_scanf_float+0x64>
 800d92c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d930:	6022      	str	r2, [r4, #0]
 800d932:	e7f4      	b.n	800d91e <_scanf_float+0x192>
 800d934:	f1ba 0f00 	cmp.w	sl, #0
 800d938:	d10e      	bne.n	800d958 <_scanf_float+0x1cc>
 800d93a:	f1b9 0f00 	cmp.w	r9, #0
 800d93e:	d10e      	bne.n	800d95e <_scanf_float+0x1d2>
 800d940:	6822      	ldr	r2, [r4, #0]
 800d942:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800d946:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800d94a:	d108      	bne.n	800d95e <_scanf_float+0x1d2>
 800d94c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d950:	6022      	str	r2, [r4, #0]
 800d952:	f04f 0a01 	mov.w	sl, #1
 800d956:	e7e2      	b.n	800d91e <_scanf_float+0x192>
 800d958:	f1ba 0f02 	cmp.w	sl, #2
 800d95c:	d055      	beq.n	800da0a <_scanf_float+0x27e>
 800d95e:	2d01      	cmp	r5, #1
 800d960:	d002      	beq.n	800d968 <_scanf_float+0x1dc>
 800d962:	2d04      	cmp	r5, #4
 800d964:	f47f af44 	bne.w	800d7f0 <_scanf_float+0x64>
 800d968:	3501      	adds	r5, #1
 800d96a:	b2ed      	uxtb	r5, r5
 800d96c:	e7d7      	b.n	800d91e <_scanf_float+0x192>
 800d96e:	f1ba 0f01 	cmp.w	sl, #1
 800d972:	f47f af3d 	bne.w	800d7f0 <_scanf_float+0x64>
 800d976:	f04f 0a02 	mov.w	sl, #2
 800d97a:	e7d0      	b.n	800d91e <_scanf_float+0x192>
 800d97c:	b97d      	cbnz	r5, 800d99e <_scanf_float+0x212>
 800d97e:	f1b9 0f00 	cmp.w	r9, #0
 800d982:	f47f af38 	bne.w	800d7f6 <_scanf_float+0x6a>
 800d986:	6822      	ldr	r2, [r4, #0]
 800d988:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800d98c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800d990:	f040 8108 	bne.w	800dba4 <_scanf_float+0x418>
 800d994:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d998:	6022      	str	r2, [r4, #0]
 800d99a:	2501      	movs	r5, #1
 800d99c:	e7bf      	b.n	800d91e <_scanf_float+0x192>
 800d99e:	2d03      	cmp	r5, #3
 800d9a0:	d0e2      	beq.n	800d968 <_scanf_float+0x1dc>
 800d9a2:	2d05      	cmp	r5, #5
 800d9a4:	e7de      	b.n	800d964 <_scanf_float+0x1d8>
 800d9a6:	2d02      	cmp	r5, #2
 800d9a8:	f47f af22 	bne.w	800d7f0 <_scanf_float+0x64>
 800d9ac:	2503      	movs	r5, #3
 800d9ae:	e7b6      	b.n	800d91e <_scanf_float+0x192>
 800d9b0:	2d06      	cmp	r5, #6
 800d9b2:	f47f af1d 	bne.w	800d7f0 <_scanf_float+0x64>
 800d9b6:	2507      	movs	r5, #7
 800d9b8:	e7b1      	b.n	800d91e <_scanf_float+0x192>
 800d9ba:	6822      	ldr	r2, [r4, #0]
 800d9bc:	0591      	lsls	r1, r2, #22
 800d9be:	f57f af17 	bpl.w	800d7f0 <_scanf_float+0x64>
 800d9c2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800d9c6:	6022      	str	r2, [r4, #0]
 800d9c8:	f8cd 9008 	str.w	r9, [sp, #8]
 800d9cc:	e7a7      	b.n	800d91e <_scanf_float+0x192>
 800d9ce:	6822      	ldr	r2, [r4, #0]
 800d9d0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800d9d4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800d9d8:	d006      	beq.n	800d9e8 <_scanf_float+0x25c>
 800d9da:	0550      	lsls	r0, r2, #21
 800d9dc:	f57f af08 	bpl.w	800d7f0 <_scanf_float+0x64>
 800d9e0:	f1b9 0f00 	cmp.w	r9, #0
 800d9e4:	f000 80de 	beq.w	800dba4 <_scanf_float+0x418>
 800d9e8:	0591      	lsls	r1, r2, #22
 800d9ea:	bf58      	it	pl
 800d9ec:	9902      	ldrpl	r1, [sp, #8]
 800d9ee:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d9f2:	bf58      	it	pl
 800d9f4:	eba9 0101 	subpl.w	r1, r9, r1
 800d9f8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800d9fc:	bf58      	it	pl
 800d9fe:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800da02:	6022      	str	r2, [r4, #0]
 800da04:	f04f 0900 	mov.w	r9, #0
 800da08:	e789      	b.n	800d91e <_scanf_float+0x192>
 800da0a:	f04f 0a03 	mov.w	sl, #3
 800da0e:	e786      	b.n	800d91e <_scanf_float+0x192>
 800da10:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800da14:	4639      	mov	r1, r7
 800da16:	4640      	mov	r0, r8
 800da18:	4798      	blx	r3
 800da1a:	2800      	cmp	r0, #0
 800da1c:	f43f aedb 	beq.w	800d7d6 <_scanf_float+0x4a>
 800da20:	e6e6      	b.n	800d7f0 <_scanf_float+0x64>
 800da22:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800da26:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800da2a:	463a      	mov	r2, r7
 800da2c:	4640      	mov	r0, r8
 800da2e:	4798      	blx	r3
 800da30:	6923      	ldr	r3, [r4, #16]
 800da32:	3b01      	subs	r3, #1
 800da34:	6123      	str	r3, [r4, #16]
 800da36:	e6e8      	b.n	800d80a <_scanf_float+0x7e>
 800da38:	1e6b      	subs	r3, r5, #1
 800da3a:	2b06      	cmp	r3, #6
 800da3c:	d824      	bhi.n	800da88 <_scanf_float+0x2fc>
 800da3e:	2d02      	cmp	r5, #2
 800da40:	d836      	bhi.n	800dab0 <_scanf_float+0x324>
 800da42:	9b01      	ldr	r3, [sp, #4]
 800da44:	429e      	cmp	r6, r3
 800da46:	f67f aee4 	bls.w	800d812 <_scanf_float+0x86>
 800da4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800da4e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800da52:	463a      	mov	r2, r7
 800da54:	4640      	mov	r0, r8
 800da56:	4798      	blx	r3
 800da58:	6923      	ldr	r3, [r4, #16]
 800da5a:	3b01      	subs	r3, #1
 800da5c:	6123      	str	r3, [r4, #16]
 800da5e:	e7f0      	b.n	800da42 <_scanf_float+0x2b6>
 800da60:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800da64:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800da68:	463a      	mov	r2, r7
 800da6a:	4640      	mov	r0, r8
 800da6c:	4798      	blx	r3
 800da6e:	6923      	ldr	r3, [r4, #16]
 800da70:	3b01      	subs	r3, #1
 800da72:	6123      	str	r3, [r4, #16]
 800da74:	f10a 3aff 	add.w	sl, sl, #4294967295
 800da78:	fa5f fa8a 	uxtb.w	sl, sl
 800da7c:	f1ba 0f02 	cmp.w	sl, #2
 800da80:	d1ee      	bne.n	800da60 <_scanf_float+0x2d4>
 800da82:	3d03      	subs	r5, #3
 800da84:	b2ed      	uxtb	r5, r5
 800da86:	1b76      	subs	r6, r6, r5
 800da88:	6823      	ldr	r3, [r4, #0]
 800da8a:	05da      	lsls	r2, r3, #23
 800da8c:	d530      	bpl.n	800daf0 <_scanf_float+0x364>
 800da8e:	055b      	lsls	r3, r3, #21
 800da90:	d511      	bpl.n	800dab6 <_scanf_float+0x32a>
 800da92:	9b01      	ldr	r3, [sp, #4]
 800da94:	429e      	cmp	r6, r3
 800da96:	f67f aebc 	bls.w	800d812 <_scanf_float+0x86>
 800da9a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800da9e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800daa2:	463a      	mov	r2, r7
 800daa4:	4640      	mov	r0, r8
 800daa6:	4798      	blx	r3
 800daa8:	6923      	ldr	r3, [r4, #16]
 800daaa:	3b01      	subs	r3, #1
 800daac:	6123      	str	r3, [r4, #16]
 800daae:	e7f0      	b.n	800da92 <_scanf_float+0x306>
 800dab0:	46aa      	mov	sl, r5
 800dab2:	46b3      	mov	fp, r6
 800dab4:	e7de      	b.n	800da74 <_scanf_float+0x2e8>
 800dab6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800daba:	6923      	ldr	r3, [r4, #16]
 800dabc:	2965      	cmp	r1, #101	@ 0x65
 800dabe:	f103 33ff 	add.w	r3, r3, #4294967295
 800dac2:	f106 35ff 	add.w	r5, r6, #4294967295
 800dac6:	6123      	str	r3, [r4, #16]
 800dac8:	d00c      	beq.n	800dae4 <_scanf_float+0x358>
 800daca:	2945      	cmp	r1, #69	@ 0x45
 800dacc:	d00a      	beq.n	800dae4 <_scanf_float+0x358>
 800dace:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800dad2:	463a      	mov	r2, r7
 800dad4:	4640      	mov	r0, r8
 800dad6:	4798      	blx	r3
 800dad8:	6923      	ldr	r3, [r4, #16]
 800dada:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800dade:	3b01      	subs	r3, #1
 800dae0:	1eb5      	subs	r5, r6, #2
 800dae2:	6123      	str	r3, [r4, #16]
 800dae4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800dae8:	463a      	mov	r2, r7
 800daea:	4640      	mov	r0, r8
 800daec:	4798      	blx	r3
 800daee:	462e      	mov	r6, r5
 800daf0:	6822      	ldr	r2, [r4, #0]
 800daf2:	f012 0210 	ands.w	r2, r2, #16
 800daf6:	d001      	beq.n	800dafc <_scanf_float+0x370>
 800daf8:	2000      	movs	r0, #0
 800dafa:	e68b      	b.n	800d814 <_scanf_float+0x88>
 800dafc:	7032      	strb	r2, [r6, #0]
 800dafe:	6823      	ldr	r3, [r4, #0]
 800db00:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800db04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800db08:	d11c      	bne.n	800db44 <_scanf_float+0x3b8>
 800db0a:	9b02      	ldr	r3, [sp, #8]
 800db0c:	454b      	cmp	r3, r9
 800db0e:	eba3 0209 	sub.w	r2, r3, r9
 800db12:	d123      	bne.n	800db5c <_scanf_float+0x3d0>
 800db14:	9901      	ldr	r1, [sp, #4]
 800db16:	2200      	movs	r2, #0
 800db18:	4640      	mov	r0, r8
 800db1a:	f002 fd29 	bl	8010570 <_strtod_r>
 800db1e:	9b03      	ldr	r3, [sp, #12]
 800db20:	6821      	ldr	r1, [r4, #0]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	f011 0f02 	tst.w	r1, #2
 800db28:	ec57 6b10 	vmov	r6, r7, d0
 800db2c:	f103 0204 	add.w	r2, r3, #4
 800db30:	d01f      	beq.n	800db72 <_scanf_float+0x3e6>
 800db32:	9903      	ldr	r1, [sp, #12]
 800db34:	600a      	str	r2, [r1, #0]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	e9c3 6700 	strd	r6, r7, [r3]
 800db3c:	68e3      	ldr	r3, [r4, #12]
 800db3e:	3301      	adds	r3, #1
 800db40:	60e3      	str	r3, [r4, #12]
 800db42:	e7d9      	b.n	800daf8 <_scanf_float+0x36c>
 800db44:	9b04      	ldr	r3, [sp, #16]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d0e4      	beq.n	800db14 <_scanf_float+0x388>
 800db4a:	9905      	ldr	r1, [sp, #20]
 800db4c:	230a      	movs	r3, #10
 800db4e:	3101      	adds	r1, #1
 800db50:	4640      	mov	r0, r8
 800db52:	f002 fd8d 	bl	8010670 <_strtol_r>
 800db56:	9b04      	ldr	r3, [sp, #16]
 800db58:	9e05      	ldr	r6, [sp, #20]
 800db5a:	1ac2      	subs	r2, r0, r3
 800db5c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800db60:	429e      	cmp	r6, r3
 800db62:	bf28      	it	cs
 800db64:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800db68:	4910      	ldr	r1, [pc, #64]	@ (800dbac <_scanf_float+0x420>)
 800db6a:	4630      	mov	r0, r6
 800db6c:	f000 f954 	bl	800de18 <siprintf>
 800db70:	e7d0      	b.n	800db14 <_scanf_float+0x388>
 800db72:	f011 0f04 	tst.w	r1, #4
 800db76:	9903      	ldr	r1, [sp, #12]
 800db78:	600a      	str	r2, [r1, #0]
 800db7a:	d1dc      	bne.n	800db36 <_scanf_float+0x3aa>
 800db7c:	681d      	ldr	r5, [r3, #0]
 800db7e:	4632      	mov	r2, r6
 800db80:	463b      	mov	r3, r7
 800db82:	4630      	mov	r0, r6
 800db84:	4639      	mov	r1, r7
 800db86:	f7f2 ffd1 	bl	8000b2c <__aeabi_dcmpun>
 800db8a:	b128      	cbz	r0, 800db98 <_scanf_float+0x40c>
 800db8c:	4808      	ldr	r0, [pc, #32]	@ (800dbb0 <_scanf_float+0x424>)
 800db8e:	f000 fac9 	bl	800e124 <nanf>
 800db92:	ed85 0a00 	vstr	s0, [r5]
 800db96:	e7d1      	b.n	800db3c <_scanf_float+0x3b0>
 800db98:	4630      	mov	r0, r6
 800db9a:	4639      	mov	r1, r7
 800db9c:	f7f3 f824 	bl	8000be8 <__aeabi_d2f>
 800dba0:	6028      	str	r0, [r5, #0]
 800dba2:	e7cb      	b.n	800db3c <_scanf_float+0x3b0>
 800dba4:	f04f 0900 	mov.w	r9, #0
 800dba8:	e629      	b.n	800d7fe <_scanf_float+0x72>
 800dbaa:	bf00      	nop
 800dbac:	08011b5b 	.word	0x08011b5b
 800dbb0:	08011b9b 	.word	0x08011b9b

0800dbb4 <std>:
 800dbb4:	2300      	movs	r3, #0
 800dbb6:	b510      	push	{r4, lr}
 800dbb8:	4604      	mov	r4, r0
 800dbba:	e9c0 3300 	strd	r3, r3, [r0]
 800dbbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dbc2:	6083      	str	r3, [r0, #8]
 800dbc4:	8181      	strh	r1, [r0, #12]
 800dbc6:	6643      	str	r3, [r0, #100]	@ 0x64
 800dbc8:	81c2      	strh	r2, [r0, #14]
 800dbca:	6183      	str	r3, [r0, #24]
 800dbcc:	4619      	mov	r1, r3
 800dbce:	2208      	movs	r2, #8
 800dbd0:	305c      	adds	r0, #92	@ 0x5c
 800dbd2:	f000 fa19 	bl	800e008 <memset>
 800dbd6:	4b0d      	ldr	r3, [pc, #52]	@ (800dc0c <std+0x58>)
 800dbd8:	6263      	str	r3, [r4, #36]	@ 0x24
 800dbda:	4b0d      	ldr	r3, [pc, #52]	@ (800dc10 <std+0x5c>)
 800dbdc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800dbde:	4b0d      	ldr	r3, [pc, #52]	@ (800dc14 <std+0x60>)
 800dbe0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800dbe2:	4b0d      	ldr	r3, [pc, #52]	@ (800dc18 <std+0x64>)
 800dbe4:	6323      	str	r3, [r4, #48]	@ 0x30
 800dbe6:	4b0d      	ldr	r3, [pc, #52]	@ (800dc1c <std+0x68>)
 800dbe8:	6224      	str	r4, [r4, #32]
 800dbea:	429c      	cmp	r4, r3
 800dbec:	d006      	beq.n	800dbfc <std+0x48>
 800dbee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800dbf2:	4294      	cmp	r4, r2
 800dbf4:	d002      	beq.n	800dbfc <std+0x48>
 800dbf6:	33d0      	adds	r3, #208	@ 0xd0
 800dbf8:	429c      	cmp	r4, r3
 800dbfa:	d105      	bne.n	800dc08 <std+0x54>
 800dbfc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800dc00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dc04:	f000 ba7c 	b.w	800e100 <__retarget_lock_init_recursive>
 800dc08:	bd10      	pop	{r4, pc}
 800dc0a:	bf00      	nop
 800dc0c:	0800de59 	.word	0x0800de59
 800dc10:	0800de7b 	.word	0x0800de7b
 800dc14:	0800deb3 	.word	0x0800deb3
 800dc18:	0800ded7 	.word	0x0800ded7
 800dc1c:	2000405c 	.word	0x2000405c

0800dc20 <stdio_exit_handler>:
 800dc20:	4a02      	ldr	r2, [pc, #8]	@ (800dc2c <stdio_exit_handler+0xc>)
 800dc22:	4903      	ldr	r1, [pc, #12]	@ (800dc30 <stdio_exit_handler+0x10>)
 800dc24:	4803      	ldr	r0, [pc, #12]	@ (800dc34 <stdio_exit_handler+0x14>)
 800dc26:	f000 b869 	b.w	800dcfc <_fwalk_sglue>
 800dc2a:	bf00      	nop
 800dc2c:	20000050 	.word	0x20000050
 800dc30:	08010cb1 	.word	0x08010cb1
 800dc34:	20000060 	.word	0x20000060

0800dc38 <cleanup_stdio>:
 800dc38:	6841      	ldr	r1, [r0, #4]
 800dc3a:	4b0c      	ldr	r3, [pc, #48]	@ (800dc6c <cleanup_stdio+0x34>)
 800dc3c:	4299      	cmp	r1, r3
 800dc3e:	b510      	push	{r4, lr}
 800dc40:	4604      	mov	r4, r0
 800dc42:	d001      	beq.n	800dc48 <cleanup_stdio+0x10>
 800dc44:	f003 f834 	bl	8010cb0 <_fflush_r>
 800dc48:	68a1      	ldr	r1, [r4, #8]
 800dc4a:	4b09      	ldr	r3, [pc, #36]	@ (800dc70 <cleanup_stdio+0x38>)
 800dc4c:	4299      	cmp	r1, r3
 800dc4e:	d002      	beq.n	800dc56 <cleanup_stdio+0x1e>
 800dc50:	4620      	mov	r0, r4
 800dc52:	f003 f82d 	bl	8010cb0 <_fflush_r>
 800dc56:	68e1      	ldr	r1, [r4, #12]
 800dc58:	4b06      	ldr	r3, [pc, #24]	@ (800dc74 <cleanup_stdio+0x3c>)
 800dc5a:	4299      	cmp	r1, r3
 800dc5c:	d004      	beq.n	800dc68 <cleanup_stdio+0x30>
 800dc5e:	4620      	mov	r0, r4
 800dc60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dc64:	f003 b824 	b.w	8010cb0 <_fflush_r>
 800dc68:	bd10      	pop	{r4, pc}
 800dc6a:	bf00      	nop
 800dc6c:	2000405c 	.word	0x2000405c
 800dc70:	200040c4 	.word	0x200040c4
 800dc74:	2000412c 	.word	0x2000412c

0800dc78 <global_stdio_init.part.0>:
 800dc78:	b510      	push	{r4, lr}
 800dc7a:	4b0b      	ldr	r3, [pc, #44]	@ (800dca8 <global_stdio_init.part.0+0x30>)
 800dc7c:	4c0b      	ldr	r4, [pc, #44]	@ (800dcac <global_stdio_init.part.0+0x34>)
 800dc7e:	4a0c      	ldr	r2, [pc, #48]	@ (800dcb0 <global_stdio_init.part.0+0x38>)
 800dc80:	601a      	str	r2, [r3, #0]
 800dc82:	4620      	mov	r0, r4
 800dc84:	2200      	movs	r2, #0
 800dc86:	2104      	movs	r1, #4
 800dc88:	f7ff ff94 	bl	800dbb4 <std>
 800dc8c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800dc90:	2201      	movs	r2, #1
 800dc92:	2109      	movs	r1, #9
 800dc94:	f7ff ff8e 	bl	800dbb4 <std>
 800dc98:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800dc9c:	2202      	movs	r2, #2
 800dc9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dca2:	2112      	movs	r1, #18
 800dca4:	f7ff bf86 	b.w	800dbb4 <std>
 800dca8:	20004194 	.word	0x20004194
 800dcac:	2000405c 	.word	0x2000405c
 800dcb0:	0800dc21 	.word	0x0800dc21

0800dcb4 <__sfp_lock_acquire>:
 800dcb4:	4801      	ldr	r0, [pc, #4]	@ (800dcbc <__sfp_lock_acquire+0x8>)
 800dcb6:	f000 ba24 	b.w	800e102 <__retarget_lock_acquire_recursive>
 800dcba:	bf00      	nop
 800dcbc:	2000419d 	.word	0x2000419d

0800dcc0 <__sfp_lock_release>:
 800dcc0:	4801      	ldr	r0, [pc, #4]	@ (800dcc8 <__sfp_lock_release+0x8>)
 800dcc2:	f000 ba1f 	b.w	800e104 <__retarget_lock_release_recursive>
 800dcc6:	bf00      	nop
 800dcc8:	2000419d 	.word	0x2000419d

0800dccc <__sinit>:
 800dccc:	b510      	push	{r4, lr}
 800dcce:	4604      	mov	r4, r0
 800dcd0:	f7ff fff0 	bl	800dcb4 <__sfp_lock_acquire>
 800dcd4:	6a23      	ldr	r3, [r4, #32]
 800dcd6:	b11b      	cbz	r3, 800dce0 <__sinit+0x14>
 800dcd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dcdc:	f7ff bff0 	b.w	800dcc0 <__sfp_lock_release>
 800dce0:	4b04      	ldr	r3, [pc, #16]	@ (800dcf4 <__sinit+0x28>)
 800dce2:	6223      	str	r3, [r4, #32]
 800dce4:	4b04      	ldr	r3, [pc, #16]	@ (800dcf8 <__sinit+0x2c>)
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d1f5      	bne.n	800dcd8 <__sinit+0xc>
 800dcec:	f7ff ffc4 	bl	800dc78 <global_stdio_init.part.0>
 800dcf0:	e7f2      	b.n	800dcd8 <__sinit+0xc>
 800dcf2:	bf00      	nop
 800dcf4:	0800dc39 	.word	0x0800dc39
 800dcf8:	20004194 	.word	0x20004194

0800dcfc <_fwalk_sglue>:
 800dcfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd00:	4607      	mov	r7, r0
 800dd02:	4688      	mov	r8, r1
 800dd04:	4614      	mov	r4, r2
 800dd06:	2600      	movs	r6, #0
 800dd08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dd0c:	f1b9 0901 	subs.w	r9, r9, #1
 800dd10:	d505      	bpl.n	800dd1e <_fwalk_sglue+0x22>
 800dd12:	6824      	ldr	r4, [r4, #0]
 800dd14:	2c00      	cmp	r4, #0
 800dd16:	d1f7      	bne.n	800dd08 <_fwalk_sglue+0xc>
 800dd18:	4630      	mov	r0, r6
 800dd1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd1e:	89ab      	ldrh	r3, [r5, #12]
 800dd20:	2b01      	cmp	r3, #1
 800dd22:	d907      	bls.n	800dd34 <_fwalk_sglue+0x38>
 800dd24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dd28:	3301      	adds	r3, #1
 800dd2a:	d003      	beq.n	800dd34 <_fwalk_sglue+0x38>
 800dd2c:	4629      	mov	r1, r5
 800dd2e:	4638      	mov	r0, r7
 800dd30:	47c0      	blx	r8
 800dd32:	4306      	orrs	r6, r0
 800dd34:	3568      	adds	r5, #104	@ 0x68
 800dd36:	e7e9      	b.n	800dd0c <_fwalk_sglue+0x10>

0800dd38 <iprintf>:
 800dd38:	b40f      	push	{r0, r1, r2, r3}
 800dd3a:	b507      	push	{r0, r1, r2, lr}
 800dd3c:	4906      	ldr	r1, [pc, #24]	@ (800dd58 <iprintf+0x20>)
 800dd3e:	ab04      	add	r3, sp, #16
 800dd40:	6808      	ldr	r0, [r1, #0]
 800dd42:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd46:	6881      	ldr	r1, [r0, #8]
 800dd48:	9301      	str	r3, [sp, #4]
 800dd4a:	f002 fe15 	bl	8010978 <_vfiprintf_r>
 800dd4e:	b003      	add	sp, #12
 800dd50:	f85d eb04 	ldr.w	lr, [sp], #4
 800dd54:	b004      	add	sp, #16
 800dd56:	4770      	bx	lr
 800dd58:	2000005c 	.word	0x2000005c

0800dd5c <_puts_r>:
 800dd5c:	6a03      	ldr	r3, [r0, #32]
 800dd5e:	b570      	push	{r4, r5, r6, lr}
 800dd60:	6884      	ldr	r4, [r0, #8]
 800dd62:	4605      	mov	r5, r0
 800dd64:	460e      	mov	r6, r1
 800dd66:	b90b      	cbnz	r3, 800dd6c <_puts_r+0x10>
 800dd68:	f7ff ffb0 	bl	800dccc <__sinit>
 800dd6c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dd6e:	07db      	lsls	r3, r3, #31
 800dd70:	d405      	bmi.n	800dd7e <_puts_r+0x22>
 800dd72:	89a3      	ldrh	r3, [r4, #12]
 800dd74:	0598      	lsls	r0, r3, #22
 800dd76:	d402      	bmi.n	800dd7e <_puts_r+0x22>
 800dd78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dd7a:	f000 f9c2 	bl	800e102 <__retarget_lock_acquire_recursive>
 800dd7e:	89a3      	ldrh	r3, [r4, #12]
 800dd80:	0719      	lsls	r1, r3, #28
 800dd82:	d502      	bpl.n	800dd8a <_puts_r+0x2e>
 800dd84:	6923      	ldr	r3, [r4, #16]
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d135      	bne.n	800ddf6 <_puts_r+0x9a>
 800dd8a:	4621      	mov	r1, r4
 800dd8c:	4628      	mov	r0, r5
 800dd8e:	f000 f8e5 	bl	800df5c <__swsetup_r>
 800dd92:	b380      	cbz	r0, 800ddf6 <_puts_r+0x9a>
 800dd94:	f04f 35ff 	mov.w	r5, #4294967295
 800dd98:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dd9a:	07da      	lsls	r2, r3, #31
 800dd9c:	d405      	bmi.n	800ddaa <_puts_r+0x4e>
 800dd9e:	89a3      	ldrh	r3, [r4, #12]
 800dda0:	059b      	lsls	r3, r3, #22
 800dda2:	d402      	bmi.n	800ddaa <_puts_r+0x4e>
 800dda4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dda6:	f000 f9ad 	bl	800e104 <__retarget_lock_release_recursive>
 800ddaa:	4628      	mov	r0, r5
 800ddac:	bd70      	pop	{r4, r5, r6, pc}
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	da04      	bge.n	800ddbc <_puts_r+0x60>
 800ddb2:	69a2      	ldr	r2, [r4, #24]
 800ddb4:	429a      	cmp	r2, r3
 800ddb6:	dc17      	bgt.n	800dde8 <_puts_r+0x8c>
 800ddb8:	290a      	cmp	r1, #10
 800ddba:	d015      	beq.n	800dde8 <_puts_r+0x8c>
 800ddbc:	6823      	ldr	r3, [r4, #0]
 800ddbe:	1c5a      	adds	r2, r3, #1
 800ddc0:	6022      	str	r2, [r4, #0]
 800ddc2:	7019      	strb	r1, [r3, #0]
 800ddc4:	68a3      	ldr	r3, [r4, #8]
 800ddc6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ddca:	3b01      	subs	r3, #1
 800ddcc:	60a3      	str	r3, [r4, #8]
 800ddce:	2900      	cmp	r1, #0
 800ddd0:	d1ed      	bne.n	800ddae <_puts_r+0x52>
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	da11      	bge.n	800ddfa <_puts_r+0x9e>
 800ddd6:	4622      	mov	r2, r4
 800ddd8:	210a      	movs	r1, #10
 800ddda:	4628      	mov	r0, r5
 800dddc:	f000 f87f 	bl	800dede <__swbuf_r>
 800dde0:	3001      	adds	r0, #1
 800dde2:	d0d7      	beq.n	800dd94 <_puts_r+0x38>
 800dde4:	250a      	movs	r5, #10
 800dde6:	e7d7      	b.n	800dd98 <_puts_r+0x3c>
 800dde8:	4622      	mov	r2, r4
 800ddea:	4628      	mov	r0, r5
 800ddec:	f000 f877 	bl	800dede <__swbuf_r>
 800ddf0:	3001      	adds	r0, #1
 800ddf2:	d1e7      	bne.n	800ddc4 <_puts_r+0x68>
 800ddf4:	e7ce      	b.n	800dd94 <_puts_r+0x38>
 800ddf6:	3e01      	subs	r6, #1
 800ddf8:	e7e4      	b.n	800ddc4 <_puts_r+0x68>
 800ddfa:	6823      	ldr	r3, [r4, #0]
 800ddfc:	1c5a      	adds	r2, r3, #1
 800ddfe:	6022      	str	r2, [r4, #0]
 800de00:	220a      	movs	r2, #10
 800de02:	701a      	strb	r2, [r3, #0]
 800de04:	e7ee      	b.n	800dde4 <_puts_r+0x88>
	...

0800de08 <puts>:
 800de08:	4b02      	ldr	r3, [pc, #8]	@ (800de14 <puts+0xc>)
 800de0a:	4601      	mov	r1, r0
 800de0c:	6818      	ldr	r0, [r3, #0]
 800de0e:	f7ff bfa5 	b.w	800dd5c <_puts_r>
 800de12:	bf00      	nop
 800de14:	2000005c 	.word	0x2000005c

0800de18 <siprintf>:
 800de18:	b40e      	push	{r1, r2, r3}
 800de1a:	b500      	push	{lr}
 800de1c:	b09c      	sub	sp, #112	@ 0x70
 800de1e:	ab1d      	add	r3, sp, #116	@ 0x74
 800de20:	9002      	str	r0, [sp, #8]
 800de22:	9006      	str	r0, [sp, #24]
 800de24:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800de28:	4809      	ldr	r0, [pc, #36]	@ (800de50 <siprintf+0x38>)
 800de2a:	9107      	str	r1, [sp, #28]
 800de2c:	9104      	str	r1, [sp, #16]
 800de2e:	4909      	ldr	r1, [pc, #36]	@ (800de54 <siprintf+0x3c>)
 800de30:	f853 2b04 	ldr.w	r2, [r3], #4
 800de34:	9105      	str	r1, [sp, #20]
 800de36:	6800      	ldr	r0, [r0, #0]
 800de38:	9301      	str	r3, [sp, #4]
 800de3a:	a902      	add	r1, sp, #8
 800de3c:	f002 fc76 	bl	801072c <_svfiprintf_r>
 800de40:	9b02      	ldr	r3, [sp, #8]
 800de42:	2200      	movs	r2, #0
 800de44:	701a      	strb	r2, [r3, #0]
 800de46:	b01c      	add	sp, #112	@ 0x70
 800de48:	f85d eb04 	ldr.w	lr, [sp], #4
 800de4c:	b003      	add	sp, #12
 800de4e:	4770      	bx	lr
 800de50:	2000005c 	.word	0x2000005c
 800de54:	ffff0208 	.word	0xffff0208

0800de58 <__sread>:
 800de58:	b510      	push	{r4, lr}
 800de5a:	460c      	mov	r4, r1
 800de5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de60:	f000 f900 	bl	800e064 <_read_r>
 800de64:	2800      	cmp	r0, #0
 800de66:	bfab      	itete	ge
 800de68:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800de6a:	89a3      	ldrhlt	r3, [r4, #12]
 800de6c:	181b      	addge	r3, r3, r0
 800de6e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800de72:	bfac      	ite	ge
 800de74:	6563      	strge	r3, [r4, #84]	@ 0x54
 800de76:	81a3      	strhlt	r3, [r4, #12]
 800de78:	bd10      	pop	{r4, pc}

0800de7a <__swrite>:
 800de7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de7e:	461f      	mov	r7, r3
 800de80:	898b      	ldrh	r3, [r1, #12]
 800de82:	05db      	lsls	r3, r3, #23
 800de84:	4605      	mov	r5, r0
 800de86:	460c      	mov	r4, r1
 800de88:	4616      	mov	r6, r2
 800de8a:	d505      	bpl.n	800de98 <__swrite+0x1e>
 800de8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de90:	2302      	movs	r3, #2
 800de92:	2200      	movs	r2, #0
 800de94:	f000 f8d4 	bl	800e040 <_lseek_r>
 800de98:	89a3      	ldrh	r3, [r4, #12]
 800de9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800de9e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800dea2:	81a3      	strh	r3, [r4, #12]
 800dea4:	4632      	mov	r2, r6
 800dea6:	463b      	mov	r3, r7
 800dea8:	4628      	mov	r0, r5
 800deaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800deae:	f000 b8eb 	b.w	800e088 <_write_r>

0800deb2 <__sseek>:
 800deb2:	b510      	push	{r4, lr}
 800deb4:	460c      	mov	r4, r1
 800deb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800deba:	f000 f8c1 	bl	800e040 <_lseek_r>
 800debe:	1c43      	adds	r3, r0, #1
 800dec0:	89a3      	ldrh	r3, [r4, #12]
 800dec2:	bf15      	itete	ne
 800dec4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800dec6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800deca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800dece:	81a3      	strheq	r3, [r4, #12]
 800ded0:	bf18      	it	ne
 800ded2:	81a3      	strhne	r3, [r4, #12]
 800ded4:	bd10      	pop	{r4, pc}

0800ded6 <__sclose>:
 800ded6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800deda:	f000 b8a1 	b.w	800e020 <_close_r>

0800dede <__swbuf_r>:
 800dede:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dee0:	460e      	mov	r6, r1
 800dee2:	4614      	mov	r4, r2
 800dee4:	4605      	mov	r5, r0
 800dee6:	b118      	cbz	r0, 800def0 <__swbuf_r+0x12>
 800dee8:	6a03      	ldr	r3, [r0, #32]
 800deea:	b90b      	cbnz	r3, 800def0 <__swbuf_r+0x12>
 800deec:	f7ff feee 	bl	800dccc <__sinit>
 800def0:	69a3      	ldr	r3, [r4, #24]
 800def2:	60a3      	str	r3, [r4, #8]
 800def4:	89a3      	ldrh	r3, [r4, #12]
 800def6:	071a      	lsls	r2, r3, #28
 800def8:	d501      	bpl.n	800defe <__swbuf_r+0x20>
 800defa:	6923      	ldr	r3, [r4, #16]
 800defc:	b943      	cbnz	r3, 800df10 <__swbuf_r+0x32>
 800defe:	4621      	mov	r1, r4
 800df00:	4628      	mov	r0, r5
 800df02:	f000 f82b 	bl	800df5c <__swsetup_r>
 800df06:	b118      	cbz	r0, 800df10 <__swbuf_r+0x32>
 800df08:	f04f 37ff 	mov.w	r7, #4294967295
 800df0c:	4638      	mov	r0, r7
 800df0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df10:	6823      	ldr	r3, [r4, #0]
 800df12:	6922      	ldr	r2, [r4, #16]
 800df14:	1a98      	subs	r0, r3, r2
 800df16:	6963      	ldr	r3, [r4, #20]
 800df18:	b2f6      	uxtb	r6, r6
 800df1a:	4283      	cmp	r3, r0
 800df1c:	4637      	mov	r7, r6
 800df1e:	dc05      	bgt.n	800df2c <__swbuf_r+0x4e>
 800df20:	4621      	mov	r1, r4
 800df22:	4628      	mov	r0, r5
 800df24:	f002 fec4 	bl	8010cb0 <_fflush_r>
 800df28:	2800      	cmp	r0, #0
 800df2a:	d1ed      	bne.n	800df08 <__swbuf_r+0x2a>
 800df2c:	68a3      	ldr	r3, [r4, #8]
 800df2e:	3b01      	subs	r3, #1
 800df30:	60a3      	str	r3, [r4, #8]
 800df32:	6823      	ldr	r3, [r4, #0]
 800df34:	1c5a      	adds	r2, r3, #1
 800df36:	6022      	str	r2, [r4, #0]
 800df38:	701e      	strb	r6, [r3, #0]
 800df3a:	6962      	ldr	r2, [r4, #20]
 800df3c:	1c43      	adds	r3, r0, #1
 800df3e:	429a      	cmp	r2, r3
 800df40:	d004      	beq.n	800df4c <__swbuf_r+0x6e>
 800df42:	89a3      	ldrh	r3, [r4, #12]
 800df44:	07db      	lsls	r3, r3, #31
 800df46:	d5e1      	bpl.n	800df0c <__swbuf_r+0x2e>
 800df48:	2e0a      	cmp	r6, #10
 800df4a:	d1df      	bne.n	800df0c <__swbuf_r+0x2e>
 800df4c:	4621      	mov	r1, r4
 800df4e:	4628      	mov	r0, r5
 800df50:	f002 feae 	bl	8010cb0 <_fflush_r>
 800df54:	2800      	cmp	r0, #0
 800df56:	d0d9      	beq.n	800df0c <__swbuf_r+0x2e>
 800df58:	e7d6      	b.n	800df08 <__swbuf_r+0x2a>
	...

0800df5c <__swsetup_r>:
 800df5c:	b538      	push	{r3, r4, r5, lr}
 800df5e:	4b29      	ldr	r3, [pc, #164]	@ (800e004 <__swsetup_r+0xa8>)
 800df60:	4605      	mov	r5, r0
 800df62:	6818      	ldr	r0, [r3, #0]
 800df64:	460c      	mov	r4, r1
 800df66:	b118      	cbz	r0, 800df70 <__swsetup_r+0x14>
 800df68:	6a03      	ldr	r3, [r0, #32]
 800df6a:	b90b      	cbnz	r3, 800df70 <__swsetup_r+0x14>
 800df6c:	f7ff feae 	bl	800dccc <__sinit>
 800df70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df74:	0719      	lsls	r1, r3, #28
 800df76:	d422      	bmi.n	800dfbe <__swsetup_r+0x62>
 800df78:	06da      	lsls	r2, r3, #27
 800df7a:	d407      	bmi.n	800df8c <__swsetup_r+0x30>
 800df7c:	2209      	movs	r2, #9
 800df7e:	602a      	str	r2, [r5, #0]
 800df80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800df84:	81a3      	strh	r3, [r4, #12]
 800df86:	f04f 30ff 	mov.w	r0, #4294967295
 800df8a:	e033      	b.n	800dff4 <__swsetup_r+0x98>
 800df8c:	0758      	lsls	r0, r3, #29
 800df8e:	d512      	bpl.n	800dfb6 <__swsetup_r+0x5a>
 800df90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800df92:	b141      	cbz	r1, 800dfa6 <__swsetup_r+0x4a>
 800df94:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800df98:	4299      	cmp	r1, r3
 800df9a:	d002      	beq.n	800dfa2 <__swsetup_r+0x46>
 800df9c:	4628      	mov	r0, r5
 800df9e:	f000 ff33 	bl	800ee08 <_free_r>
 800dfa2:	2300      	movs	r3, #0
 800dfa4:	6363      	str	r3, [r4, #52]	@ 0x34
 800dfa6:	89a3      	ldrh	r3, [r4, #12]
 800dfa8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800dfac:	81a3      	strh	r3, [r4, #12]
 800dfae:	2300      	movs	r3, #0
 800dfb0:	6063      	str	r3, [r4, #4]
 800dfb2:	6923      	ldr	r3, [r4, #16]
 800dfb4:	6023      	str	r3, [r4, #0]
 800dfb6:	89a3      	ldrh	r3, [r4, #12]
 800dfb8:	f043 0308 	orr.w	r3, r3, #8
 800dfbc:	81a3      	strh	r3, [r4, #12]
 800dfbe:	6923      	ldr	r3, [r4, #16]
 800dfc0:	b94b      	cbnz	r3, 800dfd6 <__swsetup_r+0x7a>
 800dfc2:	89a3      	ldrh	r3, [r4, #12]
 800dfc4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800dfc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dfcc:	d003      	beq.n	800dfd6 <__swsetup_r+0x7a>
 800dfce:	4621      	mov	r1, r4
 800dfd0:	4628      	mov	r0, r5
 800dfd2:	f002 fecd 	bl	8010d70 <__smakebuf_r>
 800dfd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dfda:	f013 0201 	ands.w	r2, r3, #1
 800dfde:	d00a      	beq.n	800dff6 <__swsetup_r+0x9a>
 800dfe0:	2200      	movs	r2, #0
 800dfe2:	60a2      	str	r2, [r4, #8]
 800dfe4:	6962      	ldr	r2, [r4, #20]
 800dfe6:	4252      	negs	r2, r2
 800dfe8:	61a2      	str	r2, [r4, #24]
 800dfea:	6922      	ldr	r2, [r4, #16]
 800dfec:	b942      	cbnz	r2, 800e000 <__swsetup_r+0xa4>
 800dfee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800dff2:	d1c5      	bne.n	800df80 <__swsetup_r+0x24>
 800dff4:	bd38      	pop	{r3, r4, r5, pc}
 800dff6:	0799      	lsls	r1, r3, #30
 800dff8:	bf58      	it	pl
 800dffa:	6962      	ldrpl	r2, [r4, #20]
 800dffc:	60a2      	str	r2, [r4, #8]
 800dffe:	e7f4      	b.n	800dfea <__swsetup_r+0x8e>
 800e000:	2000      	movs	r0, #0
 800e002:	e7f7      	b.n	800dff4 <__swsetup_r+0x98>
 800e004:	2000005c 	.word	0x2000005c

0800e008 <memset>:
 800e008:	4402      	add	r2, r0
 800e00a:	4603      	mov	r3, r0
 800e00c:	4293      	cmp	r3, r2
 800e00e:	d100      	bne.n	800e012 <memset+0xa>
 800e010:	4770      	bx	lr
 800e012:	f803 1b01 	strb.w	r1, [r3], #1
 800e016:	e7f9      	b.n	800e00c <memset+0x4>

0800e018 <_localeconv_r>:
 800e018:	4800      	ldr	r0, [pc, #0]	@ (800e01c <_localeconv_r+0x4>)
 800e01a:	4770      	bx	lr
 800e01c:	2000019c 	.word	0x2000019c

0800e020 <_close_r>:
 800e020:	b538      	push	{r3, r4, r5, lr}
 800e022:	4d06      	ldr	r5, [pc, #24]	@ (800e03c <_close_r+0x1c>)
 800e024:	2300      	movs	r3, #0
 800e026:	4604      	mov	r4, r0
 800e028:	4608      	mov	r0, r1
 800e02a:	602b      	str	r3, [r5, #0]
 800e02c:	f7f6 f9ca 	bl	80043c4 <_close>
 800e030:	1c43      	adds	r3, r0, #1
 800e032:	d102      	bne.n	800e03a <_close_r+0x1a>
 800e034:	682b      	ldr	r3, [r5, #0]
 800e036:	b103      	cbz	r3, 800e03a <_close_r+0x1a>
 800e038:	6023      	str	r3, [r4, #0]
 800e03a:	bd38      	pop	{r3, r4, r5, pc}
 800e03c:	20004198 	.word	0x20004198

0800e040 <_lseek_r>:
 800e040:	b538      	push	{r3, r4, r5, lr}
 800e042:	4d07      	ldr	r5, [pc, #28]	@ (800e060 <_lseek_r+0x20>)
 800e044:	4604      	mov	r4, r0
 800e046:	4608      	mov	r0, r1
 800e048:	4611      	mov	r1, r2
 800e04a:	2200      	movs	r2, #0
 800e04c:	602a      	str	r2, [r5, #0]
 800e04e:	461a      	mov	r2, r3
 800e050:	f7f6 f9df 	bl	8004412 <_lseek>
 800e054:	1c43      	adds	r3, r0, #1
 800e056:	d102      	bne.n	800e05e <_lseek_r+0x1e>
 800e058:	682b      	ldr	r3, [r5, #0]
 800e05a:	b103      	cbz	r3, 800e05e <_lseek_r+0x1e>
 800e05c:	6023      	str	r3, [r4, #0]
 800e05e:	bd38      	pop	{r3, r4, r5, pc}
 800e060:	20004198 	.word	0x20004198

0800e064 <_read_r>:
 800e064:	b538      	push	{r3, r4, r5, lr}
 800e066:	4d07      	ldr	r5, [pc, #28]	@ (800e084 <_read_r+0x20>)
 800e068:	4604      	mov	r4, r0
 800e06a:	4608      	mov	r0, r1
 800e06c:	4611      	mov	r1, r2
 800e06e:	2200      	movs	r2, #0
 800e070:	602a      	str	r2, [r5, #0]
 800e072:	461a      	mov	r2, r3
 800e074:	f7f6 f96d 	bl	8004352 <_read>
 800e078:	1c43      	adds	r3, r0, #1
 800e07a:	d102      	bne.n	800e082 <_read_r+0x1e>
 800e07c:	682b      	ldr	r3, [r5, #0]
 800e07e:	b103      	cbz	r3, 800e082 <_read_r+0x1e>
 800e080:	6023      	str	r3, [r4, #0]
 800e082:	bd38      	pop	{r3, r4, r5, pc}
 800e084:	20004198 	.word	0x20004198

0800e088 <_write_r>:
 800e088:	b538      	push	{r3, r4, r5, lr}
 800e08a:	4d07      	ldr	r5, [pc, #28]	@ (800e0a8 <_write_r+0x20>)
 800e08c:	4604      	mov	r4, r0
 800e08e:	4608      	mov	r0, r1
 800e090:	4611      	mov	r1, r2
 800e092:	2200      	movs	r2, #0
 800e094:	602a      	str	r2, [r5, #0]
 800e096:	461a      	mov	r2, r3
 800e098:	f7f6 f978 	bl	800438c <_write>
 800e09c:	1c43      	adds	r3, r0, #1
 800e09e:	d102      	bne.n	800e0a6 <_write_r+0x1e>
 800e0a0:	682b      	ldr	r3, [r5, #0]
 800e0a2:	b103      	cbz	r3, 800e0a6 <_write_r+0x1e>
 800e0a4:	6023      	str	r3, [r4, #0]
 800e0a6:	bd38      	pop	{r3, r4, r5, pc}
 800e0a8:	20004198 	.word	0x20004198

0800e0ac <__errno>:
 800e0ac:	4b01      	ldr	r3, [pc, #4]	@ (800e0b4 <__errno+0x8>)
 800e0ae:	6818      	ldr	r0, [r3, #0]
 800e0b0:	4770      	bx	lr
 800e0b2:	bf00      	nop
 800e0b4:	2000005c 	.word	0x2000005c

0800e0b8 <__libc_init_array>:
 800e0b8:	b570      	push	{r4, r5, r6, lr}
 800e0ba:	4d0d      	ldr	r5, [pc, #52]	@ (800e0f0 <__libc_init_array+0x38>)
 800e0bc:	4c0d      	ldr	r4, [pc, #52]	@ (800e0f4 <__libc_init_array+0x3c>)
 800e0be:	1b64      	subs	r4, r4, r5
 800e0c0:	10a4      	asrs	r4, r4, #2
 800e0c2:	2600      	movs	r6, #0
 800e0c4:	42a6      	cmp	r6, r4
 800e0c6:	d109      	bne.n	800e0dc <__libc_init_array+0x24>
 800e0c8:	4d0b      	ldr	r5, [pc, #44]	@ (800e0f8 <__libc_init_array+0x40>)
 800e0ca:	4c0c      	ldr	r4, [pc, #48]	@ (800e0fc <__libc_init_array+0x44>)
 800e0cc:	f003 fae0 	bl	8011690 <_init>
 800e0d0:	1b64      	subs	r4, r4, r5
 800e0d2:	10a4      	asrs	r4, r4, #2
 800e0d4:	2600      	movs	r6, #0
 800e0d6:	42a6      	cmp	r6, r4
 800e0d8:	d105      	bne.n	800e0e6 <__libc_init_array+0x2e>
 800e0da:	bd70      	pop	{r4, r5, r6, pc}
 800e0dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800e0e0:	4798      	blx	r3
 800e0e2:	3601      	adds	r6, #1
 800e0e4:	e7ee      	b.n	800e0c4 <__libc_init_array+0xc>
 800e0e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800e0ea:	4798      	blx	r3
 800e0ec:	3601      	adds	r6, #1
 800e0ee:	e7f2      	b.n	800e0d6 <__libc_init_array+0x1e>
 800e0f0:	08011f44 	.word	0x08011f44
 800e0f4:	08011f44 	.word	0x08011f44
 800e0f8:	08011f44 	.word	0x08011f44
 800e0fc:	08011f48 	.word	0x08011f48

0800e100 <__retarget_lock_init_recursive>:
 800e100:	4770      	bx	lr

0800e102 <__retarget_lock_acquire_recursive>:
 800e102:	4770      	bx	lr

0800e104 <__retarget_lock_release_recursive>:
 800e104:	4770      	bx	lr

0800e106 <memcpy>:
 800e106:	440a      	add	r2, r1
 800e108:	4291      	cmp	r1, r2
 800e10a:	f100 33ff 	add.w	r3, r0, #4294967295
 800e10e:	d100      	bne.n	800e112 <memcpy+0xc>
 800e110:	4770      	bx	lr
 800e112:	b510      	push	{r4, lr}
 800e114:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e118:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e11c:	4291      	cmp	r1, r2
 800e11e:	d1f9      	bne.n	800e114 <memcpy+0xe>
 800e120:	bd10      	pop	{r4, pc}
	...

0800e124 <nanf>:
 800e124:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800e12c <nanf+0x8>
 800e128:	4770      	bx	lr
 800e12a:	bf00      	nop
 800e12c:	7fc00000 	.word	0x7fc00000

0800e130 <__assert_func>:
 800e130:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e132:	4614      	mov	r4, r2
 800e134:	461a      	mov	r2, r3
 800e136:	4b09      	ldr	r3, [pc, #36]	@ (800e15c <__assert_func+0x2c>)
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	4605      	mov	r5, r0
 800e13c:	68d8      	ldr	r0, [r3, #12]
 800e13e:	b954      	cbnz	r4, 800e156 <__assert_func+0x26>
 800e140:	4b07      	ldr	r3, [pc, #28]	@ (800e160 <__assert_func+0x30>)
 800e142:	461c      	mov	r4, r3
 800e144:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e148:	9100      	str	r1, [sp, #0]
 800e14a:	462b      	mov	r3, r5
 800e14c:	4905      	ldr	r1, [pc, #20]	@ (800e164 <__assert_func+0x34>)
 800e14e:	f002 fdd7 	bl	8010d00 <fiprintf>
 800e152:	f002 feb1 	bl	8010eb8 <abort>
 800e156:	4b04      	ldr	r3, [pc, #16]	@ (800e168 <__assert_func+0x38>)
 800e158:	e7f4      	b.n	800e144 <__assert_func+0x14>
 800e15a:	bf00      	nop
 800e15c:	2000005c 	.word	0x2000005c
 800e160:	08011b9b 	.word	0x08011b9b
 800e164:	08011b6d 	.word	0x08011b6d
 800e168:	08011b60 	.word	0x08011b60

0800e16c <quorem>:
 800e16c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e170:	6903      	ldr	r3, [r0, #16]
 800e172:	690c      	ldr	r4, [r1, #16]
 800e174:	42a3      	cmp	r3, r4
 800e176:	4607      	mov	r7, r0
 800e178:	db7e      	blt.n	800e278 <quorem+0x10c>
 800e17a:	3c01      	subs	r4, #1
 800e17c:	f101 0814 	add.w	r8, r1, #20
 800e180:	00a3      	lsls	r3, r4, #2
 800e182:	f100 0514 	add.w	r5, r0, #20
 800e186:	9300      	str	r3, [sp, #0]
 800e188:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e18c:	9301      	str	r3, [sp, #4]
 800e18e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e192:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e196:	3301      	adds	r3, #1
 800e198:	429a      	cmp	r2, r3
 800e19a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e19e:	fbb2 f6f3 	udiv	r6, r2, r3
 800e1a2:	d32e      	bcc.n	800e202 <quorem+0x96>
 800e1a4:	f04f 0a00 	mov.w	sl, #0
 800e1a8:	46c4      	mov	ip, r8
 800e1aa:	46ae      	mov	lr, r5
 800e1ac:	46d3      	mov	fp, sl
 800e1ae:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e1b2:	b298      	uxth	r0, r3
 800e1b4:	fb06 a000 	mla	r0, r6, r0, sl
 800e1b8:	0c02      	lsrs	r2, r0, #16
 800e1ba:	0c1b      	lsrs	r3, r3, #16
 800e1bc:	fb06 2303 	mla	r3, r6, r3, r2
 800e1c0:	f8de 2000 	ldr.w	r2, [lr]
 800e1c4:	b280      	uxth	r0, r0
 800e1c6:	b292      	uxth	r2, r2
 800e1c8:	1a12      	subs	r2, r2, r0
 800e1ca:	445a      	add	r2, fp
 800e1cc:	f8de 0000 	ldr.w	r0, [lr]
 800e1d0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e1d4:	b29b      	uxth	r3, r3
 800e1d6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800e1da:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800e1de:	b292      	uxth	r2, r2
 800e1e0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e1e4:	45e1      	cmp	r9, ip
 800e1e6:	f84e 2b04 	str.w	r2, [lr], #4
 800e1ea:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800e1ee:	d2de      	bcs.n	800e1ae <quorem+0x42>
 800e1f0:	9b00      	ldr	r3, [sp, #0]
 800e1f2:	58eb      	ldr	r3, [r5, r3]
 800e1f4:	b92b      	cbnz	r3, 800e202 <quorem+0x96>
 800e1f6:	9b01      	ldr	r3, [sp, #4]
 800e1f8:	3b04      	subs	r3, #4
 800e1fa:	429d      	cmp	r5, r3
 800e1fc:	461a      	mov	r2, r3
 800e1fe:	d32f      	bcc.n	800e260 <quorem+0xf4>
 800e200:	613c      	str	r4, [r7, #16]
 800e202:	4638      	mov	r0, r7
 800e204:	f001 f9c4 	bl	800f590 <__mcmp>
 800e208:	2800      	cmp	r0, #0
 800e20a:	db25      	blt.n	800e258 <quorem+0xec>
 800e20c:	4629      	mov	r1, r5
 800e20e:	2000      	movs	r0, #0
 800e210:	f858 2b04 	ldr.w	r2, [r8], #4
 800e214:	f8d1 c000 	ldr.w	ip, [r1]
 800e218:	fa1f fe82 	uxth.w	lr, r2
 800e21c:	fa1f f38c 	uxth.w	r3, ip
 800e220:	eba3 030e 	sub.w	r3, r3, lr
 800e224:	4403      	add	r3, r0
 800e226:	0c12      	lsrs	r2, r2, #16
 800e228:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800e22c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800e230:	b29b      	uxth	r3, r3
 800e232:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e236:	45c1      	cmp	r9, r8
 800e238:	f841 3b04 	str.w	r3, [r1], #4
 800e23c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e240:	d2e6      	bcs.n	800e210 <quorem+0xa4>
 800e242:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e246:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e24a:	b922      	cbnz	r2, 800e256 <quorem+0xea>
 800e24c:	3b04      	subs	r3, #4
 800e24e:	429d      	cmp	r5, r3
 800e250:	461a      	mov	r2, r3
 800e252:	d30b      	bcc.n	800e26c <quorem+0x100>
 800e254:	613c      	str	r4, [r7, #16]
 800e256:	3601      	adds	r6, #1
 800e258:	4630      	mov	r0, r6
 800e25a:	b003      	add	sp, #12
 800e25c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e260:	6812      	ldr	r2, [r2, #0]
 800e262:	3b04      	subs	r3, #4
 800e264:	2a00      	cmp	r2, #0
 800e266:	d1cb      	bne.n	800e200 <quorem+0x94>
 800e268:	3c01      	subs	r4, #1
 800e26a:	e7c6      	b.n	800e1fa <quorem+0x8e>
 800e26c:	6812      	ldr	r2, [r2, #0]
 800e26e:	3b04      	subs	r3, #4
 800e270:	2a00      	cmp	r2, #0
 800e272:	d1ef      	bne.n	800e254 <quorem+0xe8>
 800e274:	3c01      	subs	r4, #1
 800e276:	e7ea      	b.n	800e24e <quorem+0xe2>
 800e278:	2000      	movs	r0, #0
 800e27a:	e7ee      	b.n	800e25a <quorem+0xee>
 800e27c:	0000      	movs	r0, r0
	...

0800e280 <_dtoa_r>:
 800e280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e284:	69c7      	ldr	r7, [r0, #28]
 800e286:	b099      	sub	sp, #100	@ 0x64
 800e288:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e28c:	ec55 4b10 	vmov	r4, r5, d0
 800e290:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800e292:	9109      	str	r1, [sp, #36]	@ 0x24
 800e294:	4683      	mov	fp, r0
 800e296:	920e      	str	r2, [sp, #56]	@ 0x38
 800e298:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e29a:	b97f      	cbnz	r7, 800e2bc <_dtoa_r+0x3c>
 800e29c:	2010      	movs	r0, #16
 800e29e:	f000 fdfd 	bl	800ee9c <malloc>
 800e2a2:	4602      	mov	r2, r0
 800e2a4:	f8cb 001c 	str.w	r0, [fp, #28]
 800e2a8:	b920      	cbnz	r0, 800e2b4 <_dtoa_r+0x34>
 800e2aa:	4ba7      	ldr	r3, [pc, #668]	@ (800e548 <_dtoa_r+0x2c8>)
 800e2ac:	21ef      	movs	r1, #239	@ 0xef
 800e2ae:	48a7      	ldr	r0, [pc, #668]	@ (800e54c <_dtoa_r+0x2cc>)
 800e2b0:	f7ff ff3e 	bl	800e130 <__assert_func>
 800e2b4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800e2b8:	6007      	str	r7, [r0, #0]
 800e2ba:	60c7      	str	r7, [r0, #12]
 800e2bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e2c0:	6819      	ldr	r1, [r3, #0]
 800e2c2:	b159      	cbz	r1, 800e2dc <_dtoa_r+0x5c>
 800e2c4:	685a      	ldr	r2, [r3, #4]
 800e2c6:	604a      	str	r2, [r1, #4]
 800e2c8:	2301      	movs	r3, #1
 800e2ca:	4093      	lsls	r3, r2
 800e2cc:	608b      	str	r3, [r1, #8]
 800e2ce:	4658      	mov	r0, fp
 800e2d0:	f000 feda 	bl	800f088 <_Bfree>
 800e2d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e2d8:	2200      	movs	r2, #0
 800e2da:	601a      	str	r2, [r3, #0]
 800e2dc:	1e2b      	subs	r3, r5, #0
 800e2de:	bfb9      	ittee	lt
 800e2e0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e2e4:	9303      	strlt	r3, [sp, #12]
 800e2e6:	2300      	movge	r3, #0
 800e2e8:	6033      	strge	r3, [r6, #0]
 800e2ea:	9f03      	ldr	r7, [sp, #12]
 800e2ec:	4b98      	ldr	r3, [pc, #608]	@ (800e550 <_dtoa_r+0x2d0>)
 800e2ee:	bfbc      	itt	lt
 800e2f0:	2201      	movlt	r2, #1
 800e2f2:	6032      	strlt	r2, [r6, #0]
 800e2f4:	43bb      	bics	r3, r7
 800e2f6:	d112      	bne.n	800e31e <_dtoa_r+0x9e>
 800e2f8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e2fa:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e2fe:	6013      	str	r3, [r2, #0]
 800e300:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e304:	4323      	orrs	r3, r4
 800e306:	f000 854d 	beq.w	800eda4 <_dtoa_r+0xb24>
 800e30a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e30c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800e564 <_dtoa_r+0x2e4>
 800e310:	2b00      	cmp	r3, #0
 800e312:	f000 854f 	beq.w	800edb4 <_dtoa_r+0xb34>
 800e316:	f10a 0303 	add.w	r3, sl, #3
 800e31a:	f000 bd49 	b.w	800edb0 <_dtoa_r+0xb30>
 800e31e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e322:	2200      	movs	r2, #0
 800e324:	ec51 0b17 	vmov	r0, r1, d7
 800e328:	2300      	movs	r3, #0
 800e32a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800e32e:	f7f2 fbcb 	bl	8000ac8 <__aeabi_dcmpeq>
 800e332:	4680      	mov	r8, r0
 800e334:	b158      	cbz	r0, 800e34e <_dtoa_r+0xce>
 800e336:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e338:	2301      	movs	r3, #1
 800e33a:	6013      	str	r3, [r2, #0]
 800e33c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e33e:	b113      	cbz	r3, 800e346 <_dtoa_r+0xc6>
 800e340:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e342:	4b84      	ldr	r3, [pc, #528]	@ (800e554 <_dtoa_r+0x2d4>)
 800e344:	6013      	str	r3, [r2, #0]
 800e346:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800e568 <_dtoa_r+0x2e8>
 800e34a:	f000 bd33 	b.w	800edb4 <_dtoa_r+0xb34>
 800e34e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e352:	aa16      	add	r2, sp, #88	@ 0x58
 800e354:	a917      	add	r1, sp, #92	@ 0x5c
 800e356:	4658      	mov	r0, fp
 800e358:	f001 fa3a 	bl	800f7d0 <__d2b>
 800e35c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800e360:	4681      	mov	r9, r0
 800e362:	2e00      	cmp	r6, #0
 800e364:	d077      	beq.n	800e456 <_dtoa_r+0x1d6>
 800e366:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e368:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800e36c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e370:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e374:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e378:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e37c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e380:	4619      	mov	r1, r3
 800e382:	2200      	movs	r2, #0
 800e384:	4b74      	ldr	r3, [pc, #464]	@ (800e558 <_dtoa_r+0x2d8>)
 800e386:	f7f1 ff7f 	bl	8000288 <__aeabi_dsub>
 800e38a:	a369      	add	r3, pc, #420	@ (adr r3, 800e530 <_dtoa_r+0x2b0>)
 800e38c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e390:	f7f2 f932 	bl	80005f8 <__aeabi_dmul>
 800e394:	a368      	add	r3, pc, #416	@ (adr r3, 800e538 <_dtoa_r+0x2b8>)
 800e396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e39a:	f7f1 ff77 	bl	800028c <__adddf3>
 800e39e:	4604      	mov	r4, r0
 800e3a0:	4630      	mov	r0, r6
 800e3a2:	460d      	mov	r5, r1
 800e3a4:	f7f2 f8be 	bl	8000524 <__aeabi_i2d>
 800e3a8:	a365      	add	r3, pc, #404	@ (adr r3, 800e540 <_dtoa_r+0x2c0>)
 800e3aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3ae:	f7f2 f923 	bl	80005f8 <__aeabi_dmul>
 800e3b2:	4602      	mov	r2, r0
 800e3b4:	460b      	mov	r3, r1
 800e3b6:	4620      	mov	r0, r4
 800e3b8:	4629      	mov	r1, r5
 800e3ba:	f7f1 ff67 	bl	800028c <__adddf3>
 800e3be:	4604      	mov	r4, r0
 800e3c0:	460d      	mov	r5, r1
 800e3c2:	f7f2 fbc9 	bl	8000b58 <__aeabi_d2iz>
 800e3c6:	2200      	movs	r2, #0
 800e3c8:	4607      	mov	r7, r0
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	4620      	mov	r0, r4
 800e3ce:	4629      	mov	r1, r5
 800e3d0:	f7f2 fb84 	bl	8000adc <__aeabi_dcmplt>
 800e3d4:	b140      	cbz	r0, 800e3e8 <_dtoa_r+0x168>
 800e3d6:	4638      	mov	r0, r7
 800e3d8:	f7f2 f8a4 	bl	8000524 <__aeabi_i2d>
 800e3dc:	4622      	mov	r2, r4
 800e3de:	462b      	mov	r3, r5
 800e3e0:	f7f2 fb72 	bl	8000ac8 <__aeabi_dcmpeq>
 800e3e4:	b900      	cbnz	r0, 800e3e8 <_dtoa_r+0x168>
 800e3e6:	3f01      	subs	r7, #1
 800e3e8:	2f16      	cmp	r7, #22
 800e3ea:	d851      	bhi.n	800e490 <_dtoa_r+0x210>
 800e3ec:	4b5b      	ldr	r3, [pc, #364]	@ (800e55c <_dtoa_r+0x2dc>)
 800e3ee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e3f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e3fa:	f7f2 fb6f 	bl	8000adc <__aeabi_dcmplt>
 800e3fe:	2800      	cmp	r0, #0
 800e400:	d048      	beq.n	800e494 <_dtoa_r+0x214>
 800e402:	3f01      	subs	r7, #1
 800e404:	2300      	movs	r3, #0
 800e406:	9312      	str	r3, [sp, #72]	@ 0x48
 800e408:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e40a:	1b9b      	subs	r3, r3, r6
 800e40c:	1e5a      	subs	r2, r3, #1
 800e40e:	bf44      	itt	mi
 800e410:	f1c3 0801 	rsbmi	r8, r3, #1
 800e414:	2300      	movmi	r3, #0
 800e416:	9208      	str	r2, [sp, #32]
 800e418:	bf54      	ite	pl
 800e41a:	f04f 0800 	movpl.w	r8, #0
 800e41e:	9308      	strmi	r3, [sp, #32]
 800e420:	2f00      	cmp	r7, #0
 800e422:	db39      	blt.n	800e498 <_dtoa_r+0x218>
 800e424:	9b08      	ldr	r3, [sp, #32]
 800e426:	970f      	str	r7, [sp, #60]	@ 0x3c
 800e428:	443b      	add	r3, r7
 800e42a:	9308      	str	r3, [sp, #32]
 800e42c:	2300      	movs	r3, #0
 800e42e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e430:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e432:	2b09      	cmp	r3, #9
 800e434:	d864      	bhi.n	800e500 <_dtoa_r+0x280>
 800e436:	2b05      	cmp	r3, #5
 800e438:	bfc4      	itt	gt
 800e43a:	3b04      	subgt	r3, #4
 800e43c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800e43e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e440:	f1a3 0302 	sub.w	r3, r3, #2
 800e444:	bfcc      	ite	gt
 800e446:	2400      	movgt	r4, #0
 800e448:	2401      	movle	r4, #1
 800e44a:	2b03      	cmp	r3, #3
 800e44c:	d863      	bhi.n	800e516 <_dtoa_r+0x296>
 800e44e:	e8df f003 	tbb	[pc, r3]
 800e452:	372a      	.short	0x372a
 800e454:	5535      	.short	0x5535
 800e456:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800e45a:	441e      	add	r6, r3
 800e45c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e460:	2b20      	cmp	r3, #32
 800e462:	bfc1      	itttt	gt
 800e464:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e468:	409f      	lslgt	r7, r3
 800e46a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e46e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e472:	bfd6      	itet	le
 800e474:	f1c3 0320 	rsble	r3, r3, #32
 800e478:	ea47 0003 	orrgt.w	r0, r7, r3
 800e47c:	fa04 f003 	lslle.w	r0, r4, r3
 800e480:	f7f2 f840 	bl	8000504 <__aeabi_ui2d>
 800e484:	2201      	movs	r2, #1
 800e486:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e48a:	3e01      	subs	r6, #1
 800e48c:	9214      	str	r2, [sp, #80]	@ 0x50
 800e48e:	e777      	b.n	800e380 <_dtoa_r+0x100>
 800e490:	2301      	movs	r3, #1
 800e492:	e7b8      	b.n	800e406 <_dtoa_r+0x186>
 800e494:	9012      	str	r0, [sp, #72]	@ 0x48
 800e496:	e7b7      	b.n	800e408 <_dtoa_r+0x188>
 800e498:	427b      	negs	r3, r7
 800e49a:	930a      	str	r3, [sp, #40]	@ 0x28
 800e49c:	2300      	movs	r3, #0
 800e49e:	eba8 0807 	sub.w	r8, r8, r7
 800e4a2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e4a4:	e7c4      	b.n	800e430 <_dtoa_r+0x1b0>
 800e4a6:	2300      	movs	r3, #0
 800e4a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e4aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	dc35      	bgt.n	800e51c <_dtoa_r+0x29c>
 800e4b0:	2301      	movs	r3, #1
 800e4b2:	9300      	str	r3, [sp, #0]
 800e4b4:	9307      	str	r3, [sp, #28]
 800e4b6:	461a      	mov	r2, r3
 800e4b8:	920e      	str	r2, [sp, #56]	@ 0x38
 800e4ba:	e00b      	b.n	800e4d4 <_dtoa_r+0x254>
 800e4bc:	2301      	movs	r3, #1
 800e4be:	e7f3      	b.n	800e4a8 <_dtoa_r+0x228>
 800e4c0:	2300      	movs	r3, #0
 800e4c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e4c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e4c6:	18fb      	adds	r3, r7, r3
 800e4c8:	9300      	str	r3, [sp, #0]
 800e4ca:	3301      	adds	r3, #1
 800e4cc:	2b01      	cmp	r3, #1
 800e4ce:	9307      	str	r3, [sp, #28]
 800e4d0:	bfb8      	it	lt
 800e4d2:	2301      	movlt	r3, #1
 800e4d4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800e4d8:	2100      	movs	r1, #0
 800e4da:	2204      	movs	r2, #4
 800e4dc:	f102 0514 	add.w	r5, r2, #20
 800e4e0:	429d      	cmp	r5, r3
 800e4e2:	d91f      	bls.n	800e524 <_dtoa_r+0x2a4>
 800e4e4:	6041      	str	r1, [r0, #4]
 800e4e6:	4658      	mov	r0, fp
 800e4e8:	f000 fd8e 	bl	800f008 <_Balloc>
 800e4ec:	4682      	mov	sl, r0
 800e4ee:	2800      	cmp	r0, #0
 800e4f0:	d13c      	bne.n	800e56c <_dtoa_r+0x2ec>
 800e4f2:	4b1b      	ldr	r3, [pc, #108]	@ (800e560 <_dtoa_r+0x2e0>)
 800e4f4:	4602      	mov	r2, r0
 800e4f6:	f240 11af 	movw	r1, #431	@ 0x1af
 800e4fa:	e6d8      	b.n	800e2ae <_dtoa_r+0x2e>
 800e4fc:	2301      	movs	r3, #1
 800e4fe:	e7e0      	b.n	800e4c2 <_dtoa_r+0x242>
 800e500:	2401      	movs	r4, #1
 800e502:	2300      	movs	r3, #0
 800e504:	9309      	str	r3, [sp, #36]	@ 0x24
 800e506:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e508:	f04f 33ff 	mov.w	r3, #4294967295
 800e50c:	9300      	str	r3, [sp, #0]
 800e50e:	9307      	str	r3, [sp, #28]
 800e510:	2200      	movs	r2, #0
 800e512:	2312      	movs	r3, #18
 800e514:	e7d0      	b.n	800e4b8 <_dtoa_r+0x238>
 800e516:	2301      	movs	r3, #1
 800e518:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e51a:	e7f5      	b.n	800e508 <_dtoa_r+0x288>
 800e51c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e51e:	9300      	str	r3, [sp, #0]
 800e520:	9307      	str	r3, [sp, #28]
 800e522:	e7d7      	b.n	800e4d4 <_dtoa_r+0x254>
 800e524:	3101      	adds	r1, #1
 800e526:	0052      	lsls	r2, r2, #1
 800e528:	e7d8      	b.n	800e4dc <_dtoa_r+0x25c>
 800e52a:	bf00      	nop
 800e52c:	f3af 8000 	nop.w
 800e530:	636f4361 	.word	0x636f4361
 800e534:	3fd287a7 	.word	0x3fd287a7
 800e538:	8b60c8b3 	.word	0x8b60c8b3
 800e53c:	3fc68a28 	.word	0x3fc68a28
 800e540:	509f79fb 	.word	0x509f79fb
 800e544:	3fd34413 	.word	0x3fd34413
 800e548:	08011ab8 	.word	0x08011ab8
 800e54c:	08011ba9 	.word	0x08011ba9
 800e550:	7ff00000 	.word	0x7ff00000
 800e554:	08011b38 	.word	0x08011b38
 800e558:	3ff80000 	.word	0x3ff80000
 800e55c:	08011ca0 	.word	0x08011ca0
 800e560:	08011c01 	.word	0x08011c01
 800e564:	08011ba5 	.word	0x08011ba5
 800e568:	08011b37 	.word	0x08011b37
 800e56c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e570:	6018      	str	r0, [r3, #0]
 800e572:	9b07      	ldr	r3, [sp, #28]
 800e574:	2b0e      	cmp	r3, #14
 800e576:	f200 80a4 	bhi.w	800e6c2 <_dtoa_r+0x442>
 800e57a:	2c00      	cmp	r4, #0
 800e57c:	f000 80a1 	beq.w	800e6c2 <_dtoa_r+0x442>
 800e580:	2f00      	cmp	r7, #0
 800e582:	dd33      	ble.n	800e5ec <_dtoa_r+0x36c>
 800e584:	4bad      	ldr	r3, [pc, #692]	@ (800e83c <_dtoa_r+0x5bc>)
 800e586:	f007 020f 	and.w	r2, r7, #15
 800e58a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e58e:	ed93 7b00 	vldr	d7, [r3]
 800e592:	05f8      	lsls	r0, r7, #23
 800e594:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e598:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e59c:	d516      	bpl.n	800e5cc <_dtoa_r+0x34c>
 800e59e:	4ba8      	ldr	r3, [pc, #672]	@ (800e840 <_dtoa_r+0x5c0>)
 800e5a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e5a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e5a8:	f7f2 f950 	bl	800084c <__aeabi_ddiv>
 800e5ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e5b0:	f004 040f 	and.w	r4, r4, #15
 800e5b4:	2603      	movs	r6, #3
 800e5b6:	4da2      	ldr	r5, [pc, #648]	@ (800e840 <_dtoa_r+0x5c0>)
 800e5b8:	b954      	cbnz	r4, 800e5d0 <_dtoa_r+0x350>
 800e5ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e5be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e5c2:	f7f2 f943 	bl	800084c <__aeabi_ddiv>
 800e5c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e5ca:	e028      	b.n	800e61e <_dtoa_r+0x39e>
 800e5cc:	2602      	movs	r6, #2
 800e5ce:	e7f2      	b.n	800e5b6 <_dtoa_r+0x336>
 800e5d0:	07e1      	lsls	r1, r4, #31
 800e5d2:	d508      	bpl.n	800e5e6 <_dtoa_r+0x366>
 800e5d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e5d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e5dc:	f7f2 f80c 	bl	80005f8 <__aeabi_dmul>
 800e5e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e5e4:	3601      	adds	r6, #1
 800e5e6:	1064      	asrs	r4, r4, #1
 800e5e8:	3508      	adds	r5, #8
 800e5ea:	e7e5      	b.n	800e5b8 <_dtoa_r+0x338>
 800e5ec:	f000 80d2 	beq.w	800e794 <_dtoa_r+0x514>
 800e5f0:	427c      	negs	r4, r7
 800e5f2:	4b92      	ldr	r3, [pc, #584]	@ (800e83c <_dtoa_r+0x5bc>)
 800e5f4:	4d92      	ldr	r5, [pc, #584]	@ (800e840 <_dtoa_r+0x5c0>)
 800e5f6:	f004 020f 	and.w	r2, r4, #15
 800e5fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e5fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e602:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e606:	f7f1 fff7 	bl	80005f8 <__aeabi_dmul>
 800e60a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e60e:	1124      	asrs	r4, r4, #4
 800e610:	2300      	movs	r3, #0
 800e612:	2602      	movs	r6, #2
 800e614:	2c00      	cmp	r4, #0
 800e616:	f040 80b2 	bne.w	800e77e <_dtoa_r+0x4fe>
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d1d3      	bne.n	800e5c6 <_dtoa_r+0x346>
 800e61e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e620:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e624:	2b00      	cmp	r3, #0
 800e626:	f000 80b7 	beq.w	800e798 <_dtoa_r+0x518>
 800e62a:	4b86      	ldr	r3, [pc, #536]	@ (800e844 <_dtoa_r+0x5c4>)
 800e62c:	2200      	movs	r2, #0
 800e62e:	4620      	mov	r0, r4
 800e630:	4629      	mov	r1, r5
 800e632:	f7f2 fa53 	bl	8000adc <__aeabi_dcmplt>
 800e636:	2800      	cmp	r0, #0
 800e638:	f000 80ae 	beq.w	800e798 <_dtoa_r+0x518>
 800e63c:	9b07      	ldr	r3, [sp, #28]
 800e63e:	2b00      	cmp	r3, #0
 800e640:	f000 80aa 	beq.w	800e798 <_dtoa_r+0x518>
 800e644:	9b00      	ldr	r3, [sp, #0]
 800e646:	2b00      	cmp	r3, #0
 800e648:	dd37      	ble.n	800e6ba <_dtoa_r+0x43a>
 800e64a:	1e7b      	subs	r3, r7, #1
 800e64c:	9304      	str	r3, [sp, #16]
 800e64e:	4620      	mov	r0, r4
 800e650:	4b7d      	ldr	r3, [pc, #500]	@ (800e848 <_dtoa_r+0x5c8>)
 800e652:	2200      	movs	r2, #0
 800e654:	4629      	mov	r1, r5
 800e656:	f7f1 ffcf 	bl	80005f8 <__aeabi_dmul>
 800e65a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e65e:	9c00      	ldr	r4, [sp, #0]
 800e660:	3601      	adds	r6, #1
 800e662:	4630      	mov	r0, r6
 800e664:	f7f1 ff5e 	bl	8000524 <__aeabi_i2d>
 800e668:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e66c:	f7f1 ffc4 	bl	80005f8 <__aeabi_dmul>
 800e670:	4b76      	ldr	r3, [pc, #472]	@ (800e84c <_dtoa_r+0x5cc>)
 800e672:	2200      	movs	r2, #0
 800e674:	f7f1 fe0a 	bl	800028c <__adddf3>
 800e678:	4605      	mov	r5, r0
 800e67a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e67e:	2c00      	cmp	r4, #0
 800e680:	f040 808d 	bne.w	800e79e <_dtoa_r+0x51e>
 800e684:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e688:	4b71      	ldr	r3, [pc, #452]	@ (800e850 <_dtoa_r+0x5d0>)
 800e68a:	2200      	movs	r2, #0
 800e68c:	f7f1 fdfc 	bl	8000288 <__aeabi_dsub>
 800e690:	4602      	mov	r2, r0
 800e692:	460b      	mov	r3, r1
 800e694:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e698:	462a      	mov	r2, r5
 800e69a:	4633      	mov	r3, r6
 800e69c:	f7f2 fa3c 	bl	8000b18 <__aeabi_dcmpgt>
 800e6a0:	2800      	cmp	r0, #0
 800e6a2:	f040 828b 	bne.w	800ebbc <_dtoa_r+0x93c>
 800e6a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e6aa:	462a      	mov	r2, r5
 800e6ac:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e6b0:	f7f2 fa14 	bl	8000adc <__aeabi_dcmplt>
 800e6b4:	2800      	cmp	r0, #0
 800e6b6:	f040 8128 	bne.w	800e90a <_dtoa_r+0x68a>
 800e6ba:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800e6be:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800e6c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	f2c0 815a 	blt.w	800e97e <_dtoa_r+0x6fe>
 800e6ca:	2f0e      	cmp	r7, #14
 800e6cc:	f300 8157 	bgt.w	800e97e <_dtoa_r+0x6fe>
 800e6d0:	4b5a      	ldr	r3, [pc, #360]	@ (800e83c <_dtoa_r+0x5bc>)
 800e6d2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e6d6:	ed93 7b00 	vldr	d7, [r3]
 800e6da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	ed8d 7b00 	vstr	d7, [sp]
 800e6e2:	da03      	bge.n	800e6ec <_dtoa_r+0x46c>
 800e6e4:	9b07      	ldr	r3, [sp, #28]
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	f340 8101 	ble.w	800e8ee <_dtoa_r+0x66e>
 800e6ec:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e6f0:	4656      	mov	r6, sl
 800e6f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e6f6:	4620      	mov	r0, r4
 800e6f8:	4629      	mov	r1, r5
 800e6fa:	f7f2 f8a7 	bl	800084c <__aeabi_ddiv>
 800e6fe:	f7f2 fa2b 	bl	8000b58 <__aeabi_d2iz>
 800e702:	4680      	mov	r8, r0
 800e704:	f7f1 ff0e 	bl	8000524 <__aeabi_i2d>
 800e708:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e70c:	f7f1 ff74 	bl	80005f8 <__aeabi_dmul>
 800e710:	4602      	mov	r2, r0
 800e712:	460b      	mov	r3, r1
 800e714:	4620      	mov	r0, r4
 800e716:	4629      	mov	r1, r5
 800e718:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e71c:	f7f1 fdb4 	bl	8000288 <__aeabi_dsub>
 800e720:	f806 4b01 	strb.w	r4, [r6], #1
 800e724:	9d07      	ldr	r5, [sp, #28]
 800e726:	eba6 040a 	sub.w	r4, r6, sl
 800e72a:	42a5      	cmp	r5, r4
 800e72c:	4602      	mov	r2, r0
 800e72e:	460b      	mov	r3, r1
 800e730:	f040 8117 	bne.w	800e962 <_dtoa_r+0x6e2>
 800e734:	f7f1 fdaa 	bl	800028c <__adddf3>
 800e738:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e73c:	4604      	mov	r4, r0
 800e73e:	460d      	mov	r5, r1
 800e740:	f7f2 f9ea 	bl	8000b18 <__aeabi_dcmpgt>
 800e744:	2800      	cmp	r0, #0
 800e746:	f040 80f9 	bne.w	800e93c <_dtoa_r+0x6bc>
 800e74a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e74e:	4620      	mov	r0, r4
 800e750:	4629      	mov	r1, r5
 800e752:	f7f2 f9b9 	bl	8000ac8 <__aeabi_dcmpeq>
 800e756:	b118      	cbz	r0, 800e760 <_dtoa_r+0x4e0>
 800e758:	f018 0f01 	tst.w	r8, #1
 800e75c:	f040 80ee 	bne.w	800e93c <_dtoa_r+0x6bc>
 800e760:	4649      	mov	r1, r9
 800e762:	4658      	mov	r0, fp
 800e764:	f000 fc90 	bl	800f088 <_Bfree>
 800e768:	2300      	movs	r3, #0
 800e76a:	7033      	strb	r3, [r6, #0]
 800e76c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e76e:	3701      	adds	r7, #1
 800e770:	601f      	str	r7, [r3, #0]
 800e772:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e774:	2b00      	cmp	r3, #0
 800e776:	f000 831d 	beq.w	800edb4 <_dtoa_r+0xb34>
 800e77a:	601e      	str	r6, [r3, #0]
 800e77c:	e31a      	b.n	800edb4 <_dtoa_r+0xb34>
 800e77e:	07e2      	lsls	r2, r4, #31
 800e780:	d505      	bpl.n	800e78e <_dtoa_r+0x50e>
 800e782:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e786:	f7f1 ff37 	bl	80005f8 <__aeabi_dmul>
 800e78a:	3601      	adds	r6, #1
 800e78c:	2301      	movs	r3, #1
 800e78e:	1064      	asrs	r4, r4, #1
 800e790:	3508      	adds	r5, #8
 800e792:	e73f      	b.n	800e614 <_dtoa_r+0x394>
 800e794:	2602      	movs	r6, #2
 800e796:	e742      	b.n	800e61e <_dtoa_r+0x39e>
 800e798:	9c07      	ldr	r4, [sp, #28]
 800e79a:	9704      	str	r7, [sp, #16]
 800e79c:	e761      	b.n	800e662 <_dtoa_r+0x3e2>
 800e79e:	4b27      	ldr	r3, [pc, #156]	@ (800e83c <_dtoa_r+0x5bc>)
 800e7a0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e7a2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e7a6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e7aa:	4454      	add	r4, sl
 800e7ac:	2900      	cmp	r1, #0
 800e7ae:	d053      	beq.n	800e858 <_dtoa_r+0x5d8>
 800e7b0:	4928      	ldr	r1, [pc, #160]	@ (800e854 <_dtoa_r+0x5d4>)
 800e7b2:	2000      	movs	r0, #0
 800e7b4:	f7f2 f84a 	bl	800084c <__aeabi_ddiv>
 800e7b8:	4633      	mov	r3, r6
 800e7ba:	462a      	mov	r2, r5
 800e7bc:	f7f1 fd64 	bl	8000288 <__aeabi_dsub>
 800e7c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e7c4:	4656      	mov	r6, sl
 800e7c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e7ca:	f7f2 f9c5 	bl	8000b58 <__aeabi_d2iz>
 800e7ce:	4605      	mov	r5, r0
 800e7d0:	f7f1 fea8 	bl	8000524 <__aeabi_i2d>
 800e7d4:	4602      	mov	r2, r0
 800e7d6:	460b      	mov	r3, r1
 800e7d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e7dc:	f7f1 fd54 	bl	8000288 <__aeabi_dsub>
 800e7e0:	3530      	adds	r5, #48	@ 0x30
 800e7e2:	4602      	mov	r2, r0
 800e7e4:	460b      	mov	r3, r1
 800e7e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e7ea:	f806 5b01 	strb.w	r5, [r6], #1
 800e7ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e7f2:	f7f2 f973 	bl	8000adc <__aeabi_dcmplt>
 800e7f6:	2800      	cmp	r0, #0
 800e7f8:	d171      	bne.n	800e8de <_dtoa_r+0x65e>
 800e7fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e7fe:	4911      	ldr	r1, [pc, #68]	@ (800e844 <_dtoa_r+0x5c4>)
 800e800:	2000      	movs	r0, #0
 800e802:	f7f1 fd41 	bl	8000288 <__aeabi_dsub>
 800e806:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e80a:	f7f2 f967 	bl	8000adc <__aeabi_dcmplt>
 800e80e:	2800      	cmp	r0, #0
 800e810:	f040 8095 	bne.w	800e93e <_dtoa_r+0x6be>
 800e814:	42a6      	cmp	r6, r4
 800e816:	f43f af50 	beq.w	800e6ba <_dtoa_r+0x43a>
 800e81a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e81e:	4b0a      	ldr	r3, [pc, #40]	@ (800e848 <_dtoa_r+0x5c8>)
 800e820:	2200      	movs	r2, #0
 800e822:	f7f1 fee9 	bl	80005f8 <__aeabi_dmul>
 800e826:	4b08      	ldr	r3, [pc, #32]	@ (800e848 <_dtoa_r+0x5c8>)
 800e828:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e82c:	2200      	movs	r2, #0
 800e82e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e832:	f7f1 fee1 	bl	80005f8 <__aeabi_dmul>
 800e836:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e83a:	e7c4      	b.n	800e7c6 <_dtoa_r+0x546>
 800e83c:	08011ca0 	.word	0x08011ca0
 800e840:	08011c78 	.word	0x08011c78
 800e844:	3ff00000 	.word	0x3ff00000
 800e848:	40240000 	.word	0x40240000
 800e84c:	401c0000 	.word	0x401c0000
 800e850:	40140000 	.word	0x40140000
 800e854:	3fe00000 	.word	0x3fe00000
 800e858:	4631      	mov	r1, r6
 800e85a:	4628      	mov	r0, r5
 800e85c:	f7f1 fecc 	bl	80005f8 <__aeabi_dmul>
 800e860:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e864:	9415      	str	r4, [sp, #84]	@ 0x54
 800e866:	4656      	mov	r6, sl
 800e868:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e86c:	f7f2 f974 	bl	8000b58 <__aeabi_d2iz>
 800e870:	4605      	mov	r5, r0
 800e872:	f7f1 fe57 	bl	8000524 <__aeabi_i2d>
 800e876:	4602      	mov	r2, r0
 800e878:	460b      	mov	r3, r1
 800e87a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e87e:	f7f1 fd03 	bl	8000288 <__aeabi_dsub>
 800e882:	3530      	adds	r5, #48	@ 0x30
 800e884:	f806 5b01 	strb.w	r5, [r6], #1
 800e888:	4602      	mov	r2, r0
 800e88a:	460b      	mov	r3, r1
 800e88c:	42a6      	cmp	r6, r4
 800e88e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e892:	f04f 0200 	mov.w	r2, #0
 800e896:	d124      	bne.n	800e8e2 <_dtoa_r+0x662>
 800e898:	4bac      	ldr	r3, [pc, #688]	@ (800eb4c <_dtoa_r+0x8cc>)
 800e89a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e89e:	f7f1 fcf5 	bl	800028c <__adddf3>
 800e8a2:	4602      	mov	r2, r0
 800e8a4:	460b      	mov	r3, r1
 800e8a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e8aa:	f7f2 f935 	bl	8000b18 <__aeabi_dcmpgt>
 800e8ae:	2800      	cmp	r0, #0
 800e8b0:	d145      	bne.n	800e93e <_dtoa_r+0x6be>
 800e8b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e8b6:	49a5      	ldr	r1, [pc, #660]	@ (800eb4c <_dtoa_r+0x8cc>)
 800e8b8:	2000      	movs	r0, #0
 800e8ba:	f7f1 fce5 	bl	8000288 <__aeabi_dsub>
 800e8be:	4602      	mov	r2, r0
 800e8c0:	460b      	mov	r3, r1
 800e8c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e8c6:	f7f2 f909 	bl	8000adc <__aeabi_dcmplt>
 800e8ca:	2800      	cmp	r0, #0
 800e8cc:	f43f aef5 	beq.w	800e6ba <_dtoa_r+0x43a>
 800e8d0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800e8d2:	1e73      	subs	r3, r6, #1
 800e8d4:	9315      	str	r3, [sp, #84]	@ 0x54
 800e8d6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e8da:	2b30      	cmp	r3, #48	@ 0x30
 800e8dc:	d0f8      	beq.n	800e8d0 <_dtoa_r+0x650>
 800e8de:	9f04      	ldr	r7, [sp, #16]
 800e8e0:	e73e      	b.n	800e760 <_dtoa_r+0x4e0>
 800e8e2:	4b9b      	ldr	r3, [pc, #620]	@ (800eb50 <_dtoa_r+0x8d0>)
 800e8e4:	f7f1 fe88 	bl	80005f8 <__aeabi_dmul>
 800e8e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e8ec:	e7bc      	b.n	800e868 <_dtoa_r+0x5e8>
 800e8ee:	d10c      	bne.n	800e90a <_dtoa_r+0x68a>
 800e8f0:	4b98      	ldr	r3, [pc, #608]	@ (800eb54 <_dtoa_r+0x8d4>)
 800e8f2:	2200      	movs	r2, #0
 800e8f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e8f8:	f7f1 fe7e 	bl	80005f8 <__aeabi_dmul>
 800e8fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e900:	f7f2 f900 	bl	8000b04 <__aeabi_dcmpge>
 800e904:	2800      	cmp	r0, #0
 800e906:	f000 8157 	beq.w	800ebb8 <_dtoa_r+0x938>
 800e90a:	2400      	movs	r4, #0
 800e90c:	4625      	mov	r5, r4
 800e90e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e910:	43db      	mvns	r3, r3
 800e912:	9304      	str	r3, [sp, #16]
 800e914:	4656      	mov	r6, sl
 800e916:	2700      	movs	r7, #0
 800e918:	4621      	mov	r1, r4
 800e91a:	4658      	mov	r0, fp
 800e91c:	f000 fbb4 	bl	800f088 <_Bfree>
 800e920:	2d00      	cmp	r5, #0
 800e922:	d0dc      	beq.n	800e8de <_dtoa_r+0x65e>
 800e924:	b12f      	cbz	r7, 800e932 <_dtoa_r+0x6b2>
 800e926:	42af      	cmp	r7, r5
 800e928:	d003      	beq.n	800e932 <_dtoa_r+0x6b2>
 800e92a:	4639      	mov	r1, r7
 800e92c:	4658      	mov	r0, fp
 800e92e:	f000 fbab 	bl	800f088 <_Bfree>
 800e932:	4629      	mov	r1, r5
 800e934:	4658      	mov	r0, fp
 800e936:	f000 fba7 	bl	800f088 <_Bfree>
 800e93a:	e7d0      	b.n	800e8de <_dtoa_r+0x65e>
 800e93c:	9704      	str	r7, [sp, #16]
 800e93e:	4633      	mov	r3, r6
 800e940:	461e      	mov	r6, r3
 800e942:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e946:	2a39      	cmp	r2, #57	@ 0x39
 800e948:	d107      	bne.n	800e95a <_dtoa_r+0x6da>
 800e94a:	459a      	cmp	sl, r3
 800e94c:	d1f8      	bne.n	800e940 <_dtoa_r+0x6c0>
 800e94e:	9a04      	ldr	r2, [sp, #16]
 800e950:	3201      	adds	r2, #1
 800e952:	9204      	str	r2, [sp, #16]
 800e954:	2230      	movs	r2, #48	@ 0x30
 800e956:	f88a 2000 	strb.w	r2, [sl]
 800e95a:	781a      	ldrb	r2, [r3, #0]
 800e95c:	3201      	adds	r2, #1
 800e95e:	701a      	strb	r2, [r3, #0]
 800e960:	e7bd      	b.n	800e8de <_dtoa_r+0x65e>
 800e962:	4b7b      	ldr	r3, [pc, #492]	@ (800eb50 <_dtoa_r+0x8d0>)
 800e964:	2200      	movs	r2, #0
 800e966:	f7f1 fe47 	bl	80005f8 <__aeabi_dmul>
 800e96a:	2200      	movs	r2, #0
 800e96c:	2300      	movs	r3, #0
 800e96e:	4604      	mov	r4, r0
 800e970:	460d      	mov	r5, r1
 800e972:	f7f2 f8a9 	bl	8000ac8 <__aeabi_dcmpeq>
 800e976:	2800      	cmp	r0, #0
 800e978:	f43f aebb 	beq.w	800e6f2 <_dtoa_r+0x472>
 800e97c:	e6f0      	b.n	800e760 <_dtoa_r+0x4e0>
 800e97e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e980:	2a00      	cmp	r2, #0
 800e982:	f000 80db 	beq.w	800eb3c <_dtoa_r+0x8bc>
 800e986:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e988:	2a01      	cmp	r2, #1
 800e98a:	f300 80bf 	bgt.w	800eb0c <_dtoa_r+0x88c>
 800e98e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e990:	2a00      	cmp	r2, #0
 800e992:	f000 80b7 	beq.w	800eb04 <_dtoa_r+0x884>
 800e996:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e99a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e99c:	4646      	mov	r6, r8
 800e99e:	9a08      	ldr	r2, [sp, #32]
 800e9a0:	2101      	movs	r1, #1
 800e9a2:	441a      	add	r2, r3
 800e9a4:	4658      	mov	r0, fp
 800e9a6:	4498      	add	r8, r3
 800e9a8:	9208      	str	r2, [sp, #32]
 800e9aa:	f000 fc6b 	bl	800f284 <__i2b>
 800e9ae:	4605      	mov	r5, r0
 800e9b0:	b15e      	cbz	r6, 800e9ca <_dtoa_r+0x74a>
 800e9b2:	9b08      	ldr	r3, [sp, #32]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	dd08      	ble.n	800e9ca <_dtoa_r+0x74a>
 800e9b8:	42b3      	cmp	r3, r6
 800e9ba:	9a08      	ldr	r2, [sp, #32]
 800e9bc:	bfa8      	it	ge
 800e9be:	4633      	movge	r3, r6
 800e9c0:	eba8 0803 	sub.w	r8, r8, r3
 800e9c4:	1af6      	subs	r6, r6, r3
 800e9c6:	1ad3      	subs	r3, r2, r3
 800e9c8:	9308      	str	r3, [sp, #32]
 800e9ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e9cc:	b1f3      	cbz	r3, 800ea0c <_dtoa_r+0x78c>
 800e9ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	f000 80b7 	beq.w	800eb44 <_dtoa_r+0x8c4>
 800e9d6:	b18c      	cbz	r4, 800e9fc <_dtoa_r+0x77c>
 800e9d8:	4629      	mov	r1, r5
 800e9da:	4622      	mov	r2, r4
 800e9dc:	4658      	mov	r0, fp
 800e9de:	f000 fd11 	bl	800f404 <__pow5mult>
 800e9e2:	464a      	mov	r2, r9
 800e9e4:	4601      	mov	r1, r0
 800e9e6:	4605      	mov	r5, r0
 800e9e8:	4658      	mov	r0, fp
 800e9ea:	f000 fc61 	bl	800f2b0 <__multiply>
 800e9ee:	4649      	mov	r1, r9
 800e9f0:	9004      	str	r0, [sp, #16]
 800e9f2:	4658      	mov	r0, fp
 800e9f4:	f000 fb48 	bl	800f088 <_Bfree>
 800e9f8:	9b04      	ldr	r3, [sp, #16]
 800e9fa:	4699      	mov	r9, r3
 800e9fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e9fe:	1b1a      	subs	r2, r3, r4
 800ea00:	d004      	beq.n	800ea0c <_dtoa_r+0x78c>
 800ea02:	4649      	mov	r1, r9
 800ea04:	4658      	mov	r0, fp
 800ea06:	f000 fcfd 	bl	800f404 <__pow5mult>
 800ea0a:	4681      	mov	r9, r0
 800ea0c:	2101      	movs	r1, #1
 800ea0e:	4658      	mov	r0, fp
 800ea10:	f000 fc38 	bl	800f284 <__i2b>
 800ea14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ea16:	4604      	mov	r4, r0
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	f000 81cf 	beq.w	800edbc <_dtoa_r+0xb3c>
 800ea1e:	461a      	mov	r2, r3
 800ea20:	4601      	mov	r1, r0
 800ea22:	4658      	mov	r0, fp
 800ea24:	f000 fcee 	bl	800f404 <__pow5mult>
 800ea28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea2a:	2b01      	cmp	r3, #1
 800ea2c:	4604      	mov	r4, r0
 800ea2e:	f300 8095 	bgt.w	800eb5c <_dtoa_r+0x8dc>
 800ea32:	9b02      	ldr	r3, [sp, #8]
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	f040 8087 	bne.w	800eb48 <_dtoa_r+0x8c8>
 800ea3a:	9b03      	ldr	r3, [sp, #12]
 800ea3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	f040 8089 	bne.w	800eb58 <_dtoa_r+0x8d8>
 800ea46:	9b03      	ldr	r3, [sp, #12]
 800ea48:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ea4c:	0d1b      	lsrs	r3, r3, #20
 800ea4e:	051b      	lsls	r3, r3, #20
 800ea50:	b12b      	cbz	r3, 800ea5e <_dtoa_r+0x7de>
 800ea52:	9b08      	ldr	r3, [sp, #32]
 800ea54:	3301      	adds	r3, #1
 800ea56:	9308      	str	r3, [sp, #32]
 800ea58:	f108 0801 	add.w	r8, r8, #1
 800ea5c:	2301      	movs	r3, #1
 800ea5e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ea60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	f000 81b0 	beq.w	800edc8 <_dtoa_r+0xb48>
 800ea68:	6923      	ldr	r3, [r4, #16]
 800ea6a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ea6e:	6918      	ldr	r0, [r3, #16]
 800ea70:	f000 fbbc 	bl	800f1ec <__hi0bits>
 800ea74:	f1c0 0020 	rsb	r0, r0, #32
 800ea78:	9b08      	ldr	r3, [sp, #32]
 800ea7a:	4418      	add	r0, r3
 800ea7c:	f010 001f 	ands.w	r0, r0, #31
 800ea80:	d077      	beq.n	800eb72 <_dtoa_r+0x8f2>
 800ea82:	f1c0 0320 	rsb	r3, r0, #32
 800ea86:	2b04      	cmp	r3, #4
 800ea88:	dd6b      	ble.n	800eb62 <_dtoa_r+0x8e2>
 800ea8a:	9b08      	ldr	r3, [sp, #32]
 800ea8c:	f1c0 001c 	rsb	r0, r0, #28
 800ea90:	4403      	add	r3, r0
 800ea92:	4480      	add	r8, r0
 800ea94:	4406      	add	r6, r0
 800ea96:	9308      	str	r3, [sp, #32]
 800ea98:	f1b8 0f00 	cmp.w	r8, #0
 800ea9c:	dd05      	ble.n	800eaaa <_dtoa_r+0x82a>
 800ea9e:	4649      	mov	r1, r9
 800eaa0:	4642      	mov	r2, r8
 800eaa2:	4658      	mov	r0, fp
 800eaa4:	f000 fd08 	bl	800f4b8 <__lshift>
 800eaa8:	4681      	mov	r9, r0
 800eaaa:	9b08      	ldr	r3, [sp, #32]
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	dd05      	ble.n	800eabc <_dtoa_r+0x83c>
 800eab0:	4621      	mov	r1, r4
 800eab2:	461a      	mov	r2, r3
 800eab4:	4658      	mov	r0, fp
 800eab6:	f000 fcff 	bl	800f4b8 <__lshift>
 800eaba:	4604      	mov	r4, r0
 800eabc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d059      	beq.n	800eb76 <_dtoa_r+0x8f6>
 800eac2:	4621      	mov	r1, r4
 800eac4:	4648      	mov	r0, r9
 800eac6:	f000 fd63 	bl	800f590 <__mcmp>
 800eaca:	2800      	cmp	r0, #0
 800eacc:	da53      	bge.n	800eb76 <_dtoa_r+0x8f6>
 800eace:	1e7b      	subs	r3, r7, #1
 800ead0:	9304      	str	r3, [sp, #16]
 800ead2:	4649      	mov	r1, r9
 800ead4:	2300      	movs	r3, #0
 800ead6:	220a      	movs	r2, #10
 800ead8:	4658      	mov	r0, fp
 800eada:	f000 faf7 	bl	800f0cc <__multadd>
 800eade:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800eae0:	4681      	mov	r9, r0
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	f000 8172 	beq.w	800edcc <_dtoa_r+0xb4c>
 800eae8:	2300      	movs	r3, #0
 800eaea:	4629      	mov	r1, r5
 800eaec:	220a      	movs	r2, #10
 800eaee:	4658      	mov	r0, fp
 800eaf0:	f000 faec 	bl	800f0cc <__multadd>
 800eaf4:	9b00      	ldr	r3, [sp, #0]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	4605      	mov	r5, r0
 800eafa:	dc67      	bgt.n	800ebcc <_dtoa_r+0x94c>
 800eafc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eafe:	2b02      	cmp	r3, #2
 800eb00:	dc41      	bgt.n	800eb86 <_dtoa_r+0x906>
 800eb02:	e063      	b.n	800ebcc <_dtoa_r+0x94c>
 800eb04:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800eb06:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800eb0a:	e746      	b.n	800e99a <_dtoa_r+0x71a>
 800eb0c:	9b07      	ldr	r3, [sp, #28]
 800eb0e:	1e5c      	subs	r4, r3, #1
 800eb10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eb12:	42a3      	cmp	r3, r4
 800eb14:	bfbf      	itttt	lt
 800eb16:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800eb18:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800eb1a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800eb1c:	1ae3      	sublt	r3, r4, r3
 800eb1e:	bfb4      	ite	lt
 800eb20:	18d2      	addlt	r2, r2, r3
 800eb22:	1b1c      	subge	r4, r3, r4
 800eb24:	9b07      	ldr	r3, [sp, #28]
 800eb26:	bfbc      	itt	lt
 800eb28:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800eb2a:	2400      	movlt	r4, #0
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	bfb5      	itete	lt
 800eb30:	eba8 0603 	sublt.w	r6, r8, r3
 800eb34:	9b07      	ldrge	r3, [sp, #28]
 800eb36:	2300      	movlt	r3, #0
 800eb38:	4646      	movge	r6, r8
 800eb3a:	e730      	b.n	800e99e <_dtoa_r+0x71e>
 800eb3c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800eb3e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800eb40:	4646      	mov	r6, r8
 800eb42:	e735      	b.n	800e9b0 <_dtoa_r+0x730>
 800eb44:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800eb46:	e75c      	b.n	800ea02 <_dtoa_r+0x782>
 800eb48:	2300      	movs	r3, #0
 800eb4a:	e788      	b.n	800ea5e <_dtoa_r+0x7de>
 800eb4c:	3fe00000 	.word	0x3fe00000
 800eb50:	40240000 	.word	0x40240000
 800eb54:	40140000 	.word	0x40140000
 800eb58:	9b02      	ldr	r3, [sp, #8]
 800eb5a:	e780      	b.n	800ea5e <_dtoa_r+0x7de>
 800eb5c:	2300      	movs	r3, #0
 800eb5e:	930a      	str	r3, [sp, #40]	@ 0x28
 800eb60:	e782      	b.n	800ea68 <_dtoa_r+0x7e8>
 800eb62:	d099      	beq.n	800ea98 <_dtoa_r+0x818>
 800eb64:	9a08      	ldr	r2, [sp, #32]
 800eb66:	331c      	adds	r3, #28
 800eb68:	441a      	add	r2, r3
 800eb6a:	4498      	add	r8, r3
 800eb6c:	441e      	add	r6, r3
 800eb6e:	9208      	str	r2, [sp, #32]
 800eb70:	e792      	b.n	800ea98 <_dtoa_r+0x818>
 800eb72:	4603      	mov	r3, r0
 800eb74:	e7f6      	b.n	800eb64 <_dtoa_r+0x8e4>
 800eb76:	9b07      	ldr	r3, [sp, #28]
 800eb78:	9704      	str	r7, [sp, #16]
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	dc20      	bgt.n	800ebc0 <_dtoa_r+0x940>
 800eb7e:	9300      	str	r3, [sp, #0]
 800eb80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb82:	2b02      	cmp	r3, #2
 800eb84:	dd1e      	ble.n	800ebc4 <_dtoa_r+0x944>
 800eb86:	9b00      	ldr	r3, [sp, #0]
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	f47f aec0 	bne.w	800e90e <_dtoa_r+0x68e>
 800eb8e:	4621      	mov	r1, r4
 800eb90:	2205      	movs	r2, #5
 800eb92:	4658      	mov	r0, fp
 800eb94:	f000 fa9a 	bl	800f0cc <__multadd>
 800eb98:	4601      	mov	r1, r0
 800eb9a:	4604      	mov	r4, r0
 800eb9c:	4648      	mov	r0, r9
 800eb9e:	f000 fcf7 	bl	800f590 <__mcmp>
 800eba2:	2800      	cmp	r0, #0
 800eba4:	f77f aeb3 	ble.w	800e90e <_dtoa_r+0x68e>
 800eba8:	4656      	mov	r6, sl
 800ebaa:	2331      	movs	r3, #49	@ 0x31
 800ebac:	f806 3b01 	strb.w	r3, [r6], #1
 800ebb0:	9b04      	ldr	r3, [sp, #16]
 800ebb2:	3301      	adds	r3, #1
 800ebb4:	9304      	str	r3, [sp, #16]
 800ebb6:	e6ae      	b.n	800e916 <_dtoa_r+0x696>
 800ebb8:	9c07      	ldr	r4, [sp, #28]
 800ebba:	9704      	str	r7, [sp, #16]
 800ebbc:	4625      	mov	r5, r4
 800ebbe:	e7f3      	b.n	800eba8 <_dtoa_r+0x928>
 800ebc0:	9b07      	ldr	r3, [sp, #28]
 800ebc2:	9300      	str	r3, [sp, #0]
 800ebc4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	f000 8104 	beq.w	800edd4 <_dtoa_r+0xb54>
 800ebcc:	2e00      	cmp	r6, #0
 800ebce:	dd05      	ble.n	800ebdc <_dtoa_r+0x95c>
 800ebd0:	4629      	mov	r1, r5
 800ebd2:	4632      	mov	r2, r6
 800ebd4:	4658      	mov	r0, fp
 800ebd6:	f000 fc6f 	bl	800f4b8 <__lshift>
 800ebda:	4605      	mov	r5, r0
 800ebdc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d05a      	beq.n	800ec98 <_dtoa_r+0xa18>
 800ebe2:	6869      	ldr	r1, [r5, #4]
 800ebe4:	4658      	mov	r0, fp
 800ebe6:	f000 fa0f 	bl	800f008 <_Balloc>
 800ebea:	4606      	mov	r6, r0
 800ebec:	b928      	cbnz	r0, 800ebfa <_dtoa_r+0x97a>
 800ebee:	4b84      	ldr	r3, [pc, #528]	@ (800ee00 <_dtoa_r+0xb80>)
 800ebf0:	4602      	mov	r2, r0
 800ebf2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ebf6:	f7ff bb5a 	b.w	800e2ae <_dtoa_r+0x2e>
 800ebfa:	692a      	ldr	r2, [r5, #16]
 800ebfc:	3202      	adds	r2, #2
 800ebfe:	0092      	lsls	r2, r2, #2
 800ec00:	f105 010c 	add.w	r1, r5, #12
 800ec04:	300c      	adds	r0, #12
 800ec06:	f7ff fa7e 	bl	800e106 <memcpy>
 800ec0a:	2201      	movs	r2, #1
 800ec0c:	4631      	mov	r1, r6
 800ec0e:	4658      	mov	r0, fp
 800ec10:	f000 fc52 	bl	800f4b8 <__lshift>
 800ec14:	f10a 0301 	add.w	r3, sl, #1
 800ec18:	9307      	str	r3, [sp, #28]
 800ec1a:	9b00      	ldr	r3, [sp, #0]
 800ec1c:	4453      	add	r3, sl
 800ec1e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ec20:	9b02      	ldr	r3, [sp, #8]
 800ec22:	f003 0301 	and.w	r3, r3, #1
 800ec26:	462f      	mov	r7, r5
 800ec28:	930a      	str	r3, [sp, #40]	@ 0x28
 800ec2a:	4605      	mov	r5, r0
 800ec2c:	9b07      	ldr	r3, [sp, #28]
 800ec2e:	4621      	mov	r1, r4
 800ec30:	3b01      	subs	r3, #1
 800ec32:	4648      	mov	r0, r9
 800ec34:	9300      	str	r3, [sp, #0]
 800ec36:	f7ff fa99 	bl	800e16c <quorem>
 800ec3a:	4639      	mov	r1, r7
 800ec3c:	9002      	str	r0, [sp, #8]
 800ec3e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ec42:	4648      	mov	r0, r9
 800ec44:	f000 fca4 	bl	800f590 <__mcmp>
 800ec48:	462a      	mov	r2, r5
 800ec4a:	9008      	str	r0, [sp, #32]
 800ec4c:	4621      	mov	r1, r4
 800ec4e:	4658      	mov	r0, fp
 800ec50:	f000 fcba 	bl	800f5c8 <__mdiff>
 800ec54:	68c2      	ldr	r2, [r0, #12]
 800ec56:	4606      	mov	r6, r0
 800ec58:	bb02      	cbnz	r2, 800ec9c <_dtoa_r+0xa1c>
 800ec5a:	4601      	mov	r1, r0
 800ec5c:	4648      	mov	r0, r9
 800ec5e:	f000 fc97 	bl	800f590 <__mcmp>
 800ec62:	4602      	mov	r2, r0
 800ec64:	4631      	mov	r1, r6
 800ec66:	4658      	mov	r0, fp
 800ec68:	920e      	str	r2, [sp, #56]	@ 0x38
 800ec6a:	f000 fa0d 	bl	800f088 <_Bfree>
 800ec6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec70:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ec72:	9e07      	ldr	r6, [sp, #28]
 800ec74:	ea43 0102 	orr.w	r1, r3, r2
 800ec78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ec7a:	4319      	orrs	r1, r3
 800ec7c:	d110      	bne.n	800eca0 <_dtoa_r+0xa20>
 800ec7e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ec82:	d029      	beq.n	800ecd8 <_dtoa_r+0xa58>
 800ec84:	9b08      	ldr	r3, [sp, #32]
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	dd02      	ble.n	800ec90 <_dtoa_r+0xa10>
 800ec8a:	9b02      	ldr	r3, [sp, #8]
 800ec8c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800ec90:	9b00      	ldr	r3, [sp, #0]
 800ec92:	f883 8000 	strb.w	r8, [r3]
 800ec96:	e63f      	b.n	800e918 <_dtoa_r+0x698>
 800ec98:	4628      	mov	r0, r5
 800ec9a:	e7bb      	b.n	800ec14 <_dtoa_r+0x994>
 800ec9c:	2201      	movs	r2, #1
 800ec9e:	e7e1      	b.n	800ec64 <_dtoa_r+0x9e4>
 800eca0:	9b08      	ldr	r3, [sp, #32]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	db04      	blt.n	800ecb0 <_dtoa_r+0xa30>
 800eca6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800eca8:	430b      	orrs	r3, r1
 800ecaa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ecac:	430b      	orrs	r3, r1
 800ecae:	d120      	bne.n	800ecf2 <_dtoa_r+0xa72>
 800ecb0:	2a00      	cmp	r2, #0
 800ecb2:	dded      	ble.n	800ec90 <_dtoa_r+0xa10>
 800ecb4:	4649      	mov	r1, r9
 800ecb6:	2201      	movs	r2, #1
 800ecb8:	4658      	mov	r0, fp
 800ecba:	f000 fbfd 	bl	800f4b8 <__lshift>
 800ecbe:	4621      	mov	r1, r4
 800ecc0:	4681      	mov	r9, r0
 800ecc2:	f000 fc65 	bl	800f590 <__mcmp>
 800ecc6:	2800      	cmp	r0, #0
 800ecc8:	dc03      	bgt.n	800ecd2 <_dtoa_r+0xa52>
 800ecca:	d1e1      	bne.n	800ec90 <_dtoa_r+0xa10>
 800eccc:	f018 0f01 	tst.w	r8, #1
 800ecd0:	d0de      	beq.n	800ec90 <_dtoa_r+0xa10>
 800ecd2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ecd6:	d1d8      	bne.n	800ec8a <_dtoa_r+0xa0a>
 800ecd8:	9a00      	ldr	r2, [sp, #0]
 800ecda:	2339      	movs	r3, #57	@ 0x39
 800ecdc:	7013      	strb	r3, [r2, #0]
 800ecde:	4633      	mov	r3, r6
 800ece0:	461e      	mov	r6, r3
 800ece2:	3b01      	subs	r3, #1
 800ece4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ece8:	2a39      	cmp	r2, #57	@ 0x39
 800ecea:	d052      	beq.n	800ed92 <_dtoa_r+0xb12>
 800ecec:	3201      	adds	r2, #1
 800ecee:	701a      	strb	r2, [r3, #0]
 800ecf0:	e612      	b.n	800e918 <_dtoa_r+0x698>
 800ecf2:	2a00      	cmp	r2, #0
 800ecf4:	dd07      	ble.n	800ed06 <_dtoa_r+0xa86>
 800ecf6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ecfa:	d0ed      	beq.n	800ecd8 <_dtoa_r+0xa58>
 800ecfc:	9a00      	ldr	r2, [sp, #0]
 800ecfe:	f108 0301 	add.w	r3, r8, #1
 800ed02:	7013      	strb	r3, [r2, #0]
 800ed04:	e608      	b.n	800e918 <_dtoa_r+0x698>
 800ed06:	9b07      	ldr	r3, [sp, #28]
 800ed08:	9a07      	ldr	r2, [sp, #28]
 800ed0a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800ed0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ed10:	4293      	cmp	r3, r2
 800ed12:	d028      	beq.n	800ed66 <_dtoa_r+0xae6>
 800ed14:	4649      	mov	r1, r9
 800ed16:	2300      	movs	r3, #0
 800ed18:	220a      	movs	r2, #10
 800ed1a:	4658      	mov	r0, fp
 800ed1c:	f000 f9d6 	bl	800f0cc <__multadd>
 800ed20:	42af      	cmp	r7, r5
 800ed22:	4681      	mov	r9, r0
 800ed24:	f04f 0300 	mov.w	r3, #0
 800ed28:	f04f 020a 	mov.w	r2, #10
 800ed2c:	4639      	mov	r1, r7
 800ed2e:	4658      	mov	r0, fp
 800ed30:	d107      	bne.n	800ed42 <_dtoa_r+0xac2>
 800ed32:	f000 f9cb 	bl	800f0cc <__multadd>
 800ed36:	4607      	mov	r7, r0
 800ed38:	4605      	mov	r5, r0
 800ed3a:	9b07      	ldr	r3, [sp, #28]
 800ed3c:	3301      	adds	r3, #1
 800ed3e:	9307      	str	r3, [sp, #28]
 800ed40:	e774      	b.n	800ec2c <_dtoa_r+0x9ac>
 800ed42:	f000 f9c3 	bl	800f0cc <__multadd>
 800ed46:	4629      	mov	r1, r5
 800ed48:	4607      	mov	r7, r0
 800ed4a:	2300      	movs	r3, #0
 800ed4c:	220a      	movs	r2, #10
 800ed4e:	4658      	mov	r0, fp
 800ed50:	f000 f9bc 	bl	800f0cc <__multadd>
 800ed54:	4605      	mov	r5, r0
 800ed56:	e7f0      	b.n	800ed3a <_dtoa_r+0xaba>
 800ed58:	9b00      	ldr	r3, [sp, #0]
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	bfcc      	ite	gt
 800ed5e:	461e      	movgt	r6, r3
 800ed60:	2601      	movle	r6, #1
 800ed62:	4456      	add	r6, sl
 800ed64:	2700      	movs	r7, #0
 800ed66:	4649      	mov	r1, r9
 800ed68:	2201      	movs	r2, #1
 800ed6a:	4658      	mov	r0, fp
 800ed6c:	f000 fba4 	bl	800f4b8 <__lshift>
 800ed70:	4621      	mov	r1, r4
 800ed72:	4681      	mov	r9, r0
 800ed74:	f000 fc0c 	bl	800f590 <__mcmp>
 800ed78:	2800      	cmp	r0, #0
 800ed7a:	dcb0      	bgt.n	800ecde <_dtoa_r+0xa5e>
 800ed7c:	d102      	bne.n	800ed84 <_dtoa_r+0xb04>
 800ed7e:	f018 0f01 	tst.w	r8, #1
 800ed82:	d1ac      	bne.n	800ecde <_dtoa_r+0xa5e>
 800ed84:	4633      	mov	r3, r6
 800ed86:	461e      	mov	r6, r3
 800ed88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ed8c:	2a30      	cmp	r2, #48	@ 0x30
 800ed8e:	d0fa      	beq.n	800ed86 <_dtoa_r+0xb06>
 800ed90:	e5c2      	b.n	800e918 <_dtoa_r+0x698>
 800ed92:	459a      	cmp	sl, r3
 800ed94:	d1a4      	bne.n	800ece0 <_dtoa_r+0xa60>
 800ed96:	9b04      	ldr	r3, [sp, #16]
 800ed98:	3301      	adds	r3, #1
 800ed9a:	9304      	str	r3, [sp, #16]
 800ed9c:	2331      	movs	r3, #49	@ 0x31
 800ed9e:	f88a 3000 	strb.w	r3, [sl]
 800eda2:	e5b9      	b.n	800e918 <_dtoa_r+0x698>
 800eda4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800eda6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800ee04 <_dtoa_r+0xb84>
 800edaa:	b11b      	cbz	r3, 800edb4 <_dtoa_r+0xb34>
 800edac:	f10a 0308 	add.w	r3, sl, #8
 800edb0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800edb2:	6013      	str	r3, [r2, #0]
 800edb4:	4650      	mov	r0, sl
 800edb6:	b019      	add	sp, #100	@ 0x64
 800edb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800edbe:	2b01      	cmp	r3, #1
 800edc0:	f77f ae37 	ble.w	800ea32 <_dtoa_r+0x7b2>
 800edc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800edc6:	930a      	str	r3, [sp, #40]	@ 0x28
 800edc8:	2001      	movs	r0, #1
 800edca:	e655      	b.n	800ea78 <_dtoa_r+0x7f8>
 800edcc:	9b00      	ldr	r3, [sp, #0]
 800edce:	2b00      	cmp	r3, #0
 800edd0:	f77f aed6 	ble.w	800eb80 <_dtoa_r+0x900>
 800edd4:	4656      	mov	r6, sl
 800edd6:	4621      	mov	r1, r4
 800edd8:	4648      	mov	r0, r9
 800edda:	f7ff f9c7 	bl	800e16c <quorem>
 800edde:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ede2:	f806 8b01 	strb.w	r8, [r6], #1
 800ede6:	9b00      	ldr	r3, [sp, #0]
 800ede8:	eba6 020a 	sub.w	r2, r6, sl
 800edec:	4293      	cmp	r3, r2
 800edee:	ddb3      	ble.n	800ed58 <_dtoa_r+0xad8>
 800edf0:	4649      	mov	r1, r9
 800edf2:	2300      	movs	r3, #0
 800edf4:	220a      	movs	r2, #10
 800edf6:	4658      	mov	r0, fp
 800edf8:	f000 f968 	bl	800f0cc <__multadd>
 800edfc:	4681      	mov	r9, r0
 800edfe:	e7ea      	b.n	800edd6 <_dtoa_r+0xb56>
 800ee00:	08011c01 	.word	0x08011c01
 800ee04:	08011b9c 	.word	0x08011b9c

0800ee08 <_free_r>:
 800ee08:	b538      	push	{r3, r4, r5, lr}
 800ee0a:	4605      	mov	r5, r0
 800ee0c:	2900      	cmp	r1, #0
 800ee0e:	d041      	beq.n	800ee94 <_free_r+0x8c>
 800ee10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ee14:	1f0c      	subs	r4, r1, #4
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	bfb8      	it	lt
 800ee1a:	18e4      	addlt	r4, r4, r3
 800ee1c:	f000 f8e8 	bl	800eff0 <__malloc_lock>
 800ee20:	4a1d      	ldr	r2, [pc, #116]	@ (800ee98 <_free_r+0x90>)
 800ee22:	6813      	ldr	r3, [r2, #0]
 800ee24:	b933      	cbnz	r3, 800ee34 <_free_r+0x2c>
 800ee26:	6063      	str	r3, [r4, #4]
 800ee28:	6014      	str	r4, [r2, #0]
 800ee2a:	4628      	mov	r0, r5
 800ee2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ee30:	f000 b8e4 	b.w	800effc <__malloc_unlock>
 800ee34:	42a3      	cmp	r3, r4
 800ee36:	d908      	bls.n	800ee4a <_free_r+0x42>
 800ee38:	6820      	ldr	r0, [r4, #0]
 800ee3a:	1821      	adds	r1, r4, r0
 800ee3c:	428b      	cmp	r3, r1
 800ee3e:	bf01      	itttt	eq
 800ee40:	6819      	ldreq	r1, [r3, #0]
 800ee42:	685b      	ldreq	r3, [r3, #4]
 800ee44:	1809      	addeq	r1, r1, r0
 800ee46:	6021      	streq	r1, [r4, #0]
 800ee48:	e7ed      	b.n	800ee26 <_free_r+0x1e>
 800ee4a:	461a      	mov	r2, r3
 800ee4c:	685b      	ldr	r3, [r3, #4]
 800ee4e:	b10b      	cbz	r3, 800ee54 <_free_r+0x4c>
 800ee50:	42a3      	cmp	r3, r4
 800ee52:	d9fa      	bls.n	800ee4a <_free_r+0x42>
 800ee54:	6811      	ldr	r1, [r2, #0]
 800ee56:	1850      	adds	r0, r2, r1
 800ee58:	42a0      	cmp	r0, r4
 800ee5a:	d10b      	bne.n	800ee74 <_free_r+0x6c>
 800ee5c:	6820      	ldr	r0, [r4, #0]
 800ee5e:	4401      	add	r1, r0
 800ee60:	1850      	adds	r0, r2, r1
 800ee62:	4283      	cmp	r3, r0
 800ee64:	6011      	str	r1, [r2, #0]
 800ee66:	d1e0      	bne.n	800ee2a <_free_r+0x22>
 800ee68:	6818      	ldr	r0, [r3, #0]
 800ee6a:	685b      	ldr	r3, [r3, #4]
 800ee6c:	6053      	str	r3, [r2, #4]
 800ee6e:	4408      	add	r0, r1
 800ee70:	6010      	str	r0, [r2, #0]
 800ee72:	e7da      	b.n	800ee2a <_free_r+0x22>
 800ee74:	d902      	bls.n	800ee7c <_free_r+0x74>
 800ee76:	230c      	movs	r3, #12
 800ee78:	602b      	str	r3, [r5, #0]
 800ee7a:	e7d6      	b.n	800ee2a <_free_r+0x22>
 800ee7c:	6820      	ldr	r0, [r4, #0]
 800ee7e:	1821      	adds	r1, r4, r0
 800ee80:	428b      	cmp	r3, r1
 800ee82:	bf04      	itt	eq
 800ee84:	6819      	ldreq	r1, [r3, #0]
 800ee86:	685b      	ldreq	r3, [r3, #4]
 800ee88:	6063      	str	r3, [r4, #4]
 800ee8a:	bf04      	itt	eq
 800ee8c:	1809      	addeq	r1, r1, r0
 800ee8e:	6021      	streq	r1, [r4, #0]
 800ee90:	6054      	str	r4, [r2, #4]
 800ee92:	e7ca      	b.n	800ee2a <_free_r+0x22>
 800ee94:	bd38      	pop	{r3, r4, r5, pc}
 800ee96:	bf00      	nop
 800ee98:	200041a4 	.word	0x200041a4

0800ee9c <malloc>:
 800ee9c:	4b02      	ldr	r3, [pc, #8]	@ (800eea8 <malloc+0xc>)
 800ee9e:	4601      	mov	r1, r0
 800eea0:	6818      	ldr	r0, [r3, #0]
 800eea2:	f000 b825 	b.w	800eef0 <_malloc_r>
 800eea6:	bf00      	nop
 800eea8:	2000005c 	.word	0x2000005c

0800eeac <sbrk_aligned>:
 800eeac:	b570      	push	{r4, r5, r6, lr}
 800eeae:	4e0f      	ldr	r6, [pc, #60]	@ (800eeec <sbrk_aligned+0x40>)
 800eeb0:	460c      	mov	r4, r1
 800eeb2:	6831      	ldr	r1, [r6, #0]
 800eeb4:	4605      	mov	r5, r0
 800eeb6:	b911      	cbnz	r1, 800eebe <sbrk_aligned+0x12>
 800eeb8:	f001 ffe4 	bl	8010e84 <_sbrk_r>
 800eebc:	6030      	str	r0, [r6, #0]
 800eebe:	4621      	mov	r1, r4
 800eec0:	4628      	mov	r0, r5
 800eec2:	f001 ffdf 	bl	8010e84 <_sbrk_r>
 800eec6:	1c43      	adds	r3, r0, #1
 800eec8:	d103      	bne.n	800eed2 <sbrk_aligned+0x26>
 800eeca:	f04f 34ff 	mov.w	r4, #4294967295
 800eece:	4620      	mov	r0, r4
 800eed0:	bd70      	pop	{r4, r5, r6, pc}
 800eed2:	1cc4      	adds	r4, r0, #3
 800eed4:	f024 0403 	bic.w	r4, r4, #3
 800eed8:	42a0      	cmp	r0, r4
 800eeda:	d0f8      	beq.n	800eece <sbrk_aligned+0x22>
 800eedc:	1a21      	subs	r1, r4, r0
 800eede:	4628      	mov	r0, r5
 800eee0:	f001 ffd0 	bl	8010e84 <_sbrk_r>
 800eee4:	3001      	adds	r0, #1
 800eee6:	d1f2      	bne.n	800eece <sbrk_aligned+0x22>
 800eee8:	e7ef      	b.n	800eeca <sbrk_aligned+0x1e>
 800eeea:	bf00      	nop
 800eeec:	200041a0 	.word	0x200041a0

0800eef0 <_malloc_r>:
 800eef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eef4:	1ccd      	adds	r5, r1, #3
 800eef6:	f025 0503 	bic.w	r5, r5, #3
 800eefa:	3508      	adds	r5, #8
 800eefc:	2d0c      	cmp	r5, #12
 800eefe:	bf38      	it	cc
 800ef00:	250c      	movcc	r5, #12
 800ef02:	2d00      	cmp	r5, #0
 800ef04:	4606      	mov	r6, r0
 800ef06:	db01      	blt.n	800ef0c <_malloc_r+0x1c>
 800ef08:	42a9      	cmp	r1, r5
 800ef0a:	d904      	bls.n	800ef16 <_malloc_r+0x26>
 800ef0c:	230c      	movs	r3, #12
 800ef0e:	6033      	str	r3, [r6, #0]
 800ef10:	2000      	movs	r0, #0
 800ef12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ef16:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800efec <_malloc_r+0xfc>
 800ef1a:	f000 f869 	bl	800eff0 <__malloc_lock>
 800ef1e:	f8d8 3000 	ldr.w	r3, [r8]
 800ef22:	461c      	mov	r4, r3
 800ef24:	bb44      	cbnz	r4, 800ef78 <_malloc_r+0x88>
 800ef26:	4629      	mov	r1, r5
 800ef28:	4630      	mov	r0, r6
 800ef2a:	f7ff ffbf 	bl	800eeac <sbrk_aligned>
 800ef2e:	1c43      	adds	r3, r0, #1
 800ef30:	4604      	mov	r4, r0
 800ef32:	d158      	bne.n	800efe6 <_malloc_r+0xf6>
 800ef34:	f8d8 4000 	ldr.w	r4, [r8]
 800ef38:	4627      	mov	r7, r4
 800ef3a:	2f00      	cmp	r7, #0
 800ef3c:	d143      	bne.n	800efc6 <_malloc_r+0xd6>
 800ef3e:	2c00      	cmp	r4, #0
 800ef40:	d04b      	beq.n	800efda <_malloc_r+0xea>
 800ef42:	6823      	ldr	r3, [r4, #0]
 800ef44:	4639      	mov	r1, r7
 800ef46:	4630      	mov	r0, r6
 800ef48:	eb04 0903 	add.w	r9, r4, r3
 800ef4c:	f001 ff9a 	bl	8010e84 <_sbrk_r>
 800ef50:	4581      	cmp	r9, r0
 800ef52:	d142      	bne.n	800efda <_malloc_r+0xea>
 800ef54:	6821      	ldr	r1, [r4, #0]
 800ef56:	1a6d      	subs	r5, r5, r1
 800ef58:	4629      	mov	r1, r5
 800ef5a:	4630      	mov	r0, r6
 800ef5c:	f7ff ffa6 	bl	800eeac <sbrk_aligned>
 800ef60:	3001      	adds	r0, #1
 800ef62:	d03a      	beq.n	800efda <_malloc_r+0xea>
 800ef64:	6823      	ldr	r3, [r4, #0]
 800ef66:	442b      	add	r3, r5
 800ef68:	6023      	str	r3, [r4, #0]
 800ef6a:	f8d8 3000 	ldr.w	r3, [r8]
 800ef6e:	685a      	ldr	r2, [r3, #4]
 800ef70:	bb62      	cbnz	r2, 800efcc <_malloc_r+0xdc>
 800ef72:	f8c8 7000 	str.w	r7, [r8]
 800ef76:	e00f      	b.n	800ef98 <_malloc_r+0xa8>
 800ef78:	6822      	ldr	r2, [r4, #0]
 800ef7a:	1b52      	subs	r2, r2, r5
 800ef7c:	d420      	bmi.n	800efc0 <_malloc_r+0xd0>
 800ef7e:	2a0b      	cmp	r2, #11
 800ef80:	d917      	bls.n	800efb2 <_malloc_r+0xc2>
 800ef82:	1961      	adds	r1, r4, r5
 800ef84:	42a3      	cmp	r3, r4
 800ef86:	6025      	str	r5, [r4, #0]
 800ef88:	bf18      	it	ne
 800ef8a:	6059      	strne	r1, [r3, #4]
 800ef8c:	6863      	ldr	r3, [r4, #4]
 800ef8e:	bf08      	it	eq
 800ef90:	f8c8 1000 	streq.w	r1, [r8]
 800ef94:	5162      	str	r2, [r4, r5]
 800ef96:	604b      	str	r3, [r1, #4]
 800ef98:	4630      	mov	r0, r6
 800ef9a:	f000 f82f 	bl	800effc <__malloc_unlock>
 800ef9e:	f104 000b 	add.w	r0, r4, #11
 800efa2:	1d23      	adds	r3, r4, #4
 800efa4:	f020 0007 	bic.w	r0, r0, #7
 800efa8:	1ac2      	subs	r2, r0, r3
 800efaa:	bf1c      	itt	ne
 800efac:	1a1b      	subne	r3, r3, r0
 800efae:	50a3      	strne	r3, [r4, r2]
 800efb0:	e7af      	b.n	800ef12 <_malloc_r+0x22>
 800efb2:	6862      	ldr	r2, [r4, #4]
 800efb4:	42a3      	cmp	r3, r4
 800efb6:	bf0c      	ite	eq
 800efb8:	f8c8 2000 	streq.w	r2, [r8]
 800efbc:	605a      	strne	r2, [r3, #4]
 800efbe:	e7eb      	b.n	800ef98 <_malloc_r+0xa8>
 800efc0:	4623      	mov	r3, r4
 800efc2:	6864      	ldr	r4, [r4, #4]
 800efc4:	e7ae      	b.n	800ef24 <_malloc_r+0x34>
 800efc6:	463c      	mov	r4, r7
 800efc8:	687f      	ldr	r7, [r7, #4]
 800efca:	e7b6      	b.n	800ef3a <_malloc_r+0x4a>
 800efcc:	461a      	mov	r2, r3
 800efce:	685b      	ldr	r3, [r3, #4]
 800efd0:	42a3      	cmp	r3, r4
 800efd2:	d1fb      	bne.n	800efcc <_malloc_r+0xdc>
 800efd4:	2300      	movs	r3, #0
 800efd6:	6053      	str	r3, [r2, #4]
 800efd8:	e7de      	b.n	800ef98 <_malloc_r+0xa8>
 800efda:	230c      	movs	r3, #12
 800efdc:	6033      	str	r3, [r6, #0]
 800efde:	4630      	mov	r0, r6
 800efe0:	f000 f80c 	bl	800effc <__malloc_unlock>
 800efe4:	e794      	b.n	800ef10 <_malloc_r+0x20>
 800efe6:	6005      	str	r5, [r0, #0]
 800efe8:	e7d6      	b.n	800ef98 <_malloc_r+0xa8>
 800efea:	bf00      	nop
 800efec:	200041a4 	.word	0x200041a4

0800eff0 <__malloc_lock>:
 800eff0:	4801      	ldr	r0, [pc, #4]	@ (800eff8 <__malloc_lock+0x8>)
 800eff2:	f7ff b886 	b.w	800e102 <__retarget_lock_acquire_recursive>
 800eff6:	bf00      	nop
 800eff8:	2000419c 	.word	0x2000419c

0800effc <__malloc_unlock>:
 800effc:	4801      	ldr	r0, [pc, #4]	@ (800f004 <__malloc_unlock+0x8>)
 800effe:	f7ff b881 	b.w	800e104 <__retarget_lock_release_recursive>
 800f002:	bf00      	nop
 800f004:	2000419c 	.word	0x2000419c

0800f008 <_Balloc>:
 800f008:	b570      	push	{r4, r5, r6, lr}
 800f00a:	69c6      	ldr	r6, [r0, #28]
 800f00c:	4604      	mov	r4, r0
 800f00e:	460d      	mov	r5, r1
 800f010:	b976      	cbnz	r6, 800f030 <_Balloc+0x28>
 800f012:	2010      	movs	r0, #16
 800f014:	f7ff ff42 	bl	800ee9c <malloc>
 800f018:	4602      	mov	r2, r0
 800f01a:	61e0      	str	r0, [r4, #28]
 800f01c:	b920      	cbnz	r0, 800f028 <_Balloc+0x20>
 800f01e:	4b18      	ldr	r3, [pc, #96]	@ (800f080 <_Balloc+0x78>)
 800f020:	4818      	ldr	r0, [pc, #96]	@ (800f084 <_Balloc+0x7c>)
 800f022:	216b      	movs	r1, #107	@ 0x6b
 800f024:	f7ff f884 	bl	800e130 <__assert_func>
 800f028:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f02c:	6006      	str	r6, [r0, #0]
 800f02e:	60c6      	str	r6, [r0, #12]
 800f030:	69e6      	ldr	r6, [r4, #28]
 800f032:	68f3      	ldr	r3, [r6, #12]
 800f034:	b183      	cbz	r3, 800f058 <_Balloc+0x50>
 800f036:	69e3      	ldr	r3, [r4, #28]
 800f038:	68db      	ldr	r3, [r3, #12]
 800f03a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f03e:	b9b8      	cbnz	r0, 800f070 <_Balloc+0x68>
 800f040:	2101      	movs	r1, #1
 800f042:	fa01 f605 	lsl.w	r6, r1, r5
 800f046:	1d72      	adds	r2, r6, #5
 800f048:	0092      	lsls	r2, r2, #2
 800f04a:	4620      	mov	r0, r4
 800f04c:	f001 ff3b 	bl	8010ec6 <_calloc_r>
 800f050:	b160      	cbz	r0, 800f06c <_Balloc+0x64>
 800f052:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f056:	e00e      	b.n	800f076 <_Balloc+0x6e>
 800f058:	2221      	movs	r2, #33	@ 0x21
 800f05a:	2104      	movs	r1, #4
 800f05c:	4620      	mov	r0, r4
 800f05e:	f001 ff32 	bl	8010ec6 <_calloc_r>
 800f062:	69e3      	ldr	r3, [r4, #28]
 800f064:	60f0      	str	r0, [r6, #12]
 800f066:	68db      	ldr	r3, [r3, #12]
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d1e4      	bne.n	800f036 <_Balloc+0x2e>
 800f06c:	2000      	movs	r0, #0
 800f06e:	bd70      	pop	{r4, r5, r6, pc}
 800f070:	6802      	ldr	r2, [r0, #0]
 800f072:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f076:	2300      	movs	r3, #0
 800f078:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f07c:	e7f7      	b.n	800f06e <_Balloc+0x66>
 800f07e:	bf00      	nop
 800f080:	08011ab8 	.word	0x08011ab8
 800f084:	08011c12 	.word	0x08011c12

0800f088 <_Bfree>:
 800f088:	b570      	push	{r4, r5, r6, lr}
 800f08a:	69c6      	ldr	r6, [r0, #28]
 800f08c:	4605      	mov	r5, r0
 800f08e:	460c      	mov	r4, r1
 800f090:	b976      	cbnz	r6, 800f0b0 <_Bfree+0x28>
 800f092:	2010      	movs	r0, #16
 800f094:	f7ff ff02 	bl	800ee9c <malloc>
 800f098:	4602      	mov	r2, r0
 800f09a:	61e8      	str	r0, [r5, #28]
 800f09c:	b920      	cbnz	r0, 800f0a8 <_Bfree+0x20>
 800f09e:	4b09      	ldr	r3, [pc, #36]	@ (800f0c4 <_Bfree+0x3c>)
 800f0a0:	4809      	ldr	r0, [pc, #36]	@ (800f0c8 <_Bfree+0x40>)
 800f0a2:	218f      	movs	r1, #143	@ 0x8f
 800f0a4:	f7ff f844 	bl	800e130 <__assert_func>
 800f0a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f0ac:	6006      	str	r6, [r0, #0]
 800f0ae:	60c6      	str	r6, [r0, #12]
 800f0b0:	b13c      	cbz	r4, 800f0c2 <_Bfree+0x3a>
 800f0b2:	69eb      	ldr	r3, [r5, #28]
 800f0b4:	6862      	ldr	r2, [r4, #4]
 800f0b6:	68db      	ldr	r3, [r3, #12]
 800f0b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f0bc:	6021      	str	r1, [r4, #0]
 800f0be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f0c2:	bd70      	pop	{r4, r5, r6, pc}
 800f0c4:	08011ab8 	.word	0x08011ab8
 800f0c8:	08011c12 	.word	0x08011c12

0800f0cc <__multadd>:
 800f0cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0d0:	690d      	ldr	r5, [r1, #16]
 800f0d2:	4607      	mov	r7, r0
 800f0d4:	460c      	mov	r4, r1
 800f0d6:	461e      	mov	r6, r3
 800f0d8:	f101 0c14 	add.w	ip, r1, #20
 800f0dc:	2000      	movs	r0, #0
 800f0de:	f8dc 3000 	ldr.w	r3, [ip]
 800f0e2:	b299      	uxth	r1, r3
 800f0e4:	fb02 6101 	mla	r1, r2, r1, r6
 800f0e8:	0c1e      	lsrs	r6, r3, #16
 800f0ea:	0c0b      	lsrs	r3, r1, #16
 800f0ec:	fb02 3306 	mla	r3, r2, r6, r3
 800f0f0:	b289      	uxth	r1, r1
 800f0f2:	3001      	adds	r0, #1
 800f0f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f0f8:	4285      	cmp	r5, r0
 800f0fa:	f84c 1b04 	str.w	r1, [ip], #4
 800f0fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f102:	dcec      	bgt.n	800f0de <__multadd+0x12>
 800f104:	b30e      	cbz	r6, 800f14a <__multadd+0x7e>
 800f106:	68a3      	ldr	r3, [r4, #8]
 800f108:	42ab      	cmp	r3, r5
 800f10a:	dc19      	bgt.n	800f140 <__multadd+0x74>
 800f10c:	6861      	ldr	r1, [r4, #4]
 800f10e:	4638      	mov	r0, r7
 800f110:	3101      	adds	r1, #1
 800f112:	f7ff ff79 	bl	800f008 <_Balloc>
 800f116:	4680      	mov	r8, r0
 800f118:	b928      	cbnz	r0, 800f126 <__multadd+0x5a>
 800f11a:	4602      	mov	r2, r0
 800f11c:	4b0c      	ldr	r3, [pc, #48]	@ (800f150 <__multadd+0x84>)
 800f11e:	480d      	ldr	r0, [pc, #52]	@ (800f154 <__multadd+0x88>)
 800f120:	21ba      	movs	r1, #186	@ 0xba
 800f122:	f7ff f805 	bl	800e130 <__assert_func>
 800f126:	6922      	ldr	r2, [r4, #16]
 800f128:	3202      	adds	r2, #2
 800f12a:	f104 010c 	add.w	r1, r4, #12
 800f12e:	0092      	lsls	r2, r2, #2
 800f130:	300c      	adds	r0, #12
 800f132:	f7fe ffe8 	bl	800e106 <memcpy>
 800f136:	4621      	mov	r1, r4
 800f138:	4638      	mov	r0, r7
 800f13a:	f7ff ffa5 	bl	800f088 <_Bfree>
 800f13e:	4644      	mov	r4, r8
 800f140:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f144:	3501      	adds	r5, #1
 800f146:	615e      	str	r6, [r3, #20]
 800f148:	6125      	str	r5, [r4, #16]
 800f14a:	4620      	mov	r0, r4
 800f14c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f150:	08011c01 	.word	0x08011c01
 800f154:	08011c12 	.word	0x08011c12

0800f158 <__s2b>:
 800f158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f15c:	460c      	mov	r4, r1
 800f15e:	4615      	mov	r5, r2
 800f160:	461f      	mov	r7, r3
 800f162:	2209      	movs	r2, #9
 800f164:	3308      	adds	r3, #8
 800f166:	4606      	mov	r6, r0
 800f168:	fb93 f3f2 	sdiv	r3, r3, r2
 800f16c:	2100      	movs	r1, #0
 800f16e:	2201      	movs	r2, #1
 800f170:	429a      	cmp	r2, r3
 800f172:	db09      	blt.n	800f188 <__s2b+0x30>
 800f174:	4630      	mov	r0, r6
 800f176:	f7ff ff47 	bl	800f008 <_Balloc>
 800f17a:	b940      	cbnz	r0, 800f18e <__s2b+0x36>
 800f17c:	4602      	mov	r2, r0
 800f17e:	4b19      	ldr	r3, [pc, #100]	@ (800f1e4 <__s2b+0x8c>)
 800f180:	4819      	ldr	r0, [pc, #100]	@ (800f1e8 <__s2b+0x90>)
 800f182:	21d3      	movs	r1, #211	@ 0xd3
 800f184:	f7fe ffd4 	bl	800e130 <__assert_func>
 800f188:	0052      	lsls	r2, r2, #1
 800f18a:	3101      	adds	r1, #1
 800f18c:	e7f0      	b.n	800f170 <__s2b+0x18>
 800f18e:	9b08      	ldr	r3, [sp, #32]
 800f190:	6143      	str	r3, [r0, #20]
 800f192:	2d09      	cmp	r5, #9
 800f194:	f04f 0301 	mov.w	r3, #1
 800f198:	6103      	str	r3, [r0, #16]
 800f19a:	dd16      	ble.n	800f1ca <__s2b+0x72>
 800f19c:	f104 0909 	add.w	r9, r4, #9
 800f1a0:	46c8      	mov	r8, r9
 800f1a2:	442c      	add	r4, r5
 800f1a4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f1a8:	4601      	mov	r1, r0
 800f1aa:	3b30      	subs	r3, #48	@ 0x30
 800f1ac:	220a      	movs	r2, #10
 800f1ae:	4630      	mov	r0, r6
 800f1b0:	f7ff ff8c 	bl	800f0cc <__multadd>
 800f1b4:	45a0      	cmp	r8, r4
 800f1b6:	d1f5      	bne.n	800f1a4 <__s2b+0x4c>
 800f1b8:	f1a5 0408 	sub.w	r4, r5, #8
 800f1bc:	444c      	add	r4, r9
 800f1be:	1b2d      	subs	r5, r5, r4
 800f1c0:	1963      	adds	r3, r4, r5
 800f1c2:	42bb      	cmp	r3, r7
 800f1c4:	db04      	blt.n	800f1d0 <__s2b+0x78>
 800f1c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f1ca:	340a      	adds	r4, #10
 800f1cc:	2509      	movs	r5, #9
 800f1ce:	e7f6      	b.n	800f1be <__s2b+0x66>
 800f1d0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f1d4:	4601      	mov	r1, r0
 800f1d6:	3b30      	subs	r3, #48	@ 0x30
 800f1d8:	220a      	movs	r2, #10
 800f1da:	4630      	mov	r0, r6
 800f1dc:	f7ff ff76 	bl	800f0cc <__multadd>
 800f1e0:	e7ee      	b.n	800f1c0 <__s2b+0x68>
 800f1e2:	bf00      	nop
 800f1e4:	08011c01 	.word	0x08011c01
 800f1e8:	08011c12 	.word	0x08011c12

0800f1ec <__hi0bits>:
 800f1ec:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800f1f0:	4603      	mov	r3, r0
 800f1f2:	bf36      	itet	cc
 800f1f4:	0403      	lslcc	r3, r0, #16
 800f1f6:	2000      	movcs	r0, #0
 800f1f8:	2010      	movcc	r0, #16
 800f1fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f1fe:	bf3c      	itt	cc
 800f200:	021b      	lslcc	r3, r3, #8
 800f202:	3008      	addcc	r0, #8
 800f204:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f208:	bf3c      	itt	cc
 800f20a:	011b      	lslcc	r3, r3, #4
 800f20c:	3004      	addcc	r0, #4
 800f20e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f212:	bf3c      	itt	cc
 800f214:	009b      	lslcc	r3, r3, #2
 800f216:	3002      	addcc	r0, #2
 800f218:	2b00      	cmp	r3, #0
 800f21a:	db05      	blt.n	800f228 <__hi0bits+0x3c>
 800f21c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800f220:	f100 0001 	add.w	r0, r0, #1
 800f224:	bf08      	it	eq
 800f226:	2020      	moveq	r0, #32
 800f228:	4770      	bx	lr

0800f22a <__lo0bits>:
 800f22a:	6803      	ldr	r3, [r0, #0]
 800f22c:	4602      	mov	r2, r0
 800f22e:	f013 0007 	ands.w	r0, r3, #7
 800f232:	d00b      	beq.n	800f24c <__lo0bits+0x22>
 800f234:	07d9      	lsls	r1, r3, #31
 800f236:	d421      	bmi.n	800f27c <__lo0bits+0x52>
 800f238:	0798      	lsls	r0, r3, #30
 800f23a:	bf49      	itett	mi
 800f23c:	085b      	lsrmi	r3, r3, #1
 800f23e:	089b      	lsrpl	r3, r3, #2
 800f240:	2001      	movmi	r0, #1
 800f242:	6013      	strmi	r3, [r2, #0]
 800f244:	bf5c      	itt	pl
 800f246:	6013      	strpl	r3, [r2, #0]
 800f248:	2002      	movpl	r0, #2
 800f24a:	4770      	bx	lr
 800f24c:	b299      	uxth	r1, r3
 800f24e:	b909      	cbnz	r1, 800f254 <__lo0bits+0x2a>
 800f250:	0c1b      	lsrs	r3, r3, #16
 800f252:	2010      	movs	r0, #16
 800f254:	b2d9      	uxtb	r1, r3
 800f256:	b909      	cbnz	r1, 800f25c <__lo0bits+0x32>
 800f258:	3008      	adds	r0, #8
 800f25a:	0a1b      	lsrs	r3, r3, #8
 800f25c:	0719      	lsls	r1, r3, #28
 800f25e:	bf04      	itt	eq
 800f260:	091b      	lsreq	r3, r3, #4
 800f262:	3004      	addeq	r0, #4
 800f264:	0799      	lsls	r1, r3, #30
 800f266:	bf04      	itt	eq
 800f268:	089b      	lsreq	r3, r3, #2
 800f26a:	3002      	addeq	r0, #2
 800f26c:	07d9      	lsls	r1, r3, #31
 800f26e:	d403      	bmi.n	800f278 <__lo0bits+0x4e>
 800f270:	085b      	lsrs	r3, r3, #1
 800f272:	f100 0001 	add.w	r0, r0, #1
 800f276:	d003      	beq.n	800f280 <__lo0bits+0x56>
 800f278:	6013      	str	r3, [r2, #0]
 800f27a:	4770      	bx	lr
 800f27c:	2000      	movs	r0, #0
 800f27e:	4770      	bx	lr
 800f280:	2020      	movs	r0, #32
 800f282:	4770      	bx	lr

0800f284 <__i2b>:
 800f284:	b510      	push	{r4, lr}
 800f286:	460c      	mov	r4, r1
 800f288:	2101      	movs	r1, #1
 800f28a:	f7ff febd 	bl	800f008 <_Balloc>
 800f28e:	4602      	mov	r2, r0
 800f290:	b928      	cbnz	r0, 800f29e <__i2b+0x1a>
 800f292:	4b05      	ldr	r3, [pc, #20]	@ (800f2a8 <__i2b+0x24>)
 800f294:	4805      	ldr	r0, [pc, #20]	@ (800f2ac <__i2b+0x28>)
 800f296:	f240 1145 	movw	r1, #325	@ 0x145
 800f29a:	f7fe ff49 	bl	800e130 <__assert_func>
 800f29e:	2301      	movs	r3, #1
 800f2a0:	6144      	str	r4, [r0, #20]
 800f2a2:	6103      	str	r3, [r0, #16]
 800f2a4:	bd10      	pop	{r4, pc}
 800f2a6:	bf00      	nop
 800f2a8:	08011c01 	.word	0x08011c01
 800f2ac:	08011c12 	.word	0x08011c12

0800f2b0 <__multiply>:
 800f2b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2b4:	4614      	mov	r4, r2
 800f2b6:	690a      	ldr	r2, [r1, #16]
 800f2b8:	6923      	ldr	r3, [r4, #16]
 800f2ba:	429a      	cmp	r2, r3
 800f2bc:	bfa8      	it	ge
 800f2be:	4623      	movge	r3, r4
 800f2c0:	460f      	mov	r7, r1
 800f2c2:	bfa4      	itt	ge
 800f2c4:	460c      	movge	r4, r1
 800f2c6:	461f      	movge	r7, r3
 800f2c8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800f2cc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800f2d0:	68a3      	ldr	r3, [r4, #8]
 800f2d2:	6861      	ldr	r1, [r4, #4]
 800f2d4:	eb0a 0609 	add.w	r6, sl, r9
 800f2d8:	42b3      	cmp	r3, r6
 800f2da:	b085      	sub	sp, #20
 800f2dc:	bfb8      	it	lt
 800f2de:	3101      	addlt	r1, #1
 800f2e0:	f7ff fe92 	bl	800f008 <_Balloc>
 800f2e4:	b930      	cbnz	r0, 800f2f4 <__multiply+0x44>
 800f2e6:	4602      	mov	r2, r0
 800f2e8:	4b44      	ldr	r3, [pc, #272]	@ (800f3fc <__multiply+0x14c>)
 800f2ea:	4845      	ldr	r0, [pc, #276]	@ (800f400 <__multiply+0x150>)
 800f2ec:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800f2f0:	f7fe ff1e 	bl	800e130 <__assert_func>
 800f2f4:	f100 0514 	add.w	r5, r0, #20
 800f2f8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f2fc:	462b      	mov	r3, r5
 800f2fe:	2200      	movs	r2, #0
 800f300:	4543      	cmp	r3, r8
 800f302:	d321      	bcc.n	800f348 <__multiply+0x98>
 800f304:	f107 0114 	add.w	r1, r7, #20
 800f308:	f104 0214 	add.w	r2, r4, #20
 800f30c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800f310:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800f314:	9302      	str	r3, [sp, #8]
 800f316:	1b13      	subs	r3, r2, r4
 800f318:	3b15      	subs	r3, #21
 800f31a:	f023 0303 	bic.w	r3, r3, #3
 800f31e:	3304      	adds	r3, #4
 800f320:	f104 0715 	add.w	r7, r4, #21
 800f324:	42ba      	cmp	r2, r7
 800f326:	bf38      	it	cc
 800f328:	2304      	movcc	r3, #4
 800f32a:	9301      	str	r3, [sp, #4]
 800f32c:	9b02      	ldr	r3, [sp, #8]
 800f32e:	9103      	str	r1, [sp, #12]
 800f330:	428b      	cmp	r3, r1
 800f332:	d80c      	bhi.n	800f34e <__multiply+0x9e>
 800f334:	2e00      	cmp	r6, #0
 800f336:	dd03      	ble.n	800f340 <__multiply+0x90>
 800f338:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d05b      	beq.n	800f3f8 <__multiply+0x148>
 800f340:	6106      	str	r6, [r0, #16]
 800f342:	b005      	add	sp, #20
 800f344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f348:	f843 2b04 	str.w	r2, [r3], #4
 800f34c:	e7d8      	b.n	800f300 <__multiply+0x50>
 800f34e:	f8b1 a000 	ldrh.w	sl, [r1]
 800f352:	f1ba 0f00 	cmp.w	sl, #0
 800f356:	d024      	beq.n	800f3a2 <__multiply+0xf2>
 800f358:	f104 0e14 	add.w	lr, r4, #20
 800f35c:	46a9      	mov	r9, r5
 800f35e:	f04f 0c00 	mov.w	ip, #0
 800f362:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f366:	f8d9 3000 	ldr.w	r3, [r9]
 800f36a:	fa1f fb87 	uxth.w	fp, r7
 800f36e:	b29b      	uxth	r3, r3
 800f370:	fb0a 330b 	mla	r3, sl, fp, r3
 800f374:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800f378:	f8d9 7000 	ldr.w	r7, [r9]
 800f37c:	4463      	add	r3, ip
 800f37e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f382:	fb0a c70b 	mla	r7, sl, fp, ip
 800f386:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800f38a:	b29b      	uxth	r3, r3
 800f38c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f390:	4572      	cmp	r2, lr
 800f392:	f849 3b04 	str.w	r3, [r9], #4
 800f396:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f39a:	d8e2      	bhi.n	800f362 <__multiply+0xb2>
 800f39c:	9b01      	ldr	r3, [sp, #4]
 800f39e:	f845 c003 	str.w	ip, [r5, r3]
 800f3a2:	9b03      	ldr	r3, [sp, #12]
 800f3a4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800f3a8:	3104      	adds	r1, #4
 800f3aa:	f1b9 0f00 	cmp.w	r9, #0
 800f3ae:	d021      	beq.n	800f3f4 <__multiply+0x144>
 800f3b0:	682b      	ldr	r3, [r5, #0]
 800f3b2:	f104 0c14 	add.w	ip, r4, #20
 800f3b6:	46ae      	mov	lr, r5
 800f3b8:	f04f 0a00 	mov.w	sl, #0
 800f3bc:	f8bc b000 	ldrh.w	fp, [ip]
 800f3c0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800f3c4:	fb09 770b 	mla	r7, r9, fp, r7
 800f3c8:	4457      	add	r7, sl
 800f3ca:	b29b      	uxth	r3, r3
 800f3cc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f3d0:	f84e 3b04 	str.w	r3, [lr], #4
 800f3d4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f3d8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f3dc:	f8be 3000 	ldrh.w	r3, [lr]
 800f3e0:	fb09 330a 	mla	r3, r9, sl, r3
 800f3e4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800f3e8:	4562      	cmp	r2, ip
 800f3ea:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f3ee:	d8e5      	bhi.n	800f3bc <__multiply+0x10c>
 800f3f0:	9f01      	ldr	r7, [sp, #4]
 800f3f2:	51eb      	str	r3, [r5, r7]
 800f3f4:	3504      	adds	r5, #4
 800f3f6:	e799      	b.n	800f32c <__multiply+0x7c>
 800f3f8:	3e01      	subs	r6, #1
 800f3fa:	e79b      	b.n	800f334 <__multiply+0x84>
 800f3fc:	08011c01 	.word	0x08011c01
 800f400:	08011c12 	.word	0x08011c12

0800f404 <__pow5mult>:
 800f404:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f408:	4615      	mov	r5, r2
 800f40a:	f012 0203 	ands.w	r2, r2, #3
 800f40e:	4607      	mov	r7, r0
 800f410:	460e      	mov	r6, r1
 800f412:	d007      	beq.n	800f424 <__pow5mult+0x20>
 800f414:	4c25      	ldr	r4, [pc, #148]	@ (800f4ac <__pow5mult+0xa8>)
 800f416:	3a01      	subs	r2, #1
 800f418:	2300      	movs	r3, #0
 800f41a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f41e:	f7ff fe55 	bl	800f0cc <__multadd>
 800f422:	4606      	mov	r6, r0
 800f424:	10ad      	asrs	r5, r5, #2
 800f426:	d03d      	beq.n	800f4a4 <__pow5mult+0xa0>
 800f428:	69fc      	ldr	r4, [r7, #28]
 800f42a:	b97c      	cbnz	r4, 800f44c <__pow5mult+0x48>
 800f42c:	2010      	movs	r0, #16
 800f42e:	f7ff fd35 	bl	800ee9c <malloc>
 800f432:	4602      	mov	r2, r0
 800f434:	61f8      	str	r0, [r7, #28]
 800f436:	b928      	cbnz	r0, 800f444 <__pow5mult+0x40>
 800f438:	4b1d      	ldr	r3, [pc, #116]	@ (800f4b0 <__pow5mult+0xac>)
 800f43a:	481e      	ldr	r0, [pc, #120]	@ (800f4b4 <__pow5mult+0xb0>)
 800f43c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800f440:	f7fe fe76 	bl	800e130 <__assert_func>
 800f444:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f448:	6004      	str	r4, [r0, #0]
 800f44a:	60c4      	str	r4, [r0, #12]
 800f44c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800f450:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f454:	b94c      	cbnz	r4, 800f46a <__pow5mult+0x66>
 800f456:	f240 2171 	movw	r1, #625	@ 0x271
 800f45a:	4638      	mov	r0, r7
 800f45c:	f7ff ff12 	bl	800f284 <__i2b>
 800f460:	2300      	movs	r3, #0
 800f462:	f8c8 0008 	str.w	r0, [r8, #8]
 800f466:	4604      	mov	r4, r0
 800f468:	6003      	str	r3, [r0, #0]
 800f46a:	f04f 0900 	mov.w	r9, #0
 800f46e:	07eb      	lsls	r3, r5, #31
 800f470:	d50a      	bpl.n	800f488 <__pow5mult+0x84>
 800f472:	4631      	mov	r1, r6
 800f474:	4622      	mov	r2, r4
 800f476:	4638      	mov	r0, r7
 800f478:	f7ff ff1a 	bl	800f2b0 <__multiply>
 800f47c:	4631      	mov	r1, r6
 800f47e:	4680      	mov	r8, r0
 800f480:	4638      	mov	r0, r7
 800f482:	f7ff fe01 	bl	800f088 <_Bfree>
 800f486:	4646      	mov	r6, r8
 800f488:	106d      	asrs	r5, r5, #1
 800f48a:	d00b      	beq.n	800f4a4 <__pow5mult+0xa0>
 800f48c:	6820      	ldr	r0, [r4, #0]
 800f48e:	b938      	cbnz	r0, 800f4a0 <__pow5mult+0x9c>
 800f490:	4622      	mov	r2, r4
 800f492:	4621      	mov	r1, r4
 800f494:	4638      	mov	r0, r7
 800f496:	f7ff ff0b 	bl	800f2b0 <__multiply>
 800f49a:	6020      	str	r0, [r4, #0]
 800f49c:	f8c0 9000 	str.w	r9, [r0]
 800f4a0:	4604      	mov	r4, r0
 800f4a2:	e7e4      	b.n	800f46e <__pow5mult+0x6a>
 800f4a4:	4630      	mov	r0, r6
 800f4a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f4aa:	bf00      	nop
 800f4ac:	08011c6c 	.word	0x08011c6c
 800f4b0:	08011ab8 	.word	0x08011ab8
 800f4b4:	08011c12 	.word	0x08011c12

0800f4b8 <__lshift>:
 800f4b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f4bc:	460c      	mov	r4, r1
 800f4be:	6849      	ldr	r1, [r1, #4]
 800f4c0:	6923      	ldr	r3, [r4, #16]
 800f4c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f4c6:	68a3      	ldr	r3, [r4, #8]
 800f4c8:	4607      	mov	r7, r0
 800f4ca:	4691      	mov	r9, r2
 800f4cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f4d0:	f108 0601 	add.w	r6, r8, #1
 800f4d4:	42b3      	cmp	r3, r6
 800f4d6:	db0b      	blt.n	800f4f0 <__lshift+0x38>
 800f4d8:	4638      	mov	r0, r7
 800f4da:	f7ff fd95 	bl	800f008 <_Balloc>
 800f4de:	4605      	mov	r5, r0
 800f4e0:	b948      	cbnz	r0, 800f4f6 <__lshift+0x3e>
 800f4e2:	4602      	mov	r2, r0
 800f4e4:	4b28      	ldr	r3, [pc, #160]	@ (800f588 <__lshift+0xd0>)
 800f4e6:	4829      	ldr	r0, [pc, #164]	@ (800f58c <__lshift+0xd4>)
 800f4e8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800f4ec:	f7fe fe20 	bl	800e130 <__assert_func>
 800f4f0:	3101      	adds	r1, #1
 800f4f2:	005b      	lsls	r3, r3, #1
 800f4f4:	e7ee      	b.n	800f4d4 <__lshift+0x1c>
 800f4f6:	2300      	movs	r3, #0
 800f4f8:	f100 0114 	add.w	r1, r0, #20
 800f4fc:	f100 0210 	add.w	r2, r0, #16
 800f500:	4618      	mov	r0, r3
 800f502:	4553      	cmp	r3, sl
 800f504:	db33      	blt.n	800f56e <__lshift+0xb6>
 800f506:	6920      	ldr	r0, [r4, #16]
 800f508:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f50c:	f104 0314 	add.w	r3, r4, #20
 800f510:	f019 091f 	ands.w	r9, r9, #31
 800f514:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f518:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f51c:	d02b      	beq.n	800f576 <__lshift+0xbe>
 800f51e:	f1c9 0e20 	rsb	lr, r9, #32
 800f522:	468a      	mov	sl, r1
 800f524:	2200      	movs	r2, #0
 800f526:	6818      	ldr	r0, [r3, #0]
 800f528:	fa00 f009 	lsl.w	r0, r0, r9
 800f52c:	4310      	orrs	r0, r2
 800f52e:	f84a 0b04 	str.w	r0, [sl], #4
 800f532:	f853 2b04 	ldr.w	r2, [r3], #4
 800f536:	459c      	cmp	ip, r3
 800f538:	fa22 f20e 	lsr.w	r2, r2, lr
 800f53c:	d8f3      	bhi.n	800f526 <__lshift+0x6e>
 800f53e:	ebac 0304 	sub.w	r3, ip, r4
 800f542:	3b15      	subs	r3, #21
 800f544:	f023 0303 	bic.w	r3, r3, #3
 800f548:	3304      	adds	r3, #4
 800f54a:	f104 0015 	add.w	r0, r4, #21
 800f54e:	4584      	cmp	ip, r0
 800f550:	bf38      	it	cc
 800f552:	2304      	movcc	r3, #4
 800f554:	50ca      	str	r2, [r1, r3]
 800f556:	b10a      	cbz	r2, 800f55c <__lshift+0xa4>
 800f558:	f108 0602 	add.w	r6, r8, #2
 800f55c:	3e01      	subs	r6, #1
 800f55e:	4638      	mov	r0, r7
 800f560:	612e      	str	r6, [r5, #16]
 800f562:	4621      	mov	r1, r4
 800f564:	f7ff fd90 	bl	800f088 <_Bfree>
 800f568:	4628      	mov	r0, r5
 800f56a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f56e:	f842 0f04 	str.w	r0, [r2, #4]!
 800f572:	3301      	adds	r3, #1
 800f574:	e7c5      	b.n	800f502 <__lshift+0x4a>
 800f576:	3904      	subs	r1, #4
 800f578:	f853 2b04 	ldr.w	r2, [r3], #4
 800f57c:	f841 2f04 	str.w	r2, [r1, #4]!
 800f580:	459c      	cmp	ip, r3
 800f582:	d8f9      	bhi.n	800f578 <__lshift+0xc0>
 800f584:	e7ea      	b.n	800f55c <__lshift+0xa4>
 800f586:	bf00      	nop
 800f588:	08011c01 	.word	0x08011c01
 800f58c:	08011c12 	.word	0x08011c12

0800f590 <__mcmp>:
 800f590:	690a      	ldr	r2, [r1, #16]
 800f592:	4603      	mov	r3, r0
 800f594:	6900      	ldr	r0, [r0, #16]
 800f596:	1a80      	subs	r0, r0, r2
 800f598:	b530      	push	{r4, r5, lr}
 800f59a:	d10e      	bne.n	800f5ba <__mcmp+0x2a>
 800f59c:	3314      	adds	r3, #20
 800f59e:	3114      	adds	r1, #20
 800f5a0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f5a4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f5a8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f5ac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f5b0:	4295      	cmp	r5, r2
 800f5b2:	d003      	beq.n	800f5bc <__mcmp+0x2c>
 800f5b4:	d205      	bcs.n	800f5c2 <__mcmp+0x32>
 800f5b6:	f04f 30ff 	mov.w	r0, #4294967295
 800f5ba:	bd30      	pop	{r4, r5, pc}
 800f5bc:	42a3      	cmp	r3, r4
 800f5be:	d3f3      	bcc.n	800f5a8 <__mcmp+0x18>
 800f5c0:	e7fb      	b.n	800f5ba <__mcmp+0x2a>
 800f5c2:	2001      	movs	r0, #1
 800f5c4:	e7f9      	b.n	800f5ba <__mcmp+0x2a>
	...

0800f5c8 <__mdiff>:
 800f5c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5cc:	4689      	mov	r9, r1
 800f5ce:	4606      	mov	r6, r0
 800f5d0:	4611      	mov	r1, r2
 800f5d2:	4648      	mov	r0, r9
 800f5d4:	4614      	mov	r4, r2
 800f5d6:	f7ff ffdb 	bl	800f590 <__mcmp>
 800f5da:	1e05      	subs	r5, r0, #0
 800f5dc:	d112      	bne.n	800f604 <__mdiff+0x3c>
 800f5de:	4629      	mov	r1, r5
 800f5e0:	4630      	mov	r0, r6
 800f5e2:	f7ff fd11 	bl	800f008 <_Balloc>
 800f5e6:	4602      	mov	r2, r0
 800f5e8:	b928      	cbnz	r0, 800f5f6 <__mdiff+0x2e>
 800f5ea:	4b3f      	ldr	r3, [pc, #252]	@ (800f6e8 <__mdiff+0x120>)
 800f5ec:	f240 2137 	movw	r1, #567	@ 0x237
 800f5f0:	483e      	ldr	r0, [pc, #248]	@ (800f6ec <__mdiff+0x124>)
 800f5f2:	f7fe fd9d 	bl	800e130 <__assert_func>
 800f5f6:	2301      	movs	r3, #1
 800f5f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f5fc:	4610      	mov	r0, r2
 800f5fe:	b003      	add	sp, #12
 800f600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f604:	bfbc      	itt	lt
 800f606:	464b      	movlt	r3, r9
 800f608:	46a1      	movlt	r9, r4
 800f60a:	4630      	mov	r0, r6
 800f60c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f610:	bfba      	itte	lt
 800f612:	461c      	movlt	r4, r3
 800f614:	2501      	movlt	r5, #1
 800f616:	2500      	movge	r5, #0
 800f618:	f7ff fcf6 	bl	800f008 <_Balloc>
 800f61c:	4602      	mov	r2, r0
 800f61e:	b918      	cbnz	r0, 800f628 <__mdiff+0x60>
 800f620:	4b31      	ldr	r3, [pc, #196]	@ (800f6e8 <__mdiff+0x120>)
 800f622:	f240 2145 	movw	r1, #581	@ 0x245
 800f626:	e7e3      	b.n	800f5f0 <__mdiff+0x28>
 800f628:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f62c:	6926      	ldr	r6, [r4, #16]
 800f62e:	60c5      	str	r5, [r0, #12]
 800f630:	f109 0310 	add.w	r3, r9, #16
 800f634:	f109 0514 	add.w	r5, r9, #20
 800f638:	f104 0e14 	add.w	lr, r4, #20
 800f63c:	f100 0b14 	add.w	fp, r0, #20
 800f640:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f644:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f648:	9301      	str	r3, [sp, #4]
 800f64a:	46d9      	mov	r9, fp
 800f64c:	f04f 0c00 	mov.w	ip, #0
 800f650:	9b01      	ldr	r3, [sp, #4]
 800f652:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f656:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f65a:	9301      	str	r3, [sp, #4]
 800f65c:	fa1f f38a 	uxth.w	r3, sl
 800f660:	4619      	mov	r1, r3
 800f662:	b283      	uxth	r3, r0
 800f664:	1acb      	subs	r3, r1, r3
 800f666:	0c00      	lsrs	r0, r0, #16
 800f668:	4463      	add	r3, ip
 800f66a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f66e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f672:	b29b      	uxth	r3, r3
 800f674:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f678:	4576      	cmp	r6, lr
 800f67a:	f849 3b04 	str.w	r3, [r9], #4
 800f67e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f682:	d8e5      	bhi.n	800f650 <__mdiff+0x88>
 800f684:	1b33      	subs	r3, r6, r4
 800f686:	3b15      	subs	r3, #21
 800f688:	f023 0303 	bic.w	r3, r3, #3
 800f68c:	3415      	adds	r4, #21
 800f68e:	3304      	adds	r3, #4
 800f690:	42a6      	cmp	r6, r4
 800f692:	bf38      	it	cc
 800f694:	2304      	movcc	r3, #4
 800f696:	441d      	add	r5, r3
 800f698:	445b      	add	r3, fp
 800f69a:	461e      	mov	r6, r3
 800f69c:	462c      	mov	r4, r5
 800f69e:	4544      	cmp	r4, r8
 800f6a0:	d30e      	bcc.n	800f6c0 <__mdiff+0xf8>
 800f6a2:	f108 0103 	add.w	r1, r8, #3
 800f6a6:	1b49      	subs	r1, r1, r5
 800f6a8:	f021 0103 	bic.w	r1, r1, #3
 800f6ac:	3d03      	subs	r5, #3
 800f6ae:	45a8      	cmp	r8, r5
 800f6b0:	bf38      	it	cc
 800f6b2:	2100      	movcc	r1, #0
 800f6b4:	440b      	add	r3, r1
 800f6b6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f6ba:	b191      	cbz	r1, 800f6e2 <__mdiff+0x11a>
 800f6bc:	6117      	str	r7, [r2, #16]
 800f6be:	e79d      	b.n	800f5fc <__mdiff+0x34>
 800f6c0:	f854 1b04 	ldr.w	r1, [r4], #4
 800f6c4:	46e6      	mov	lr, ip
 800f6c6:	0c08      	lsrs	r0, r1, #16
 800f6c8:	fa1c fc81 	uxtah	ip, ip, r1
 800f6cc:	4471      	add	r1, lr
 800f6ce:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f6d2:	b289      	uxth	r1, r1
 800f6d4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f6d8:	f846 1b04 	str.w	r1, [r6], #4
 800f6dc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f6e0:	e7dd      	b.n	800f69e <__mdiff+0xd6>
 800f6e2:	3f01      	subs	r7, #1
 800f6e4:	e7e7      	b.n	800f6b6 <__mdiff+0xee>
 800f6e6:	bf00      	nop
 800f6e8:	08011c01 	.word	0x08011c01
 800f6ec:	08011c12 	.word	0x08011c12

0800f6f0 <__ulp>:
 800f6f0:	b082      	sub	sp, #8
 800f6f2:	ed8d 0b00 	vstr	d0, [sp]
 800f6f6:	9a01      	ldr	r2, [sp, #4]
 800f6f8:	4b0f      	ldr	r3, [pc, #60]	@ (800f738 <__ulp+0x48>)
 800f6fa:	4013      	ands	r3, r2
 800f6fc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800f700:	2b00      	cmp	r3, #0
 800f702:	dc08      	bgt.n	800f716 <__ulp+0x26>
 800f704:	425b      	negs	r3, r3
 800f706:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800f70a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800f70e:	da04      	bge.n	800f71a <__ulp+0x2a>
 800f710:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800f714:	4113      	asrs	r3, r2
 800f716:	2200      	movs	r2, #0
 800f718:	e008      	b.n	800f72c <__ulp+0x3c>
 800f71a:	f1a2 0314 	sub.w	r3, r2, #20
 800f71e:	2b1e      	cmp	r3, #30
 800f720:	bfda      	itte	le
 800f722:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800f726:	40da      	lsrle	r2, r3
 800f728:	2201      	movgt	r2, #1
 800f72a:	2300      	movs	r3, #0
 800f72c:	4619      	mov	r1, r3
 800f72e:	4610      	mov	r0, r2
 800f730:	ec41 0b10 	vmov	d0, r0, r1
 800f734:	b002      	add	sp, #8
 800f736:	4770      	bx	lr
 800f738:	7ff00000 	.word	0x7ff00000

0800f73c <__b2d>:
 800f73c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f740:	6906      	ldr	r6, [r0, #16]
 800f742:	f100 0814 	add.w	r8, r0, #20
 800f746:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800f74a:	1f37      	subs	r7, r6, #4
 800f74c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f750:	4610      	mov	r0, r2
 800f752:	f7ff fd4b 	bl	800f1ec <__hi0bits>
 800f756:	f1c0 0320 	rsb	r3, r0, #32
 800f75a:	280a      	cmp	r0, #10
 800f75c:	600b      	str	r3, [r1, #0]
 800f75e:	491b      	ldr	r1, [pc, #108]	@ (800f7cc <__b2d+0x90>)
 800f760:	dc15      	bgt.n	800f78e <__b2d+0x52>
 800f762:	f1c0 0c0b 	rsb	ip, r0, #11
 800f766:	fa22 f30c 	lsr.w	r3, r2, ip
 800f76a:	45b8      	cmp	r8, r7
 800f76c:	ea43 0501 	orr.w	r5, r3, r1
 800f770:	bf34      	ite	cc
 800f772:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f776:	2300      	movcs	r3, #0
 800f778:	3015      	adds	r0, #21
 800f77a:	fa02 f000 	lsl.w	r0, r2, r0
 800f77e:	fa23 f30c 	lsr.w	r3, r3, ip
 800f782:	4303      	orrs	r3, r0
 800f784:	461c      	mov	r4, r3
 800f786:	ec45 4b10 	vmov	d0, r4, r5
 800f78a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f78e:	45b8      	cmp	r8, r7
 800f790:	bf3a      	itte	cc
 800f792:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f796:	f1a6 0708 	subcc.w	r7, r6, #8
 800f79a:	2300      	movcs	r3, #0
 800f79c:	380b      	subs	r0, #11
 800f79e:	d012      	beq.n	800f7c6 <__b2d+0x8a>
 800f7a0:	f1c0 0120 	rsb	r1, r0, #32
 800f7a4:	fa23 f401 	lsr.w	r4, r3, r1
 800f7a8:	4082      	lsls	r2, r0
 800f7aa:	4322      	orrs	r2, r4
 800f7ac:	4547      	cmp	r7, r8
 800f7ae:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800f7b2:	bf8c      	ite	hi
 800f7b4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800f7b8:	2200      	movls	r2, #0
 800f7ba:	4083      	lsls	r3, r0
 800f7bc:	40ca      	lsrs	r2, r1
 800f7be:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800f7c2:	4313      	orrs	r3, r2
 800f7c4:	e7de      	b.n	800f784 <__b2d+0x48>
 800f7c6:	ea42 0501 	orr.w	r5, r2, r1
 800f7ca:	e7db      	b.n	800f784 <__b2d+0x48>
 800f7cc:	3ff00000 	.word	0x3ff00000

0800f7d0 <__d2b>:
 800f7d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f7d4:	460f      	mov	r7, r1
 800f7d6:	2101      	movs	r1, #1
 800f7d8:	ec59 8b10 	vmov	r8, r9, d0
 800f7dc:	4616      	mov	r6, r2
 800f7de:	f7ff fc13 	bl	800f008 <_Balloc>
 800f7e2:	4604      	mov	r4, r0
 800f7e4:	b930      	cbnz	r0, 800f7f4 <__d2b+0x24>
 800f7e6:	4602      	mov	r2, r0
 800f7e8:	4b23      	ldr	r3, [pc, #140]	@ (800f878 <__d2b+0xa8>)
 800f7ea:	4824      	ldr	r0, [pc, #144]	@ (800f87c <__d2b+0xac>)
 800f7ec:	f240 310f 	movw	r1, #783	@ 0x30f
 800f7f0:	f7fe fc9e 	bl	800e130 <__assert_func>
 800f7f4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f7f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f7fc:	b10d      	cbz	r5, 800f802 <__d2b+0x32>
 800f7fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f802:	9301      	str	r3, [sp, #4]
 800f804:	f1b8 0300 	subs.w	r3, r8, #0
 800f808:	d023      	beq.n	800f852 <__d2b+0x82>
 800f80a:	4668      	mov	r0, sp
 800f80c:	9300      	str	r3, [sp, #0]
 800f80e:	f7ff fd0c 	bl	800f22a <__lo0bits>
 800f812:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f816:	b1d0      	cbz	r0, 800f84e <__d2b+0x7e>
 800f818:	f1c0 0320 	rsb	r3, r0, #32
 800f81c:	fa02 f303 	lsl.w	r3, r2, r3
 800f820:	430b      	orrs	r3, r1
 800f822:	40c2      	lsrs	r2, r0
 800f824:	6163      	str	r3, [r4, #20]
 800f826:	9201      	str	r2, [sp, #4]
 800f828:	9b01      	ldr	r3, [sp, #4]
 800f82a:	61a3      	str	r3, [r4, #24]
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	bf0c      	ite	eq
 800f830:	2201      	moveq	r2, #1
 800f832:	2202      	movne	r2, #2
 800f834:	6122      	str	r2, [r4, #16]
 800f836:	b1a5      	cbz	r5, 800f862 <__d2b+0x92>
 800f838:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f83c:	4405      	add	r5, r0
 800f83e:	603d      	str	r5, [r7, #0]
 800f840:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f844:	6030      	str	r0, [r6, #0]
 800f846:	4620      	mov	r0, r4
 800f848:	b003      	add	sp, #12
 800f84a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f84e:	6161      	str	r1, [r4, #20]
 800f850:	e7ea      	b.n	800f828 <__d2b+0x58>
 800f852:	a801      	add	r0, sp, #4
 800f854:	f7ff fce9 	bl	800f22a <__lo0bits>
 800f858:	9b01      	ldr	r3, [sp, #4]
 800f85a:	6163      	str	r3, [r4, #20]
 800f85c:	3020      	adds	r0, #32
 800f85e:	2201      	movs	r2, #1
 800f860:	e7e8      	b.n	800f834 <__d2b+0x64>
 800f862:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f866:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f86a:	6038      	str	r0, [r7, #0]
 800f86c:	6918      	ldr	r0, [r3, #16]
 800f86e:	f7ff fcbd 	bl	800f1ec <__hi0bits>
 800f872:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f876:	e7e5      	b.n	800f844 <__d2b+0x74>
 800f878:	08011c01 	.word	0x08011c01
 800f87c:	08011c12 	.word	0x08011c12

0800f880 <__ratio>:
 800f880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f884:	b085      	sub	sp, #20
 800f886:	e9cd 1000 	strd	r1, r0, [sp]
 800f88a:	a902      	add	r1, sp, #8
 800f88c:	f7ff ff56 	bl	800f73c <__b2d>
 800f890:	9800      	ldr	r0, [sp, #0]
 800f892:	a903      	add	r1, sp, #12
 800f894:	ec55 4b10 	vmov	r4, r5, d0
 800f898:	f7ff ff50 	bl	800f73c <__b2d>
 800f89c:	9b01      	ldr	r3, [sp, #4]
 800f89e:	6919      	ldr	r1, [r3, #16]
 800f8a0:	9b00      	ldr	r3, [sp, #0]
 800f8a2:	691b      	ldr	r3, [r3, #16]
 800f8a4:	1ac9      	subs	r1, r1, r3
 800f8a6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800f8aa:	1a9b      	subs	r3, r3, r2
 800f8ac:	ec5b ab10 	vmov	sl, fp, d0
 800f8b0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	bfce      	itee	gt
 800f8b8:	462a      	movgt	r2, r5
 800f8ba:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f8be:	465a      	movle	r2, fp
 800f8c0:	462f      	mov	r7, r5
 800f8c2:	46d9      	mov	r9, fp
 800f8c4:	bfcc      	ite	gt
 800f8c6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f8ca:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800f8ce:	464b      	mov	r3, r9
 800f8d0:	4652      	mov	r2, sl
 800f8d2:	4620      	mov	r0, r4
 800f8d4:	4639      	mov	r1, r7
 800f8d6:	f7f0 ffb9 	bl	800084c <__aeabi_ddiv>
 800f8da:	ec41 0b10 	vmov	d0, r0, r1
 800f8de:	b005      	add	sp, #20
 800f8e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f8e4 <__copybits>:
 800f8e4:	3901      	subs	r1, #1
 800f8e6:	b570      	push	{r4, r5, r6, lr}
 800f8e8:	1149      	asrs	r1, r1, #5
 800f8ea:	6914      	ldr	r4, [r2, #16]
 800f8ec:	3101      	adds	r1, #1
 800f8ee:	f102 0314 	add.w	r3, r2, #20
 800f8f2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f8f6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f8fa:	1f05      	subs	r5, r0, #4
 800f8fc:	42a3      	cmp	r3, r4
 800f8fe:	d30c      	bcc.n	800f91a <__copybits+0x36>
 800f900:	1aa3      	subs	r3, r4, r2
 800f902:	3b11      	subs	r3, #17
 800f904:	f023 0303 	bic.w	r3, r3, #3
 800f908:	3211      	adds	r2, #17
 800f90a:	42a2      	cmp	r2, r4
 800f90c:	bf88      	it	hi
 800f90e:	2300      	movhi	r3, #0
 800f910:	4418      	add	r0, r3
 800f912:	2300      	movs	r3, #0
 800f914:	4288      	cmp	r0, r1
 800f916:	d305      	bcc.n	800f924 <__copybits+0x40>
 800f918:	bd70      	pop	{r4, r5, r6, pc}
 800f91a:	f853 6b04 	ldr.w	r6, [r3], #4
 800f91e:	f845 6f04 	str.w	r6, [r5, #4]!
 800f922:	e7eb      	b.n	800f8fc <__copybits+0x18>
 800f924:	f840 3b04 	str.w	r3, [r0], #4
 800f928:	e7f4      	b.n	800f914 <__copybits+0x30>

0800f92a <__any_on>:
 800f92a:	f100 0214 	add.w	r2, r0, #20
 800f92e:	6900      	ldr	r0, [r0, #16]
 800f930:	114b      	asrs	r3, r1, #5
 800f932:	4298      	cmp	r0, r3
 800f934:	b510      	push	{r4, lr}
 800f936:	db11      	blt.n	800f95c <__any_on+0x32>
 800f938:	dd0a      	ble.n	800f950 <__any_on+0x26>
 800f93a:	f011 011f 	ands.w	r1, r1, #31
 800f93e:	d007      	beq.n	800f950 <__any_on+0x26>
 800f940:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f944:	fa24 f001 	lsr.w	r0, r4, r1
 800f948:	fa00 f101 	lsl.w	r1, r0, r1
 800f94c:	428c      	cmp	r4, r1
 800f94e:	d10b      	bne.n	800f968 <__any_on+0x3e>
 800f950:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f954:	4293      	cmp	r3, r2
 800f956:	d803      	bhi.n	800f960 <__any_on+0x36>
 800f958:	2000      	movs	r0, #0
 800f95a:	bd10      	pop	{r4, pc}
 800f95c:	4603      	mov	r3, r0
 800f95e:	e7f7      	b.n	800f950 <__any_on+0x26>
 800f960:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f964:	2900      	cmp	r1, #0
 800f966:	d0f5      	beq.n	800f954 <__any_on+0x2a>
 800f968:	2001      	movs	r0, #1
 800f96a:	e7f6      	b.n	800f95a <__any_on+0x30>

0800f96c <sulp>:
 800f96c:	b570      	push	{r4, r5, r6, lr}
 800f96e:	4604      	mov	r4, r0
 800f970:	460d      	mov	r5, r1
 800f972:	ec45 4b10 	vmov	d0, r4, r5
 800f976:	4616      	mov	r6, r2
 800f978:	f7ff feba 	bl	800f6f0 <__ulp>
 800f97c:	ec51 0b10 	vmov	r0, r1, d0
 800f980:	b17e      	cbz	r6, 800f9a2 <sulp+0x36>
 800f982:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f986:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	dd09      	ble.n	800f9a2 <sulp+0x36>
 800f98e:	051b      	lsls	r3, r3, #20
 800f990:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800f994:	2400      	movs	r4, #0
 800f996:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800f99a:	4622      	mov	r2, r4
 800f99c:	462b      	mov	r3, r5
 800f99e:	f7f0 fe2b 	bl	80005f8 <__aeabi_dmul>
 800f9a2:	ec41 0b10 	vmov	d0, r0, r1
 800f9a6:	bd70      	pop	{r4, r5, r6, pc}

0800f9a8 <_strtod_l>:
 800f9a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9ac:	b09f      	sub	sp, #124	@ 0x7c
 800f9ae:	460c      	mov	r4, r1
 800f9b0:	9217      	str	r2, [sp, #92]	@ 0x5c
 800f9b2:	2200      	movs	r2, #0
 800f9b4:	921a      	str	r2, [sp, #104]	@ 0x68
 800f9b6:	9005      	str	r0, [sp, #20]
 800f9b8:	f04f 0a00 	mov.w	sl, #0
 800f9bc:	f04f 0b00 	mov.w	fp, #0
 800f9c0:	460a      	mov	r2, r1
 800f9c2:	9219      	str	r2, [sp, #100]	@ 0x64
 800f9c4:	7811      	ldrb	r1, [r2, #0]
 800f9c6:	292b      	cmp	r1, #43	@ 0x2b
 800f9c8:	d04a      	beq.n	800fa60 <_strtod_l+0xb8>
 800f9ca:	d838      	bhi.n	800fa3e <_strtod_l+0x96>
 800f9cc:	290d      	cmp	r1, #13
 800f9ce:	d832      	bhi.n	800fa36 <_strtod_l+0x8e>
 800f9d0:	2908      	cmp	r1, #8
 800f9d2:	d832      	bhi.n	800fa3a <_strtod_l+0x92>
 800f9d4:	2900      	cmp	r1, #0
 800f9d6:	d03b      	beq.n	800fa50 <_strtod_l+0xa8>
 800f9d8:	2200      	movs	r2, #0
 800f9da:	920b      	str	r2, [sp, #44]	@ 0x2c
 800f9dc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800f9de:	782a      	ldrb	r2, [r5, #0]
 800f9e0:	2a30      	cmp	r2, #48	@ 0x30
 800f9e2:	f040 80b3 	bne.w	800fb4c <_strtod_l+0x1a4>
 800f9e6:	786a      	ldrb	r2, [r5, #1]
 800f9e8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f9ec:	2a58      	cmp	r2, #88	@ 0x58
 800f9ee:	d16e      	bne.n	800face <_strtod_l+0x126>
 800f9f0:	9302      	str	r3, [sp, #8]
 800f9f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f9f4:	9301      	str	r3, [sp, #4]
 800f9f6:	ab1a      	add	r3, sp, #104	@ 0x68
 800f9f8:	9300      	str	r3, [sp, #0]
 800f9fa:	4a8e      	ldr	r2, [pc, #568]	@ (800fc34 <_strtod_l+0x28c>)
 800f9fc:	9805      	ldr	r0, [sp, #20]
 800f9fe:	ab1b      	add	r3, sp, #108	@ 0x6c
 800fa00:	a919      	add	r1, sp, #100	@ 0x64
 800fa02:	f001 fadb 	bl	8010fbc <__gethex>
 800fa06:	f010 060f 	ands.w	r6, r0, #15
 800fa0a:	4604      	mov	r4, r0
 800fa0c:	d005      	beq.n	800fa1a <_strtod_l+0x72>
 800fa0e:	2e06      	cmp	r6, #6
 800fa10:	d128      	bne.n	800fa64 <_strtod_l+0xbc>
 800fa12:	3501      	adds	r5, #1
 800fa14:	2300      	movs	r3, #0
 800fa16:	9519      	str	r5, [sp, #100]	@ 0x64
 800fa18:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fa1a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	f040 858e 	bne.w	801053e <_strtod_l+0xb96>
 800fa22:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fa24:	b1cb      	cbz	r3, 800fa5a <_strtod_l+0xb2>
 800fa26:	4652      	mov	r2, sl
 800fa28:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800fa2c:	ec43 2b10 	vmov	d0, r2, r3
 800fa30:	b01f      	add	sp, #124	@ 0x7c
 800fa32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa36:	2920      	cmp	r1, #32
 800fa38:	d1ce      	bne.n	800f9d8 <_strtod_l+0x30>
 800fa3a:	3201      	adds	r2, #1
 800fa3c:	e7c1      	b.n	800f9c2 <_strtod_l+0x1a>
 800fa3e:	292d      	cmp	r1, #45	@ 0x2d
 800fa40:	d1ca      	bne.n	800f9d8 <_strtod_l+0x30>
 800fa42:	2101      	movs	r1, #1
 800fa44:	910b      	str	r1, [sp, #44]	@ 0x2c
 800fa46:	1c51      	adds	r1, r2, #1
 800fa48:	9119      	str	r1, [sp, #100]	@ 0x64
 800fa4a:	7852      	ldrb	r2, [r2, #1]
 800fa4c:	2a00      	cmp	r2, #0
 800fa4e:	d1c5      	bne.n	800f9dc <_strtod_l+0x34>
 800fa50:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800fa52:	9419      	str	r4, [sp, #100]	@ 0x64
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	f040 8570 	bne.w	801053a <_strtod_l+0xb92>
 800fa5a:	4652      	mov	r2, sl
 800fa5c:	465b      	mov	r3, fp
 800fa5e:	e7e5      	b.n	800fa2c <_strtod_l+0x84>
 800fa60:	2100      	movs	r1, #0
 800fa62:	e7ef      	b.n	800fa44 <_strtod_l+0x9c>
 800fa64:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800fa66:	b13a      	cbz	r2, 800fa78 <_strtod_l+0xd0>
 800fa68:	2135      	movs	r1, #53	@ 0x35
 800fa6a:	a81c      	add	r0, sp, #112	@ 0x70
 800fa6c:	f7ff ff3a 	bl	800f8e4 <__copybits>
 800fa70:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fa72:	9805      	ldr	r0, [sp, #20]
 800fa74:	f7ff fb08 	bl	800f088 <_Bfree>
 800fa78:	3e01      	subs	r6, #1
 800fa7a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800fa7c:	2e04      	cmp	r6, #4
 800fa7e:	d806      	bhi.n	800fa8e <_strtod_l+0xe6>
 800fa80:	e8df f006 	tbb	[pc, r6]
 800fa84:	201d0314 	.word	0x201d0314
 800fa88:	14          	.byte	0x14
 800fa89:	00          	.byte	0x00
 800fa8a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800fa8e:	05e1      	lsls	r1, r4, #23
 800fa90:	bf48      	it	mi
 800fa92:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800fa96:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800fa9a:	0d1b      	lsrs	r3, r3, #20
 800fa9c:	051b      	lsls	r3, r3, #20
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d1bb      	bne.n	800fa1a <_strtod_l+0x72>
 800faa2:	f7fe fb03 	bl	800e0ac <__errno>
 800faa6:	2322      	movs	r3, #34	@ 0x22
 800faa8:	6003      	str	r3, [r0, #0]
 800faaa:	e7b6      	b.n	800fa1a <_strtod_l+0x72>
 800faac:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800fab0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800fab4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800fab8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800fabc:	e7e7      	b.n	800fa8e <_strtod_l+0xe6>
 800fabe:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800fc3c <_strtod_l+0x294>
 800fac2:	e7e4      	b.n	800fa8e <_strtod_l+0xe6>
 800fac4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800fac8:	f04f 3aff 	mov.w	sl, #4294967295
 800facc:	e7df      	b.n	800fa8e <_strtod_l+0xe6>
 800face:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fad0:	1c5a      	adds	r2, r3, #1
 800fad2:	9219      	str	r2, [sp, #100]	@ 0x64
 800fad4:	785b      	ldrb	r3, [r3, #1]
 800fad6:	2b30      	cmp	r3, #48	@ 0x30
 800fad8:	d0f9      	beq.n	800face <_strtod_l+0x126>
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d09d      	beq.n	800fa1a <_strtod_l+0x72>
 800fade:	2301      	movs	r3, #1
 800fae0:	9309      	str	r3, [sp, #36]	@ 0x24
 800fae2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fae4:	930c      	str	r3, [sp, #48]	@ 0x30
 800fae6:	2300      	movs	r3, #0
 800fae8:	9308      	str	r3, [sp, #32]
 800faea:	930a      	str	r3, [sp, #40]	@ 0x28
 800faec:	461f      	mov	r7, r3
 800faee:	220a      	movs	r2, #10
 800faf0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800faf2:	7805      	ldrb	r5, [r0, #0]
 800faf4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800faf8:	b2d9      	uxtb	r1, r3
 800fafa:	2909      	cmp	r1, #9
 800fafc:	d928      	bls.n	800fb50 <_strtod_l+0x1a8>
 800fafe:	494e      	ldr	r1, [pc, #312]	@ (800fc38 <_strtod_l+0x290>)
 800fb00:	2201      	movs	r2, #1
 800fb02:	f001 f98b 	bl	8010e1c <strncmp>
 800fb06:	2800      	cmp	r0, #0
 800fb08:	d032      	beq.n	800fb70 <_strtod_l+0x1c8>
 800fb0a:	2000      	movs	r0, #0
 800fb0c:	462a      	mov	r2, r5
 800fb0e:	4681      	mov	r9, r0
 800fb10:	463d      	mov	r5, r7
 800fb12:	4603      	mov	r3, r0
 800fb14:	2a65      	cmp	r2, #101	@ 0x65
 800fb16:	d001      	beq.n	800fb1c <_strtod_l+0x174>
 800fb18:	2a45      	cmp	r2, #69	@ 0x45
 800fb1a:	d114      	bne.n	800fb46 <_strtod_l+0x19e>
 800fb1c:	b91d      	cbnz	r5, 800fb26 <_strtod_l+0x17e>
 800fb1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fb20:	4302      	orrs	r2, r0
 800fb22:	d095      	beq.n	800fa50 <_strtod_l+0xa8>
 800fb24:	2500      	movs	r5, #0
 800fb26:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800fb28:	1c62      	adds	r2, r4, #1
 800fb2a:	9219      	str	r2, [sp, #100]	@ 0x64
 800fb2c:	7862      	ldrb	r2, [r4, #1]
 800fb2e:	2a2b      	cmp	r2, #43	@ 0x2b
 800fb30:	d077      	beq.n	800fc22 <_strtod_l+0x27a>
 800fb32:	2a2d      	cmp	r2, #45	@ 0x2d
 800fb34:	d07b      	beq.n	800fc2e <_strtod_l+0x286>
 800fb36:	f04f 0c00 	mov.w	ip, #0
 800fb3a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800fb3e:	2909      	cmp	r1, #9
 800fb40:	f240 8082 	bls.w	800fc48 <_strtod_l+0x2a0>
 800fb44:	9419      	str	r4, [sp, #100]	@ 0x64
 800fb46:	f04f 0800 	mov.w	r8, #0
 800fb4a:	e0a2      	b.n	800fc92 <_strtod_l+0x2ea>
 800fb4c:	2300      	movs	r3, #0
 800fb4e:	e7c7      	b.n	800fae0 <_strtod_l+0x138>
 800fb50:	2f08      	cmp	r7, #8
 800fb52:	bfd5      	itete	le
 800fb54:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800fb56:	9908      	ldrgt	r1, [sp, #32]
 800fb58:	fb02 3301 	mlale	r3, r2, r1, r3
 800fb5c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800fb60:	f100 0001 	add.w	r0, r0, #1
 800fb64:	bfd4      	ite	le
 800fb66:	930a      	strle	r3, [sp, #40]	@ 0x28
 800fb68:	9308      	strgt	r3, [sp, #32]
 800fb6a:	3701      	adds	r7, #1
 800fb6c:	9019      	str	r0, [sp, #100]	@ 0x64
 800fb6e:	e7bf      	b.n	800faf0 <_strtod_l+0x148>
 800fb70:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fb72:	1c5a      	adds	r2, r3, #1
 800fb74:	9219      	str	r2, [sp, #100]	@ 0x64
 800fb76:	785a      	ldrb	r2, [r3, #1]
 800fb78:	b37f      	cbz	r7, 800fbda <_strtod_l+0x232>
 800fb7a:	4681      	mov	r9, r0
 800fb7c:	463d      	mov	r5, r7
 800fb7e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800fb82:	2b09      	cmp	r3, #9
 800fb84:	d912      	bls.n	800fbac <_strtod_l+0x204>
 800fb86:	2301      	movs	r3, #1
 800fb88:	e7c4      	b.n	800fb14 <_strtod_l+0x16c>
 800fb8a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fb8c:	1c5a      	adds	r2, r3, #1
 800fb8e:	9219      	str	r2, [sp, #100]	@ 0x64
 800fb90:	785a      	ldrb	r2, [r3, #1]
 800fb92:	3001      	adds	r0, #1
 800fb94:	2a30      	cmp	r2, #48	@ 0x30
 800fb96:	d0f8      	beq.n	800fb8a <_strtod_l+0x1e2>
 800fb98:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800fb9c:	2b08      	cmp	r3, #8
 800fb9e:	f200 84d3 	bhi.w	8010548 <_strtod_l+0xba0>
 800fba2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fba4:	930c      	str	r3, [sp, #48]	@ 0x30
 800fba6:	4681      	mov	r9, r0
 800fba8:	2000      	movs	r0, #0
 800fbaa:	4605      	mov	r5, r0
 800fbac:	3a30      	subs	r2, #48	@ 0x30
 800fbae:	f100 0301 	add.w	r3, r0, #1
 800fbb2:	d02a      	beq.n	800fc0a <_strtod_l+0x262>
 800fbb4:	4499      	add	r9, r3
 800fbb6:	eb00 0c05 	add.w	ip, r0, r5
 800fbba:	462b      	mov	r3, r5
 800fbbc:	210a      	movs	r1, #10
 800fbbe:	4563      	cmp	r3, ip
 800fbc0:	d10d      	bne.n	800fbde <_strtod_l+0x236>
 800fbc2:	1c69      	adds	r1, r5, #1
 800fbc4:	4401      	add	r1, r0
 800fbc6:	4428      	add	r0, r5
 800fbc8:	2808      	cmp	r0, #8
 800fbca:	dc16      	bgt.n	800fbfa <_strtod_l+0x252>
 800fbcc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800fbce:	230a      	movs	r3, #10
 800fbd0:	fb03 2300 	mla	r3, r3, r0, r2
 800fbd4:	930a      	str	r3, [sp, #40]	@ 0x28
 800fbd6:	2300      	movs	r3, #0
 800fbd8:	e018      	b.n	800fc0c <_strtod_l+0x264>
 800fbda:	4638      	mov	r0, r7
 800fbdc:	e7da      	b.n	800fb94 <_strtod_l+0x1ec>
 800fbde:	2b08      	cmp	r3, #8
 800fbe0:	f103 0301 	add.w	r3, r3, #1
 800fbe4:	dc03      	bgt.n	800fbee <_strtod_l+0x246>
 800fbe6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800fbe8:	434e      	muls	r6, r1
 800fbea:	960a      	str	r6, [sp, #40]	@ 0x28
 800fbec:	e7e7      	b.n	800fbbe <_strtod_l+0x216>
 800fbee:	2b10      	cmp	r3, #16
 800fbf0:	bfde      	ittt	le
 800fbf2:	9e08      	ldrle	r6, [sp, #32]
 800fbf4:	434e      	mulle	r6, r1
 800fbf6:	9608      	strle	r6, [sp, #32]
 800fbf8:	e7e1      	b.n	800fbbe <_strtod_l+0x216>
 800fbfa:	280f      	cmp	r0, #15
 800fbfc:	dceb      	bgt.n	800fbd6 <_strtod_l+0x22e>
 800fbfe:	9808      	ldr	r0, [sp, #32]
 800fc00:	230a      	movs	r3, #10
 800fc02:	fb03 2300 	mla	r3, r3, r0, r2
 800fc06:	9308      	str	r3, [sp, #32]
 800fc08:	e7e5      	b.n	800fbd6 <_strtod_l+0x22e>
 800fc0a:	4629      	mov	r1, r5
 800fc0c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800fc0e:	1c50      	adds	r0, r2, #1
 800fc10:	9019      	str	r0, [sp, #100]	@ 0x64
 800fc12:	7852      	ldrb	r2, [r2, #1]
 800fc14:	4618      	mov	r0, r3
 800fc16:	460d      	mov	r5, r1
 800fc18:	e7b1      	b.n	800fb7e <_strtod_l+0x1d6>
 800fc1a:	f04f 0900 	mov.w	r9, #0
 800fc1e:	2301      	movs	r3, #1
 800fc20:	e77d      	b.n	800fb1e <_strtod_l+0x176>
 800fc22:	f04f 0c00 	mov.w	ip, #0
 800fc26:	1ca2      	adds	r2, r4, #2
 800fc28:	9219      	str	r2, [sp, #100]	@ 0x64
 800fc2a:	78a2      	ldrb	r2, [r4, #2]
 800fc2c:	e785      	b.n	800fb3a <_strtod_l+0x192>
 800fc2e:	f04f 0c01 	mov.w	ip, #1
 800fc32:	e7f8      	b.n	800fc26 <_strtod_l+0x27e>
 800fc34:	08011d80 	.word	0x08011d80
 800fc38:	08011d68 	.word	0x08011d68
 800fc3c:	7ff00000 	.word	0x7ff00000
 800fc40:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800fc42:	1c51      	adds	r1, r2, #1
 800fc44:	9119      	str	r1, [sp, #100]	@ 0x64
 800fc46:	7852      	ldrb	r2, [r2, #1]
 800fc48:	2a30      	cmp	r2, #48	@ 0x30
 800fc4a:	d0f9      	beq.n	800fc40 <_strtod_l+0x298>
 800fc4c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800fc50:	2908      	cmp	r1, #8
 800fc52:	f63f af78 	bhi.w	800fb46 <_strtod_l+0x19e>
 800fc56:	3a30      	subs	r2, #48	@ 0x30
 800fc58:	920e      	str	r2, [sp, #56]	@ 0x38
 800fc5a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800fc5c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800fc5e:	f04f 080a 	mov.w	r8, #10
 800fc62:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800fc64:	1c56      	adds	r6, r2, #1
 800fc66:	9619      	str	r6, [sp, #100]	@ 0x64
 800fc68:	7852      	ldrb	r2, [r2, #1]
 800fc6a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800fc6e:	f1be 0f09 	cmp.w	lr, #9
 800fc72:	d939      	bls.n	800fce8 <_strtod_l+0x340>
 800fc74:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800fc76:	1a76      	subs	r6, r6, r1
 800fc78:	2e08      	cmp	r6, #8
 800fc7a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800fc7e:	dc03      	bgt.n	800fc88 <_strtod_l+0x2e0>
 800fc80:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800fc82:	4588      	cmp	r8, r1
 800fc84:	bfa8      	it	ge
 800fc86:	4688      	movge	r8, r1
 800fc88:	f1bc 0f00 	cmp.w	ip, #0
 800fc8c:	d001      	beq.n	800fc92 <_strtod_l+0x2ea>
 800fc8e:	f1c8 0800 	rsb	r8, r8, #0
 800fc92:	2d00      	cmp	r5, #0
 800fc94:	d14e      	bne.n	800fd34 <_strtod_l+0x38c>
 800fc96:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800fc98:	4308      	orrs	r0, r1
 800fc9a:	f47f aebe 	bne.w	800fa1a <_strtod_l+0x72>
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	f47f aed6 	bne.w	800fa50 <_strtod_l+0xa8>
 800fca4:	2a69      	cmp	r2, #105	@ 0x69
 800fca6:	d028      	beq.n	800fcfa <_strtod_l+0x352>
 800fca8:	dc25      	bgt.n	800fcf6 <_strtod_l+0x34e>
 800fcaa:	2a49      	cmp	r2, #73	@ 0x49
 800fcac:	d025      	beq.n	800fcfa <_strtod_l+0x352>
 800fcae:	2a4e      	cmp	r2, #78	@ 0x4e
 800fcb0:	f47f aece 	bne.w	800fa50 <_strtod_l+0xa8>
 800fcb4:	499b      	ldr	r1, [pc, #620]	@ (800ff24 <_strtod_l+0x57c>)
 800fcb6:	a819      	add	r0, sp, #100	@ 0x64
 800fcb8:	f001 fba2 	bl	8011400 <__match>
 800fcbc:	2800      	cmp	r0, #0
 800fcbe:	f43f aec7 	beq.w	800fa50 <_strtod_l+0xa8>
 800fcc2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fcc4:	781b      	ldrb	r3, [r3, #0]
 800fcc6:	2b28      	cmp	r3, #40	@ 0x28
 800fcc8:	d12e      	bne.n	800fd28 <_strtod_l+0x380>
 800fcca:	4997      	ldr	r1, [pc, #604]	@ (800ff28 <_strtod_l+0x580>)
 800fccc:	aa1c      	add	r2, sp, #112	@ 0x70
 800fcce:	a819      	add	r0, sp, #100	@ 0x64
 800fcd0:	f001 fbaa 	bl	8011428 <__hexnan>
 800fcd4:	2805      	cmp	r0, #5
 800fcd6:	d127      	bne.n	800fd28 <_strtod_l+0x380>
 800fcd8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800fcda:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800fcde:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800fce2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800fce6:	e698      	b.n	800fa1a <_strtod_l+0x72>
 800fce8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800fcea:	fb08 2101 	mla	r1, r8, r1, r2
 800fcee:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800fcf2:	920e      	str	r2, [sp, #56]	@ 0x38
 800fcf4:	e7b5      	b.n	800fc62 <_strtod_l+0x2ba>
 800fcf6:	2a6e      	cmp	r2, #110	@ 0x6e
 800fcf8:	e7da      	b.n	800fcb0 <_strtod_l+0x308>
 800fcfa:	498c      	ldr	r1, [pc, #560]	@ (800ff2c <_strtod_l+0x584>)
 800fcfc:	a819      	add	r0, sp, #100	@ 0x64
 800fcfe:	f001 fb7f 	bl	8011400 <__match>
 800fd02:	2800      	cmp	r0, #0
 800fd04:	f43f aea4 	beq.w	800fa50 <_strtod_l+0xa8>
 800fd08:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fd0a:	4989      	ldr	r1, [pc, #548]	@ (800ff30 <_strtod_l+0x588>)
 800fd0c:	3b01      	subs	r3, #1
 800fd0e:	a819      	add	r0, sp, #100	@ 0x64
 800fd10:	9319      	str	r3, [sp, #100]	@ 0x64
 800fd12:	f001 fb75 	bl	8011400 <__match>
 800fd16:	b910      	cbnz	r0, 800fd1e <_strtod_l+0x376>
 800fd18:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fd1a:	3301      	adds	r3, #1
 800fd1c:	9319      	str	r3, [sp, #100]	@ 0x64
 800fd1e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800ff40 <_strtod_l+0x598>
 800fd22:	f04f 0a00 	mov.w	sl, #0
 800fd26:	e678      	b.n	800fa1a <_strtod_l+0x72>
 800fd28:	4882      	ldr	r0, [pc, #520]	@ (800ff34 <_strtod_l+0x58c>)
 800fd2a:	f001 f8bd 	bl	8010ea8 <nan>
 800fd2e:	ec5b ab10 	vmov	sl, fp, d0
 800fd32:	e672      	b.n	800fa1a <_strtod_l+0x72>
 800fd34:	eba8 0309 	sub.w	r3, r8, r9
 800fd38:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800fd3a:	9309      	str	r3, [sp, #36]	@ 0x24
 800fd3c:	2f00      	cmp	r7, #0
 800fd3e:	bf08      	it	eq
 800fd40:	462f      	moveq	r7, r5
 800fd42:	2d10      	cmp	r5, #16
 800fd44:	462c      	mov	r4, r5
 800fd46:	bfa8      	it	ge
 800fd48:	2410      	movge	r4, #16
 800fd4a:	f7f0 fbdb 	bl	8000504 <__aeabi_ui2d>
 800fd4e:	2d09      	cmp	r5, #9
 800fd50:	4682      	mov	sl, r0
 800fd52:	468b      	mov	fp, r1
 800fd54:	dc13      	bgt.n	800fd7e <_strtod_l+0x3d6>
 800fd56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	f43f ae5e 	beq.w	800fa1a <_strtod_l+0x72>
 800fd5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fd60:	dd78      	ble.n	800fe54 <_strtod_l+0x4ac>
 800fd62:	2b16      	cmp	r3, #22
 800fd64:	dc5f      	bgt.n	800fe26 <_strtod_l+0x47e>
 800fd66:	4974      	ldr	r1, [pc, #464]	@ (800ff38 <_strtod_l+0x590>)
 800fd68:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800fd6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fd70:	4652      	mov	r2, sl
 800fd72:	465b      	mov	r3, fp
 800fd74:	f7f0 fc40 	bl	80005f8 <__aeabi_dmul>
 800fd78:	4682      	mov	sl, r0
 800fd7a:	468b      	mov	fp, r1
 800fd7c:	e64d      	b.n	800fa1a <_strtod_l+0x72>
 800fd7e:	4b6e      	ldr	r3, [pc, #440]	@ (800ff38 <_strtod_l+0x590>)
 800fd80:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fd84:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800fd88:	f7f0 fc36 	bl	80005f8 <__aeabi_dmul>
 800fd8c:	4682      	mov	sl, r0
 800fd8e:	9808      	ldr	r0, [sp, #32]
 800fd90:	468b      	mov	fp, r1
 800fd92:	f7f0 fbb7 	bl	8000504 <__aeabi_ui2d>
 800fd96:	4602      	mov	r2, r0
 800fd98:	460b      	mov	r3, r1
 800fd9a:	4650      	mov	r0, sl
 800fd9c:	4659      	mov	r1, fp
 800fd9e:	f7f0 fa75 	bl	800028c <__adddf3>
 800fda2:	2d0f      	cmp	r5, #15
 800fda4:	4682      	mov	sl, r0
 800fda6:	468b      	mov	fp, r1
 800fda8:	ddd5      	ble.n	800fd56 <_strtod_l+0x3ae>
 800fdaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fdac:	1b2c      	subs	r4, r5, r4
 800fdae:	441c      	add	r4, r3
 800fdb0:	2c00      	cmp	r4, #0
 800fdb2:	f340 8096 	ble.w	800fee2 <_strtod_l+0x53a>
 800fdb6:	f014 030f 	ands.w	r3, r4, #15
 800fdba:	d00a      	beq.n	800fdd2 <_strtod_l+0x42a>
 800fdbc:	495e      	ldr	r1, [pc, #376]	@ (800ff38 <_strtod_l+0x590>)
 800fdbe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800fdc2:	4652      	mov	r2, sl
 800fdc4:	465b      	mov	r3, fp
 800fdc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fdca:	f7f0 fc15 	bl	80005f8 <__aeabi_dmul>
 800fdce:	4682      	mov	sl, r0
 800fdd0:	468b      	mov	fp, r1
 800fdd2:	f034 040f 	bics.w	r4, r4, #15
 800fdd6:	d073      	beq.n	800fec0 <_strtod_l+0x518>
 800fdd8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800fddc:	dd48      	ble.n	800fe70 <_strtod_l+0x4c8>
 800fdde:	2400      	movs	r4, #0
 800fde0:	46a0      	mov	r8, r4
 800fde2:	940a      	str	r4, [sp, #40]	@ 0x28
 800fde4:	46a1      	mov	r9, r4
 800fde6:	9a05      	ldr	r2, [sp, #20]
 800fde8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800ff40 <_strtod_l+0x598>
 800fdec:	2322      	movs	r3, #34	@ 0x22
 800fdee:	6013      	str	r3, [r2, #0]
 800fdf0:	f04f 0a00 	mov.w	sl, #0
 800fdf4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	f43f ae0f 	beq.w	800fa1a <_strtod_l+0x72>
 800fdfc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fdfe:	9805      	ldr	r0, [sp, #20]
 800fe00:	f7ff f942 	bl	800f088 <_Bfree>
 800fe04:	9805      	ldr	r0, [sp, #20]
 800fe06:	4649      	mov	r1, r9
 800fe08:	f7ff f93e 	bl	800f088 <_Bfree>
 800fe0c:	9805      	ldr	r0, [sp, #20]
 800fe0e:	4641      	mov	r1, r8
 800fe10:	f7ff f93a 	bl	800f088 <_Bfree>
 800fe14:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800fe16:	9805      	ldr	r0, [sp, #20]
 800fe18:	f7ff f936 	bl	800f088 <_Bfree>
 800fe1c:	9805      	ldr	r0, [sp, #20]
 800fe1e:	4621      	mov	r1, r4
 800fe20:	f7ff f932 	bl	800f088 <_Bfree>
 800fe24:	e5f9      	b.n	800fa1a <_strtod_l+0x72>
 800fe26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fe28:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800fe2c:	4293      	cmp	r3, r2
 800fe2e:	dbbc      	blt.n	800fdaa <_strtod_l+0x402>
 800fe30:	4c41      	ldr	r4, [pc, #260]	@ (800ff38 <_strtod_l+0x590>)
 800fe32:	f1c5 050f 	rsb	r5, r5, #15
 800fe36:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800fe3a:	4652      	mov	r2, sl
 800fe3c:	465b      	mov	r3, fp
 800fe3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fe42:	f7f0 fbd9 	bl	80005f8 <__aeabi_dmul>
 800fe46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe48:	1b5d      	subs	r5, r3, r5
 800fe4a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800fe4e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800fe52:	e78f      	b.n	800fd74 <_strtod_l+0x3cc>
 800fe54:	3316      	adds	r3, #22
 800fe56:	dba8      	blt.n	800fdaa <_strtod_l+0x402>
 800fe58:	4b37      	ldr	r3, [pc, #220]	@ (800ff38 <_strtod_l+0x590>)
 800fe5a:	eba9 0808 	sub.w	r8, r9, r8
 800fe5e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800fe62:	e9d8 2300 	ldrd	r2, r3, [r8]
 800fe66:	4650      	mov	r0, sl
 800fe68:	4659      	mov	r1, fp
 800fe6a:	f7f0 fcef 	bl	800084c <__aeabi_ddiv>
 800fe6e:	e783      	b.n	800fd78 <_strtod_l+0x3d0>
 800fe70:	4b32      	ldr	r3, [pc, #200]	@ (800ff3c <_strtod_l+0x594>)
 800fe72:	9308      	str	r3, [sp, #32]
 800fe74:	2300      	movs	r3, #0
 800fe76:	1124      	asrs	r4, r4, #4
 800fe78:	4650      	mov	r0, sl
 800fe7a:	4659      	mov	r1, fp
 800fe7c:	461e      	mov	r6, r3
 800fe7e:	2c01      	cmp	r4, #1
 800fe80:	dc21      	bgt.n	800fec6 <_strtod_l+0x51e>
 800fe82:	b10b      	cbz	r3, 800fe88 <_strtod_l+0x4e0>
 800fe84:	4682      	mov	sl, r0
 800fe86:	468b      	mov	fp, r1
 800fe88:	492c      	ldr	r1, [pc, #176]	@ (800ff3c <_strtod_l+0x594>)
 800fe8a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800fe8e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800fe92:	4652      	mov	r2, sl
 800fe94:	465b      	mov	r3, fp
 800fe96:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fe9a:	f7f0 fbad 	bl	80005f8 <__aeabi_dmul>
 800fe9e:	4b28      	ldr	r3, [pc, #160]	@ (800ff40 <_strtod_l+0x598>)
 800fea0:	460a      	mov	r2, r1
 800fea2:	400b      	ands	r3, r1
 800fea4:	4927      	ldr	r1, [pc, #156]	@ (800ff44 <_strtod_l+0x59c>)
 800fea6:	428b      	cmp	r3, r1
 800fea8:	4682      	mov	sl, r0
 800feaa:	d898      	bhi.n	800fdde <_strtod_l+0x436>
 800feac:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800feb0:	428b      	cmp	r3, r1
 800feb2:	bf86      	itte	hi
 800feb4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800ff48 <_strtod_l+0x5a0>
 800feb8:	f04f 3aff 	movhi.w	sl, #4294967295
 800febc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800fec0:	2300      	movs	r3, #0
 800fec2:	9308      	str	r3, [sp, #32]
 800fec4:	e07a      	b.n	800ffbc <_strtod_l+0x614>
 800fec6:	07e2      	lsls	r2, r4, #31
 800fec8:	d505      	bpl.n	800fed6 <_strtod_l+0x52e>
 800feca:	9b08      	ldr	r3, [sp, #32]
 800fecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fed0:	f7f0 fb92 	bl	80005f8 <__aeabi_dmul>
 800fed4:	2301      	movs	r3, #1
 800fed6:	9a08      	ldr	r2, [sp, #32]
 800fed8:	3208      	adds	r2, #8
 800feda:	3601      	adds	r6, #1
 800fedc:	1064      	asrs	r4, r4, #1
 800fede:	9208      	str	r2, [sp, #32]
 800fee0:	e7cd      	b.n	800fe7e <_strtod_l+0x4d6>
 800fee2:	d0ed      	beq.n	800fec0 <_strtod_l+0x518>
 800fee4:	4264      	negs	r4, r4
 800fee6:	f014 020f 	ands.w	r2, r4, #15
 800feea:	d00a      	beq.n	800ff02 <_strtod_l+0x55a>
 800feec:	4b12      	ldr	r3, [pc, #72]	@ (800ff38 <_strtod_l+0x590>)
 800feee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fef2:	4650      	mov	r0, sl
 800fef4:	4659      	mov	r1, fp
 800fef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fefa:	f7f0 fca7 	bl	800084c <__aeabi_ddiv>
 800fefe:	4682      	mov	sl, r0
 800ff00:	468b      	mov	fp, r1
 800ff02:	1124      	asrs	r4, r4, #4
 800ff04:	d0dc      	beq.n	800fec0 <_strtod_l+0x518>
 800ff06:	2c1f      	cmp	r4, #31
 800ff08:	dd20      	ble.n	800ff4c <_strtod_l+0x5a4>
 800ff0a:	2400      	movs	r4, #0
 800ff0c:	46a0      	mov	r8, r4
 800ff0e:	940a      	str	r4, [sp, #40]	@ 0x28
 800ff10:	46a1      	mov	r9, r4
 800ff12:	9a05      	ldr	r2, [sp, #20]
 800ff14:	2322      	movs	r3, #34	@ 0x22
 800ff16:	f04f 0a00 	mov.w	sl, #0
 800ff1a:	f04f 0b00 	mov.w	fp, #0
 800ff1e:	6013      	str	r3, [r2, #0]
 800ff20:	e768      	b.n	800fdf4 <_strtod_l+0x44c>
 800ff22:	bf00      	nop
 800ff24:	08011b34 	.word	0x08011b34
 800ff28:	08011d6c 	.word	0x08011d6c
 800ff2c:	08011b2c 	.word	0x08011b2c
 800ff30:	08011b9f 	.word	0x08011b9f
 800ff34:	08011b9b 	.word	0x08011b9b
 800ff38:	08011ca0 	.word	0x08011ca0
 800ff3c:	08011c78 	.word	0x08011c78
 800ff40:	7ff00000 	.word	0x7ff00000
 800ff44:	7ca00000 	.word	0x7ca00000
 800ff48:	7fefffff 	.word	0x7fefffff
 800ff4c:	f014 0310 	ands.w	r3, r4, #16
 800ff50:	bf18      	it	ne
 800ff52:	236a      	movne	r3, #106	@ 0x6a
 800ff54:	4ea9      	ldr	r6, [pc, #676]	@ (80101fc <_strtod_l+0x854>)
 800ff56:	9308      	str	r3, [sp, #32]
 800ff58:	4650      	mov	r0, sl
 800ff5a:	4659      	mov	r1, fp
 800ff5c:	2300      	movs	r3, #0
 800ff5e:	07e2      	lsls	r2, r4, #31
 800ff60:	d504      	bpl.n	800ff6c <_strtod_l+0x5c4>
 800ff62:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ff66:	f7f0 fb47 	bl	80005f8 <__aeabi_dmul>
 800ff6a:	2301      	movs	r3, #1
 800ff6c:	1064      	asrs	r4, r4, #1
 800ff6e:	f106 0608 	add.w	r6, r6, #8
 800ff72:	d1f4      	bne.n	800ff5e <_strtod_l+0x5b6>
 800ff74:	b10b      	cbz	r3, 800ff7a <_strtod_l+0x5d2>
 800ff76:	4682      	mov	sl, r0
 800ff78:	468b      	mov	fp, r1
 800ff7a:	9b08      	ldr	r3, [sp, #32]
 800ff7c:	b1b3      	cbz	r3, 800ffac <_strtod_l+0x604>
 800ff7e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ff82:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	4659      	mov	r1, fp
 800ff8a:	dd0f      	ble.n	800ffac <_strtod_l+0x604>
 800ff8c:	2b1f      	cmp	r3, #31
 800ff8e:	dd55      	ble.n	801003c <_strtod_l+0x694>
 800ff90:	2b34      	cmp	r3, #52	@ 0x34
 800ff92:	bfde      	ittt	le
 800ff94:	f04f 33ff 	movle.w	r3, #4294967295
 800ff98:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800ff9c:	4093      	lslle	r3, r2
 800ff9e:	f04f 0a00 	mov.w	sl, #0
 800ffa2:	bfcc      	ite	gt
 800ffa4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800ffa8:	ea03 0b01 	andle.w	fp, r3, r1
 800ffac:	2200      	movs	r2, #0
 800ffae:	2300      	movs	r3, #0
 800ffb0:	4650      	mov	r0, sl
 800ffb2:	4659      	mov	r1, fp
 800ffb4:	f7f0 fd88 	bl	8000ac8 <__aeabi_dcmpeq>
 800ffb8:	2800      	cmp	r0, #0
 800ffba:	d1a6      	bne.n	800ff0a <_strtod_l+0x562>
 800ffbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ffbe:	9300      	str	r3, [sp, #0]
 800ffc0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ffc2:	9805      	ldr	r0, [sp, #20]
 800ffc4:	462b      	mov	r3, r5
 800ffc6:	463a      	mov	r2, r7
 800ffc8:	f7ff f8c6 	bl	800f158 <__s2b>
 800ffcc:	900a      	str	r0, [sp, #40]	@ 0x28
 800ffce:	2800      	cmp	r0, #0
 800ffd0:	f43f af05 	beq.w	800fdde <_strtod_l+0x436>
 800ffd4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ffd6:	2a00      	cmp	r2, #0
 800ffd8:	eba9 0308 	sub.w	r3, r9, r8
 800ffdc:	bfa8      	it	ge
 800ffde:	2300      	movge	r3, #0
 800ffe0:	9312      	str	r3, [sp, #72]	@ 0x48
 800ffe2:	2400      	movs	r4, #0
 800ffe4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ffe8:	9316      	str	r3, [sp, #88]	@ 0x58
 800ffea:	46a0      	mov	r8, r4
 800ffec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ffee:	9805      	ldr	r0, [sp, #20]
 800fff0:	6859      	ldr	r1, [r3, #4]
 800fff2:	f7ff f809 	bl	800f008 <_Balloc>
 800fff6:	4681      	mov	r9, r0
 800fff8:	2800      	cmp	r0, #0
 800fffa:	f43f aef4 	beq.w	800fde6 <_strtod_l+0x43e>
 800fffe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010000:	691a      	ldr	r2, [r3, #16]
 8010002:	3202      	adds	r2, #2
 8010004:	f103 010c 	add.w	r1, r3, #12
 8010008:	0092      	lsls	r2, r2, #2
 801000a:	300c      	adds	r0, #12
 801000c:	f7fe f87b 	bl	800e106 <memcpy>
 8010010:	ec4b ab10 	vmov	d0, sl, fp
 8010014:	9805      	ldr	r0, [sp, #20]
 8010016:	aa1c      	add	r2, sp, #112	@ 0x70
 8010018:	a91b      	add	r1, sp, #108	@ 0x6c
 801001a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 801001e:	f7ff fbd7 	bl	800f7d0 <__d2b>
 8010022:	901a      	str	r0, [sp, #104]	@ 0x68
 8010024:	2800      	cmp	r0, #0
 8010026:	f43f aede 	beq.w	800fde6 <_strtod_l+0x43e>
 801002a:	9805      	ldr	r0, [sp, #20]
 801002c:	2101      	movs	r1, #1
 801002e:	f7ff f929 	bl	800f284 <__i2b>
 8010032:	4680      	mov	r8, r0
 8010034:	b948      	cbnz	r0, 801004a <_strtod_l+0x6a2>
 8010036:	f04f 0800 	mov.w	r8, #0
 801003a:	e6d4      	b.n	800fde6 <_strtod_l+0x43e>
 801003c:	f04f 32ff 	mov.w	r2, #4294967295
 8010040:	fa02 f303 	lsl.w	r3, r2, r3
 8010044:	ea03 0a0a 	and.w	sl, r3, sl
 8010048:	e7b0      	b.n	800ffac <_strtod_l+0x604>
 801004a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 801004c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801004e:	2d00      	cmp	r5, #0
 8010050:	bfab      	itete	ge
 8010052:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8010054:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8010056:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8010058:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 801005a:	bfac      	ite	ge
 801005c:	18ef      	addge	r7, r5, r3
 801005e:	1b5e      	sublt	r6, r3, r5
 8010060:	9b08      	ldr	r3, [sp, #32]
 8010062:	1aed      	subs	r5, r5, r3
 8010064:	4415      	add	r5, r2
 8010066:	4b66      	ldr	r3, [pc, #408]	@ (8010200 <_strtod_l+0x858>)
 8010068:	3d01      	subs	r5, #1
 801006a:	429d      	cmp	r5, r3
 801006c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8010070:	da50      	bge.n	8010114 <_strtod_l+0x76c>
 8010072:	1b5b      	subs	r3, r3, r5
 8010074:	2b1f      	cmp	r3, #31
 8010076:	eba2 0203 	sub.w	r2, r2, r3
 801007a:	f04f 0101 	mov.w	r1, #1
 801007e:	dc3d      	bgt.n	80100fc <_strtod_l+0x754>
 8010080:	fa01 f303 	lsl.w	r3, r1, r3
 8010084:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010086:	2300      	movs	r3, #0
 8010088:	9310      	str	r3, [sp, #64]	@ 0x40
 801008a:	18bd      	adds	r5, r7, r2
 801008c:	9b08      	ldr	r3, [sp, #32]
 801008e:	42af      	cmp	r7, r5
 8010090:	4416      	add	r6, r2
 8010092:	441e      	add	r6, r3
 8010094:	463b      	mov	r3, r7
 8010096:	bfa8      	it	ge
 8010098:	462b      	movge	r3, r5
 801009a:	42b3      	cmp	r3, r6
 801009c:	bfa8      	it	ge
 801009e:	4633      	movge	r3, r6
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	bfc2      	ittt	gt
 80100a4:	1aed      	subgt	r5, r5, r3
 80100a6:	1af6      	subgt	r6, r6, r3
 80100a8:	1aff      	subgt	r7, r7, r3
 80100aa:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	dd16      	ble.n	80100de <_strtod_l+0x736>
 80100b0:	4641      	mov	r1, r8
 80100b2:	9805      	ldr	r0, [sp, #20]
 80100b4:	461a      	mov	r2, r3
 80100b6:	f7ff f9a5 	bl	800f404 <__pow5mult>
 80100ba:	4680      	mov	r8, r0
 80100bc:	2800      	cmp	r0, #0
 80100be:	d0ba      	beq.n	8010036 <_strtod_l+0x68e>
 80100c0:	4601      	mov	r1, r0
 80100c2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80100c4:	9805      	ldr	r0, [sp, #20]
 80100c6:	f7ff f8f3 	bl	800f2b0 <__multiply>
 80100ca:	900e      	str	r0, [sp, #56]	@ 0x38
 80100cc:	2800      	cmp	r0, #0
 80100ce:	f43f ae8a 	beq.w	800fde6 <_strtod_l+0x43e>
 80100d2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80100d4:	9805      	ldr	r0, [sp, #20]
 80100d6:	f7fe ffd7 	bl	800f088 <_Bfree>
 80100da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80100dc:	931a      	str	r3, [sp, #104]	@ 0x68
 80100de:	2d00      	cmp	r5, #0
 80100e0:	dc1d      	bgt.n	801011e <_strtod_l+0x776>
 80100e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	dd23      	ble.n	8010130 <_strtod_l+0x788>
 80100e8:	4649      	mov	r1, r9
 80100ea:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80100ec:	9805      	ldr	r0, [sp, #20]
 80100ee:	f7ff f989 	bl	800f404 <__pow5mult>
 80100f2:	4681      	mov	r9, r0
 80100f4:	b9e0      	cbnz	r0, 8010130 <_strtod_l+0x788>
 80100f6:	f04f 0900 	mov.w	r9, #0
 80100fa:	e674      	b.n	800fde6 <_strtod_l+0x43e>
 80100fc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8010100:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8010104:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8010108:	35e2      	adds	r5, #226	@ 0xe2
 801010a:	fa01 f305 	lsl.w	r3, r1, r5
 801010e:	9310      	str	r3, [sp, #64]	@ 0x40
 8010110:	9113      	str	r1, [sp, #76]	@ 0x4c
 8010112:	e7ba      	b.n	801008a <_strtod_l+0x6e2>
 8010114:	2300      	movs	r3, #0
 8010116:	9310      	str	r3, [sp, #64]	@ 0x40
 8010118:	2301      	movs	r3, #1
 801011a:	9313      	str	r3, [sp, #76]	@ 0x4c
 801011c:	e7b5      	b.n	801008a <_strtod_l+0x6e2>
 801011e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010120:	9805      	ldr	r0, [sp, #20]
 8010122:	462a      	mov	r2, r5
 8010124:	f7ff f9c8 	bl	800f4b8 <__lshift>
 8010128:	901a      	str	r0, [sp, #104]	@ 0x68
 801012a:	2800      	cmp	r0, #0
 801012c:	d1d9      	bne.n	80100e2 <_strtod_l+0x73a>
 801012e:	e65a      	b.n	800fde6 <_strtod_l+0x43e>
 8010130:	2e00      	cmp	r6, #0
 8010132:	dd07      	ble.n	8010144 <_strtod_l+0x79c>
 8010134:	4649      	mov	r1, r9
 8010136:	9805      	ldr	r0, [sp, #20]
 8010138:	4632      	mov	r2, r6
 801013a:	f7ff f9bd 	bl	800f4b8 <__lshift>
 801013e:	4681      	mov	r9, r0
 8010140:	2800      	cmp	r0, #0
 8010142:	d0d8      	beq.n	80100f6 <_strtod_l+0x74e>
 8010144:	2f00      	cmp	r7, #0
 8010146:	dd08      	ble.n	801015a <_strtod_l+0x7b2>
 8010148:	4641      	mov	r1, r8
 801014a:	9805      	ldr	r0, [sp, #20]
 801014c:	463a      	mov	r2, r7
 801014e:	f7ff f9b3 	bl	800f4b8 <__lshift>
 8010152:	4680      	mov	r8, r0
 8010154:	2800      	cmp	r0, #0
 8010156:	f43f ae46 	beq.w	800fde6 <_strtod_l+0x43e>
 801015a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801015c:	9805      	ldr	r0, [sp, #20]
 801015e:	464a      	mov	r2, r9
 8010160:	f7ff fa32 	bl	800f5c8 <__mdiff>
 8010164:	4604      	mov	r4, r0
 8010166:	2800      	cmp	r0, #0
 8010168:	f43f ae3d 	beq.w	800fde6 <_strtod_l+0x43e>
 801016c:	68c3      	ldr	r3, [r0, #12]
 801016e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010170:	2300      	movs	r3, #0
 8010172:	60c3      	str	r3, [r0, #12]
 8010174:	4641      	mov	r1, r8
 8010176:	f7ff fa0b 	bl	800f590 <__mcmp>
 801017a:	2800      	cmp	r0, #0
 801017c:	da46      	bge.n	801020c <_strtod_l+0x864>
 801017e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010180:	ea53 030a 	orrs.w	r3, r3, sl
 8010184:	d16c      	bne.n	8010260 <_strtod_l+0x8b8>
 8010186:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801018a:	2b00      	cmp	r3, #0
 801018c:	d168      	bne.n	8010260 <_strtod_l+0x8b8>
 801018e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010192:	0d1b      	lsrs	r3, r3, #20
 8010194:	051b      	lsls	r3, r3, #20
 8010196:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801019a:	d961      	bls.n	8010260 <_strtod_l+0x8b8>
 801019c:	6963      	ldr	r3, [r4, #20]
 801019e:	b913      	cbnz	r3, 80101a6 <_strtod_l+0x7fe>
 80101a0:	6923      	ldr	r3, [r4, #16]
 80101a2:	2b01      	cmp	r3, #1
 80101a4:	dd5c      	ble.n	8010260 <_strtod_l+0x8b8>
 80101a6:	4621      	mov	r1, r4
 80101a8:	2201      	movs	r2, #1
 80101aa:	9805      	ldr	r0, [sp, #20]
 80101ac:	f7ff f984 	bl	800f4b8 <__lshift>
 80101b0:	4641      	mov	r1, r8
 80101b2:	4604      	mov	r4, r0
 80101b4:	f7ff f9ec 	bl	800f590 <__mcmp>
 80101b8:	2800      	cmp	r0, #0
 80101ba:	dd51      	ble.n	8010260 <_strtod_l+0x8b8>
 80101bc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80101c0:	9a08      	ldr	r2, [sp, #32]
 80101c2:	0d1b      	lsrs	r3, r3, #20
 80101c4:	051b      	lsls	r3, r3, #20
 80101c6:	2a00      	cmp	r2, #0
 80101c8:	d06b      	beq.n	80102a2 <_strtod_l+0x8fa>
 80101ca:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80101ce:	d868      	bhi.n	80102a2 <_strtod_l+0x8fa>
 80101d0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80101d4:	f67f ae9d 	bls.w	800ff12 <_strtod_l+0x56a>
 80101d8:	4b0a      	ldr	r3, [pc, #40]	@ (8010204 <_strtod_l+0x85c>)
 80101da:	4650      	mov	r0, sl
 80101dc:	4659      	mov	r1, fp
 80101de:	2200      	movs	r2, #0
 80101e0:	f7f0 fa0a 	bl	80005f8 <__aeabi_dmul>
 80101e4:	4b08      	ldr	r3, [pc, #32]	@ (8010208 <_strtod_l+0x860>)
 80101e6:	400b      	ands	r3, r1
 80101e8:	4682      	mov	sl, r0
 80101ea:	468b      	mov	fp, r1
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	f47f ae05 	bne.w	800fdfc <_strtod_l+0x454>
 80101f2:	9a05      	ldr	r2, [sp, #20]
 80101f4:	2322      	movs	r3, #34	@ 0x22
 80101f6:	6013      	str	r3, [r2, #0]
 80101f8:	e600      	b.n	800fdfc <_strtod_l+0x454>
 80101fa:	bf00      	nop
 80101fc:	08011d98 	.word	0x08011d98
 8010200:	fffffc02 	.word	0xfffffc02
 8010204:	39500000 	.word	0x39500000
 8010208:	7ff00000 	.word	0x7ff00000
 801020c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8010210:	d165      	bne.n	80102de <_strtod_l+0x936>
 8010212:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010214:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010218:	b35a      	cbz	r2, 8010272 <_strtod_l+0x8ca>
 801021a:	4a9f      	ldr	r2, [pc, #636]	@ (8010498 <_strtod_l+0xaf0>)
 801021c:	4293      	cmp	r3, r2
 801021e:	d12b      	bne.n	8010278 <_strtod_l+0x8d0>
 8010220:	9b08      	ldr	r3, [sp, #32]
 8010222:	4651      	mov	r1, sl
 8010224:	b303      	cbz	r3, 8010268 <_strtod_l+0x8c0>
 8010226:	4b9d      	ldr	r3, [pc, #628]	@ (801049c <_strtod_l+0xaf4>)
 8010228:	465a      	mov	r2, fp
 801022a:	4013      	ands	r3, r2
 801022c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8010230:	f04f 32ff 	mov.w	r2, #4294967295
 8010234:	d81b      	bhi.n	801026e <_strtod_l+0x8c6>
 8010236:	0d1b      	lsrs	r3, r3, #20
 8010238:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801023c:	fa02 f303 	lsl.w	r3, r2, r3
 8010240:	4299      	cmp	r1, r3
 8010242:	d119      	bne.n	8010278 <_strtod_l+0x8d0>
 8010244:	4b96      	ldr	r3, [pc, #600]	@ (80104a0 <_strtod_l+0xaf8>)
 8010246:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010248:	429a      	cmp	r2, r3
 801024a:	d102      	bne.n	8010252 <_strtod_l+0x8aa>
 801024c:	3101      	adds	r1, #1
 801024e:	f43f adca 	beq.w	800fde6 <_strtod_l+0x43e>
 8010252:	4b92      	ldr	r3, [pc, #584]	@ (801049c <_strtod_l+0xaf4>)
 8010254:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010256:	401a      	ands	r2, r3
 8010258:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 801025c:	f04f 0a00 	mov.w	sl, #0
 8010260:	9b08      	ldr	r3, [sp, #32]
 8010262:	2b00      	cmp	r3, #0
 8010264:	d1b8      	bne.n	80101d8 <_strtod_l+0x830>
 8010266:	e5c9      	b.n	800fdfc <_strtod_l+0x454>
 8010268:	f04f 33ff 	mov.w	r3, #4294967295
 801026c:	e7e8      	b.n	8010240 <_strtod_l+0x898>
 801026e:	4613      	mov	r3, r2
 8010270:	e7e6      	b.n	8010240 <_strtod_l+0x898>
 8010272:	ea53 030a 	orrs.w	r3, r3, sl
 8010276:	d0a1      	beq.n	80101bc <_strtod_l+0x814>
 8010278:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801027a:	b1db      	cbz	r3, 80102b4 <_strtod_l+0x90c>
 801027c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801027e:	4213      	tst	r3, r2
 8010280:	d0ee      	beq.n	8010260 <_strtod_l+0x8b8>
 8010282:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010284:	9a08      	ldr	r2, [sp, #32]
 8010286:	4650      	mov	r0, sl
 8010288:	4659      	mov	r1, fp
 801028a:	b1bb      	cbz	r3, 80102bc <_strtod_l+0x914>
 801028c:	f7ff fb6e 	bl	800f96c <sulp>
 8010290:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010294:	ec53 2b10 	vmov	r2, r3, d0
 8010298:	f7ef fff8 	bl	800028c <__adddf3>
 801029c:	4682      	mov	sl, r0
 801029e:	468b      	mov	fp, r1
 80102a0:	e7de      	b.n	8010260 <_strtod_l+0x8b8>
 80102a2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80102a6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80102aa:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80102ae:	f04f 3aff 	mov.w	sl, #4294967295
 80102b2:	e7d5      	b.n	8010260 <_strtod_l+0x8b8>
 80102b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80102b6:	ea13 0f0a 	tst.w	r3, sl
 80102ba:	e7e1      	b.n	8010280 <_strtod_l+0x8d8>
 80102bc:	f7ff fb56 	bl	800f96c <sulp>
 80102c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80102c4:	ec53 2b10 	vmov	r2, r3, d0
 80102c8:	f7ef ffde 	bl	8000288 <__aeabi_dsub>
 80102cc:	2200      	movs	r2, #0
 80102ce:	2300      	movs	r3, #0
 80102d0:	4682      	mov	sl, r0
 80102d2:	468b      	mov	fp, r1
 80102d4:	f7f0 fbf8 	bl	8000ac8 <__aeabi_dcmpeq>
 80102d8:	2800      	cmp	r0, #0
 80102da:	d0c1      	beq.n	8010260 <_strtod_l+0x8b8>
 80102dc:	e619      	b.n	800ff12 <_strtod_l+0x56a>
 80102de:	4641      	mov	r1, r8
 80102e0:	4620      	mov	r0, r4
 80102e2:	f7ff facd 	bl	800f880 <__ratio>
 80102e6:	ec57 6b10 	vmov	r6, r7, d0
 80102ea:	2200      	movs	r2, #0
 80102ec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80102f0:	4630      	mov	r0, r6
 80102f2:	4639      	mov	r1, r7
 80102f4:	f7f0 fbfc 	bl	8000af0 <__aeabi_dcmple>
 80102f8:	2800      	cmp	r0, #0
 80102fa:	d06f      	beq.n	80103dc <_strtod_l+0xa34>
 80102fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d17a      	bne.n	80103f8 <_strtod_l+0xa50>
 8010302:	f1ba 0f00 	cmp.w	sl, #0
 8010306:	d158      	bne.n	80103ba <_strtod_l+0xa12>
 8010308:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801030a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801030e:	2b00      	cmp	r3, #0
 8010310:	d15a      	bne.n	80103c8 <_strtod_l+0xa20>
 8010312:	4b64      	ldr	r3, [pc, #400]	@ (80104a4 <_strtod_l+0xafc>)
 8010314:	2200      	movs	r2, #0
 8010316:	4630      	mov	r0, r6
 8010318:	4639      	mov	r1, r7
 801031a:	f7f0 fbdf 	bl	8000adc <__aeabi_dcmplt>
 801031e:	2800      	cmp	r0, #0
 8010320:	d159      	bne.n	80103d6 <_strtod_l+0xa2e>
 8010322:	4630      	mov	r0, r6
 8010324:	4639      	mov	r1, r7
 8010326:	4b60      	ldr	r3, [pc, #384]	@ (80104a8 <_strtod_l+0xb00>)
 8010328:	2200      	movs	r2, #0
 801032a:	f7f0 f965 	bl	80005f8 <__aeabi_dmul>
 801032e:	4606      	mov	r6, r0
 8010330:	460f      	mov	r7, r1
 8010332:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8010336:	9606      	str	r6, [sp, #24]
 8010338:	9307      	str	r3, [sp, #28]
 801033a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801033e:	4d57      	ldr	r5, [pc, #348]	@ (801049c <_strtod_l+0xaf4>)
 8010340:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8010344:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010346:	401d      	ands	r5, r3
 8010348:	4b58      	ldr	r3, [pc, #352]	@ (80104ac <_strtod_l+0xb04>)
 801034a:	429d      	cmp	r5, r3
 801034c:	f040 80b2 	bne.w	80104b4 <_strtod_l+0xb0c>
 8010350:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010352:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8010356:	ec4b ab10 	vmov	d0, sl, fp
 801035a:	f7ff f9c9 	bl	800f6f0 <__ulp>
 801035e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010362:	ec51 0b10 	vmov	r0, r1, d0
 8010366:	f7f0 f947 	bl	80005f8 <__aeabi_dmul>
 801036a:	4652      	mov	r2, sl
 801036c:	465b      	mov	r3, fp
 801036e:	f7ef ff8d 	bl	800028c <__adddf3>
 8010372:	460b      	mov	r3, r1
 8010374:	4949      	ldr	r1, [pc, #292]	@ (801049c <_strtod_l+0xaf4>)
 8010376:	4a4e      	ldr	r2, [pc, #312]	@ (80104b0 <_strtod_l+0xb08>)
 8010378:	4019      	ands	r1, r3
 801037a:	4291      	cmp	r1, r2
 801037c:	4682      	mov	sl, r0
 801037e:	d942      	bls.n	8010406 <_strtod_l+0xa5e>
 8010380:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010382:	4b47      	ldr	r3, [pc, #284]	@ (80104a0 <_strtod_l+0xaf8>)
 8010384:	429a      	cmp	r2, r3
 8010386:	d103      	bne.n	8010390 <_strtod_l+0x9e8>
 8010388:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801038a:	3301      	adds	r3, #1
 801038c:	f43f ad2b 	beq.w	800fde6 <_strtod_l+0x43e>
 8010390:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80104a0 <_strtod_l+0xaf8>
 8010394:	f04f 3aff 	mov.w	sl, #4294967295
 8010398:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801039a:	9805      	ldr	r0, [sp, #20]
 801039c:	f7fe fe74 	bl	800f088 <_Bfree>
 80103a0:	9805      	ldr	r0, [sp, #20]
 80103a2:	4649      	mov	r1, r9
 80103a4:	f7fe fe70 	bl	800f088 <_Bfree>
 80103a8:	9805      	ldr	r0, [sp, #20]
 80103aa:	4641      	mov	r1, r8
 80103ac:	f7fe fe6c 	bl	800f088 <_Bfree>
 80103b0:	9805      	ldr	r0, [sp, #20]
 80103b2:	4621      	mov	r1, r4
 80103b4:	f7fe fe68 	bl	800f088 <_Bfree>
 80103b8:	e618      	b.n	800ffec <_strtod_l+0x644>
 80103ba:	f1ba 0f01 	cmp.w	sl, #1
 80103be:	d103      	bne.n	80103c8 <_strtod_l+0xa20>
 80103c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	f43f ada5 	beq.w	800ff12 <_strtod_l+0x56a>
 80103c8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8010478 <_strtod_l+0xad0>
 80103cc:	4f35      	ldr	r7, [pc, #212]	@ (80104a4 <_strtod_l+0xafc>)
 80103ce:	ed8d 7b06 	vstr	d7, [sp, #24]
 80103d2:	2600      	movs	r6, #0
 80103d4:	e7b1      	b.n	801033a <_strtod_l+0x992>
 80103d6:	4f34      	ldr	r7, [pc, #208]	@ (80104a8 <_strtod_l+0xb00>)
 80103d8:	2600      	movs	r6, #0
 80103da:	e7aa      	b.n	8010332 <_strtod_l+0x98a>
 80103dc:	4b32      	ldr	r3, [pc, #200]	@ (80104a8 <_strtod_l+0xb00>)
 80103de:	4630      	mov	r0, r6
 80103e0:	4639      	mov	r1, r7
 80103e2:	2200      	movs	r2, #0
 80103e4:	f7f0 f908 	bl	80005f8 <__aeabi_dmul>
 80103e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80103ea:	4606      	mov	r6, r0
 80103ec:	460f      	mov	r7, r1
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d09f      	beq.n	8010332 <_strtod_l+0x98a>
 80103f2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80103f6:	e7a0      	b.n	801033a <_strtod_l+0x992>
 80103f8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8010480 <_strtod_l+0xad8>
 80103fc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010400:	ec57 6b17 	vmov	r6, r7, d7
 8010404:	e799      	b.n	801033a <_strtod_l+0x992>
 8010406:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801040a:	9b08      	ldr	r3, [sp, #32]
 801040c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8010410:	2b00      	cmp	r3, #0
 8010412:	d1c1      	bne.n	8010398 <_strtod_l+0x9f0>
 8010414:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010418:	0d1b      	lsrs	r3, r3, #20
 801041a:	051b      	lsls	r3, r3, #20
 801041c:	429d      	cmp	r5, r3
 801041e:	d1bb      	bne.n	8010398 <_strtod_l+0x9f0>
 8010420:	4630      	mov	r0, r6
 8010422:	4639      	mov	r1, r7
 8010424:	f7f0 fc48 	bl	8000cb8 <__aeabi_d2lz>
 8010428:	f7f0 f8b8 	bl	800059c <__aeabi_l2d>
 801042c:	4602      	mov	r2, r0
 801042e:	460b      	mov	r3, r1
 8010430:	4630      	mov	r0, r6
 8010432:	4639      	mov	r1, r7
 8010434:	f7ef ff28 	bl	8000288 <__aeabi_dsub>
 8010438:	460b      	mov	r3, r1
 801043a:	4602      	mov	r2, r0
 801043c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8010440:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8010444:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010446:	ea46 060a 	orr.w	r6, r6, sl
 801044a:	431e      	orrs	r6, r3
 801044c:	d06f      	beq.n	801052e <_strtod_l+0xb86>
 801044e:	a30e      	add	r3, pc, #56	@ (adr r3, 8010488 <_strtod_l+0xae0>)
 8010450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010454:	f7f0 fb42 	bl	8000adc <__aeabi_dcmplt>
 8010458:	2800      	cmp	r0, #0
 801045a:	f47f accf 	bne.w	800fdfc <_strtod_l+0x454>
 801045e:	a30c      	add	r3, pc, #48	@ (adr r3, 8010490 <_strtod_l+0xae8>)
 8010460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010464:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010468:	f7f0 fb56 	bl	8000b18 <__aeabi_dcmpgt>
 801046c:	2800      	cmp	r0, #0
 801046e:	d093      	beq.n	8010398 <_strtod_l+0x9f0>
 8010470:	e4c4      	b.n	800fdfc <_strtod_l+0x454>
 8010472:	bf00      	nop
 8010474:	f3af 8000 	nop.w
 8010478:	00000000 	.word	0x00000000
 801047c:	bff00000 	.word	0xbff00000
 8010480:	00000000 	.word	0x00000000
 8010484:	3ff00000 	.word	0x3ff00000
 8010488:	94a03595 	.word	0x94a03595
 801048c:	3fdfffff 	.word	0x3fdfffff
 8010490:	35afe535 	.word	0x35afe535
 8010494:	3fe00000 	.word	0x3fe00000
 8010498:	000fffff 	.word	0x000fffff
 801049c:	7ff00000 	.word	0x7ff00000
 80104a0:	7fefffff 	.word	0x7fefffff
 80104a4:	3ff00000 	.word	0x3ff00000
 80104a8:	3fe00000 	.word	0x3fe00000
 80104ac:	7fe00000 	.word	0x7fe00000
 80104b0:	7c9fffff 	.word	0x7c9fffff
 80104b4:	9b08      	ldr	r3, [sp, #32]
 80104b6:	b323      	cbz	r3, 8010502 <_strtod_l+0xb5a>
 80104b8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80104bc:	d821      	bhi.n	8010502 <_strtod_l+0xb5a>
 80104be:	a328      	add	r3, pc, #160	@ (adr r3, 8010560 <_strtod_l+0xbb8>)
 80104c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104c4:	4630      	mov	r0, r6
 80104c6:	4639      	mov	r1, r7
 80104c8:	f7f0 fb12 	bl	8000af0 <__aeabi_dcmple>
 80104cc:	b1a0      	cbz	r0, 80104f8 <_strtod_l+0xb50>
 80104ce:	4639      	mov	r1, r7
 80104d0:	4630      	mov	r0, r6
 80104d2:	f7f0 fb69 	bl	8000ba8 <__aeabi_d2uiz>
 80104d6:	2801      	cmp	r0, #1
 80104d8:	bf38      	it	cc
 80104da:	2001      	movcc	r0, #1
 80104dc:	f7f0 f812 	bl	8000504 <__aeabi_ui2d>
 80104e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80104e2:	4606      	mov	r6, r0
 80104e4:	460f      	mov	r7, r1
 80104e6:	b9fb      	cbnz	r3, 8010528 <_strtod_l+0xb80>
 80104e8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80104ec:	9014      	str	r0, [sp, #80]	@ 0x50
 80104ee:	9315      	str	r3, [sp, #84]	@ 0x54
 80104f0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80104f4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80104f8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80104fa:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80104fe:	1b5b      	subs	r3, r3, r5
 8010500:	9311      	str	r3, [sp, #68]	@ 0x44
 8010502:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8010506:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 801050a:	f7ff f8f1 	bl	800f6f0 <__ulp>
 801050e:	4650      	mov	r0, sl
 8010510:	ec53 2b10 	vmov	r2, r3, d0
 8010514:	4659      	mov	r1, fp
 8010516:	f7f0 f86f 	bl	80005f8 <__aeabi_dmul>
 801051a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801051e:	f7ef feb5 	bl	800028c <__adddf3>
 8010522:	4682      	mov	sl, r0
 8010524:	468b      	mov	fp, r1
 8010526:	e770      	b.n	801040a <_strtod_l+0xa62>
 8010528:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 801052c:	e7e0      	b.n	80104f0 <_strtod_l+0xb48>
 801052e:	a30e      	add	r3, pc, #56	@ (adr r3, 8010568 <_strtod_l+0xbc0>)
 8010530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010534:	f7f0 fad2 	bl	8000adc <__aeabi_dcmplt>
 8010538:	e798      	b.n	801046c <_strtod_l+0xac4>
 801053a:	2300      	movs	r3, #0
 801053c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801053e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8010540:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010542:	6013      	str	r3, [r2, #0]
 8010544:	f7ff ba6d 	b.w	800fa22 <_strtod_l+0x7a>
 8010548:	2a65      	cmp	r2, #101	@ 0x65
 801054a:	f43f ab66 	beq.w	800fc1a <_strtod_l+0x272>
 801054e:	2a45      	cmp	r2, #69	@ 0x45
 8010550:	f43f ab63 	beq.w	800fc1a <_strtod_l+0x272>
 8010554:	2301      	movs	r3, #1
 8010556:	f7ff bb9e 	b.w	800fc96 <_strtod_l+0x2ee>
 801055a:	bf00      	nop
 801055c:	f3af 8000 	nop.w
 8010560:	ffc00000 	.word	0xffc00000
 8010564:	41dfffff 	.word	0x41dfffff
 8010568:	94a03595 	.word	0x94a03595
 801056c:	3fcfffff 	.word	0x3fcfffff

08010570 <_strtod_r>:
 8010570:	4b01      	ldr	r3, [pc, #4]	@ (8010578 <_strtod_r+0x8>)
 8010572:	f7ff ba19 	b.w	800f9a8 <_strtod_l>
 8010576:	bf00      	nop
 8010578:	200000ac 	.word	0x200000ac

0801057c <_strtol_l.constprop.0>:
 801057c:	2b24      	cmp	r3, #36	@ 0x24
 801057e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010582:	4686      	mov	lr, r0
 8010584:	4690      	mov	r8, r2
 8010586:	d801      	bhi.n	801058c <_strtol_l.constprop.0+0x10>
 8010588:	2b01      	cmp	r3, #1
 801058a:	d106      	bne.n	801059a <_strtol_l.constprop.0+0x1e>
 801058c:	f7fd fd8e 	bl	800e0ac <__errno>
 8010590:	2316      	movs	r3, #22
 8010592:	6003      	str	r3, [r0, #0]
 8010594:	2000      	movs	r0, #0
 8010596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801059a:	4834      	ldr	r0, [pc, #208]	@ (801066c <_strtol_l.constprop.0+0xf0>)
 801059c:	460d      	mov	r5, r1
 801059e:	462a      	mov	r2, r5
 80105a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80105a4:	5d06      	ldrb	r6, [r0, r4]
 80105a6:	f016 0608 	ands.w	r6, r6, #8
 80105aa:	d1f8      	bne.n	801059e <_strtol_l.constprop.0+0x22>
 80105ac:	2c2d      	cmp	r4, #45	@ 0x2d
 80105ae:	d12d      	bne.n	801060c <_strtol_l.constprop.0+0x90>
 80105b0:	782c      	ldrb	r4, [r5, #0]
 80105b2:	2601      	movs	r6, #1
 80105b4:	1c95      	adds	r5, r2, #2
 80105b6:	f033 0210 	bics.w	r2, r3, #16
 80105ba:	d109      	bne.n	80105d0 <_strtol_l.constprop.0+0x54>
 80105bc:	2c30      	cmp	r4, #48	@ 0x30
 80105be:	d12a      	bne.n	8010616 <_strtol_l.constprop.0+0x9a>
 80105c0:	782a      	ldrb	r2, [r5, #0]
 80105c2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80105c6:	2a58      	cmp	r2, #88	@ 0x58
 80105c8:	d125      	bne.n	8010616 <_strtol_l.constprop.0+0x9a>
 80105ca:	786c      	ldrb	r4, [r5, #1]
 80105cc:	2310      	movs	r3, #16
 80105ce:	3502      	adds	r5, #2
 80105d0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80105d4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80105d8:	2200      	movs	r2, #0
 80105da:	fbbc f9f3 	udiv	r9, ip, r3
 80105de:	4610      	mov	r0, r2
 80105e0:	fb03 ca19 	mls	sl, r3, r9, ip
 80105e4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80105e8:	2f09      	cmp	r7, #9
 80105ea:	d81b      	bhi.n	8010624 <_strtol_l.constprop.0+0xa8>
 80105ec:	463c      	mov	r4, r7
 80105ee:	42a3      	cmp	r3, r4
 80105f0:	dd27      	ble.n	8010642 <_strtol_l.constprop.0+0xc6>
 80105f2:	1c57      	adds	r7, r2, #1
 80105f4:	d007      	beq.n	8010606 <_strtol_l.constprop.0+0x8a>
 80105f6:	4581      	cmp	r9, r0
 80105f8:	d320      	bcc.n	801063c <_strtol_l.constprop.0+0xc0>
 80105fa:	d101      	bne.n	8010600 <_strtol_l.constprop.0+0x84>
 80105fc:	45a2      	cmp	sl, r4
 80105fe:	db1d      	blt.n	801063c <_strtol_l.constprop.0+0xc0>
 8010600:	fb00 4003 	mla	r0, r0, r3, r4
 8010604:	2201      	movs	r2, #1
 8010606:	f815 4b01 	ldrb.w	r4, [r5], #1
 801060a:	e7eb      	b.n	80105e4 <_strtol_l.constprop.0+0x68>
 801060c:	2c2b      	cmp	r4, #43	@ 0x2b
 801060e:	bf04      	itt	eq
 8010610:	782c      	ldrbeq	r4, [r5, #0]
 8010612:	1c95      	addeq	r5, r2, #2
 8010614:	e7cf      	b.n	80105b6 <_strtol_l.constprop.0+0x3a>
 8010616:	2b00      	cmp	r3, #0
 8010618:	d1da      	bne.n	80105d0 <_strtol_l.constprop.0+0x54>
 801061a:	2c30      	cmp	r4, #48	@ 0x30
 801061c:	bf0c      	ite	eq
 801061e:	2308      	moveq	r3, #8
 8010620:	230a      	movne	r3, #10
 8010622:	e7d5      	b.n	80105d0 <_strtol_l.constprop.0+0x54>
 8010624:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8010628:	2f19      	cmp	r7, #25
 801062a:	d801      	bhi.n	8010630 <_strtol_l.constprop.0+0xb4>
 801062c:	3c37      	subs	r4, #55	@ 0x37
 801062e:	e7de      	b.n	80105ee <_strtol_l.constprop.0+0x72>
 8010630:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8010634:	2f19      	cmp	r7, #25
 8010636:	d804      	bhi.n	8010642 <_strtol_l.constprop.0+0xc6>
 8010638:	3c57      	subs	r4, #87	@ 0x57
 801063a:	e7d8      	b.n	80105ee <_strtol_l.constprop.0+0x72>
 801063c:	f04f 32ff 	mov.w	r2, #4294967295
 8010640:	e7e1      	b.n	8010606 <_strtol_l.constprop.0+0x8a>
 8010642:	1c53      	adds	r3, r2, #1
 8010644:	d108      	bne.n	8010658 <_strtol_l.constprop.0+0xdc>
 8010646:	2322      	movs	r3, #34	@ 0x22
 8010648:	f8ce 3000 	str.w	r3, [lr]
 801064c:	4660      	mov	r0, ip
 801064e:	f1b8 0f00 	cmp.w	r8, #0
 8010652:	d0a0      	beq.n	8010596 <_strtol_l.constprop.0+0x1a>
 8010654:	1e69      	subs	r1, r5, #1
 8010656:	e006      	b.n	8010666 <_strtol_l.constprop.0+0xea>
 8010658:	b106      	cbz	r6, 801065c <_strtol_l.constprop.0+0xe0>
 801065a:	4240      	negs	r0, r0
 801065c:	f1b8 0f00 	cmp.w	r8, #0
 8010660:	d099      	beq.n	8010596 <_strtol_l.constprop.0+0x1a>
 8010662:	2a00      	cmp	r2, #0
 8010664:	d1f6      	bne.n	8010654 <_strtol_l.constprop.0+0xd8>
 8010666:	f8c8 1000 	str.w	r1, [r8]
 801066a:	e794      	b.n	8010596 <_strtol_l.constprop.0+0x1a>
 801066c:	08011dc1 	.word	0x08011dc1

08010670 <_strtol_r>:
 8010670:	f7ff bf84 	b.w	801057c <_strtol_l.constprop.0>

08010674 <__ssputs_r>:
 8010674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010678:	688e      	ldr	r6, [r1, #8]
 801067a:	461f      	mov	r7, r3
 801067c:	42be      	cmp	r6, r7
 801067e:	680b      	ldr	r3, [r1, #0]
 8010680:	4682      	mov	sl, r0
 8010682:	460c      	mov	r4, r1
 8010684:	4690      	mov	r8, r2
 8010686:	d82d      	bhi.n	80106e4 <__ssputs_r+0x70>
 8010688:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801068c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010690:	d026      	beq.n	80106e0 <__ssputs_r+0x6c>
 8010692:	6965      	ldr	r5, [r4, #20]
 8010694:	6909      	ldr	r1, [r1, #16]
 8010696:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801069a:	eba3 0901 	sub.w	r9, r3, r1
 801069e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80106a2:	1c7b      	adds	r3, r7, #1
 80106a4:	444b      	add	r3, r9
 80106a6:	106d      	asrs	r5, r5, #1
 80106a8:	429d      	cmp	r5, r3
 80106aa:	bf38      	it	cc
 80106ac:	461d      	movcc	r5, r3
 80106ae:	0553      	lsls	r3, r2, #21
 80106b0:	d527      	bpl.n	8010702 <__ssputs_r+0x8e>
 80106b2:	4629      	mov	r1, r5
 80106b4:	f7fe fc1c 	bl	800eef0 <_malloc_r>
 80106b8:	4606      	mov	r6, r0
 80106ba:	b360      	cbz	r0, 8010716 <__ssputs_r+0xa2>
 80106bc:	6921      	ldr	r1, [r4, #16]
 80106be:	464a      	mov	r2, r9
 80106c0:	f7fd fd21 	bl	800e106 <memcpy>
 80106c4:	89a3      	ldrh	r3, [r4, #12]
 80106c6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80106ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80106ce:	81a3      	strh	r3, [r4, #12]
 80106d0:	6126      	str	r6, [r4, #16]
 80106d2:	6165      	str	r5, [r4, #20]
 80106d4:	444e      	add	r6, r9
 80106d6:	eba5 0509 	sub.w	r5, r5, r9
 80106da:	6026      	str	r6, [r4, #0]
 80106dc:	60a5      	str	r5, [r4, #8]
 80106de:	463e      	mov	r6, r7
 80106e0:	42be      	cmp	r6, r7
 80106e2:	d900      	bls.n	80106e6 <__ssputs_r+0x72>
 80106e4:	463e      	mov	r6, r7
 80106e6:	6820      	ldr	r0, [r4, #0]
 80106e8:	4632      	mov	r2, r6
 80106ea:	4641      	mov	r1, r8
 80106ec:	f000 fb7c 	bl	8010de8 <memmove>
 80106f0:	68a3      	ldr	r3, [r4, #8]
 80106f2:	1b9b      	subs	r3, r3, r6
 80106f4:	60a3      	str	r3, [r4, #8]
 80106f6:	6823      	ldr	r3, [r4, #0]
 80106f8:	4433      	add	r3, r6
 80106fa:	6023      	str	r3, [r4, #0]
 80106fc:	2000      	movs	r0, #0
 80106fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010702:	462a      	mov	r2, r5
 8010704:	f000 ff3d 	bl	8011582 <_realloc_r>
 8010708:	4606      	mov	r6, r0
 801070a:	2800      	cmp	r0, #0
 801070c:	d1e0      	bne.n	80106d0 <__ssputs_r+0x5c>
 801070e:	6921      	ldr	r1, [r4, #16]
 8010710:	4650      	mov	r0, sl
 8010712:	f7fe fb79 	bl	800ee08 <_free_r>
 8010716:	230c      	movs	r3, #12
 8010718:	f8ca 3000 	str.w	r3, [sl]
 801071c:	89a3      	ldrh	r3, [r4, #12]
 801071e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010722:	81a3      	strh	r3, [r4, #12]
 8010724:	f04f 30ff 	mov.w	r0, #4294967295
 8010728:	e7e9      	b.n	80106fe <__ssputs_r+0x8a>
	...

0801072c <_svfiprintf_r>:
 801072c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010730:	4698      	mov	r8, r3
 8010732:	898b      	ldrh	r3, [r1, #12]
 8010734:	061b      	lsls	r3, r3, #24
 8010736:	b09d      	sub	sp, #116	@ 0x74
 8010738:	4607      	mov	r7, r0
 801073a:	460d      	mov	r5, r1
 801073c:	4614      	mov	r4, r2
 801073e:	d510      	bpl.n	8010762 <_svfiprintf_r+0x36>
 8010740:	690b      	ldr	r3, [r1, #16]
 8010742:	b973      	cbnz	r3, 8010762 <_svfiprintf_r+0x36>
 8010744:	2140      	movs	r1, #64	@ 0x40
 8010746:	f7fe fbd3 	bl	800eef0 <_malloc_r>
 801074a:	6028      	str	r0, [r5, #0]
 801074c:	6128      	str	r0, [r5, #16]
 801074e:	b930      	cbnz	r0, 801075e <_svfiprintf_r+0x32>
 8010750:	230c      	movs	r3, #12
 8010752:	603b      	str	r3, [r7, #0]
 8010754:	f04f 30ff 	mov.w	r0, #4294967295
 8010758:	b01d      	add	sp, #116	@ 0x74
 801075a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801075e:	2340      	movs	r3, #64	@ 0x40
 8010760:	616b      	str	r3, [r5, #20]
 8010762:	2300      	movs	r3, #0
 8010764:	9309      	str	r3, [sp, #36]	@ 0x24
 8010766:	2320      	movs	r3, #32
 8010768:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801076c:	f8cd 800c 	str.w	r8, [sp, #12]
 8010770:	2330      	movs	r3, #48	@ 0x30
 8010772:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010910 <_svfiprintf_r+0x1e4>
 8010776:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801077a:	f04f 0901 	mov.w	r9, #1
 801077e:	4623      	mov	r3, r4
 8010780:	469a      	mov	sl, r3
 8010782:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010786:	b10a      	cbz	r2, 801078c <_svfiprintf_r+0x60>
 8010788:	2a25      	cmp	r2, #37	@ 0x25
 801078a:	d1f9      	bne.n	8010780 <_svfiprintf_r+0x54>
 801078c:	ebba 0b04 	subs.w	fp, sl, r4
 8010790:	d00b      	beq.n	80107aa <_svfiprintf_r+0x7e>
 8010792:	465b      	mov	r3, fp
 8010794:	4622      	mov	r2, r4
 8010796:	4629      	mov	r1, r5
 8010798:	4638      	mov	r0, r7
 801079a:	f7ff ff6b 	bl	8010674 <__ssputs_r>
 801079e:	3001      	adds	r0, #1
 80107a0:	f000 80a7 	beq.w	80108f2 <_svfiprintf_r+0x1c6>
 80107a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80107a6:	445a      	add	r2, fp
 80107a8:	9209      	str	r2, [sp, #36]	@ 0x24
 80107aa:	f89a 3000 	ldrb.w	r3, [sl]
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	f000 809f 	beq.w	80108f2 <_svfiprintf_r+0x1c6>
 80107b4:	2300      	movs	r3, #0
 80107b6:	f04f 32ff 	mov.w	r2, #4294967295
 80107ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80107be:	f10a 0a01 	add.w	sl, sl, #1
 80107c2:	9304      	str	r3, [sp, #16]
 80107c4:	9307      	str	r3, [sp, #28]
 80107c6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80107ca:	931a      	str	r3, [sp, #104]	@ 0x68
 80107cc:	4654      	mov	r4, sl
 80107ce:	2205      	movs	r2, #5
 80107d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80107d4:	484e      	ldr	r0, [pc, #312]	@ (8010910 <_svfiprintf_r+0x1e4>)
 80107d6:	f7ef fcfb 	bl	80001d0 <memchr>
 80107da:	9a04      	ldr	r2, [sp, #16]
 80107dc:	b9d8      	cbnz	r0, 8010816 <_svfiprintf_r+0xea>
 80107de:	06d0      	lsls	r0, r2, #27
 80107e0:	bf44      	itt	mi
 80107e2:	2320      	movmi	r3, #32
 80107e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80107e8:	0711      	lsls	r1, r2, #28
 80107ea:	bf44      	itt	mi
 80107ec:	232b      	movmi	r3, #43	@ 0x2b
 80107ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80107f2:	f89a 3000 	ldrb.w	r3, [sl]
 80107f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80107f8:	d015      	beq.n	8010826 <_svfiprintf_r+0xfa>
 80107fa:	9a07      	ldr	r2, [sp, #28]
 80107fc:	4654      	mov	r4, sl
 80107fe:	2000      	movs	r0, #0
 8010800:	f04f 0c0a 	mov.w	ip, #10
 8010804:	4621      	mov	r1, r4
 8010806:	f811 3b01 	ldrb.w	r3, [r1], #1
 801080a:	3b30      	subs	r3, #48	@ 0x30
 801080c:	2b09      	cmp	r3, #9
 801080e:	d94b      	bls.n	80108a8 <_svfiprintf_r+0x17c>
 8010810:	b1b0      	cbz	r0, 8010840 <_svfiprintf_r+0x114>
 8010812:	9207      	str	r2, [sp, #28]
 8010814:	e014      	b.n	8010840 <_svfiprintf_r+0x114>
 8010816:	eba0 0308 	sub.w	r3, r0, r8
 801081a:	fa09 f303 	lsl.w	r3, r9, r3
 801081e:	4313      	orrs	r3, r2
 8010820:	9304      	str	r3, [sp, #16]
 8010822:	46a2      	mov	sl, r4
 8010824:	e7d2      	b.n	80107cc <_svfiprintf_r+0xa0>
 8010826:	9b03      	ldr	r3, [sp, #12]
 8010828:	1d19      	adds	r1, r3, #4
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	9103      	str	r1, [sp, #12]
 801082e:	2b00      	cmp	r3, #0
 8010830:	bfbb      	ittet	lt
 8010832:	425b      	neglt	r3, r3
 8010834:	f042 0202 	orrlt.w	r2, r2, #2
 8010838:	9307      	strge	r3, [sp, #28]
 801083a:	9307      	strlt	r3, [sp, #28]
 801083c:	bfb8      	it	lt
 801083e:	9204      	strlt	r2, [sp, #16]
 8010840:	7823      	ldrb	r3, [r4, #0]
 8010842:	2b2e      	cmp	r3, #46	@ 0x2e
 8010844:	d10a      	bne.n	801085c <_svfiprintf_r+0x130>
 8010846:	7863      	ldrb	r3, [r4, #1]
 8010848:	2b2a      	cmp	r3, #42	@ 0x2a
 801084a:	d132      	bne.n	80108b2 <_svfiprintf_r+0x186>
 801084c:	9b03      	ldr	r3, [sp, #12]
 801084e:	1d1a      	adds	r2, r3, #4
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	9203      	str	r2, [sp, #12]
 8010854:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010858:	3402      	adds	r4, #2
 801085a:	9305      	str	r3, [sp, #20]
 801085c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010920 <_svfiprintf_r+0x1f4>
 8010860:	7821      	ldrb	r1, [r4, #0]
 8010862:	2203      	movs	r2, #3
 8010864:	4650      	mov	r0, sl
 8010866:	f7ef fcb3 	bl	80001d0 <memchr>
 801086a:	b138      	cbz	r0, 801087c <_svfiprintf_r+0x150>
 801086c:	9b04      	ldr	r3, [sp, #16]
 801086e:	eba0 000a 	sub.w	r0, r0, sl
 8010872:	2240      	movs	r2, #64	@ 0x40
 8010874:	4082      	lsls	r2, r0
 8010876:	4313      	orrs	r3, r2
 8010878:	3401      	adds	r4, #1
 801087a:	9304      	str	r3, [sp, #16]
 801087c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010880:	4824      	ldr	r0, [pc, #144]	@ (8010914 <_svfiprintf_r+0x1e8>)
 8010882:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010886:	2206      	movs	r2, #6
 8010888:	f7ef fca2 	bl	80001d0 <memchr>
 801088c:	2800      	cmp	r0, #0
 801088e:	d036      	beq.n	80108fe <_svfiprintf_r+0x1d2>
 8010890:	4b21      	ldr	r3, [pc, #132]	@ (8010918 <_svfiprintf_r+0x1ec>)
 8010892:	bb1b      	cbnz	r3, 80108dc <_svfiprintf_r+0x1b0>
 8010894:	9b03      	ldr	r3, [sp, #12]
 8010896:	3307      	adds	r3, #7
 8010898:	f023 0307 	bic.w	r3, r3, #7
 801089c:	3308      	adds	r3, #8
 801089e:	9303      	str	r3, [sp, #12]
 80108a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80108a2:	4433      	add	r3, r6
 80108a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80108a6:	e76a      	b.n	801077e <_svfiprintf_r+0x52>
 80108a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80108ac:	460c      	mov	r4, r1
 80108ae:	2001      	movs	r0, #1
 80108b0:	e7a8      	b.n	8010804 <_svfiprintf_r+0xd8>
 80108b2:	2300      	movs	r3, #0
 80108b4:	3401      	adds	r4, #1
 80108b6:	9305      	str	r3, [sp, #20]
 80108b8:	4619      	mov	r1, r3
 80108ba:	f04f 0c0a 	mov.w	ip, #10
 80108be:	4620      	mov	r0, r4
 80108c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80108c4:	3a30      	subs	r2, #48	@ 0x30
 80108c6:	2a09      	cmp	r2, #9
 80108c8:	d903      	bls.n	80108d2 <_svfiprintf_r+0x1a6>
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d0c6      	beq.n	801085c <_svfiprintf_r+0x130>
 80108ce:	9105      	str	r1, [sp, #20]
 80108d0:	e7c4      	b.n	801085c <_svfiprintf_r+0x130>
 80108d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80108d6:	4604      	mov	r4, r0
 80108d8:	2301      	movs	r3, #1
 80108da:	e7f0      	b.n	80108be <_svfiprintf_r+0x192>
 80108dc:	ab03      	add	r3, sp, #12
 80108de:	9300      	str	r3, [sp, #0]
 80108e0:	462a      	mov	r2, r5
 80108e2:	4b0e      	ldr	r3, [pc, #56]	@ (801091c <_svfiprintf_r+0x1f0>)
 80108e4:	a904      	add	r1, sp, #16
 80108e6:	4638      	mov	r0, r7
 80108e8:	f7fc fb98 	bl	800d01c <_printf_float>
 80108ec:	1c42      	adds	r2, r0, #1
 80108ee:	4606      	mov	r6, r0
 80108f0:	d1d6      	bne.n	80108a0 <_svfiprintf_r+0x174>
 80108f2:	89ab      	ldrh	r3, [r5, #12]
 80108f4:	065b      	lsls	r3, r3, #25
 80108f6:	f53f af2d 	bmi.w	8010754 <_svfiprintf_r+0x28>
 80108fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80108fc:	e72c      	b.n	8010758 <_svfiprintf_r+0x2c>
 80108fe:	ab03      	add	r3, sp, #12
 8010900:	9300      	str	r3, [sp, #0]
 8010902:	462a      	mov	r2, r5
 8010904:	4b05      	ldr	r3, [pc, #20]	@ (801091c <_svfiprintf_r+0x1f0>)
 8010906:	a904      	add	r1, sp, #16
 8010908:	4638      	mov	r0, r7
 801090a:	f7fc fe1f 	bl	800d54c <_printf_i>
 801090e:	e7ed      	b.n	80108ec <_svfiprintf_r+0x1c0>
 8010910:	08011ec1 	.word	0x08011ec1
 8010914:	08011ecb 	.word	0x08011ecb
 8010918:	0800d01d 	.word	0x0800d01d
 801091c:	08010675 	.word	0x08010675
 8010920:	08011ec7 	.word	0x08011ec7

08010924 <__sfputc_r>:
 8010924:	6893      	ldr	r3, [r2, #8]
 8010926:	3b01      	subs	r3, #1
 8010928:	2b00      	cmp	r3, #0
 801092a:	b410      	push	{r4}
 801092c:	6093      	str	r3, [r2, #8]
 801092e:	da08      	bge.n	8010942 <__sfputc_r+0x1e>
 8010930:	6994      	ldr	r4, [r2, #24]
 8010932:	42a3      	cmp	r3, r4
 8010934:	db01      	blt.n	801093a <__sfputc_r+0x16>
 8010936:	290a      	cmp	r1, #10
 8010938:	d103      	bne.n	8010942 <__sfputc_r+0x1e>
 801093a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801093e:	f7fd bace 	b.w	800dede <__swbuf_r>
 8010942:	6813      	ldr	r3, [r2, #0]
 8010944:	1c58      	adds	r0, r3, #1
 8010946:	6010      	str	r0, [r2, #0]
 8010948:	7019      	strb	r1, [r3, #0]
 801094a:	4608      	mov	r0, r1
 801094c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010950:	4770      	bx	lr

08010952 <__sfputs_r>:
 8010952:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010954:	4606      	mov	r6, r0
 8010956:	460f      	mov	r7, r1
 8010958:	4614      	mov	r4, r2
 801095a:	18d5      	adds	r5, r2, r3
 801095c:	42ac      	cmp	r4, r5
 801095e:	d101      	bne.n	8010964 <__sfputs_r+0x12>
 8010960:	2000      	movs	r0, #0
 8010962:	e007      	b.n	8010974 <__sfputs_r+0x22>
 8010964:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010968:	463a      	mov	r2, r7
 801096a:	4630      	mov	r0, r6
 801096c:	f7ff ffda 	bl	8010924 <__sfputc_r>
 8010970:	1c43      	adds	r3, r0, #1
 8010972:	d1f3      	bne.n	801095c <__sfputs_r+0xa>
 8010974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010978 <_vfiprintf_r>:
 8010978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801097c:	460d      	mov	r5, r1
 801097e:	b09d      	sub	sp, #116	@ 0x74
 8010980:	4614      	mov	r4, r2
 8010982:	4698      	mov	r8, r3
 8010984:	4606      	mov	r6, r0
 8010986:	b118      	cbz	r0, 8010990 <_vfiprintf_r+0x18>
 8010988:	6a03      	ldr	r3, [r0, #32]
 801098a:	b90b      	cbnz	r3, 8010990 <_vfiprintf_r+0x18>
 801098c:	f7fd f99e 	bl	800dccc <__sinit>
 8010990:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010992:	07d9      	lsls	r1, r3, #31
 8010994:	d405      	bmi.n	80109a2 <_vfiprintf_r+0x2a>
 8010996:	89ab      	ldrh	r3, [r5, #12]
 8010998:	059a      	lsls	r2, r3, #22
 801099a:	d402      	bmi.n	80109a2 <_vfiprintf_r+0x2a>
 801099c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801099e:	f7fd fbb0 	bl	800e102 <__retarget_lock_acquire_recursive>
 80109a2:	89ab      	ldrh	r3, [r5, #12]
 80109a4:	071b      	lsls	r3, r3, #28
 80109a6:	d501      	bpl.n	80109ac <_vfiprintf_r+0x34>
 80109a8:	692b      	ldr	r3, [r5, #16]
 80109aa:	b99b      	cbnz	r3, 80109d4 <_vfiprintf_r+0x5c>
 80109ac:	4629      	mov	r1, r5
 80109ae:	4630      	mov	r0, r6
 80109b0:	f7fd fad4 	bl	800df5c <__swsetup_r>
 80109b4:	b170      	cbz	r0, 80109d4 <_vfiprintf_r+0x5c>
 80109b6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80109b8:	07dc      	lsls	r4, r3, #31
 80109ba:	d504      	bpl.n	80109c6 <_vfiprintf_r+0x4e>
 80109bc:	f04f 30ff 	mov.w	r0, #4294967295
 80109c0:	b01d      	add	sp, #116	@ 0x74
 80109c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109c6:	89ab      	ldrh	r3, [r5, #12]
 80109c8:	0598      	lsls	r0, r3, #22
 80109ca:	d4f7      	bmi.n	80109bc <_vfiprintf_r+0x44>
 80109cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80109ce:	f7fd fb99 	bl	800e104 <__retarget_lock_release_recursive>
 80109d2:	e7f3      	b.n	80109bc <_vfiprintf_r+0x44>
 80109d4:	2300      	movs	r3, #0
 80109d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80109d8:	2320      	movs	r3, #32
 80109da:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80109de:	f8cd 800c 	str.w	r8, [sp, #12]
 80109e2:	2330      	movs	r3, #48	@ 0x30
 80109e4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010b94 <_vfiprintf_r+0x21c>
 80109e8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80109ec:	f04f 0901 	mov.w	r9, #1
 80109f0:	4623      	mov	r3, r4
 80109f2:	469a      	mov	sl, r3
 80109f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80109f8:	b10a      	cbz	r2, 80109fe <_vfiprintf_r+0x86>
 80109fa:	2a25      	cmp	r2, #37	@ 0x25
 80109fc:	d1f9      	bne.n	80109f2 <_vfiprintf_r+0x7a>
 80109fe:	ebba 0b04 	subs.w	fp, sl, r4
 8010a02:	d00b      	beq.n	8010a1c <_vfiprintf_r+0xa4>
 8010a04:	465b      	mov	r3, fp
 8010a06:	4622      	mov	r2, r4
 8010a08:	4629      	mov	r1, r5
 8010a0a:	4630      	mov	r0, r6
 8010a0c:	f7ff ffa1 	bl	8010952 <__sfputs_r>
 8010a10:	3001      	adds	r0, #1
 8010a12:	f000 80a7 	beq.w	8010b64 <_vfiprintf_r+0x1ec>
 8010a16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010a18:	445a      	add	r2, fp
 8010a1a:	9209      	str	r2, [sp, #36]	@ 0x24
 8010a1c:	f89a 3000 	ldrb.w	r3, [sl]
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	f000 809f 	beq.w	8010b64 <_vfiprintf_r+0x1ec>
 8010a26:	2300      	movs	r3, #0
 8010a28:	f04f 32ff 	mov.w	r2, #4294967295
 8010a2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010a30:	f10a 0a01 	add.w	sl, sl, #1
 8010a34:	9304      	str	r3, [sp, #16]
 8010a36:	9307      	str	r3, [sp, #28]
 8010a38:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010a3c:	931a      	str	r3, [sp, #104]	@ 0x68
 8010a3e:	4654      	mov	r4, sl
 8010a40:	2205      	movs	r2, #5
 8010a42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a46:	4853      	ldr	r0, [pc, #332]	@ (8010b94 <_vfiprintf_r+0x21c>)
 8010a48:	f7ef fbc2 	bl	80001d0 <memchr>
 8010a4c:	9a04      	ldr	r2, [sp, #16]
 8010a4e:	b9d8      	cbnz	r0, 8010a88 <_vfiprintf_r+0x110>
 8010a50:	06d1      	lsls	r1, r2, #27
 8010a52:	bf44      	itt	mi
 8010a54:	2320      	movmi	r3, #32
 8010a56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010a5a:	0713      	lsls	r3, r2, #28
 8010a5c:	bf44      	itt	mi
 8010a5e:	232b      	movmi	r3, #43	@ 0x2b
 8010a60:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010a64:	f89a 3000 	ldrb.w	r3, [sl]
 8010a68:	2b2a      	cmp	r3, #42	@ 0x2a
 8010a6a:	d015      	beq.n	8010a98 <_vfiprintf_r+0x120>
 8010a6c:	9a07      	ldr	r2, [sp, #28]
 8010a6e:	4654      	mov	r4, sl
 8010a70:	2000      	movs	r0, #0
 8010a72:	f04f 0c0a 	mov.w	ip, #10
 8010a76:	4621      	mov	r1, r4
 8010a78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010a7c:	3b30      	subs	r3, #48	@ 0x30
 8010a7e:	2b09      	cmp	r3, #9
 8010a80:	d94b      	bls.n	8010b1a <_vfiprintf_r+0x1a2>
 8010a82:	b1b0      	cbz	r0, 8010ab2 <_vfiprintf_r+0x13a>
 8010a84:	9207      	str	r2, [sp, #28]
 8010a86:	e014      	b.n	8010ab2 <_vfiprintf_r+0x13a>
 8010a88:	eba0 0308 	sub.w	r3, r0, r8
 8010a8c:	fa09 f303 	lsl.w	r3, r9, r3
 8010a90:	4313      	orrs	r3, r2
 8010a92:	9304      	str	r3, [sp, #16]
 8010a94:	46a2      	mov	sl, r4
 8010a96:	e7d2      	b.n	8010a3e <_vfiprintf_r+0xc6>
 8010a98:	9b03      	ldr	r3, [sp, #12]
 8010a9a:	1d19      	adds	r1, r3, #4
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	9103      	str	r1, [sp, #12]
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	bfbb      	ittet	lt
 8010aa4:	425b      	neglt	r3, r3
 8010aa6:	f042 0202 	orrlt.w	r2, r2, #2
 8010aaa:	9307      	strge	r3, [sp, #28]
 8010aac:	9307      	strlt	r3, [sp, #28]
 8010aae:	bfb8      	it	lt
 8010ab0:	9204      	strlt	r2, [sp, #16]
 8010ab2:	7823      	ldrb	r3, [r4, #0]
 8010ab4:	2b2e      	cmp	r3, #46	@ 0x2e
 8010ab6:	d10a      	bne.n	8010ace <_vfiprintf_r+0x156>
 8010ab8:	7863      	ldrb	r3, [r4, #1]
 8010aba:	2b2a      	cmp	r3, #42	@ 0x2a
 8010abc:	d132      	bne.n	8010b24 <_vfiprintf_r+0x1ac>
 8010abe:	9b03      	ldr	r3, [sp, #12]
 8010ac0:	1d1a      	adds	r2, r3, #4
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	9203      	str	r2, [sp, #12]
 8010ac6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010aca:	3402      	adds	r4, #2
 8010acc:	9305      	str	r3, [sp, #20]
 8010ace:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010ba4 <_vfiprintf_r+0x22c>
 8010ad2:	7821      	ldrb	r1, [r4, #0]
 8010ad4:	2203      	movs	r2, #3
 8010ad6:	4650      	mov	r0, sl
 8010ad8:	f7ef fb7a 	bl	80001d0 <memchr>
 8010adc:	b138      	cbz	r0, 8010aee <_vfiprintf_r+0x176>
 8010ade:	9b04      	ldr	r3, [sp, #16]
 8010ae0:	eba0 000a 	sub.w	r0, r0, sl
 8010ae4:	2240      	movs	r2, #64	@ 0x40
 8010ae6:	4082      	lsls	r2, r0
 8010ae8:	4313      	orrs	r3, r2
 8010aea:	3401      	adds	r4, #1
 8010aec:	9304      	str	r3, [sp, #16]
 8010aee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010af2:	4829      	ldr	r0, [pc, #164]	@ (8010b98 <_vfiprintf_r+0x220>)
 8010af4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010af8:	2206      	movs	r2, #6
 8010afa:	f7ef fb69 	bl	80001d0 <memchr>
 8010afe:	2800      	cmp	r0, #0
 8010b00:	d03f      	beq.n	8010b82 <_vfiprintf_r+0x20a>
 8010b02:	4b26      	ldr	r3, [pc, #152]	@ (8010b9c <_vfiprintf_r+0x224>)
 8010b04:	bb1b      	cbnz	r3, 8010b4e <_vfiprintf_r+0x1d6>
 8010b06:	9b03      	ldr	r3, [sp, #12]
 8010b08:	3307      	adds	r3, #7
 8010b0a:	f023 0307 	bic.w	r3, r3, #7
 8010b0e:	3308      	adds	r3, #8
 8010b10:	9303      	str	r3, [sp, #12]
 8010b12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b14:	443b      	add	r3, r7
 8010b16:	9309      	str	r3, [sp, #36]	@ 0x24
 8010b18:	e76a      	b.n	80109f0 <_vfiprintf_r+0x78>
 8010b1a:	fb0c 3202 	mla	r2, ip, r2, r3
 8010b1e:	460c      	mov	r4, r1
 8010b20:	2001      	movs	r0, #1
 8010b22:	e7a8      	b.n	8010a76 <_vfiprintf_r+0xfe>
 8010b24:	2300      	movs	r3, #0
 8010b26:	3401      	adds	r4, #1
 8010b28:	9305      	str	r3, [sp, #20]
 8010b2a:	4619      	mov	r1, r3
 8010b2c:	f04f 0c0a 	mov.w	ip, #10
 8010b30:	4620      	mov	r0, r4
 8010b32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010b36:	3a30      	subs	r2, #48	@ 0x30
 8010b38:	2a09      	cmp	r2, #9
 8010b3a:	d903      	bls.n	8010b44 <_vfiprintf_r+0x1cc>
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d0c6      	beq.n	8010ace <_vfiprintf_r+0x156>
 8010b40:	9105      	str	r1, [sp, #20]
 8010b42:	e7c4      	b.n	8010ace <_vfiprintf_r+0x156>
 8010b44:	fb0c 2101 	mla	r1, ip, r1, r2
 8010b48:	4604      	mov	r4, r0
 8010b4a:	2301      	movs	r3, #1
 8010b4c:	e7f0      	b.n	8010b30 <_vfiprintf_r+0x1b8>
 8010b4e:	ab03      	add	r3, sp, #12
 8010b50:	9300      	str	r3, [sp, #0]
 8010b52:	462a      	mov	r2, r5
 8010b54:	4b12      	ldr	r3, [pc, #72]	@ (8010ba0 <_vfiprintf_r+0x228>)
 8010b56:	a904      	add	r1, sp, #16
 8010b58:	4630      	mov	r0, r6
 8010b5a:	f7fc fa5f 	bl	800d01c <_printf_float>
 8010b5e:	4607      	mov	r7, r0
 8010b60:	1c78      	adds	r0, r7, #1
 8010b62:	d1d6      	bne.n	8010b12 <_vfiprintf_r+0x19a>
 8010b64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010b66:	07d9      	lsls	r1, r3, #31
 8010b68:	d405      	bmi.n	8010b76 <_vfiprintf_r+0x1fe>
 8010b6a:	89ab      	ldrh	r3, [r5, #12]
 8010b6c:	059a      	lsls	r2, r3, #22
 8010b6e:	d402      	bmi.n	8010b76 <_vfiprintf_r+0x1fe>
 8010b70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010b72:	f7fd fac7 	bl	800e104 <__retarget_lock_release_recursive>
 8010b76:	89ab      	ldrh	r3, [r5, #12]
 8010b78:	065b      	lsls	r3, r3, #25
 8010b7a:	f53f af1f 	bmi.w	80109bc <_vfiprintf_r+0x44>
 8010b7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010b80:	e71e      	b.n	80109c0 <_vfiprintf_r+0x48>
 8010b82:	ab03      	add	r3, sp, #12
 8010b84:	9300      	str	r3, [sp, #0]
 8010b86:	462a      	mov	r2, r5
 8010b88:	4b05      	ldr	r3, [pc, #20]	@ (8010ba0 <_vfiprintf_r+0x228>)
 8010b8a:	a904      	add	r1, sp, #16
 8010b8c:	4630      	mov	r0, r6
 8010b8e:	f7fc fcdd 	bl	800d54c <_printf_i>
 8010b92:	e7e4      	b.n	8010b5e <_vfiprintf_r+0x1e6>
 8010b94:	08011ec1 	.word	0x08011ec1
 8010b98:	08011ecb 	.word	0x08011ecb
 8010b9c:	0800d01d 	.word	0x0800d01d
 8010ba0:	08010953 	.word	0x08010953
 8010ba4:	08011ec7 	.word	0x08011ec7

08010ba8 <__sflush_r>:
 8010ba8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010bb0:	0716      	lsls	r6, r2, #28
 8010bb2:	4605      	mov	r5, r0
 8010bb4:	460c      	mov	r4, r1
 8010bb6:	d454      	bmi.n	8010c62 <__sflush_r+0xba>
 8010bb8:	684b      	ldr	r3, [r1, #4]
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	dc02      	bgt.n	8010bc4 <__sflush_r+0x1c>
 8010bbe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	dd48      	ble.n	8010c56 <__sflush_r+0xae>
 8010bc4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010bc6:	2e00      	cmp	r6, #0
 8010bc8:	d045      	beq.n	8010c56 <__sflush_r+0xae>
 8010bca:	2300      	movs	r3, #0
 8010bcc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010bd0:	682f      	ldr	r7, [r5, #0]
 8010bd2:	6a21      	ldr	r1, [r4, #32]
 8010bd4:	602b      	str	r3, [r5, #0]
 8010bd6:	d030      	beq.n	8010c3a <__sflush_r+0x92>
 8010bd8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010bda:	89a3      	ldrh	r3, [r4, #12]
 8010bdc:	0759      	lsls	r1, r3, #29
 8010bde:	d505      	bpl.n	8010bec <__sflush_r+0x44>
 8010be0:	6863      	ldr	r3, [r4, #4]
 8010be2:	1ad2      	subs	r2, r2, r3
 8010be4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010be6:	b10b      	cbz	r3, 8010bec <__sflush_r+0x44>
 8010be8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010bea:	1ad2      	subs	r2, r2, r3
 8010bec:	2300      	movs	r3, #0
 8010bee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010bf0:	6a21      	ldr	r1, [r4, #32]
 8010bf2:	4628      	mov	r0, r5
 8010bf4:	47b0      	blx	r6
 8010bf6:	1c43      	adds	r3, r0, #1
 8010bf8:	89a3      	ldrh	r3, [r4, #12]
 8010bfa:	d106      	bne.n	8010c0a <__sflush_r+0x62>
 8010bfc:	6829      	ldr	r1, [r5, #0]
 8010bfe:	291d      	cmp	r1, #29
 8010c00:	d82b      	bhi.n	8010c5a <__sflush_r+0xb2>
 8010c02:	4a2a      	ldr	r2, [pc, #168]	@ (8010cac <__sflush_r+0x104>)
 8010c04:	410a      	asrs	r2, r1
 8010c06:	07d6      	lsls	r6, r2, #31
 8010c08:	d427      	bmi.n	8010c5a <__sflush_r+0xb2>
 8010c0a:	2200      	movs	r2, #0
 8010c0c:	6062      	str	r2, [r4, #4]
 8010c0e:	04d9      	lsls	r1, r3, #19
 8010c10:	6922      	ldr	r2, [r4, #16]
 8010c12:	6022      	str	r2, [r4, #0]
 8010c14:	d504      	bpl.n	8010c20 <__sflush_r+0x78>
 8010c16:	1c42      	adds	r2, r0, #1
 8010c18:	d101      	bne.n	8010c1e <__sflush_r+0x76>
 8010c1a:	682b      	ldr	r3, [r5, #0]
 8010c1c:	b903      	cbnz	r3, 8010c20 <__sflush_r+0x78>
 8010c1e:	6560      	str	r0, [r4, #84]	@ 0x54
 8010c20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010c22:	602f      	str	r7, [r5, #0]
 8010c24:	b1b9      	cbz	r1, 8010c56 <__sflush_r+0xae>
 8010c26:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010c2a:	4299      	cmp	r1, r3
 8010c2c:	d002      	beq.n	8010c34 <__sflush_r+0x8c>
 8010c2e:	4628      	mov	r0, r5
 8010c30:	f7fe f8ea 	bl	800ee08 <_free_r>
 8010c34:	2300      	movs	r3, #0
 8010c36:	6363      	str	r3, [r4, #52]	@ 0x34
 8010c38:	e00d      	b.n	8010c56 <__sflush_r+0xae>
 8010c3a:	2301      	movs	r3, #1
 8010c3c:	4628      	mov	r0, r5
 8010c3e:	47b0      	blx	r6
 8010c40:	4602      	mov	r2, r0
 8010c42:	1c50      	adds	r0, r2, #1
 8010c44:	d1c9      	bne.n	8010bda <__sflush_r+0x32>
 8010c46:	682b      	ldr	r3, [r5, #0]
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	d0c6      	beq.n	8010bda <__sflush_r+0x32>
 8010c4c:	2b1d      	cmp	r3, #29
 8010c4e:	d001      	beq.n	8010c54 <__sflush_r+0xac>
 8010c50:	2b16      	cmp	r3, #22
 8010c52:	d11e      	bne.n	8010c92 <__sflush_r+0xea>
 8010c54:	602f      	str	r7, [r5, #0]
 8010c56:	2000      	movs	r0, #0
 8010c58:	e022      	b.n	8010ca0 <__sflush_r+0xf8>
 8010c5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010c5e:	b21b      	sxth	r3, r3
 8010c60:	e01b      	b.n	8010c9a <__sflush_r+0xf2>
 8010c62:	690f      	ldr	r7, [r1, #16]
 8010c64:	2f00      	cmp	r7, #0
 8010c66:	d0f6      	beq.n	8010c56 <__sflush_r+0xae>
 8010c68:	0793      	lsls	r3, r2, #30
 8010c6a:	680e      	ldr	r6, [r1, #0]
 8010c6c:	bf08      	it	eq
 8010c6e:	694b      	ldreq	r3, [r1, #20]
 8010c70:	600f      	str	r7, [r1, #0]
 8010c72:	bf18      	it	ne
 8010c74:	2300      	movne	r3, #0
 8010c76:	eba6 0807 	sub.w	r8, r6, r7
 8010c7a:	608b      	str	r3, [r1, #8]
 8010c7c:	f1b8 0f00 	cmp.w	r8, #0
 8010c80:	dde9      	ble.n	8010c56 <__sflush_r+0xae>
 8010c82:	6a21      	ldr	r1, [r4, #32]
 8010c84:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010c86:	4643      	mov	r3, r8
 8010c88:	463a      	mov	r2, r7
 8010c8a:	4628      	mov	r0, r5
 8010c8c:	47b0      	blx	r6
 8010c8e:	2800      	cmp	r0, #0
 8010c90:	dc08      	bgt.n	8010ca4 <__sflush_r+0xfc>
 8010c92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010c9a:	81a3      	strh	r3, [r4, #12]
 8010c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8010ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ca4:	4407      	add	r7, r0
 8010ca6:	eba8 0800 	sub.w	r8, r8, r0
 8010caa:	e7e7      	b.n	8010c7c <__sflush_r+0xd4>
 8010cac:	dfbffffe 	.word	0xdfbffffe

08010cb0 <_fflush_r>:
 8010cb0:	b538      	push	{r3, r4, r5, lr}
 8010cb2:	690b      	ldr	r3, [r1, #16]
 8010cb4:	4605      	mov	r5, r0
 8010cb6:	460c      	mov	r4, r1
 8010cb8:	b913      	cbnz	r3, 8010cc0 <_fflush_r+0x10>
 8010cba:	2500      	movs	r5, #0
 8010cbc:	4628      	mov	r0, r5
 8010cbe:	bd38      	pop	{r3, r4, r5, pc}
 8010cc0:	b118      	cbz	r0, 8010cca <_fflush_r+0x1a>
 8010cc2:	6a03      	ldr	r3, [r0, #32]
 8010cc4:	b90b      	cbnz	r3, 8010cca <_fflush_r+0x1a>
 8010cc6:	f7fd f801 	bl	800dccc <__sinit>
 8010cca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d0f3      	beq.n	8010cba <_fflush_r+0xa>
 8010cd2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010cd4:	07d0      	lsls	r0, r2, #31
 8010cd6:	d404      	bmi.n	8010ce2 <_fflush_r+0x32>
 8010cd8:	0599      	lsls	r1, r3, #22
 8010cda:	d402      	bmi.n	8010ce2 <_fflush_r+0x32>
 8010cdc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010cde:	f7fd fa10 	bl	800e102 <__retarget_lock_acquire_recursive>
 8010ce2:	4628      	mov	r0, r5
 8010ce4:	4621      	mov	r1, r4
 8010ce6:	f7ff ff5f 	bl	8010ba8 <__sflush_r>
 8010cea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010cec:	07da      	lsls	r2, r3, #31
 8010cee:	4605      	mov	r5, r0
 8010cf0:	d4e4      	bmi.n	8010cbc <_fflush_r+0xc>
 8010cf2:	89a3      	ldrh	r3, [r4, #12]
 8010cf4:	059b      	lsls	r3, r3, #22
 8010cf6:	d4e1      	bmi.n	8010cbc <_fflush_r+0xc>
 8010cf8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010cfa:	f7fd fa03 	bl	800e104 <__retarget_lock_release_recursive>
 8010cfe:	e7dd      	b.n	8010cbc <_fflush_r+0xc>

08010d00 <fiprintf>:
 8010d00:	b40e      	push	{r1, r2, r3}
 8010d02:	b503      	push	{r0, r1, lr}
 8010d04:	4601      	mov	r1, r0
 8010d06:	ab03      	add	r3, sp, #12
 8010d08:	4805      	ldr	r0, [pc, #20]	@ (8010d20 <fiprintf+0x20>)
 8010d0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8010d0e:	6800      	ldr	r0, [r0, #0]
 8010d10:	9301      	str	r3, [sp, #4]
 8010d12:	f7ff fe31 	bl	8010978 <_vfiprintf_r>
 8010d16:	b002      	add	sp, #8
 8010d18:	f85d eb04 	ldr.w	lr, [sp], #4
 8010d1c:	b003      	add	sp, #12
 8010d1e:	4770      	bx	lr
 8010d20:	2000005c 	.word	0x2000005c

08010d24 <__swhatbuf_r>:
 8010d24:	b570      	push	{r4, r5, r6, lr}
 8010d26:	460c      	mov	r4, r1
 8010d28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d2c:	2900      	cmp	r1, #0
 8010d2e:	b096      	sub	sp, #88	@ 0x58
 8010d30:	4615      	mov	r5, r2
 8010d32:	461e      	mov	r6, r3
 8010d34:	da0d      	bge.n	8010d52 <__swhatbuf_r+0x2e>
 8010d36:	89a3      	ldrh	r3, [r4, #12]
 8010d38:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010d3c:	f04f 0100 	mov.w	r1, #0
 8010d40:	bf14      	ite	ne
 8010d42:	2340      	movne	r3, #64	@ 0x40
 8010d44:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010d48:	2000      	movs	r0, #0
 8010d4a:	6031      	str	r1, [r6, #0]
 8010d4c:	602b      	str	r3, [r5, #0]
 8010d4e:	b016      	add	sp, #88	@ 0x58
 8010d50:	bd70      	pop	{r4, r5, r6, pc}
 8010d52:	466a      	mov	r2, sp
 8010d54:	f000 f874 	bl	8010e40 <_fstat_r>
 8010d58:	2800      	cmp	r0, #0
 8010d5a:	dbec      	blt.n	8010d36 <__swhatbuf_r+0x12>
 8010d5c:	9901      	ldr	r1, [sp, #4]
 8010d5e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010d62:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010d66:	4259      	negs	r1, r3
 8010d68:	4159      	adcs	r1, r3
 8010d6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010d6e:	e7eb      	b.n	8010d48 <__swhatbuf_r+0x24>

08010d70 <__smakebuf_r>:
 8010d70:	898b      	ldrh	r3, [r1, #12]
 8010d72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010d74:	079d      	lsls	r5, r3, #30
 8010d76:	4606      	mov	r6, r0
 8010d78:	460c      	mov	r4, r1
 8010d7a:	d507      	bpl.n	8010d8c <__smakebuf_r+0x1c>
 8010d7c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010d80:	6023      	str	r3, [r4, #0]
 8010d82:	6123      	str	r3, [r4, #16]
 8010d84:	2301      	movs	r3, #1
 8010d86:	6163      	str	r3, [r4, #20]
 8010d88:	b003      	add	sp, #12
 8010d8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d8c:	ab01      	add	r3, sp, #4
 8010d8e:	466a      	mov	r2, sp
 8010d90:	f7ff ffc8 	bl	8010d24 <__swhatbuf_r>
 8010d94:	9f00      	ldr	r7, [sp, #0]
 8010d96:	4605      	mov	r5, r0
 8010d98:	4639      	mov	r1, r7
 8010d9a:	4630      	mov	r0, r6
 8010d9c:	f7fe f8a8 	bl	800eef0 <_malloc_r>
 8010da0:	b948      	cbnz	r0, 8010db6 <__smakebuf_r+0x46>
 8010da2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010da6:	059a      	lsls	r2, r3, #22
 8010da8:	d4ee      	bmi.n	8010d88 <__smakebuf_r+0x18>
 8010daa:	f023 0303 	bic.w	r3, r3, #3
 8010dae:	f043 0302 	orr.w	r3, r3, #2
 8010db2:	81a3      	strh	r3, [r4, #12]
 8010db4:	e7e2      	b.n	8010d7c <__smakebuf_r+0xc>
 8010db6:	89a3      	ldrh	r3, [r4, #12]
 8010db8:	6020      	str	r0, [r4, #0]
 8010dba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010dbe:	81a3      	strh	r3, [r4, #12]
 8010dc0:	9b01      	ldr	r3, [sp, #4]
 8010dc2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010dc6:	b15b      	cbz	r3, 8010de0 <__smakebuf_r+0x70>
 8010dc8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010dcc:	4630      	mov	r0, r6
 8010dce:	f000 f849 	bl	8010e64 <_isatty_r>
 8010dd2:	b128      	cbz	r0, 8010de0 <__smakebuf_r+0x70>
 8010dd4:	89a3      	ldrh	r3, [r4, #12]
 8010dd6:	f023 0303 	bic.w	r3, r3, #3
 8010dda:	f043 0301 	orr.w	r3, r3, #1
 8010dde:	81a3      	strh	r3, [r4, #12]
 8010de0:	89a3      	ldrh	r3, [r4, #12]
 8010de2:	431d      	orrs	r5, r3
 8010de4:	81a5      	strh	r5, [r4, #12]
 8010de6:	e7cf      	b.n	8010d88 <__smakebuf_r+0x18>

08010de8 <memmove>:
 8010de8:	4288      	cmp	r0, r1
 8010dea:	b510      	push	{r4, lr}
 8010dec:	eb01 0402 	add.w	r4, r1, r2
 8010df0:	d902      	bls.n	8010df8 <memmove+0x10>
 8010df2:	4284      	cmp	r4, r0
 8010df4:	4623      	mov	r3, r4
 8010df6:	d807      	bhi.n	8010e08 <memmove+0x20>
 8010df8:	1e43      	subs	r3, r0, #1
 8010dfa:	42a1      	cmp	r1, r4
 8010dfc:	d008      	beq.n	8010e10 <memmove+0x28>
 8010dfe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010e02:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010e06:	e7f8      	b.n	8010dfa <memmove+0x12>
 8010e08:	4402      	add	r2, r0
 8010e0a:	4601      	mov	r1, r0
 8010e0c:	428a      	cmp	r2, r1
 8010e0e:	d100      	bne.n	8010e12 <memmove+0x2a>
 8010e10:	bd10      	pop	{r4, pc}
 8010e12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010e16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010e1a:	e7f7      	b.n	8010e0c <memmove+0x24>

08010e1c <strncmp>:
 8010e1c:	b510      	push	{r4, lr}
 8010e1e:	b16a      	cbz	r2, 8010e3c <strncmp+0x20>
 8010e20:	3901      	subs	r1, #1
 8010e22:	1884      	adds	r4, r0, r2
 8010e24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010e28:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8010e2c:	429a      	cmp	r2, r3
 8010e2e:	d103      	bne.n	8010e38 <strncmp+0x1c>
 8010e30:	42a0      	cmp	r0, r4
 8010e32:	d001      	beq.n	8010e38 <strncmp+0x1c>
 8010e34:	2a00      	cmp	r2, #0
 8010e36:	d1f5      	bne.n	8010e24 <strncmp+0x8>
 8010e38:	1ad0      	subs	r0, r2, r3
 8010e3a:	bd10      	pop	{r4, pc}
 8010e3c:	4610      	mov	r0, r2
 8010e3e:	e7fc      	b.n	8010e3a <strncmp+0x1e>

08010e40 <_fstat_r>:
 8010e40:	b538      	push	{r3, r4, r5, lr}
 8010e42:	4d07      	ldr	r5, [pc, #28]	@ (8010e60 <_fstat_r+0x20>)
 8010e44:	2300      	movs	r3, #0
 8010e46:	4604      	mov	r4, r0
 8010e48:	4608      	mov	r0, r1
 8010e4a:	4611      	mov	r1, r2
 8010e4c:	602b      	str	r3, [r5, #0]
 8010e4e:	f7f3 fac5 	bl	80043dc <_fstat>
 8010e52:	1c43      	adds	r3, r0, #1
 8010e54:	d102      	bne.n	8010e5c <_fstat_r+0x1c>
 8010e56:	682b      	ldr	r3, [r5, #0]
 8010e58:	b103      	cbz	r3, 8010e5c <_fstat_r+0x1c>
 8010e5a:	6023      	str	r3, [r4, #0]
 8010e5c:	bd38      	pop	{r3, r4, r5, pc}
 8010e5e:	bf00      	nop
 8010e60:	20004198 	.word	0x20004198

08010e64 <_isatty_r>:
 8010e64:	b538      	push	{r3, r4, r5, lr}
 8010e66:	4d06      	ldr	r5, [pc, #24]	@ (8010e80 <_isatty_r+0x1c>)
 8010e68:	2300      	movs	r3, #0
 8010e6a:	4604      	mov	r4, r0
 8010e6c:	4608      	mov	r0, r1
 8010e6e:	602b      	str	r3, [r5, #0]
 8010e70:	f7f3 fac4 	bl	80043fc <_isatty>
 8010e74:	1c43      	adds	r3, r0, #1
 8010e76:	d102      	bne.n	8010e7e <_isatty_r+0x1a>
 8010e78:	682b      	ldr	r3, [r5, #0]
 8010e7a:	b103      	cbz	r3, 8010e7e <_isatty_r+0x1a>
 8010e7c:	6023      	str	r3, [r4, #0]
 8010e7e:	bd38      	pop	{r3, r4, r5, pc}
 8010e80:	20004198 	.word	0x20004198

08010e84 <_sbrk_r>:
 8010e84:	b538      	push	{r3, r4, r5, lr}
 8010e86:	4d06      	ldr	r5, [pc, #24]	@ (8010ea0 <_sbrk_r+0x1c>)
 8010e88:	2300      	movs	r3, #0
 8010e8a:	4604      	mov	r4, r0
 8010e8c:	4608      	mov	r0, r1
 8010e8e:	602b      	str	r3, [r5, #0]
 8010e90:	f7f3 facc 	bl	800442c <_sbrk>
 8010e94:	1c43      	adds	r3, r0, #1
 8010e96:	d102      	bne.n	8010e9e <_sbrk_r+0x1a>
 8010e98:	682b      	ldr	r3, [r5, #0]
 8010e9a:	b103      	cbz	r3, 8010e9e <_sbrk_r+0x1a>
 8010e9c:	6023      	str	r3, [r4, #0]
 8010e9e:	bd38      	pop	{r3, r4, r5, pc}
 8010ea0:	20004198 	.word	0x20004198
 8010ea4:	00000000 	.word	0x00000000

08010ea8 <nan>:
 8010ea8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010eb0 <nan+0x8>
 8010eac:	4770      	bx	lr
 8010eae:	bf00      	nop
 8010eb0:	00000000 	.word	0x00000000
 8010eb4:	7ff80000 	.word	0x7ff80000

08010eb8 <abort>:
 8010eb8:	b508      	push	{r3, lr}
 8010eba:	2006      	movs	r0, #6
 8010ebc:	f000 fbc4 	bl	8011648 <raise>
 8010ec0:	2001      	movs	r0, #1
 8010ec2:	f7f3 fa3b 	bl	800433c <_exit>

08010ec6 <_calloc_r>:
 8010ec6:	b570      	push	{r4, r5, r6, lr}
 8010ec8:	fba1 5402 	umull	r5, r4, r1, r2
 8010ecc:	b93c      	cbnz	r4, 8010ede <_calloc_r+0x18>
 8010ece:	4629      	mov	r1, r5
 8010ed0:	f7fe f80e 	bl	800eef0 <_malloc_r>
 8010ed4:	4606      	mov	r6, r0
 8010ed6:	b928      	cbnz	r0, 8010ee4 <_calloc_r+0x1e>
 8010ed8:	2600      	movs	r6, #0
 8010eda:	4630      	mov	r0, r6
 8010edc:	bd70      	pop	{r4, r5, r6, pc}
 8010ede:	220c      	movs	r2, #12
 8010ee0:	6002      	str	r2, [r0, #0]
 8010ee2:	e7f9      	b.n	8010ed8 <_calloc_r+0x12>
 8010ee4:	462a      	mov	r2, r5
 8010ee6:	4621      	mov	r1, r4
 8010ee8:	f7fd f88e 	bl	800e008 <memset>
 8010eec:	e7f5      	b.n	8010eda <_calloc_r+0x14>

08010eee <rshift>:
 8010eee:	6903      	ldr	r3, [r0, #16]
 8010ef0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010ef4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010ef8:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010efc:	f100 0414 	add.w	r4, r0, #20
 8010f00:	dd45      	ble.n	8010f8e <rshift+0xa0>
 8010f02:	f011 011f 	ands.w	r1, r1, #31
 8010f06:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010f0a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010f0e:	d10c      	bne.n	8010f2a <rshift+0x3c>
 8010f10:	f100 0710 	add.w	r7, r0, #16
 8010f14:	4629      	mov	r1, r5
 8010f16:	42b1      	cmp	r1, r6
 8010f18:	d334      	bcc.n	8010f84 <rshift+0x96>
 8010f1a:	1a9b      	subs	r3, r3, r2
 8010f1c:	009b      	lsls	r3, r3, #2
 8010f1e:	1eea      	subs	r2, r5, #3
 8010f20:	4296      	cmp	r6, r2
 8010f22:	bf38      	it	cc
 8010f24:	2300      	movcc	r3, #0
 8010f26:	4423      	add	r3, r4
 8010f28:	e015      	b.n	8010f56 <rshift+0x68>
 8010f2a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010f2e:	f1c1 0820 	rsb	r8, r1, #32
 8010f32:	40cf      	lsrs	r7, r1
 8010f34:	f105 0e04 	add.w	lr, r5, #4
 8010f38:	46a1      	mov	r9, r4
 8010f3a:	4576      	cmp	r6, lr
 8010f3c:	46f4      	mov	ip, lr
 8010f3e:	d815      	bhi.n	8010f6c <rshift+0x7e>
 8010f40:	1a9a      	subs	r2, r3, r2
 8010f42:	0092      	lsls	r2, r2, #2
 8010f44:	3a04      	subs	r2, #4
 8010f46:	3501      	adds	r5, #1
 8010f48:	42ae      	cmp	r6, r5
 8010f4a:	bf38      	it	cc
 8010f4c:	2200      	movcc	r2, #0
 8010f4e:	18a3      	adds	r3, r4, r2
 8010f50:	50a7      	str	r7, [r4, r2]
 8010f52:	b107      	cbz	r7, 8010f56 <rshift+0x68>
 8010f54:	3304      	adds	r3, #4
 8010f56:	1b1a      	subs	r2, r3, r4
 8010f58:	42a3      	cmp	r3, r4
 8010f5a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010f5e:	bf08      	it	eq
 8010f60:	2300      	moveq	r3, #0
 8010f62:	6102      	str	r2, [r0, #16]
 8010f64:	bf08      	it	eq
 8010f66:	6143      	streq	r3, [r0, #20]
 8010f68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010f6c:	f8dc c000 	ldr.w	ip, [ip]
 8010f70:	fa0c fc08 	lsl.w	ip, ip, r8
 8010f74:	ea4c 0707 	orr.w	r7, ip, r7
 8010f78:	f849 7b04 	str.w	r7, [r9], #4
 8010f7c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010f80:	40cf      	lsrs	r7, r1
 8010f82:	e7da      	b.n	8010f3a <rshift+0x4c>
 8010f84:	f851 cb04 	ldr.w	ip, [r1], #4
 8010f88:	f847 cf04 	str.w	ip, [r7, #4]!
 8010f8c:	e7c3      	b.n	8010f16 <rshift+0x28>
 8010f8e:	4623      	mov	r3, r4
 8010f90:	e7e1      	b.n	8010f56 <rshift+0x68>

08010f92 <__hexdig_fun>:
 8010f92:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8010f96:	2b09      	cmp	r3, #9
 8010f98:	d802      	bhi.n	8010fa0 <__hexdig_fun+0xe>
 8010f9a:	3820      	subs	r0, #32
 8010f9c:	b2c0      	uxtb	r0, r0
 8010f9e:	4770      	bx	lr
 8010fa0:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8010fa4:	2b05      	cmp	r3, #5
 8010fa6:	d801      	bhi.n	8010fac <__hexdig_fun+0x1a>
 8010fa8:	3847      	subs	r0, #71	@ 0x47
 8010faa:	e7f7      	b.n	8010f9c <__hexdig_fun+0xa>
 8010fac:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8010fb0:	2b05      	cmp	r3, #5
 8010fb2:	d801      	bhi.n	8010fb8 <__hexdig_fun+0x26>
 8010fb4:	3827      	subs	r0, #39	@ 0x27
 8010fb6:	e7f1      	b.n	8010f9c <__hexdig_fun+0xa>
 8010fb8:	2000      	movs	r0, #0
 8010fba:	4770      	bx	lr

08010fbc <__gethex>:
 8010fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fc0:	b085      	sub	sp, #20
 8010fc2:	468a      	mov	sl, r1
 8010fc4:	9302      	str	r3, [sp, #8]
 8010fc6:	680b      	ldr	r3, [r1, #0]
 8010fc8:	9001      	str	r0, [sp, #4]
 8010fca:	4690      	mov	r8, r2
 8010fcc:	1c9c      	adds	r4, r3, #2
 8010fce:	46a1      	mov	r9, r4
 8010fd0:	f814 0b01 	ldrb.w	r0, [r4], #1
 8010fd4:	2830      	cmp	r0, #48	@ 0x30
 8010fd6:	d0fa      	beq.n	8010fce <__gethex+0x12>
 8010fd8:	eba9 0303 	sub.w	r3, r9, r3
 8010fdc:	f1a3 0b02 	sub.w	fp, r3, #2
 8010fe0:	f7ff ffd7 	bl	8010f92 <__hexdig_fun>
 8010fe4:	4605      	mov	r5, r0
 8010fe6:	2800      	cmp	r0, #0
 8010fe8:	d168      	bne.n	80110bc <__gethex+0x100>
 8010fea:	49a0      	ldr	r1, [pc, #640]	@ (801126c <__gethex+0x2b0>)
 8010fec:	2201      	movs	r2, #1
 8010fee:	4648      	mov	r0, r9
 8010ff0:	f7ff ff14 	bl	8010e1c <strncmp>
 8010ff4:	4607      	mov	r7, r0
 8010ff6:	2800      	cmp	r0, #0
 8010ff8:	d167      	bne.n	80110ca <__gethex+0x10e>
 8010ffa:	f899 0001 	ldrb.w	r0, [r9, #1]
 8010ffe:	4626      	mov	r6, r4
 8011000:	f7ff ffc7 	bl	8010f92 <__hexdig_fun>
 8011004:	2800      	cmp	r0, #0
 8011006:	d062      	beq.n	80110ce <__gethex+0x112>
 8011008:	4623      	mov	r3, r4
 801100a:	7818      	ldrb	r0, [r3, #0]
 801100c:	2830      	cmp	r0, #48	@ 0x30
 801100e:	4699      	mov	r9, r3
 8011010:	f103 0301 	add.w	r3, r3, #1
 8011014:	d0f9      	beq.n	801100a <__gethex+0x4e>
 8011016:	f7ff ffbc 	bl	8010f92 <__hexdig_fun>
 801101a:	fab0 f580 	clz	r5, r0
 801101e:	096d      	lsrs	r5, r5, #5
 8011020:	f04f 0b01 	mov.w	fp, #1
 8011024:	464a      	mov	r2, r9
 8011026:	4616      	mov	r6, r2
 8011028:	3201      	adds	r2, #1
 801102a:	7830      	ldrb	r0, [r6, #0]
 801102c:	f7ff ffb1 	bl	8010f92 <__hexdig_fun>
 8011030:	2800      	cmp	r0, #0
 8011032:	d1f8      	bne.n	8011026 <__gethex+0x6a>
 8011034:	498d      	ldr	r1, [pc, #564]	@ (801126c <__gethex+0x2b0>)
 8011036:	2201      	movs	r2, #1
 8011038:	4630      	mov	r0, r6
 801103a:	f7ff feef 	bl	8010e1c <strncmp>
 801103e:	2800      	cmp	r0, #0
 8011040:	d13f      	bne.n	80110c2 <__gethex+0x106>
 8011042:	b944      	cbnz	r4, 8011056 <__gethex+0x9a>
 8011044:	1c74      	adds	r4, r6, #1
 8011046:	4622      	mov	r2, r4
 8011048:	4616      	mov	r6, r2
 801104a:	3201      	adds	r2, #1
 801104c:	7830      	ldrb	r0, [r6, #0]
 801104e:	f7ff ffa0 	bl	8010f92 <__hexdig_fun>
 8011052:	2800      	cmp	r0, #0
 8011054:	d1f8      	bne.n	8011048 <__gethex+0x8c>
 8011056:	1ba4      	subs	r4, r4, r6
 8011058:	00a7      	lsls	r7, r4, #2
 801105a:	7833      	ldrb	r3, [r6, #0]
 801105c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8011060:	2b50      	cmp	r3, #80	@ 0x50
 8011062:	d13e      	bne.n	80110e2 <__gethex+0x126>
 8011064:	7873      	ldrb	r3, [r6, #1]
 8011066:	2b2b      	cmp	r3, #43	@ 0x2b
 8011068:	d033      	beq.n	80110d2 <__gethex+0x116>
 801106a:	2b2d      	cmp	r3, #45	@ 0x2d
 801106c:	d034      	beq.n	80110d8 <__gethex+0x11c>
 801106e:	1c71      	adds	r1, r6, #1
 8011070:	2400      	movs	r4, #0
 8011072:	7808      	ldrb	r0, [r1, #0]
 8011074:	f7ff ff8d 	bl	8010f92 <__hexdig_fun>
 8011078:	1e43      	subs	r3, r0, #1
 801107a:	b2db      	uxtb	r3, r3
 801107c:	2b18      	cmp	r3, #24
 801107e:	d830      	bhi.n	80110e2 <__gethex+0x126>
 8011080:	f1a0 0210 	sub.w	r2, r0, #16
 8011084:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011088:	f7ff ff83 	bl	8010f92 <__hexdig_fun>
 801108c:	f100 3cff 	add.w	ip, r0, #4294967295
 8011090:	fa5f fc8c 	uxtb.w	ip, ip
 8011094:	f1bc 0f18 	cmp.w	ip, #24
 8011098:	f04f 030a 	mov.w	r3, #10
 801109c:	d91e      	bls.n	80110dc <__gethex+0x120>
 801109e:	b104      	cbz	r4, 80110a2 <__gethex+0xe6>
 80110a0:	4252      	negs	r2, r2
 80110a2:	4417      	add	r7, r2
 80110a4:	f8ca 1000 	str.w	r1, [sl]
 80110a8:	b1ed      	cbz	r5, 80110e6 <__gethex+0x12a>
 80110aa:	f1bb 0f00 	cmp.w	fp, #0
 80110ae:	bf0c      	ite	eq
 80110b0:	2506      	moveq	r5, #6
 80110b2:	2500      	movne	r5, #0
 80110b4:	4628      	mov	r0, r5
 80110b6:	b005      	add	sp, #20
 80110b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110bc:	2500      	movs	r5, #0
 80110be:	462c      	mov	r4, r5
 80110c0:	e7b0      	b.n	8011024 <__gethex+0x68>
 80110c2:	2c00      	cmp	r4, #0
 80110c4:	d1c7      	bne.n	8011056 <__gethex+0x9a>
 80110c6:	4627      	mov	r7, r4
 80110c8:	e7c7      	b.n	801105a <__gethex+0x9e>
 80110ca:	464e      	mov	r6, r9
 80110cc:	462f      	mov	r7, r5
 80110ce:	2501      	movs	r5, #1
 80110d0:	e7c3      	b.n	801105a <__gethex+0x9e>
 80110d2:	2400      	movs	r4, #0
 80110d4:	1cb1      	adds	r1, r6, #2
 80110d6:	e7cc      	b.n	8011072 <__gethex+0xb6>
 80110d8:	2401      	movs	r4, #1
 80110da:	e7fb      	b.n	80110d4 <__gethex+0x118>
 80110dc:	fb03 0002 	mla	r0, r3, r2, r0
 80110e0:	e7ce      	b.n	8011080 <__gethex+0xc4>
 80110e2:	4631      	mov	r1, r6
 80110e4:	e7de      	b.n	80110a4 <__gethex+0xe8>
 80110e6:	eba6 0309 	sub.w	r3, r6, r9
 80110ea:	3b01      	subs	r3, #1
 80110ec:	4629      	mov	r1, r5
 80110ee:	2b07      	cmp	r3, #7
 80110f0:	dc0a      	bgt.n	8011108 <__gethex+0x14c>
 80110f2:	9801      	ldr	r0, [sp, #4]
 80110f4:	f7fd ff88 	bl	800f008 <_Balloc>
 80110f8:	4604      	mov	r4, r0
 80110fa:	b940      	cbnz	r0, 801110e <__gethex+0x152>
 80110fc:	4b5c      	ldr	r3, [pc, #368]	@ (8011270 <__gethex+0x2b4>)
 80110fe:	4602      	mov	r2, r0
 8011100:	21e4      	movs	r1, #228	@ 0xe4
 8011102:	485c      	ldr	r0, [pc, #368]	@ (8011274 <__gethex+0x2b8>)
 8011104:	f7fd f814 	bl	800e130 <__assert_func>
 8011108:	3101      	adds	r1, #1
 801110a:	105b      	asrs	r3, r3, #1
 801110c:	e7ef      	b.n	80110ee <__gethex+0x132>
 801110e:	f100 0a14 	add.w	sl, r0, #20
 8011112:	2300      	movs	r3, #0
 8011114:	4655      	mov	r5, sl
 8011116:	469b      	mov	fp, r3
 8011118:	45b1      	cmp	r9, r6
 801111a:	d337      	bcc.n	801118c <__gethex+0x1d0>
 801111c:	f845 bb04 	str.w	fp, [r5], #4
 8011120:	eba5 050a 	sub.w	r5, r5, sl
 8011124:	10ad      	asrs	r5, r5, #2
 8011126:	6125      	str	r5, [r4, #16]
 8011128:	4658      	mov	r0, fp
 801112a:	f7fe f85f 	bl	800f1ec <__hi0bits>
 801112e:	016d      	lsls	r5, r5, #5
 8011130:	f8d8 6000 	ldr.w	r6, [r8]
 8011134:	1a2d      	subs	r5, r5, r0
 8011136:	42b5      	cmp	r5, r6
 8011138:	dd54      	ble.n	80111e4 <__gethex+0x228>
 801113a:	1bad      	subs	r5, r5, r6
 801113c:	4629      	mov	r1, r5
 801113e:	4620      	mov	r0, r4
 8011140:	f7fe fbf3 	bl	800f92a <__any_on>
 8011144:	4681      	mov	r9, r0
 8011146:	b178      	cbz	r0, 8011168 <__gethex+0x1ac>
 8011148:	1e6b      	subs	r3, r5, #1
 801114a:	1159      	asrs	r1, r3, #5
 801114c:	f003 021f 	and.w	r2, r3, #31
 8011150:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8011154:	f04f 0901 	mov.w	r9, #1
 8011158:	fa09 f202 	lsl.w	r2, r9, r2
 801115c:	420a      	tst	r2, r1
 801115e:	d003      	beq.n	8011168 <__gethex+0x1ac>
 8011160:	454b      	cmp	r3, r9
 8011162:	dc36      	bgt.n	80111d2 <__gethex+0x216>
 8011164:	f04f 0902 	mov.w	r9, #2
 8011168:	4629      	mov	r1, r5
 801116a:	4620      	mov	r0, r4
 801116c:	f7ff febf 	bl	8010eee <rshift>
 8011170:	442f      	add	r7, r5
 8011172:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011176:	42bb      	cmp	r3, r7
 8011178:	da42      	bge.n	8011200 <__gethex+0x244>
 801117a:	9801      	ldr	r0, [sp, #4]
 801117c:	4621      	mov	r1, r4
 801117e:	f7fd ff83 	bl	800f088 <_Bfree>
 8011182:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011184:	2300      	movs	r3, #0
 8011186:	6013      	str	r3, [r2, #0]
 8011188:	25a3      	movs	r5, #163	@ 0xa3
 801118a:	e793      	b.n	80110b4 <__gethex+0xf8>
 801118c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8011190:	2a2e      	cmp	r2, #46	@ 0x2e
 8011192:	d012      	beq.n	80111ba <__gethex+0x1fe>
 8011194:	2b20      	cmp	r3, #32
 8011196:	d104      	bne.n	80111a2 <__gethex+0x1e6>
 8011198:	f845 bb04 	str.w	fp, [r5], #4
 801119c:	f04f 0b00 	mov.w	fp, #0
 80111a0:	465b      	mov	r3, fp
 80111a2:	7830      	ldrb	r0, [r6, #0]
 80111a4:	9303      	str	r3, [sp, #12]
 80111a6:	f7ff fef4 	bl	8010f92 <__hexdig_fun>
 80111aa:	9b03      	ldr	r3, [sp, #12]
 80111ac:	f000 000f 	and.w	r0, r0, #15
 80111b0:	4098      	lsls	r0, r3
 80111b2:	ea4b 0b00 	orr.w	fp, fp, r0
 80111b6:	3304      	adds	r3, #4
 80111b8:	e7ae      	b.n	8011118 <__gethex+0x15c>
 80111ba:	45b1      	cmp	r9, r6
 80111bc:	d8ea      	bhi.n	8011194 <__gethex+0x1d8>
 80111be:	492b      	ldr	r1, [pc, #172]	@ (801126c <__gethex+0x2b0>)
 80111c0:	9303      	str	r3, [sp, #12]
 80111c2:	2201      	movs	r2, #1
 80111c4:	4630      	mov	r0, r6
 80111c6:	f7ff fe29 	bl	8010e1c <strncmp>
 80111ca:	9b03      	ldr	r3, [sp, #12]
 80111cc:	2800      	cmp	r0, #0
 80111ce:	d1e1      	bne.n	8011194 <__gethex+0x1d8>
 80111d0:	e7a2      	b.n	8011118 <__gethex+0x15c>
 80111d2:	1ea9      	subs	r1, r5, #2
 80111d4:	4620      	mov	r0, r4
 80111d6:	f7fe fba8 	bl	800f92a <__any_on>
 80111da:	2800      	cmp	r0, #0
 80111dc:	d0c2      	beq.n	8011164 <__gethex+0x1a8>
 80111de:	f04f 0903 	mov.w	r9, #3
 80111e2:	e7c1      	b.n	8011168 <__gethex+0x1ac>
 80111e4:	da09      	bge.n	80111fa <__gethex+0x23e>
 80111e6:	1b75      	subs	r5, r6, r5
 80111e8:	4621      	mov	r1, r4
 80111ea:	9801      	ldr	r0, [sp, #4]
 80111ec:	462a      	mov	r2, r5
 80111ee:	f7fe f963 	bl	800f4b8 <__lshift>
 80111f2:	1b7f      	subs	r7, r7, r5
 80111f4:	4604      	mov	r4, r0
 80111f6:	f100 0a14 	add.w	sl, r0, #20
 80111fa:	f04f 0900 	mov.w	r9, #0
 80111fe:	e7b8      	b.n	8011172 <__gethex+0x1b6>
 8011200:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8011204:	42bd      	cmp	r5, r7
 8011206:	dd6f      	ble.n	80112e8 <__gethex+0x32c>
 8011208:	1bed      	subs	r5, r5, r7
 801120a:	42ae      	cmp	r6, r5
 801120c:	dc34      	bgt.n	8011278 <__gethex+0x2bc>
 801120e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011212:	2b02      	cmp	r3, #2
 8011214:	d022      	beq.n	801125c <__gethex+0x2a0>
 8011216:	2b03      	cmp	r3, #3
 8011218:	d024      	beq.n	8011264 <__gethex+0x2a8>
 801121a:	2b01      	cmp	r3, #1
 801121c:	d115      	bne.n	801124a <__gethex+0x28e>
 801121e:	42ae      	cmp	r6, r5
 8011220:	d113      	bne.n	801124a <__gethex+0x28e>
 8011222:	2e01      	cmp	r6, #1
 8011224:	d10b      	bne.n	801123e <__gethex+0x282>
 8011226:	9a02      	ldr	r2, [sp, #8]
 8011228:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801122c:	6013      	str	r3, [r2, #0]
 801122e:	2301      	movs	r3, #1
 8011230:	6123      	str	r3, [r4, #16]
 8011232:	f8ca 3000 	str.w	r3, [sl]
 8011236:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011238:	2562      	movs	r5, #98	@ 0x62
 801123a:	601c      	str	r4, [r3, #0]
 801123c:	e73a      	b.n	80110b4 <__gethex+0xf8>
 801123e:	1e71      	subs	r1, r6, #1
 8011240:	4620      	mov	r0, r4
 8011242:	f7fe fb72 	bl	800f92a <__any_on>
 8011246:	2800      	cmp	r0, #0
 8011248:	d1ed      	bne.n	8011226 <__gethex+0x26a>
 801124a:	9801      	ldr	r0, [sp, #4]
 801124c:	4621      	mov	r1, r4
 801124e:	f7fd ff1b 	bl	800f088 <_Bfree>
 8011252:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011254:	2300      	movs	r3, #0
 8011256:	6013      	str	r3, [r2, #0]
 8011258:	2550      	movs	r5, #80	@ 0x50
 801125a:	e72b      	b.n	80110b4 <__gethex+0xf8>
 801125c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801125e:	2b00      	cmp	r3, #0
 8011260:	d1f3      	bne.n	801124a <__gethex+0x28e>
 8011262:	e7e0      	b.n	8011226 <__gethex+0x26a>
 8011264:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011266:	2b00      	cmp	r3, #0
 8011268:	d1dd      	bne.n	8011226 <__gethex+0x26a>
 801126a:	e7ee      	b.n	801124a <__gethex+0x28e>
 801126c:	08011d68 	.word	0x08011d68
 8011270:	08011c01 	.word	0x08011c01
 8011274:	08011eda 	.word	0x08011eda
 8011278:	1e6f      	subs	r7, r5, #1
 801127a:	f1b9 0f00 	cmp.w	r9, #0
 801127e:	d130      	bne.n	80112e2 <__gethex+0x326>
 8011280:	b127      	cbz	r7, 801128c <__gethex+0x2d0>
 8011282:	4639      	mov	r1, r7
 8011284:	4620      	mov	r0, r4
 8011286:	f7fe fb50 	bl	800f92a <__any_on>
 801128a:	4681      	mov	r9, r0
 801128c:	117a      	asrs	r2, r7, #5
 801128e:	2301      	movs	r3, #1
 8011290:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8011294:	f007 071f 	and.w	r7, r7, #31
 8011298:	40bb      	lsls	r3, r7
 801129a:	4213      	tst	r3, r2
 801129c:	4629      	mov	r1, r5
 801129e:	4620      	mov	r0, r4
 80112a0:	bf18      	it	ne
 80112a2:	f049 0902 	orrne.w	r9, r9, #2
 80112a6:	f7ff fe22 	bl	8010eee <rshift>
 80112aa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80112ae:	1b76      	subs	r6, r6, r5
 80112b0:	2502      	movs	r5, #2
 80112b2:	f1b9 0f00 	cmp.w	r9, #0
 80112b6:	d047      	beq.n	8011348 <__gethex+0x38c>
 80112b8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80112bc:	2b02      	cmp	r3, #2
 80112be:	d015      	beq.n	80112ec <__gethex+0x330>
 80112c0:	2b03      	cmp	r3, #3
 80112c2:	d017      	beq.n	80112f4 <__gethex+0x338>
 80112c4:	2b01      	cmp	r3, #1
 80112c6:	d109      	bne.n	80112dc <__gethex+0x320>
 80112c8:	f019 0f02 	tst.w	r9, #2
 80112cc:	d006      	beq.n	80112dc <__gethex+0x320>
 80112ce:	f8da 3000 	ldr.w	r3, [sl]
 80112d2:	ea49 0903 	orr.w	r9, r9, r3
 80112d6:	f019 0f01 	tst.w	r9, #1
 80112da:	d10e      	bne.n	80112fa <__gethex+0x33e>
 80112dc:	f045 0510 	orr.w	r5, r5, #16
 80112e0:	e032      	b.n	8011348 <__gethex+0x38c>
 80112e2:	f04f 0901 	mov.w	r9, #1
 80112e6:	e7d1      	b.n	801128c <__gethex+0x2d0>
 80112e8:	2501      	movs	r5, #1
 80112ea:	e7e2      	b.n	80112b2 <__gethex+0x2f6>
 80112ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80112ee:	f1c3 0301 	rsb	r3, r3, #1
 80112f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80112f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d0f0      	beq.n	80112dc <__gethex+0x320>
 80112fa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80112fe:	f104 0314 	add.w	r3, r4, #20
 8011302:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8011306:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801130a:	f04f 0c00 	mov.w	ip, #0
 801130e:	4618      	mov	r0, r3
 8011310:	f853 2b04 	ldr.w	r2, [r3], #4
 8011314:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011318:	d01b      	beq.n	8011352 <__gethex+0x396>
 801131a:	3201      	adds	r2, #1
 801131c:	6002      	str	r2, [r0, #0]
 801131e:	2d02      	cmp	r5, #2
 8011320:	f104 0314 	add.w	r3, r4, #20
 8011324:	d13c      	bne.n	80113a0 <__gethex+0x3e4>
 8011326:	f8d8 2000 	ldr.w	r2, [r8]
 801132a:	3a01      	subs	r2, #1
 801132c:	42b2      	cmp	r2, r6
 801132e:	d109      	bne.n	8011344 <__gethex+0x388>
 8011330:	1171      	asrs	r1, r6, #5
 8011332:	2201      	movs	r2, #1
 8011334:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011338:	f006 061f 	and.w	r6, r6, #31
 801133c:	fa02 f606 	lsl.w	r6, r2, r6
 8011340:	421e      	tst	r6, r3
 8011342:	d13a      	bne.n	80113ba <__gethex+0x3fe>
 8011344:	f045 0520 	orr.w	r5, r5, #32
 8011348:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801134a:	601c      	str	r4, [r3, #0]
 801134c:	9b02      	ldr	r3, [sp, #8]
 801134e:	601f      	str	r7, [r3, #0]
 8011350:	e6b0      	b.n	80110b4 <__gethex+0xf8>
 8011352:	4299      	cmp	r1, r3
 8011354:	f843 cc04 	str.w	ip, [r3, #-4]
 8011358:	d8d9      	bhi.n	801130e <__gethex+0x352>
 801135a:	68a3      	ldr	r3, [r4, #8]
 801135c:	459b      	cmp	fp, r3
 801135e:	db17      	blt.n	8011390 <__gethex+0x3d4>
 8011360:	6861      	ldr	r1, [r4, #4]
 8011362:	9801      	ldr	r0, [sp, #4]
 8011364:	3101      	adds	r1, #1
 8011366:	f7fd fe4f 	bl	800f008 <_Balloc>
 801136a:	4681      	mov	r9, r0
 801136c:	b918      	cbnz	r0, 8011376 <__gethex+0x3ba>
 801136e:	4b1a      	ldr	r3, [pc, #104]	@ (80113d8 <__gethex+0x41c>)
 8011370:	4602      	mov	r2, r0
 8011372:	2184      	movs	r1, #132	@ 0x84
 8011374:	e6c5      	b.n	8011102 <__gethex+0x146>
 8011376:	6922      	ldr	r2, [r4, #16]
 8011378:	3202      	adds	r2, #2
 801137a:	f104 010c 	add.w	r1, r4, #12
 801137e:	0092      	lsls	r2, r2, #2
 8011380:	300c      	adds	r0, #12
 8011382:	f7fc fec0 	bl	800e106 <memcpy>
 8011386:	4621      	mov	r1, r4
 8011388:	9801      	ldr	r0, [sp, #4]
 801138a:	f7fd fe7d 	bl	800f088 <_Bfree>
 801138e:	464c      	mov	r4, r9
 8011390:	6923      	ldr	r3, [r4, #16]
 8011392:	1c5a      	adds	r2, r3, #1
 8011394:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011398:	6122      	str	r2, [r4, #16]
 801139a:	2201      	movs	r2, #1
 801139c:	615a      	str	r2, [r3, #20]
 801139e:	e7be      	b.n	801131e <__gethex+0x362>
 80113a0:	6922      	ldr	r2, [r4, #16]
 80113a2:	455a      	cmp	r2, fp
 80113a4:	dd0b      	ble.n	80113be <__gethex+0x402>
 80113a6:	2101      	movs	r1, #1
 80113a8:	4620      	mov	r0, r4
 80113aa:	f7ff fda0 	bl	8010eee <rshift>
 80113ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80113b2:	3701      	adds	r7, #1
 80113b4:	42bb      	cmp	r3, r7
 80113b6:	f6ff aee0 	blt.w	801117a <__gethex+0x1be>
 80113ba:	2501      	movs	r5, #1
 80113bc:	e7c2      	b.n	8011344 <__gethex+0x388>
 80113be:	f016 061f 	ands.w	r6, r6, #31
 80113c2:	d0fa      	beq.n	80113ba <__gethex+0x3fe>
 80113c4:	4453      	add	r3, sl
 80113c6:	f1c6 0620 	rsb	r6, r6, #32
 80113ca:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80113ce:	f7fd ff0d 	bl	800f1ec <__hi0bits>
 80113d2:	42b0      	cmp	r0, r6
 80113d4:	dbe7      	blt.n	80113a6 <__gethex+0x3ea>
 80113d6:	e7f0      	b.n	80113ba <__gethex+0x3fe>
 80113d8:	08011c01 	.word	0x08011c01

080113dc <L_shift>:
 80113dc:	f1c2 0208 	rsb	r2, r2, #8
 80113e0:	0092      	lsls	r2, r2, #2
 80113e2:	b570      	push	{r4, r5, r6, lr}
 80113e4:	f1c2 0620 	rsb	r6, r2, #32
 80113e8:	6843      	ldr	r3, [r0, #4]
 80113ea:	6804      	ldr	r4, [r0, #0]
 80113ec:	fa03 f506 	lsl.w	r5, r3, r6
 80113f0:	432c      	orrs	r4, r5
 80113f2:	40d3      	lsrs	r3, r2
 80113f4:	6004      	str	r4, [r0, #0]
 80113f6:	f840 3f04 	str.w	r3, [r0, #4]!
 80113fa:	4288      	cmp	r0, r1
 80113fc:	d3f4      	bcc.n	80113e8 <L_shift+0xc>
 80113fe:	bd70      	pop	{r4, r5, r6, pc}

08011400 <__match>:
 8011400:	b530      	push	{r4, r5, lr}
 8011402:	6803      	ldr	r3, [r0, #0]
 8011404:	3301      	adds	r3, #1
 8011406:	f811 4b01 	ldrb.w	r4, [r1], #1
 801140a:	b914      	cbnz	r4, 8011412 <__match+0x12>
 801140c:	6003      	str	r3, [r0, #0]
 801140e:	2001      	movs	r0, #1
 8011410:	bd30      	pop	{r4, r5, pc}
 8011412:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011416:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801141a:	2d19      	cmp	r5, #25
 801141c:	bf98      	it	ls
 801141e:	3220      	addls	r2, #32
 8011420:	42a2      	cmp	r2, r4
 8011422:	d0f0      	beq.n	8011406 <__match+0x6>
 8011424:	2000      	movs	r0, #0
 8011426:	e7f3      	b.n	8011410 <__match+0x10>

08011428 <__hexnan>:
 8011428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801142c:	680b      	ldr	r3, [r1, #0]
 801142e:	6801      	ldr	r1, [r0, #0]
 8011430:	115e      	asrs	r6, r3, #5
 8011432:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011436:	f013 031f 	ands.w	r3, r3, #31
 801143a:	b087      	sub	sp, #28
 801143c:	bf18      	it	ne
 801143e:	3604      	addne	r6, #4
 8011440:	2500      	movs	r5, #0
 8011442:	1f37      	subs	r7, r6, #4
 8011444:	4682      	mov	sl, r0
 8011446:	4690      	mov	r8, r2
 8011448:	9301      	str	r3, [sp, #4]
 801144a:	f846 5c04 	str.w	r5, [r6, #-4]
 801144e:	46b9      	mov	r9, r7
 8011450:	463c      	mov	r4, r7
 8011452:	9502      	str	r5, [sp, #8]
 8011454:	46ab      	mov	fp, r5
 8011456:	784a      	ldrb	r2, [r1, #1]
 8011458:	1c4b      	adds	r3, r1, #1
 801145a:	9303      	str	r3, [sp, #12]
 801145c:	b342      	cbz	r2, 80114b0 <__hexnan+0x88>
 801145e:	4610      	mov	r0, r2
 8011460:	9105      	str	r1, [sp, #20]
 8011462:	9204      	str	r2, [sp, #16]
 8011464:	f7ff fd95 	bl	8010f92 <__hexdig_fun>
 8011468:	2800      	cmp	r0, #0
 801146a:	d151      	bne.n	8011510 <__hexnan+0xe8>
 801146c:	9a04      	ldr	r2, [sp, #16]
 801146e:	9905      	ldr	r1, [sp, #20]
 8011470:	2a20      	cmp	r2, #32
 8011472:	d818      	bhi.n	80114a6 <__hexnan+0x7e>
 8011474:	9b02      	ldr	r3, [sp, #8]
 8011476:	459b      	cmp	fp, r3
 8011478:	dd13      	ble.n	80114a2 <__hexnan+0x7a>
 801147a:	454c      	cmp	r4, r9
 801147c:	d206      	bcs.n	801148c <__hexnan+0x64>
 801147e:	2d07      	cmp	r5, #7
 8011480:	dc04      	bgt.n	801148c <__hexnan+0x64>
 8011482:	462a      	mov	r2, r5
 8011484:	4649      	mov	r1, r9
 8011486:	4620      	mov	r0, r4
 8011488:	f7ff ffa8 	bl	80113dc <L_shift>
 801148c:	4544      	cmp	r4, r8
 801148e:	d952      	bls.n	8011536 <__hexnan+0x10e>
 8011490:	2300      	movs	r3, #0
 8011492:	f1a4 0904 	sub.w	r9, r4, #4
 8011496:	f844 3c04 	str.w	r3, [r4, #-4]
 801149a:	f8cd b008 	str.w	fp, [sp, #8]
 801149e:	464c      	mov	r4, r9
 80114a0:	461d      	mov	r5, r3
 80114a2:	9903      	ldr	r1, [sp, #12]
 80114a4:	e7d7      	b.n	8011456 <__hexnan+0x2e>
 80114a6:	2a29      	cmp	r2, #41	@ 0x29
 80114a8:	d157      	bne.n	801155a <__hexnan+0x132>
 80114aa:	3102      	adds	r1, #2
 80114ac:	f8ca 1000 	str.w	r1, [sl]
 80114b0:	f1bb 0f00 	cmp.w	fp, #0
 80114b4:	d051      	beq.n	801155a <__hexnan+0x132>
 80114b6:	454c      	cmp	r4, r9
 80114b8:	d206      	bcs.n	80114c8 <__hexnan+0xa0>
 80114ba:	2d07      	cmp	r5, #7
 80114bc:	dc04      	bgt.n	80114c8 <__hexnan+0xa0>
 80114be:	462a      	mov	r2, r5
 80114c0:	4649      	mov	r1, r9
 80114c2:	4620      	mov	r0, r4
 80114c4:	f7ff ff8a 	bl	80113dc <L_shift>
 80114c8:	4544      	cmp	r4, r8
 80114ca:	d936      	bls.n	801153a <__hexnan+0x112>
 80114cc:	f1a8 0204 	sub.w	r2, r8, #4
 80114d0:	4623      	mov	r3, r4
 80114d2:	f853 1b04 	ldr.w	r1, [r3], #4
 80114d6:	f842 1f04 	str.w	r1, [r2, #4]!
 80114da:	429f      	cmp	r7, r3
 80114dc:	d2f9      	bcs.n	80114d2 <__hexnan+0xaa>
 80114de:	1b3b      	subs	r3, r7, r4
 80114e0:	f023 0303 	bic.w	r3, r3, #3
 80114e4:	3304      	adds	r3, #4
 80114e6:	3401      	adds	r4, #1
 80114e8:	3e03      	subs	r6, #3
 80114ea:	42b4      	cmp	r4, r6
 80114ec:	bf88      	it	hi
 80114ee:	2304      	movhi	r3, #4
 80114f0:	4443      	add	r3, r8
 80114f2:	2200      	movs	r2, #0
 80114f4:	f843 2b04 	str.w	r2, [r3], #4
 80114f8:	429f      	cmp	r7, r3
 80114fa:	d2fb      	bcs.n	80114f4 <__hexnan+0xcc>
 80114fc:	683b      	ldr	r3, [r7, #0]
 80114fe:	b91b      	cbnz	r3, 8011508 <__hexnan+0xe0>
 8011500:	4547      	cmp	r7, r8
 8011502:	d128      	bne.n	8011556 <__hexnan+0x12e>
 8011504:	2301      	movs	r3, #1
 8011506:	603b      	str	r3, [r7, #0]
 8011508:	2005      	movs	r0, #5
 801150a:	b007      	add	sp, #28
 801150c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011510:	3501      	adds	r5, #1
 8011512:	2d08      	cmp	r5, #8
 8011514:	f10b 0b01 	add.w	fp, fp, #1
 8011518:	dd06      	ble.n	8011528 <__hexnan+0x100>
 801151a:	4544      	cmp	r4, r8
 801151c:	d9c1      	bls.n	80114a2 <__hexnan+0x7a>
 801151e:	2300      	movs	r3, #0
 8011520:	f844 3c04 	str.w	r3, [r4, #-4]
 8011524:	2501      	movs	r5, #1
 8011526:	3c04      	subs	r4, #4
 8011528:	6822      	ldr	r2, [r4, #0]
 801152a:	f000 000f 	and.w	r0, r0, #15
 801152e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8011532:	6020      	str	r0, [r4, #0]
 8011534:	e7b5      	b.n	80114a2 <__hexnan+0x7a>
 8011536:	2508      	movs	r5, #8
 8011538:	e7b3      	b.n	80114a2 <__hexnan+0x7a>
 801153a:	9b01      	ldr	r3, [sp, #4]
 801153c:	2b00      	cmp	r3, #0
 801153e:	d0dd      	beq.n	80114fc <__hexnan+0xd4>
 8011540:	f1c3 0320 	rsb	r3, r3, #32
 8011544:	f04f 32ff 	mov.w	r2, #4294967295
 8011548:	40da      	lsrs	r2, r3
 801154a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801154e:	4013      	ands	r3, r2
 8011550:	f846 3c04 	str.w	r3, [r6, #-4]
 8011554:	e7d2      	b.n	80114fc <__hexnan+0xd4>
 8011556:	3f04      	subs	r7, #4
 8011558:	e7d0      	b.n	80114fc <__hexnan+0xd4>
 801155a:	2004      	movs	r0, #4
 801155c:	e7d5      	b.n	801150a <__hexnan+0xe2>

0801155e <__ascii_mbtowc>:
 801155e:	b082      	sub	sp, #8
 8011560:	b901      	cbnz	r1, 8011564 <__ascii_mbtowc+0x6>
 8011562:	a901      	add	r1, sp, #4
 8011564:	b142      	cbz	r2, 8011578 <__ascii_mbtowc+0x1a>
 8011566:	b14b      	cbz	r3, 801157c <__ascii_mbtowc+0x1e>
 8011568:	7813      	ldrb	r3, [r2, #0]
 801156a:	600b      	str	r3, [r1, #0]
 801156c:	7812      	ldrb	r2, [r2, #0]
 801156e:	1e10      	subs	r0, r2, #0
 8011570:	bf18      	it	ne
 8011572:	2001      	movne	r0, #1
 8011574:	b002      	add	sp, #8
 8011576:	4770      	bx	lr
 8011578:	4610      	mov	r0, r2
 801157a:	e7fb      	b.n	8011574 <__ascii_mbtowc+0x16>
 801157c:	f06f 0001 	mvn.w	r0, #1
 8011580:	e7f8      	b.n	8011574 <__ascii_mbtowc+0x16>

08011582 <_realloc_r>:
 8011582:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011586:	4680      	mov	r8, r0
 8011588:	4615      	mov	r5, r2
 801158a:	460c      	mov	r4, r1
 801158c:	b921      	cbnz	r1, 8011598 <_realloc_r+0x16>
 801158e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011592:	4611      	mov	r1, r2
 8011594:	f7fd bcac 	b.w	800eef0 <_malloc_r>
 8011598:	b92a      	cbnz	r2, 80115a6 <_realloc_r+0x24>
 801159a:	f7fd fc35 	bl	800ee08 <_free_r>
 801159e:	2400      	movs	r4, #0
 80115a0:	4620      	mov	r0, r4
 80115a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115a6:	f000 f86b 	bl	8011680 <_malloc_usable_size_r>
 80115aa:	4285      	cmp	r5, r0
 80115ac:	4606      	mov	r6, r0
 80115ae:	d802      	bhi.n	80115b6 <_realloc_r+0x34>
 80115b0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80115b4:	d8f4      	bhi.n	80115a0 <_realloc_r+0x1e>
 80115b6:	4629      	mov	r1, r5
 80115b8:	4640      	mov	r0, r8
 80115ba:	f7fd fc99 	bl	800eef0 <_malloc_r>
 80115be:	4607      	mov	r7, r0
 80115c0:	2800      	cmp	r0, #0
 80115c2:	d0ec      	beq.n	801159e <_realloc_r+0x1c>
 80115c4:	42b5      	cmp	r5, r6
 80115c6:	462a      	mov	r2, r5
 80115c8:	4621      	mov	r1, r4
 80115ca:	bf28      	it	cs
 80115cc:	4632      	movcs	r2, r6
 80115ce:	f7fc fd9a 	bl	800e106 <memcpy>
 80115d2:	4621      	mov	r1, r4
 80115d4:	4640      	mov	r0, r8
 80115d6:	f7fd fc17 	bl	800ee08 <_free_r>
 80115da:	463c      	mov	r4, r7
 80115dc:	e7e0      	b.n	80115a0 <_realloc_r+0x1e>

080115de <__ascii_wctomb>:
 80115de:	4603      	mov	r3, r0
 80115e0:	4608      	mov	r0, r1
 80115e2:	b141      	cbz	r1, 80115f6 <__ascii_wctomb+0x18>
 80115e4:	2aff      	cmp	r2, #255	@ 0xff
 80115e6:	d904      	bls.n	80115f2 <__ascii_wctomb+0x14>
 80115e8:	228a      	movs	r2, #138	@ 0x8a
 80115ea:	601a      	str	r2, [r3, #0]
 80115ec:	f04f 30ff 	mov.w	r0, #4294967295
 80115f0:	4770      	bx	lr
 80115f2:	700a      	strb	r2, [r1, #0]
 80115f4:	2001      	movs	r0, #1
 80115f6:	4770      	bx	lr

080115f8 <_raise_r>:
 80115f8:	291f      	cmp	r1, #31
 80115fa:	b538      	push	{r3, r4, r5, lr}
 80115fc:	4605      	mov	r5, r0
 80115fe:	460c      	mov	r4, r1
 8011600:	d904      	bls.n	801160c <_raise_r+0x14>
 8011602:	2316      	movs	r3, #22
 8011604:	6003      	str	r3, [r0, #0]
 8011606:	f04f 30ff 	mov.w	r0, #4294967295
 801160a:	bd38      	pop	{r3, r4, r5, pc}
 801160c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801160e:	b112      	cbz	r2, 8011616 <_raise_r+0x1e>
 8011610:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011614:	b94b      	cbnz	r3, 801162a <_raise_r+0x32>
 8011616:	4628      	mov	r0, r5
 8011618:	f000 f830 	bl	801167c <_getpid_r>
 801161c:	4622      	mov	r2, r4
 801161e:	4601      	mov	r1, r0
 8011620:	4628      	mov	r0, r5
 8011622:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011626:	f000 b817 	b.w	8011658 <_kill_r>
 801162a:	2b01      	cmp	r3, #1
 801162c:	d00a      	beq.n	8011644 <_raise_r+0x4c>
 801162e:	1c59      	adds	r1, r3, #1
 8011630:	d103      	bne.n	801163a <_raise_r+0x42>
 8011632:	2316      	movs	r3, #22
 8011634:	6003      	str	r3, [r0, #0]
 8011636:	2001      	movs	r0, #1
 8011638:	e7e7      	b.n	801160a <_raise_r+0x12>
 801163a:	2100      	movs	r1, #0
 801163c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011640:	4620      	mov	r0, r4
 8011642:	4798      	blx	r3
 8011644:	2000      	movs	r0, #0
 8011646:	e7e0      	b.n	801160a <_raise_r+0x12>

08011648 <raise>:
 8011648:	4b02      	ldr	r3, [pc, #8]	@ (8011654 <raise+0xc>)
 801164a:	4601      	mov	r1, r0
 801164c:	6818      	ldr	r0, [r3, #0]
 801164e:	f7ff bfd3 	b.w	80115f8 <_raise_r>
 8011652:	bf00      	nop
 8011654:	2000005c 	.word	0x2000005c

08011658 <_kill_r>:
 8011658:	b538      	push	{r3, r4, r5, lr}
 801165a:	4d07      	ldr	r5, [pc, #28]	@ (8011678 <_kill_r+0x20>)
 801165c:	2300      	movs	r3, #0
 801165e:	4604      	mov	r4, r0
 8011660:	4608      	mov	r0, r1
 8011662:	4611      	mov	r1, r2
 8011664:	602b      	str	r3, [r5, #0]
 8011666:	f7f2 fe59 	bl	800431c <_kill>
 801166a:	1c43      	adds	r3, r0, #1
 801166c:	d102      	bne.n	8011674 <_kill_r+0x1c>
 801166e:	682b      	ldr	r3, [r5, #0]
 8011670:	b103      	cbz	r3, 8011674 <_kill_r+0x1c>
 8011672:	6023      	str	r3, [r4, #0]
 8011674:	bd38      	pop	{r3, r4, r5, pc}
 8011676:	bf00      	nop
 8011678:	20004198 	.word	0x20004198

0801167c <_getpid_r>:
 801167c:	f7f2 be46 	b.w	800430c <_getpid>

08011680 <_malloc_usable_size_r>:
 8011680:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011684:	1f18      	subs	r0, r3, #4
 8011686:	2b00      	cmp	r3, #0
 8011688:	bfbc      	itt	lt
 801168a:	580b      	ldrlt	r3, [r1, r0]
 801168c:	18c0      	addlt	r0, r0, r3
 801168e:	4770      	bx	lr

08011690 <_init>:
 8011690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011692:	bf00      	nop
 8011694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011696:	bc08      	pop	{r3}
 8011698:	469e      	mov	lr, r3
 801169a:	4770      	bx	lr

0801169c <_fini>:
 801169c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801169e:	bf00      	nop
 80116a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80116a2:	bc08      	pop	{r3}
 80116a4:	469e      	mov	lr, r3
 80116a6:	4770      	bx	lr
