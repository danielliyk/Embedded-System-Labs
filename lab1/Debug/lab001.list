
lab001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c94  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08008e24  08008e24  00009e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f5c  08008f5c  0000a010  2**0
                  CONTENTS
  4 .ARM          00000008  08008f5c  08008f5c  00009f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f64  08008f64  0000a010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f64  08008f64  00009f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008f68  08008f68  00009f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08008f6c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020dc  20000010  08008f7c  0000a010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200020ec  08008f7c  0000a0ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000261cb  00000000  00000000  0000a040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004943  00000000  00000000  0003020b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002308  00000000  00000000  00034b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001b5f  00000000  00000000  00036e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000049f2  00000000  00000000  000389b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027951  00000000  00000000  0003d3a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00108272  00000000  00000000  00064cfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016cf6c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009804  00000000  00000000  0016cfb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  001767b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008e0c 	.word	0x08008e0c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08008e0c 	.word	0x08008e0c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	if (htim == &htim6){
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	4a06      	ldr	r2, [pc, #24]	@ (80004e4 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80004cc:	4293      	cmp	r3, r2
 80004ce:	d104      	bne.n	80004da <HAL_TIM_PeriodElapsedCallback+0x1a>
		osSemaphoreRelease(BinarySem02Handle);
 80004d0:	4b05      	ldr	r3, [pc, #20]	@ (80004e8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	4618      	mov	r0, r3
 80004d6:	f005 fa9b 	bl	8005a10 <osSemaphoreRelease>


  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80004da:	bf00      	nop
 80004dc:	3708      	adds	r7, #8
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	20000160 	.word	0x20000160
 80004e8:	200007b4 	.word	0x200007b4

080004ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f0:	f001 f819 	bl	8001526 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f4:	f000 f86a 	bl	80005cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f8:	f000 fa6c 	bl	80009d4 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 80004fc:	f000 f8c8 	bl	8000690 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000500:	f000 f8fe 	bl	8000700 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000504:	f000 f93c 	bl	8000780 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000508:	f000 f960 	bl	80007cc <MX_SPI3_Init>
  MX_USART1_UART_Init();
 800050c:	f000 f9d4 	bl	80008b8 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000510:	f000 fa02 	bl	8000918 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000514:	f000 fa30 	bl	8000978 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM6_Init();
 8000518:	f000 f996 	bl	8000848 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 800051c:	481b      	ldr	r0, [pc, #108]	@ (800058c <main+0xa0>)
 800051e:	f003 fca9 	bl	8003e74 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000522:	f004 ff95 	bl	8005450 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of Mutex01 */
  Mutex01Handle = osMutexNew(&Mutex01_attributes);
 8000526:	481a      	ldr	r0, [pc, #104]	@ (8000590 <main+0xa4>)
 8000528:	f005 f889 	bl	800563e <osMutexNew>
 800052c:	4603      	mov	r3, r0
 800052e:	4a19      	ldr	r2, [pc, #100]	@ (8000594 <main+0xa8>)
 8000530:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of BinarySem01 */
  BinarySem01Handle = osSemaphoreNew(1, 0, &BinarySem01_attributes);
 8000532:	4a19      	ldr	r2, [pc, #100]	@ (8000598 <main+0xac>)
 8000534:	2100      	movs	r1, #0
 8000536:	2001      	movs	r0, #1
 8000538:	f005 f98f 	bl	800585a <osSemaphoreNew>
 800053c:	4603      	mov	r3, r0
 800053e:	4a17      	ldr	r2, [pc, #92]	@ (800059c <main+0xb0>)
 8000540:	6013      	str	r3, [r2, #0]

  /* creation of BinarySem02 */
  BinarySem02Handle = osSemaphoreNew(1, 1, &BinarySem02_attributes);
 8000542:	4a17      	ldr	r2, [pc, #92]	@ (80005a0 <main+0xb4>)
 8000544:	2101      	movs	r1, #1
 8000546:	2001      	movs	r0, #1
 8000548:	f005 f987 	bl	800585a <osSemaphoreNew>
 800054c:	4603      	mov	r3, r0
 800054e:	4a15      	ldr	r2, [pc, #84]	@ (80005a4 <main+0xb8>)
 8000550:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000552:	4a15      	ldr	r2, [pc, #84]	@ (80005a8 <main+0xbc>)
 8000554:	2100      	movs	r1, #0
 8000556:	4815      	ldr	r0, [pc, #84]	@ (80005ac <main+0xc0>)
 8000558:	f004 ffc4 	bl	80054e4 <osThreadNew>
 800055c:	4603      	mov	r3, r0
 800055e:	4a14      	ldr	r2, [pc, #80]	@ (80005b0 <main+0xc4>)
 8000560:	6013      	str	r3, [r2, #0]

  /* creation of Task01 */
  Task01Handle = osThreadNew(StartTask02, NULL, &Task01_attributes);
 8000562:	4a14      	ldr	r2, [pc, #80]	@ (80005b4 <main+0xc8>)
 8000564:	2100      	movs	r1, #0
 8000566:	4814      	ldr	r0, [pc, #80]	@ (80005b8 <main+0xcc>)
 8000568:	f004 ffbc 	bl	80054e4 <osThreadNew>
 800056c:	4603      	mov	r3, r0
 800056e:	4a13      	ldr	r2, [pc, #76]	@ (80005bc <main+0xd0>)
 8000570:	6013      	str	r3, [r2, #0]

  /* creation of Task02 */
  Task02Handle = osThreadNew(StartTask03, NULL, &Task02_attributes);
 8000572:	4a13      	ldr	r2, [pc, #76]	@ (80005c0 <main+0xd4>)
 8000574:	2100      	movs	r1, #0
 8000576:	4813      	ldr	r0, [pc, #76]	@ (80005c4 <main+0xd8>)
 8000578:	f004 ffb4 	bl	80054e4 <osThreadNew>
 800057c:	4603      	mov	r3, r0
 800057e:	4a12      	ldr	r2, [pc, #72]	@ (80005c8 <main+0xdc>)
 8000580:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000582:	f004 ff89 	bl	8005498 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000586:	bf00      	nop
 8000588:	e7fd      	b.n	8000586 <main+0x9a>
 800058a:	bf00      	nop
 800058c:	20000160 	.word	0x20000160
 8000590:	08008ee4 	.word	0x08008ee4
 8000594:	200007ac 	.word	0x200007ac
 8000598:	08008ef4 	.word	0x08008ef4
 800059c:	200007b0 	.word	0x200007b0
 80005a0:	08008f04 	.word	0x08008f04
 80005a4:	200007b4 	.word	0x200007b4
 80005a8:	08008e78 	.word	0x08008e78
 80005ac:	08000d45 	.word	0x08000d45
 80005b0:	200007a0 	.word	0x200007a0
 80005b4:	08008e9c 	.word	0x08008e9c
 80005b8:	08000d55 	.word	0x08000d55
 80005bc:	200007a4 	.word	0x200007a4
 80005c0:	08008ec0 	.word	0x08008ec0
 80005c4:	08000dc1 	.word	0x08000dc1
 80005c8:	200007a8 	.word	0x200007a8

080005cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b096      	sub	sp, #88	@ 0x58
 80005d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d2:	f107 0314 	add.w	r3, r7, #20
 80005d6:	2244      	movs	r2, #68	@ 0x44
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f008 fbdc 	bl	8008d98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e0:	463b      	mov	r3, r7
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	605a      	str	r2, [r3, #4]
 80005e8:	609a      	str	r2, [r3, #8]
 80005ea:	60da      	str	r2, [r3, #12]
 80005ec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005ee:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005f2:	f001 fec7 	bl	8002384 <HAL_PWREx_ControlVoltageScaling>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005fc:	f000 fc1e 	bl	8000e3c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000600:	f001 fea2 	bl	8002348 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000604:	4b21      	ldr	r3, [pc, #132]	@ (800068c <SystemClock_Config+0xc0>)
 8000606:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800060a:	4a20      	ldr	r2, [pc, #128]	@ (800068c <SystemClock_Config+0xc0>)
 800060c:	f023 0318 	bic.w	r3, r3, #24
 8000610:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000614:	2314      	movs	r3, #20
 8000616:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000618:	2301      	movs	r3, #1
 800061a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800061c:	2301      	movs	r3, #1
 800061e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000620:	2300      	movs	r3, #0
 8000622:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000624:	2360      	movs	r3, #96	@ 0x60
 8000626:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000628:	2302      	movs	r3, #2
 800062a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800062c:	2301      	movs	r3, #1
 800062e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000630:	2301      	movs	r3, #1
 8000632:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000634:	2328      	movs	r3, #40	@ 0x28
 8000636:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000638:	2307      	movs	r3, #7
 800063a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800063c:	2302      	movs	r3, #2
 800063e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000640:	2302      	movs	r3, #2
 8000642:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000644:	f107 0314 	add.w	r3, r7, #20
 8000648:	4618      	mov	r0, r3
 800064a:	f001 ffbd 	bl	80025c8 <HAL_RCC_OscConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000654:	f000 fbf2 	bl	8000e3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000658:	230f      	movs	r3, #15
 800065a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065c:	2303      	movs	r3, #3
 800065e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000668:	2300      	movs	r3, #0
 800066a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800066c:	463b      	mov	r3, r7
 800066e:	2104      	movs	r1, #4
 8000670:	4618      	mov	r0, r3
 8000672:	f002 fb85 	bl	8002d80 <HAL_RCC_ClockConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800067c:	f000 fbde 	bl	8000e3c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000680:	f003 f88c 	bl	800379c <HAL_RCCEx_EnableMSIPLLMode>
}
 8000684:	bf00      	nop
 8000686:	3758      	adds	r7, #88	@ 0x58
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40021000 	.word	0x40021000

08000690 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000694:	4b18      	ldr	r3, [pc, #96]	@ (80006f8 <MX_DFSDM1_Init+0x68>)
 8000696:	4a19      	ldr	r2, [pc, #100]	@ (80006fc <MX_DFSDM1_Init+0x6c>)
 8000698:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800069a:	4b17      	ldr	r3, [pc, #92]	@ (80006f8 <MX_DFSDM1_Init+0x68>)
 800069c:	2201      	movs	r2, #1
 800069e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80006a0:	4b15      	ldr	r3, [pc, #84]	@ (80006f8 <MX_DFSDM1_Init+0x68>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80006a6:	4b14      	ldr	r3, [pc, #80]	@ (80006f8 <MX_DFSDM1_Init+0x68>)
 80006a8:	2202      	movs	r2, #2
 80006aa:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80006ac:	4b12      	ldr	r3, [pc, #72]	@ (80006f8 <MX_DFSDM1_Init+0x68>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80006b2:	4b11      	ldr	r3, [pc, #68]	@ (80006f8 <MX_DFSDM1_Init+0x68>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	@ (80006f8 <MX_DFSDM1_Init+0x68>)
 80006ba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80006be:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80006c0:	4b0d      	ldr	r3, [pc, #52]	@ (80006f8 <MX_DFSDM1_Init+0x68>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80006c6:	4b0c      	ldr	r3, [pc, #48]	@ (80006f8 <MX_DFSDM1_Init+0x68>)
 80006c8:	2204      	movs	r2, #4
 80006ca:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80006cc:	4b0a      	ldr	r3, [pc, #40]	@ (80006f8 <MX_DFSDM1_Init+0x68>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80006d2:	4b09      	ldr	r3, [pc, #36]	@ (80006f8 <MX_DFSDM1_Init+0x68>)
 80006d4:	2201      	movs	r2, #1
 80006d6:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80006d8:	4b07      	ldr	r3, [pc, #28]	@ (80006f8 <MX_DFSDM1_Init+0x68>)
 80006da:	2200      	movs	r2, #0
 80006dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80006de:	4b06      	ldr	r3, [pc, #24]	@ (80006f8 <MX_DFSDM1_Init+0x68>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80006e4:	4804      	ldr	r0, [pc, #16]	@ (80006f8 <MX_DFSDM1_Init+0x68>)
 80006e6:	f001 f8c9 	bl	800187c <HAL_DFSDM_ChannelInit>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 80006f0:	f000 fba4 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80006f4:	bf00      	nop
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	2000002c 	.word	0x2000002c
 80006fc:	40016020 	.word	0x40016020

08000700 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000704:	4b1b      	ldr	r3, [pc, #108]	@ (8000774 <MX_I2C2_Init+0x74>)
 8000706:	4a1c      	ldr	r2, [pc, #112]	@ (8000778 <MX_I2C2_Init+0x78>)
 8000708:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 800070a:	4b1a      	ldr	r3, [pc, #104]	@ (8000774 <MX_I2C2_Init+0x74>)
 800070c:	4a1b      	ldr	r2, [pc, #108]	@ (800077c <MX_I2C2_Init+0x7c>)
 800070e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000710:	4b18      	ldr	r3, [pc, #96]	@ (8000774 <MX_I2C2_Init+0x74>)
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000716:	4b17      	ldr	r3, [pc, #92]	@ (8000774 <MX_I2C2_Init+0x74>)
 8000718:	2201      	movs	r2, #1
 800071a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800071c:	4b15      	ldr	r3, [pc, #84]	@ (8000774 <MX_I2C2_Init+0x74>)
 800071e:	2200      	movs	r2, #0
 8000720:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000722:	4b14      	ldr	r3, [pc, #80]	@ (8000774 <MX_I2C2_Init+0x74>)
 8000724:	2200      	movs	r2, #0
 8000726:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000728:	4b12      	ldr	r3, [pc, #72]	@ (8000774 <MX_I2C2_Init+0x74>)
 800072a:	2200      	movs	r2, #0
 800072c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800072e:	4b11      	ldr	r3, [pc, #68]	@ (8000774 <MX_I2C2_Init+0x74>)
 8000730:	2200      	movs	r2, #0
 8000732:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000734:	4b0f      	ldr	r3, [pc, #60]	@ (8000774 <MX_I2C2_Init+0x74>)
 8000736:	2200      	movs	r2, #0
 8000738:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800073a:	480e      	ldr	r0, [pc, #56]	@ (8000774 <MX_I2C2_Init+0x74>)
 800073c:	f001 fb9e 	bl	8001e7c <HAL_I2C_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000746:	f000 fb79 	bl	8000e3c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800074a:	2100      	movs	r1, #0
 800074c:	4809      	ldr	r0, [pc, #36]	@ (8000774 <MX_I2C2_Init+0x74>)
 800074e:	f001 fc30 	bl	8001fb2 <HAL_I2CEx_ConfigAnalogFilter>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000758:	f000 fb70 	bl	8000e3c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800075c:	2100      	movs	r1, #0
 800075e:	4805      	ldr	r0, [pc, #20]	@ (8000774 <MX_I2C2_Init+0x74>)
 8000760:	f001 fc72 	bl	8002048 <HAL_I2CEx_ConfigDigitalFilter>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800076a:	f000 fb67 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	20000064 	.word	0x20000064
 8000778:	40005800 	.word	0x40005800
 800077c:	10d19ce4 	.word	0x10d19ce4

08000780 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000784:	4b0f      	ldr	r3, [pc, #60]	@ (80007c4 <MX_QUADSPI_Init+0x44>)
 8000786:	4a10      	ldr	r2, [pc, #64]	@ (80007c8 <MX_QUADSPI_Init+0x48>)
 8000788:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 800078a:	4b0e      	ldr	r3, [pc, #56]	@ (80007c4 <MX_QUADSPI_Init+0x44>)
 800078c:	2202      	movs	r2, #2
 800078e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000790:	4b0c      	ldr	r3, [pc, #48]	@ (80007c4 <MX_QUADSPI_Init+0x44>)
 8000792:	2204      	movs	r2, #4
 8000794:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000796:	4b0b      	ldr	r3, [pc, #44]	@ (80007c4 <MX_QUADSPI_Init+0x44>)
 8000798:	2210      	movs	r2, #16
 800079a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 800079c:	4b09      	ldr	r3, [pc, #36]	@ (80007c4 <MX_QUADSPI_Init+0x44>)
 800079e:	2217      	movs	r2, #23
 80007a0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80007a2:	4b08      	ldr	r3, [pc, #32]	@ (80007c4 <MX_QUADSPI_Init+0x44>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80007a8:	4b06      	ldr	r3, [pc, #24]	@ (80007c4 <MX_QUADSPI_Init+0x44>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80007ae:	4805      	ldr	r0, [pc, #20]	@ (80007c4 <MX_QUADSPI_Init+0x44>)
 80007b0:	f001 fe4e 	bl	8002450 <HAL_QSPI_Init>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80007ba:	f000 fb3f 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	200000b8 	.word	0x200000b8
 80007c8:	a0001000 	.word	0xa0001000

080007cc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80007d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000840 <MX_SPI3_Init+0x74>)
 80007d2:	4a1c      	ldr	r2, [pc, #112]	@ (8000844 <MX_SPI3_Init+0x78>)
 80007d4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80007d6:	4b1a      	ldr	r3, [pc, #104]	@ (8000840 <MX_SPI3_Init+0x74>)
 80007d8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007dc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80007de:	4b18      	ldr	r3, [pc, #96]	@ (8000840 <MX_SPI3_Init+0x74>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80007e4:	4b16      	ldr	r3, [pc, #88]	@ (8000840 <MX_SPI3_Init+0x74>)
 80007e6:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80007ea:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007ec:	4b14      	ldr	r3, [pc, #80]	@ (8000840 <MX_SPI3_Init+0x74>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007f2:	4b13      	ldr	r3, [pc, #76]	@ (8000840 <MX_SPI3_Init+0x74>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80007f8:	4b11      	ldr	r3, [pc, #68]	@ (8000840 <MX_SPI3_Init+0x74>)
 80007fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007fe:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000800:	4b0f      	ldr	r3, [pc, #60]	@ (8000840 <MX_SPI3_Init+0x74>)
 8000802:	2200      	movs	r2, #0
 8000804:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000806:	4b0e      	ldr	r3, [pc, #56]	@ (8000840 <MX_SPI3_Init+0x74>)
 8000808:	2200      	movs	r2, #0
 800080a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800080c:	4b0c      	ldr	r3, [pc, #48]	@ (8000840 <MX_SPI3_Init+0x74>)
 800080e:	2200      	movs	r2, #0
 8000810:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000812:	4b0b      	ldr	r3, [pc, #44]	@ (8000840 <MX_SPI3_Init+0x74>)
 8000814:	2200      	movs	r2, #0
 8000816:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000818:	4b09      	ldr	r3, [pc, #36]	@ (8000840 <MX_SPI3_Init+0x74>)
 800081a:	2207      	movs	r2, #7
 800081c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800081e:	4b08      	ldr	r3, [pc, #32]	@ (8000840 <MX_SPI3_Init+0x74>)
 8000820:	2200      	movs	r2, #0
 8000822:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000824:	4b06      	ldr	r3, [pc, #24]	@ (8000840 <MX_SPI3_Init+0x74>)
 8000826:	2208      	movs	r2, #8
 8000828:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800082a:	4805      	ldr	r0, [pc, #20]	@ (8000840 <MX_SPI3_Init+0x74>)
 800082c:	f003 f998 	bl	8003b60 <HAL_SPI_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000836:	f000 fb01 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	200000fc 	.word	0x200000fc
 8000844:	40003c00 	.word	0x40003c00

08000848 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000858:	4b15      	ldr	r3, [pc, #84]	@ (80008b0 <MX_TIM6_Init+0x68>)
 800085a:	4a16      	ldr	r2, [pc, #88]	@ (80008b4 <MX_TIM6_Init+0x6c>)
 800085c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 24999;
 800085e:	4b14      	ldr	r3, [pc, #80]	@ (80008b0 <MX_TIM6_Init+0x68>)
 8000860:	f246 12a7 	movw	r2, #24999	@ 0x61a7
 8000864:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000866:	4b12      	ldr	r3, [pc, #72]	@ (80008b0 <MX_TIM6_Init+0x68>)
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 31999;
 800086c:	4b10      	ldr	r3, [pc, #64]	@ (80008b0 <MX_TIM6_Init+0x68>)
 800086e:	f647 42ff 	movw	r2, #31999	@ 0x7cff
 8000872:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000874:	4b0e      	ldr	r3, [pc, #56]	@ (80008b0 <MX_TIM6_Init+0x68>)
 8000876:	2280      	movs	r2, #128	@ 0x80
 8000878:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800087a:	480d      	ldr	r0, [pc, #52]	@ (80008b0 <MX_TIM6_Init+0x68>)
 800087c:	f003 fa13 	bl	8003ca6 <HAL_TIM_Base_Init>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000886:	f000 fad9 	bl	8000e3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800088a:	2300      	movs	r3, #0
 800088c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800088e:	2300      	movs	r3, #0
 8000890:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000892:	1d3b      	adds	r3, r7, #4
 8000894:	4619      	mov	r1, r3
 8000896:	4806      	ldr	r0, [pc, #24]	@ (80008b0 <MX_TIM6_Init+0x68>)
 8000898:	f003 fd32 	bl	8004300 <HAL_TIMEx_MasterConfigSynchronization>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80008a2:	f000 facb 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80008a6:	bf00      	nop
 80008a8:	3710      	adds	r7, #16
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	20000160 	.word	0x20000160
 80008b4:	40001000 	.word	0x40001000

080008b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008bc:	4b14      	ldr	r3, [pc, #80]	@ (8000910 <MX_USART1_UART_Init+0x58>)
 80008be:	4a15      	ldr	r2, [pc, #84]	@ (8000914 <MX_USART1_UART_Init+0x5c>)
 80008c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008c2:	4b13      	ldr	r3, [pc, #76]	@ (8000910 <MX_USART1_UART_Init+0x58>)
 80008c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008ca:	4b11      	ldr	r3, [pc, #68]	@ (8000910 <MX_USART1_UART_Init+0x58>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000910 <MX_USART1_UART_Init+0x58>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000910 <MX_USART1_UART_Init+0x58>)
 80008d8:	2200      	movs	r2, #0
 80008da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000910 <MX_USART1_UART_Init+0x58>)
 80008de:	220c      	movs	r2, #12
 80008e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000910 <MX_USART1_UART_Init+0x58>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e8:	4b09      	ldr	r3, [pc, #36]	@ (8000910 <MX_USART1_UART_Init+0x58>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ee:	4b08      	ldr	r3, [pc, #32]	@ (8000910 <MX_USART1_UART_Init+0x58>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008f4:	4b06      	ldr	r3, [pc, #24]	@ (8000910 <MX_USART1_UART_Init+0x58>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008fa:	4805      	ldr	r0, [pc, #20]	@ (8000910 <MX_USART1_UART_Init+0x58>)
 80008fc:	f003 fda6 	bl	800444c <HAL_UART_Init>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000906:	f000 fa99 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	200001ac 	.word	0x200001ac
 8000914:	40013800 	.word	0x40013800

08000918 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800091c:	4b14      	ldr	r3, [pc, #80]	@ (8000970 <MX_USART3_UART_Init+0x58>)
 800091e:	4a15      	ldr	r2, [pc, #84]	@ (8000974 <MX_USART3_UART_Init+0x5c>)
 8000920:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000922:	4b13      	ldr	r3, [pc, #76]	@ (8000970 <MX_USART3_UART_Init+0x58>)
 8000924:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000928:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800092a:	4b11      	ldr	r3, [pc, #68]	@ (8000970 <MX_USART3_UART_Init+0x58>)
 800092c:	2200      	movs	r2, #0
 800092e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000930:	4b0f      	ldr	r3, [pc, #60]	@ (8000970 <MX_USART3_UART_Init+0x58>)
 8000932:	2200      	movs	r2, #0
 8000934:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000936:	4b0e      	ldr	r3, [pc, #56]	@ (8000970 <MX_USART3_UART_Init+0x58>)
 8000938:	2200      	movs	r2, #0
 800093a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800093c:	4b0c      	ldr	r3, [pc, #48]	@ (8000970 <MX_USART3_UART_Init+0x58>)
 800093e:	220c      	movs	r2, #12
 8000940:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000942:	4b0b      	ldr	r3, [pc, #44]	@ (8000970 <MX_USART3_UART_Init+0x58>)
 8000944:	2200      	movs	r2, #0
 8000946:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000948:	4b09      	ldr	r3, [pc, #36]	@ (8000970 <MX_USART3_UART_Init+0x58>)
 800094a:	2200      	movs	r2, #0
 800094c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800094e:	4b08      	ldr	r3, [pc, #32]	@ (8000970 <MX_USART3_UART_Init+0x58>)
 8000950:	2200      	movs	r2, #0
 8000952:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000954:	4b06      	ldr	r3, [pc, #24]	@ (8000970 <MX_USART3_UART_Init+0x58>)
 8000956:	2200      	movs	r2, #0
 8000958:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800095a:	4805      	ldr	r0, [pc, #20]	@ (8000970 <MX_USART3_UART_Init+0x58>)
 800095c:	f003 fd76 	bl	800444c <HAL_UART_Init>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000966:	f000 fa69 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20000234 	.word	0x20000234
 8000974:	40004800 	.word	0x40004800

08000978 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800097c:	4b14      	ldr	r3, [pc, #80]	@ (80009d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800097e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000982:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000984:	4b12      	ldr	r3, [pc, #72]	@ (80009d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000986:	2206      	movs	r2, #6
 8000988:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800098a:	4b11      	ldr	r3, [pc, #68]	@ (80009d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800098c:	2202      	movs	r2, #2
 800098e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000990:	4b0f      	ldr	r3, [pc, #60]	@ (80009d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000992:	2202      	movs	r2, #2
 8000994:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000996:	4b0e      	ldr	r3, [pc, #56]	@ (80009d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000998:	2200      	movs	r2, #0
 800099a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800099c:	4b0c      	ldr	r3, [pc, #48]	@ (80009d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800099e:	2200      	movs	r2, #0
 80009a0:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009a2:	4b0b      	ldr	r3, [pc, #44]	@ (80009d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80009a8:	4b09      	ldr	r3, [pc, #36]	@ (80009d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80009ae:	4b08      	ldr	r3, [pc, #32]	@ (80009d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80009b4:	4b06      	ldr	r3, [pc, #24]	@ (80009d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009ba:	4805      	ldr	r0, [pc, #20]	@ (80009d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009bc:	f001 fb90 	bl	80020e0 <HAL_PCD_Init>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80009c6:	f000 fa39 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	200002bc 	.word	0x200002bc

080009d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b08a      	sub	sp, #40	@ 0x28
 80009d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009da:	f107 0314 	add.w	r3, r7, #20
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	605a      	str	r2, [r3, #4]
 80009e4:	609a      	str	r2, [r3, #8]
 80009e6:	60da      	str	r2, [r3, #12]
 80009e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009ea:	4bbd      	ldr	r3, [pc, #756]	@ (8000ce0 <MX_GPIO_Init+0x30c>)
 80009ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ee:	4abc      	ldr	r2, [pc, #752]	@ (8000ce0 <MX_GPIO_Init+0x30c>)
 80009f0:	f043 0310 	orr.w	r3, r3, #16
 80009f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009f6:	4bba      	ldr	r3, [pc, #744]	@ (8000ce0 <MX_GPIO_Init+0x30c>)
 80009f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009fa:	f003 0310 	and.w	r3, r3, #16
 80009fe:	613b      	str	r3, [r7, #16]
 8000a00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a02:	4bb7      	ldr	r3, [pc, #732]	@ (8000ce0 <MX_GPIO_Init+0x30c>)
 8000a04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a06:	4ab6      	ldr	r2, [pc, #728]	@ (8000ce0 <MX_GPIO_Init+0x30c>)
 8000a08:	f043 0304 	orr.w	r3, r3, #4
 8000a0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a0e:	4bb4      	ldr	r3, [pc, #720]	@ (8000ce0 <MX_GPIO_Init+0x30c>)
 8000a10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a12:	f003 0304 	and.w	r3, r3, #4
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1a:	4bb1      	ldr	r3, [pc, #708]	@ (8000ce0 <MX_GPIO_Init+0x30c>)
 8000a1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a1e:	4ab0      	ldr	r2, [pc, #704]	@ (8000ce0 <MX_GPIO_Init+0x30c>)
 8000a20:	f043 0301 	orr.w	r3, r3, #1
 8000a24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a26:	4bae      	ldr	r3, [pc, #696]	@ (8000ce0 <MX_GPIO_Init+0x30c>)
 8000a28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a2a:	f003 0301 	and.w	r3, r3, #1
 8000a2e:	60bb      	str	r3, [r7, #8]
 8000a30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a32:	4bab      	ldr	r3, [pc, #684]	@ (8000ce0 <MX_GPIO_Init+0x30c>)
 8000a34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a36:	4aaa      	ldr	r2, [pc, #680]	@ (8000ce0 <MX_GPIO_Init+0x30c>)
 8000a38:	f043 0302 	orr.w	r3, r3, #2
 8000a3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a3e:	4ba8      	ldr	r3, [pc, #672]	@ (8000ce0 <MX_GPIO_Init+0x30c>)
 8000a40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a42:	f003 0302 	and.w	r3, r3, #2
 8000a46:	607b      	str	r3, [r7, #4]
 8000a48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a4a:	4ba5      	ldr	r3, [pc, #660]	@ (8000ce0 <MX_GPIO_Init+0x30c>)
 8000a4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a4e:	4aa4      	ldr	r2, [pc, #656]	@ (8000ce0 <MX_GPIO_Init+0x30c>)
 8000a50:	f043 0308 	orr.w	r3, r3, #8
 8000a54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a56:	4ba2      	ldr	r3, [pc, #648]	@ (8000ce0 <MX_GPIO_Init+0x30c>)
 8000a58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a5a:	f003 0308 	and.w	r3, r3, #8
 8000a5e:	603b      	str	r3, [r7, #0]
 8000a60:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000a62:	2200      	movs	r2, #0
 8000a64:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8000a68:	489e      	ldr	r0, [pc, #632]	@ (8000ce4 <MX_GPIO_Init+0x310>)
 8000a6a:	f001 f9bd 	bl	8001de8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f248 1104 	movw	r1, #33028	@ 0x8104
 8000a74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a78:	f001 f9b6 	bl	8001de8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	f24f 0114 	movw	r1, #61460	@ 0xf014
 8000a82:	4899      	ldr	r0, [pc, #612]	@ (8000ce8 <MX_GPIO_Init+0x314>)
 8000a84:	f001 f9b0 	bl	8001de8 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	f241 0181 	movw	r1, #4225	@ 0x1081
 8000a8e:	4897      	ldr	r0, [pc, #604]	@ (8000cec <MX_GPIO_Init+0x318>)
 8000a90:	f001 f9aa 	bl	8001de8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000a94:	2201      	movs	r2, #1
 8000a96:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a9a:	4894      	ldr	r0, [pc, #592]	@ (8000cec <MX_GPIO_Init+0x318>)
 8000a9c:	f001 f9a4 	bl	8001de8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8000aa6:	4892      	ldr	r0, [pc, #584]	@ (8000cf0 <MX_GPIO_Init+0x31c>)
 8000aa8:	f001 f99e 	bl	8001de8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000aac:	2201      	movs	r2, #1
 8000aae:	2120      	movs	r1, #32
 8000ab0:	488d      	ldr	r0, [pc, #564]	@ (8000ce8 <MX_GPIO_Init+0x314>)
 8000ab2:	f001 f999 	bl	8001de8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	2101      	movs	r1, #1
 8000aba:	488a      	ldr	r0, [pc, #552]	@ (8000ce4 <MX_GPIO_Init+0x310>)
 8000abc:	f001 f994 	bl	8001de8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000ac0:	f240 1315 	movw	r3, #277	@ 0x115
 8000ac4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ad2:	f107 0314 	add.w	r3, r7, #20
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4882      	ldr	r0, [pc, #520]	@ (8000ce4 <MX_GPIO_Init+0x310>)
 8000ada:	f000 ffdb 	bl	8001a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000ade:	236a      	movs	r3, #106	@ 0x6a
 8000ae0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ae2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ae6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000aec:	f107 0314 	add.w	r3, r7, #20
 8000af0:	4619      	mov	r1, r3
 8000af2:	487c      	ldr	r0, [pc, #496]	@ (8000ce4 <MX_GPIO_Init+0x310>)
 8000af4:	f000 ffce 	bl	8001a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_EXTI13_Pin VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000af8:	f44f 5306 	mov.w	r3, #8576	@ 0x2180
 8000afc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000afe:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b08:	f107 0314 	add.w	r3, r7, #20
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4878      	ldr	r0, [pc, #480]	@ (8000cf0 <MX_GPIO_Init+0x31c>)
 8000b10:	f000 ffc0 	bl	8001a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000b14:	233f      	movs	r3, #63	@ 0x3f
 8000b16:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b18:	230b      	movs	r3, #11
 8000b1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b20:	f107 0314 	add.w	r3, r7, #20
 8000b24:	4619      	mov	r1, r3
 8000b26:	4872      	ldr	r0, [pc, #456]	@ (8000cf0 <MX_GPIO_Init+0x31c>)
 8000b28:	f000 ffb4 	bl	8001a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b30:	2302      	movs	r3, #2
 8000b32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b38:	2303      	movs	r3, #3
 8000b3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000b3c:	2308      	movs	r3, #8
 8000b3e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b40:	f107 0314 	add.w	r3, r7, #20
 8000b44:	4619      	mov	r1, r3
 8000b46:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b4a:	f000 ffa3 	bl	8001a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000b4e:	f248 1304 	movw	r3, #33028	@ 0x8104
 8000b52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b54:	2301      	movs	r3, #1
 8000b56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b60:	f107 0314 	add.w	r3, r7, #20
 8000b64:	4619      	mov	r1, r3
 8000b66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b6a:	f000 ff93 	bl	8001a94 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000b6e:	2308      	movs	r3, #8
 8000b70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b72:	2302      	movs	r3, #2
 8000b74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000b82:	f107 0314 	add.w	r3, r7, #20
 8000b86:	4619      	mov	r1, r3
 8000b88:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b8c:	f000 ff82 	bl	8001a94 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000b90:	2310      	movs	r3, #16
 8000b92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b94:	230b      	movs	r3, #11
 8000b96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000b9c:	f107 0314 	add.w	r3, r7, #20
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ba6:	f000 ff75 	bl	8001a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000baa:	23e0      	movs	r3, #224	@ 0xe0
 8000bac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb6:	2303      	movs	r3, #3
 8000bb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bba:	2305      	movs	r3, #5
 8000bbc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bbe:	f107 0314 	add.w	r3, r7, #20
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bc8:	f000 ff64 	bl	8001a94 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bd0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000bd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000bda:	f107 0314 	add.w	r3, r7, #20
 8000bde:	4619      	mov	r1, r3
 8000be0:	4841      	ldr	r0, [pc, #260]	@ (8000ce8 <MX_GPIO_Init+0x314>)
 8000be2:	f000 ff57 	bl	8001a94 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000be6:	2302      	movs	r3, #2
 8000be8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000bea:	230b      	movs	r3, #11
 8000bec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000bf2:	f107 0314 	add.w	r3, r7, #20
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	483b      	ldr	r0, [pc, #236]	@ (8000ce8 <MX_GPIO_Init+0x314>)
 8000bfa:	f000 ff4b 	bl	8001a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000bfe:	f24f 0334 	movw	r3, #61492	@ 0xf034
 8000c02:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c04:	2301      	movs	r3, #1
 8000c06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	4619      	mov	r1, r3
 8000c16:	4834      	ldr	r0, [pc, #208]	@ (8000ce8 <MX_GPIO_Init+0x314>)
 8000c18:	f000 ff3c 	bl	8001a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000c1c:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 8000c20:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c22:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	4619      	mov	r1, r3
 8000c32:	482e      	ldr	r0, [pc, #184]	@ (8000cec <MX_GPIO_Init+0x318>)
 8000c34:	f000 ff2e 	bl	8001a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000c38:	f243 0381 	movw	r3, #12417	@ 0x3081
 8000c3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c46:	2300      	movs	r3, #0
 8000c48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c4a:	f107 0314 	add.w	r3, r7, #20
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4826      	ldr	r0, [pc, #152]	@ (8000cec <MX_GPIO_Init+0x318>)
 8000c52:	f000 ff1f 	bl	8001a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000c56:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000c5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c64:	2300      	movs	r3, #0
 8000c66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c68:	f107 0314 	add.w	r3, r7, #20
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4820      	ldr	r0, [pc, #128]	@ (8000cf0 <MX_GPIO_Init+0x31c>)
 8000c70:	f000 ff10 	bl	8001a94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000c74:	2302      	movs	r3, #2
 8000c76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c80:	2303      	movs	r3, #3
 8000c82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c84:	2305      	movs	r3, #5
 8000c86:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000c88:	f107 0314 	add.w	r3, r7, #20
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4817      	ldr	r0, [pc, #92]	@ (8000cec <MX_GPIO_Init+0x318>)
 8000c90:	f000 ff00 	bl	8001a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000c94:	2378      	movs	r3, #120	@ 0x78
 8000c96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca0:	2303      	movs	r3, #3
 8000ca2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ca4:	2307      	movs	r3, #7
 8000ca6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ca8:	f107 0314 	add.w	r3, r7, #20
 8000cac:	4619      	mov	r1, r3
 8000cae:	480f      	ldr	r0, [pc, #60]	@ (8000cec <MX_GPIO_Init+0x318>)
 8000cb0:	f000 fef0 	bl	8001a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000cb4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000cb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cba:	2312      	movs	r3, #18
 8000cbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc2:	2303      	movs	r3, #3
 8000cc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cc6:	2304      	movs	r3, #4
 8000cc8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cca:	f107 0314 	add.w	r3, r7, #20
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4805      	ldr	r0, [pc, #20]	@ (8000ce8 <MX_GPIO_Init+0x314>)
 8000cd2:	f000 fedf 	bl	8001a94 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	2105      	movs	r1, #5
 8000cda:	2017      	movs	r0, #23
 8000cdc:	e00a      	b.n	8000cf4 <MX_GPIO_Init+0x320>
 8000cde:	bf00      	nop
 8000ce0:	40021000 	.word	0x40021000
 8000ce4:	48001000 	.word	0x48001000
 8000ce8:	48000400 	.word	0x48000400
 8000cec:	48000c00 	.word	0x48000c00
 8000cf0:	48000800 	.word	0x48000800
 8000cf4:	f000 fd8b 	bl	800180e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000cf8:	2017      	movs	r0, #23
 8000cfa:	f000 fda4 	bl	8001846 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2105      	movs	r1, #5
 8000d02:	2028      	movs	r0, #40	@ 0x28
 8000d04:	f000 fd83 	bl	800180e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d08:	2028      	movs	r0, #40	@ 0x28
 8000d0a:	f000 fd9c 	bl	8001846 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d0e:	bf00      	nop
 8000d10:	3728      	adds	r7, #40	@ 0x28
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop

08000d18 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
	switch(GPIO_Pin)
 8000d22:	88fb      	ldrh	r3, [r7, #6]
 8000d24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000d28:	d105      	bne.n	8000d36 <HAL_GPIO_EXTI_Callback+0x1e>
	{
	case BUTTON_EXTI13_Pin:
		osSemaphoreRelease(BinarySem01Handle);
 8000d2a:	4b05      	ldr	r3, [pc, #20]	@ (8000d40 <HAL_GPIO_EXTI_Callback+0x28>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f004 fe6e 	bl	8005a10 <osSemaphoreRelease>
		break;
 8000d34:	e000      	b.n	8000d38 <HAL_GPIO_EXTI_Callback+0x20>
	default:
		break;
 8000d36:	bf00      	nop
	}
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000d38:	bf00      	nop
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	200007b0 	.word	0x200007b0

08000d44 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	f004 fc5b 	bl	8005608 <osDelay>
 8000d52:	e7fb      	b.n	8000d4c <StartDefaultTask+0x8>

08000d54 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */

	for (;;) {
		// Wait for the semaphore from EXTI interrupt
		if (osSemaphoreAcquire(BinarySem01Handle, osWaitForever) == osOK) {
 8000d5c:	4b15      	ldr	r3, [pc, #84]	@ (8000db4 <StartTask02+0x60>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f04f 31ff 	mov.w	r1, #4294967295
 8000d64:	4618      	mov	r0, r3
 8000d66:	f004 fe01 	bl	800596c <osSemaphoreAcquire>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d1f5      	bne.n	8000d5c <StartTask02+0x8>
			// Try to take the mutex for LED control
			if (osMutexAcquire(Mutex01Handle, osWaitForever) == osOK) {
 8000d70:	4b11      	ldr	r3, [pc, #68]	@ (8000db8 <StartTask02+0x64>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f04f 31ff 	mov.w	r1, #4294967295
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f004 fce6 	bl	800574a <osMutexAcquire>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d1eb      	bne.n	8000d5c <StartTask02+0x8>
				// Blink LED2 at 1Hz for 5 seconds

				for (int i = 0; i < 10; i++) {
 8000d84:	2300      	movs	r3, #0
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	e00b      	b.n	8000da2 <StartTask02+0x4e>
					HAL_GPIO_TogglePin(GPIOB, LED2_Pin);
 8000d8a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d8e:	480b      	ldr	r0, [pc, #44]	@ (8000dbc <StartTask02+0x68>)
 8000d90:	f001 f842 	bl	8001e18 <HAL_GPIO_TogglePin>
					osDelay(500);  // 500 ms delay for 1Hz frequency
 8000d94:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d98:	f004 fc36 	bl	8005608 <osDelay>
				for (int i = 0; i < 10; i++) {
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	60fb      	str	r3, [r7, #12]
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	2b09      	cmp	r3, #9
 8000da6:	ddf0      	ble.n	8000d8a <StartTask02+0x36>
				}
				osMutexRelease(Mutex01Handle);  // Release the mutex after blinking
 8000da8:	4b03      	ldr	r3, [pc, #12]	@ (8000db8 <StartTask02+0x64>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4618      	mov	r0, r3
 8000dae:	f004 fd17 	bl	80057e0 <osMutexRelease>
		if (osSemaphoreAcquire(BinarySem01Handle, osWaitForever) == osOK) {
 8000db2:	e7d3      	b.n	8000d5c <StartTask02+0x8>
 8000db4:	200007b0 	.word	0x200007b0
 8000db8:	200007ac 	.word	0x200007ac
 8000dbc:	48000400 	.word	0x48000400

08000dc0 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
	for (;;) {
			// Wait for the semaphore from Timer interrupt
			if (osSemaphoreAcquire(BinarySem02Handle, osWaitForever) == osOK) {
 8000dc8:	4b18      	ldr	r3, [pc, #96]	@ (8000e2c <StartTask03+0x6c>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f04f 31ff 	mov.w	r1, #4294967295
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f004 fdcb 	bl	800596c <osSemaphoreAcquire>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d1f5      	bne.n	8000dc8 <StartTask03+0x8>
				// Try to take the mutex for LED control

				if (osMutexAcquire(Mutex01Handle, osWaitForever) == osOK) {
 8000ddc:	4b14      	ldr	r3, [pc, #80]	@ (8000e30 <StartTask03+0x70>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f04f 31ff 	mov.w	r1, #4294967295
 8000de4:	4618      	mov	r0, r3
 8000de6:	f004 fcb0 	bl	800574a <osMutexAcquire>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d1eb      	bne.n	8000dc8 <StartTask03+0x8>
					// Blink LED2 at 10Hz for 2 seconds
					HAL_TIM_Base_Stop(&htim6);
 8000df0:	4810      	ldr	r0, [pc, #64]	@ (8000e34 <StartTask03+0x74>)
 8000df2:	f003 f817 	bl	8003e24 <HAL_TIM_Base_Stop>
					for (int i = 0; i < 40; i++) {
 8000df6:	2300      	movs	r3, #0
 8000df8:	60fb      	str	r3, [r7, #12]
 8000dfa:	e00a      	b.n	8000e12 <StartTask03+0x52>
						HAL_GPIO_TogglePin(GPIOB, LED2_Pin);
 8000dfc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e00:	480d      	ldr	r0, [pc, #52]	@ (8000e38 <StartTask03+0x78>)
 8000e02:	f001 f809 	bl	8001e18 <HAL_GPIO_TogglePin>
						osDelay(50);
 8000e06:	2032      	movs	r0, #50	@ 0x32
 8000e08:	f004 fbfe 	bl	8005608 <osDelay>
					for (int i = 0; i < 40; i++) {
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	3301      	adds	r3, #1
 8000e10:	60fb      	str	r3, [r7, #12]
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	2b27      	cmp	r3, #39	@ 0x27
 8000e16:	ddf1      	ble.n	8000dfc <StartTask03+0x3c>
					}
					osMutexRelease(Mutex01Handle);  // Release the mutex after blinking
 8000e18:	4b05      	ldr	r3, [pc, #20]	@ (8000e30 <StartTask03+0x70>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f004 fcdf 	bl	80057e0 <osMutexRelease>
					HAL_TIM_Base_Start(&htim6);
 8000e22:	4804      	ldr	r0, [pc, #16]	@ (8000e34 <StartTask03+0x74>)
 8000e24:	f002 ff96 	bl	8003d54 <HAL_TIM_Base_Start>
			if (osSemaphoreAcquire(BinarySem02Handle, osWaitForever) == osOK) {
 8000e28:	e7ce      	b.n	8000dc8 <StartTask03+0x8>
 8000e2a:	bf00      	nop
 8000e2c:	200007b4 	.word	0x200007b4
 8000e30:	200007ac 	.word	0x200007ac
 8000e34:	20000160 	.word	0x20000160
 8000e38:	48000400 	.word	0x48000400

08000e3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e40:	b672      	cpsid	i
}
 8000e42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e44:	bf00      	nop
 8000e46:	e7fd      	b.n	8000e44 <Error_Handler+0x8>

08000e48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e4e:	4b11      	ldr	r3, [pc, #68]	@ (8000e94 <HAL_MspInit+0x4c>)
 8000e50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e52:	4a10      	ldr	r2, [pc, #64]	@ (8000e94 <HAL_MspInit+0x4c>)
 8000e54:	f043 0301 	orr.w	r3, r3, #1
 8000e58:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e94 <HAL_MspInit+0x4c>)
 8000e5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e5e:	f003 0301 	and.w	r3, r3, #1
 8000e62:	607b      	str	r3, [r7, #4]
 8000e64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e66:	4b0b      	ldr	r3, [pc, #44]	@ (8000e94 <HAL_MspInit+0x4c>)
 8000e68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e94 <HAL_MspInit+0x4c>)
 8000e6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e70:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e72:	4b08      	ldr	r3, [pc, #32]	@ (8000e94 <HAL_MspInit+0x4c>)
 8000e74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e7a:	603b      	str	r3, [r7, #0]
 8000e7c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	210f      	movs	r1, #15
 8000e82:	f06f 0001 	mvn.w	r0, #1
 8000e86:	f000 fcc2 	bl	800180e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40021000 	.word	0x40021000

08000e98 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b0ac      	sub	sp, #176	@ 0xb0
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
 8000eac:	60da      	str	r2, [r3, #12]
 8000eae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000eb0:	f107 0314 	add.w	r3, r7, #20
 8000eb4:	2288      	movs	r2, #136	@ 0x88
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f007 ff6d 	bl	8008d98 <memset>
  if(DFSDM1_Init == 0)
 8000ebe:	4b25      	ldr	r3, [pc, #148]	@ (8000f54 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d142      	bne.n	8000f4c <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000ec6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000eca:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ed2:	f107 0314 	add.w	r3, r7, #20
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f002 f976 	bl	80031c8 <HAL_RCCEx_PeriphCLKConfig>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000ee2:	f7ff ffab 	bl	8000e3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000ee6:	4b1c      	ldr	r3, [pc, #112]	@ (8000f58 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000ee8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000eea:	4a1b      	ldr	r2, [pc, #108]	@ (8000f58 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000eec:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000ef0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ef2:	4b19      	ldr	r3, [pc, #100]	@ (8000f58 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000ef4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ef6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000efa:	613b      	str	r3, [r7, #16]
 8000efc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000efe:	4b16      	ldr	r3, [pc, #88]	@ (8000f58 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f02:	4a15      	ldr	r2, [pc, #84]	@ (8000f58 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f04:	f043 0310 	orr.w	r3, r3, #16
 8000f08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f0a:	4b13      	ldr	r3, [pc, #76]	@ (8000f58 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f0e:	f003 0310 	and.w	r3, r3, #16
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000f16:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8000f1a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000f30:	2306      	movs	r3, #6
 8000f32:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f36:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4807      	ldr	r0, [pc, #28]	@ (8000f5c <HAL_DFSDM_ChannelMspInit+0xc4>)
 8000f3e:	f000 fda9 	bl	8001a94 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 8000f42:	4b04      	ldr	r3, [pc, #16]	@ (8000f54 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	3301      	adds	r3, #1
 8000f48:	4a02      	ldr	r2, [pc, #8]	@ (8000f54 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000f4a:	6013      	str	r3, [r2, #0]
  }

}
 8000f4c:	bf00      	nop
 8000f4e:	37b0      	adds	r7, #176	@ 0xb0
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	200007b8 	.word	0x200007b8
 8000f58:	40021000 	.word	0x40021000
 8000f5c:	48001000 	.word	0x48001000

08000f60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b0ac      	sub	sp, #176	@ 0xb0
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f68:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f78:	f107 0314 	add.w	r3, r7, #20
 8000f7c:	2288      	movs	r2, #136	@ 0x88
 8000f7e:	2100      	movs	r1, #0
 8000f80:	4618      	mov	r0, r3
 8000f82:	f007 ff09 	bl	8008d98 <memset>
  if(hi2c->Instance==I2C2)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4a21      	ldr	r2, [pc, #132]	@ (8001010 <HAL_I2C_MspInit+0xb0>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d13b      	bne.n	8001008 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000f90:	2380      	movs	r3, #128	@ 0x80
 8000f92:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000f94:	2300      	movs	r3, #0
 8000f96:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f98:	f107 0314 	add.w	r3, r7, #20
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f002 f913 	bl	80031c8 <HAL_RCCEx_PeriphCLKConfig>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000fa8:	f7ff ff48 	bl	8000e3c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fac:	4b19      	ldr	r3, [pc, #100]	@ (8001014 <HAL_I2C_MspInit+0xb4>)
 8000fae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fb0:	4a18      	ldr	r2, [pc, #96]	@ (8001014 <HAL_I2C_MspInit+0xb4>)
 8000fb2:	f043 0302 	orr.w	r3, r3, #2
 8000fb6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fb8:	4b16      	ldr	r3, [pc, #88]	@ (8001014 <HAL_I2C_MspInit+0xb4>)
 8000fba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fbc:	f003 0302 	and.w	r3, r3, #2
 8000fc0:	613b      	str	r3, [r7, #16]
 8000fc2:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000fc4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000fc8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fcc:	2312      	movs	r3, #18
 8000fce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd8:	2303      	movs	r3, #3
 8000fda:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000fde:	2304      	movs	r3, #4
 8000fe0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000fe8:	4619      	mov	r1, r3
 8000fea:	480b      	ldr	r0, [pc, #44]	@ (8001018 <HAL_I2C_MspInit+0xb8>)
 8000fec:	f000 fd52 	bl	8001a94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000ff0:	4b08      	ldr	r3, [pc, #32]	@ (8001014 <HAL_I2C_MspInit+0xb4>)
 8000ff2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ff4:	4a07      	ldr	r2, [pc, #28]	@ (8001014 <HAL_I2C_MspInit+0xb4>)
 8000ff6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ffa:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ffc:	4b05      	ldr	r3, [pc, #20]	@ (8001014 <HAL_I2C_MspInit+0xb4>)
 8000ffe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001000:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001004:	60fb      	str	r3, [r7, #12]
 8001006:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001008:	bf00      	nop
 800100a:	37b0      	adds	r7, #176	@ 0xb0
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	40005800 	.word	0x40005800
 8001014:	40021000 	.word	0x40021000
 8001018:	48000400 	.word	0x48000400

0800101c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08a      	sub	sp, #40	@ 0x28
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001024:	f107 0314 	add.w	r3, r7, #20
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]
 8001032:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a17      	ldr	r2, [pc, #92]	@ (8001098 <HAL_QSPI_MspInit+0x7c>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d128      	bne.n	8001090 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800103e:	4b17      	ldr	r3, [pc, #92]	@ (800109c <HAL_QSPI_MspInit+0x80>)
 8001040:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001042:	4a16      	ldr	r2, [pc, #88]	@ (800109c <HAL_QSPI_MspInit+0x80>)
 8001044:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001048:	6513      	str	r3, [r2, #80]	@ 0x50
 800104a:	4b14      	ldr	r3, [pc, #80]	@ (800109c <HAL_QSPI_MspInit+0x80>)
 800104c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800104e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001052:	613b      	str	r3, [r7, #16]
 8001054:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001056:	4b11      	ldr	r3, [pc, #68]	@ (800109c <HAL_QSPI_MspInit+0x80>)
 8001058:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800105a:	4a10      	ldr	r2, [pc, #64]	@ (800109c <HAL_QSPI_MspInit+0x80>)
 800105c:	f043 0310 	orr.w	r3, r3, #16
 8001060:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001062:	4b0e      	ldr	r3, [pc, #56]	@ (800109c <HAL_QSPI_MspInit+0x80>)
 8001064:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001066:	f003 0310 	and.w	r3, r3, #16
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 800106e:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8001072:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001074:	2302      	movs	r3, #2
 8001076:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800107c:	2303      	movs	r3, #3
 800107e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001080:	230a      	movs	r3, #10
 8001082:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001084:	f107 0314 	add.w	r3, r7, #20
 8001088:	4619      	mov	r1, r3
 800108a:	4805      	ldr	r0, [pc, #20]	@ (80010a0 <HAL_QSPI_MspInit+0x84>)
 800108c:	f000 fd02 	bl	8001a94 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8001090:	bf00      	nop
 8001092:	3728      	adds	r7, #40	@ 0x28
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	a0001000 	.word	0xa0001000
 800109c:	40021000 	.word	0x40021000
 80010a0:	48001000 	.word	0x48001000

080010a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b08a      	sub	sp, #40	@ 0x28
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ac:	f107 0314 	add.w	r3, r7, #20
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a17      	ldr	r2, [pc, #92]	@ (8001120 <HAL_SPI_MspInit+0x7c>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d128      	bne.n	8001118 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80010c6:	4b17      	ldr	r3, [pc, #92]	@ (8001124 <HAL_SPI_MspInit+0x80>)
 80010c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010ca:	4a16      	ldr	r2, [pc, #88]	@ (8001124 <HAL_SPI_MspInit+0x80>)
 80010cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80010d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80010d2:	4b14      	ldr	r3, [pc, #80]	@ (8001124 <HAL_SPI_MspInit+0x80>)
 80010d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80010da:	613b      	str	r3, [r7, #16]
 80010dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010de:	4b11      	ldr	r3, [pc, #68]	@ (8001124 <HAL_SPI_MspInit+0x80>)
 80010e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010e2:	4a10      	ldr	r2, [pc, #64]	@ (8001124 <HAL_SPI_MspInit+0x80>)
 80010e4:	f043 0304 	orr.w	r3, r3, #4
 80010e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001124 <HAL_SPI_MspInit+0x80>)
 80010ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ee:	f003 0304 	and.w	r3, r3, #4
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80010f6:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80010fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fc:	2302      	movs	r3, #2
 80010fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001104:	2303      	movs	r3, #3
 8001106:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001108:	2306      	movs	r3, #6
 800110a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	4619      	mov	r1, r3
 8001112:	4805      	ldr	r0, [pc, #20]	@ (8001128 <HAL_SPI_MspInit+0x84>)
 8001114:	f000 fcbe 	bl	8001a94 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001118:	bf00      	nop
 800111a:	3728      	adds	r7, #40	@ 0x28
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40003c00 	.word	0x40003c00
 8001124:	40021000 	.word	0x40021000
 8001128:	48000800 	.word	0x48000800

0800112c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a0d      	ldr	r2, [pc, #52]	@ (8001170 <HAL_TIM_Base_MspInit+0x44>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d113      	bne.n	8001166 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800113e:	4b0d      	ldr	r3, [pc, #52]	@ (8001174 <HAL_TIM_Base_MspInit+0x48>)
 8001140:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001142:	4a0c      	ldr	r2, [pc, #48]	@ (8001174 <HAL_TIM_Base_MspInit+0x48>)
 8001144:	f043 0310 	orr.w	r3, r3, #16
 8001148:	6593      	str	r3, [r2, #88]	@ 0x58
 800114a:	4b0a      	ldr	r3, [pc, #40]	@ (8001174 <HAL_TIM_Base_MspInit+0x48>)
 800114c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800114e:	f003 0310 	and.w	r3, r3, #16
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8001156:	2200      	movs	r2, #0
 8001158:	2105      	movs	r1, #5
 800115a:	2036      	movs	r0, #54	@ 0x36
 800115c:	f000 fb57 	bl	800180e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001160:	2036      	movs	r0, #54	@ 0x36
 8001162:	f000 fb70 	bl	8001846 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 8001166:	bf00      	nop
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40001000 	.word	0x40001000
 8001174:	40021000 	.word	0x40021000

08001178 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b0ae      	sub	sp, #184	@ 0xb8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001180:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]
 800118c:	60da      	str	r2, [r3, #12]
 800118e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001190:	f107 031c 	add.w	r3, r7, #28
 8001194:	2288      	movs	r2, #136	@ 0x88
 8001196:	2100      	movs	r1, #0
 8001198:	4618      	mov	r0, r3
 800119a:	f007 fdfd 	bl	8008d98 <memset>
  if(huart->Instance==USART1)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a42      	ldr	r2, [pc, #264]	@ (80012ac <HAL_UART_MspInit+0x134>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d13b      	bne.n	8001220 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80011a8:	2301      	movs	r3, #1
 80011aa:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80011ac:	2300      	movs	r3, #0
 80011ae:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011b0:	f107 031c 	add.w	r3, r7, #28
 80011b4:	4618      	mov	r0, r3
 80011b6:	f002 f807 	bl	80031c8 <HAL_RCCEx_PeriphCLKConfig>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80011c0:	f7ff fe3c 	bl	8000e3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011c4:	4b3a      	ldr	r3, [pc, #232]	@ (80012b0 <HAL_UART_MspInit+0x138>)
 80011c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011c8:	4a39      	ldr	r2, [pc, #228]	@ (80012b0 <HAL_UART_MspInit+0x138>)
 80011ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011ce:	6613      	str	r3, [r2, #96]	@ 0x60
 80011d0:	4b37      	ldr	r3, [pc, #220]	@ (80012b0 <HAL_UART_MspInit+0x138>)
 80011d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011d8:	61bb      	str	r3, [r7, #24]
 80011da:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011dc:	4b34      	ldr	r3, [pc, #208]	@ (80012b0 <HAL_UART_MspInit+0x138>)
 80011de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011e0:	4a33      	ldr	r2, [pc, #204]	@ (80012b0 <HAL_UART_MspInit+0x138>)
 80011e2:	f043 0302 	orr.w	r3, r3, #2
 80011e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011e8:	4b31      	ldr	r3, [pc, #196]	@ (80012b0 <HAL_UART_MspInit+0x138>)
 80011ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ec:	f003 0302 	and.w	r3, r3, #2
 80011f0:	617b      	str	r3, [r7, #20]
 80011f2:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80011f4:	23c0      	movs	r3, #192	@ 0xc0
 80011f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fa:	2302      	movs	r3, #2
 80011fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001206:	2303      	movs	r3, #3
 8001208:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800120c:	2307      	movs	r3, #7
 800120e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001212:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001216:	4619      	mov	r1, r3
 8001218:	4826      	ldr	r0, [pc, #152]	@ (80012b4 <HAL_UART_MspInit+0x13c>)
 800121a:	f000 fc3b 	bl	8001a94 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800121e:	e040      	b.n	80012a2 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a24      	ldr	r2, [pc, #144]	@ (80012b8 <HAL_UART_MspInit+0x140>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d13b      	bne.n	80012a2 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800122a:	2304      	movs	r3, #4
 800122c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800122e:	2300      	movs	r3, #0
 8001230:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001232:	f107 031c 	add.w	r3, r7, #28
 8001236:	4618      	mov	r0, r3
 8001238:	f001 ffc6 	bl	80031c8 <HAL_RCCEx_PeriphCLKConfig>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <HAL_UART_MspInit+0xce>
      Error_Handler();
 8001242:	f7ff fdfb 	bl	8000e3c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001246:	4b1a      	ldr	r3, [pc, #104]	@ (80012b0 <HAL_UART_MspInit+0x138>)
 8001248:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800124a:	4a19      	ldr	r2, [pc, #100]	@ (80012b0 <HAL_UART_MspInit+0x138>)
 800124c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001250:	6593      	str	r3, [r2, #88]	@ 0x58
 8001252:	4b17      	ldr	r3, [pc, #92]	@ (80012b0 <HAL_UART_MspInit+0x138>)
 8001254:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001256:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800125a:	613b      	str	r3, [r7, #16]
 800125c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800125e:	4b14      	ldr	r3, [pc, #80]	@ (80012b0 <HAL_UART_MspInit+0x138>)
 8001260:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001262:	4a13      	ldr	r2, [pc, #76]	@ (80012b0 <HAL_UART_MspInit+0x138>)
 8001264:	f043 0308 	orr.w	r3, r3, #8
 8001268:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800126a:	4b11      	ldr	r3, [pc, #68]	@ (80012b0 <HAL_UART_MspInit+0x138>)
 800126c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800126e:	f003 0308 	and.w	r3, r3, #8
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001276:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800127a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127e:	2302      	movs	r3, #2
 8001280:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800128a:	2303      	movs	r3, #3
 800128c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001290:	2307      	movs	r3, #7
 8001292:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001296:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800129a:	4619      	mov	r1, r3
 800129c:	4807      	ldr	r0, [pc, #28]	@ (80012bc <HAL_UART_MspInit+0x144>)
 800129e:	f000 fbf9 	bl	8001a94 <HAL_GPIO_Init>
}
 80012a2:	bf00      	nop
 80012a4:	37b8      	adds	r7, #184	@ 0xb8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40013800 	.word	0x40013800
 80012b0:	40021000 	.word	0x40021000
 80012b4:	48000400 	.word	0x48000400
 80012b8:	40004800 	.word	0x40004800
 80012bc:	48000c00 	.word	0x48000c00

080012c0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b0ac      	sub	sp, #176	@ 0xb0
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	60da      	str	r2, [r3, #12]
 80012d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012d8:	f107 0314 	add.w	r3, r7, #20
 80012dc:	2288      	movs	r2, #136	@ 0x88
 80012de:	2100      	movs	r1, #0
 80012e0:	4618      	mov	r0, r3
 80012e2:	f007 fd59 	bl	8008d98 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80012ee:	d17c      	bne.n	80013ea <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80012f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012f4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80012f6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80012fa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80012fe:	2301      	movs	r3, #1
 8001300:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001302:	2301      	movs	r3, #1
 8001304:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001306:	2318      	movs	r3, #24
 8001308:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800130a:	2307      	movs	r3, #7
 800130c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800130e:	2302      	movs	r3, #2
 8001310:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001312:	2302      	movs	r3, #2
 8001314:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001316:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800131a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800131c:	f107 0314 	add.w	r3, r7, #20
 8001320:	4618      	mov	r0, r3
 8001322:	f001 ff51 	bl	80031c8 <HAL_RCCEx_PeriphCLKConfig>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 800132c:	f7ff fd86 	bl	8000e3c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001330:	4b30      	ldr	r3, [pc, #192]	@ (80013f4 <HAL_PCD_MspInit+0x134>)
 8001332:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001334:	4a2f      	ldr	r2, [pc, #188]	@ (80013f4 <HAL_PCD_MspInit+0x134>)
 8001336:	f043 0301 	orr.w	r3, r3, #1
 800133a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800133c:	4b2d      	ldr	r3, [pc, #180]	@ (80013f4 <HAL_PCD_MspInit+0x134>)
 800133e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001340:	f003 0301 	and.w	r3, r3, #1
 8001344:	613b      	str	r3, [r7, #16]
 8001346:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001348:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800134c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001350:	2300      	movs	r3, #0
 8001352:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800135c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001360:	4619      	mov	r1, r3
 8001362:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001366:	f000 fb95 	bl	8001a94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800136a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800136e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001372:	2302      	movs	r3, #2
 8001374:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800137e:	2303      	movs	r3, #3
 8001380:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001384:	230a      	movs	r3, #10
 8001386:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800138e:	4619      	mov	r1, r3
 8001390:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001394:	f000 fb7e 	bl	8001a94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001398:	4b16      	ldr	r3, [pc, #88]	@ (80013f4 <HAL_PCD_MspInit+0x134>)
 800139a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800139c:	4a15      	ldr	r2, [pc, #84]	@ (80013f4 <HAL_PCD_MspInit+0x134>)
 800139e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80013a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013a4:	4b13      	ldr	r3, [pc, #76]	@ (80013f4 <HAL_PCD_MspInit+0x134>)
 80013a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013b0:	4b10      	ldr	r3, [pc, #64]	@ (80013f4 <HAL_PCD_MspInit+0x134>)
 80013b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d114      	bne.n	80013e6 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013bc:	4b0d      	ldr	r3, [pc, #52]	@ (80013f4 <HAL_PCD_MspInit+0x134>)
 80013be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013c0:	4a0c      	ldr	r2, [pc, #48]	@ (80013f4 <HAL_PCD_MspInit+0x134>)
 80013c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80013c8:	4b0a      	ldr	r3, [pc, #40]	@ (80013f4 <HAL_PCD_MspInit+0x134>)
 80013ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013d0:	60bb      	str	r3, [r7, #8]
 80013d2:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80013d4:	f001 f82c 	bl	8002430 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80013d8:	4b06      	ldr	r3, [pc, #24]	@ (80013f4 <HAL_PCD_MspInit+0x134>)
 80013da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013dc:	4a05      	ldr	r2, [pc, #20]	@ (80013f4 <HAL_PCD_MspInit+0x134>)
 80013de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80013e2:	6593      	str	r3, [r2, #88]	@ 0x58

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80013e4:	e001      	b.n	80013ea <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 80013e6:	f001 f823 	bl	8002430 <HAL_PWREx_EnableVddUSB>
}
 80013ea:	bf00      	nop
 80013ec:	37b0      	adds	r7, #176	@ 0xb0
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40021000 	.word	0x40021000

080013f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013fc:	bf00      	nop
 80013fe:	e7fd      	b.n	80013fc <NMI_Handler+0x4>

08001400 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001404:	bf00      	nop
 8001406:	e7fd      	b.n	8001404 <HardFault_Handler+0x4>

08001408 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800140c:	bf00      	nop
 800140e:	e7fd      	b.n	800140c <MemManage_Handler+0x4>

08001410 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001414:	bf00      	nop
 8001416:	e7fd      	b.n	8001414 <BusFault_Handler+0x4>

08001418 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800141c:	bf00      	nop
 800141e:	e7fd      	b.n	800141c <UsageFault_Handler+0x4>

08001420 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr

0800142e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800142e:	b580      	push	{r7, lr}
 8001430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001432:	f000 f8cd 	bl	80015d0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001436:	f006 fb35 	bl	8007aa4 <xTaskGetSchedulerState>
 800143a:	4603      	mov	r3, r0
 800143c:	2b01      	cmp	r3, #1
 800143e:	d001      	beq.n	8001444 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001440:	f007 fa2a 	bl	8008898 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001444:	bf00      	nop
 8001446:	bd80      	pop	{r7, pc}

08001448 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 800144c:	2020      	movs	r0, #32
 800144e:	f000 fcfd 	bl	8001e4c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8001452:	2040      	movs	r0, #64	@ 0x40
 8001454:	f000 fcfa 	bl	8001e4c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001458:	2080      	movs	r0, #128	@ 0x80
 800145a:	f000 fcf7 	bl	8001e4c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 800145e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001462:	f000 fcf3 	bl	8001e4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}

0800146a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 800146e:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001472:	f000 fceb 	bl	8001e4c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001476:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800147a:	f000 fce7 	bl	8001e4c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 800147e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001482:	f000 fce3 	bl	8001e4c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001486:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800148a:	f000 fcdf 	bl	8001e4c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 800148e:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001492:	f000 fcdb 	bl	8001e4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
	...

0800149c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80014a0:	4802      	ldr	r0, [pc, #8]	@ (80014ac <TIM6_DAC_IRQHandler+0x10>)
 80014a2:	f002 fd57 	bl	8003f54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000160 	.word	0x20000160

080014b0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80014b4:	4b06      	ldr	r3, [pc, #24]	@ (80014d0 <SystemInit+0x20>)
 80014b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014ba:	4a05      	ldr	r2, [pc, #20]	@ (80014d0 <SystemInit+0x20>)
 80014bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80014c4:	bf00      	nop
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	e000ed00 	.word	0xe000ed00

080014d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80014d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800150c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014d8:	f7ff ffea 	bl	80014b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014dc:	480c      	ldr	r0, [pc, #48]	@ (8001510 <LoopForever+0x6>)
  ldr r1, =_edata
 80014de:	490d      	ldr	r1, [pc, #52]	@ (8001514 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001518 <LoopForever+0xe>)
  movs r3, #0
 80014e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014e4:	e002      	b.n	80014ec <LoopCopyDataInit>

080014e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ea:	3304      	adds	r3, #4

080014ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014f0:	d3f9      	bcc.n	80014e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014f2:	4a0a      	ldr	r2, [pc, #40]	@ (800151c <LoopForever+0x12>)
  ldr r4, =_ebss
 80014f4:	4c0a      	ldr	r4, [pc, #40]	@ (8001520 <LoopForever+0x16>)
  movs r3, #0
 80014f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014f8:	e001      	b.n	80014fe <LoopFillZerobss>

080014fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014fc:	3204      	adds	r2, #4

080014fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001500:	d3fb      	bcc.n	80014fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001502:	f007 fc51 	bl	8008da8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001506:	f7fe fff1 	bl	80004ec <main>

0800150a <LoopForever>:

LoopForever:
    b LoopForever
 800150a:	e7fe      	b.n	800150a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800150c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001510:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001514:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001518:	08008f6c 	.word	0x08008f6c
  ldr r2, =_sbss
 800151c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001520:	200020ec 	.word	0x200020ec

08001524 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001524:	e7fe      	b.n	8001524 <ADC1_2_IRQHandler>

08001526 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	b082      	sub	sp, #8
 800152a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800152c:	2300      	movs	r3, #0
 800152e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001530:	2003      	movs	r0, #3
 8001532:	f000 f961 	bl	80017f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001536:	200f      	movs	r0, #15
 8001538:	f000 f80e 	bl	8001558 <HAL_InitTick>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d002      	beq.n	8001548 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	71fb      	strb	r3, [r7, #7]
 8001546:	e001      	b.n	800154c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001548:	f7ff fc7e 	bl	8000e48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800154c:	79fb      	ldrb	r3, [r7, #7]
}
 800154e:	4618      	mov	r0, r3
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
	...

08001558 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001560:	2300      	movs	r3, #0
 8001562:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001564:	4b17      	ldr	r3, [pc, #92]	@ (80015c4 <HAL_InitTick+0x6c>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d023      	beq.n	80015b4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800156c:	4b16      	ldr	r3, [pc, #88]	@ (80015c8 <HAL_InitTick+0x70>)
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	4b14      	ldr	r3, [pc, #80]	@ (80015c4 <HAL_InitTick+0x6c>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	4619      	mov	r1, r3
 8001576:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800157a:	fbb3 f3f1 	udiv	r3, r3, r1
 800157e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001582:	4618      	mov	r0, r3
 8001584:	f000 f96d 	bl	8001862 <HAL_SYSTICK_Config>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d10f      	bne.n	80015ae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2b0f      	cmp	r3, #15
 8001592:	d809      	bhi.n	80015a8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001594:	2200      	movs	r2, #0
 8001596:	6879      	ldr	r1, [r7, #4]
 8001598:	f04f 30ff 	mov.w	r0, #4294967295
 800159c:	f000 f937 	bl	800180e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015a0:	4a0a      	ldr	r2, [pc, #40]	@ (80015cc <HAL_InitTick+0x74>)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6013      	str	r3, [r2, #0]
 80015a6:	e007      	b.n	80015b8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	73fb      	strb	r3, [r7, #15]
 80015ac:	e004      	b.n	80015b8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	73fb      	strb	r3, [r7, #15]
 80015b2:	e001      	b.n	80015b8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80015b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3710      	adds	r7, #16
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	20000008 	.word	0x20000008
 80015c8:	20000000 	.word	0x20000000
 80015cc:	20000004 	.word	0x20000004

080015d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015d4:	4b06      	ldr	r3, [pc, #24]	@ (80015f0 <HAL_IncTick+0x20>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	461a      	mov	r2, r3
 80015da:	4b06      	ldr	r3, [pc, #24]	@ (80015f4 <HAL_IncTick+0x24>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4413      	add	r3, r2
 80015e0:	4a04      	ldr	r2, [pc, #16]	@ (80015f4 <HAL_IncTick+0x24>)
 80015e2:	6013      	str	r3, [r2, #0]
}
 80015e4:	bf00      	nop
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	20000008 	.word	0x20000008
 80015f4:	200007bc 	.word	0x200007bc

080015f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  return uwTick;
 80015fc:	4b03      	ldr	r3, [pc, #12]	@ (800160c <HAL_GetTick+0x14>)
 80015fe:	681b      	ldr	r3, [r3, #0]
}
 8001600:	4618      	mov	r0, r3
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	200007bc 	.word	0x200007bc

08001610 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001618:	f7ff ffee 	bl	80015f8 <HAL_GetTick>
 800161c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001628:	d005      	beq.n	8001636 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800162a:	4b0a      	ldr	r3, [pc, #40]	@ (8001654 <HAL_Delay+0x44>)
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	461a      	mov	r2, r3
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	4413      	add	r3, r2
 8001634:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001636:	bf00      	nop
 8001638:	f7ff ffde 	bl	80015f8 <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	68fa      	ldr	r2, [r7, #12]
 8001644:	429a      	cmp	r2, r3
 8001646:	d8f7      	bhi.n	8001638 <HAL_Delay+0x28>
  {
  }
}
 8001648:	bf00      	nop
 800164a:	bf00      	nop
 800164c:	3710      	adds	r7, #16
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	20000008 	.word	0x20000008

08001658 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f003 0307 	and.w	r3, r3, #7
 8001666:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001668:	4b0c      	ldr	r3, [pc, #48]	@ (800169c <__NVIC_SetPriorityGrouping+0x44>)
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800166e:	68ba      	ldr	r2, [r7, #8]
 8001670:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001674:	4013      	ands	r3, r2
 8001676:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001680:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001684:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001688:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800168a:	4a04      	ldr	r2, [pc, #16]	@ (800169c <__NVIC_SetPriorityGrouping+0x44>)
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	60d3      	str	r3, [r2, #12]
}
 8001690:	bf00      	nop
 8001692:	3714      	adds	r7, #20
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	e000ed00 	.word	0xe000ed00

080016a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016a4:	4b04      	ldr	r3, [pc, #16]	@ (80016b8 <__NVIC_GetPriorityGrouping+0x18>)
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	0a1b      	lsrs	r3, r3, #8
 80016aa:	f003 0307 	and.w	r3, r3, #7
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr
 80016b8:	e000ed00 	.word	0xe000ed00

080016bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	db0b      	blt.n	80016e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016ce:	79fb      	ldrb	r3, [r7, #7]
 80016d0:	f003 021f 	and.w	r2, r3, #31
 80016d4:	4907      	ldr	r1, [pc, #28]	@ (80016f4 <__NVIC_EnableIRQ+0x38>)
 80016d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016da:	095b      	lsrs	r3, r3, #5
 80016dc:	2001      	movs	r0, #1
 80016de:	fa00 f202 	lsl.w	r2, r0, r2
 80016e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016e6:	bf00      	nop
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	e000e100 	.word	0xe000e100

080016f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4603      	mov	r3, r0
 8001700:	6039      	str	r1, [r7, #0]
 8001702:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001704:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001708:	2b00      	cmp	r3, #0
 800170a:	db0a      	blt.n	8001722 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	b2da      	uxtb	r2, r3
 8001710:	490c      	ldr	r1, [pc, #48]	@ (8001744 <__NVIC_SetPriority+0x4c>)
 8001712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001716:	0112      	lsls	r2, r2, #4
 8001718:	b2d2      	uxtb	r2, r2
 800171a:	440b      	add	r3, r1
 800171c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001720:	e00a      	b.n	8001738 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	b2da      	uxtb	r2, r3
 8001726:	4908      	ldr	r1, [pc, #32]	@ (8001748 <__NVIC_SetPriority+0x50>)
 8001728:	79fb      	ldrb	r3, [r7, #7]
 800172a:	f003 030f 	and.w	r3, r3, #15
 800172e:	3b04      	subs	r3, #4
 8001730:	0112      	lsls	r2, r2, #4
 8001732:	b2d2      	uxtb	r2, r2
 8001734:	440b      	add	r3, r1
 8001736:	761a      	strb	r2, [r3, #24]
}
 8001738:	bf00      	nop
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr
 8001744:	e000e100 	.word	0xe000e100
 8001748:	e000ed00 	.word	0xe000ed00

0800174c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800174c:	b480      	push	{r7}
 800174e:	b089      	sub	sp, #36	@ 0x24
 8001750:	af00      	add	r7, sp, #0
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	60b9      	str	r1, [r7, #8]
 8001756:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	f003 0307 	and.w	r3, r3, #7
 800175e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	f1c3 0307 	rsb	r3, r3, #7
 8001766:	2b04      	cmp	r3, #4
 8001768:	bf28      	it	cs
 800176a:	2304      	movcs	r3, #4
 800176c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	3304      	adds	r3, #4
 8001772:	2b06      	cmp	r3, #6
 8001774:	d902      	bls.n	800177c <NVIC_EncodePriority+0x30>
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	3b03      	subs	r3, #3
 800177a:	e000      	b.n	800177e <NVIC_EncodePriority+0x32>
 800177c:	2300      	movs	r3, #0
 800177e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001780:	f04f 32ff 	mov.w	r2, #4294967295
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	fa02 f303 	lsl.w	r3, r2, r3
 800178a:	43da      	mvns	r2, r3
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	401a      	ands	r2, r3
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001794:	f04f 31ff 	mov.w	r1, #4294967295
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	fa01 f303 	lsl.w	r3, r1, r3
 800179e:	43d9      	mvns	r1, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a4:	4313      	orrs	r3, r2
         );
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3724      	adds	r7, #36	@ 0x24
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
	...

080017b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	3b01      	subs	r3, #1
 80017c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017c4:	d301      	bcc.n	80017ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017c6:	2301      	movs	r3, #1
 80017c8:	e00f      	b.n	80017ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ca:	4a0a      	ldr	r2, [pc, #40]	@ (80017f4 <SysTick_Config+0x40>)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	3b01      	subs	r3, #1
 80017d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017d2:	210f      	movs	r1, #15
 80017d4:	f04f 30ff 	mov.w	r0, #4294967295
 80017d8:	f7ff ff8e 	bl	80016f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017dc:	4b05      	ldr	r3, [pc, #20]	@ (80017f4 <SysTick_Config+0x40>)
 80017de:	2200      	movs	r2, #0
 80017e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017e2:	4b04      	ldr	r3, [pc, #16]	@ (80017f4 <SysTick_Config+0x40>)
 80017e4:	2207      	movs	r2, #7
 80017e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	e000e010 	.word	0xe000e010

080017f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f7ff ff29 	bl	8001658 <__NVIC_SetPriorityGrouping>
}
 8001806:	bf00      	nop
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	b086      	sub	sp, #24
 8001812:	af00      	add	r7, sp, #0
 8001814:	4603      	mov	r3, r0
 8001816:	60b9      	str	r1, [r7, #8]
 8001818:	607a      	str	r2, [r7, #4]
 800181a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800181c:	2300      	movs	r3, #0
 800181e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001820:	f7ff ff3e 	bl	80016a0 <__NVIC_GetPriorityGrouping>
 8001824:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	68b9      	ldr	r1, [r7, #8]
 800182a:	6978      	ldr	r0, [r7, #20]
 800182c:	f7ff ff8e 	bl	800174c <NVIC_EncodePriority>
 8001830:	4602      	mov	r2, r0
 8001832:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001836:	4611      	mov	r1, r2
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff ff5d 	bl	80016f8 <__NVIC_SetPriority>
}
 800183e:	bf00      	nop
 8001840:	3718      	adds	r7, #24
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001846:	b580      	push	{r7, lr}
 8001848:	b082      	sub	sp, #8
 800184a:	af00      	add	r7, sp, #0
 800184c:	4603      	mov	r3, r0
 800184e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff ff31 	bl	80016bc <__NVIC_EnableIRQ>
}
 800185a:	bf00      	nop
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b082      	sub	sp, #8
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f7ff ffa2 	bl	80017b4 <SysTick_Config>
 8001870:	4603      	mov	r3, r0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
	...

0800187c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d101      	bne.n	800188e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e0ac      	b.n	80019e8 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4618      	mov	r0, r3
 8001894:	f000 f8b2 	bl	80019fc <DFSDM_GetChannelFromInstance>
 8001898:	4603      	mov	r3, r0
 800189a:	4a55      	ldr	r2, [pc, #340]	@ (80019f0 <HAL_DFSDM_ChannelInit+0x174>)
 800189c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e09f      	b.n	80019e8 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f7ff faf5 	bl	8000e98 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80018ae:	4b51      	ldr	r3, [pc, #324]	@ (80019f4 <HAL_DFSDM_ChannelInit+0x178>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	3301      	adds	r3, #1
 80018b4:	4a4f      	ldr	r2, [pc, #316]	@ (80019f4 <HAL_DFSDM_ChannelInit+0x178>)
 80018b6:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80018b8:	4b4e      	ldr	r3, [pc, #312]	@ (80019f4 <HAL_DFSDM_ChannelInit+0x178>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d125      	bne.n	800190c <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80018c0:	4b4d      	ldr	r3, [pc, #308]	@ (80019f8 <HAL_DFSDM_ChannelInit+0x17c>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a4c      	ldr	r2, [pc, #304]	@ (80019f8 <HAL_DFSDM_ChannelInit+0x17c>)
 80018c6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80018ca:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80018cc:	4b4a      	ldr	r3, [pc, #296]	@ (80019f8 <HAL_DFSDM_ChannelInit+0x17c>)
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	4948      	ldr	r1, [pc, #288]	@ (80019f8 <HAL_DFSDM_ChannelInit+0x17c>)
 80018d6:	4313      	orrs	r3, r2
 80018d8:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80018da:	4b47      	ldr	r3, [pc, #284]	@ (80019f8 <HAL_DFSDM_ChannelInit+0x17c>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a46      	ldr	r2, [pc, #280]	@ (80019f8 <HAL_DFSDM_ChannelInit+0x17c>)
 80018e0:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 80018e4:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	791b      	ldrb	r3, [r3, #4]
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d108      	bne.n	8001900 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80018ee:	4b42      	ldr	r3, [pc, #264]	@ (80019f8 <HAL_DFSDM_ChannelInit+0x17c>)
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	3b01      	subs	r3, #1
 80018f8:	041b      	lsls	r3, r3, #16
 80018fa:	493f      	ldr	r1, [pc, #252]	@ (80019f8 <HAL_DFSDM_ChannelInit+0x17c>)
 80018fc:	4313      	orrs	r3, r2
 80018fe:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001900:	4b3d      	ldr	r3, [pc, #244]	@ (80019f8 <HAL_DFSDM_ChannelInit+0x17c>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a3c      	ldr	r2, [pc, #240]	@ (80019f8 <HAL_DFSDM_ChannelInit+0x17c>)
 8001906:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800190a:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 800191a:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	6819      	ldr	r1, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800192a:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001930:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	430a      	orrs	r2, r1
 8001938:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f022 020f 	bic.w	r2, r2, #15
 8001948:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	6819      	ldr	r1, [r3, #0]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001958:	431a      	orrs	r2, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	430a      	orrs	r2, r1
 8001960:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	689a      	ldr	r2, [r3, #8]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8001970:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	6899      	ldr	r1, [r3, #8]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001980:	3b01      	subs	r3, #1
 8001982:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001984:	431a      	orrs	r2, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	430a      	orrs	r2, r1
 800198c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	685a      	ldr	r2, [r3, #4]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f002 0207 	and.w	r2, r2, #7
 800199c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	6859      	ldr	r1, [r3, #4]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019a8:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ae:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80019b0:	431a      	orrs	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	430a      	orrs	r2, r1
 80019b8:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80019c8:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2201      	movs	r2, #1
 80019ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f000 f810 	bl	80019fc <DFSDM_GetChannelFromInstance>
 80019dc:	4602      	mov	r2, r0
 80019de:	4904      	ldr	r1, [pc, #16]	@ (80019f0 <HAL_DFSDM_ChannelInit+0x174>)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80019e6:	2300      	movs	r3, #0
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3708      	adds	r7, #8
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	200007c4 	.word	0x200007c4
 80019f4:	200007c0 	.word	0x200007c0
 80019f8:	40016000 	.word	0x40016000

080019fc <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b085      	sub	sp, #20
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	4a1c      	ldr	r2, [pc, #112]	@ (8001a78 <DFSDM_GetChannelFromInstance+0x7c>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d102      	bne.n	8001a12 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	e02b      	b.n	8001a6a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a19      	ldr	r2, [pc, #100]	@ (8001a7c <DFSDM_GetChannelFromInstance+0x80>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d102      	bne.n	8001a20 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	60fb      	str	r3, [r7, #12]
 8001a1e:	e024      	b.n	8001a6a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	4a17      	ldr	r2, [pc, #92]	@ (8001a80 <DFSDM_GetChannelFromInstance+0x84>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d102      	bne.n	8001a2e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001a28:	2302      	movs	r3, #2
 8001a2a:	60fb      	str	r3, [r7, #12]
 8001a2c:	e01d      	b.n	8001a6a <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a14      	ldr	r2, [pc, #80]	@ (8001a84 <DFSDM_GetChannelFromInstance+0x88>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d102      	bne.n	8001a3c <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8001a36:	2304      	movs	r3, #4
 8001a38:	60fb      	str	r3, [r7, #12]
 8001a3a:	e016      	b.n	8001a6a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4a12      	ldr	r2, [pc, #72]	@ (8001a88 <DFSDM_GetChannelFromInstance+0x8c>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d102      	bne.n	8001a4a <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001a44:	2305      	movs	r3, #5
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	e00f      	b.n	8001a6a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a0f      	ldr	r2, [pc, #60]	@ (8001a8c <DFSDM_GetChannelFromInstance+0x90>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d102      	bne.n	8001a58 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8001a52:	2306      	movs	r3, #6
 8001a54:	60fb      	str	r3, [r7, #12]
 8001a56:	e008      	b.n	8001a6a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	4a0d      	ldr	r2, [pc, #52]	@ (8001a90 <DFSDM_GetChannelFromInstance+0x94>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d102      	bne.n	8001a66 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001a60:	2307      	movs	r3, #7
 8001a62:	60fb      	str	r3, [r7, #12]
 8001a64:	e001      	b.n	8001a6a <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8001a66:	2303      	movs	r3, #3
 8001a68:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3714      	adds	r7, #20
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr
 8001a78:	40016000 	.word	0x40016000
 8001a7c:	40016020 	.word	0x40016020
 8001a80:	40016040 	.word	0x40016040
 8001a84:	40016080 	.word	0x40016080
 8001a88:	400160a0 	.word	0x400160a0
 8001a8c:	400160c0 	.word	0x400160c0
 8001a90:	400160e0 	.word	0x400160e0

08001a94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b087      	sub	sp, #28
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aa2:	e17f      	b.n	8001da4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	2101      	movs	r1, #1
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	f000 8171 	beq.w	8001d9e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f003 0303 	and.w	r3, r3, #3
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d005      	beq.n	8001ad4 <HAL_GPIO_Init+0x40>
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f003 0303 	and.w	r3, r3, #3
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d130      	bne.n	8001b36 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	2203      	movs	r2, #3
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	68da      	ldr	r2, [r3, #12]
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	693a      	ldr	r2, [r7, #16]
 8001b02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	43db      	mvns	r3, r3
 8001b14:	693a      	ldr	r2, [r7, #16]
 8001b16:	4013      	ands	r3, r2
 8001b18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	091b      	lsrs	r3, r3, #4
 8001b20:	f003 0201 	and.w	r2, r3, #1
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f003 0303 	and.w	r3, r3, #3
 8001b3e:	2b03      	cmp	r3, #3
 8001b40:	d118      	bne.n	8001b74 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b46:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001b48:	2201      	movs	r2, #1
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	43db      	mvns	r3, r3
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	4013      	ands	r3, r2
 8001b56:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	08db      	lsrs	r3, r3, #3
 8001b5e:	f003 0201 	and.w	r2, r3, #1
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	693a      	ldr	r2, [r7, #16]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	693a      	ldr	r2, [r7, #16]
 8001b72:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f003 0303 	and.w	r3, r3, #3
 8001b7c:	2b03      	cmp	r3, #3
 8001b7e:	d017      	beq.n	8001bb0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	2203      	movs	r2, #3
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	43db      	mvns	r3, r3
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	4013      	ands	r3, r2
 8001b96:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	689a      	ldr	r2, [r3, #8]
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	693a      	ldr	r2, [r7, #16]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	693a      	ldr	r2, [r7, #16]
 8001bae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f003 0303 	and.w	r3, r3, #3
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d123      	bne.n	8001c04 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	08da      	lsrs	r2, r3, #3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	3208      	adds	r2, #8
 8001bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	f003 0307 	and.w	r3, r3, #7
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	220f      	movs	r2, #15
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	691a      	ldr	r2, [r3, #16]
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	f003 0307 	and.w	r3, r3, #7
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	693a      	ldr	r2, [r7, #16]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	08da      	lsrs	r2, r3, #3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	3208      	adds	r2, #8
 8001bfe:	6939      	ldr	r1, [r7, #16]
 8001c00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	2203      	movs	r2, #3
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	43db      	mvns	r3, r3
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f003 0203 	and.w	r2, r3, #3
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	005b      	lsls	r3, r3, #1
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	693a      	ldr	r2, [r7, #16]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	693a      	ldr	r2, [r7, #16]
 8001c36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	f000 80ac 	beq.w	8001d9e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c46:	4b5f      	ldr	r3, [pc, #380]	@ (8001dc4 <HAL_GPIO_Init+0x330>)
 8001c48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c4a:	4a5e      	ldr	r2, [pc, #376]	@ (8001dc4 <HAL_GPIO_Init+0x330>)
 8001c4c:	f043 0301 	orr.w	r3, r3, #1
 8001c50:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c52:	4b5c      	ldr	r3, [pc, #368]	@ (8001dc4 <HAL_GPIO_Init+0x330>)
 8001c54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	60bb      	str	r3, [r7, #8]
 8001c5c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c5e:	4a5a      	ldr	r2, [pc, #360]	@ (8001dc8 <HAL_GPIO_Init+0x334>)
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	089b      	lsrs	r3, r3, #2
 8001c64:	3302      	adds	r3, #2
 8001c66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	f003 0303 	and.w	r3, r3, #3
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	220f      	movs	r2, #15
 8001c76:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7a:	43db      	mvns	r3, r3
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001c88:	d025      	beq.n	8001cd6 <HAL_GPIO_Init+0x242>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a4f      	ldr	r2, [pc, #316]	@ (8001dcc <HAL_GPIO_Init+0x338>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d01f      	beq.n	8001cd2 <HAL_GPIO_Init+0x23e>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a4e      	ldr	r2, [pc, #312]	@ (8001dd0 <HAL_GPIO_Init+0x33c>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d019      	beq.n	8001cce <HAL_GPIO_Init+0x23a>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a4d      	ldr	r2, [pc, #308]	@ (8001dd4 <HAL_GPIO_Init+0x340>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d013      	beq.n	8001cca <HAL_GPIO_Init+0x236>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a4c      	ldr	r2, [pc, #304]	@ (8001dd8 <HAL_GPIO_Init+0x344>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d00d      	beq.n	8001cc6 <HAL_GPIO_Init+0x232>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a4b      	ldr	r2, [pc, #300]	@ (8001ddc <HAL_GPIO_Init+0x348>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d007      	beq.n	8001cc2 <HAL_GPIO_Init+0x22e>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a4a      	ldr	r2, [pc, #296]	@ (8001de0 <HAL_GPIO_Init+0x34c>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d101      	bne.n	8001cbe <HAL_GPIO_Init+0x22a>
 8001cba:	2306      	movs	r3, #6
 8001cbc:	e00c      	b.n	8001cd8 <HAL_GPIO_Init+0x244>
 8001cbe:	2307      	movs	r3, #7
 8001cc0:	e00a      	b.n	8001cd8 <HAL_GPIO_Init+0x244>
 8001cc2:	2305      	movs	r3, #5
 8001cc4:	e008      	b.n	8001cd8 <HAL_GPIO_Init+0x244>
 8001cc6:	2304      	movs	r3, #4
 8001cc8:	e006      	b.n	8001cd8 <HAL_GPIO_Init+0x244>
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e004      	b.n	8001cd8 <HAL_GPIO_Init+0x244>
 8001cce:	2302      	movs	r3, #2
 8001cd0:	e002      	b.n	8001cd8 <HAL_GPIO_Init+0x244>
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e000      	b.n	8001cd8 <HAL_GPIO_Init+0x244>
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	697a      	ldr	r2, [r7, #20]
 8001cda:	f002 0203 	and.w	r2, r2, #3
 8001cde:	0092      	lsls	r2, r2, #2
 8001ce0:	4093      	lsls	r3, r2
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ce8:	4937      	ldr	r1, [pc, #220]	@ (8001dc8 <HAL_GPIO_Init+0x334>)
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	089b      	lsrs	r3, r3, #2
 8001cee:	3302      	adds	r3, #2
 8001cf0:	693a      	ldr	r2, [r7, #16]
 8001cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001cf6:	4b3b      	ldr	r3, [pc, #236]	@ (8001de4 <HAL_GPIO_Init+0x350>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	43db      	mvns	r3, r3
 8001d00:	693a      	ldr	r2, [r7, #16]
 8001d02:	4013      	ands	r3, r2
 8001d04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d003      	beq.n	8001d1a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001d12:	693a      	ldr	r2, [r7, #16]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d1a:	4a32      	ldr	r2, [pc, #200]	@ (8001de4 <HAL_GPIO_Init+0x350>)
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d20:	4b30      	ldr	r3, [pc, #192]	@ (8001de4 <HAL_GPIO_Init+0x350>)
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d003      	beq.n	8001d44 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001d3c:	693a      	ldr	r2, [r7, #16]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d44:	4a27      	ldr	r2, [pc, #156]	@ (8001de4 <HAL_GPIO_Init+0x350>)
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001d4a:	4b26      	ldr	r3, [pc, #152]	@ (8001de4 <HAL_GPIO_Init+0x350>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	43db      	mvns	r3, r3
 8001d54:	693a      	ldr	r2, [r7, #16]
 8001d56:	4013      	ands	r3, r2
 8001d58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d003      	beq.n	8001d6e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d6e:	4a1d      	ldr	r2, [pc, #116]	@ (8001de4 <HAL_GPIO_Init+0x350>)
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001d74:	4b1b      	ldr	r3, [pc, #108]	@ (8001de4 <HAL_GPIO_Init+0x350>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	4013      	ands	r3, r2
 8001d82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d003      	beq.n	8001d98 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001d90:	693a      	ldr	r2, [r7, #16]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d98:	4a12      	ldr	r2, [pc, #72]	@ (8001de4 <HAL_GPIO_Init+0x350>)
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	3301      	adds	r3, #1
 8001da2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	fa22 f303 	lsr.w	r3, r2, r3
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	f47f ae78 	bne.w	8001aa4 <HAL_GPIO_Init+0x10>
  }
}
 8001db4:	bf00      	nop
 8001db6:	bf00      	nop
 8001db8:	371c      	adds	r7, #28
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	40010000 	.word	0x40010000
 8001dcc:	48000400 	.word	0x48000400
 8001dd0:	48000800 	.word	0x48000800
 8001dd4:	48000c00 	.word	0x48000c00
 8001dd8:	48001000 	.word	0x48001000
 8001ddc:	48001400 	.word	0x48001400
 8001de0:	48001800 	.word	0x48001800
 8001de4:	40010400 	.word	0x40010400

08001de8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	460b      	mov	r3, r1
 8001df2:	807b      	strh	r3, [r7, #2]
 8001df4:	4613      	mov	r3, r2
 8001df6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001df8:	787b      	ldrb	r3, [r7, #1]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d003      	beq.n	8001e06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001dfe:	887a      	ldrh	r2, [r7, #2]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e04:	e002      	b.n	8001e0c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e06:	887a      	ldrh	r2, [r7, #2]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001e0c:	bf00      	nop
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	460b      	mov	r3, r1
 8001e22:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	695b      	ldr	r3, [r3, #20]
 8001e28:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e2a:	887a      	ldrh	r2, [r7, #2]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	041a      	lsls	r2, r3, #16
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	43d9      	mvns	r1, r3
 8001e36:	887b      	ldrh	r3, [r7, #2]
 8001e38:	400b      	ands	r3, r1
 8001e3a:	431a      	orrs	r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	619a      	str	r2, [r3, #24]
}
 8001e40:	bf00      	nop
 8001e42:	3714      	adds	r7, #20
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	4603      	mov	r3, r0
 8001e54:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001e56:	4b08      	ldr	r3, [pc, #32]	@ (8001e78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e58:	695a      	ldr	r2, [r3, #20]
 8001e5a:	88fb      	ldrh	r3, [r7, #6]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d006      	beq.n	8001e70 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e62:	4a05      	ldr	r2, [pc, #20]	@ (8001e78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e64:	88fb      	ldrh	r3, [r7, #6]
 8001e66:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e68:	88fb      	ldrh	r3, [r7, #6]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7fe ff54 	bl	8000d18 <HAL_GPIO_EXTI_Callback>
  }
}
 8001e70:	bf00      	nop
 8001e72:	3708      	adds	r7, #8
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	40010400 	.word	0x40010400

08001e7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d101      	bne.n	8001e8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e08d      	b.n	8001faa <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d106      	bne.n	8001ea8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f7ff f85c 	bl	8000f60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2224      	movs	r2, #36	@ 0x24
 8001eac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f022 0201 	bic.w	r2, r2, #1
 8001ebe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685a      	ldr	r2, [r3, #4]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001ecc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	689a      	ldr	r2, [r3, #8]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001edc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	68db      	ldr	r3, [r3, #12]
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d107      	bne.n	8001ef6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	689a      	ldr	r2, [r3, #8]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001ef2:	609a      	str	r2, [r3, #8]
 8001ef4:	e006      	b.n	8001f04 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	689a      	ldr	r2, [r3, #8]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001f02:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d108      	bne.n	8001f1e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	685a      	ldr	r2, [r3, #4]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f1a:	605a      	str	r2, [r3, #4]
 8001f1c:	e007      	b.n	8001f2e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	685a      	ldr	r2, [r3, #4]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f2c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	6812      	ldr	r2, [r2, #0]
 8001f38:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001f3c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f40:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	68da      	ldr	r2, [r3, #12]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f50:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	691a      	ldr	r2, [r3, #16]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	695b      	ldr	r3, [r3, #20]
 8001f5a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	699b      	ldr	r3, [r3, #24]
 8001f62:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	430a      	orrs	r2, r1
 8001f6a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	69d9      	ldr	r1, [r3, #28]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a1a      	ldr	r2, [r3, #32]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f042 0201 	orr.w	r2, r2, #1
 8001f8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2220      	movs	r2, #32
 8001f96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	b083      	sub	sp, #12
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
 8001fba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	2b20      	cmp	r3, #32
 8001fc6:	d138      	bne.n	800203a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d101      	bne.n	8001fd6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	e032      	b.n	800203c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2201      	movs	r2, #1
 8001fda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2224      	movs	r2, #36	@ 0x24
 8001fe2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f022 0201 	bic.w	r2, r2, #1
 8001ff4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002004:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	6819      	ldr	r1, [r3, #0]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	683a      	ldr	r2, [r7, #0]
 8002012:	430a      	orrs	r2, r1
 8002014:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f042 0201 	orr.w	r2, r2, #1
 8002024:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2220      	movs	r2, #32
 800202a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002036:	2300      	movs	r3, #0
 8002038:	e000      	b.n	800203c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800203a:	2302      	movs	r3, #2
  }
}
 800203c:	4618      	mov	r0, r3
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002048:	b480      	push	{r7}
 800204a:	b085      	sub	sp, #20
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002058:	b2db      	uxtb	r3, r3
 800205a:	2b20      	cmp	r3, #32
 800205c:	d139      	bne.n	80020d2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002064:	2b01      	cmp	r3, #1
 8002066:	d101      	bne.n	800206c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002068:	2302      	movs	r3, #2
 800206a:	e033      	b.n	80020d4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2201      	movs	r2, #1
 8002070:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2224      	movs	r2, #36	@ 0x24
 8002078:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f022 0201 	bic.w	r2, r2, #1
 800208a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800209a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	021b      	lsls	r3, r3, #8
 80020a0:	68fa      	ldr	r2, [r7, #12]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f042 0201 	orr.w	r2, r2, #1
 80020bc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2220      	movs	r2, #32
 80020c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80020ce:	2300      	movs	r3, #0
 80020d0:	e000      	b.n	80020d4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80020d2:	2302      	movs	r3, #2
  }
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3714      	adds	r7, #20
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af02      	add	r7, sp, #8
 80020e6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d101      	bne.n	80020f2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e101      	b.n	80022f6 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d106      	bne.n	800210c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f7ff f8da 	bl	80012c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2203      	movs	r2, #3
 8002110:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4618      	mov	r0, r3
 8002120:	f002 fee2 	bl	8004ee8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6818      	ldr	r0, [r3, #0]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	7c1a      	ldrb	r2, [r3, #16]
 800212c:	f88d 2000 	strb.w	r2, [sp]
 8002130:	3304      	adds	r3, #4
 8002132:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002134:	f002 feab 	bl	8004e8e <USB_CoreInit>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d005      	beq.n	800214a <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2202      	movs	r2, #2
 8002142:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e0d5      	b.n	80022f6 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2100      	movs	r1, #0
 8002150:	4618      	mov	r0, r3
 8002152:	f002 feda 	bl	8004f0a <USB_SetCurrentMode>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d005      	beq.n	8002168 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2202      	movs	r2, #2
 8002160:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e0c6      	b.n	80022f6 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002168:	2300      	movs	r3, #0
 800216a:	73fb      	strb	r3, [r7, #15]
 800216c:	e04a      	b.n	8002204 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800216e:	7bfa      	ldrb	r2, [r7, #15]
 8002170:	6879      	ldr	r1, [r7, #4]
 8002172:	4613      	mov	r3, r2
 8002174:	00db      	lsls	r3, r3, #3
 8002176:	4413      	add	r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	440b      	add	r3, r1
 800217c:	3315      	adds	r3, #21
 800217e:	2201      	movs	r2, #1
 8002180:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002182:	7bfa      	ldrb	r2, [r7, #15]
 8002184:	6879      	ldr	r1, [r7, #4]
 8002186:	4613      	mov	r3, r2
 8002188:	00db      	lsls	r3, r3, #3
 800218a:	4413      	add	r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	440b      	add	r3, r1
 8002190:	3314      	adds	r3, #20
 8002192:	7bfa      	ldrb	r2, [r7, #15]
 8002194:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002196:	7bfa      	ldrb	r2, [r7, #15]
 8002198:	7bfb      	ldrb	r3, [r7, #15]
 800219a:	b298      	uxth	r0, r3
 800219c:	6879      	ldr	r1, [r7, #4]
 800219e:	4613      	mov	r3, r2
 80021a0:	00db      	lsls	r3, r3, #3
 80021a2:	4413      	add	r3, r2
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	440b      	add	r3, r1
 80021a8:	332e      	adds	r3, #46	@ 0x2e
 80021aa:	4602      	mov	r2, r0
 80021ac:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80021ae:	7bfa      	ldrb	r2, [r7, #15]
 80021b0:	6879      	ldr	r1, [r7, #4]
 80021b2:	4613      	mov	r3, r2
 80021b4:	00db      	lsls	r3, r3, #3
 80021b6:	4413      	add	r3, r2
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	440b      	add	r3, r1
 80021bc:	3318      	adds	r3, #24
 80021be:	2200      	movs	r2, #0
 80021c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80021c2:	7bfa      	ldrb	r2, [r7, #15]
 80021c4:	6879      	ldr	r1, [r7, #4]
 80021c6:	4613      	mov	r3, r2
 80021c8:	00db      	lsls	r3, r3, #3
 80021ca:	4413      	add	r3, r2
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	440b      	add	r3, r1
 80021d0:	331c      	adds	r3, #28
 80021d2:	2200      	movs	r2, #0
 80021d4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80021d6:	7bfa      	ldrb	r2, [r7, #15]
 80021d8:	6879      	ldr	r1, [r7, #4]
 80021da:	4613      	mov	r3, r2
 80021dc:	00db      	lsls	r3, r3, #3
 80021de:	4413      	add	r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	440b      	add	r3, r1
 80021e4:	3320      	adds	r3, #32
 80021e6:	2200      	movs	r2, #0
 80021e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80021ea:	7bfa      	ldrb	r2, [r7, #15]
 80021ec:	6879      	ldr	r1, [r7, #4]
 80021ee:	4613      	mov	r3, r2
 80021f0:	00db      	lsls	r3, r3, #3
 80021f2:	4413      	add	r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	440b      	add	r3, r1
 80021f8:	3324      	adds	r3, #36	@ 0x24
 80021fa:	2200      	movs	r2, #0
 80021fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021fe:	7bfb      	ldrb	r3, [r7, #15]
 8002200:	3301      	adds	r3, #1
 8002202:	73fb      	strb	r3, [r7, #15]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	791b      	ldrb	r3, [r3, #4]
 8002208:	7bfa      	ldrb	r2, [r7, #15]
 800220a:	429a      	cmp	r2, r3
 800220c:	d3af      	bcc.n	800216e <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800220e:	2300      	movs	r3, #0
 8002210:	73fb      	strb	r3, [r7, #15]
 8002212:	e044      	b.n	800229e <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002214:	7bfa      	ldrb	r2, [r7, #15]
 8002216:	6879      	ldr	r1, [r7, #4]
 8002218:	4613      	mov	r3, r2
 800221a:	00db      	lsls	r3, r3, #3
 800221c:	4413      	add	r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	440b      	add	r3, r1
 8002222:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002226:	2200      	movs	r2, #0
 8002228:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800222a:	7bfa      	ldrb	r2, [r7, #15]
 800222c:	6879      	ldr	r1, [r7, #4]
 800222e:	4613      	mov	r3, r2
 8002230:	00db      	lsls	r3, r3, #3
 8002232:	4413      	add	r3, r2
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	440b      	add	r3, r1
 8002238:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800223c:	7bfa      	ldrb	r2, [r7, #15]
 800223e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002240:	7bfa      	ldrb	r2, [r7, #15]
 8002242:	6879      	ldr	r1, [r7, #4]
 8002244:	4613      	mov	r3, r2
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	4413      	add	r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	440b      	add	r3, r1
 800224e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002252:	2200      	movs	r2, #0
 8002254:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002256:	7bfa      	ldrb	r2, [r7, #15]
 8002258:	6879      	ldr	r1, [r7, #4]
 800225a:	4613      	mov	r3, r2
 800225c:	00db      	lsls	r3, r3, #3
 800225e:	4413      	add	r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	440b      	add	r3, r1
 8002264:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800226c:	7bfa      	ldrb	r2, [r7, #15]
 800226e:	6879      	ldr	r1, [r7, #4]
 8002270:	4613      	mov	r3, r2
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	4413      	add	r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	440b      	add	r3, r1
 800227a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800227e:	2200      	movs	r2, #0
 8002280:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002282:	7bfa      	ldrb	r2, [r7, #15]
 8002284:	6879      	ldr	r1, [r7, #4]
 8002286:	4613      	mov	r3, r2
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	4413      	add	r3, r2
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	440b      	add	r3, r1
 8002290:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002298:	7bfb      	ldrb	r3, [r7, #15]
 800229a:	3301      	adds	r3, #1
 800229c:	73fb      	strb	r3, [r7, #15]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	791b      	ldrb	r3, [r3, #4]
 80022a2:	7bfa      	ldrb	r2, [r7, #15]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d3b5      	bcc.n	8002214 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6818      	ldr	r0, [r3, #0]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	7c1a      	ldrb	r2, [r3, #16]
 80022b0:	f88d 2000 	strb.w	r2, [sp]
 80022b4:	3304      	adds	r3, #4
 80022b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022b8:	f002 fe74 	bl	8004fa4 <USB_DevInit>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d005      	beq.n	80022ce <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2202      	movs	r2, #2
 80022c6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e013      	b.n	80022f6 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	7b1b      	ldrb	r3, [r3, #12]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d102      	bne.n	80022ea <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f000 f80a 	bl	80022fe <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f003 f819 	bl	8005326 <USB_DevDisconnect>

  return HAL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80022fe:	b480      	push	{r7}
 8002300:	b085      	sub	sp, #20
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800232c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002330:	f043 0303 	orr.w	r3, r3, #3
 8002334:	68fa      	ldr	r2, [r7, #12]
 8002336:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3714      	adds	r7, #20
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
	...

08002348 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800234c:	4b05      	ldr	r3, [pc, #20]	@ (8002364 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a04      	ldr	r2, [pc, #16]	@ (8002364 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002352:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002356:	6013      	str	r3, [r2, #0]
}
 8002358:	bf00      	nop
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	40007000 	.word	0x40007000

08002368 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800236c:	4b04      	ldr	r3, [pc, #16]	@ (8002380 <HAL_PWREx_GetVoltageRange+0x18>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002374:	4618      	mov	r0, r3
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	40007000 	.word	0x40007000

08002384 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002392:	d130      	bne.n	80023f6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002394:	4b23      	ldr	r3, [pc, #140]	@ (8002424 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800239c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80023a0:	d038      	beq.n	8002414 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80023a2:	4b20      	ldr	r3, [pc, #128]	@ (8002424 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80023aa:	4a1e      	ldr	r2, [pc, #120]	@ (8002424 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023ac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80023b0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80023b2:	4b1d      	ldr	r3, [pc, #116]	@ (8002428 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2232      	movs	r2, #50	@ 0x32
 80023b8:	fb02 f303 	mul.w	r3, r2, r3
 80023bc:	4a1b      	ldr	r2, [pc, #108]	@ (800242c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80023be:	fba2 2303 	umull	r2, r3, r2, r3
 80023c2:	0c9b      	lsrs	r3, r3, #18
 80023c4:	3301      	adds	r3, #1
 80023c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023c8:	e002      	b.n	80023d0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	3b01      	subs	r3, #1
 80023ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023d0:	4b14      	ldr	r3, [pc, #80]	@ (8002424 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023d2:	695b      	ldr	r3, [r3, #20]
 80023d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023dc:	d102      	bne.n	80023e4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d1f2      	bne.n	80023ca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002424 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023e6:	695b      	ldr	r3, [r3, #20]
 80023e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023f0:	d110      	bne.n	8002414 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e00f      	b.n	8002416 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80023f6:	4b0b      	ldr	r3, [pc, #44]	@ (8002424 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80023fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002402:	d007      	beq.n	8002414 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002404:	4b07      	ldr	r3, [pc, #28]	@ (8002424 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800240c:	4a05      	ldr	r2, [pc, #20]	@ (8002424 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800240e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002412:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3714      	adds	r7, #20
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	40007000 	.word	0x40007000
 8002428:	20000000 	.word	0x20000000
 800242c:	431bde83 	.word	0x431bde83

08002430 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002434:	4b05      	ldr	r3, [pc, #20]	@ (800244c <HAL_PWREx_EnableVddUSB+0x1c>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	4a04      	ldr	r2, [pc, #16]	@ (800244c <HAL_PWREx_EnableVddUSB+0x1c>)
 800243a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800243e:	6053      	str	r3, [r2, #4]
}
 8002440:	bf00      	nop
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	40007000 	.word	0x40007000

08002450 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b086      	sub	sp, #24
 8002454:	af02      	add	r7, sp, #8
 8002456:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002458:	f7ff f8ce 	bl	80015f8 <HAL_GetTick>
 800245c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d101      	bne.n	8002468 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e063      	b.n	8002530 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800246e:	b2db      	uxtb	r3, r3
 8002470:	2b00      	cmp	r3, #0
 8002472:	d10b      	bne.n	800248c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f7fe fdcd 	bl	800101c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002482:	f241 3188 	movw	r1, #5000	@ 0x1388
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 f858 	bl	800253c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	3b01      	subs	r3, #1
 800249c:	021a      	lsls	r2, r3, #8
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	430a      	orrs	r2, r1
 80024a4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024aa:	9300      	str	r3, [sp, #0]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2200      	movs	r2, #0
 80024b0:	2120      	movs	r1, #32
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f000 f850 	bl	8002558 <QSPI_WaitFlagStateUntilTimeout>
 80024b8:	4603      	mov	r3, r0
 80024ba:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80024bc:	7afb      	ldrb	r3, [r7, #11]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d131      	bne.n	8002526 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80024cc:	f023 0310 	bic.w	r3, r3, #16
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	6852      	ldr	r2, [r2, #4]
 80024d4:	0611      	lsls	r1, r2, #24
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	68d2      	ldr	r2, [r2, #12]
 80024da:	4311      	orrs	r1, r2
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	6812      	ldr	r2, [r2, #0]
 80024e0:	430b      	orrs	r3, r1
 80024e2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	685a      	ldr	r2, [r3, #4]
 80024ea:	4b13      	ldr	r3, [pc, #76]	@ (8002538 <HAL_QSPI_Init+0xe8>)
 80024ec:	4013      	ands	r3, r2
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	6912      	ldr	r2, [r2, #16]
 80024f2:	0411      	lsls	r1, r2, #16
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	6952      	ldr	r2, [r2, #20]
 80024f8:	4311      	orrs	r1, r2
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	6992      	ldr	r2, [r2, #24]
 80024fe:	4311      	orrs	r1, r2
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	6812      	ldr	r2, [r2, #0]
 8002504:	430b      	orrs	r3, r1
 8002506:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f042 0201 	orr.w	r2, r2, #1
 8002516:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2201      	movs	r2, #1
 8002522:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 800252e:	7afb      	ldrb	r3, [r7, #11]
}
 8002530:	4618      	mov	r0, r3
 8002532:	3710      	adds	r7, #16
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	ffe0f8fe 	.word	0xffe0f8fe

0800253c <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	683a      	ldr	r2, [r7, #0]
 800254a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800254c:	bf00      	nop
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	603b      	str	r3, [r7, #0]
 8002564:	4613      	mov	r3, r2
 8002566:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002568:	e01a      	b.n	80025a0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002570:	d016      	beq.n	80025a0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002572:	f7ff f841 	bl	80015f8 <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	429a      	cmp	r2, r3
 8002580:	d302      	bcc.n	8002588 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d10b      	bne.n	80025a0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2204      	movs	r2, #4
 800258c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002594:	f043 0201 	orr.w	r2, r3, #1
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e00e      	b.n	80025be <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	689a      	ldr	r2, [r3, #8]
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	4013      	ands	r3, r2
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	bf14      	ite	ne
 80025ae:	2301      	movne	r3, #1
 80025b0:	2300      	moveq	r3, #0
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	461a      	mov	r2, r3
 80025b6:	79fb      	ldrb	r3, [r7, #7]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d1d6      	bne.n	800256a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3710      	adds	r7, #16
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
	...

080025c8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b088      	sub	sp, #32
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e3ca      	b.n	8002d70 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025da:	4b97      	ldr	r3, [pc, #604]	@ (8002838 <HAL_RCC_OscConfig+0x270>)
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f003 030c 	and.w	r3, r3, #12
 80025e2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025e4:	4b94      	ldr	r3, [pc, #592]	@ (8002838 <HAL_RCC_OscConfig+0x270>)
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	f003 0303 	and.w	r3, r3, #3
 80025ec:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0310 	and.w	r3, r3, #16
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	f000 80e4 	beq.w	80027c4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d007      	beq.n	8002612 <HAL_RCC_OscConfig+0x4a>
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	2b0c      	cmp	r3, #12
 8002606:	f040 808b 	bne.w	8002720 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	2b01      	cmp	r3, #1
 800260e:	f040 8087 	bne.w	8002720 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002612:	4b89      	ldr	r3, [pc, #548]	@ (8002838 <HAL_RCC_OscConfig+0x270>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d005      	beq.n	800262a <HAL_RCC_OscConfig+0x62>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	699b      	ldr	r3, [r3, #24]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d101      	bne.n	800262a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e3a2      	b.n	8002d70 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a1a      	ldr	r2, [r3, #32]
 800262e:	4b82      	ldr	r3, [pc, #520]	@ (8002838 <HAL_RCC_OscConfig+0x270>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0308 	and.w	r3, r3, #8
 8002636:	2b00      	cmp	r3, #0
 8002638:	d004      	beq.n	8002644 <HAL_RCC_OscConfig+0x7c>
 800263a:	4b7f      	ldr	r3, [pc, #508]	@ (8002838 <HAL_RCC_OscConfig+0x270>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002642:	e005      	b.n	8002650 <HAL_RCC_OscConfig+0x88>
 8002644:	4b7c      	ldr	r3, [pc, #496]	@ (8002838 <HAL_RCC_OscConfig+0x270>)
 8002646:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800264a:	091b      	lsrs	r3, r3, #4
 800264c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002650:	4293      	cmp	r3, r2
 8002652:	d223      	bcs.n	800269c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a1b      	ldr	r3, [r3, #32]
 8002658:	4618      	mov	r0, r3
 800265a:	f000 fd55 	bl	8003108 <RCC_SetFlashLatencyFromMSIRange>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e383      	b.n	8002d70 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002668:	4b73      	ldr	r3, [pc, #460]	@ (8002838 <HAL_RCC_OscConfig+0x270>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a72      	ldr	r2, [pc, #456]	@ (8002838 <HAL_RCC_OscConfig+0x270>)
 800266e:	f043 0308 	orr.w	r3, r3, #8
 8002672:	6013      	str	r3, [r2, #0]
 8002674:	4b70      	ldr	r3, [pc, #448]	@ (8002838 <HAL_RCC_OscConfig+0x270>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6a1b      	ldr	r3, [r3, #32]
 8002680:	496d      	ldr	r1, [pc, #436]	@ (8002838 <HAL_RCC_OscConfig+0x270>)
 8002682:	4313      	orrs	r3, r2
 8002684:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002686:	4b6c      	ldr	r3, [pc, #432]	@ (8002838 <HAL_RCC_OscConfig+0x270>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	69db      	ldr	r3, [r3, #28]
 8002692:	021b      	lsls	r3, r3, #8
 8002694:	4968      	ldr	r1, [pc, #416]	@ (8002838 <HAL_RCC_OscConfig+0x270>)
 8002696:	4313      	orrs	r3, r2
 8002698:	604b      	str	r3, [r1, #4]
 800269a:	e025      	b.n	80026e8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800269c:	4b66      	ldr	r3, [pc, #408]	@ (8002838 <HAL_RCC_OscConfig+0x270>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a65      	ldr	r2, [pc, #404]	@ (8002838 <HAL_RCC_OscConfig+0x270>)
 80026a2:	f043 0308 	orr.w	r3, r3, #8
 80026a6:	6013      	str	r3, [r2, #0]
 80026a8:	4b63      	ldr	r3, [pc, #396]	@ (8002838 <HAL_RCC_OscConfig+0x270>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a1b      	ldr	r3, [r3, #32]
 80026b4:	4960      	ldr	r1, [pc, #384]	@ (8002838 <HAL_RCC_OscConfig+0x270>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026ba:	4b5f      	ldr	r3, [pc, #380]	@ (8002838 <HAL_RCC_OscConfig+0x270>)
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	69db      	ldr	r3, [r3, #28]
 80026c6:	021b      	lsls	r3, r3, #8
 80026c8:	495b      	ldr	r1, [pc, #364]	@ (8002838 <HAL_RCC_OscConfig+0x270>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d109      	bne.n	80026e8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a1b      	ldr	r3, [r3, #32]
 80026d8:	4618      	mov	r0, r3
 80026da:	f000 fd15 	bl	8003108 <RCC_SetFlashLatencyFromMSIRange>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e343      	b.n	8002d70 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026e8:	f000 fc4a 	bl	8002f80 <HAL_RCC_GetSysClockFreq>
 80026ec:	4602      	mov	r2, r0
 80026ee:	4b52      	ldr	r3, [pc, #328]	@ (8002838 <HAL_RCC_OscConfig+0x270>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	091b      	lsrs	r3, r3, #4
 80026f4:	f003 030f 	and.w	r3, r3, #15
 80026f8:	4950      	ldr	r1, [pc, #320]	@ (800283c <HAL_RCC_OscConfig+0x274>)
 80026fa:	5ccb      	ldrb	r3, [r1, r3]
 80026fc:	f003 031f 	and.w	r3, r3, #31
 8002700:	fa22 f303 	lsr.w	r3, r2, r3
 8002704:	4a4e      	ldr	r2, [pc, #312]	@ (8002840 <HAL_RCC_OscConfig+0x278>)
 8002706:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002708:	4b4e      	ldr	r3, [pc, #312]	@ (8002844 <HAL_RCC_OscConfig+0x27c>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4618      	mov	r0, r3
 800270e:	f7fe ff23 	bl	8001558 <HAL_InitTick>
 8002712:	4603      	mov	r3, r0
 8002714:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002716:	7bfb      	ldrb	r3, [r7, #15]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d052      	beq.n	80027c2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800271c:	7bfb      	ldrb	r3, [r7, #15]
 800271e:	e327      	b.n	8002d70 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d032      	beq.n	800278e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002728:	4b43      	ldr	r3, [pc, #268]	@ (8002838 <HAL_RCC_OscConfig+0x270>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a42      	ldr	r2, [pc, #264]	@ (8002838 <HAL_RCC_OscConfig+0x270>)
 800272e:	f043 0301 	orr.w	r3, r3, #1
 8002732:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002734:	f7fe ff60 	bl	80015f8 <HAL_GetTick>
 8002738:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800273a:	e008      	b.n	800274e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800273c:	f7fe ff5c 	bl	80015f8 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b02      	cmp	r3, #2
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e310      	b.n	8002d70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800274e:	4b3a      	ldr	r3, [pc, #232]	@ (8002838 <HAL_RCC_OscConfig+0x270>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d0f0      	beq.n	800273c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800275a:	4b37      	ldr	r3, [pc, #220]	@ (8002838 <HAL_RCC_OscConfig+0x270>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a36      	ldr	r2, [pc, #216]	@ (8002838 <HAL_RCC_OscConfig+0x270>)
 8002760:	f043 0308 	orr.w	r3, r3, #8
 8002764:	6013      	str	r3, [r2, #0]
 8002766:	4b34      	ldr	r3, [pc, #208]	@ (8002838 <HAL_RCC_OscConfig+0x270>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a1b      	ldr	r3, [r3, #32]
 8002772:	4931      	ldr	r1, [pc, #196]	@ (8002838 <HAL_RCC_OscConfig+0x270>)
 8002774:	4313      	orrs	r3, r2
 8002776:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002778:	4b2f      	ldr	r3, [pc, #188]	@ (8002838 <HAL_RCC_OscConfig+0x270>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	69db      	ldr	r3, [r3, #28]
 8002784:	021b      	lsls	r3, r3, #8
 8002786:	492c      	ldr	r1, [pc, #176]	@ (8002838 <HAL_RCC_OscConfig+0x270>)
 8002788:	4313      	orrs	r3, r2
 800278a:	604b      	str	r3, [r1, #4]
 800278c:	e01a      	b.n	80027c4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800278e:	4b2a      	ldr	r3, [pc, #168]	@ (8002838 <HAL_RCC_OscConfig+0x270>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a29      	ldr	r2, [pc, #164]	@ (8002838 <HAL_RCC_OscConfig+0x270>)
 8002794:	f023 0301 	bic.w	r3, r3, #1
 8002798:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800279a:	f7fe ff2d 	bl	80015f8 <HAL_GetTick>
 800279e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027a0:	e008      	b.n	80027b4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027a2:	f7fe ff29 	bl	80015f8 <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d901      	bls.n	80027b4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e2dd      	b.n	8002d70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027b4:	4b20      	ldr	r3, [pc, #128]	@ (8002838 <HAL_RCC_OscConfig+0x270>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0302 	and.w	r3, r3, #2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d1f0      	bne.n	80027a2 <HAL_RCC_OscConfig+0x1da>
 80027c0:	e000      	b.n	80027c4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027c2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0301 	and.w	r3, r3, #1
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d074      	beq.n	80028ba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	2b08      	cmp	r3, #8
 80027d4:	d005      	beq.n	80027e2 <HAL_RCC_OscConfig+0x21a>
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	2b0c      	cmp	r3, #12
 80027da:	d10e      	bne.n	80027fa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	2b03      	cmp	r3, #3
 80027e0:	d10b      	bne.n	80027fa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027e2:	4b15      	ldr	r3, [pc, #84]	@ (8002838 <HAL_RCC_OscConfig+0x270>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d064      	beq.n	80028b8 <HAL_RCC_OscConfig+0x2f0>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d160      	bne.n	80028b8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e2ba      	b.n	8002d70 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002802:	d106      	bne.n	8002812 <HAL_RCC_OscConfig+0x24a>
 8002804:	4b0c      	ldr	r3, [pc, #48]	@ (8002838 <HAL_RCC_OscConfig+0x270>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a0b      	ldr	r2, [pc, #44]	@ (8002838 <HAL_RCC_OscConfig+0x270>)
 800280a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800280e:	6013      	str	r3, [r2, #0]
 8002810:	e026      	b.n	8002860 <HAL_RCC_OscConfig+0x298>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800281a:	d115      	bne.n	8002848 <HAL_RCC_OscConfig+0x280>
 800281c:	4b06      	ldr	r3, [pc, #24]	@ (8002838 <HAL_RCC_OscConfig+0x270>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a05      	ldr	r2, [pc, #20]	@ (8002838 <HAL_RCC_OscConfig+0x270>)
 8002822:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002826:	6013      	str	r3, [r2, #0]
 8002828:	4b03      	ldr	r3, [pc, #12]	@ (8002838 <HAL_RCC_OscConfig+0x270>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a02      	ldr	r2, [pc, #8]	@ (8002838 <HAL_RCC_OscConfig+0x270>)
 800282e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002832:	6013      	str	r3, [r2, #0]
 8002834:	e014      	b.n	8002860 <HAL_RCC_OscConfig+0x298>
 8002836:	bf00      	nop
 8002838:	40021000 	.word	0x40021000
 800283c:	08008f14 	.word	0x08008f14
 8002840:	20000000 	.word	0x20000000
 8002844:	20000004 	.word	0x20000004
 8002848:	4ba0      	ldr	r3, [pc, #640]	@ (8002acc <HAL_RCC_OscConfig+0x504>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a9f      	ldr	r2, [pc, #636]	@ (8002acc <HAL_RCC_OscConfig+0x504>)
 800284e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002852:	6013      	str	r3, [r2, #0]
 8002854:	4b9d      	ldr	r3, [pc, #628]	@ (8002acc <HAL_RCC_OscConfig+0x504>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a9c      	ldr	r2, [pc, #624]	@ (8002acc <HAL_RCC_OscConfig+0x504>)
 800285a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800285e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d013      	beq.n	8002890 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002868:	f7fe fec6 	bl	80015f8 <HAL_GetTick>
 800286c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800286e:	e008      	b.n	8002882 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002870:	f7fe fec2 	bl	80015f8 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b64      	cmp	r3, #100	@ 0x64
 800287c:	d901      	bls.n	8002882 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e276      	b.n	8002d70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002882:	4b92      	ldr	r3, [pc, #584]	@ (8002acc <HAL_RCC_OscConfig+0x504>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d0f0      	beq.n	8002870 <HAL_RCC_OscConfig+0x2a8>
 800288e:	e014      	b.n	80028ba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002890:	f7fe feb2 	bl	80015f8 <HAL_GetTick>
 8002894:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002896:	e008      	b.n	80028aa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002898:	f7fe feae 	bl	80015f8 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b64      	cmp	r3, #100	@ 0x64
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e262      	b.n	8002d70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028aa:	4b88      	ldr	r3, [pc, #544]	@ (8002acc <HAL_RCC_OscConfig+0x504>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d1f0      	bne.n	8002898 <HAL_RCC_OscConfig+0x2d0>
 80028b6:	e000      	b.n	80028ba <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d060      	beq.n	8002988 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	2b04      	cmp	r3, #4
 80028ca:	d005      	beq.n	80028d8 <HAL_RCC_OscConfig+0x310>
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	2b0c      	cmp	r3, #12
 80028d0:	d119      	bne.n	8002906 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d116      	bne.n	8002906 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028d8:	4b7c      	ldr	r3, [pc, #496]	@ (8002acc <HAL_RCC_OscConfig+0x504>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d005      	beq.n	80028f0 <HAL_RCC_OscConfig+0x328>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d101      	bne.n	80028f0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e23f      	b.n	8002d70 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028f0:	4b76      	ldr	r3, [pc, #472]	@ (8002acc <HAL_RCC_OscConfig+0x504>)
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	691b      	ldr	r3, [r3, #16]
 80028fc:	061b      	lsls	r3, r3, #24
 80028fe:	4973      	ldr	r1, [pc, #460]	@ (8002acc <HAL_RCC_OscConfig+0x504>)
 8002900:	4313      	orrs	r3, r2
 8002902:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002904:	e040      	b.n	8002988 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d023      	beq.n	8002956 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800290e:	4b6f      	ldr	r3, [pc, #444]	@ (8002acc <HAL_RCC_OscConfig+0x504>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a6e      	ldr	r2, [pc, #440]	@ (8002acc <HAL_RCC_OscConfig+0x504>)
 8002914:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002918:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800291a:	f7fe fe6d 	bl	80015f8 <HAL_GetTick>
 800291e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002920:	e008      	b.n	8002934 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002922:	f7fe fe69 	bl	80015f8 <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	2b02      	cmp	r3, #2
 800292e:	d901      	bls.n	8002934 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e21d      	b.n	8002d70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002934:	4b65      	ldr	r3, [pc, #404]	@ (8002acc <HAL_RCC_OscConfig+0x504>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800293c:	2b00      	cmp	r3, #0
 800293e:	d0f0      	beq.n	8002922 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002940:	4b62      	ldr	r3, [pc, #392]	@ (8002acc <HAL_RCC_OscConfig+0x504>)
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	691b      	ldr	r3, [r3, #16]
 800294c:	061b      	lsls	r3, r3, #24
 800294e:	495f      	ldr	r1, [pc, #380]	@ (8002acc <HAL_RCC_OscConfig+0x504>)
 8002950:	4313      	orrs	r3, r2
 8002952:	604b      	str	r3, [r1, #4]
 8002954:	e018      	b.n	8002988 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002956:	4b5d      	ldr	r3, [pc, #372]	@ (8002acc <HAL_RCC_OscConfig+0x504>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a5c      	ldr	r2, [pc, #368]	@ (8002acc <HAL_RCC_OscConfig+0x504>)
 800295c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002960:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002962:	f7fe fe49 	bl	80015f8 <HAL_GetTick>
 8002966:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002968:	e008      	b.n	800297c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800296a:	f7fe fe45 	bl	80015f8 <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	2b02      	cmp	r3, #2
 8002976:	d901      	bls.n	800297c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	e1f9      	b.n	8002d70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800297c:	4b53      	ldr	r3, [pc, #332]	@ (8002acc <HAL_RCC_OscConfig+0x504>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002984:	2b00      	cmp	r3, #0
 8002986:	d1f0      	bne.n	800296a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0308 	and.w	r3, r3, #8
 8002990:	2b00      	cmp	r3, #0
 8002992:	d03c      	beq.n	8002a0e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	695b      	ldr	r3, [r3, #20]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d01c      	beq.n	80029d6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800299c:	4b4b      	ldr	r3, [pc, #300]	@ (8002acc <HAL_RCC_OscConfig+0x504>)
 800299e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029a2:	4a4a      	ldr	r2, [pc, #296]	@ (8002acc <HAL_RCC_OscConfig+0x504>)
 80029a4:	f043 0301 	orr.w	r3, r3, #1
 80029a8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ac:	f7fe fe24 	bl	80015f8 <HAL_GetTick>
 80029b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029b2:	e008      	b.n	80029c6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029b4:	f7fe fe20 	bl	80015f8 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e1d4      	b.n	8002d70 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029c6:	4b41      	ldr	r3, [pc, #260]	@ (8002acc <HAL_RCC_OscConfig+0x504>)
 80029c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029cc:	f003 0302 	and.w	r3, r3, #2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d0ef      	beq.n	80029b4 <HAL_RCC_OscConfig+0x3ec>
 80029d4:	e01b      	b.n	8002a0e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029d6:	4b3d      	ldr	r3, [pc, #244]	@ (8002acc <HAL_RCC_OscConfig+0x504>)
 80029d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029dc:	4a3b      	ldr	r2, [pc, #236]	@ (8002acc <HAL_RCC_OscConfig+0x504>)
 80029de:	f023 0301 	bic.w	r3, r3, #1
 80029e2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e6:	f7fe fe07 	bl	80015f8 <HAL_GetTick>
 80029ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029ec:	e008      	b.n	8002a00 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029ee:	f7fe fe03 	bl	80015f8 <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d901      	bls.n	8002a00 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e1b7      	b.n	8002d70 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a00:	4b32      	ldr	r3, [pc, #200]	@ (8002acc <HAL_RCC_OscConfig+0x504>)
 8002a02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1ef      	bne.n	80029ee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0304 	and.w	r3, r3, #4
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	f000 80a6 	beq.w	8002b68 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002a20:	4b2a      	ldr	r3, [pc, #168]	@ (8002acc <HAL_RCC_OscConfig+0x504>)
 8002a22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d10d      	bne.n	8002a48 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a2c:	4b27      	ldr	r3, [pc, #156]	@ (8002acc <HAL_RCC_OscConfig+0x504>)
 8002a2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a30:	4a26      	ldr	r2, [pc, #152]	@ (8002acc <HAL_RCC_OscConfig+0x504>)
 8002a32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a36:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a38:	4b24      	ldr	r3, [pc, #144]	@ (8002acc <HAL_RCC_OscConfig+0x504>)
 8002a3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a40:	60bb      	str	r3, [r7, #8]
 8002a42:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a44:	2301      	movs	r3, #1
 8002a46:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a48:	4b21      	ldr	r3, [pc, #132]	@ (8002ad0 <HAL_RCC_OscConfig+0x508>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d118      	bne.n	8002a86 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a54:	4b1e      	ldr	r3, [pc, #120]	@ (8002ad0 <HAL_RCC_OscConfig+0x508>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a1d      	ldr	r2, [pc, #116]	@ (8002ad0 <HAL_RCC_OscConfig+0x508>)
 8002a5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a5e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a60:	f7fe fdca 	bl	80015f8 <HAL_GetTick>
 8002a64:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a66:	e008      	b.n	8002a7a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a68:	f7fe fdc6 	bl	80015f8 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e17a      	b.n	8002d70 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a7a:	4b15      	ldr	r3, [pc, #84]	@ (8002ad0 <HAL_RCC_OscConfig+0x508>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d0f0      	beq.n	8002a68 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d108      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x4d8>
 8002a8e:	4b0f      	ldr	r3, [pc, #60]	@ (8002acc <HAL_RCC_OscConfig+0x504>)
 8002a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a94:	4a0d      	ldr	r2, [pc, #52]	@ (8002acc <HAL_RCC_OscConfig+0x504>)
 8002a96:	f043 0301 	orr.w	r3, r3, #1
 8002a9a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a9e:	e029      	b.n	8002af4 <HAL_RCC_OscConfig+0x52c>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	2b05      	cmp	r3, #5
 8002aa6:	d115      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x50c>
 8002aa8:	4b08      	ldr	r3, [pc, #32]	@ (8002acc <HAL_RCC_OscConfig+0x504>)
 8002aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002aae:	4a07      	ldr	r2, [pc, #28]	@ (8002acc <HAL_RCC_OscConfig+0x504>)
 8002ab0:	f043 0304 	orr.w	r3, r3, #4
 8002ab4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ab8:	4b04      	ldr	r3, [pc, #16]	@ (8002acc <HAL_RCC_OscConfig+0x504>)
 8002aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002abe:	4a03      	ldr	r2, [pc, #12]	@ (8002acc <HAL_RCC_OscConfig+0x504>)
 8002ac0:	f043 0301 	orr.w	r3, r3, #1
 8002ac4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ac8:	e014      	b.n	8002af4 <HAL_RCC_OscConfig+0x52c>
 8002aca:	bf00      	nop
 8002acc:	40021000 	.word	0x40021000
 8002ad0:	40007000 	.word	0x40007000
 8002ad4:	4b9c      	ldr	r3, [pc, #624]	@ (8002d48 <HAL_RCC_OscConfig+0x780>)
 8002ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ada:	4a9b      	ldr	r2, [pc, #620]	@ (8002d48 <HAL_RCC_OscConfig+0x780>)
 8002adc:	f023 0301 	bic.w	r3, r3, #1
 8002ae0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ae4:	4b98      	ldr	r3, [pc, #608]	@ (8002d48 <HAL_RCC_OscConfig+0x780>)
 8002ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002aea:	4a97      	ldr	r2, [pc, #604]	@ (8002d48 <HAL_RCC_OscConfig+0x780>)
 8002aec:	f023 0304 	bic.w	r3, r3, #4
 8002af0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d016      	beq.n	8002b2a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002afc:	f7fe fd7c 	bl	80015f8 <HAL_GetTick>
 8002b00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b02:	e00a      	b.n	8002b1a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b04:	f7fe fd78 	bl	80015f8 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e12a      	b.n	8002d70 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b1a:	4b8b      	ldr	r3, [pc, #556]	@ (8002d48 <HAL_RCC_OscConfig+0x780>)
 8002b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b20:	f003 0302 	and.w	r3, r3, #2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d0ed      	beq.n	8002b04 <HAL_RCC_OscConfig+0x53c>
 8002b28:	e015      	b.n	8002b56 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b2a:	f7fe fd65 	bl	80015f8 <HAL_GetTick>
 8002b2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b30:	e00a      	b.n	8002b48 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b32:	f7fe fd61 	bl	80015f8 <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d901      	bls.n	8002b48 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e113      	b.n	8002d70 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b48:	4b7f      	ldr	r3, [pc, #508]	@ (8002d48 <HAL_RCC_OscConfig+0x780>)
 8002b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1ed      	bne.n	8002b32 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b56:	7ffb      	ldrb	r3, [r7, #31]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d105      	bne.n	8002b68 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b5c:	4b7a      	ldr	r3, [pc, #488]	@ (8002d48 <HAL_RCC_OscConfig+0x780>)
 8002b5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b60:	4a79      	ldr	r2, [pc, #484]	@ (8002d48 <HAL_RCC_OscConfig+0x780>)
 8002b62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b66:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	f000 80fe 	beq.w	8002d6e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	f040 80d0 	bne.w	8002d1c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002b7c:	4b72      	ldr	r3, [pc, #456]	@ (8002d48 <HAL_RCC_OscConfig+0x780>)
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	f003 0203 	and.w	r2, r3, #3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d130      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d127      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bac:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d11f      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002bbc:	2a07      	cmp	r2, #7
 8002bbe:	bf14      	ite	ne
 8002bc0:	2201      	movne	r2, #1
 8002bc2:	2200      	moveq	r2, #0
 8002bc4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d113      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bd4:	085b      	lsrs	r3, r3, #1
 8002bd6:	3b01      	subs	r3, #1
 8002bd8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d109      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be8:	085b      	lsrs	r3, r3, #1
 8002bea:	3b01      	subs	r3, #1
 8002bec:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d06e      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	2b0c      	cmp	r3, #12
 8002bf6:	d069      	beq.n	8002ccc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002bf8:	4b53      	ldr	r3, [pc, #332]	@ (8002d48 <HAL_RCC_OscConfig+0x780>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d105      	bne.n	8002c10 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002c04:	4b50      	ldr	r3, [pc, #320]	@ (8002d48 <HAL_RCC_OscConfig+0x780>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d001      	beq.n	8002c14 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e0ad      	b.n	8002d70 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002c14:	4b4c      	ldr	r3, [pc, #304]	@ (8002d48 <HAL_RCC_OscConfig+0x780>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a4b      	ldr	r2, [pc, #300]	@ (8002d48 <HAL_RCC_OscConfig+0x780>)
 8002c1a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c1e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c20:	f7fe fcea 	bl	80015f8 <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c28:	f7fe fce6 	bl	80015f8 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e09a      	b.n	8002d70 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c3a:	4b43      	ldr	r3, [pc, #268]	@ (8002d48 <HAL_RCC_OscConfig+0x780>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1f0      	bne.n	8002c28 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c46:	4b40      	ldr	r3, [pc, #256]	@ (8002d48 <HAL_RCC_OscConfig+0x780>)
 8002c48:	68da      	ldr	r2, [r3, #12]
 8002c4a:	4b40      	ldr	r3, [pc, #256]	@ (8002d4c <HAL_RCC_OscConfig+0x784>)
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002c56:	3a01      	subs	r2, #1
 8002c58:	0112      	lsls	r2, r2, #4
 8002c5a:	4311      	orrs	r1, r2
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002c60:	0212      	lsls	r2, r2, #8
 8002c62:	4311      	orrs	r1, r2
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002c68:	0852      	lsrs	r2, r2, #1
 8002c6a:	3a01      	subs	r2, #1
 8002c6c:	0552      	lsls	r2, r2, #21
 8002c6e:	4311      	orrs	r1, r2
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002c74:	0852      	lsrs	r2, r2, #1
 8002c76:	3a01      	subs	r2, #1
 8002c78:	0652      	lsls	r2, r2, #25
 8002c7a:	4311      	orrs	r1, r2
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002c80:	0912      	lsrs	r2, r2, #4
 8002c82:	0452      	lsls	r2, r2, #17
 8002c84:	430a      	orrs	r2, r1
 8002c86:	4930      	ldr	r1, [pc, #192]	@ (8002d48 <HAL_RCC_OscConfig+0x780>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002c8c:	4b2e      	ldr	r3, [pc, #184]	@ (8002d48 <HAL_RCC_OscConfig+0x780>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a2d      	ldr	r2, [pc, #180]	@ (8002d48 <HAL_RCC_OscConfig+0x780>)
 8002c92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c96:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c98:	4b2b      	ldr	r3, [pc, #172]	@ (8002d48 <HAL_RCC_OscConfig+0x780>)
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	4a2a      	ldr	r2, [pc, #168]	@ (8002d48 <HAL_RCC_OscConfig+0x780>)
 8002c9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ca2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ca4:	f7fe fca8 	bl	80015f8 <HAL_GetTick>
 8002ca8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002caa:	e008      	b.n	8002cbe <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cac:	f7fe fca4 	bl	80015f8 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e058      	b.n	8002d70 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cbe:	4b22      	ldr	r3, [pc, #136]	@ (8002d48 <HAL_RCC_OscConfig+0x780>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d0f0      	beq.n	8002cac <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cca:	e050      	b.n	8002d6e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e04f      	b.n	8002d70 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cd0:	4b1d      	ldr	r3, [pc, #116]	@ (8002d48 <HAL_RCC_OscConfig+0x780>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d148      	bne.n	8002d6e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002cdc:	4b1a      	ldr	r3, [pc, #104]	@ (8002d48 <HAL_RCC_OscConfig+0x780>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a19      	ldr	r2, [pc, #100]	@ (8002d48 <HAL_RCC_OscConfig+0x780>)
 8002ce2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ce6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ce8:	4b17      	ldr	r3, [pc, #92]	@ (8002d48 <HAL_RCC_OscConfig+0x780>)
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	4a16      	ldr	r2, [pc, #88]	@ (8002d48 <HAL_RCC_OscConfig+0x780>)
 8002cee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002cf2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002cf4:	f7fe fc80 	bl	80015f8 <HAL_GetTick>
 8002cf8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cfa:	e008      	b.n	8002d0e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cfc:	f7fe fc7c 	bl	80015f8 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e030      	b.n	8002d70 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d0e:	4b0e      	ldr	r3, [pc, #56]	@ (8002d48 <HAL_RCC_OscConfig+0x780>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d0f0      	beq.n	8002cfc <HAL_RCC_OscConfig+0x734>
 8002d1a:	e028      	b.n	8002d6e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	2b0c      	cmp	r3, #12
 8002d20:	d023      	beq.n	8002d6a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d22:	4b09      	ldr	r3, [pc, #36]	@ (8002d48 <HAL_RCC_OscConfig+0x780>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a08      	ldr	r2, [pc, #32]	@ (8002d48 <HAL_RCC_OscConfig+0x780>)
 8002d28:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d2e:	f7fe fc63 	bl	80015f8 <HAL_GetTick>
 8002d32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d34:	e00c      	b.n	8002d50 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d36:	f7fe fc5f 	bl	80015f8 <HAL_GetTick>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d905      	bls.n	8002d50 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e013      	b.n	8002d70 <HAL_RCC_OscConfig+0x7a8>
 8002d48:	40021000 	.word	0x40021000
 8002d4c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d50:	4b09      	ldr	r3, [pc, #36]	@ (8002d78 <HAL_RCC_OscConfig+0x7b0>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d1ec      	bne.n	8002d36 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002d5c:	4b06      	ldr	r3, [pc, #24]	@ (8002d78 <HAL_RCC_OscConfig+0x7b0>)
 8002d5e:	68da      	ldr	r2, [r3, #12]
 8002d60:	4905      	ldr	r1, [pc, #20]	@ (8002d78 <HAL_RCC_OscConfig+0x7b0>)
 8002d62:	4b06      	ldr	r3, [pc, #24]	@ (8002d7c <HAL_RCC_OscConfig+0x7b4>)
 8002d64:	4013      	ands	r3, r2
 8002d66:	60cb      	str	r3, [r1, #12]
 8002d68:	e001      	b.n	8002d6e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e000      	b.n	8002d70 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002d6e:	2300      	movs	r3, #0
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3720      	adds	r7, #32
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	40021000 	.word	0x40021000
 8002d7c:	feeefffc 	.word	0xfeeefffc

08002d80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d101      	bne.n	8002d94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e0e7      	b.n	8002f64 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d94:	4b75      	ldr	r3, [pc, #468]	@ (8002f6c <HAL_RCC_ClockConfig+0x1ec>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0307 	and.w	r3, r3, #7
 8002d9c:	683a      	ldr	r2, [r7, #0]
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d910      	bls.n	8002dc4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002da2:	4b72      	ldr	r3, [pc, #456]	@ (8002f6c <HAL_RCC_ClockConfig+0x1ec>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f023 0207 	bic.w	r2, r3, #7
 8002daa:	4970      	ldr	r1, [pc, #448]	@ (8002f6c <HAL_RCC_ClockConfig+0x1ec>)
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002db2:	4b6e      	ldr	r3, [pc, #440]	@ (8002f6c <HAL_RCC_ClockConfig+0x1ec>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0307 	and.w	r3, r3, #7
 8002dba:	683a      	ldr	r2, [r7, #0]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d001      	beq.n	8002dc4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e0cf      	b.n	8002f64 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0302 	and.w	r3, r3, #2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d010      	beq.n	8002df2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	689a      	ldr	r2, [r3, #8]
 8002dd4:	4b66      	ldr	r3, [pc, #408]	@ (8002f70 <HAL_RCC_ClockConfig+0x1f0>)
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d908      	bls.n	8002df2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002de0:	4b63      	ldr	r3, [pc, #396]	@ (8002f70 <HAL_RCC_ClockConfig+0x1f0>)
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	4960      	ldr	r1, [pc, #384]	@ (8002f70 <HAL_RCC_ClockConfig+0x1f0>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d04c      	beq.n	8002e98 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	2b03      	cmp	r3, #3
 8002e04:	d107      	bne.n	8002e16 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e06:	4b5a      	ldr	r3, [pc, #360]	@ (8002f70 <HAL_RCC_ClockConfig+0x1f0>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d121      	bne.n	8002e56 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e0a6      	b.n	8002f64 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d107      	bne.n	8002e2e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e1e:	4b54      	ldr	r3, [pc, #336]	@ (8002f70 <HAL_RCC_ClockConfig+0x1f0>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d115      	bne.n	8002e56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e09a      	b.n	8002f64 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d107      	bne.n	8002e46 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e36:	4b4e      	ldr	r3, [pc, #312]	@ (8002f70 <HAL_RCC_ClockConfig+0x1f0>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d109      	bne.n	8002e56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e08e      	b.n	8002f64 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e46:	4b4a      	ldr	r3, [pc, #296]	@ (8002f70 <HAL_RCC_ClockConfig+0x1f0>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d101      	bne.n	8002e56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e086      	b.n	8002f64 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e56:	4b46      	ldr	r3, [pc, #280]	@ (8002f70 <HAL_RCC_ClockConfig+0x1f0>)
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f023 0203 	bic.w	r2, r3, #3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	4943      	ldr	r1, [pc, #268]	@ (8002f70 <HAL_RCC_ClockConfig+0x1f0>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e68:	f7fe fbc6 	bl	80015f8 <HAL_GetTick>
 8002e6c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e6e:	e00a      	b.n	8002e86 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e70:	f7fe fbc2 	bl	80015f8 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d901      	bls.n	8002e86 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e06e      	b.n	8002f64 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e86:	4b3a      	ldr	r3, [pc, #232]	@ (8002f70 <HAL_RCC_ClockConfig+0x1f0>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f003 020c 	and.w	r2, r3, #12
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d1eb      	bne.n	8002e70 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0302 	and.w	r3, r3, #2
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d010      	beq.n	8002ec6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689a      	ldr	r2, [r3, #8]
 8002ea8:	4b31      	ldr	r3, [pc, #196]	@ (8002f70 <HAL_RCC_ClockConfig+0x1f0>)
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d208      	bcs.n	8002ec6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eb4:	4b2e      	ldr	r3, [pc, #184]	@ (8002f70 <HAL_RCC_ClockConfig+0x1f0>)
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	492b      	ldr	r1, [pc, #172]	@ (8002f70 <HAL_RCC_ClockConfig+0x1f0>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ec6:	4b29      	ldr	r3, [pc, #164]	@ (8002f6c <HAL_RCC_ClockConfig+0x1ec>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0307 	and.w	r3, r3, #7
 8002ece:	683a      	ldr	r2, [r7, #0]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d210      	bcs.n	8002ef6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ed4:	4b25      	ldr	r3, [pc, #148]	@ (8002f6c <HAL_RCC_ClockConfig+0x1ec>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f023 0207 	bic.w	r2, r3, #7
 8002edc:	4923      	ldr	r1, [pc, #140]	@ (8002f6c <HAL_RCC_ClockConfig+0x1ec>)
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ee4:	4b21      	ldr	r3, [pc, #132]	@ (8002f6c <HAL_RCC_ClockConfig+0x1ec>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0307 	and.w	r3, r3, #7
 8002eec:	683a      	ldr	r2, [r7, #0]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d001      	beq.n	8002ef6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e036      	b.n	8002f64 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0304 	and.w	r3, r3, #4
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d008      	beq.n	8002f14 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f02:	4b1b      	ldr	r3, [pc, #108]	@ (8002f70 <HAL_RCC_ClockConfig+0x1f0>)
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	4918      	ldr	r1, [pc, #96]	@ (8002f70 <HAL_RCC_ClockConfig+0x1f0>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0308 	and.w	r3, r3, #8
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d009      	beq.n	8002f34 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f20:	4b13      	ldr	r3, [pc, #76]	@ (8002f70 <HAL_RCC_ClockConfig+0x1f0>)
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	00db      	lsls	r3, r3, #3
 8002f2e:	4910      	ldr	r1, [pc, #64]	@ (8002f70 <HAL_RCC_ClockConfig+0x1f0>)
 8002f30:	4313      	orrs	r3, r2
 8002f32:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f34:	f000 f824 	bl	8002f80 <HAL_RCC_GetSysClockFreq>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8002f70 <HAL_RCC_ClockConfig+0x1f0>)
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	091b      	lsrs	r3, r3, #4
 8002f40:	f003 030f 	and.w	r3, r3, #15
 8002f44:	490b      	ldr	r1, [pc, #44]	@ (8002f74 <HAL_RCC_ClockConfig+0x1f4>)
 8002f46:	5ccb      	ldrb	r3, [r1, r3]
 8002f48:	f003 031f 	and.w	r3, r3, #31
 8002f4c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f50:	4a09      	ldr	r2, [pc, #36]	@ (8002f78 <HAL_RCC_ClockConfig+0x1f8>)
 8002f52:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002f54:	4b09      	ldr	r3, [pc, #36]	@ (8002f7c <HAL_RCC_ClockConfig+0x1fc>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7fe fafd 	bl	8001558 <HAL_InitTick>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	72fb      	strb	r3, [r7, #11]

  return status;
 8002f62:	7afb      	ldrb	r3, [r7, #11]
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3710      	adds	r7, #16
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	40022000 	.word	0x40022000
 8002f70:	40021000 	.word	0x40021000
 8002f74:	08008f14 	.word	0x08008f14
 8002f78:	20000000 	.word	0x20000000
 8002f7c:	20000004 	.word	0x20000004

08002f80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b089      	sub	sp, #36	@ 0x24
 8002f84:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002f86:	2300      	movs	r3, #0
 8002f88:	61fb      	str	r3, [r7, #28]
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f8e:	4b3e      	ldr	r3, [pc, #248]	@ (8003088 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f003 030c 	and.w	r3, r3, #12
 8002f96:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f98:	4b3b      	ldr	r3, [pc, #236]	@ (8003088 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	f003 0303 	and.w	r3, r3, #3
 8002fa0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d005      	beq.n	8002fb4 <HAL_RCC_GetSysClockFreq+0x34>
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	2b0c      	cmp	r3, #12
 8002fac:	d121      	bne.n	8002ff2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d11e      	bne.n	8002ff2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002fb4:	4b34      	ldr	r3, [pc, #208]	@ (8003088 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0308 	and.w	r3, r3, #8
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d107      	bne.n	8002fd0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002fc0:	4b31      	ldr	r3, [pc, #196]	@ (8003088 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fc6:	0a1b      	lsrs	r3, r3, #8
 8002fc8:	f003 030f 	and.w	r3, r3, #15
 8002fcc:	61fb      	str	r3, [r7, #28]
 8002fce:	e005      	b.n	8002fdc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002fd0:	4b2d      	ldr	r3, [pc, #180]	@ (8003088 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	091b      	lsrs	r3, r3, #4
 8002fd6:	f003 030f 	and.w	r3, r3, #15
 8002fda:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002fdc:	4a2b      	ldr	r2, [pc, #172]	@ (800308c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fe4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d10d      	bne.n	8003008 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ff0:	e00a      	b.n	8003008 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	2b04      	cmp	r3, #4
 8002ff6:	d102      	bne.n	8002ffe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002ff8:	4b25      	ldr	r3, [pc, #148]	@ (8003090 <HAL_RCC_GetSysClockFreq+0x110>)
 8002ffa:	61bb      	str	r3, [r7, #24]
 8002ffc:	e004      	b.n	8003008 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	2b08      	cmp	r3, #8
 8003002:	d101      	bne.n	8003008 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003004:	4b23      	ldr	r3, [pc, #140]	@ (8003094 <HAL_RCC_GetSysClockFreq+0x114>)
 8003006:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	2b0c      	cmp	r3, #12
 800300c:	d134      	bne.n	8003078 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800300e:	4b1e      	ldr	r3, [pc, #120]	@ (8003088 <HAL_RCC_GetSysClockFreq+0x108>)
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	f003 0303 	and.w	r3, r3, #3
 8003016:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	2b02      	cmp	r3, #2
 800301c:	d003      	beq.n	8003026 <HAL_RCC_GetSysClockFreq+0xa6>
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	2b03      	cmp	r3, #3
 8003022:	d003      	beq.n	800302c <HAL_RCC_GetSysClockFreq+0xac>
 8003024:	e005      	b.n	8003032 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003026:	4b1a      	ldr	r3, [pc, #104]	@ (8003090 <HAL_RCC_GetSysClockFreq+0x110>)
 8003028:	617b      	str	r3, [r7, #20]
      break;
 800302a:	e005      	b.n	8003038 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800302c:	4b19      	ldr	r3, [pc, #100]	@ (8003094 <HAL_RCC_GetSysClockFreq+0x114>)
 800302e:	617b      	str	r3, [r7, #20]
      break;
 8003030:	e002      	b.n	8003038 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	617b      	str	r3, [r7, #20]
      break;
 8003036:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003038:	4b13      	ldr	r3, [pc, #76]	@ (8003088 <HAL_RCC_GetSysClockFreq+0x108>)
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	091b      	lsrs	r3, r3, #4
 800303e:	f003 0307 	and.w	r3, r3, #7
 8003042:	3301      	adds	r3, #1
 8003044:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003046:	4b10      	ldr	r3, [pc, #64]	@ (8003088 <HAL_RCC_GetSysClockFreq+0x108>)
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	0a1b      	lsrs	r3, r3, #8
 800304c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003050:	697a      	ldr	r2, [r7, #20]
 8003052:	fb03 f202 	mul.w	r2, r3, r2
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	fbb2 f3f3 	udiv	r3, r2, r3
 800305c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800305e:	4b0a      	ldr	r3, [pc, #40]	@ (8003088 <HAL_RCC_GetSysClockFreq+0x108>)
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	0e5b      	lsrs	r3, r3, #25
 8003064:	f003 0303 	and.w	r3, r3, #3
 8003068:	3301      	adds	r3, #1
 800306a:	005b      	lsls	r3, r3, #1
 800306c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800306e:	697a      	ldr	r2, [r7, #20]
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	fbb2 f3f3 	udiv	r3, r2, r3
 8003076:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003078:	69bb      	ldr	r3, [r7, #24]
}
 800307a:	4618      	mov	r0, r3
 800307c:	3724      	adds	r7, #36	@ 0x24
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	40021000 	.word	0x40021000
 800308c:	08008f2c 	.word	0x08008f2c
 8003090:	00f42400 	.word	0x00f42400
 8003094:	007a1200 	.word	0x007a1200

08003098 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003098:	b480      	push	{r7}
 800309a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800309c:	4b03      	ldr	r3, [pc, #12]	@ (80030ac <HAL_RCC_GetHCLKFreq+0x14>)
 800309e:	681b      	ldr	r3, [r3, #0]
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop
 80030ac:	20000000 	.word	0x20000000

080030b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80030b4:	f7ff fff0 	bl	8003098 <HAL_RCC_GetHCLKFreq>
 80030b8:	4602      	mov	r2, r0
 80030ba:	4b06      	ldr	r3, [pc, #24]	@ (80030d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	0a1b      	lsrs	r3, r3, #8
 80030c0:	f003 0307 	and.w	r3, r3, #7
 80030c4:	4904      	ldr	r1, [pc, #16]	@ (80030d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80030c6:	5ccb      	ldrb	r3, [r1, r3]
 80030c8:	f003 031f 	and.w	r3, r3, #31
 80030cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	40021000 	.word	0x40021000
 80030d8:	08008f24 	.word	0x08008f24

080030dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80030e0:	f7ff ffda 	bl	8003098 <HAL_RCC_GetHCLKFreq>
 80030e4:	4602      	mov	r2, r0
 80030e6:	4b06      	ldr	r3, [pc, #24]	@ (8003100 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	0adb      	lsrs	r3, r3, #11
 80030ec:	f003 0307 	and.w	r3, r3, #7
 80030f0:	4904      	ldr	r1, [pc, #16]	@ (8003104 <HAL_RCC_GetPCLK2Freq+0x28>)
 80030f2:	5ccb      	ldrb	r3, [r1, r3]
 80030f4:	f003 031f 	and.w	r3, r3, #31
 80030f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	40021000 	.word	0x40021000
 8003104:	08008f24 	.word	0x08008f24

08003108 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b086      	sub	sp, #24
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003110:	2300      	movs	r3, #0
 8003112:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003114:	4b2a      	ldr	r3, [pc, #168]	@ (80031c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003116:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003118:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d003      	beq.n	8003128 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003120:	f7ff f922 	bl	8002368 <HAL_PWREx_GetVoltageRange>
 8003124:	6178      	str	r0, [r7, #20]
 8003126:	e014      	b.n	8003152 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003128:	4b25      	ldr	r3, [pc, #148]	@ (80031c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800312a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800312c:	4a24      	ldr	r2, [pc, #144]	@ (80031c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800312e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003132:	6593      	str	r3, [r2, #88]	@ 0x58
 8003134:	4b22      	ldr	r3, [pc, #136]	@ (80031c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003136:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003138:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800313c:	60fb      	str	r3, [r7, #12]
 800313e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003140:	f7ff f912 	bl	8002368 <HAL_PWREx_GetVoltageRange>
 8003144:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003146:	4b1e      	ldr	r3, [pc, #120]	@ (80031c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003148:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800314a:	4a1d      	ldr	r2, [pc, #116]	@ (80031c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800314c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003150:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003158:	d10b      	bne.n	8003172 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2b80      	cmp	r3, #128	@ 0x80
 800315e:	d919      	bls.n	8003194 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2ba0      	cmp	r3, #160	@ 0xa0
 8003164:	d902      	bls.n	800316c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003166:	2302      	movs	r3, #2
 8003168:	613b      	str	r3, [r7, #16]
 800316a:	e013      	b.n	8003194 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800316c:	2301      	movs	r3, #1
 800316e:	613b      	str	r3, [r7, #16]
 8003170:	e010      	b.n	8003194 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2b80      	cmp	r3, #128	@ 0x80
 8003176:	d902      	bls.n	800317e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003178:	2303      	movs	r3, #3
 800317a:	613b      	str	r3, [r7, #16]
 800317c:	e00a      	b.n	8003194 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2b80      	cmp	r3, #128	@ 0x80
 8003182:	d102      	bne.n	800318a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003184:	2302      	movs	r3, #2
 8003186:	613b      	str	r3, [r7, #16]
 8003188:	e004      	b.n	8003194 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2b70      	cmp	r3, #112	@ 0x70
 800318e:	d101      	bne.n	8003194 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003190:	2301      	movs	r3, #1
 8003192:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003194:	4b0b      	ldr	r3, [pc, #44]	@ (80031c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f023 0207 	bic.w	r2, r3, #7
 800319c:	4909      	ldr	r1, [pc, #36]	@ (80031c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80031a4:	4b07      	ldr	r3, [pc, #28]	@ (80031c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0307 	and.w	r3, r3, #7
 80031ac:	693a      	ldr	r2, [r7, #16]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d001      	beq.n	80031b6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e000      	b.n	80031b8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80031b6:	2300      	movs	r3, #0
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3718      	adds	r7, #24
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	40021000 	.word	0x40021000
 80031c4:	40022000 	.word	0x40022000

080031c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b086      	sub	sp, #24
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80031d0:	2300      	movs	r3, #0
 80031d2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80031d4:	2300      	movs	r3, #0
 80031d6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d041      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80031e8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80031ec:	d02a      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80031ee:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80031f2:	d824      	bhi.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80031f4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80031f8:	d008      	beq.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x44>
 80031fa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80031fe:	d81e      	bhi.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00a      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003204:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003208:	d010      	beq.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800320a:	e018      	b.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800320c:	4b86      	ldr	r3, [pc, #536]	@ (8003428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	4a85      	ldr	r2, [pc, #532]	@ (8003428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003212:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003216:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003218:	e015      	b.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	3304      	adds	r3, #4
 800321e:	2100      	movs	r1, #0
 8003220:	4618      	mov	r0, r3
 8003222:	f000 facb 	bl	80037bc <RCCEx_PLLSAI1_Config>
 8003226:	4603      	mov	r3, r0
 8003228:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800322a:	e00c      	b.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	3320      	adds	r3, #32
 8003230:	2100      	movs	r1, #0
 8003232:	4618      	mov	r0, r3
 8003234:	f000 fbb6 	bl	80039a4 <RCCEx_PLLSAI2_Config>
 8003238:	4603      	mov	r3, r0
 800323a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800323c:	e003      	b.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	74fb      	strb	r3, [r7, #19]
      break;
 8003242:	e000      	b.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003244:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003246:	7cfb      	ldrb	r3, [r7, #19]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d10b      	bne.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800324c:	4b76      	ldr	r3, [pc, #472]	@ (8003428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800324e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003252:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800325a:	4973      	ldr	r1, [pc, #460]	@ (8003428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800325c:	4313      	orrs	r3, r2
 800325e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003262:	e001      	b.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003264:	7cfb      	ldrb	r3, [r7, #19]
 8003266:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d041      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003278:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800327c:	d02a      	beq.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800327e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003282:	d824      	bhi.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003284:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003288:	d008      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800328a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800328e:	d81e      	bhi.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003290:	2b00      	cmp	r3, #0
 8003292:	d00a      	beq.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003294:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003298:	d010      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800329a:	e018      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800329c:	4b62      	ldr	r3, [pc, #392]	@ (8003428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	4a61      	ldr	r2, [pc, #388]	@ (8003428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032a6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032a8:	e015      	b.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	3304      	adds	r3, #4
 80032ae:	2100      	movs	r1, #0
 80032b0:	4618      	mov	r0, r3
 80032b2:	f000 fa83 	bl	80037bc <RCCEx_PLLSAI1_Config>
 80032b6:	4603      	mov	r3, r0
 80032b8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032ba:	e00c      	b.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	3320      	adds	r3, #32
 80032c0:	2100      	movs	r1, #0
 80032c2:	4618      	mov	r0, r3
 80032c4:	f000 fb6e 	bl	80039a4 <RCCEx_PLLSAI2_Config>
 80032c8:	4603      	mov	r3, r0
 80032ca:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032cc:	e003      	b.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	74fb      	strb	r3, [r7, #19]
      break;
 80032d2:	e000      	b.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80032d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032d6:	7cfb      	ldrb	r3, [r7, #19]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d10b      	bne.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80032dc:	4b52      	ldr	r3, [pc, #328]	@ (8003428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032e2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80032ea:	494f      	ldr	r1, [pc, #316]	@ (8003428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80032f2:	e001      	b.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032f4:	7cfb      	ldrb	r3, [r7, #19]
 80032f6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003300:	2b00      	cmp	r3, #0
 8003302:	f000 80a0 	beq.w	8003446 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003306:	2300      	movs	r3, #0
 8003308:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800330a:	4b47      	ldr	r3, [pc, #284]	@ (8003428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800330c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800330e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003316:	2301      	movs	r3, #1
 8003318:	e000      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800331a:	2300      	movs	r3, #0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d00d      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003320:	4b41      	ldr	r3, [pc, #260]	@ (8003428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003322:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003324:	4a40      	ldr	r2, [pc, #256]	@ (8003428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003326:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800332a:	6593      	str	r3, [r2, #88]	@ 0x58
 800332c:	4b3e      	ldr	r3, [pc, #248]	@ (8003428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800332e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003330:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003334:	60bb      	str	r3, [r7, #8]
 8003336:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003338:	2301      	movs	r3, #1
 800333a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800333c:	4b3b      	ldr	r3, [pc, #236]	@ (800342c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a3a      	ldr	r2, [pc, #232]	@ (800342c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003342:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003346:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003348:	f7fe f956 	bl	80015f8 <HAL_GetTick>
 800334c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800334e:	e009      	b.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003350:	f7fe f952 	bl	80015f8 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b02      	cmp	r3, #2
 800335c:	d902      	bls.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	74fb      	strb	r3, [r7, #19]
        break;
 8003362:	e005      	b.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003364:	4b31      	ldr	r3, [pc, #196]	@ (800342c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800336c:	2b00      	cmp	r3, #0
 800336e:	d0ef      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003370:	7cfb      	ldrb	r3, [r7, #19]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d15c      	bne.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003376:	4b2c      	ldr	r3, [pc, #176]	@ (8003428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003378:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800337c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003380:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d01f      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800338e:	697a      	ldr	r2, [r7, #20]
 8003390:	429a      	cmp	r2, r3
 8003392:	d019      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003394:	4b24      	ldr	r3, [pc, #144]	@ (8003428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003396:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800339a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800339e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80033a0:	4b21      	ldr	r3, [pc, #132]	@ (8003428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033a6:	4a20      	ldr	r2, [pc, #128]	@ (8003428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033b0:	4b1d      	ldr	r3, [pc, #116]	@ (8003428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033b6:	4a1c      	ldr	r2, [pc, #112]	@ (8003428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80033c0:	4a19      	ldr	r2, [pc, #100]	@ (8003428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	f003 0301 	and.w	r3, r3, #1
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d016      	beq.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d2:	f7fe f911 	bl	80015f8 <HAL_GetTick>
 80033d6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033d8:	e00b      	b.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033da:	f7fe f90d 	bl	80015f8 <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d902      	bls.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80033ec:	2303      	movs	r3, #3
 80033ee:	74fb      	strb	r3, [r7, #19]
            break;
 80033f0:	e006      	b.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033f8:	f003 0302 	and.w	r3, r3, #2
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d0ec      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003400:	7cfb      	ldrb	r3, [r7, #19]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d10c      	bne.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003406:	4b08      	ldr	r3, [pc, #32]	@ (8003428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003408:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800340c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003416:	4904      	ldr	r1, [pc, #16]	@ (8003428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003418:	4313      	orrs	r3, r2
 800341a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800341e:	e009      	b.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003420:	7cfb      	ldrb	r3, [r7, #19]
 8003422:	74bb      	strb	r3, [r7, #18]
 8003424:	e006      	b.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003426:	bf00      	nop
 8003428:	40021000 	.word	0x40021000
 800342c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003430:	7cfb      	ldrb	r3, [r7, #19]
 8003432:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003434:	7c7b      	ldrb	r3, [r7, #17]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d105      	bne.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800343a:	4b9e      	ldr	r3, [pc, #632]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800343c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800343e:	4a9d      	ldr	r2, [pc, #628]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003440:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003444:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	2b00      	cmp	r3, #0
 8003450:	d00a      	beq.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003452:	4b98      	ldr	r3, [pc, #608]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003454:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003458:	f023 0203 	bic.w	r2, r3, #3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003460:	4994      	ldr	r1, [pc, #592]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003462:	4313      	orrs	r3, r2
 8003464:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0302 	and.w	r3, r3, #2
 8003470:	2b00      	cmp	r3, #0
 8003472:	d00a      	beq.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003474:	4b8f      	ldr	r3, [pc, #572]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003476:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800347a:	f023 020c 	bic.w	r2, r3, #12
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003482:	498c      	ldr	r1, [pc, #560]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003484:	4313      	orrs	r3, r2
 8003486:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0304 	and.w	r3, r3, #4
 8003492:	2b00      	cmp	r3, #0
 8003494:	d00a      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003496:	4b87      	ldr	r3, [pc, #540]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003498:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800349c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a4:	4983      	ldr	r1, [pc, #524]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0308 	and.w	r3, r3, #8
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d00a      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80034b8:	4b7e      	ldr	r3, [pc, #504]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034be:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034c6:	497b      	ldr	r1, [pc, #492]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034c8:	4313      	orrs	r3, r2
 80034ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0310 	and.w	r3, r3, #16
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00a      	beq.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80034da:	4b76      	ldr	r3, [pc, #472]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034e8:	4972      	ldr	r1, [pc, #456]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ea:	4313      	orrs	r3, r2
 80034ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0320 	and.w	r3, r3, #32
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d00a      	beq.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80034fc:	4b6d      	ldr	r3, [pc, #436]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003502:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800350a:	496a      	ldr	r1, [pc, #424]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800350c:	4313      	orrs	r3, r2
 800350e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800351a:	2b00      	cmp	r3, #0
 800351c:	d00a      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800351e:	4b65      	ldr	r3, [pc, #404]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003520:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003524:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800352c:	4961      	ldr	r1, [pc, #388]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800352e:	4313      	orrs	r3, r2
 8003530:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800353c:	2b00      	cmp	r3, #0
 800353e:	d00a      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003540:	4b5c      	ldr	r3, [pc, #368]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003542:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003546:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800354e:	4959      	ldr	r1, [pc, #356]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003550:	4313      	orrs	r3, r2
 8003552:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00a      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003562:	4b54      	ldr	r3, [pc, #336]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003564:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003568:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003570:	4950      	ldr	r1, [pc, #320]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003572:	4313      	orrs	r3, r2
 8003574:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003580:	2b00      	cmp	r3, #0
 8003582:	d00a      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003584:	4b4b      	ldr	r3, [pc, #300]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003586:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800358a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003592:	4948      	ldr	r1, [pc, #288]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003594:	4313      	orrs	r3, r2
 8003596:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00a      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035a6:	4b43      	ldr	r3, [pc, #268]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035ac:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035b4:	493f      	ldr	r1, [pc, #252]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d028      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035c8:	4b3a      	ldr	r3, [pc, #232]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035ce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035d6:	4937      	ldr	r1, [pc, #220]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80035e6:	d106      	bne.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035e8:	4b32      	ldr	r3, [pc, #200]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	4a31      	ldr	r2, [pc, #196]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80035f2:	60d3      	str	r3, [r2, #12]
 80035f4:	e011      	b.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035fa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80035fe:	d10c      	bne.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	3304      	adds	r3, #4
 8003604:	2101      	movs	r1, #1
 8003606:	4618      	mov	r0, r3
 8003608:	f000 f8d8 	bl	80037bc <RCCEx_PLLSAI1_Config>
 800360c:	4603      	mov	r3, r0
 800360e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003610:	7cfb      	ldrb	r3, [r7, #19]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d001      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003616:	7cfb      	ldrb	r3, [r7, #19]
 8003618:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d028      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003626:	4b23      	ldr	r3, [pc, #140]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003628:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800362c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003634:	491f      	ldr	r1, [pc, #124]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003636:	4313      	orrs	r3, r2
 8003638:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003640:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003644:	d106      	bne.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003646:	4b1b      	ldr	r3, [pc, #108]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	4a1a      	ldr	r2, [pc, #104]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800364c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003650:	60d3      	str	r3, [r2, #12]
 8003652:	e011      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003658:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800365c:	d10c      	bne.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	3304      	adds	r3, #4
 8003662:	2101      	movs	r1, #1
 8003664:	4618      	mov	r0, r3
 8003666:	f000 f8a9 	bl	80037bc <RCCEx_PLLSAI1_Config>
 800366a:	4603      	mov	r3, r0
 800366c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800366e:	7cfb      	ldrb	r3, [r7, #19]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d001      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003674:	7cfb      	ldrb	r3, [r7, #19]
 8003676:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d02b      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003684:	4b0b      	ldr	r3, [pc, #44]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800368a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003692:	4908      	ldr	r1, [pc, #32]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003694:	4313      	orrs	r3, r2
 8003696:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800369e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80036a2:	d109      	bne.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036a4:	4b03      	ldr	r3, [pc, #12]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	4a02      	ldr	r2, [pc, #8]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80036ae:	60d3      	str	r3, [r2, #12]
 80036b0:	e014      	b.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x514>
 80036b2:	bf00      	nop
 80036b4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036bc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80036c0:	d10c      	bne.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	3304      	adds	r3, #4
 80036c6:	2101      	movs	r1, #1
 80036c8:	4618      	mov	r0, r3
 80036ca:	f000 f877 	bl	80037bc <RCCEx_PLLSAI1_Config>
 80036ce:	4603      	mov	r3, r0
 80036d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036d2:	7cfb      	ldrb	r3, [r7, #19]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d001      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80036d8:	7cfb      	ldrb	r3, [r7, #19]
 80036da:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d02f      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80036e8:	4b2b      	ldr	r3, [pc, #172]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036ee:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80036f6:	4928      	ldr	r1, [pc, #160]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036f8:	4313      	orrs	r3, r2
 80036fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003702:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003706:	d10d      	bne.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	3304      	adds	r3, #4
 800370c:	2102      	movs	r1, #2
 800370e:	4618      	mov	r0, r3
 8003710:	f000 f854 	bl	80037bc <RCCEx_PLLSAI1_Config>
 8003714:	4603      	mov	r3, r0
 8003716:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003718:	7cfb      	ldrb	r3, [r7, #19]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d014      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800371e:	7cfb      	ldrb	r3, [r7, #19]
 8003720:	74bb      	strb	r3, [r7, #18]
 8003722:	e011      	b.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003728:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800372c:	d10c      	bne.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	3320      	adds	r3, #32
 8003732:	2102      	movs	r1, #2
 8003734:	4618      	mov	r0, r3
 8003736:	f000 f935 	bl	80039a4 <RCCEx_PLLSAI2_Config>
 800373a:	4603      	mov	r3, r0
 800373c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800373e:	7cfb      	ldrb	r3, [r7, #19]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d001      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003744:	7cfb      	ldrb	r3, [r7, #19]
 8003746:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d00a      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003754:	4b10      	ldr	r3, [pc, #64]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003756:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800375a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003762:	490d      	ldr	r1, [pc, #52]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003764:	4313      	orrs	r3, r2
 8003766:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d00b      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003776:	4b08      	ldr	r3, [pc, #32]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003778:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800377c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003786:	4904      	ldr	r1, [pc, #16]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003788:	4313      	orrs	r3, r2
 800378a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800378e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003790:	4618      	mov	r0, r3
 8003792:	3718      	adds	r7, #24
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	40021000 	.word	0x40021000

0800379c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800379c:	b480      	push	{r7}
 800379e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80037a0:	4b05      	ldr	r3, [pc, #20]	@ (80037b8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a04      	ldr	r2, [pc, #16]	@ (80037b8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80037a6:	f043 0304 	orr.w	r3, r3, #4
 80037aa:	6013      	str	r3, [r2, #0]
}
 80037ac:	bf00      	nop
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	40021000 	.word	0x40021000

080037bc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037c6:	2300      	movs	r3, #0
 80037c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80037ca:	4b75      	ldr	r3, [pc, #468]	@ (80039a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	f003 0303 	and.w	r3, r3, #3
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d018      	beq.n	8003808 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80037d6:	4b72      	ldr	r3, [pc, #456]	@ (80039a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	f003 0203 	and.w	r2, r3, #3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d10d      	bne.n	8003802 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
       ||
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d009      	beq.n	8003802 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80037ee:	4b6c      	ldr	r3, [pc, #432]	@ (80039a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	091b      	lsrs	r3, r3, #4
 80037f4:	f003 0307 	and.w	r3, r3, #7
 80037f8:	1c5a      	adds	r2, r3, #1
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
       ||
 80037fe:	429a      	cmp	r2, r3
 8003800:	d047      	beq.n	8003892 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	73fb      	strb	r3, [r7, #15]
 8003806:	e044      	b.n	8003892 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2b03      	cmp	r3, #3
 800380e:	d018      	beq.n	8003842 <RCCEx_PLLSAI1_Config+0x86>
 8003810:	2b03      	cmp	r3, #3
 8003812:	d825      	bhi.n	8003860 <RCCEx_PLLSAI1_Config+0xa4>
 8003814:	2b01      	cmp	r3, #1
 8003816:	d002      	beq.n	800381e <RCCEx_PLLSAI1_Config+0x62>
 8003818:	2b02      	cmp	r3, #2
 800381a:	d009      	beq.n	8003830 <RCCEx_PLLSAI1_Config+0x74>
 800381c:	e020      	b.n	8003860 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800381e:	4b60      	ldr	r3, [pc, #384]	@ (80039a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	2b00      	cmp	r3, #0
 8003828:	d11d      	bne.n	8003866 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800382e:	e01a      	b.n	8003866 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003830:	4b5b      	ldr	r3, [pc, #364]	@ (80039a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003838:	2b00      	cmp	r3, #0
 800383a:	d116      	bne.n	800386a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003840:	e013      	b.n	800386a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003842:	4b57      	ldr	r3, [pc, #348]	@ (80039a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d10f      	bne.n	800386e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800384e:	4b54      	ldr	r3, [pc, #336]	@ (80039a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d109      	bne.n	800386e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800385e:	e006      	b.n	800386e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	73fb      	strb	r3, [r7, #15]
      break;
 8003864:	e004      	b.n	8003870 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003866:	bf00      	nop
 8003868:	e002      	b.n	8003870 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800386a:	bf00      	nop
 800386c:	e000      	b.n	8003870 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800386e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003870:	7bfb      	ldrb	r3, [r7, #15]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d10d      	bne.n	8003892 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003876:	4b4a      	ldr	r3, [pc, #296]	@ (80039a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6819      	ldr	r1, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	3b01      	subs	r3, #1
 8003888:	011b      	lsls	r3, r3, #4
 800388a:	430b      	orrs	r3, r1
 800388c:	4944      	ldr	r1, [pc, #272]	@ (80039a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800388e:	4313      	orrs	r3, r2
 8003890:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003892:	7bfb      	ldrb	r3, [r7, #15]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d17d      	bne.n	8003994 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003898:	4b41      	ldr	r3, [pc, #260]	@ (80039a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a40      	ldr	r2, [pc, #256]	@ (80039a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800389e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80038a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038a4:	f7fd fea8 	bl	80015f8 <HAL_GetTick>
 80038a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80038aa:	e009      	b.n	80038c0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038ac:	f7fd fea4 	bl	80015f8 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d902      	bls.n	80038c0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	73fb      	strb	r3, [r7, #15]
        break;
 80038be:	e005      	b.n	80038cc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80038c0:	4b37      	ldr	r3, [pc, #220]	@ (80039a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d1ef      	bne.n	80038ac <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80038cc:	7bfb      	ldrb	r3, [r7, #15]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d160      	bne.n	8003994 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d111      	bne.n	80038fc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038d8:	4b31      	ldr	r3, [pc, #196]	@ (80039a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038da:	691b      	ldr	r3, [r3, #16]
 80038dc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80038e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	6892      	ldr	r2, [r2, #8]
 80038e8:	0211      	lsls	r1, r2, #8
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	68d2      	ldr	r2, [r2, #12]
 80038ee:	0912      	lsrs	r2, r2, #4
 80038f0:	0452      	lsls	r2, r2, #17
 80038f2:	430a      	orrs	r2, r1
 80038f4:	492a      	ldr	r1, [pc, #168]	@ (80039a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	610b      	str	r3, [r1, #16]
 80038fa:	e027      	b.n	800394c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d112      	bne.n	8003928 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003902:	4b27      	ldr	r3, [pc, #156]	@ (80039a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800390a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	6892      	ldr	r2, [r2, #8]
 8003912:	0211      	lsls	r1, r2, #8
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	6912      	ldr	r2, [r2, #16]
 8003918:	0852      	lsrs	r2, r2, #1
 800391a:	3a01      	subs	r2, #1
 800391c:	0552      	lsls	r2, r2, #21
 800391e:	430a      	orrs	r2, r1
 8003920:	491f      	ldr	r1, [pc, #124]	@ (80039a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003922:	4313      	orrs	r3, r2
 8003924:	610b      	str	r3, [r1, #16]
 8003926:	e011      	b.n	800394c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003928:	4b1d      	ldr	r3, [pc, #116]	@ (80039a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800392a:	691b      	ldr	r3, [r3, #16]
 800392c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003930:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	6892      	ldr	r2, [r2, #8]
 8003938:	0211      	lsls	r1, r2, #8
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	6952      	ldr	r2, [r2, #20]
 800393e:	0852      	lsrs	r2, r2, #1
 8003940:	3a01      	subs	r2, #1
 8003942:	0652      	lsls	r2, r2, #25
 8003944:	430a      	orrs	r2, r1
 8003946:	4916      	ldr	r1, [pc, #88]	@ (80039a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003948:	4313      	orrs	r3, r2
 800394a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800394c:	4b14      	ldr	r3, [pc, #80]	@ (80039a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a13      	ldr	r2, [pc, #76]	@ (80039a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003952:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003956:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003958:	f7fd fe4e 	bl	80015f8 <HAL_GetTick>
 800395c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800395e:	e009      	b.n	8003974 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003960:	f7fd fe4a 	bl	80015f8 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	2b02      	cmp	r3, #2
 800396c:	d902      	bls.n	8003974 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	73fb      	strb	r3, [r7, #15]
          break;
 8003972:	e005      	b.n	8003980 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003974:	4b0a      	ldr	r3, [pc, #40]	@ (80039a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d0ef      	beq.n	8003960 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003980:	7bfb      	ldrb	r3, [r7, #15]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d106      	bne.n	8003994 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003986:	4b06      	ldr	r3, [pc, #24]	@ (80039a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003988:	691a      	ldr	r2, [r3, #16]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	699b      	ldr	r3, [r3, #24]
 800398e:	4904      	ldr	r1, [pc, #16]	@ (80039a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003990:	4313      	orrs	r3, r2
 8003992:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003994:	7bfb      	ldrb	r3, [r7, #15]
}
 8003996:	4618      	mov	r0, r3
 8003998:	3710      	adds	r7, #16
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	40021000 	.word	0x40021000

080039a4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039ae:	2300      	movs	r3, #0
 80039b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80039b2:	4b6a      	ldr	r3, [pc, #424]	@ (8003b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	f003 0303 	and.w	r3, r3, #3
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d018      	beq.n	80039f0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80039be:	4b67      	ldr	r3, [pc, #412]	@ (8003b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	f003 0203 	and.w	r2, r3, #3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d10d      	bne.n	80039ea <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
       ||
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d009      	beq.n	80039ea <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80039d6:	4b61      	ldr	r3, [pc, #388]	@ (8003b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	091b      	lsrs	r3, r3, #4
 80039dc:	f003 0307 	and.w	r3, r3, #7
 80039e0:	1c5a      	adds	r2, r3, #1
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
       ||
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d047      	beq.n	8003a7a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	73fb      	strb	r3, [r7, #15]
 80039ee:	e044      	b.n	8003a7a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2b03      	cmp	r3, #3
 80039f6:	d018      	beq.n	8003a2a <RCCEx_PLLSAI2_Config+0x86>
 80039f8:	2b03      	cmp	r3, #3
 80039fa:	d825      	bhi.n	8003a48 <RCCEx_PLLSAI2_Config+0xa4>
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d002      	beq.n	8003a06 <RCCEx_PLLSAI2_Config+0x62>
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d009      	beq.n	8003a18 <RCCEx_PLLSAI2_Config+0x74>
 8003a04:	e020      	b.n	8003a48 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a06:	4b55      	ldr	r3, [pc, #340]	@ (8003b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0302 	and.w	r3, r3, #2
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d11d      	bne.n	8003a4e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a16:	e01a      	b.n	8003a4e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a18:	4b50      	ldr	r3, [pc, #320]	@ (8003b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d116      	bne.n	8003a52 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a28:	e013      	b.n	8003a52 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a2a:	4b4c      	ldr	r3, [pc, #304]	@ (8003b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d10f      	bne.n	8003a56 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a36:	4b49      	ldr	r3, [pc, #292]	@ (8003b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d109      	bne.n	8003a56 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a46:	e006      	b.n	8003a56 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	73fb      	strb	r3, [r7, #15]
      break;
 8003a4c:	e004      	b.n	8003a58 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a4e:	bf00      	nop
 8003a50:	e002      	b.n	8003a58 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a52:	bf00      	nop
 8003a54:	e000      	b.n	8003a58 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a56:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a58:	7bfb      	ldrb	r3, [r7, #15]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d10d      	bne.n	8003a7a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a5e:	4b3f      	ldr	r3, [pc, #252]	@ (8003b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6819      	ldr	r1, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	011b      	lsls	r3, r3, #4
 8003a72:	430b      	orrs	r3, r1
 8003a74:	4939      	ldr	r1, [pc, #228]	@ (8003b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a7a:	7bfb      	ldrb	r3, [r7, #15]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d167      	bne.n	8003b50 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003a80:	4b36      	ldr	r3, [pc, #216]	@ (8003b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a35      	ldr	r2, [pc, #212]	@ (8003b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a8c:	f7fd fdb4 	bl	80015f8 <HAL_GetTick>
 8003a90:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003a92:	e009      	b.n	8003aa8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a94:	f7fd fdb0 	bl	80015f8 <HAL_GetTick>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d902      	bls.n	8003aa8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	73fb      	strb	r3, [r7, #15]
        break;
 8003aa6:	e005      	b.n	8003ab4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003aa8:	4b2c      	ldr	r3, [pc, #176]	@ (8003b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d1ef      	bne.n	8003a94 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003ab4:	7bfb      	ldrb	r3, [r7, #15]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d14a      	bne.n	8003b50 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d111      	bne.n	8003ae4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ac0:	4b26      	ldr	r3, [pc, #152]	@ (8003b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ac2:	695b      	ldr	r3, [r3, #20]
 8003ac4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003ac8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	6892      	ldr	r2, [r2, #8]
 8003ad0:	0211      	lsls	r1, r2, #8
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	68d2      	ldr	r2, [r2, #12]
 8003ad6:	0912      	lsrs	r2, r2, #4
 8003ad8:	0452      	lsls	r2, r2, #17
 8003ada:	430a      	orrs	r2, r1
 8003adc:	491f      	ldr	r1, [pc, #124]	@ (8003b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	614b      	str	r3, [r1, #20]
 8003ae2:	e011      	b.n	8003b08 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ae4:	4b1d      	ldr	r3, [pc, #116]	@ (8003b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ae6:	695b      	ldr	r3, [r3, #20]
 8003ae8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003aec:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	6892      	ldr	r2, [r2, #8]
 8003af4:	0211      	lsls	r1, r2, #8
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	6912      	ldr	r2, [r2, #16]
 8003afa:	0852      	lsrs	r2, r2, #1
 8003afc:	3a01      	subs	r2, #1
 8003afe:	0652      	lsls	r2, r2, #25
 8003b00:	430a      	orrs	r2, r1
 8003b02:	4916      	ldr	r1, [pc, #88]	@ (8003b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b04:	4313      	orrs	r3, r2
 8003b06:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003b08:	4b14      	ldr	r3, [pc, #80]	@ (8003b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a13      	ldr	r2, [pc, #76]	@ (8003b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b12:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b14:	f7fd fd70 	bl	80015f8 <HAL_GetTick>
 8003b18:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b1a:	e009      	b.n	8003b30 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b1c:	f7fd fd6c 	bl	80015f8 <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d902      	bls.n	8003b30 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	73fb      	strb	r3, [r7, #15]
          break;
 8003b2e:	e005      	b.n	8003b3c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b30:	4b0a      	ldr	r3, [pc, #40]	@ (8003b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d0ef      	beq.n	8003b1c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003b3c:	7bfb      	ldrb	r3, [r7, #15]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d106      	bne.n	8003b50 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003b42:	4b06      	ldr	r3, [pc, #24]	@ (8003b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b44:	695a      	ldr	r2, [r3, #20]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	695b      	ldr	r3, [r3, #20]
 8003b4a:	4904      	ldr	r1, [pc, #16]	@ (8003b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3710      	adds	r7, #16
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	40021000 	.word	0x40021000

08003b60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d101      	bne.n	8003b72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e095      	b.n	8003c9e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d108      	bne.n	8003b8c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b82:	d009      	beq.n	8003b98 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	61da      	str	r2, [r3, #28]
 8003b8a:	e005      	b.n	8003b98 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d106      	bne.n	8003bb8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f7fd fa76 	bl	80010a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2202      	movs	r2, #2
 8003bbc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003bce:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003bd8:	d902      	bls.n	8003be0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	60fb      	str	r3, [r7, #12]
 8003bde:	e002      	b.n	8003be6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003be0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003be4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003bee:	d007      	beq.n	8003c00 <HAL_SPI_Init+0xa0>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003bf8:	d002      	beq.n	8003c00 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003c10:	431a      	orrs	r2, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	f003 0302 	and.w	r3, r3, #2
 8003c1a:	431a      	orrs	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	695b      	ldr	r3, [r3, #20]
 8003c20:	f003 0301 	and.w	r3, r3, #1
 8003c24:	431a      	orrs	r2, r3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	699b      	ldr	r3, [r3, #24]
 8003c2a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c2e:	431a      	orrs	r2, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	69db      	ldr	r3, [r3, #28]
 8003c34:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003c38:	431a      	orrs	r2, r3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a1b      	ldr	r3, [r3, #32]
 8003c3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c42:	ea42 0103 	orr.w	r1, r2, r3
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c4a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	430a      	orrs	r2, r1
 8003c54:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	699b      	ldr	r3, [r3, #24]
 8003c5a:	0c1b      	lsrs	r3, r3, #16
 8003c5c:	f003 0204 	and.w	r2, r3, #4
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c64:	f003 0310 	and.w	r3, r3, #16
 8003c68:	431a      	orrs	r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c6e:	f003 0308 	and.w	r3, r3, #8
 8003c72:	431a      	orrs	r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003c7c:	ea42 0103 	orr.w	r1, r2, r3
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	430a      	orrs	r2, r1
 8003c8c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3710      	adds	r7, #16
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}

08003ca6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ca6:	b580      	push	{r7, lr}
 8003ca8:	b082      	sub	sp, #8
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d101      	bne.n	8003cb8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e049      	b.n	8003d4c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d106      	bne.n	8003cd2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f7fd fa2d 	bl	800112c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2202      	movs	r2, #2
 8003cd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	3304      	adds	r3, #4
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	4610      	mov	r0, r2
 8003ce6:	f000 fa65 	bl	80041b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2201      	movs	r2, #1
 8003cee:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2201      	movs	r2, #1
 8003d06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2201      	movs	r2, #1
 8003d16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2201      	movs	r2, #1
 8003d26:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2201      	movs	r2, #1
 8003d36:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2201      	movs	r2, #1
 8003d46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d4a:	2300      	movs	r3, #0
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3708      	adds	r7, #8
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b085      	sub	sp, #20
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d001      	beq.n	8003d6c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e047      	b.n	8003dfc <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2202      	movs	r2, #2
 8003d70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a23      	ldr	r2, [pc, #140]	@ (8003e08 <HAL_TIM_Base_Start+0xb4>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d01d      	beq.n	8003dba <HAL_TIM_Base_Start+0x66>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d86:	d018      	beq.n	8003dba <HAL_TIM_Base_Start+0x66>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a1f      	ldr	r2, [pc, #124]	@ (8003e0c <HAL_TIM_Base_Start+0xb8>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d013      	beq.n	8003dba <HAL_TIM_Base_Start+0x66>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a1e      	ldr	r2, [pc, #120]	@ (8003e10 <HAL_TIM_Base_Start+0xbc>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d00e      	beq.n	8003dba <HAL_TIM_Base_Start+0x66>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a1c      	ldr	r2, [pc, #112]	@ (8003e14 <HAL_TIM_Base_Start+0xc0>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d009      	beq.n	8003dba <HAL_TIM_Base_Start+0x66>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a1b      	ldr	r2, [pc, #108]	@ (8003e18 <HAL_TIM_Base_Start+0xc4>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d004      	beq.n	8003dba <HAL_TIM_Base_Start+0x66>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a19      	ldr	r2, [pc, #100]	@ (8003e1c <HAL_TIM_Base_Start+0xc8>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d115      	bne.n	8003de6 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	689a      	ldr	r2, [r3, #8]
 8003dc0:	4b17      	ldr	r3, [pc, #92]	@ (8003e20 <HAL_TIM_Base_Start+0xcc>)
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2b06      	cmp	r3, #6
 8003dca:	d015      	beq.n	8003df8 <HAL_TIM_Base_Start+0xa4>
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003dd2:	d011      	beq.n	8003df8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f042 0201 	orr.w	r2, r2, #1
 8003de2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003de4:	e008      	b.n	8003df8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f042 0201 	orr.w	r2, r2, #1
 8003df4:	601a      	str	r2, [r3, #0]
 8003df6:	e000      	b.n	8003dfa <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003df8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003dfa:	2300      	movs	r3, #0
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3714      	adds	r7, #20
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr
 8003e08:	40012c00 	.word	0x40012c00
 8003e0c:	40000400 	.word	0x40000400
 8003e10:	40000800 	.word	0x40000800
 8003e14:	40000c00 	.word	0x40000c00
 8003e18:	40013400 	.word	0x40013400
 8003e1c:	40014000 	.word	0x40014000
 8003e20:	00010007 	.word	0x00010007

08003e24 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	6a1a      	ldr	r2, [r3, #32]
 8003e32:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003e36:	4013      	ands	r3, r2
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d10f      	bne.n	8003e5c <HAL_TIM_Base_Stop+0x38>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	6a1a      	ldr	r2, [r3, #32]
 8003e42:	f240 4344 	movw	r3, #1092	@ 0x444
 8003e46:	4013      	ands	r3, r2
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d107      	bne.n	8003e5c <HAL_TIM_Base_Stop+0x38>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f022 0201 	bic.w	r2, r2, #1
 8003e5a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8003e64:	2300      	movs	r3, #0
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	370c      	adds	r7, #12
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
	...

08003e74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b085      	sub	sp, #20
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d001      	beq.n	8003e8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e04f      	b.n	8003f2c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2202      	movs	r2, #2
 8003e90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	68da      	ldr	r2, [r3, #12]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f042 0201 	orr.w	r2, r2, #1
 8003ea2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a23      	ldr	r2, [pc, #140]	@ (8003f38 <HAL_TIM_Base_Start_IT+0xc4>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d01d      	beq.n	8003eea <HAL_TIM_Base_Start_IT+0x76>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003eb6:	d018      	beq.n	8003eea <HAL_TIM_Base_Start_IT+0x76>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a1f      	ldr	r2, [pc, #124]	@ (8003f3c <HAL_TIM_Base_Start_IT+0xc8>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d013      	beq.n	8003eea <HAL_TIM_Base_Start_IT+0x76>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a1e      	ldr	r2, [pc, #120]	@ (8003f40 <HAL_TIM_Base_Start_IT+0xcc>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d00e      	beq.n	8003eea <HAL_TIM_Base_Start_IT+0x76>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a1c      	ldr	r2, [pc, #112]	@ (8003f44 <HAL_TIM_Base_Start_IT+0xd0>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d009      	beq.n	8003eea <HAL_TIM_Base_Start_IT+0x76>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a1b      	ldr	r2, [pc, #108]	@ (8003f48 <HAL_TIM_Base_Start_IT+0xd4>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d004      	beq.n	8003eea <HAL_TIM_Base_Start_IT+0x76>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a19      	ldr	r2, [pc, #100]	@ (8003f4c <HAL_TIM_Base_Start_IT+0xd8>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d115      	bne.n	8003f16 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	689a      	ldr	r2, [r3, #8]
 8003ef0:	4b17      	ldr	r3, [pc, #92]	@ (8003f50 <HAL_TIM_Base_Start_IT+0xdc>)
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2b06      	cmp	r3, #6
 8003efa:	d015      	beq.n	8003f28 <HAL_TIM_Base_Start_IT+0xb4>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f02:	d011      	beq.n	8003f28 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f042 0201 	orr.w	r2, r2, #1
 8003f12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f14:	e008      	b.n	8003f28 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f042 0201 	orr.w	r2, r2, #1
 8003f24:	601a      	str	r2, [r3, #0]
 8003f26:	e000      	b.n	8003f2a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f28:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f2a:	2300      	movs	r3, #0
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3714      	adds	r7, #20
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr
 8003f38:	40012c00 	.word	0x40012c00
 8003f3c:	40000400 	.word	0x40000400
 8003f40:	40000800 	.word	0x40000800
 8003f44:	40000c00 	.word	0x40000c00
 8003f48:	40013400 	.word	0x40013400
 8003f4c:	40014000 	.word	0x40014000
 8003f50:	00010007 	.word	0x00010007

08003f54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	f003 0302 	and.w	r3, r3, #2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d020      	beq.n	8003fb8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f003 0302 	and.w	r3, r3, #2
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d01b      	beq.n	8003fb8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f06f 0202 	mvn.w	r2, #2
 8003f88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	699b      	ldr	r3, [r3, #24]
 8003f96:	f003 0303 	and.w	r3, r3, #3
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d003      	beq.n	8003fa6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 f8e9 	bl	8004176 <HAL_TIM_IC_CaptureCallback>
 8003fa4:	e005      	b.n	8003fb2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 f8db 	bl	8004162 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f000 f8ec 	bl	800418a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	f003 0304 	and.w	r3, r3, #4
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d020      	beq.n	8004004 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f003 0304 	and.w	r3, r3, #4
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d01b      	beq.n	8004004 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f06f 0204 	mvn.w	r2, #4
 8003fd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2202      	movs	r2, #2
 8003fda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	699b      	ldr	r3, [r3, #24]
 8003fe2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d003      	beq.n	8003ff2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 f8c3 	bl	8004176 <HAL_TIM_IC_CaptureCallback>
 8003ff0:	e005      	b.n	8003ffe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f000 f8b5 	bl	8004162 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f000 f8c6 	bl	800418a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	f003 0308 	and.w	r3, r3, #8
 800400a:	2b00      	cmp	r3, #0
 800400c:	d020      	beq.n	8004050 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f003 0308 	and.w	r3, r3, #8
 8004014:	2b00      	cmp	r3, #0
 8004016:	d01b      	beq.n	8004050 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f06f 0208 	mvn.w	r2, #8
 8004020:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2204      	movs	r2, #4
 8004026:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	69db      	ldr	r3, [r3, #28]
 800402e:	f003 0303 	and.w	r3, r3, #3
 8004032:	2b00      	cmp	r3, #0
 8004034:	d003      	beq.n	800403e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 f89d 	bl	8004176 <HAL_TIM_IC_CaptureCallback>
 800403c:	e005      	b.n	800404a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f000 f88f 	bl	8004162 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f000 f8a0 	bl	800418a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	f003 0310 	and.w	r3, r3, #16
 8004056:	2b00      	cmp	r3, #0
 8004058:	d020      	beq.n	800409c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f003 0310 	and.w	r3, r3, #16
 8004060:	2b00      	cmp	r3, #0
 8004062:	d01b      	beq.n	800409c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f06f 0210 	mvn.w	r2, #16
 800406c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2208      	movs	r2, #8
 8004072:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	69db      	ldr	r3, [r3, #28]
 800407a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800407e:	2b00      	cmp	r3, #0
 8004080:	d003      	beq.n	800408a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 f877 	bl	8004176 <HAL_TIM_IC_CaptureCallback>
 8004088:	e005      	b.n	8004096 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f000 f869 	bl	8004162 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f000 f87a 	bl	800418a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	f003 0301 	and.w	r3, r3, #1
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00c      	beq.n	80040c0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f003 0301 	and.w	r3, r3, #1
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d007      	beq.n	80040c0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f06f 0201 	mvn.w	r2, #1
 80040b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f7fc fa00 	bl	80004c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d104      	bne.n	80040d4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d00c      	beq.n	80040ee <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d007      	beq.n	80040ee <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80040e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f000 f99b 	bl	8004424 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d00c      	beq.n	8004112 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d007      	beq.n	8004112 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800410a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f000 f993 	bl	8004438 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004118:	2b00      	cmp	r3, #0
 800411a:	d00c      	beq.n	8004136 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004122:	2b00      	cmp	r3, #0
 8004124:	d007      	beq.n	8004136 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800412e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f000 f834 	bl	800419e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	f003 0320 	and.w	r3, r3, #32
 800413c:	2b00      	cmp	r3, #0
 800413e:	d00c      	beq.n	800415a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f003 0320 	and.w	r3, r3, #32
 8004146:	2b00      	cmp	r3, #0
 8004148:	d007      	beq.n	800415a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f06f 0220 	mvn.w	r2, #32
 8004152:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f000 f95b 	bl	8004410 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800415a:	bf00      	nop
 800415c:	3710      	adds	r7, #16
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}

08004162 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004162:	b480      	push	{r7}
 8004164:	b083      	sub	sp, #12
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800416a:	bf00      	nop
 800416c:	370c      	adds	r7, #12
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr

08004176 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004176:	b480      	push	{r7}
 8004178:	b083      	sub	sp, #12
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800417e:	bf00      	nop
 8004180:	370c      	adds	r7, #12
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr

0800418a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800418a:	b480      	push	{r7}
 800418c:	b083      	sub	sp, #12
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004192:	bf00      	nop
 8004194:	370c      	adds	r7, #12
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr

0800419e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800419e:	b480      	push	{r7}
 80041a0:	b083      	sub	sp, #12
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041a6:	bf00      	nop
 80041a8:	370c      	adds	r7, #12
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
	...

080041b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b085      	sub	sp, #20
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a46      	ldr	r2, [pc, #280]	@ (80042e0 <TIM_Base_SetConfig+0x12c>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d013      	beq.n	80041f4 <TIM_Base_SetConfig+0x40>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041d2:	d00f      	beq.n	80041f4 <TIM_Base_SetConfig+0x40>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	4a43      	ldr	r2, [pc, #268]	@ (80042e4 <TIM_Base_SetConfig+0x130>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d00b      	beq.n	80041f4 <TIM_Base_SetConfig+0x40>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4a42      	ldr	r2, [pc, #264]	@ (80042e8 <TIM_Base_SetConfig+0x134>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d007      	beq.n	80041f4 <TIM_Base_SetConfig+0x40>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4a41      	ldr	r2, [pc, #260]	@ (80042ec <TIM_Base_SetConfig+0x138>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d003      	beq.n	80041f4 <TIM_Base_SetConfig+0x40>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4a40      	ldr	r2, [pc, #256]	@ (80042f0 <TIM_Base_SetConfig+0x13c>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d108      	bne.n	8004206 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	68fa      	ldr	r2, [r7, #12]
 8004202:	4313      	orrs	r3, r2
 8004204:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a35      	ldr	r2, [pc, #212]	@ (80042e0 <TIM_Base_SetConfig+0x12c>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d01f      	beq.n	800424e <TIM_Base_SetConfig+0x9a>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004214:	d01b      	beq.n	800424e <TIM_Base_SetConfig+0x9a>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a32      	ldr	r2, [pc, #200]	@ (80042e4 <TIM_Base_SetConfig+0x130>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d017      	beq.n	800424e <TIM_Base_SetConfig+0x9a>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a31      	ldr	r2, [pc, #196]	@ (80042e8 <TIM_Base_SetConfig+0x134>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d013      	beq.n	800424e <TIM_Base_SetConfig+0x9a>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a30      	ldr	r2, [pc, #192]	@ (80042ec <TIM_Base_SetConfig+0x138>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d00f      	beq.n	800424e <TIM_Base_SetConfig+0x9a>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a2f      	ldr	r2, [pc, #188]	@ (80042f0 <TIM_Base_SetConfig+0x13c>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d00b      	beq.n	800424e <TIM_Base_SetConfig+0x9a>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a2e      	ldr	r2, [pc, #184]	@ (80042f4 <TIM_Base_SetConfig+0x140>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d007      	beq.n	800424e <TIM_Base_SetConfig+0x9a>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a2d      	ldr	r2, [pc, #180]	@ (80042f8 <TIM_Base_SetConfig+0x144>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d003      	beq.n	800424e <TIM_Base_SetConfig+0x9a>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a2c      	ldr	r2, [pc, #176]	@ (80042fc <TIM_Base_SetConfig+0x148>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d108      	bne.n	8004260 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004254:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	68fa      	ldr	r2, [r7, #12]
 800425c:	4313      	orrs	r3, r2
 800425e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	695b      	ldr	r3, [r3, #20]
 800426a:	4313      	orrs	r3, r2
 800426c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	68fa      	ldr	r2, [r7, #12]
 8004272:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	689a      	ldr	r2, [r3, #8]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	4a16      	ldr	r2, [pc, #88]	@ (80042e0 <TIM_Base_SetConfig+0x12c>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d00f      	beq.n	80042ac <TIM_Base_SetConfig+0xf8>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4a18      	ldr	r2, [pc, #96]	@ (80042f0 <TIM_Base_SetConfig+0x13c>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d00b      	beq.n	80042ac <TIM_Base_SetConfig+0xf8>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4a17      	ldr	r2, [pc, #92]	@ (80042f4 <TIM_Base_SetConfig+0x140>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d007      	beq.n	80042ac <TIM_Base_SetConfig+0xf8>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a16      	ldr	r2, [pc, #88]	@ (80042f8 <TIM_Base_SetConfig+0x144>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d003      	beq.n	80042ac <TIM_Base_SetConfig+0xf8>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a15      	ldr	r2, [pc, #84]	@ (80042fc <TIM_Base_SetConfig+0x148>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d103      	bne.n	80042b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	691a      	ldr	r2, [r3, #16]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	691b      	ldr	r3, [r3, #16]
 80042be:	f003 0301 	and.w	r3, r3, #1
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d105      	bne.n	80042d2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	f023 0201 	bic.w	r2, r3, #1
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	611a      	str	r2, [r3, #16]
  }
}
 80042d2:	bf00      	nop
 80042d4:	3714      	adds	r7, #20
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	40012c00 	.word	0x40012c00
 80042e4:	40000400 	.word	0x40000400
 80042e8:	40000800 	.word	0x40000800
 80042ec:	40000c00 	.word	0x40000c00
 80042f0:	40013400 	.word	0x40013400
 80042f4:	40014000 	.word	0x40014000
 80042f8:	40014400 	.word	0x40014400
 80042fc:	40014800 	.word	0x40014800

08004300 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004300:	b480      	push	{r7}
 8004302:	b085      	sub	sp, #20
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004310:	2b01      	cmp	r3, #1
 8004312:	d101      	bne.n	8004318 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004314:	2302      	movs	r3, #2
 8004316:	e068      	b.n	80043ea <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2202      	movs	r2, #2
 8004324:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a2e      	ldr	r2, [pc, #184]	@ (80043f8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d004      	beq.n	800434c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a2d      	ldr	r2, [pc, #180]	@ (80043fc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d108      	bne.n	800435e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004352:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	68fa      	ldr	r2, [r7, #12]
 800435a:	4313      	orrs	r3, r2
 800435c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004364:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	4313      	orrs	r3, r2
 800436e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a1e      	ldr	r2, [pc, #120]	@ (80043f8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d01d      	beq.n	80043be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800438a:	d018      	beq.n	80043be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a1b      	ldr	r2, [pc, #108]	@ (8004400 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d013      	beq.n	80043be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a1a      	ldr	r2, [pc, #104]	@ (8004404 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d00e      	beq.n	80043be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a18      	ldr	r2, [pc, #96]	@ (8004408 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d009      	beq.n	80043be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a13      	ldr	r2, [pc, #76]	@ (80043fc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d004      	beq.n	80043be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a14      	ldr	r2, [pc, #80]	@ (800440c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d10c      	bne.n	80043d8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80043c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	68ba      	ldr	r2, [r7, #8]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68ba      	ldr	r2, [r7, #8]
 80043d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3714      	adds	r7, #20
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	40012c00 	.word	0x40012c00
 80043fc:	40013400 	.word	0x40013400
 8004400:	40000400 	.word	0x40000400
 8004404:	40000800 	.word	0x40000800
 8004408:	40000c00 	.word	0x40000c00
 800440c:	40014000 	.word	0x40014000

08004410 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004418:	bf00      	nop
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800442c:	bf00      	nop
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004440:	bf00      	nop
 8004442:	370c      	adds	r7, #12
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr

0800444c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d101      	bne.n	800445e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e040      	b.n	80044e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004462:	2b00      	cmp	r3, #0
 8004464:	d106      	bne.n	8004474 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f7fc fe82 	bl	8001178 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2224      	movs	r2, #36	@ 0x24
 8004478:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f022 0201 	bic.w	r2, r2, #1
 8004488:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800448e:	2b00      	cmp	r3, #0
 8004490:	d002      	beq.n	8004498 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 fae0 	bl	8004a58 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f000 f825 	bl	80044e8 <UART_SetConfig>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d101      	bne.n	80044a8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e01b      	b.n	80044e0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	685a      	ldr	r2, [r3, #4]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80044b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	689a      	ldr	r2, [r3, #8]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80044c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f042 0201 	orr.w	r2, r2, #1
 80044d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f000 fb5f 	bl	8004b9c <UART_CheckIdleState>
 80044de:	4603      	mov	r3, r0
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3708      	adds	r7, #8
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044ec:	b08a      	sub	sp, #40	@ 0x28
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80044f2:	2300      	movs	r3, #0
 80044f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	689a      	ldr	r2, [r3, #8]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	431a      	orrs	r2, r3
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	695b      	ldr	r3, [r3, #20]
 8004506:	431a      	orrs	r2, r3
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	69db      	ldr	r3, [r3, #28]
 800450c:	4313      	orrs	r3, r2
 800450e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	4ba4      	ldr	r3, [pc, #656]	@ (80047a8 <UART_SetConfig+0x2c0>)
 8004518:	4013      	ands	r3, r2
 800451a:	68fa      	ldr	r2, [r7, #12]
 800451c:	6812      	ldr	r2, [r2, #0]
 800451e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004520:	430b      	orrs	r3, r1
 8004522:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	68da      	ldr	r2, [r3, #12]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	430a      	orrs	r2, r1
 8004538:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	699b      	ldr	r3, [r3, #24]
 800453e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a99      	ldr	r2, [pc, #612]	@ (80047ac <UART_SetConfig+0x2c4>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d004      	beq.n	8004554 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6a1b      	ldr	r3, [r3, #32]
 800454e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004550:	4313      	orrs	r3, r2
 8004552:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004564:	430a      	orrs	r2, r1
 8004566:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a90      	ldr	r2, [pc, #576]	@ (80047b0 <UART_SetConfig+0x2c8>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d126      	bne.n	80045c0 <UART_SetConfig+0xd8>
 8004572:	4b90      	ldr	r3, [pc, #576]	@ (80047b4 <UART_SetConfig+0x2cc>)
 8004574:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004578:	f003 0303 	and.w	r3, r3, #3
 800457c:	2b03      	cmp	r3, #3
 800457e:	d81b      	bhi.n	80045b8 <UART_SetConfig+0xd0>
 8004580:	a201      	add	r2, pc, #4	@ (adr r2, 8004588 <UART_SetConfig+0xa0>)
 8004582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004586:	bf00      	nop
 8004588:	08004599 	.word	0x08004599
 800458c:	080045a9 	.word	0x080045a9
 8004590:	080045a1 	.word	0x080045a1
 8004594:	080045b1 	.word	0x080045b1
 8004598:	2301      	movs	r3, #1
 800459a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800459e:	e116      	b.n	80047ce <UART_SetConfig+0x2e6>
 80045a0:	2302      	movs	r3, #2
 80045a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045a6:	e112      	b.n	80047ce <UART_SetConfig+0x2e6>
 80045a8:	2304      	movs	r3, #4
 80045aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045ae:	e10e      	b.n	80047ce <UART_SetConfig+0x2e6>
 80045b0:	2308      	movs	r3, #8
 80045b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045b6:	e10a      	b.n	80047ce <UART_SetConfig+0x2e6>
 80045b8:	2310      	movs	r3, #16
 80045ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045be:	e106      	b.n	80047ce <UART_SetConfig+0x2e6>
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a7c      	ldr	r2, [pc, #496]	@ (80047b8 <UART_SetConfig+0x2d0>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d138      	bne.n	800463c <UART_SetConfig+0x154>
 80045ca:	4b7a      	ldr	r3, [pc, #488]	@ (80047b4 <UART_SetConfig+0x2cc>)
 80045cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045d0:	f003 030c 	and.w	r3, r3, #12
 80045d4:	2b0c      	cmp	r3, #12
 80045d6:	d82d      	bhi.n	8004634 <UART_SetConfig+0x14c>
 80045d8:	a201      	add	r2, pc, #4	@ (adr r2, 80045e0 <UART_SetConfig+0xf8>)
 80045da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045de:	bf00      	nop
 80045e0:	08004615 	.word	0x08004615
 80045e4:	08004635 	.word	0x08004635
 80045e8:	08004635 	.word	0x08004635
 80045ec:	08004635 	.word	0x08004635
 80045f0:	08004625 	.word	0x08004625
 80045f4:	08004635 	.word	0x08004635
 80045f8:	08004635 	.word	0x08004635
 80045fc:	08004635 	.word	0x08004635
 8004600:	0800461d 	.word	0x0800461d
 8004604:	08004635 	.word	0x08004635
 8004608:	08004635 	.word	0x08004635
 800460c:	08004635 	.word	0x08004635
 8004610:	0800462d 	.word	0x0800462d
 8004614:	2300      	movs	r3, #0
 8004616:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800461a:	e0d8      	b.n	80047ce <UART_SetConfig+0x2e6>
 800461c:	2302      	movs	r3, #2
 800461e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004622:	e0d4      	b.n	80047ce <UART_SetConfig+0x2e6>
 8004624:	2304      	movs	r3, #4
 8004626:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800462a:	e0d0      	b.n	80047ce <UART_SetConfig+0x2e6>
 800462c:	2308      	movs	r3, #8
 800462e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004632:	e0cc      	b.n	80047ce <UART_SetConfig+0x2e6>
 8004634:	2310      	movs	r3, #16
 8004636:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800463a:	e0c8      	b.n	80047ce <UART_SetConfig+0x2e6>
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a5e      	ldr	r2, [pc, #376]	@ (80047bc <UART_SetConfig+0x2d4>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d125      	bne.n	8004692 <UART_SetConfig+0x1aa>
 8004646:	4b5b      	ldr	r3, [pc, #364]	@ (80047b4 <UART_SetConfig+0x2cc>)
 8004648:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800464c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004650:	2b30      	cmp	r3, #48	@ 0x30
 8004652:	d016      	beq.n	8004682 <UART_SetConfig+0x19a>
 8004654:	2b30      	cmp	r3, #48	@ 0x30
 8004656:	d818      	bhi.n	800468a <UART_SetConfig+0x1a2>
 8004658:	2b20      	cmp	r3, #32
 800465a:	d00a      	beq.n	8004672 <UART_SetConfig+0x18a>
 800465c:	2b20      	cmp	r3, #32
 800465e:	d814      	bhi.n	800468a <UART_SetConfig+0x1a2>
 8004660:	2b00      	cmp	r3, #0
 8004662:	d002      	beq.n	800466a <UART_SetConfig+0x182>
 8004664:	2b10      	cmp	r3, #16
 8004666:	d008      	beq.n	800467a <UART_SetConfig+0x192>
 8004668:	e00f      	b.n	800468a <UART_SetConfig+0x1a2>
 800466a:	2300      	movs	r3, #0
 800466c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004670:	e0ad      	b.n	80047ce <UART_SetConfig+0x2e6>
 8004672:	2302      	movs	r3, #2
 8004674:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004678:	e0a9      	b.n	80047ce <UART_SetConfig+0x2e6>
 800467a:	2304      	movs	r3, #4
 800467c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004680:	e0a5      	b.n	80047ce <UART_SetConfig+0x2e6>
 8004682:	2308      	movs	r3, #8
 8004684:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004688:	e0a1      	b.n	80047ce <UART_SetConfig+0x2e6>
 800468a:	2310      	movs	r3, #16
 800468c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004690:	e09d      	b.n	80047ce <UART_SetConfig+0x2e6>
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a4a      	ldr	r2, [pc, #296]	@ (80047c0 <UART_SetConfig+0x2d8>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d125      	bne.n	80046e8 <UART_SetConfig+0x200>
 800469c:	4b45      	ldr	r3, [pc, #276]	@ (80047b4 <UART_SetConfig+0x2cc>)
 800469e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046a2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80046a6:	2bc0      	cmp	r3, #192	@ 0xc0
 80046a8:	d016      	beq.n	80046d8 <UART_SetConfig+0x1f0>
 80046aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80046ac:	d818      	bhi.n	80046e0 <UART_SetConfig+0x1f8>
 80046ae:	2b80      	cmp	r3, #128	@ 0x80
 80046b0:	d00a      	beq.n	80046c8 <UART_SetConfig+0x1e0>
 80046b2:	2b80      	cmp	r3, #128	@ 0x80
 80046b4:	d814      	bhi.n	80046e0 <UART_SetConfig+0x1f8>
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d002      	beq.n	80046c0 <UART_SetConfig+0x1d8>
 80046ba:	2b40      	cmp	r3, #64	@ 0x40
 80046bc:	d008      	beq.n	80046d0 <UART_SetConfig+0x1e8>
 80046be:	e00f      	b.n	80046e0 <UART_SetConfig+0x1f8>
 80046c0:	2300      	movs	r3, #0
 80046c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046c6:	e082      	b.n	80047ce <UART_SetConfig+0x2e6>
 80046c8:	2302      	movs	r3, #2
 80046ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046ce:	e07e      	b.n	80047ce <UART_SetConfig+0x2e6>
 80046d0:	2304      	movs	r3, #4
 80046d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046d6:	e07a      	b.n	80047ce <UART_SetConfig+0x2e6>
 80046d8:	2308      	movs	r3, #8
 80046da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046de:	e076      	b.n	80047ce <UART_SetConfig+0x2e6>
 80046e0:	2310      	movs	r3, #16
 80046e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046e6:	e072      	b.n	80047ce <UART_SetConfig+0x2e6>
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a35      	ldr	r2, [pc, #212]	@ (80047c4 <UART_SetConfig+0x2dc>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d12a      	bne.n	8004748 <UART_SetConfig+0x260>
 80046f2:	4b30      	ldr	r3, [pc, #192]	@ (80047b4 <UART_SetConfig+0x2cc>)
 80046f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004700:	d01a      	beq.n	8004738 <UART_SetConfig+0x250>
 8004702:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004706:	d81b      	bhi.n	8004740 <UART_SetConfig+0x258>
 8004708:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800470c:	d00c      	beq.n	8004728 <UART_SetConfig+0x240>
 800470e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004712:	d815      	bhi.n	8004740 <UART_SetConfig+0x258>
 8004714:	2b00      	cmp	r3, #0
 8004716:	d003      	beq.n	8004720 <UART_SetConfig+0x238>
 8004718:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800471c:	d008      	beq.n	8004730 <UART_SetConfig+0x248>
 800471e:	e00f      	b.n	8004740 <UART_SetConfig+0x258>
 8004720:	2300      	movs	r3, #0
 8004722:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004726:	e052      	b.n	80047ce <UART_SetConfig+0x2e6>
 8004728:	2302      	movs	r3, #2
 800472a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800472e:	e04e      	b.n	80047ce <UART_SetConfig+0x2e6>
 8004730:	2304      	movs	r3, #4
 8004732:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004736:	e04a      	b.n	80047ce <UART_SetConfig+0x2e6>
 8004738:	2308      	movs	r3, #8
 800473a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800473e:	e046      	b.n	80047ce <UART_SetConfig+0x2e6>
 8004740:	2310      	movs	r3, #16
 8004742:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004746:	e042      	b.n	80047ce <UART_SetConfig+0x2e6>
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a17      	ldr	r2, [pc, #92]	@ (80047ac <UART_SetConfig+0x2c4>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d13a      	bne.n	80047c8 <UART_SetConfig+0x2e0>
 8004752:	4b18      	ldr	r3, [pc, #96]	@ (80047b4 <UART_SetConfig+0x2cc>)
 8004754:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004758:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800475c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004760:	d01a      	beq.n	8004798 <UART_SetConfig+0x2b0>
 8004762:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004766:	d81b      	bhi.n	80047a0 <UART_SetConfig+0x2b8>
 8004768:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800476c:	d00c      	beq.n	8004788 <UART_SetConfig+0x2a0>
 800476e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004772:	d815      	bhi.n	80047a0 <UART_SetConfig+0x2b8>
 8004774:	2b00      	cmp	r3, #0
 8004776:	d003      	beq.n	8004780 <UART_SetConfig+0x298>
 8004778:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800477c:	d008      	beq.n	8004790 <UART_SetConfig+0x2a8>
 800477e:	e00f      	b.n	80047a0 <UART_SetConfig+0x2b8>
 8004780:	2300      	movs	r3, #0
 8004782:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004786:	e022      	b.n	80047ce <UART_SetConfig+0x2e6>
 8004788:	2302      	movs	r3, #2
 800478a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800478e:	e01e      	b.n	80047ce <UART_SetConfig+0x2e6>
 8004790:	2304      	movs	r3, #4
 8004792:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004796:	e01a      	b.n	80047ce <UART_SetConfig+0x2e6>
 8004798:	2308      	movs	r3, #8
 800479a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800479e:	e016      	b.n	80047ce <UART_SetConfig+0x2e6>
 80047a0:	2310      	movs	r3, #16
 80047a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047a6:	e012      	b.n	80047ce <UART_SetConfig+0x2e6>
 80047a8:	efff69f3 	.word	0xefff69f3
 80047ac:	40008000 	.word	0x40008000
 80047b0:	40013800 	.word	0x40013800
 80047b4:	40021000 	.word	0x40021000
 80047b8:	40004400 	.word	0x40004400
 80047bc:	40004800 	.word	0x40004800
 80047c0:	40004c00 	.word	0x40004c00
 80047c4:	40005000 	.word	0x40005000
 80047c8:	2310      	movs	r3, #16
 80047ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a9f      	ldr	r2, [pc, #636]	@ (8004a50 <UART_SetConfig+0x568>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d17a      	bne.n	80048ce <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80047d8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80047dc:	2b08      	cmp	r3, #8
 80047de:	d824      	bhi.n	800482a <UART_SetConfig+0x342>
 80047e0:	a201      	add	r2, pc, #4	@ (adr r2, 80047e8 <UART_SetConfig+0x300>)
 80047e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047e6:	bf00      	nop
 80047e8:	0800480d 	.word	0x0800480d
 80047ec:	0800482b 	.word	0x0800482b
 80047f0:	08004815 	.word	0x08004815
 80047f4:	0800482b 	.word	0x0800482b
 80047f8:	0800481b 	.word	0x0800481b
 80047fc:	0800482b 	.word	0x0800482b
 8004800:	0800482b 	.word	0x0800482b
 8004804:	0800482b 	.word	0x0800482b
 8004808:	08004823 	.word	0x08004823
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800480c:	f7fe fc50 	bl	80030b0 <HAL_RCC_GetPCLK1Freq>
 8004810:	61f8      	str	r0, [r7, #28]
        break;
 8004812:	e010      	b.n	8004836 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004814:	4b8f      	ldr	r3, [pc, #572]	@ (8004a54 <UART_SetConfig+0x56c>)
 8004816:	61fb      	str	r3, [r7, #28]
        break;
 8004818:	e00d      	b.n	8004836 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800481a:	f7fe fbb1 	bl	8002f80 <HAL_RCC_GetSysClockFreq>
 800481e:	61f8      	str	r0, [r7, #28]
        break;
 8004820:	e009      	b.n	8004836 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004822:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004826:	61fb      	str	r3, [r7, #28]
        break;
 8004828:	e005      	b.n	8004836 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800482a:	2300      	movs	r3, #0
 800482c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004834:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	2b00      	cmp	r3, #0
 800483a:	f000 80fb 	beq.w	8004a34 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	685a      	ldr	r2, [r3, #4]
 8004842:	4613      	mov	r3, r2
 8004844:	005b      	lsls	r3, r3, #1
 8004846:	4413      	add	r3, r2
 8004848:	69fa      	ldr	r2, [r7, #28]
 800484a:	429a      	cmp	r2, r3
 800484c:	d305      	bcc.n	800485a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004854:	69fa      	ldr	r2, [r7, #28]
 8004856:	429a      	cmp	r2, r3
 8004858:	d903      	bls.n	8004862 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004860:	e0e8      	b.n	8004a34 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	2200      	movs	r2, #0
 8004866:	461c      	mov	r4, r3
 8004868:	4615      	mov	r5, r2
 800486a:	f04f 0200 	mov.w	r2, #0
 800486e:	f04f 0300 	mov.w	r3, #0
 8004872:	022b      	lsls	r3, r5, #8
 8004874:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004878:	0222      	lsls	r2, r4, #8
 800487a:	68f9      	ldr	r1, [r7, #12]
 800487c:	6849      	ldr	r1, [r1, #4]
 800487e:	0849      	lsrs	r1, r1, #1
 8004880:	2000      	movs	r0, #0
 8004882:	4688      	mov	r8, r1
 8004884:	4681      	mov	r9, r0
 8004886:	eb12 0a08 	adds.w	sl, r2, r8
 800488a:	eb43 0b09 	adc.w	fp, r3, r9
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	603b      	str	r3, [r7, #0]
 8004896:	607a      	str	r2, [r7, #4]
 8004898:	e9d7 2300 	ldrd	r2, r3, [r7]
 800489c:	4650      	mov	r0, sl
 800489e:	4659      	mov	r1, fp
 80048a0:	f7fb fc96 	bl	80001d0 <__aeabi_uldivmod>
 80048a4:	4602      	mov	r2, r0
 80048a6:	460b      	mov	r3, r1
 80048a8:	4613      	mov	r3, r2
 80048aa:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80048ac:	69bb      	ldr	r3, [r7, #24]
 80048ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80048b2:	d308      	bcc.n	80048c6 <UART_SetConfig+0x3de>
 80048b4:	69bb      	ldr	r3, [r7, #24]
 80048b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048ba:	d204      	bcs.n	80048c6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	69ba      	ldr	r2, [r7, #24]
 80048c2:	60da      	str	r2, [r3, #12]
 80048c4:	e0b6      	b.n	8004a34 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80048cc:	e0b2      	b.n	8004a34 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	69db      	ldr	r3, [r3, #28]
 80048d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048d6:	d15e      	bne.n	8004996 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80048d8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80048dc:	2b08      	cmp	r3, #8
 80048de:	d828      	bhi.n	8004932 <UART_SetConfig+0x44a>
 80048e0:	a201      	add	r2, pc, #4	@ (adr r2, 80048e8 <UART_SetConfig+0x400>)
 80048e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048e6:	bf00      	nop
 80048e8:	0800490d 	.word	0x0800490d
 80048ec:	08004915 	.word	0x08004915
 80048f0:	0800491d 	.word	0x0800491d
 80048f4:	08004933 	.word	0x08004933
 80048f8:	08004923 	.word	0x08004923
 80048fc:	08004933 	.word	0x08004933
 8004900:	08004933 	.word	0x08004933
 8004904:	08004933 	.word	0x08004933
 8004908:	0800492b 	.word	0x0800492b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800490c:	f7fe fbd0 	bl	80030b0 <HAL_RCC_GetPCLK1Freq>
 8004910:	61f8      	str	r0, [r7, #28]
        break;
 8004912:	e014      	b.n	800493e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004914:	f7fe fbe2 	bl	80030dc <HAL_RCC_GetPCLK2Freq>
 8004918:	61f8      	str	r0, [r7, #28]
        break;
 800491a:	e010      	b.n	800493e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800491c:	4b4d      	ldr	r3, [pc, #308]	@ (8004a54 <UART_SetConfig+0x56c>)
 800491e:	61fb      	str	r3, [r7, #28]
        break;
 8004920:	e00d      	b.n	800493e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004922:	f7fe fb2d 	bl	8002f80 <HAL_RCC_GetSysClockFreq>
 8004926:	61f8      	str	r0, [r7, #28]
        break;
 8004928:	e009      	b.n	800493e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800492a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800492e:	61fb      	str	r3, [r7, #28]
        break;
 8004930:	e005      	b.n	800493e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004932:	2300      	movs	r3, #0
 8004934:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800493c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d077      	beq.n	8004a34 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004944:	69fb      	ldr	r3, [r7, #28]
 8004946:	005a      	lsls	r2, r3, #1
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	085b      	lsrs	r3, r3, #1
 800494e:	441a      	add	r2, r3
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	fbb2 f3f3 	udiv	r3, r2, r3
 8004958:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	2b0f      	cmp	r3, #15
 800495e:	d916      	bls.n	800498e <UART_SetConfig+0x4a6>
 8004960:	69bb      	ldr	r3, [r7, #24]
 8004962:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004966:	d212      	bcs.n	800498e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	b29b      	uxth	r3, r3
 800496c:	f023 030f 	bic.w	r3, r3, #15
 8004970:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	085b      	lsrs	r3, r3, #1
 8004976:	b29b      	uxth	r3, r3
 8004978:	f003 0307 	and.w	r3, r3, #7
 800497c:	b29a      	uxth	r2, r3
 800497e:	8afb      	ldrh	r3, [r7, #22]
 8004980:	4313      	orrs	r3, r2
 8004982:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	8afa      	ldrh	r2, [r7, #22]
 800498a:	60da      	str	r2, [r3, #12]
 800498c:	e052      	b.n	8004a34 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004994:	e04e      	b.n	8004a34 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004996:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800499a:	2b08      	cmp	r3, #8
 800499c:	d827      	bhi.n	80049ee <UART_SetConfig+0x506>
 800499e:	a201      	add	r2, pc, #4	@ (adr r2, 80049a4 <UART_SetConfig+0x4bc>)
 80049a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049a4:	080049c9 	.word	0x080049c9
 80049a8:	080049d1 	.word	0x080049d1
 80049ac:	080049d9 	.word	0x080049d9
 80049b0:	080049ef 	.word	0x080049ef
 80049b4:	080049df 	.word	0x080049df
 80049b8:	080049ef 	.word	0x080049ef
 80049bc:	080049ef 	.word	0x080049ef
 80049c0:	080049ef 	.word	0x080049ef
 80049c4:	080049e7 	.word	0x080049e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049c8:	f7fe fb72 	bl	80030b0 <HAL_RCC_GetPCLK1Freq>
 80049cc:	61f8      	str	r0, [r7, #28]
        break;
 80049ce:	e014      	b.n	80049fa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049d0:	f7fe fb84 	bl	80030dc <HAL_RCC_GetPCLK2Freq>
 80049d4:	61f8      	str	r0, [r7, #28]
        break;
 80049d6:	e010      	b.n	80049fa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049d8:	4b1e      	ldr	r3, [pc, #120]	@ (8004a54 <UART_SetConfig+0x56c>)
 80049da:	61fb      	str	r3, [r7, #28]
        break;
 80049dc:	e00d      	b.n	80049fa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049de:	f7fe facf 	bl	8002f80 <HAL_RCC_GetSysClockFreq>
 80049e2:	61f8      	str	r0, [r7, #28]
        break;
 80049e4:	e009      	b.n	80049fa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049ea:	61fb      	str	r3, [r7, #28]
        break;
 80049ec:	e005      	b.n	80049fa <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80049ee:	2300      	movs	r3, #0
 80049f0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80049f8:	bf00      	nop
    }

    if (pclk != 0U)
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d019      	beq.n	8004a34 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	085a      	lsrs	r2, r3, #1
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	441a      	add	r2, r3
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a12:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a14:	69bb      	ldr	r3, [r7, #24]
 8004a16:	2b0f      	cmp	r3, #15
 8004a18:	d909      	bls.n	8004a2e <UART_SetConfig+0x546>
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a20:	d205      	bcs.n	8004a2e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	b29a      	uxth	r2, r3
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	60da      	str	r2, [r3, #12]
 8004a2c:	e002      	b.n	8004a34 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2200      	movs	r2, #0
 8004a38:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004a40:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3728      	adds	r7, #40	@ 0x28
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a4e:	bf00      	nop
 8004a50:	40008000 	.word	0x40008000
 8004a54:	00f42400 	.word	0x00f42400

08004a58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a64:	f003 0308 	and.w	r3, r3, #8
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d00a      	beq.n	8004a82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	430a      	orrs	r2, r1
 8004a80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a86:	f003 0301 	and.w	r3, r3, #1
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d00a      	beq.n	8004aa4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	430a      	orrs	r2, r1
 8004aa2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa8:	f003 0302 	and.w	r3, r3, #2
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d00a      	beq.n	8004ac6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	430a      	orrs	r2, r1
 8004ac4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aca:	f003 0304 	and.w	r3, r3, #4
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d00a      	beq.n	8004ae8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	430a      	orrs	r2, r1
 8004ae6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aec:	f003 0310 	and.w	r3, r3, #16
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d00a      	beq.n	8004b0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	430a      	orrs	r2, r1
 8004b08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b0e:	f003 0320 	and.w	r3, r3, #32
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d00a      	beq.n	8004b2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	430a      	orrs	r2, r1
 8004b2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d01a      	beq.n	8004b6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	430a      	orrs	r2, r1
 8004b4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b56:	d10a      	bne.n	8004b6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	430a      	orrs	r2, r1
 8004b6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d00a      	beq.n	8004b90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	430a      	orrs	r2, r1
 8004b8e:	605a      	str	r2, [r3, #4]
  }
}
 8004b90:	bf00      	nop
 8004b92:	370c      	adds	r7, #12
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr

08004b9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b098      	sub	sp, #96	@ 0x60
 8004ba0:	af02      	add	r7, sp, #8
 8004ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004bac:	f7fc fd24 	bl	80015f8 <HAL_GetTick>
 8004bb0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 0308 	and.w	r3, r3, #8
 8004bbc:	2b08      	cmp	r3, #8
 8004bbe:	d12e      	bne.n	8004c1e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bc0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004bc4:	9300      	str	r3, [sp, #0]
 8004bc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 f88c 	bl	8004cec <UART_WaitOnFlagUntilTimeout>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d021      	beq.n	8004c1e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004be2:	e853 3f00 	ldrex	r3, [r3]
 8004be6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004be8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004bee:	653b      	str	r3, [r7, #80]	@ 0x50
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004bf8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004bfa:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bfc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004bfe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c00:	e841 2300 	strex	r3, r2, [r1]
 8004c04:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004c06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d1e6      	bne.n	8004bda <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2220      	movs	r2, #32
 8004c10:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e062      	b.n	8004ce4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 0304 	and.w	r3, r3, #4
 8004c28:	2b04      	cmp	r3, #4
 8004c2a:	d149      	bne.n	8004cc0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c2c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004c30:	9300      	str	r3, [sp, #0]
 8004c32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c34:	2200      	movs	r2, #0
 8004c36:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 f856 	bl	8004cec <UART_WaitOnFlagUntilTimeout>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d03c      	beq.n	8004cc0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c4e:	e853 3f00 	ldrex	r3, [r3]
 8004c52:	623b      	str	r3, [r7, #32]
   return(result);
 8004c54:	6a3b      	ldr	r3, [r7, #32]
 8004c56:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	461a      	mov	r2, r3
 8004c62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c64:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c66:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c68:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c6c:	e841 2300 	strex	r3, r2, [r1]
 8004c70:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d1e6      	bne.n	8004c46 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	3308      	adds	r3, #8
 8004c7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	e853 3f00 	ldrex	r3, [r3]
 8004c86:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f023 0301 	bic.w	r3, r3, #1
 8004c8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	3308      	adds	r3, #8
 8004c96:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c98:	61fa      	str	r2, [r7, #28]
 8004c9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c9c:	69b9      	ldr	r1, [r7, #24]
 8004c9e:	69fa      	ldr	r2, [r7, #28]
 8004ca0:	e841 2300 	strex	r3, r2, [r1]
 8004ca4:	617b      	str	r3, [r7, #20]
   return(result);
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d1e5      	bne.n	8004c78 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2220      	movs	r2, #32
 8004cb0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cbc:	2303      	movs	r3, #3
 8004cbe:	e011      	b.n	8004ce4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2220      	movs	r2, #32
 8004cc4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2220      	movs	r2, #32
 8004cca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004ce2:	2300      	movs	r3, #0
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3758      	adds	r7, #88	@ 0x58
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	60b9      	str	r1, [r7, #8]
 8004cf6:	603b      	str	r3, [r7, #0]
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cfc:	e04f      	b.n	8004d9e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d04:	d04b      	beq.n	8004d9e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d06:	f7fc fc77 	bl	80015f8 <HAL_GetTick>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	1ad3      	subs	r3, r2, r3
 8004d10:	69ba      	ldr	r2, [r7, #24]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d302      	bcc.n	8004d1c <UART_WaitOnFlagUntilTimeout+0x30>
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d101      	bne.n	8004d20 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	e04e      	b.n	8004dbe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0304 	and.w	r3, r3, #4
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d037      	beq.n	8004d9e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	2b80      	cmp	r3, #128	@ 0x80
 8004d32:	d034      	beq.n	8004d9e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	2b40      	cmp	r3, #64	@ 0x40
 8004d38:	d031      	beq.n	8004d9e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	69db      	ldr	r3, [r3, #28]
 8004d40:	f003 0308 	and.w	r3, r3, #8
 8004d44:	2b08      	cmp	r3, #8
 8004d46:	d110      	bne.n	8004d6a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2208      	movs	r2, #8
 8004d4e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d50:	68f8      	ldr	r0, [r7, #12]
 8004d52:	f000 f838 	bl	8004dc6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2208      	movs	r2, #8
 8004d5a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2200      	movs	r2, #0
 8004d62:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e029      	b.n	8004dbe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	69db      	ldr	r3, [r3, #28]
 8004d70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d78:	d111      	bne.n	8004d9e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004d82:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d84:	68f8      	ldr	r0, [r7, #12]
 8004d86:	f000 f81e 	bl	8004dc6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2220      	movs	r2, #32
 8004d8e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e00f      	b.n	8004dbe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	69da      	ldr	r2, [r3, #28]
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	4013      	ands	r3, r2
 8004da8:	68ba      	ldr	r2, [r7, #8]
 8004daa:	429a      	cmp	r2, r3
 8004dac:	bf0c      	ite	eq
 8004dae:	2301      	moveq	r3, #1
 8004db0:	2300      	movne	r3, #0
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	461a      	mov	r2, r3
 8004db6:	79fb      	ldrb	r3, [r7, #7]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d0a0      	beq.n	8004cfe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004dbc:	2300      	movs	r3, #0
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3710      	adds	r7, #16
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}

08004dc6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004dc6:	b480      	push	{r7}
 8004dc8:	b095      	sub	sp, #84	@ 0x54
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dd6:	e853 3f00 	ldrex	r3, [r3]
 8004dda:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dde:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004de2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	461a      	mov	r2, r3
 8004dea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004dec:	643b      	str	r3, [r7, #64]	@ 0x40
 8004dee:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004df2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004df4:	e841 2300 	strex	r3, r2, [r1]
 8004df8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004dfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d1e6      	bne.n	8004dce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	3308      	adds	r3, #8
 8004e06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e08:	6a3b      	ldr	r3, [r7, #32]
 8004e0a:	e853 3f00 	ldrex	r3, [r3]
 8004e0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e10:	69fb      	ldr	r3, [r7, #28]
 8004e12:	f023 0301 	bic.w	r3, r3, #1
 8004e16:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	3308      	adds	r3, #8
 8004e1e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e20:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e22:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e24:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e28:	e841 2300 	strex	r3, r2, [r1]
 8004e2c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d1e5      	bne.n	8004e00 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d118      	bne.n	8004e6e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	e853 3f00 	ldrex	r3, [r3]
 8004e48:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	f023 0310 	bic.w	r3, r3, #16
 8004e50:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	461a      	mov	r2, r3
 8004e58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e5a:	61bb      	str	r3, [r7, #24]
 8004e5c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e5e:	6979      	ldr	r1, [r7, #20]
 8004e60:	69ba      	ldr	r2, [r7, #24]
 8004e62:	e841 2300 	strex	r3, r2, [r1]
 8004e66:	613b      	str	r3, [r7, #16]
   return(result);
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d1e6      	bne.n	8004e3c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2220      	movs	r2, #32
 8004e72:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004e82:	bf00      	nop
 8004e84:	3754      	adds	r7, #84	@ 0x54
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr

08004e8e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e8e:	b084      	sub	sp, #16
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	f107 001c 	add.w	r0, r7, #28
 8004e9c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f000 fa69 	bl	8005384 <USB_CoreReset>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8004eb6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d106      	bne.n	8004ecc <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ec2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	639a      	str	r2, [r3, #56]	@ 0x38
 8004eca:	e005      	b.n	8004ed8 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ed0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8004ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3710      	adds	r7, #16
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ee4:	b004      	add	sp, #16
 8004ee6:	4770      	bx	lr

08004ee8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b083      	sub	sp, #12
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	f023 0201 	bic.w	r2, r3, #1
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	370c      	adds	r7, #12
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr

08004f0a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004f0a:	b580      	push	{r7, lr}
 8004f0c:	b084      	sub	sp, #16
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
 8004f12:	460b      	mov	r3, r1
 8004f14:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004f16:	2300      	movs	r3, #0
 8004f18:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004f26:	78fb      	ldrb	r3, [r7, #3]
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d115      	bne.n	8004f58 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004f38:	200a      	movs	r0, #10
 8004f3a:	f7fc fb69 	bl	8001610 <HAL_Delay>
      ms += 10U;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	330a      	adds	r3, #10
 8004f42:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f000 fa0f 	bl	8005368 <USB_GetMode>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d01e      	beq.n	8004f8e <USB_SetCurrentMode+0x84>
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2bc7      	cmp	r3, #199	@ 0xc7
 8004f54:	d9f0      	bls.n	8004f38 <USB_SetCurrentMode+0x2e>
 8004f56:	e01a      	b.n	8004f8e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004f58:	78fb      	ldrb	r3, [r7, #3]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d115      	bne.n	8004f8a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	68db      	ldr	r3, [r3, #12]
 8004f62:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004f6a:	200a      	movs	r0, #10
 8004f6c:	f7fc fb50 	bl	8001610 <HAL_Delay>
      ms += 10U;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	330a      	adds	r3, #10
 8004f74:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f000 f9f6 	bl	8005368 <USB_GetMode>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d005      	beq.n	8004f8e <USB_SetCurrentMode+0x84>
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2bc7      	cmp	r3, #199	@ 0xc7
 8004f86:	d9f0      	bls.n	8004f6a <USB_SetCurrentMode+0x60>
 8004f88:	e001      	b.n	8004f8e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e005      	b.n	8004f9a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2bc8      	cmp	r3, #200	@ 0xc8
 8004f92:	d101      	bne.n	8004f98 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e000      	b.n	8004f9a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3710      	adds	r7, #16
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
	...

08004fa4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004fa4:	b084      	sub	sp, #16
 8004fa6:	b580      	push	{r7, lr}
 8004fa8:	b086      	sub	sp, #24
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
 8004fae:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004fb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	613b      	str	r3, [r7, #16]
 8004fc2:	e009      	b.n	8004fd8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	3340      	adds	r3, #64	@ 0x40
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	4413      	add	r3, r2
 8004fce:	2200      	movs	r2, #0
 8004fd0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	3301      	adds	r3, #1
 8004fd6:	613b      	str	r3, [r7, #16]
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	2b0e      	cmp	r3, #14
 8004fdc:	d9f2      	bls.n	8004fc4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004fde:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d11c      	bne.n	8005020 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	68fa      	ldr	r2, [r7, #12]
 8004ff0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004ff4:	f043 0302 	orr.w	r3, r3, #2
 8004ff8:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ffe:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	601a      	str	r2, [r3, #0]
 800501e:	e005      	b.n	800502c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005024:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005032:	461a      	mov	r2, r3
 8005034:	2300      	movs	r3, #0
 8005036:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005038:	2103      	movs	r1, #3
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 f95a 	bl	80052f4 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005040:	2110      	movs	r1, #16
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f000 f8f6 	bl	8005234 <USB_FlushTxFifo>
 8005048:	4603      	mov	r3, r0
 800504a:	2b00      	cmp	r3, #0
 800504c:	d001      	beq.n	8005052 <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f000 f920 	bl	8005298 <USB_FlushRxFifo>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d001      	beq.n	8005062 <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005068:	461a      	mov	r2, r3
 800506a:	2300      	movs	r3, #0
 800506c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005074:	461a      	mov	r2, r3
 8005076:	2300      	movs	r3, #0
 8005078:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005080:	461a      	mov	r2, r3
 8005082:	2300      	movs	r3, #0
 8005084:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005086:	2300      	movs	r3, #0
 8005088:	613b      	str	r3, [r7, #16]
 800508a:	e043      	b.n	8005114 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	015a      	lsls	r2, r3, #5
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	4413      	add	r3, r2
 8005094:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800509e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80050a2:	d118      	bne.n	80050d6 <USB_DevInit+0x132>
    {
      if (i == 0U)
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d10a      	bne.n	80050c0 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	015a      	lsls	r2, r3, #5
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	4413      	add	r3, r2
 80050b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050b6:	461a      	mov	r2, r3
 80050b8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80050bc:	6013      	str	r3, [r2, #0]
 80050be:	e013      	b.n	80050e8 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	015a      	lsls	r2, r3, #5
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	4413      	add	r3, r2
 80050c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050cc:	461a      	mov	r2, r3
 80050ce:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80050d2:	6013      	str	r3, [r2, #0]
 80050d4:	e008      	b.n	80050e8 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	015a      	lsls	r2, r3, #5
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	4413      	add	r3, r2
 80050de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050e2:	461a      	mov	r2, r3
 80050e4:	2300      	movs	r3, #0
 80050e6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	015a      	lsls	r2, r3, #5
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	4413      	add	r3, r2
 80050f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050f4:	461a      	mov	r2, r3
 80050f6:	2300      	movs	r3, #0
 80050f8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	015a      	lsls	r2, r3, #5
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	4413      	add	r3, r2
 8005102:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005106:	461a      	mov	r2, r3
 8005108:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800510c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	3301      	adds	r3, #1
 8005112:	613b      	str	r3, [r7, #16]
 8005114:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005118:	461a      	mov	r2, r3
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	4293      	cmp	r3, r2
 800511e:	d3b5      	bcc.n	800508c <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005120:	2300      	movs	r3, #0
 8005122:	613b      	str	r3, [r7, #16]
 8005124:	e043      	b.n	80051ae <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	015a      	lsls	r2, r3, #5
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	4413      	add	r3, r2
 800512e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005138:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800513c:	d118      	bne.n	8005170 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d10a      	bne.n	800515a <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	015a      	lsls	r2, r3, #5
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	4413      	add	r3, r2
 800514c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005150:	461a      	mov	r2, r3
 8005152:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005156:	6013      	str	r3, [r2, #0]
 8005158:	e013      	b.n	8005182 <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	015a      	lsls	r2, r3, #5
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	4413      	add	r3, r2
 8005162:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005166:	461a      	mov	r2, r3
 8005168:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800516c:	6013      	str	r3, [r2, #0]
 800516e:	e008      	b.n	8005182 <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	015a      	lsls	r2, r3, #5
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	4413      	add	r3, r2
 8005178:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800517c:	461a      	mov	r2, r3
 800517e:	2300      	movs	r3, #0
 8005180:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	015a      	lsls	r2, r3, #5
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	4413      	add	r3, r2
 800518a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800518e:	461a      	mov	r2, r3
 8005190:	2300      	movs	r3, #0
 8005192:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	015a      	lsls	r2, r3, #5
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	4413      	add	r3, r2
 800519c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051a0:	461a      	mov	r2, r3
 80051a2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80051a6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	3301      	adds	r3, #1
 80051ac:	613b      	str	r3, [r7, #16]
 80051ae:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80051b2:	461a      	mov	r2, r3
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d3b5      	bcc.n	8005126 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051c0:	691b      	ldr	r3, [r3, #16]
 80051c2:	68fa      	ldr	r2, [r7, #12]
 80051c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80051c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80051cc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80051da:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	699b      	ldr	r3, [r3, #24]
 80051e0:	f043 0210 	orr.w	r2, r3, #16
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	699a      	ldr	r2, [r3, #24]
 80051ec:	4b10      	ldr	r3, [pc, #64]	@ (8005230 <USB_DevInit+0x28c>)
 80051ee:	4313      	orrs	r3, r2
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80051f4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d005      	beq.n	8005208 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	699b      	ldr	r3, [r3, #24]
 8005200:	f043 0208 	orr.w	r2, r3, #8
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005208:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800520c:	2b01      	cmp	r3, #1
 800520e:	d107      	bne.n	8005220 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	699b      	ldr	r3, [r3, #24]
 8005214:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005218:	f043 0304 	orr.w	r3, r3, #4
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005220:	7dfb      	ldrb	r3, [r7, #23]
}
 8005222:	4618      	mov	r0, r3
 8005224:	3718      	adds	r7, #24
 8005226:	46bd      	mov	sp, r7
 8005228:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800522c:	b004      	add	sp, #16
 800522e:	4770      	bx	lr
 8005230:	803c3800 	.word	0x803c3800

08005234 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005234:	b480      	push	{r7}
 8005236:	b085      	sub	sp, #20
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800523e:	2300      	movs	r3, #0
 8005240:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	3301      	adds	r3, #1
 8005246:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800524e:	d901      	bls.n	8005254 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005250:	2303      	movs	r3, #3
 8005252:	e01b      	b.n	800528c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	691b      	ldr	r3, [r3, #16]
 8005258:	2b00      	cmp	r3, #0
 800525a:	daf2      	bge.n	8005242 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800525c:	2300      	movs	r3, #0
 800525e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	019b      	lsls	r3, r3, #6
 8005264:	f043 0220 	orr.w	r2, r3, #32
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	3301      	adds	r3, #1
 8005270:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005278:	d901      	bls.n	800527e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	e006      	b.n	800528c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	f003 0320 	and.w	r3, r3, #32
 8005286:	2b20      	cmp	r3, #32
 8005288:	d0f0      	beq.n	800526c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800528a:	2300      	movs	r3, #0
}
 800528c:	4618      	mov	r0, r3
 800528e:	3714      	adds	r7, #20
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr

08005298 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005298:	b480      	push	{r7}
 800529a:	b085      	sub	sp, #20
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80052a0:	2300      	movs	r3, #0
 80052a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	3301      	adds	r3, #1
 80052a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80052b0:	d901      	bls.n	80052b6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80052b2:	2303      	movs	r3, #3
 80052b4:	e018      	b.n	80052e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	691b      	ldr	r3, [r3, #16]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	daf2      	bge.n	80052a4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80052be:	2300      	movs	r3, #0
 80052c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2210      	movs	r2, #16
 80052c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	3301      	adds	r3, #1
 80052cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80052d4:	d901      	bls.n	80052da <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	e006      	b.n	80052e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	f003 0310 	and.w	r3, r3, #16
 80052e2:	2b10      	cmp	r3, #16
 80052e4:	d0f0      	beq.n	80052c8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80052e6:	2300      	movs	r3, #0
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3714      	adds	r7, #20
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr

080052f4 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b085      	sub	sp, #20
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	460b      	mov	r3, r1
 80052fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	78fb      	ldrb	r3, [r7, #3]
 800530e:	68f9      	ldr	r1, [r7, #12]
 8005310:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005314:	4313      	orrs	r3, r2
 8005316:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005318:	2300      	movs	r3, #0
}
 800531a:	4618      	mov	r0, r3
 800531c:	3714      	adds	r7, #20
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr

08005326 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005326:	b480      	push	{r7}
 8005328:	b085      	sub	sp, #20
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005340:	f023 0303 	bic.w	r3, r3, #3
 8005344:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	68fa      	ldr	r2, [r7, #12]
 8005350:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005354:	f043 0302 	orr.w	r3, r3, #2
 8005358:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800535a:	2300      	movs	r3, #0
}
 800535c:	4618      	mov	r0, r3
 800535e:	3714      	adds	r7, #20
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr

08005368 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005368:	b480      	push	{r7}
 800536a:	b083      	sub	sp, #12
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	695b      	ldr	r3, [r3, #20]
 8005374:	f003 0301 	and.w	r3, r3, #1
}
 8005378:	4618      	mov	r0, r3
 800537a:	370c      	adds	r7, #12
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005384:	b480      	push	{r7}
 8005386:	b085      	sub	sp, #20
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800538c:	2300      	movs	r3, #0
 800538e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	3301      	adds	r3, #1
 8005394:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800539c:	d901      	bls.n	80053a2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800539e:	2303      	movs	r3, #3
 80053a0:	e01b      	b.n	80053da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	691b      	ldr	r3, [r3, #16]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	daf2      	bge.n	8005390 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80053aa:	2300      	movs	r3, #0
 80053ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	f043 0201 	orr.w	r2, r3, #1
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	3301      	adds	r3, #1
 80053be:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80053c6:	d901      	bls.n	80053cc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80053c8:	2303      	movs	r3, #3
 80053ca:	e006      	b.n	80053da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	691b      	ldr	r3, [r3, #16]
 80053d0:	f003 0301 	and.w	r3, r3, #1
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d0f0      	beq.n	80053ba <USB_CoreReset+0x36>

  return HAL_OK;
 80053d8:	2300      	movs	r3, #0
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3714      	adds	r7, #20
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr
	...

080053e8 <__NVIC_SetPriority>:
{
 80053e8:	b480      	push	{r7}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	4603      	mov	r3, r0
 80053f0:	6039      	str	r1, [r7, #0]
 80053f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	db0a      	blt.n	8005412 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	b2da      	uxtb	r2, r3
 8005400:	490c      	ldr	r1, [pc, #48]	@ (8005434 <__NVIC_SetPriority+0x4c>)
 8005402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005406:	0112      	lsls	r2, r2, #4
 8005408:	b2d2      	uxtb	r2, r2
 800540a:	440b      	add	r3, r1
 800540c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005410:	e00a      	b.n	8005428 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	b2da      	uxtb	r2, r3
 8005416:	4908      	ldr	r1, [pc, #32]	@ (8005438 <__NVIC_SetPriority+0x50>)
 8005418:	79fb      	ldrb	r3, [r7, #7]
 800541a:	f003 030f 	and.w	r3, r3, #15
 800541e:	3b04      	subs	r3, #4
 8005420:	0112      	lsls	r2, r2, #4
 8005422:	b2d2      	uxtb	r2, r2
 8005424:	440b      	add	r3, r1
 8005426:	761a      	strb	r2, [r3, #24]
}
 8005428:	bf00      	nop
 800542a:	370c      	adds	r7, #12
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr
 8005434:	e000e100 	.word	0xe000e100
 8005438:	e000ed00 	.word	0xe000ed00

0800543c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800543c:	b580      	push	{r7, lr}
 800543e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005440:	2100      	movs	r1, #0
 8005442:	f06f 0004 	mvn.w	r0, #4
 8005446:	f7ff ffcf 	bl	80053e8 <__NVIC_SetPriority>
#endif
}
 800544a:	bf00      	nop
 800544c:	bd80      	pop	{r7, pc}
	...

08005450 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005456:	f3ef 8305 	mrs	r3, IPSR
 800545a:	603b      	str	r3, [r7, #0]
  return(result);
 800545c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800545e:	2b00      	cmp	r3, #0
 8005460:	d003      	beq.n	800546a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005462:	f06f 0305 	mvn.w	r3, #5
 8005466:	607b      	str	r3, [r7, #4]
 8005468:	e00c      	b.n	8005484 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800546a:	4b0a      	ldr	r3, [pc, #40]	@ (8005494 <osKernelInitialize+0x44>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d105      	bne.n	800547e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005472:	4b08      	ldr	r3, [pc, #32]	@ (8005494 <osKernelInitialize+0x44>)
 8005474:	2201      	movs	r2, #1
 8005476:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005478:	2300      	movs	r3, #0
 800547a:	607b      	str	r3, [r7, #4]
 800547c:	e002      	b.n	8005484 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800547e:	f04f 33ff 	mov.w	r3, #4294967295
 8005482:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005484:	687b      	ldr	r3, [r7, #4]
}
 8005486:	4618      	mov	r0, r3
 8005488:	370c      	adds	r7, #12
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr
 8005492:	bf00      	nop
 8005494:	200007e4 	.word	0x200007e4

08005498 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005498:	b580      	push	{r7, lr}
 800549a:	b082      	sub	sp, #8
 800549c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800549e:	f3ef 8305 	mrs	r3, IPSR
 80054a2:	603b      	str	r3, [r7, #0]
  return(result);
 80054a4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d003      	beq.n	80054b2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80054aa:	f06f 0305 	mvn.w	r3, #5
 80054ae:	607b      	str	r3, [r7, #4]
 80054b0:	e010      	b.n	80054d4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80054b2:	4b0b      	ldr	r3, [pc, #44]	@ (80054e0 <osKernelStart+0x48>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d109      	bne.n	80054ce <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80054ba:	f7ff ffbf 	bl	800543c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80054be:	4b08      	ldr	r3, [pc, #32]	@ (80054e0 <osKernelStart+0x48>)
 80054c0:	2202      	movs	r2, #2
 80054c2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80054c4:	f001 fe90 	bl	80071e8 <vTaskStartScheduler>
      stat = osOK;
 80054c8:	2300      	movs	r3, #0
 80054ca:	607b      	str	r3, [r7, #4]
 80054cc:	e002      	b.n	80054d4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80054ce:	f04f 33ff 	mov.w	r3, #4294967295
 80054d2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80054d4:	687b      	ldr	r3, [r7, #4]
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3708      	adds	r7, #8
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	200007e4 	.word	0x200007e4

080054e4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b08e      	sub	sp, #56	@ 0x38
 80054e8:	af04      	add	r7, sp, #16
 80054ea:	60f8      	str	r0, [r7, #12]
 80054ec:	60b9      	str	r1, [r7, #8]
 80054ee:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80054f0:	2300      	movs	r3, #0
 80054f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054f4:	f3ef 8305 	mrs	r3, IPSR
 80054f8:	617b      	str	r3, [r7, #20]
  return(result);
 80054fa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d17e      	bne.n	80055fe <osThreadNew+0x11a>
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d07b      	beq.n	80055fe <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005506:	2380      	movs	r3, #128	@ 0x80
 8005508:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800550a:	2318      	movs	r3, #24
 800550c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800550e:	2300      	movs	r3, #0
 8005510:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005512:	f04f 33ff 	mov.w	r3, #4294967295
 8005516:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d045      	beq.n	80055aa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d002      	beq.n	800552c <osThreadNew+0x48>
        name = attr->name;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	699b      	ldr	r3, [r3, #24]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d002      	beq.n	800553a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	699b      	ldr	r3, [r3, #24]
 8005538:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800553a:	69fb      	ldr	r3, [r7, #28]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d008      	beq.n	8005552 <osThreadNew+0x6e>
 8005540:	69fb      	ldr	r3, [r7, #28]
 8005542:	2b38      	cmp	r3, #56	@ 0x38
 8005544:	d805      	bhi.n	8005552 <osThreadNew+0x6e>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	f003 0301 	and.w	r3, r3, #1
 800554e:	2b00      	cmp	r3, #0
 8005550:	d001      	beq.n	8005556 <osThreadNew+0x72>
        return (NULL);
 8005552:	2300      	movs	r3, #0
 8005554:	e054      	b.n	8005600 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	695b      	ldr	r3, [r3, #20]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d003      	beq.n	8005566 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	695b      	ldr	r3, [r3, #20]
 8005562:	089b      	lsrs	r3, r3, #2
 8005564:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d00e      	beq.n	800558c <osThreadNew+0xa8>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	68db      	ldr	r3, [r3, #12]
 8005572:	2b5b      	cmp	r3, #91	@ 0x5b
 8005574:	d90a      	bls.n	800558c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800557a:	2b00      	cmp	r3, #0
 800557c:	d006      	beq.n	800558c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	695b      	ldr	r3, [r3, #20]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d002      	beq.n	800558c <osThreadNew+0xa8>
        mem = 1;
 8005586:	2301      	movs	r3, #1
 8005588:	61bb      	str	r3, [r7, #24]
 800558a:	e010      	b.n	80055ae <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d10c      	bne.n	80055ae <osThreadNew+0xca>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d108      	bne.n	80055ae <osThreadNew+0xca>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	691b      	ldr	r3, [r3, #16]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d104      	bne.n	80055ae <osThreadNew+0xca>
          mem = 0;
 80055a4:	2300      	movs	r3, #0
 80055a6:	61bb      	str	r3, [r7, #24]
 80055a8:	e001      	b.n	80055ae <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80055aa:	2300      	movs	r3, #0
 80055ac:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80055ae:	69bb      	ldr	r3, [r7, #24]
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d110      	bne.n	80055d6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80055bc:	9202      	str	r2, [sp, #8]
 80055be:	9301      	str	r3, [sp, #4]
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	9300      	str	r3, [sp, #0]
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	6a3a      	ldr	r2, [r7, #32]
 80055c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80055ca:	68f8      	ldr	r0, [r7, #12]
 80055cc:	f001 fc30 	bl	8006e30 <xTaskCreateStatic>
 80055d0:	4603      	mov	r3, r0
 80055d2:	613b      	str	r3, [r7, #16]
 80055d4:	e013      	b.n	80055fe <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80055d6:	69bb      	ldr	r3, [r7, #24]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d110      	bne.n	80055fe <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80055dc:	6a3b      	ldr	r3, [r7, #32]
 80055de:	b29a      	uxth	r2, r3
 80055e0:	f107 0310 	add.w	r3, r7, #16
 80055e4:	9301      	str	r3, [sp, #4]
 80055e6:	69fb      	ldr	r3, [r7, #28]
 80055e8:	9300      	str	r3, [sp, #0]
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80055ee:	68f8      	ldr	r0, [r7, #12]
 80055f0:	f001 fc7e 	bl	8006ef0 <xTaskCreate>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d001      	beq.n	80055fe <osThreadNew+0x11a>
            hTask = NULL;
 80055fa:	2300      	movs	r3, #0
 80055fc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80055fe:	693b      	ldr	r3, [r7, #16]
}
 8005600:	4618      	mov	r0, r3
 8005602:	3728      	adds	r7, #40	@ 0x28
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005608:	b580      	push	{r7, lr}
 800560a:	b084      	sub	sp, #16
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005610:	f3ef 8305 	mrs	r3, IPSR
 8005614:	60bb      	str	r3, [r7, #8]
  return(result);
 8005616:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005618:	2b00      	cmp	r3, #0
 800561a:	d003      	beq.n	8005624 <osDelay+0x1c>
    stat = osErrorISR;
 800561c:	f06f 0305 	mvn.w	r3, #5
 8005620:	60fb      	str	r3, [r7, #12]
 8005622:	e007      	b.n	8005634 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005624:	2300      	movs	r3, #0
 8005626:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d002      	beq.n	8005634 <osDelay+0x2c>
      vTaskDelay(ticks);
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f001 fda4 	bl	800717c <vTaskDelay>
    }
  }

  return (stat);
 8005634:	68fb      	ldr	r3, [r7, #12]
}
 8005636:	4618      	mov	r0, r3
 8005638:	3710      	adds	r7, #16
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}

0800563e <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800563e:	b580      	push	{r7, lr}
 8005640:	b088      	sub	sp, #32
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8005646:	2300      	movs	r3, #0
 8005648:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800564a:	f3ef 8305 	mrs	r3, IPSR
 800564e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005650:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8005652:	2b00      	cmp	r3, #0
 8005654:	d174      	bne.n	8005740 <osMutexNew+0x102>
    if (attr != NULL) {
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d003      	beq.n	8005664 <osMutexNew+0x26>
      type = attr->attr_bits;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	61bb      	str	r3, [r7, #24]
 8005662:	e001      	b.n	8005668 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8005664:	2300      	movs	r3, #0
 8005666:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8005668:	69bb      	ldr	r3, [r7, #24]
 800566a:	f003 0301 	and.w	r3, r3, #1
 800566e:	2b00      	cmp	r3, #0
 8005670:	d002      	beq.n	8005678 <osMutexNew+0x3a>
      rmtx = 1U;
 8005672:	2301      	movs	r3, #1
 8005674:	617b      	str	r3, [r7, #20]
 8005676:	e001      	b.n	800567c <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8005678:	2300      	movs	r3, #0
 800567a:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	f003 0308 	and.w	r3, r3, #8
 8005682:	2b00      	cmp	r3, #0
 8005684:	d15c      	bne.n	8005740 <osMutexNew+0x102>
      mem = -1;
 8005686:	f04f 33ff 	mov.w	r3, #4294967295
 800568a:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d015      	beq.n	80056be <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d006      	beq.n	80056a8 <osMutexNew+0x6a>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	68db      	ldr	r3, [r3, #12]
 800569e:	2b4f      	cmp	r3, #79	@ 0x4f
 80056a0:	d902      	bls.n	80056a8 <osMutexNew+0x6a>
          mem = 1;
 80056a2:	2301      	movs	r3, #1
 80056a4:	613b      	str	r3, [r7, #16]
 80056a6:	e00c      	b.n	80056c2 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d108      	bne.n	80056c2 <osMutexNew+0x84>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d104      	bne.n	80056c2 <osMutexNew+0x84>
            mem = 0;
 80056b8:	2300      	movs	r3, #0
 80056ba:	613b      	str	r3, [r7, #16]
 80056bc:	e001      	b.n	80056c2 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80056be:	2300      	movs	r3, #0
 80056c0:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d112      	bne.n	80056ee <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d007      	beq.n	80056de <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	4619      	mov	r1, r3
 80056d4:	2004      	movs	r0, #4
 80056d6:	f000 fc3e 	bl	8005f56 <xQueueCreateMutexStatic>
 80056da:	61f8      	str	r0, [r7, #28]
 80056dc:	e016      	b.n	800570c <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	4619      	mov	r1, r3
 80056e4:	2001      	movs	r0, #1
 80056e6:	f000 fc36 	bl	8005f56 <xQueueCreateMutexStatic>
 80056ea:	61f8      	str	r0, [r7, #28]
 80056ec:	e00e      	b.n	800570c <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d10b      	bne.n	800570c <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d004      	beq.n	8005704 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80056fa:	2004      	movs	r0, #4
 80056fc:	f000 fc13 	bl	8005f26 <xQueueCreateMutex>
 8005700:	61f8      	str	r0, [r7, #28]
 8005702:	e003      	b.n	800570c <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8005704:	2001      	movs	r0, #1
 8005706:	f000 fc0e 	bl	8005f26 <xQueueCreateMutex>
 800570a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d00c      	beq.n	800572c <osMutexNew+0xee>
        if (attr != NULL) {
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d003      	beq.n	8005720 <osMutexNew+0xe2>
          name = attr->name;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	60fb      	str	r3, [r7, #12]
 800571e:	e001      	b.n	8005724 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8005720:	2300      	movs	r3, #0
 8005722:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8005724:	68f9      	ldr	r1, [r7, #12]
 8005726:	69f8      	ldr	r0, [r7, #28]
 8005728:	f001 fafa 	bl	8006d20 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d006      	beq.n	8005740 <osMutexNew+0x102>
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d003      	beq.n	8005740 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	f043 0301 	orr.w	r3, r3, #1
 800573e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8005740:	69fb      	ldr	r3, [r7, #28]
}
 8005742:	4618      	mov	r0, r3
 8005744:	3720      	adds	r7, #32
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}

0800574a <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800574a:	b580      	push	{r7, lr}
 800574c:	b086      	sub	sp, #24
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
 8005752:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f023 0301 	bic.w	r3, r3, #1
 800575a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f003 0301 	and.w	r3, r3, #1
 8005762:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005764:	2300      	movs	r3, #0
 8005766:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005768:	f3ef 8305 	mrs	r3, IPSR
 800576c:	60bb      	str	r3, [r7, #8]
  return(result);
 800576e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005770:	2b00      	cmp	r3, #0
 8005772:	d003      	beq.n	800577c <osMutexAcquire+0x32>
    stat = osErrorISR;
 8005774:	f06f 0305 	mvn.w	r3, #5
 8005778:	617b      	str	r3, [r7, #20]
 800577a:	e02c      	b.n	80057d6 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d103      	bne.n	800578a <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8005782:	f06f 0303 	mvn.w	r3, #3
 8005786:	617b      	str	r3, [r7, #20]
 8005788:	e025      	b.n	80057d6 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d011      	beq.n	80057b4 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8005790:	6839      	ldr	r1, [r7, #0]
 8005792:	6938      	ldr	r0, [r7, #16]
 8005794:	f000 fc2f 	bl	8005ff6 <xQueueTakeMutexRecursive>
 8005798:	4603      	mov	r3, r0
 800579a:	2b01      	cmp	r3, #1
 800579c:	d01b      	beq.n	80057d6 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d003      	beq.n	80057ac <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80057a4:	f06f 0301 	mvn.w	r3, #1
 80057a8:	617b      	str	r3, [r7, #20]
 80057aa:	e014      	b.n	80057d6 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80057ac:	f06f 0302 	mvn.w	r3, #2
 80057b0:	617b      	str	r3, [r7, #20]
 80057b2:	e010      	b.n	80057d6 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80057b4:	6839      	ldr	r1, [r7, #0]
 80057b6:	6938      	ldr	r0, [r7, #16]
 80057b8:	f000 ffd4 	bl	8006764 <xQueueSemaphoreTake>
 80057bc:	4603      	mov	r3, r0
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d009      	beq.n	80057d6 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d003      	beq.n	80057d0 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80057c8:	f06f 0301 	mvn.w	r3, #1
 80057cc:	617b      	str	r3, [r7, #20]
 80057ce:	e002      	b.n	80057d6 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80057d0:	f06f 0302 	mvn.w	r3, #2
 80057d4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80057d6:	697b      	ldr	r3, [r7, #20]
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3718      	adds	r7, #24
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}

080057e0 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b086      	sub	sp, #24
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f023 0301 	bic.w	r3, r3, #1
 80057ee:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f003 0301 	and.w	r3, r3, #1
 80057f6:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80057f8:	2300      	movs	r3, #0
 80057fa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057fc:	f3ef 8305 	mrs	r3, IPSR
 8005800:	60bb      	str	r3, [r7, #8]
  return(result);
 8005802:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005804:	2b00      	cmp	r3, #0
 8005806:	d003      	beq.n	8005810 <osMutexRelease+0x30>
    stat = osErrorISR;
 8005808:	f06f 0305 	mvn.w	r3, #5
 800580c:	617b      	str	r3, [r7, #20]
 800580e:	e01f      	b.n	8005850 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d103      	bne.n	800581e <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8005816:	f06f 0303 	mvn.w	r3, #3
 800581a:	617b      	str	r3, [r7, #20]
 800581c:	e018      	b.n	8005850 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d009      	beq.n	8005838 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8005824:	6938      	ldr	r0, [r7, #16]
 8005826:	f000 fbb1 	bl	8005f8c <xQueueGiveMutexRecursive>
 800582a:	4603      	mov	r3, r0
 800582c:	2b01      	cmp	r3, #1
 800582e:	d00f      	beq.n	8005850 <osMutexRelease+0x70>
        stat = osErrorResource;
 8005830:	f06f 0302 	mvn.w	r3, #2
 8005834:	617b      	str	r3, [r7, #20]
 8005836:	e00b      	b.n	8005850 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8005838:	2300      	movs	r3, #0
 800583a:	2200      	movs	r2, #0
 800583c:	2100      	movs	r1, #0
 800583e:	6938      	ldr	r0, [r7, #16]
 8005840:	f000 fc7e 	bl	8006140 <xQueueGenericSend>
 8005844:	4603      	mov	r3, r0
 8005846:	2b01      	cmp	r3, #1
 8005848:	d002      	beq.n	8005850 <osMutexRelease+0x70>
        stat = osErrorResource;
 800584a:	f06f 0302 	mvn.w	r3, #2
 800584e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005850:	697b      	ldr	r3, [r7, #20]
}
 8005852:	4618      	mov	r0, r3
 8005854:	3718      	adds	r7, #24
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}

0800585a <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800585a:	b580      	push	{r7, lr}
 800585c:	b08a      	sub	sp, #40	@ 0x28
 800585e:	af02      	add	r7, sp, #8
 8005860:	60f8      	str	r0, [r7, #12]
 8005862:	60b9      	str	r1, [r7, #8]
 8005864:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005866:	2300      	movs	r3, #0
 8005868:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800586a:	f3ef 8305 	mrs	r3, IPSR
 800586e:	613b      	str	r3, [r7, #16]
  return(result);
 8005870:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005872:	2b00      	cmp	r3, #0
 8005874:	d175      	bne.n	8005962 <osSemaphoreNew+0x108>
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d072      	beq.n	8005962 <osSemaphoreNew+0x108>
 800587c:	68ba      	ldr	r2, [r7, #8]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	429a      	cmp	r2, r3
 8005882:	d86e      	bhi.n	8005962 <osSemaphoreNew+0x108>
    mem = -1;
 8005884:	f04f 33ff 	mov.w	r3, #4294967295
 8005888:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d015      	beq.n	80058bc <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d006      	beq.n	80058a6 <osSemaphoreNew+0x4c>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	2b4f      	cmp	r3, #79	@ 0x4f
 800589e:	d902      	bls.n	80058a6 <osSemaphoreNew+0x4c>
        mem = 1;
 80058a0:	2301      	movs	r3, #1
 80058a2:	61bb      	str	r3, [r7, #24]
 80058a4:	e00c      	b.n	80058c0 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d108      	bne.n	80058c0 <osSemaphoreNew+0x66>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d104      	bne.n	80058c0 <osSemaphoreNew+0x66>
          mem = 0;
 80058b6:	2300      	movs	r3, #0
 80058b8:	61bb      	str	r3, [r7, #24]
 80058ba:	e001      	b.n	80058c0 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80058bc:	2300      	movs	r3, #0
 80058be:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80058c0:	69bb      	ldr	r3, [r7, #24]
 80058c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058c6:	d04c      	beq.n	8005962 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d128      	bne.n	8005920 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80058ce:	69bb      	ldr	r3, [r7, #24]
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d10a      	bne.n	80058ea <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	2203      	movs	r2, #3
 80058da:	9200      	str	r2, [sp, #0]
 80058dc:	2200      	movs	r2, #0
 80058de:	2100      	movs	r1, #0
 80058e0:	2001      	movs	r0, #1
 80058e2:	f000 fa2b 	bl	8005d3c <xQueueGenericCreateStatic>
 80058e6:	61f8      	str	r0, [r7, #28]
 80058e8:	e005      	b.n	80058f6 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80058ea:	2203      	movs	r2, #3
 80058ec:	2100      	movs	r1, #0
 80058ee:	2001      	movs	r0, #1
 80058f0:	f000 faa1 	bl	8005e36 <xQueueGenericCreate>
 80058f4:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d022      	beq.n	8005942 <osSemaphoreNew+0xe8>
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d01f      	beq.n	8005942 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005902:	2300      	movs	r3, #0
 8005904:	2200      	movs	r2, #0
 8005906:	2100      	movs	r1, #0
 8005908:	69f8      	ldr	r0, [r7, #28]
 800590a:	f000 fc19 	bl	8006140 <xQueueGenericSend>
 800590e:	4603      	mov	r3, r0
 8005910:	2b01      	cmp	r3, #1
 8005912:	d016      	beq.n	8005942 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8005914:	69f8      	ldr	r0, [r7, #28]
 8005916:	f001 f8b7 	bl	8006a88 <vQueueDelete>
            hSemaphore = NULL;
 800591a:	2300      	movs	r3, #0
 800591c:	61fb      	str	r3, [r7, #28]
 800591e:	e010      	b.n	8005942 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8005920:	69bb      	ldr	r3, [r7, #24]
 8005922:	2b01      	cmp	r3, #1
 8005924:	d108      	bne.n	8005938 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	461a      	mov	r2, r3
 800592c:	68b9      	ldr	r1, [r7, #8]
 800592e:	68f8      	ldr	r0, [r7, #12]
 8005930:	f000 fb98 	bl	8006064 <xQueueCreateCountingSemaphoreStatic>
 8005934:	61f8      	str	r0, [r7, #28]
 8005936:	e004      	b.n	8005942 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005938:	68b9      	ldr	r1, [r7, #8]
 800593a:	68f8      	ldr	r0, [r7, #12]
 800593c:	f000 fbcb 	bl	80060d6 <xQueueCreateCountingSemaphore>
 8005940:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005942:	69fb      	ldr	r3, [r7, #28]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d00c      	beq.n	8005962 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d003      	beq.n	8005956 <osSemaphoreNew+0xfc>
          name = attr->name;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	617b      	str	r3, [r7, #20]
 8005954:	e001      	b.n	800595a <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8005956:	2300      	movs	r3, #0
 8005958:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800595a:	6979      	ldr	r1, [r7, #20]
 800595c:	69f8      	ldr	r0, [r7, #28]
 800595e:	f001 f9df 	bl	8006d20 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8005962:	69fb      	ldr	r3, [r7, #28]
}
 8005964:	4618      	mov	r0, r3
 8005966:	3720      	adds	r7, #32
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}

0800596c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800596c:	b580      	push	{r7, lr}
 800596e:	b086      	sub	sp, #24
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800597a:	2300      	movs	r3, #0
 800597c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d103      	bne.n	800598c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8005984:	f06f 0303 	mvn.w	r3, #3
 8005988:	617b      	str	r3, [r7, #20]
 800598a:	e039      	b.n	8005a00 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800598c:	f3ef 8305 	mrs	r3, IPSR
 8005990:	60fb      	str	r3, [r7, #12]
  return(result);
 8005992:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005994:	2b00      	cmp	r3, #0
 8005996:	d022      	beq.n	80059de <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d003      	beq.n	80059a6 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800599e:	f06f 0303 	mvn.w	r3, #3
 80059a2:	617b      	str	r3, [r7, #20]
 80059a4:	e02c      	b.n	8005a00 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80059a6:	2300      	movs	r3, #0
 80059a8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80059aa:	f107 0308 	add.w	r3, r7, #8
 80059ae:	461a      	mov	r2, r3
 80059b0:	2100      	movs	r1, #0
 80059b2:	6938      	ldr	r0, [r7, #16]
 80059b4:	f000 ffe6 	bl	8006984 <xQueueReceiveFromISR>
 80059b8:	4603      	mov	r3, r0
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d003      	beq.n	80059c6 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80059be:	f06f 0302 	mvn.w	r3, #2
 80059c2:	617b      	str	r3, [r7, #20]
 80059c4:	e01c      	b.n	8005a00 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d019      	beq.n	8005a00 <osSemaphoreAcquire+0x94>
 80059cc:	4b0f      	ldr	r3, [pc, #60]	@ (8005a0c <osSemaphoreAcquire+0xa0>)
 80059ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059d2:	601a      	str	r2, [r3, #0]
 80059d4:	f3bf 8f4f 	dsb	sy
 80059d8:	f3bf 8f6f 	isb	sy
 80059dc:	e010      	b.n	8005a00 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80059de:	6839      	ldr	r1, [r7, #0]
 80059e0:	6938      	ldr	r0, [r7, #16]
 80059e2:	f000 febf 	bl	8006764 <xQueueSemaphoreTake>
 80059e6:	4603      	mov	r3, r0
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d009      	beq.n	8005a00 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d003      	beq.n	80059fa <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80059f2:	f06f 0301 	mvn.w	r3, #1
 80059f6:	617b      	str	r3, [r7, #20]
 80059f8:	e002      	b.n	8005a00 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80059fa:	f06f 0302 	mvn.w	r3, #2
 80059fe:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005a00:	697b      	ldr	r3, [r7, #20]
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3718      	adds	r7, #24
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
 8005a0a:	bf00      	nop
 8005a0c:	e000ed04 	.word	0xe000ed04

08005a10 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b086      	sub	sp, #24
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d103      	bne.n	8005a2e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8005a26:	f06f 0303 	mvn.w	r3, #3
 8005a2a:	617b      	str	r3, [r7, #20]
 8005a2c:	e02c      	b.n	8005a88 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a2e:	f3ef 8305 	mrs	r3, IPSR
 8005a32:	60fb      	str	r3, [r7, #12]
  return(result);
 8005a34:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d01a      	beq.n	8005a70 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005a3e:	f107 0308 	add.w	r3, r7, #8
 8005a42:	4619      	mov	r1, r3
 8005a44:	6938      	ldr	r0, [r7, #16]
 8005a46:	f000 fd1b 	bl	8006480 <xQueueGiveFromISR>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d003      	beq.n	8005a58 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8005a50:	f06f 0302 	mvn.w	r3, #2
 8005a54:	617b      	str	r3, [r7, #20]
 8005a56:	e017      	b.n	8005a88 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d014      	beq.n	8005a88 <osSemaphoreRelease+0x78>
 8005a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8005a94 <osSemaphoreRelease+0x84>)
 8005a60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a64:	601a      	str	r2, [r3, #0]
 8005a66:	f3bf 8f4f 	dsb	sy
 8005a6a:	f3bf 8f6f 	isb	sy
 8005a6e:	e00b      	b.n	8005a88 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005a70:	2300      	movs	r3, #0
 8005a72:	2200      	movs	r2, #0
 8005a74:	2100      	movs	r1, #0
 8005a76:	6938      	ldr	r0, [r7, #16]
 8005a78:	f000 fb62 	bl	8006140 <xQueueGenericSend>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d002      	beq.n	8005a88 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8005a82:	f06f 0302 	mvn.w	r3, #2
 8005a86:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8005a88:	697b      	ldr	r3, [r7, #20]
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3718      	adds	r7, #24
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	bf00      	nop
 8005a94:	e000ed04 	.word	0xe000ed04

08005a98 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005a98:	b480      	push	{r7}
 8005a9a:	b085      	sub	sp, #20
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	60b9      	str	r1, [r7, #8]
 8005aa2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	4a07      	ldr	r2, [pc, #28]	@ (8005ac4 <vApplicationGetIdleTaskMemory+0x2c>)
 8005aa8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	4a06      	ldr	r2, [pc, #24]	@ (8005ac8 <vApplicationGetIdleTaskMemory+0x30>)
 8005aae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2280      	movs	r2, #128	@ 0x80
 8005ab4:	601a      	str	r2, [r3, #0]
}
 8005ab6:	bf00      	nop
 8005ab8:	3714      	adds	r7, #20
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr
 8005ac2:	bf00      	nop
 8005ac4:	200007e8 	.word	0x200007e8
 8005ac8:	20000844 	.word	0x20000844

08005acc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005acc:	b480      	push	{r7}
 8005ace:	b085      	sub	sp, #20
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	60b9      	str	r1, [r7, #8]
 8005ad6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	4a07      	ldr	r2, [pc, #28]	@ (8005af8 <vApplicationGetTimerTaskMemory+0x2c>)
 8005adc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	4a06      	ldr	r2, [pc, #24]	@ (8005afc <vApplicationGetTimerTaskMemory+0x30>)
 8005ae2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005aea:	601a      	str	r2, [r3, #0]
}
 8005aec:	bf00      	nop
 8005aee:	3714      	adds	r7, #20
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr
 8005af8:	20000a44 	.word	0x20000a44
 8005afc:	20000aa0 	.word	0x20000aa0

08005b00 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005b00:	b480      	push	{r7}
 8005b02:	b083      	sub	sp, #12
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f103 0208 	add.w	r2, r3, #8
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f04f 32ff 	mov.w	r2, #4294967295
 8005b18:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f103 0208 	add.w	r2, r3, #8
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f103 0208 	add.w	r2, r3, #8
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005b34:	bf00      	nop
 8005b36:	370c      	adds	r7, #12
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr

08005b40 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005b40:	b480      	push	{r7}
 8005b42:	b083      	sub	sp, #12
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005b4e:	bf00      	nop
 8005b50:	370c      	adds	r7, #12
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr

08005b5a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005b5a:	b480      	push	{r7}
 8005b5c:	b085      	sub	sp, #20
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	6078      	str	r0, [r7, #4]
 8005b62:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	68fa      	ldr	r2, [r7, #12]
 8005b6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	689a      	ldr	r2, [r3, #8]
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	683a      	ldr	r2, [r7, #0]
 8005b7e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	683a      	ldr	r2, [r7, #0]
 8005b84:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	687a      	ldr	r2, [r7, #4]
 8005b8a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	1c5a      	adds	r2, r3, #1
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	601a      	str	r2, [r3, #0]
}
 8005b96:	bf00      	nop
 8005b98:	3714      	adds	r7, #20
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr

08005ba2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005ba2:	b480      	push	{r7}
 8005ba4:	b085      	sub	sp, #20
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
 8005baa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bb8:	d103      	bne.n	8005bc2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	691b      	ldr	r3, [r3, #16]
 8005bbe:	60fb      	str	r3, [r7, #12]
 8005bc0:	e00c      	b.n	8005bdc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	3308      	adds	r3, #8
 8005bc6:	60fb      	str	r3, [r7, #12]
 8005bc8:	e002      	b.n	8005bd0 <vListInsert+0x2e>
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	60fb      	str	r3, [r7, #12]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	68ba      	ldr	r2, [r7, #8]
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d2f6      	bcs.n	8005bca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	685a      	ldr	r2, [r3, #4]
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	683a      	ldr	r2, [r7, #0]
 8005bea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	68fa      	ldr	r2, [r7, #12]
 8005bf0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	683a      	ldr	r2, [r7, #0]
 8005bf6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	687a      	ldr	r2, [r7, #4]
 8005bfc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	1c5a      	adds	r2, r3, #1
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	601a      	str	r2, [r3, #0]
}
 8005c08:	bf00      	nop
 8005c0a:	3714      	adds	r7, #20
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr

08005c14 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005c14:	b480      	push	{r7}
 8005c16:	b085      	sub	sp, #20
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	691b      	ldr	r3, [r3, #16]
 8005c20:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	6892      	ldr	r2, [r2, #8]
 8005c2a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	6852      	ldr	r2, [r2, #4]
 8005c34:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d103      	bne.n	8005c48 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	689a      	ldr	r2, [r3, #8]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	1e5a      	subs	r2, r3, #1
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3714      	adds	r7, #20
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr

08005c68 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b084      	sub	sp, #16
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d10b      	bne.n	8005c94 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005c7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c80:	f383 8811 	msr	BASEPRI, r3
 8005c84:	f3bf 8f6f 	isb	sy
 8005c88:	f3bf 8f4f 	dsb	sy
 8005c8c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005c8e:	bf00      	nop
 8005c90:	bf00      	nop
 8005c92:	e7fd      	b.n	8005c90 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005c94:	f002 fd70 	bl	8008778 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ca0:	68f9      	ldr	r1, [r7, #12]
 8005ca2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005ca4:	fb01 f303 	mul.w	r3, r1, r3
 8005ca8:	441a      	add	r2, r3
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cc4:	3b01      	subs	r3, #1
 8005cc6:	68f9      	ldr	r1, [r7, #12]
 8005cc8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005cca:	fb01 f303 	mul.w	r3, r1, r3
 8005cce:	441a      	add	r2, r3
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	22ff      	movs	r2, #255	@ 0xff
 8005cd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	22ff      	movs	r2, #255	@ 0xff
 8005ce0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d114      	bne.n	8005d14 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d01a      	beq.n	8005d28 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	3310      	adds	r3, #16
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f001 fd04 	bl	8007704 <xTaskRemoveFromEventList>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d012      	beq.n	8005d28 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005d02:	4b0d      	ldr	r3, [pc, #52]	@ (8005d38 <xQueueGenericReset+0xd0>)
 8005d04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d08:	601a      	str	r2, [r3, #0]
 8005d0a:	f3bf 8f4f 	dsb	sy
 8005d0e:	f3bf 8f6f 	isb	sy
 8005d12:	e009      	b.n	8005d28 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	3310      	adds	r3, #16
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f7ff fef1 	bl	8005b00 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	3324      	adds	r3, #36	@ 0x24
 8005d22:	4618      	mov	r0, r3
 8005d24:	f7ff feec 	bl	8005b00 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005d28:	f002 fd58 	bl	80087dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005d2c:	2301      	movs	r3, #1
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3710      	adds	r7, #16
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	bf00      	nop
 8005d38:	e000ed04 	.word	0xe000ed04

08005d3c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b08e      	sub	sp, #56	@ 0x38
 8005d40:	af02      	add	r7, sp, #8
 8005d42:	60f8      	str	r0, [r7, #12]
 8005d44:	60b9      	str	r1, [r7, #8]
 8005d46:	607a      	str	r2, [r7, #4]
 8005d48:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d10b      	bne.n	8005d68 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005d50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d54:	f383 8811 	msr	BASEPRI, r3
 8005d58:	f3bf 8f6f 	isb	sy
 8005d5c:	f3bf 8f4f 	dsb	sy
 8005d60:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005d62:	bf00      	nop
 8005d64:	bf00      	nop
 8005d66:	e7fd      	b.n	8005d64 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d10b      	bne.n	8005d86 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d72:	f383 8811 	msr	BASEPRI, r3
 8005d76:	f3bf 8f6f 	isb	sy
 8005d7a:	f3bf 8f4f 	dsb	sy
 8005d7e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005d80:	bf00      	nop
 8005d82:	bf00      	nop
 8005d84:	e7fd      	b.n	8005d82 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d002      	beq.n	8005d92 <xQueueGenericCreateStatic+0x56>
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d001      	beq.n	8005d96 <xQueueGenericCreateStatic+0x5a>
 8005d92:	2301      	movs	r3, #1
 8005d94:	e000      	b.n	8005d98 <xQueueGenericCreateStatic+0x5c>
 8005d96:	2300      	movs	r3, #0
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d10b      	bne.n	8005db4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005d9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005da0:	f383 8811 	msr	BASEPRI, r3
 8005da4:	f3bf 8f6f 	isb	sy
 8005da8:	f3bf 8f4f 	dsb	sy
 8005dac:	623b      	str	r3, [r7, #32]
}
 8005dae:	bf00      	nop
 8005db0:	bf00      	nop
 8005db2:	e7fd      	b.n	8005db0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d102      	bne.n	8005dc0 <xQueueGenericCreateStatic+0x84>
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d101      	bne.n	8005dc4 <xQueueGenericCreateStatic+0x88>
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	e000      	b.n	8005dc6 <xQueueGenericCreateStatic+0x8a>
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d10b      	bne.n	8005de2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005dca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dce:	f383 8811 	msr	BASEPRI, r3
 8005dd2:	f3bf 8f6f 	isb	sy
 8005dd6:	f3bf 8f4f 	dsb	sy
 8005dda:	61fb      	str	r3, [r7, #28]
}
 8005ddc:	bf00      	nop
 8005dde:	bf00      	nop
 8005de0:	e7fd      	b.n	8005dde <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005de2:	2350      	movs	r3, #80	@ 0x50
 8005de4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	2b50      	cmp	r3, #80	@ 0x50
 8005dea:	d00b      	beq.n	8005e04 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005dec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005df0:	f383 8811 	msr	BASEPRI, r3
 8005df4:	f3bf 8f6f 	isb	sy
 8005df8:	f3bf 8f4f 	dsb	sy
 8005dfc:	61bb      	str	r3, [r7, #24]
}
 8005dfe:	bf00      	nop
 8005e00:	bf00      	nop
 8005e02:	e7fd      	b.n	8005e00 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005e04:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005e0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d00d      	beq.n	8005e2c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005e10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005e18:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005e1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e1e:	9300      	str	r3, [sp, #0]
 8005e20:	4613      	mov	r3, r2
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	68b9      	ldr	r1, [r7, #8]
 8005e26:	68f8      	ldr	r0, [r7, #12]
 8005e28:	f000 f840 	bl	8005eac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005e2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3730      	adds	r7, #48	@ 0x30
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}

08005e36 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005e36:	b580      	push	{r7, lr}
 8005e38:	b08a      	sub	sp, #40	@ 0x28
 8005e3a:	af02      	add	r7, sp, #8
 8005e3c:	60f8      	str	r0, [r7, #12]
 8005e3e:	60b9      	str	r1, [r7, #8]
 8005e40:	4613      	mov	r3, r2
 8005e42:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d10b      	bne.n	8005e62 <xQueueGenericCreate+0x2c>
	__asm volatile
 8005e4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e4e:	f383 8811 	msr	BASEPRI, r3
 8005e52:	f3bf 8f6f 	isb	sy
 8005e56:	f3bf 8f4f 	dsb	sy
 8005e5a:	613b      	str	r3, [r7, #16]
}
 8005e5c:	bf00      	nop
 8005e5e:	bf00      	nop
 8005e60:	e7fd      	b.n	8005e5e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	68ba      	ldr	r2, [r7, #8]
 8005e66:	fb02 f303 	mul.w	r3, r2, r3
 8005e6a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005e6c:	69fb      	ldr	r3, [r7, #28]
 8005e6e:	3350      	adds	r3, #80	@ 0x50
 8005e70:	4618      	mov	r0, r3
 8005e72:	f002 fda3 	bl	80089bc <pvPortMalloc>
 8005e76:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005e78:	69bb      	ldr	r3, [r7, #24]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d011      	beq.n	8005ea2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005e7e:	69bb      	ldr	r3, [r7, #24]
 8005e80:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	3350      	adds	r3, #80	@ 0x50
 8005e86:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005e88:	69bb      	ldr	r3, [r7, #24]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005e90:	79fa      	ldrb	r2, [r7, #7]
 8005e92:	69bb      	ldr	r3, [r7, #24]
 8005e94:	9300      	str	r3, [sp, #0]
 8005e96:	4613      	mov	r3, r2
 8005e98:	697a      	ldr	r2, [r7, #20]
 8005e9a:	68b9      	ldr	r1, [r7, #8]
 8005e9c:	68f8      	ldr	r0, [r7, #12]
 8005e9e:	f000 f805 	bl	8005eac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005ea2:	69bb      	ldr	r3, [r7, #24]
	}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3720      	adds	r7, #32
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}

08005eac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b084      	sub	sp, #16
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	60f8      	str	r0, [r7, #12]
 8005eb4:	60b9      	str	r1, [r7, #8]
 8005eb6:	607a      	str	r2, [r7, #4]
 8005eb8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d103      	bne.n	8005ec8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005ec0:	69bb      	ldr	r3, [r7, #24]
 8005ec2:	69ba      	ldr	r2, [r7, #24]
 8005ec4:	601a      	str	r2, [r3, #0]
 8005ec6:	e002      	b.n	8005ece <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005ec8:	69bb      	ldr	r3, [r7, #24]
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005ece:	69bb      	ldr	r3, [r7, #24]
 8005ed0:	68fa      	ldr	r2, [r7, #12]
 8005ed2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005ed4:	69bb      	ldr	r3, [r7, #24]
 8005ed6:	68ba      	ldr	r2, [r7, #8]
 8005ed8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005eda:	2101      	movs	r1, #1
 8005edc:	69b8      	ldr	r0, [r7, #24]
 8005ede:	f7ff fec3 	bl	8005c68 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	78fa      	ldrb	r2, [r7, #3]
 8005ee6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005eea:	bf00      	nop
 8005eec:	3710      	adds	r7, #16
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}

08005ef2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005ef2:	b580      	push	{r7, lr}
 8005ef4:	b082      	sub	sp, #8
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d00e      	beq.n	8005f1e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2200      	movs	r2, #0
 8005f04:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005f12:	2300      	movs	r3, #0
 8005f14:	2200      	movs	r2, #0
 8005f16:	2100      	movs	r1, #0
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f000 f911 	bl	8006140 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005f1e:	bf00      	nop
 8005f20:	3708      	adds	r7, #8
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}

08005f26 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005f26:	b580      	push	{r7, lr}
 8005f28:	b086      	sub	sp, #24
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005f30:	2301      	movs	r3, #1
 8005f32:	617b      	str	r3, [r7, #20]
 8005f34:	2300      	movs	r3, #0
 8005f36:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005f38:	79fb      	ldrb	r3, [r7, #7]
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	6939      	ldr	r1, [r7, #16]
 8005f3e:	6978      	ldr	r0, [r7, #20]
 8005f40:	f7ff ff79 	bl	8005e36 <xQueueGenericCreate>
 8005f44:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005f46:	68f8      	ldr	r0, [r7, #12]
 8005f48:	f7ff ffd3 	bl	8005ef2 <prvInitialiseMutex>

		return xNewQueue;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
	}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3718      	adds	r7, #24
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}

08005f56 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005f56:	b580      	push	{r7, lr}
 8005f58:	b088      	sub	sp, #32
 8005f5a:	af02      	add	r7, sp, #8
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	6039      	str	r1, [r7, #0]
 8005f60:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005f62:	2301      	movs	r3, #1
 8005f64:	617b      	str	r3, [r7, #20]
 8005f66:	2300      	movs	r3, #0
 8005f68:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005f6a:	79fb      	ldrb	r3, [r7, #7]
 8005f6c:	9300      	str	r3, [sp, #0]
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	2200      	movs	r2, #0
 8005f72:	6939      	ldr	r1, [r7, #16]
 8005f74:	6978      	ldr	r0, [r7, #20]
 8005f76:	f7ff fee1 	bl	8005d3c <xQueueGenericCreateStatic>
 8005f7a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005f7c:	68f8      	ldr	r0, [r7, #12]
 8005f7e:	f7ff ffb8 	bl	8005ef2 <prvInitialiseMutex>

		return xNewQueue;
 8005f82:	68fb      	ldr	r3, [r7, #12]
	}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3718      	adds	r7, #24
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8005f8c:	b590      	push	{r4, r7, lr}
 8005f8e:	b087      	sub	sp, #28
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d10b      	bne.n	8005fb6 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8005f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fa2:	f383 8811 	msr	BASEPRI, r3
 8005fa6:	f3bf 8f6f 	isb	sy
 8005faa:	f3bf 8f4f 	dsb	sy
 8005fae:	60fb      	str	r3, [r7, #12]
}
 8005fb0:	bf00      	nop
 8005fb2:	bf00      	nop
 8005fb4:	e7fd      	b.n	8005fb2 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	689c      	ldr	r4, [r3, #8]
 8005fba:	f001 fd63 	bl	8007a84 <xTaskGetCurrentTaskHandle>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	429c      	cmp	r4, r3
 8005fc2:	d111      	bne.n	8005fe8 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	68db      	ldr	r3, [r3, #12]
 8005fc8:	1e5a      	subs	r2, r3, #1
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	68db      	ldr	r3, [r3, #12]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d105      	bne.n	8005fe2 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	2200      	movs	r2, #0
 8005fda:	2100      	movs	r1, #0
 8005fdc:	6938      	ldr	r0, [r7, #16]
 8005fde:	f000 f8af 	bl	8006140 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	617b      	str	r3, [r7, #20]
 8005fe6:	e001      	b.n	8005fec <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8005fec:	697b      	ldr	r3, [r7, #20]
	}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	371c      	adds	r7, #28
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd90      	pop	{r4, r7, pc}

08005ff6 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8005ff6:	b590      	push	{r4, r7, lr}
 8005ff8:	b087      	sub	sp, #28
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	6078      	str	r0, [r7, #4]
 8005ffe:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d10b      	bne.n	8006022 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800600a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800600e:	f383 8811 	msr	BASEPRI, r3
 8006012:	f3bf 8f6f 	isb	sy
 8006016:	f3bf 8f4f 	dsb	sy
 800601a:	60fb      	str	r3, [r7, #12]
}
 800601c:	bf00      	nop
 800601e:	bf00      	nop
 8006020:	e7fd      	b.n	800601e <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	689c      	ldr	r4, [r3, #8]
 8006026:	f001 fd2d 	bl	8007a84 <xTaskGetCurrentTaskHandle>
 800602a:	4603      	mov	r3, r0
 800602c:	429c      	cmp	r4, r3
 800602e:	d107      	bne.n	8006040 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	68db      	ldr	r3, [r3, #12]
 8006034:	1c5a      	adds	r2, r3, #1
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800603a:	2301      	movs	r3, #1
 800603c:	617b      	str	r3, [r7, #20]
 800603e:	e00c      	b.n	800605a <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8006040:	6839      	ldr	r1, [r7, #0]
 8006042:	6938      	ldr	r0, [r7, #16]
 8006044:	f000 fb8e 	bl	8006764 <xQueueSemaphoreTake>
 8006048:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d004      	beq.n	800605a <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	1c5a      	adds	r2, r3, #1
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800605a:	697b      	ldr	r3, [r7, #20]
	}
 800605c:	4618      	mov	r0, r3
 800605e:	371c      	adds	r7, #28
 8006060:	46bd      	mov	sp, r7
 8006062:	bd90      	pop	{r4, r7, pc}

08006064 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006064:	b580      	push	{r7, lr}
 8006066:	b08a      	sub	sp, #40	@ 0x28
 8006068:	af02      	add	r7, sp, #8
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	60b9      	str	r1, [r7, #8]
 800606e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d10b      	bne.n	800608e <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8006076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800607a:	f383 8811 	msr	BASEPRI, r3
 800607e:	f3bf 8f6f 	isb	sy
 8006082:	f3bf 8f4f 	dsb	sy
 8006086:	61bb      	str	r3, [r7, #24]
}
 8006088:	bf00      	nop
 800608a:	bf00      	nop
 800608c:	e7fd      	b.n	800608a <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800608e:	68ba      	ldr	r2, [r7, #8]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	429a      	cmp	r2, r3
 8006094:	d90b      	bls.n	80060ae <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8006096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800609a:	f383 8811 	msr	BASEPRI, r3
 800609e:	f3bf 8f6f 	isb	sy
 80060a2:	f3bf 8f4f 	dsb	sy
 80060a6:	617b      	str	r3, [r7, #20]
}
 80060a8:	bf00      	nop
 80060aa:	bf00      	nop
 80060ac:	e7fd      	b.n	80060aa <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80060ae:	2302      	movs	r3, #2
 80060b0:	9300      	str	r3, [sp, #0]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2200      	movs	r2, #0
 80060b6:	2100      	movs	r1, #0
 80060b8:	68f8      	ldr	r0, [r7, #12]
 80060ba:	f7ff fe3f 	bl	8005d3c <xQueueGenericCreateStatic>
 80060be:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80060c0:	69fb      	ldr	r3, [r7, #28]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d002      	beq.n	80060cc <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80060c6:	69fb      	ldr	r3, [r7, #28]
 80060c8:	68ba      	ldr	r2, [r7, #8]
 80060ca:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80060cc:	69fb      	ldr	r3, [r7, #28]
	}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3720      	adds	r7, #32
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}

080060d6 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80060d6:	b580      	push	{r7, lr}
 80060d8:	b086      	sub	sp, #24
 80060da:	af00      	add	r7, sp, #0
 80060dc:	6078      	str	r0, [r7, #4]
 80060de:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d10b      	bne.n	80060fe <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 80060e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060ea:	f383 8811 	msr	BASEPRI, r3
 80060ee:	f3bf 8f6f 	isb	sy
 80060f2:	f3bf 8f4f 	dsb	sy
 80060f6:	613b      	str	r3, [r7, #16]
}
 80060f8:	bf00      	nop
 80060fa:	bf00      	nop
 80060fc:	e7fd      	b.n	80060fa <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80060fe:	683a      	ldr	r2, [r7, #0]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	429a      	cmp	r2, r3
 8006104:	d90b      	bls.n	800611e <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8006106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800610a:	f383 8811 	msr	BASEPRI, r3
 800610e:	f3bf 8f6f 	isb	sy
 8006112:	f3bf 8f4f 	dsb	sy
 8006116:	60fb      	str	r3, [r7, #12]
}
 8006118:	bf00      	nop
 800611a:	bf00      	nop
 800611c:	e7fd      	b.n	800611a <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800611e:	2202      	movs	r2, #2
 8006120:	2100      	movs	r1, #0
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f7ff fe87 	bl	8005e36 <xQueueGenericCreate>
 8006128:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d002      	beq.n	8006136 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	683a      	ldr	r2, [r7, #0]
 8006134:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006136:	697b      	ldr	r3, [r7, #20]
	}
 8006138:	4618      	mov	r0, r3
 800613a:	3718      	adds	r7, #24
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}

08006140 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b08e      	sub	sp, #56	@ 0x38
 8006144:	af00      	add	r7, sp, #0
 8006146:	60f8      	str	r0, [r7, #12]
 8006148:	60b9      	str	r1, [r7, #8]
 800614a:	607a      	str	r2, [r7, #4]
 800614c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800614e:	2300      	movs	r3, #0
 8006150:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006158:	2b00      	cmp	r3, #0
 800615a:	d10b      	bne.n	8006174 <xQueueGenericSend+0x34>
	__asm volatile
 800615c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006160:	f383 8811 	msr	BASEPRI, r3
 8006164:	f3bf 8f6f 	isb	sy
 8006168:	f3bf 8f4f 	dsb	sy
 800616c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800616e:	bf00      	nop
 8006170:	bf00      	nop
 8006172:	e7fd      	b.n	8006170 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d103      	bne.n	8006182 <xQueueGenericSend+0x42>
 800617a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800617c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800617e:	2b00      	cmp	r3, #0
 8006180:	d101      	bne.n	8006186 <xQueueGenericSend+0x46>
 8006182:	2301      	movs	r3, #1
 8006184:	e000      	b.n	8006188 <xQueueGenericSend+0x48>
 8006186:	2300      	movs	r3, #0
 8006188:	2b00      	cmp	r3, #0
 800618a:	d10b      	bne.n	80061a4 <xQueueGenericSend+0x64>
	__asm volatile
 800618c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006190:	f383 8811 	msr	BASEPRI, r3
 8006194:	f3bf 8f6f 	isb	sy
 8006198:	f3bf 8f4f 	dsb	sy
 800619c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800619e:	bf00      	nop
 80061a0:	bf00      	nop
 80061a2:	e7fd      	b.n	80061a0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	2b02      	cmp	r3, #2
 80061a8:	d103      	bne.n	80061b2 <xQueueGenericSend+0x72>
 80061aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d101      	bne.n	80061b6 <xQueueGenericSend+0x76>
 80061b2:	2301      	movs	r3, #1
 80061b4:	e000      	b.n	80061b8 <xQueueGenericSend+0x78>
 80061b6:	2300      	movs	r3, #0
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d10b      	bne.n	80061d4 <xQueueGenericSend+0x94>
	__asm volatile
 80061bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061c0:	f383 8811 	msr	BASEPRI, r3
 80061c4:	f3bf 8f6f 	isb	sy
 80061c8:	f3bf 8f4f 	dsb	sy
 80061cc:	623b      	str	r3, [r7, #32]
}
 80061ce:	bf00      	nop
 80061d0:	bf00      	nop
 80061d2:	e7fd      	b.n	80061d0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80061d4:	f001 fc66 	bl	8007aa4 <xTaskGetSchedulerState>
 80061d8:	4603      	mov	r3, r0
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d102      	bne.n	80061e4 <xQueueGenericSend+0xa4>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d101      	bne.n	80061e8 <xQueueGenericSend+0xa8>
 80061e4:	2301      	movs	r3, #1
 80061e6:	e000      	b.n	80061ea <xQueueGenericSend+0xaa>
 80061e8:	2300      	movs	r3, #0
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d10b      	bne.n	8006206 <xQueueGenericSend+0xc6>
	__asm volatile
 80061ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061f2:	f383 8811 	msr	BASEPRI, r3
 80061f6:	f3bf 8f6f 	isb	sy
 80061fa:	f3bf 8f4f 	dsb	sy
 80061fe:	61fb      	str	r3, [r7, #28]
}
 8006200:	bf00      	nop
 8006202:	bf00      	nop
 8006204:	e7fd      	b.n	8006202 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006206:	f002 fab7 	bl	8008778 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800620a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800620c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800620e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006210:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006212:	429a      	cmp	r2, r3
 8006214:	d302      	bcc.n	800621c <xQueueGenericSend+0xdc>
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	2b02      	cmp	r3, #2
 800621a:	d129      	bne.n	8006270 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800621c:	683a      	ldr	r2, [r7, #0]
 800621e:	68b9      	ldr	r1, [r7, #8]
 8006220:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006222:	f000 fc6d 	bl	8006b00 <prvCopyDataToQueue>
 8006226:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800622a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800622c:	2b00      	cmp	r3, #0
 800622e:	d010      	beq.n	8006252 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006232:	3324      	adds	r3, #36	@ 0x24
 8006234:	4618      	mov	r0, r3
 8006236:	f001 fa65 	bl	8007704 <xTaskRemoveFromEventList>
 800623a:	4603      	mov	r3, r0
 800623c:	2b00      	cmp	r3, #0
 800623e:	d013      	beq.n	8006268 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006240:	4b3f      	ldr	r3, [pc, #252]	@ (8006340 <xQueueGenericSend+0x200>)
 8006242:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006246:	601a      	str	r2, [r3, #0]
 8006248:	f3bf 8f4f 	dsb	sy
 800624c:	f3bf 8f6f 	isb	sy
 8006250:	e00a      	b.n	8006268 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006252:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006254:	2b00      	cmp	r3, #0
 8006256:	d007      	beq.n	8006268 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006258:	4b39      	ldr	r3, [pc, #228]	@ (8006340 <xQueueGenericSend+0x200>)
 800625a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800625e:	601a      	str	r2, [r3, #0]
 8006260:	f3bf 8f4f 	dsb	sy
 8006264:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006268:	f002 fab8 	bl	80087dc <vPortExitCritical>
				return pdPASS;
 800626c:	2301      	movs	r3, #1
 800626e:	e063      	b.n	8006338 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d103      	bne.n	800627e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006276:	f002 fab1 	bl	80087dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800627a:	2300      	movs	r3, #0
 800627c:	e05c      	b.n	8006338 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800627e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006280:	2b00      	cmp	r3, #0
 8006282:	d106      	bne.n	8006292 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006284:	f107 0314 	add.w	r3, r7, #20
 8006288:	4618      	mov	r0, r3
 800628a:	f001 fa9f 	bl	80077cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800628e:	2301      	movs	r3, #1
 8006290:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006292:	f002 faa3 	bl	80087dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006296:	f001 f80f 	bl	80072b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800629a:	f002 fa6d 	bl	8008778 <vPortEnterCritical>
 800629e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80062a4:	b25b      	sxtb	r3, r3
 80062a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062aa:	d103      	bne.n	80062b4 <xQueueGenericSend+0x174>
 80062ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ae:	2200      	movs	r2, #0
 80062b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80062b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062b6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80062ba:	b25b      	sxtb	r3, r3
 80062bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062c0:	d103      	bne.n	80062ca <xQueueGenericSend+0x18a>
 80062c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062c4:	2200      	movs	r2, #0
 80062c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80062ca:	f002 fa87 	bl	80087dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80062ce:	1d3a      	adds	r2, r7, #4
 80062d0:	f107 0314 	add.w	r3, r7, #20
 80062d4:	4611      	mov	r1, r2
 80062d6:	4618      	mov	r0, r3
 80062d8:	f001 fa8e 	bl	80077f8 <xTaskCheckForTimeOut>
 80062dc:	4603      	mov	r3, r0
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d124      	bne.n	800632c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80062e2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80062e4:	f000 fd04 	bl	8006cf0 <prvIsQueueFull>
 80062e8:	4603      	mov	r3, r0
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d018      	beq.n	8006320 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80062ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062f0:	3310      	adds	r3, #16
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	4611      	mov	r1, r2
 80062f6:	4618      	mov	r0, r3
 80062f8:	f001 f9b2 	bl	8007660 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80062fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80062fe:	f000 fc8f 	bl	8006c20 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006302:	f000 ffe7 	bl	80072d4 <xTaskResumeAll>
 8006306:	4603      	mov	r3, r0
 8006308:	2b00      	cmp	r3, #0
 800630a:	f47f af7c 	bne.w	8006206 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800630e:	4b0c      	ldr	r3, [pc, #48]	@ (8006340 <xQueueGenericSend+0x200>)
 8006310:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006314:	601a      	str	r2, [r3, #0]
 8006316:	f3bf 8f4f 	dsb	sy
 800631a:	f3bf 8f6f 	isb	sy
 800631e:	e772      	b.n	8006206 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006320:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006322:	f000 fc7d 	bl	8006c20 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006326:	f000 ffd5 	bl	80072d4 <xTaskResumeAll>
 800632a:	e76c      	b.n	8006206 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800632c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800632e:	f000 fc77 	bl	8006c20 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006332:	f000 ffcf 	bl	80072d4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006336:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006338:	4618      	mov	r0, r3
 800633a:	3738      	adds	r7, #56	@ 0x38
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}
 8006340:	e000ed04 	.word	0xe000ed04

08006344 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b090      	sub	sp, #64	@ 0x40
 8006348:	af00      	add	r7, sp, #0
 800634a:	60f8      	str	r0, [r7, #12]
 800634c:	60b9      	str	r1, [r7, #8]
 800634e:	607a      	str	r2, [r7, #4]
 8006350:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006358:	2b00      	cmp	r3, #0
 800635a:	d10b      	bne.n	8006374 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800635c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006360:	f383 8811 	msr	BASEPRI, r3
 8006364:	f3bf 8f6f 	isb	sy
 8006368:	f3bf 8f4f 	dsb	sy
 800636c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800636e:	bf00      	nop
 8006370:	bf00      	nop
 8006372:	e7fd      	b.n	8006370 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d103      	bne.n	8006382 <xQueueGenericSendFromISR+0x3e>
 800637a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800637c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800637e:	2b00      	cmp	r3, #0
 8006380:	d101      	bne.n	8006386 <xQueueGenericSendFromISR+0x42>
 8006382:	2301      	movs	r3, #1
 8006384:	e000      	b.n	8006388 <xQueueGenericSendFromISR+0x44>
 8006386:	2300      	movs	r3, #0
 8006388:	2b00      	cmp	r3, #0
 800638a:	d10b      	bne.n	80063a4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800638c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006390:	f383 8811 	msr	BASEPRI, r3
 8006394:	f3bf 8f6f 	isb	sy
 8006398:	f3bf 8f4f 	dsb	sy
 800639c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800639e:	bf00      	nop
 80063a0:	bf00      	nop
 80063a2:	e7fd      	b.n	80063a0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	2b02      	cmp	r3, #2
 80063a8:	d103      	bne.n	80063b2 <xQueueGenericSendFromISR+0x6e>
 80063aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d101      	bne.n	80063b6 <xQueueGenericSendFromISR+0x72>
 80063b2:	2301      	movs	r3, #1
 80063b4:	e000      	b.n	80063b8 <xQueueGenericSendFromISR+0x74>
 80063b6:	2300      	movs	r3, #0
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d10b      	bne.n	80063d4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80063bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063c0:	f383 8811 	msr	BASEPRI, r3
 80063c4:	f3bf 8f6f 	isb	sy
 80063c8:	f3bf 8f4f 	dsb	sy
 80063cc:	623b      	str	r3, [r7, #32]
}
 80063ce:	bf00      	nop
 80063d0:	bf00      	nop
 80063d2:	e7fd      	b.n	80063d0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80063d4:	f002 fab0 	bl	8008938 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80063d8:	f3ef 8211 	mrs	r2, BASEPRI
 80063dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063e0:	f383 8811 	msr	BASEPRI, r3
 80063e4:	f3bf 8f6f 	isb	sy
 80063e8:	f3bf 8f4f 	dsb	sy
 80063ec:	61fa      	str	r2, [r7, #28]
 80063ee:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80063f0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80063f2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80063f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80063f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d302      	bcc.n	8006406 <xQueueGenericSendFromISR+0xc2>
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	2b02      	cmp	r3, #2
 8006404:	d12f      	bne.n	8006466 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006408:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800640c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006412:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006414:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006416:	683a      	ldr	r2, [r7, #0]
 8006418:	68b9      	ldr	r1, [r7, #8]
 800641a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800641c:	f000 fb70 	bl	8006b00 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006420:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006428:	d112      	bne.n	8006450 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800642a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800642c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800642e:	2b00      	cmp	r3, #0
 8006430:	d016      	beq.n	8006460 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006434:	3324      	adds	r3, #36	@ 0x24
 8006436:	4618      	mov	r0, r3
 8006438:	f001 f964 	bl	8007704 <xTaskRemoveFromEventList>
 800643c:	4603      	mov	r3, r0
 800643e:	2b00      	cmp	r3, #0
 8006440:	d00e      	beq.n	8006460 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d00b      	beq.n	8006460 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2201      	movs	r2, #1
 800644c:	601a      	str	r2, [r3, #0]
 800644e:	e007      	b.n	8006460 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006450:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006454:	3301      	adds	r3, #1
 8006456:	b2db      	uxtb	r3, r3
 8006458:	b25a      	sxtb	r2, r3
 800645a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800645c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006460:	2301      	movs	r3, #1
 8006462:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006464:	e001      	b.n	800646a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006466:	2300      	movs	r3, #0
 8006468:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800646a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800646c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006474:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006476:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006478:	4618      	mov	r0, r3
 800647a:	3740      	adds	r7, #64	@ 0x40
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}

08006480 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b08e      	sub	sp, #56	@ 0x38
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800648e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006490:	2b00      	cmp	r3, #0
 8006492:	d10b      	bne.n	80064ac <xQueueGiveFromISR+0x2c>
	__asm volatile
 8006494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006498:	f383 8811 	msr	BASEPRI, r3
 800649c:	f3bf 8f6f 	isb	sy
 80064a0:	f3bf 8f4f 	dsb	sy
 80064a4:	623b      	str	r3, [r7, #32]
}
 80064a6:	bf00      	nop
 80064a8:	bf00      	nop
 80064aa:	e7fd      	b.n	80064a8 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80064ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d00b      	beq.n	80064cc <xQueueGiveFromISR+0x4c>
	__asm volatile
 80064b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064b8:	f383 8811 	msr	BASEPRI, r3
 80064bc:	f3bf 8f6f 	isb	sy
 80064c0:	f3bf 8f4f 	dsb	sy
 80064c4:	61fb      	str	r3, [r7, #28]
}
 80064c6:	bf00      	nop
 80064c8:	bf00      	nop
 80064ca:	e7fd      	b.n	80064c8 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80064cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d103      	bne.n	80064dc <xQueueGiveFromISR+0x5c>
 80064d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d101      	bne.n	80064e0 <xQueueGiveFromISR+0x60>
 80064dc:	2301      	movs	r3, #1
 80064de:	e000      	b.n	80064e2 <xQueueGiveFromISR+0x62>
 80064e0:	2300      	movs	r3, #0
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d10b      	bne.n	80064fe <xQueueGiveFromISR+0x7e>
	__asm volatile
 80064e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064ea:	f383 8811 	msr	BASEPRI, r3
 80064ee:	f3bf 8f6f 	isb	sy
 80064f2:	f3bf 8f4f 	dsb	sy
 80064f6:	61bb      	str	r3, [r7, #24]
}
 80064f8:	bf00      	nop
 80064fa:	bf00      	nop
 80064fc:	e7fd      	b.n	80064fa <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80064fe:	f002 fa1b 	bl	8008938 <vPortValidateInterruptPriority>
	__asm volatile
 8006502:	f3ef 8211 	mrs	r2, BASEPRI
 8006506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800650a:	f383 8811 	msr	BASEPRI, r3
 800650e:	f3bf 8f6f 	isb	sy
 8006512:	f3bf 8f4f 	dsb	sy
 8006516:	617a      	str	r2, [r7, #20]
 8006518:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800651a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800651c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800651e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006520:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006522:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006526:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006528:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800652a:	429a      	cmp	r2, r3
 800652c:	d22b      	bcs.n	8006586 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800652e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006530:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006534:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800653a:	1c5a      	adds	r2, r3, #1
 800653c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800653e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006540:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006548:	d112      	bne.n	8006570 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800654a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800654c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800654e:	2b00      	cmp	r3, #0
 8006550:	d016      	beq.n	8006580 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006554:	3324      	adds	r3, #36	@ 0x24
 8006556:	4618      	mov	r0, r3
 8006558:	f001 f8d4 	bl	8007704 <xTaskRemoveFromEventList>
 800655c:	4603      	mov	r3, r0
 800655e:	2b00      	cmp	r3, #0
 8006560:	d00e      	beq.n	8006580 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d00b      	beq.n	8006580 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	2201      	movs	r2, #1
 800656c:	601a      	str	r2, [r3, #0]
 800656e:	e007      	b.n	8006580 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006570:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006574:	3301      	adds	r3, #1
 8006576:	b2db      	uxtb	r3, r3
 8006578:	b25a      	sxtb	r2, r3
 800657a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800657c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006580:	2301      	movs	r3, #1
 8006582:	637b      	str	r3, [r7, #52]	@ 0x34
 8006584:	e001      	b.n	800658a <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006586:	2300      	movs	r3, #0
 8006588:	637b      	str	r3, [r7, #52]	@ 0x34
 800658a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800658c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f383 8811 	msr	BASEPRI, r3
}
 8006594:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006596:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006598:	4618      	mov	r0, r3
 800659a:	3738      	adds	r7, #56	@ 0x38
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}

080065a0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b08c      	sub	sp, #48	@ 0x30
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	60f8      	str	r0, [r7, #12]
 80065a8:	60b9      	str	r1, [r7, #8]
 80065aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80065ac:	2300      	movs	r3, #0
 80065ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80065b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d10b      	bne.n	80065d2 <xQueueReceive+0x32>
	__asm volatile
 80065ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065be:	f383 8811 	msr	BASEPRI, r3
 80065c2:	f3bf 8f6f 	isb	sy
 80065c6:	f3bf 8f4f 	dsb	sy
 80065ca:	623b      	str	r3, [r7, #32]
}
 80065cc:	bf00      	nop
 80065ce:	bf00      	nop
 80065d0:	e7fd      	b.n	80065ce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d103      	bne.n	80065e0 <xQueueReceive+0x40>
 80065d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d101      	bne.n	80065e4 <xQueueReceive+0x44>
 80065e0:	2301      	movs	r3, #1
 80065e2:	e000      	b.n	80065e6 <xQueueReceive+0x46>
 80065e4:	2300      	movs	r3, #0
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d10b      	bne.n	8006602 <xQueueReceive+0x62>
	__asm volatile
 80065ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065ee:	f383 8811 	msr	BASEPRI, r3
 80065f2:	f3bf 8f6f 	isb	sy
 80065f6:	f3bf 8f4f 	dsb	sy
 80065fa:	61fb      	str	r3, [r7, #28]
}
 80065fc:	bf00      	nop
 80065fe:	bf00      	nop
 8006600:	e7fd      	b.n	80065fe <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006602:	f001 fa4f 	bl	8007aa4 <xTaskGetSchedulerState>
 8006606:	4603      	mov	r3, r0
 8006608:	2b00      	cmp	r3, #0
 800660a:	d102      	bne.n	8006612 <xQueueReceive+0x72>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d101      	bne.n	8006616 <xQueueReceive+0x76>
 8006612:	2301      	movs	r3, #1
 8006614:	e000      	b.n	8006618 <xQueueReceive+0x78>
 8006616:	2300      	movs	r3, #0
 8006618:	2b00      	cmp	r3, #0
 800661a:	d10b      	bne.n	8006634 <xQueueReceive+0x94>
	__asm volatile
 800661c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006620:	f383 8811 	msr	BASEPRI, r3
 8006624:	f3bf 8f6f 	isb	sy
 8006628:	f3bf 8f4f 	dsb	sy
 800662c:	61bb      	str	r3, [r7, #24]
}
 800662e:	bf00      	nop
 8006630:	bf00      	nop
 8006632:	e7fd      	b.n	8006630 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006634:	f002 f8a0 	bl	8008778 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800663a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800663c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800663e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006640:	2b00      	cmp	r3, #0
 8006642:	d01f      	beq.n	8006684 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006644:	68b9      	ldr	r1, [r7, #8]
 8006646:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006648:	f000 fac4 	bl	8006bd4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800664c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800664e:	1e5a      	subs	r2, r3, #1
 8006650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006652:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006656:	691b      	ldr	r3, [r3, #16]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d00f      	beq.n	800667c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800665c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800665e:	3310      	adds	r3, #16
 8006660:	4618      	mov	r0, r3
 8006662:	f001 f84f 	bl	8007704 <xTaskRemoveFromEventList>
 8006666:	4603      	mov	r3, r0
 8006668:	2b00      	cmp	r3, #0
 800666a:	d007      	beq.n	800667c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800666c:	4b3c      	ldr	r3, [pc, #240]	@ (8006760 <xQueueReceive+0x1c0>)
 800666e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006672:	601a      	str	r2, [r3, #0]
 8006674:	f3bf 8f4f 	dsb	sy
 8006678:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800667c:	f002 f8ae 	bl	80087dc <vPortExitCritical>
				return pdPASS;
 8006680:	2301      	movs	r3, #1
 8006682:	e069      	b.n	8006758 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d103      	bne.n	8006692 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800668a:	f002 f8a7 	bl	80087dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800668e:	2300      	movs	r3, #0
 8006690:	e062      	b.n	8006758 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006692:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006694:	2b00      	cmp	r3, #0
 8006696:	d106      	bne.n	80066a6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006698:	f107 0310 	add.w	r3, r7, #16
 800669c:	4618      	mov	r0, r3
 800669e:	f001 f895 	bl	80077cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80066a2:	2301      	movs	r3, #1
 80066a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80066a6:	f002 f899 	bl	80087dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80066aa:	f000 fe05 	bl	80072b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80066ae:	f002 f863 	bl	8008778 <vPortEnterCritical>
 80066b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80066b8:	b25b      	sxtb	r3, r3
 80066ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066be:	d103      	bne.n	80066c8 <xQueueReceive+0x128>
 80066c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066c2:	2200      	movs	r2, #0
 80066c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80066c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066ca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80066ce:	b25b      	sxtb	r3, r3
 80066d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066d4:	d103      	bne.n	80066de <xQueueReceive+0x13e>
 80066d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066d8:	2200      	movs	r2, #0
 80066da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80066de:	f002 f87d 	bl	80087dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80066e2:	1d3a      	adds	r2, r7, #4
 80066e4:	f107 0310 	add.w	r3, r7, #16
 80066e8:	4611      	mov	r1, r2
 80066ea:	4618      	mov	r0, r3
 80066ec:	f001 f884 	bl	80077f8 <xTaskCheckForTimeOut>
 80066f0:	4603      	mov	r3, r0
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d123      	bne.n	800673e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80066f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80066f8:	f000 fae4 	bl	8006cc4 <prvIsQueueEmpty>
 80066fc:	4603      	mov	r3, r0
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d017      	beq.n	8006732 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006704:	3324      	adds	r3, #36	@ 0x24
 8006706:	687a      	ldr	r2, [r7, #4]
 8006708:	4611      	mov	r1, r2
 800670a:	4618      	mov	r0, r3
 800670c:	f000 ffa8 	bl	8007660 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006710:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006712:	f000 fa85 	bl	8006c20 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006716:	f000 fddd 	bl	80072d4 <xTaskResumeAll>
 800671a:	4603      	mov	r3, r0
 800671c:	2b00      	cmp	r3, #0
 800671e:	d189      	bne.n	8006634 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006720:	4b0f      	ldr	r3, [pc, #60]	@ (8006760 <xQueueReceive+0x1c0>)
 8006722:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006726:	601a      	str	r2, [r3, #0]
 8006728:	f3bf 8f4f 	dsb	sy
 800672c:	f3bf 8f6f 	isb	sy
 8006730:	e780      	b.n	8006634 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006732:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006734:	f000 fa74 	bl	8006c20 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006738:	f000 fdcc 	bl	80072d4 <xTaskResumeAll>
 800673c:	e77a      	b.n	8006634 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800673e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006740:	f000 fa6e 	bl	8006c20 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006744:	f000 fdc6 	bl	80072d4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006748:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800674a:	f000 fabb 	bl	8006cc4 <prvIsQueueEmpty>
 800674e:	4603      	mov	r3, r0
 8006750:	2b00      	cmp	r3, #0
 8006752:	f43f af6f 	beq.w	8006634 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006756:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006758:	4618      	mov	r0, r3
 800675a:	3730      	adds	r7, #48	@ 0x30
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}
 8006760:	e000ed04 	.word	0xe000ed04

08006764 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b08e      	sub	sp, #56	@ 0x38
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800676e:	2300      	movs	r3, #0
 8006770:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006776:	2300      	movs	r3, #0
 8006778:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800677a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800677c:	2b00      	cmp	r3, #0
 800677e:	d10b      	bne.n	8006798 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8006780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006784:	f383 8811 	msr	BASEPRI, r3
 8006788:	f3bf 8f6f 	isb	sy
 800678c:	f3bf 8f4f 	dsb	sy
 8006790:	623b      	str	r3, [r7, #32]
}
 8006792:	bf00      	nop
 8006794:	bf00      	nop
 8006796:	e7fd      	b.n	8006794 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800679a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800679c:	2b00      	cmp	r3, #0
 800679e:	d00b      	beq.n	80067b8 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80067a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067a4:	f383 8811 	msr	BASEPRI, r3
 80067a8:	f3bf 8f6f 	isb	sy
 80067ac:	f3bf 8f4f 	dsb	sy
 80067b0:	61fb      	str	r3, [r7, #28]
}
 80067b2:	bf00      	nop
 80067b4:	bf00      	nop
 80067b6:	e7fd      	b.n	80067b4 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80067b8:	f001 f974 	bl	8007aa4 <xTaskGetSchedulerState>
 80067bc:	4603      	mov	r3, r0
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d102      	bne.n	80067c8 <xQueueSemaphoreTake+0x64>
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d101      	bne.n	80067cc <xQueueSemaphoreTake+0x68>
 80067c8:	2301      	movs	r3, #1
 80067ca:	e000      	b.n	80067ce <xQueueSemaphoreTake+0x6a>
 80067cc:	2300      	movs	r3, #0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d10b      	bne.n	80067ea <xQueueSemaphoreTake+0x86>
	__asm volatile
 80067d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067d6:	f383 8811 	msr	BASEPRI, r3
 80067da:	f3bf 8f6f 	isb	sy
 80067de:	f3bf 8f4f 	dsb	sy
 80067e2:	61bb      	str	r3, [r7, #24]
}
 80067e4:	bf00      	nop
 80067e6:	bf00      	nop
 80067e8:	e7fd      	b.n	80067e6 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80067ea:	f001 ffc5 	bl	8008778 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80067ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067f2:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80067f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d024      	beq.n	8006844 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80067fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067fc:	1e5a      	subs	r2, r3, #1
 80067fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006800:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d104      	bne.n	8006814 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800680a:	f001 fac5 	bl	8007d98 <pvTaskIncrementMutexHeldCount>
 800680e:	4602      	mov	r2, r0
 8006810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006812:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006816:	691b      	ldr	r3, [r3, #16]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d00f      	beq.n	800683c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800681c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800681e:	3310      	adds	r3, #16
 8006820:	4618      	mov	r0, r3
 8006822:	f000 ff6f 	bl	8007704 <xTaskRemoveFromEventList>
 8006826:	4603      	mov	r3, r0
 8006828:	2b00      	cmp	r3, #0
 800682a:	d007      	beq.n	800683c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800682c:	4b54      	ldr	r3, [pc, #336]	@ (8006980 <xQueueSemaphoreTake+0x21c>)
 800682e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006832:	601a      	str	r2, [r3, #0]
 8006834:	f3bf 8f4f 	dsb	sy
 8006838:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800683c:	f001 ffce 	bl	80087dc <vPortExitCritical>
				return pdPASS;
 8006840:	2301      	movs	r3, #1
 8006842:	e098      	b.n	8006976 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d112      	bne.n	8006870 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800684a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800684c:	2b00      	cmp	r3, #0
 800684e:	d00b      	beq.n	8006868 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8006850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006854:	f383 8811 	msr	BASEPRI, r3
 8006858:	f3bf 8f6f 	isb	sy
 800685c:	f3bf 8f4f 	dsb	sy
 8006860:	617b      	str	r3, [r7, #20]
}
 8006862:	bf00      	nop
 8006864:	bf00      	nop
 8006866:	e7fd      	b.n	8006864 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006868:	f001 ffb8 	bl	80087dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800686c:	2300      	movs	r3, #0
 800686e:	e082      	b.n	8006976 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006870:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006872:	2b00      	cmp	r3, #0
 8006874:	d106      	bne.n	8006884 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006876:	f107 030c 	add.w	r3, r7, #12
 800687a:	4618      	mov	r0, r3
 800687c:	f000 ffa6 	bl	80077cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006880:	2301      	movs	r3, #1
 8006882:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006884:	f001 ffaa 	bl	80087dc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006888:	f000 fd16 	bl	80072b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800688c:	f001 ff74 	bl	8008778 <vPortEnterCritical>
 8006890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006892:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006896:	b25b      	sxtb	r3, r3
 8006898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800689c:	d103      	bne.n	80068a6 <xQueueSemaphoreTake+0x142>
 800689e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068a0:	2200      	movs	r2, #0
 80068a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80068a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068a8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80068ac:	b25b      	sxtb	r3, r3
 80068ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068b2:	d103      	bne.n	80068bc <xQueueSemaphoreTake+0x158>
 80068b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068b6:	2200      	movs	r2, #0
 80068b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80068bc:	f001 ff8e 	bl	80087dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80068c0:	463a      	mov	r2, r7
 80068c2:	f107 030c 	add.w	r3, r7, #12
 80068c6:	4611      	mov	r1, r2
 80068c8:	4618      	mov	r0, r3
 80068ca:	f000 ff95 	bl	80077f8 <xTaskCheckForTimeOut>
 80068ce:	4603      	mov	r3, r0
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d132      	bne.n	800693a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80068d4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80068d6:	f000 f9f5 	bl	8006cc4 <prvIsQueueEmpty>
 80068da:	4603      	mov	r3, r0
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d026      	beq.n	800692e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80068e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d109      	bne.n	80068fc <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80068e8:	f001 ff46 	bl	8008778 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80068ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	4618      	mov	r0, r3
 80068f2:	f001 f8f5 	bl	8007ae0 <xTaskPriorityInherit>
 80068f6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80068f8:	f001 ff70 	bl	80087dc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80068fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068fe:	3324      	adds	r3, #36	@ 0x24
 8006900:	683a      	ldr	r2, [r7, #0]
 8006902:	4611      	mov	r1, r2
 8006904:	4618      	mov	r0, r3
 8006906:	f000 feab 	bl	8007660 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800690a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800690c:	f000 f988 	bl	8006c20 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006910:	f000 fce0 	bl	80072d4 <xTaskResumeAll>
 8006914:	4603      	mov	r3, r0
 8006916:	2b00      	cmp	r3, #0
 8006918:	f47f af67 	bne.w	80067ea <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800691c:	4b18      	ldr	r3, [pc, #96]	@ (8006980 <xQueueSemaphoreTake+0x21c>)
 800691e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006922:	601a      	str	r2, [r3, #0]
 8006924:	f3bf 8f4f 	dsb	sy
 8006928:	f3bf 8f6f 	isb	sy
 800692c:	e75d      	b.n	80067ea <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800692e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006930:	f000 f976 	bl	8006c20 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006934:	f000 fcce 	bl	80072d4 <xTaskResumeAll>
 8006938:	e757      	b.n	80067ea <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800693a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800693c:	f000 f970 	bl	8006c20 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006940:	f000 fcc8 	bl	80072d4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006944:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006946:	f000 f9bd 	bl	8006cc4 <prvIsQueueEmpty>
 800694a:	4603      	mov	r3, r0
 800694c:	2b00      	cmp	r3, #0
 800694e:	f43f af4c 	beq.w	80067ea <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006954:	2b00      	cmp	r3, #0
 8006956:	d00d      	beq.n	8006974 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8006958:	f001 ff0e 	bl	8008778 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800695c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800695e:	f000 f8b7 	bl	8006ad0 <prvGetDisinheritPriorityAfterTimeout>
 8006962:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800696a:	4618      	mov	r0, r3
 800696c:	f001 f990 	bl	8007c90 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006970:	f001 ff34 	bl	80087dc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006974:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006976:	4618      	mov	r0, r3
 8006978:	3738      	adds	r7, #56	@ 0x38
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}
 800697e:	bf00      	nop
 8006980:	e000ed04 	.word	0xe000ed04

08006984 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b08e      	sub	sp, #56	@ 0x38
 8006988:	af00      	add	r7, sp, #0
 800698a:	60f8      	str	r0, [r7, #12]
 800698c:	60b9      	str	r1, [r7, #8]
 800698e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006996:	2b00      	cmp	r3, #0
 8006998:	d10b      	bne.n	80069b2 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800699a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800699e:	f383 8811 	msr	BASEPRI, r3
 80069a2:	f3bf 8f6f 	isb	sy
 80069a6:	f3bf 8f4f 	dsb	sy
 80069aa:	623b      	str	r3, [r7, #32]
}
 80069ac:	bf00      	nop
 80069ae:	bf00      	nop
 80069b0:	e7fd      	b.n	80069ae <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d103      	bne.n	80069c0 <xQueueReceiveFromISR+0x3c>
 80069b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d101      	bne.n	80069c4 <xQueueReceiveFromISR+0x40>
 80069c0:	2301      	movs	r3, #1
 80069c2:	e000      	b.n	80069c6 <xQueueReceiveFromISR+0x42>
 80069c4:	2300      	movs	r3, #0
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d10b      	bne.n	80069e2 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80069ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069ce:	f383 8811 	msr	BASEPRI, r3
 80069d2:	f3bf 8f6f 	isb	sy
 80069d6:	f3bf 8f4f 	dsb	sy
 80069da:	61fb      	str	r3, [r7, #28]
}
 80069dc:	bf00      	nop
 80069de:	bf00      	nop
 80069e0:	e7fd      	b.n	80069de <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80069e2:	f001 ffa9 	bl	8008938 <vPortValidateInterruptPriority>
	__asm volatile
 80069e6:	f3ef 8211 	mrs	r2, BASEPRI
 80069ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069ee:	f383 8811 	msr	BASEPRI, r3
 80069f2:	f3bf 8f6f 	isb	sy
 80069f6:	f3bf 8f4f 	dsb	sy
 80069fa:	61ba      	str	r2, [r7, #24]
 80069fc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80069fe:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006a00:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a06:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d02f      	beq.n	8006a6e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a10:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006a14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006a18:	68b9      	ldr	r1, [r7, #8]
 8006a1a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006a1c:	f000 f8da 	bl	8006bd4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006a20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a22:	1e5a      	subs	r2, r3, #1
 8006a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a26:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006a28:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a30:	d112      	bne.n	8006a58 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a34:	691b      	ldr	r3, [r3, #16]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d016      	beq.n	8006a68 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a3c:	3310      	adds	r3, #16
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f000 fe60 	bl	8007704 <xTaskRemoveFromEventList>
 8006a44:	4603      	mov	r3, r0
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d00e      	beq.n	8006a68 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d00b      	beq.n	8006a68 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2201      	movs	r2, #1
 8006a54:	601a      	str	r2, [r3, #0]
 8006a56:	e007      	b.n	8006a68 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006a58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006a5c:	3301      	adds	r3, #1
 8006a5e:	b2db      	uxtb	r3, r3
 8006a60:	b25a      	sxtb	r2, r3
 8006a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a6c:	e001      	b.n	8006a72 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a74:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	f383 8811 	msr	BASEPRI, r3
}
 8006a7c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006a7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	3738      	adds	r7, #56	@ 0x38
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}

08006a88 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b084      	sub	sp, #16
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d10b      	bne.n	8006ab2 <vQueueDelete+0x2a>
	__asm volatile
 8006a9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a9e:	f383 8811 	msr	BASEPRI, r3
 8006aa2:	f3bf 8f6f 	isb	sy
 8006aa6:	f3bf 8f4f 	dsb	sy
 8006aaa:	60bb      	str	r3, [r7, #8]
}
 8006aac:	bf00      	nop
 8006aae:	bf00      	nop
 8006ab0:	e7fd      	b.n	8006aae <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006ab2:	68f8      	ldr	r0, [r7, #12]
 8006ab4:	f000 f95e 	bl	8006d74 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d102      	bne.n	8006ac8 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8006ac2:	68f8      	ldr	r0, [r7, #12]
 8006ac4:	f002 f848 	bl	8008b58 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006ac8:	bf00      	nop
 8006aca:	3710      	adds	r7, #16
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b085      	sub	sp, #20
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d006      	beq.n	8006aee <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8006aea:	60fb      	str	r3, [r7, #12]
 8006aec:	e001      	b.n	8006af2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006aee:	2300      	movs	r3, #0
 8006af0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006af2:	68fb      	ldr	r3, [r7, #12]
	}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3714      	adds	r7, #20
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr

08006b00 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b086      	sub	sp, #24
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	60f8      	str	r0, [r7, #12]
 8006b08:	60b9      	str	r1, [r7, #8]
 8006b0a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b14:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d10d      	bne.n	8006b3a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d14d      	bne.n	8006bc2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	689b      	ldr	r3, [r3, #8]
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f001 f840 	bl	8007bb0 <xTaskPriorityDisinherit>
 8006b30:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2200      	movs	r2, #0
 8006b36:	609a      	str	r2, [r3, #8]
 8006b38:	e043      	b.n	8006bc2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d119      	bne.n	8006b74 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	6858      	ldr	r0, [r3, #4]
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b48:	461a      	mov	r2, r3
 8006b4a:	68b9      	ldr	r1, [r7, #8]
 8006b4c:	f002 f950 	bl	8008df0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	685a      	ldr	r2, [r3, #4]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b58:	441a      	add	r2, r3
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	685a      	ldr	r2, [r3, #4]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	689b      	ldr	r3, [r3, #8]
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d32b      	bcc.n	8006bc2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	605a      	str	r2, [r3, #4]
 8006b72:	e026      	b.n	8006bc2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	68d8      	ldr	r0, [r3, #12]
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	68b9      	ldr	r1, [r7, #8]
 8006b80:	f002 f936 	bl	8008df0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	68da      	ldr	r2, [r3, #12]
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b8c:	425b      	negs	r3, r3
 8006b8e:	441a      	add	r2, r3
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	68da      	ldr	r2, [r3, #12]
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d207      	bcs.n	8006bb0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	689a      	ldr	r2, [r3, #8]
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ba8:	425b      	negs	r3, r3
 8006baa:	441a      	add	r2, r3
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2b02      	cmp	r3, #2
 8006bb4:	d105      	bne.n	8006bc2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d002      	beq.n	8006bc2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	3b01      	subs	r3, #1
 8006bc0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	1c5a      	adds	r2, r3, #1
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006bca:	697b      	ldr	r3, [r7, #20]
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3718      	adds	r7, #24
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}

08006bd4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b082      	sub	sp, #8
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
 8006bdc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d018      	beq.n	8006c18 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	68da      	ldr	r2, [r3, #12]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bee:	441a      	add	r2, r3
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	68da      	ldr	r2, [r3, #12]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	689b      	ldr	r3, [r3, #8]
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	d303      	bcc.n	8006c08 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681a      	ldr	r2, [r3, #0]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	68d9      	ldr	r1, [r3, #12]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c10:	461a      	mov	r2, r3
 8006c12:	6838      	ldr	r0, [r7, #0]
 8006c14:	f002 f8ec 	bl	8008df0 <memcpy>
	}
}
 8006c18:	bf00      	nop
 8006c1a:	3708      	adds	r7, #8
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b084      	sub	sp, #16
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006c28:	f001 fda6 	bl	8008778 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006c32:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006c34:	e011      	b.n	8006c5a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d012      	beq.n	8006c64 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	3324      	adds	r3, #36	@ 0x24
 8006c42:	4618      	mov	r0, r3
 8006c44:	f000 fd5e 	bl	8007704 <xTaskRemoveFromEventList>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d001      	beq.n	8006c52 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006c4e:	f000 fe37 	bl	80078c0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006c52:	7bfb      	ldrb	r3, [r7, #15]
 8006c54:	3b01      	subs	r3, #1
 8006c56:	b2db      	uxtb	r3, r3
 8006c58:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006c5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	dce9      	bgt.n	8006c36 <prvUnlockQueue+0x16>
 8006c62:	e000      	b.n	8006c66 <prvUnlockQueue+0x46>
					break;
 8006c64:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	22ff      	movs	r2, #255	@ 0xff
 8006c6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006c6e:	f001 fdb5 	bl	80087dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006c72:	f001 fd81 	bl	8008778 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006c7c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006c7e:	e011      	b.n	8006ca4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	691b      	ldr	r3, [r3, #16]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d012      	beq.n	8006cae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	3310      	adds	r3, #16
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f000 fd39 	bl	8007704 <xTaskRemoveFromEventList>
 8006c92:	4603      	mov	r3, r0
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d001      	beq.n	8006c9c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006c98:	f000 fe12 	bl	80078c0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006c9c:	7bbb      	ldrb	r3, [r7, #14]
 8006c9e:	3b01      	subs	r3, #1
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006ca4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	dce9      	bgt.n	8006c80 <prvUnlockQueue+0x60>
 8006cac:	e000      	b.n	8006cb0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006cae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	22ff      	movs	r2, #255	@ 0xff
 8006cb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006cb8:	f001 fd90 	bl	80087dc <vPortExitCritical>
}
 8006cbc:	bf00      	nop
 8006cbe:	3710      	adds	r7, #16
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}

08006cc4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006ccc:	f001 fd54 	bl	8008778 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d102      	bne.n	8006cde <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	60fb      	str	r3, [r7, #12]
 8006cdc:	e001      	b.n	8006ce2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006ce2:	f001 fd7b 	bl	80087dc <vPortExitCritical>

	return xReturn;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3710      	adds	r7, #16
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}

08006cf0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b084      	sub	sp, #16
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006cf8:	f001 fd3e 	bl	8008778 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d04:	429a      	cmp	r2, r3
 8006d06:	d102      	bne.n	8006d0e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	60fb      	str	r3, [r7, #12]
 8006d0c:	e001      	b.n	8006d12 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006d12:	f001 fd63 	bl	80087dc <vPortExitCritical>

	return xReturn;
 8006d16:	68fb      	ldr	r3, [r7, #12]
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3710      	adds	r7, #16
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}

08006d20 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006d20:	b480      	push	{r7}
 8006d22:	b085      	sub	sp, #20
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	60fb      	str	r3, [r7, #12]
 8006d2e:	e014      	b.n	8006d5a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006d30:	4a0f      	ldr	r2, [pc, #60]	@ (8006d70 <vQueueAddToRegistry+0x50>)
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d10b      	bne.n	8006d54 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006d3c:	490c      	ldr	r1, [pc, #48]	@ (8006d70 <vQueueAddToRegistry+0x50>)
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	683a      	ldr	r2, [r7, #0]
 8006d42:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006d46:	4a0a      	ldr	r2, [pc, #40]	@ (8006d70 <vQueueAddToRegistry+0x50>)
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	00db      	lsls	r3, r3, #3
 8006d4c:	4413      	add	r3, r2
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006d52:	e006      	b.n	8006d62 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	3301      	adds	r3, #1
 8006d58:	60fb      	str	r3, [r7, #12]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2b07      	cmp	r3, #7
 8006d5e:	d9e7      	bls.n	8006d30 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006d60:	bf00      	nop
 8006d62:	bf00      	nop
 8006d64:	3714      	adds	r7, #20
 8006d66:	46bd      	mov	sp, r7
 8006d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6c:	4770      	bx	lr
 8006d6e:	bf00      	nop
 8006d70:	20000ea0 	.word	0x20000ea0

08006d74 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006d74:	b480      	push	{r7}
 8006d76:	b085      	sub	sp, #20
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	60fb      	str	r3, [r7, #12]
 8006d80:	e016      	b.n	8006db0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006d82:	4a10      	ldr	r2, [pc, #64]	@ (8006dc4 <vQueueUnregisterQueue+0x50>)
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	00db      	lsls	r3, r3, #3
 8006d88:	4413      	add	r3, r2
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	687a      	ldr	r2, [r7, #4]
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d10b      	bne.n	8006daa <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006d92:	4a0c      	ldr	r2, [pc, #48]	@ (8006dc4 <vQueueUnregisterQueue+0x50>)
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2100      	movs	r1, #0
 8006d98:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006d9c:	4a09      	ldr	r2, [pc, #36]	@ (8006dc4 <vQueueUnregisterQueue+0x50>)
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	00db      	lsls	r3, r3, #3
 8006da2:	4413      	add	r3, r2
 8006da4:	2200      	movs	r2, #0
 8006da6:	605a      	str	r2, [r3, #4]
				break;
 8006da8:	e006      	b.n	8006db8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	3301      	adds	r3, #1
 8006dae:	60fb      	str	r3, [r7, #12]
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2b07      	cmp	r3, #7
 8006db4:	d9e5      	bls.n	8006d82 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006db6:	bf00      	nop
 8006db8:	bf00      	nop
 8006dba:	3714      	adds	r7, #20
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr
 8006dc4:	20000ea0 	.word	0x20000ea0

08006dc8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b086      	sub	sp, #24
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	60f8      	str	r0, [r7, #12]
 8006dd0:	60b9      	str	r1, [r7, #8]
 8006dd2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006dd8:	f001 fcce 	bl	8008778 <vPortEnterCritical>
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006de2:	b25b      	sxtb	r3, r3
 8006de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006de8:	d103      	bne.n	8006df2 <vQueueWaitForMessageRestricted+0x2a>
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	2200      	movs	r2, #0
 8006dee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006df8:	b25b      	sxtb	r3, r3
 8006dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dfe:	d103      	bne.n	8006e08 <vQueueWaitForMessageRestricted+0x40>
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	2200      	movs	r2, #0
 8006e04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006e08:	f001 fce8 	bl	80087dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d106      	bne.n	8006e22 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	3324      	adds	r3, #36	@ 0x24
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	68b9      	ldr	r1, [r7, #8]
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f000 fc45 	bl	80076ac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006e22:	6978      	ldr	r0, [r7, #20]
 8006e24:	f7ff fefc 	bl	8006c20 <prvUnlockQueue>
	}
 8006e28:	bf00      	nop
 8006e2a:	3718      	adds	r7, #24
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}

08006e30 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b08e      	sub	sp, #56	@ 0x38
 8006e34:	af04      	add	r7, sp, #16
 8006e36:	60f8      	str	r0, [r7, #12]
 8006e38:	60b9      	str	r1, [r7, #8]
 8006e3a:	607a      	str	r2, [r7, #4]
 8006e3c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006e3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d10b      	bne.n	8006e5c <xTaskCreateStatic+0x2c>
	__asm volatile
 8006e44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e48:	f383 8811 	msr	BASEPRI, r3
 8006e4c:	f3bf 8f6f 	isb	sy
 8006e50:	f3bf 8f4f 	dsb	sy
 8006e54:	623b      	str	r3, [r7, #32]
}
 8006e56:	bf00      	nop
 8006e58:	bf00      	nop
 8006e5a:	e7fd      	b.n	8006e58 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006e5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d10b      	bne.n	8006e7a <xTaskCreateStatic+0x4a>
	__asm volatile
 8006e62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e66:	f383 8811 	msr	BASEPRI, r3
 8006e6a:	f3bf 8f6f 	isb	sy
 8006e6e:	f3bf 8f4f 	dsb	sy
 8006e72:	61fb      	str	r3, [r7, #28]
}
 8006e74:	bf00      	nop
 8006e76:	bf00      	nop
 8006e78:	e7fd      	b.n	8006e76 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006e7a:	235c      	movs	r3, #92	@ 0x5c
 8006e7c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	2b5c      	cmp	r3, #92	@ 0x5c
 8006e82:	d00b      	beq.n	8006e9c <xTaskCreateStatic+0x6c>
	__asm volatile
 8006e84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e88:	f383 8811 	msr	BASEPRI, r3
 8006e8c:	f3bf 8f6f 	isb	sy
 8006e90:	f3bf 8f4f 	dsb	sy
 8006e94:	61bb      	str	r3, [r7, #24]
}
 8006e96:	bf00      	nop
 8006e98:	bf00      	nop
 8006e9a:	e7fd      	b.n	8006e98 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006e9c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006e9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d01e      	beq.n	8006ee2 <xTaskCreateStatic+0xb2>
 8006ea4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d01b      	beq.n	8006ee2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006eaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eac:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eb0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006eb2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eb6:	2202      	movs	r2, #2
 8006eb8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	9303      	str	r3, [sp, #12]
 8006ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ec2:	9302      	str	r3, [sp, #8]
 8006ec4:	f107 0314 	add.w	r3, r7, #20
 8006ec8:	9301      	str	r3, [sp, #4]
 8006eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ecc:	9300      	str	r3, [sp, #0]
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	687a      	ldr	r2, [r7, #4]
 8006ed2:	68b9      	ldr	r1, [r7, #8]
 8006ed4:	68f8      	ldr	r0, [r7, #12]
 8006ed6:	f000 f850 	bl	8006f7a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006eda:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006edc:	f000 f8de 	bl	800709c <prvAddNewTaskToReadyList>
 8006ee0:	e001      	b.n	8006ee6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006ee6:	697b      	ldr	r3, [r7, #20]
	}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3728      	adds	r7, #40	@ 0x28
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}

08006ef0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b08c      	sub	sp, #48	@ 0x30
 8006ef4:	af04      	add	r7, sp, #16
 8006ef6:	60f8      	str	r0, [r7, #12]
 8006ef8:	60b9      	str	r1, [r7, #8]
 8006efa:	603b      	str	r3, [r7, #0]
 8006efc:	4613      	mov	r3, r2
 8006efe:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006f00:	88fb      	ldrh	r3, [r7, #6]
 8006f02:	009b      	lsls	r3, r3, #2
 8006f04:	4618      	mov	r0, r3
 8006f06:	f001 fd59 	bl	80089bc <pvPortMalloc>
 8006f0a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d00e      	beq.n	8006f30 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006f12:	205c      	movs	r0, #92	@ 0x5c
 8006f14:	f001 fd52 	bl	80089bc <pvPortMalloc>
 8006f18:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006f1a:	69fb      	ldr	r3, [r7, #28]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d003      	beq.n	8006f28 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006f20:	69fb      	ldr	r3, [r7, #28]
 8006f22:	697a      	ldr	r2, [r7, #20]
 8006f24:	631a      	str	r2, [r3, #48]	@ 0x30
 8006f26:	e005      	b.n	8006f34 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006f28:	6978      	ldr	r0, [r7, #20]
 8006f2a:	f001 fe15 	bl	8008b58 <vPortFree>
 8006f2e:	e001      	b.n	8006f34 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006f30:	2300      	movs	r3, #0
 8006f32:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006f34:	69fb      	ldr	r3, [r7, #28]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d017      	beq.n	8006f6a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006f3a:	69fb      	ldr	r3, [r7, #28]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006f42:	88fa      	ldrh	r2, [r7, #6]
 8006f44:	2300      	movs	r3, #0
 8006f46:	9303      	str	r3, [sp, #12]
 8006f48:	69fb      	ldr	r3, [r7, #28]
 8006f4a:	9302      	str	r3, [sp, #8]
 8006f4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f4e:	9301      	str	r3, [sp, #4]
 8006f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f52:	9300      	str	r3, [sp, #0]
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	68b9      	ldr	r1, [r7, #8]
 8006f58:	68f8      	ldr	r0, [r7, #12]
 8006f5a:	f000 f80e 	bl	8006f7a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006f5e:	69f8      	ldr	r0, [r7, #28]
 8006f60:	f000 f89c 	bl	800709c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006f64:	2301      	movs	r3, #1
 8006f66:	61bb      	str	r3, [r7, #24]
 8006f68:	e002      	b.n	8006f70 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8006f6e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006f70:	69bb      	ldr	r3, [r7, #24]
	}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3720      	adds	r7, #32
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}

08006f7a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006f7a:	b580      	push	{r7, lr}
 8006f7c:	b088      	sub	sp, #32
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	60f8      	str	r0, [r7, #12]
 8006f82:	60b9      	str	r1, [r7, #8]
 8006f84:	607a      	str	r2, [r7, #4]
 8006f86:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f8a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	009b      	lsls	r3, r3, #2
 8006f90:	461a      	mov	r2, r3
 8006f92:	21a5      	movs	r1, #165	@ 0xa5
 8006f94:	f001 ff00 	bl	8008d98 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f9a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006fa2:	3b01      	subs	r3, #1
 8006fa4:	009b      	lsls	r3, r3, #2
 8006fa6:	4413      	add	r3, r2
 8006fa8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006faa:	69bb      	ldr	r3, [r7, #24]
 8006fac:	f023 0307 	bic.w	r3, r3, #7
 8006fb0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006fb2:	69bb      	ldr	r3, [r7, #24]
 8006fb4:	f003 0307 	and.w	r3, r3, #7
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d00b      	beq.n	8006fd4 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006fbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fc0:	f383 8811 	msr	BASEPRI, r3
 8006fc4:	f3bf 8f6f 	isb	sy
 8006fc8:	f3bf 8f4f 	dsb	sy
 8006fcc:	617b      	str	r3, [r7, #20]
}
 8006fce:	bf00      	nop
 8006fd0:	bf00      	nop
 8006fd2:	e7fd      	b.n	8006fd0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d01f      	beq.n	800701a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006fda:	2300      	movs	r3, #0
 8006fdc:	61fb      	str	r3, [r7, #28]
 8006fde:	e012      	b.n	8007006 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006fe0:	68ba      	ldr	r2, [r7, #8]
 8006fe2:	69fb      	ldr	r3, [r7, #28]
 8006fe4:	4413      	add	r3, r2
 8006fe6:	7819      	ldrb	r1, [r3, #0]
 8006fe8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006fea:	69fb      	ldr	r3, [r7, #28]
 8006fec:	4413      	add	r3, r2
 8006fee:	3334      	adds	r3, #52	@ 0x34
 8006ff0:	460a      	mov	r2, r1
 8006ff2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006ff4:	68ba      	ldr	r2, [r7, #8]
 8006ff6:	69fb      	ldr	r3, [r7, #28]
 8006ff8:	4413      	add	r3, r2
 8006ffa:	781b      	ldrb	r3, [r3, #0]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d006      	beq.n	800700e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007000:	69fb      	ldr	r3, [r7, #28]
 8007002:	3301      	adds	r3, #1
 8007004:	61fb      	str	r3, [r7, #28]
 8007006:	69fb      	ldr	r3, [r7, #28]
 8007008:	2b0f      	cmp	r3, #15
 800700a:	d9e9      	bls.n	8006fe0 <prvInitialiseNewTask+0x66>
 800700c:	e000      	b.n	8007010 <prvInitialiseNewTask+0x96>
			{
				break;
 800700e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007012:	2200      	movs	r2, #0
 8007014:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007018:	e003      	b.n	8007022 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800701a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800701c:	2200      	movs	r2, #0
 800701e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007024:	2b37      	cmp	r3, #55	@ 0x37
 8007026:	d901      	bls.n	800702c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007028:	2337      	movs	r3, #55	@ 0x37
 800702a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800702c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800702e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007030:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007034:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007036:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800703a:	2200      	movs	r2, #0
 800703c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800703e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007040:	3304      	adds	r3, #4
 8007042:	4618      	mov	r0, r3
 8007044:	f7fe fd7c 	bl	8005b40 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800704a:	3318      	adds	r3, #24
 800704c:	4618      	mov	r0, r3
 800704e:	f7fe fd77 	bl	8005b40 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007054:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007056:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800705a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800705e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007060:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007064:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007066:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800706a:	2200      	movs	r2, #0
 800706c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800706e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007070:	2200      	movs	r2, #0
 8007072:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007076:	683a      	ldr	r2, [r7, #0]
 8007078:	68f9      	ldr	r1, [r7, #12]
 800707a:	69b8      	ldr	r0, [r7, #24]
 800707c:	f001 fa4e 	bl	800851c <pxPortInitialiseStack>
 8007080:	4602      	mov	r2, r0
 8007082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007084:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007086:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007088:	2b00      	cmp	r3, #0
 800708a:	d002      	beq.n	8007092 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800708c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800708e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007090:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007092:	bf00      	nop
 8007094:	3720      	adds	r7, #32
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}
	...

0800709c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b082      	sub	sp, #8
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80070a4:	f001 fb68 	bl	8008778 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80070a8:	4b2d      	ldr	r3, [pc, #180]	@ (8007160 <prvAddNewTaskToReadyList+0xc4>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	3301      	adds	r3, #1
 80070ae:	4a2c      	ldr	r2, [pc, #176]	@ (8007160 <prvAddNewTaskToReadyList+0xc4>)
 80070b0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80070b2:	4b2c      	ldr	r3, [pc, #176]	@ (8007164 <prvAddNewTaskToReadyList+0xc8>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d109      	bne.n	80070ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80070ba:	4a2a      	ldr	r2, [pc, #168]	@ (8007164 <prvAddNewTaskToReadyList+0xc8>)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80070c0:	4b27      	ldr	r3, [pc, #156]	@ (8007160 <prvAddNewTaskToReadyList+0xc4>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	2b01      	cmp	r3, #1
 80070c6:	d110      	bne.n	80070ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80070c8:	f000 fc1e 	bl	8007908 <prvInitialiseTaskLists>
 80070cc:	e00d      	b.n	80070ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80070ce:	4b26      	ldr	r3, [pc, #152]	@ (8007168 <prvAddNewTaskToReadyList+0xcc>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d109      	bne.n	80070ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80070d6:	4b23      	ldr	r3, [pc, #140]	@ (8007164 <prvAddNewTaskToReadyList+0xc8>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d802      	bhi.n	80070ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80070e4:	4a1f      	ldr	r2, [pc, #124]	@ (8007164 <prvAddNewTaskToReadyList+0xc8>)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80070ea:	4b20      	ldr	r3, [pc, #128]	@ (800716c <prvAddNewTaskToReadyList+0xd0>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	3301      	adds	r3, #1
 80070f0:	4a1e      	ldr	r2, [pc, #120]	@ (800716c <prvAddNewTaskToReadyList+0xd0>)
 80070f2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80070f4:	4b1d      	ldr	r3, [pc, #116]	@ (800716c <prvAddNewTaskToReadyList+0xd0>)
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007100:	4b1b      	ldr	r3, [pc, #108]	@ (8007170 <prvAddNewTaskToReadyList+0xd4>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	429a      	cmp	r2, r3
 8007106:	d903      	bls.n	8007110 <prvAddNewTaskToReadyList+0x74>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800710c:	4a18      	ldr	r2, [pc, #96]	@ (8007170 <prvAddNewTaskToReadyList+0xd4>)
 800710e:	6013      	str	r3, [r2, #0]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007114:	4613      	mov	r3, r2
 8007116:	009b      	lsls	r3, r3, #2
 8007118:	4413      	add	r3, r2
 800711a:	009b      	lsls	r3, r3, #2
 800711c:	4a15      	ldr	r2, [pc, #84]	@ (8007174 <prvAddNewTaskToReadyList+0xd8>)
 800711e:	441a      	add	r2, r3
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	3304      	adds	r3, #4
 8007124:	4619      	mov	r1, r3
 8007126:	4610      	mov	r0, r2
 8007128:	f7fe fd17 	bl	8005b5a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800712c:	f001 fb56 	bl	80087dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007130:	4b0d      	ldr	r3, [pc, #52]	@ (8007168 <prvAddNewTaskToReadyList+0xcc>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d00e      	beq.n	8007156 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007138:	4b0a      	ldr	r3, [pc, #40]	@ (8007164 <prvAddNewTaskToReadyList+0xc8>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007142:	429a      	cmp	r2, r3
 8007144:	d207      	bcs.n	8007156 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007146:	4b0c      	ldr	r3, [pc, #48]	@ (8007178 <prvAddNewTaskToReadyList+0xdc>)
 8007148:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800714c:	601a      	str	r2, [r3, #0]
 800714e:	f3bf 8f4f 	dsb	sy
 8007152:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007156:	bf00      	nop
 8007158:	3708      	adds	r7, #8
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}
 800715e:	bf00      	nop
 8007160:	200013b4 	.word	0x200013b4
 8007164:	20000ee0 	.word	0x20000ee0
 8007168:	200013c0 	.word	0x200013c0
 800716c:	200013d0 	.word	0x200013d0
 8007170:	200013bc 	.word	0x200013bc
 8007174:	20000ee4 	.word	0x20000ee4
 8007178:	e000ed04 	.word	0xe000ed04

0800717c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800717c:	b580      	push	{r7, lr}
 800717e:	b084      	sub	sp, #16
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007184:	2300      	movs	r3, #0
 8007186:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d018      	beq.n	80071c0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800718e:	4b14      	ldr	r3, [pc, #80]	@ (80071e0 <vTaskDelay+0x64>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d00b      	beq.n	80071ae <vTaskDelay+0x32>
	__asm volatile
 8007196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800719a:	f383 8811 	msr	BASEPRI, r3
 800719e:	f3bf 8f6f 	isb	sy
 80071a2:	f3bf 8f4f 	dsb	sy
 80071a6:	60bb      	str	r3, [r7, #8]
}
 80071a8:	bf00      	nop
 80071aa:	bf00      	nop
 80071ac:	e7fd      	b.n	80071aa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80071ae:	f000 f883 	bl	80072b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80071b2:	2100      	movs	r1, #0
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f000 fe03 	bl	8007dc0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80071ba:	f000 f88b 	bl	80072d4 <xTaskResumeAll>
 80071be:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d107      	bne.n	80071d6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80071c6:	4b07      	ldr	r3, [pc, #28]	@ (80071e4 <vTaskDelay+0x68>)
 80071c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80071cc:	601a      	str	r2, [r3, #0]
 80071ce:	f3bf 8f4f 	dsb	sy
 80071d2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80071d6:	bf00      	nop
 80071d8:	3710      	adds	r7, #16
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}
 80071de:	bf00      	nop
 80071e0:	200013dc 	.word	0x200013dc
 80071e4:	e000ed04 	.word	0xe000ed04

080071e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b08a      	sub	sp, #40	@ 0x28
 80071ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80071ee:	2300      	movs	r3, #0
 80071f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80071f2:	2300      	movs	r3, #0
 80071f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80071f6:	463a      	mov	r2, r7
 80071f8:	1d39      	adds	r1, r7, #4
 80071fa:	f107 0308 	add.w	r3, r7, #8
 80071fe:	4618      	mov	r0, r3
 8007200:	f7fe fc4a 	bl	8005a98 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007204:	6839      	ldr	r1, [r7, #0]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	68ba      	ldr	r2, [r7, #8]
 800720a:	9202      	str	r2, [sp, #8]
 800720c:	9301      	str	r3, [sp, #4]
 800720e:	2300      	movs	r3, #0
 8007210:	9300      	str	r3, [sp, #0]
 8007212:	2300      	movs	r3, #0
 8007214:	460a      	mov	r2, r1
 8007216:	4922      	ldr	r1, [pc, #136]	@ (80072a0 <vTaskStartScheduler+0xb8>)
 8007218:	4822      	ldr	r0, [pc, #136]	@ (80072a4 <vTaskStartScheduler+0xbc>)
 800721a:	f7ff fe09 	bl	8006e30 <xTaskCreateStatic>
 800721e:	4603      	mov	r3, r0
 8007220:	4a21      	ldr	r2, [pc, #132]	@ (80072a8 <vTaskStartScheduler+0xc0>)
 8007222:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007224:	4b20      	ldr	r3, [pc, #128]	@ (80072a8 <vTaskStartScheduler+0xc0>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d002      	beq.n	8007232 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800722c:	2301      	movs	r3, #1
 800722e:	617b      	str	r3, [r7, #20]
 8007230:	e001      	b.n	8007236 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007232:	2300      	movs	r3, #0
 8007234:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	2b01      	cmp	r3, #1
 800723a:	d102      	bne.n	8007242 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800723c:	f000 fe14 	bl	8007e68 <xTimerCreateTimerTask>
 8007240:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	2b01      	cmp	r3, #1
 8007246:	d116      	bne.n	8007276 <vTaskStartScheduler+0x8e>
	__asm volatile
 8007248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800724c:	f383 8811 	msr	BASEPRI, r3
 8007250:	f3bf 8f6f 	isb	sy
 8007254:	f3bf 8f4f 	dsb	sy
 8007258:	613b      	str	r3, [r7, #16]
}
 800725a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800725c:	4b13      	ldr	r3, [pc, #76]	@ (80072ac <vTaskStartScheduler+0xc4>)
 800725e:	f04f 32ff 	mov.w	r2, #4294967295
 8007262:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007264:	4b12      	ldr	r3, [pc, #72]	@ (80072b0 <vTaskStartScheduler+0xc8>)
 8007266:	2201      	movs	r2, #1
 8007268:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800726a:	4b12      	ldr	r3, [pc, #72]	@ (80072b4 <vTaskStartScheduler+0xcc>)
 800726c:	2200      	movs	r2, #0
 800726e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007270:	f001 f9de 	bl	8008630 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007274:	e00f      	b.n	8007296 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800727c:	d10b      	bne.n	8007296 <vTaskStartScheduler+0xae>
	__asm volatile
 800727e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007282:	f383 8811 	msr	BASEPRI, r3
 8007286:	f3bf 8f6f 	isb	sy
 800728a:	f3bf 8f4f 	dsb	sy
 800728e:	60fb      	str	r3, [r7, #12]
}
 8007290:	bf00      	nop
 8007292:	bf00      	nop
 8007294:	e7fd      	b.n	8007292 <vTaskStartScheduler+0xaa>
}
 8007296:	bf00      	nop
 8007298:	3718      	adds	r7, #24
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
 800729e:	bf00      	nop
 80072a0:	08008e60 	.word	0x08008e60
 80072a4:	080078d9 	.word	0x080078d9
 80072a8:	200013d8 	.word	0x200013d8
 80072ac:	200013d4 	.word	0x200013d4
 80072b0:	200013c0 	.word	0x200013c0
 80072b4:	200013b8 	.word	0x200013b8

080072b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80072b8:	b480      	push	{r7}
 80072ba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80072bc:	4b04      	ldr	r3, [pc, #16]	@ (80072d0 <vTaskSuspendAll+0x18>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	3301      	adds	r3, #1
 80072c2:	4a03      	ldr	r2, [pc, #12]	@ (80072d0 <vTaskSuspendAll+0x18>)
 80072c4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80072c6:	bf00      	nop
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr
 80072d0:	200013dc 	.word	0x200013dc

080072d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b084      	sub	sp, #16
 80072d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80072da:	2300      	movs	r3, #0
 80072dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80072de:	2300      	movs	r3, #0
 80072e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80072e2:	4b42      	ldr	r3, [pc, #264]	@ (80073ec <xTaskResumeAll+0x118>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d10b      	bne.n	8007302 <xTaskResumeAll+0x2e>
	__asm volatile
 80072ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072ee:	f383 8811 	msr	BASEPRI, r3
 80072f2:	f3bf 8f6f 	isb	sy
 80072f6:	f3bf 8f4f 	dsb	sy
 80072fa:	603b      	str	r3, [r7, #0]
}
 80072fc:	bf00      	nop
 80072fe:	bf00      	nop
 8007300:	e7fd      	b.n	80072fe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007302:	f001 fa39 	bl	8008778 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007306:	4b39      	ldr	r3, [pc, #228]	@ (80073ec <xTaskResumeAll+0x118>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	3b01      	subs	r3, #1
 800730c:	4a37      	ldr	r2, [pc, #220]	@ (80073ec <xTaskResumeAll+0x118>)
 800730e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007310:	4b36      	ldr	r3, [pc, #216]	@ (80073ec <xTaskResumeAll+0x118>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d162      	bne.n	80073de <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007318:	4b35      	ldr	r3, [pc, #212]	@ (80073f0 <xTaskResumeAll+0x11c>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d05e      	beq.n	80073de <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007320:	e02f      	b.n	8007382 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007322:	4b34      	ldr	r3, [pc, #208]	@ (80073f4 <xTaskResumeAll+0x120>)
 8007324:	68db      	ldr	r3, [r3, #12]
 8007326:	68db      	ldr	r3, [r3, #12]
 8007328:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	3318      	adds	r3, #24
 800732e:	4618      	mov	r0, r3
 8007330:	f7fe fc70 	bl	8005c14 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	3304      	adds	r3, #4
 8007338:	4618      	mov	r0, r3
 800733a:	f7fe fc6b 	bl	8005c14 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007342:	4b2d      	ldr	r3, [pc, #180]	@ (80073f8 <xTaskResumeAll+0x124>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	429a      	cmp	r2, r3
 8007348:	d903      	bls.n	8007352 <xTaskResumeAll+0x7e>
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800734e:	4a2a      	ldr	r2, [pc, #168]	@ (80073f8 <xTaskResumeAll+0x124>)
 8007350:	6013      	str	r3, [r2, #0]
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007356:	4613      	mov	r3, r2
 8007358:	009b      	lsls	r3, r3, #2
 800735a:	4413      	add	r3, r2
 800735c:	009b      	lsls	r3, r3, #2
 800735e:	4a27      	ldr	r2, [pc, #156]	@ (80073fc <xTaskResumeAll+0x128>)
 8007360:	441a      	add	r2, r3
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	3304      	adds	r3, #4
 8007366:	4619      	mov	r1, r3
 8007368:	4610      	mov	r0, r2
 800736a:	f7fe fbf6 	bl	8005b5a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007372:	4b23      	ldr	r3, [pc, #140]	@ (8007400 <xTaskResumeAll+0x12c>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007378:	429a      	cmp	r2, r3
 800737a:	d302      	bcc.n	8007382 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800737c:	4b21      	ldr	r3, [pc, #132]	@ (8007404 <xTaskResumeAll+0x130>)
 800737e:	2201      	movs	r2, #1
 8007380:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007382:	4b1c      	ldr	r3, [pc, #112]	@ (80073f4 <xTaskResumeAll+0x120>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d1cb      	bne.n	8007322 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d001      	beq.n	8007394 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007390:	f000 fb58 	bl	8007a44 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007394:	4b1c      	ldr	r3, [pc, #112]	@ (8007408 <xTaskResumeAll+0x134>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d010      	beq.n	80073c2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80073a0:	f000 f846 	bl	8007430 <xTaskIncrementTick>
 80073a4:	4603      	mov	r3, r0
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d002      	beq.n	80073b0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80073aa:	4b16      	ldr	r3, [pc, #88]	@ (8007404 <xTaskResumeAll+0x130>)
 80073ac:	2201      	movs	r2, #1
 80073ae:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	3b01      	subs	r3, #1
 80073b4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d1f1      	bne.n	80073a0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80073bc:	4b12      	ldr	r3, [pc, #72]	@ (8007408 <xTaskResumeAll+0x134>)
 80073be:	2200      	movs	r2, #0
 80073c0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80073c2:	4b10      	ldr	r3, [pc, #64]	@ (8007404 <xTaskResumeAll+0x130>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d009      	beq.n	80073de <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80073ca:	2301      	movs	r3, #1
 80073cc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80073ce:	4b0f      	ldr	r3, [pc, #60]	@ (800740c <xTaskResumeAll+0x138>)
 80073d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073d4:	601a      	str	r2, [r3, #0]
 80073d6:	f3bf 8f4f 	dsb	sy
 80073da:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80073de:	f001 f9fd 	bl	80087dc <vPortExitCritical>

	return xAlreadyYielded;
 80073e2:	68bb      	ldr	r3, [r7, #8]
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3710      	adds	r7, #16
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}
 80073ec:	200013dc 	.word	0x200013dc
 80073f0:	200013b4 	.word	0x200013b4
 80073f4:	20001374 	.word	0x20001374
 80073f8:	200013bc 	.word	0x200013bc
 80073fc:	20000ee4 	.word	0x20000ee4
 8007400:	20000ee0 	.word	0x20000ee0
 8007404:	200013c8 	.word	0x200013c8
 8007408:	200013c4 	.word	0x200013c4
 800740c:	e000ed04 	.word	0xe000ed04

08007410 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007410:	b480      	push	{r7}
 8007412:	b083      	sub	sp, #12
 8007414:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007416:	4b05      	ldr	r3, [pc, #20]	@ (800742c <xTaskGetTickCount+0x1c>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800741c:	687b      	ldr	r3, [r7, #4]
}
 800741e:	4618      	mov	r0, r3
 8007420:	370c      	adds	r7, #12
 8007422:	46bd      	mov	sp, r7
 8007424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007428:	4770      	bx	lr
 800742a:	bf00      	nop
 800742c:	200013b8 	.word	0x200013b8

08007430 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b086      	sub	sp, #24
 8007434:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007436:	2300      	movs	r3, #0
 8007438:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800743a:	4b4f      	ldr	r3, [pc, #316]	@ (8007578 <xTaskIncrementTick+0x148>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	2b00      	cmp	r3, #0
 8007440:	f040 8090 	bne.w	8007564 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007444:	4b4d      	ldr	r3, [pc, #308]	@ (800757c <xTaskIncrementTick+0x14c>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	3301      	adds	r3, #1
 800744a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800744c:	4a4b      	ldr	r2, [pc, #300]	@ (800757c <xTaskIncrementTick+0x14c>)
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d121      	bne.n	800749c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007458:	4b49      	ldr	r3, [pc, #292]	@ (8007580 <xTaskIncrementTick+0x150>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d00b      	beq.n	800747a <xTaskIncrementTick+0x4a>
	__asm volatile
 8007462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007466:	f383 8811 	msr	BASEPRI, r3
 800746a:	f3bf 8f6f 	isb	sy
 800746e:	f3bf 8f4f 	dsb	sy
 8007472:	603b      	str	r3, [r7, #0]
}
 8007474:	bf00      	nop
 8007476:	bf00      	nop
 8007478:	e7fd      	b.n	8007476 <xTaskIncrementTick+0x46>
 800747a:	4b41      	ldr	r3, [pc, #260]	@ (8007580 <xTaskIncrementTick+0x150>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	60fb      	str	r3, [r7, #12]
 8007480:	4b40      	ldr	r3, [pc, #256]	@ (8007584 <xTaskIncrementTick+0x154>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a3e      	ldr	r2, [pc, #248]	@ (8007580 <xTaskIncrementTick+0x150>)
 8007486:	6013      	str	r3, [r2, #0]
 8007488:	4a3e      	ldr	r2, [pc, #248]	@ (8007584 <xTaskIncrementTick+0x154>)
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	6013      	str	r3, [r2, #0]
 800748e:	4b3e      	ldr	r3, [pc, #248]	@ (8007588 <xTaskIncrementTick+0x158>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	3301      	adds	r3, #1
 8007494:	4a3c      	ldr	r2, [pc, #240]	@ (8007588 <xTaskIncrementTick+0x158>)
 8007496:	6013      	str	r3, [r2, #0]
 8007498:	f000 fad4 	bl	8007a44 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800749c:	4b3b      	ldr	r3, [pc, #236]	@ (800758c <xTaskIncrementTick+0x15c>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	693a      	ldr	r2, [r7, #16]
 80074a2:	429a      	cmp	r2, r3
 80074a4:	d349      	bcc.n	800753a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80074a6:	4b36      	ldr	r3, [pc, #216]	@ (8007580 <xTaskIncrementTick+0x150>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d104      	bne.n	80074ba <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074b0:	4b36      	ldr	r3, [pc, #216]	@ (800758c <xTaskIncrementTick+0x15c>)
 80074b2:	f04f 32ff 	mov.w	r2, #4294967295
 80074b6:	601a      	str	r2, [r3, #0]
					break;
 80074b8:	e03f      	b.n	800753a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074ba:	4b31      	ldr	r3, [pc, #196]	@ (8007580 <xTaskIncrementTick+0x150>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	68db      	ldr	r3, [r3, #12]
 80074c0:	68db      	ldr	r3, [r3, #12]
 80074c2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80074ca:	693a      	ldr	r2, [r7, #16]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	429a      	cmp	r2, r3
 80074d0:	d203      	bcs.n	80074da <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80074d2:	4a2e      	ldr	r2, [pc, #184]	@ (800758c <xTaskIncrementTick+0x15c>)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80074d8:	e02f      	b.n	800753a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	3304      	adds	r3, #4
 80074de:	4618      	mov	r0, r3
 80074e0:	f7fe fb98 	bl	8005c14 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d004      	beq.n	80074f6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	3318      	adds	r3, #24
 80074f0:	4618      	mov	r0, r3
 80074f2:	f7fe fb8f 	bl	8005c14 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074fa:	4b25      	ldr	r3, [pc, #148]	@ (8007590 <xTaskIncrementTick+0x160>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	429a      	cmp	r2, r3
 8007500:	d903      	bls.n	800750a <xTaskIncrementTick+0xda>
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007506:	4a22      	ldr	r2, [pc, #136]	@ (8007590 <xTaskIncrementTick+0x160>)
 8007508:	6013      	str	r3, [r2, #0]
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800750e:	4613      	mov	r3, r2
 8007510:	009b      	lsls	r3, r3, #2
 8007512:	4413      	add	r3, r2
 8007514:	009b      	lsls	r3, r3, #2
 8007516:	4a1f      	ldr	r2, [pc, #124]	@ (8007594 <xTaskIncrementTick+0x164>)
 8007518:	441a      	add	r2, r3
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	3304      	adds	r3, #4
 800751e:	4619      	mov	r1, r3
 8007520:	4610      	mov	r0, r2
 8007522:	f7fe fb1a 	bl	8005b5a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800752a:	4b1b      	ldr	r3, [pc, #108]	@ (8007598 <xTaskIncrementTick+0x168>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007530:	429a      	cmp	r2, r3
 8007532:	d3b8      	bcc.n	80074a6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007534:	2301      	movs	r3, #1
 8007536:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007538:	e7b5      	b.n	80074a6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800753a:	4b17      	ldr	r3, [pc, #92]	@ (8007598 <xTaskIncrementTick+0x168>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007540:	4914      	ldr	r1, [pc, #80]	@ (8007594 <xTaskIncrementTick+0x164>)
 8007542:	4613      	mov	r3, r2
 8007544:	009b      	lsls	r3, r3, #2
 8007546:	4413      	add	r3, r2
 8007548:	009b      	lsls	r3, r3, #2
 800754a:	440b      	add	r3, r1
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	2b01      	cmp	r3, #1
 8007550:	d901      	bls.n	8007556 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007552:	2301      	movs	r3, #1
 8007554:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007556:	4b11      	ldr	r3, [pc, #68]	@ (800759c <xTaskIncrementTick+0x16c>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d007      	beq.n	800756e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800755e:	2301      	movs	r3, #1
 8007560:	617b      	str	r3, [r7, #20]
 8007562:	e004      	b.n	800756e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007564:	4b0e      	ldr	r3, [pc, #56]	@ (80075a0 <xTaskIncrementTick+0x170>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	3301      	adds	r3, #1
 800756a:	4a0d      	ldr	r2, [pc, #52]	@ (80075a0 <xTaskIncrementTick+0x170>)
 800756c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800756e:	697b      	ldr	r3, [r7, #20]
}
 8007570:	4618      	mov	r0, r3
 8007572:	3718      	adds	r7, #24
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}
 8007578:	200013dc 	.word	0x200013dc
 800757c:	200013b8 	.word	0x200013b8
 8007580:	2000136c 	.word	0x2000136c
 8007584:	20001370 	.word	0x20001370
 8007588:	200013cc 	.word	0x200013cc
 800758c:	200013d4 	.word	0x200013d4
 8007590:	200013bc 	.word	0x200013bc
 8007594:	20000ee4 	.word	0x20000ee4
 8007598:	20000ee0 	.word	0x20000ee0
 800759c:	200013c8 	.word	0x200013c8
 80075a0:	200013c4 	.word	0x200013c4

080075a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80075a4:	b480      	push	{r7}
 80075a6:	b085      	sub	sp, #20
 80075a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80075aa:	4b28      	ldr	r3, [pc, #160]	@ (800764c <vTaskSwitchContext+0xa8>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d003      	beq.n	80075ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80075b2:	4b27      	ldr	r3, [pc, #156]	@ (8007650 <vTaskSwitchContext+0xac>)
 80075b4:	2201      	movs	r2, #1
 80075b6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80075b8:	e042      	b.n	8007640 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80075ba:	4b25      	ldr	r3, [pc, #148]	@ (8007650 <vTaskSwitchContext+0xac>)
 80075bc:	2200      	movs	r2, #0
 80075be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075c0:	4b24      	ldr	r3, [pc, #144]	@ (8007654 <vTaskSwitchContext+0xb0>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	60fb      	str	r3, [r7, #12]
 80075c6:	e011      	b.n	80075ec <vTaskSwitchContext+0x48>
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d10b      	bne.n	80075e6 <vTaskSwitchContext+0x42>
	__asm volatile
 80075ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075d2:	f383 8811 	msr	BASEPRI, r3
 80075d6:	f3bf 8f6f 	isb	sy
 80075da:	f3bf 8f4f 	dsb	sy
 80075de:	607b      	str	r3, [r7, #4]
}
 80075e0:	bf00      	nop
 80075e2:	bf00      	nop
 80075e4:	e7fd      	b.n	80075e2 <vTaskSwitchContext+0x3e>
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	3b01      	subs	r3, #1
 80075ea:	60fb      	str	r3, [r7, #12]
 80075ec:	491a      	ldr	r1, [pc, #104]	@ (8007658 <vTaskSwitchContext+0xb4>)
 80075ee:	68fa      	ldr	r2, [r7, #12]
 80075f0:	4613      	mov	r3, r2
 80075f2:	009b      	lsls	r3, r3, #2
 80075f4:	4413      	add	r3, r2
 80075f6:	009b      	lsls	r3, r3, #2
 80075f8:	440b      	add	r3, r1
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d0e3      	beq.n	80075c8 <vTaskSwitchContext+0x24>
 8007600:	68fa      	ldr	r2, [r7, #12]
 8007602:	4613      	mov	r3, r2
 8007604:	009b      	lsls	r3, r3, #2
 8007606:	4413      	add	r3, r2
 8007608:	009b      	lsls	r3, r3, #2
 800760a:	4a13      	ldr	r2, [pc, #76]	@ (8007658 <vTaskSwitchContext+0xb4>)
 800760c:	4413      	add	r3, r2
 800760e:	60bb      	str	r3, [r7, #8]
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	685b      	ldr	r3, [r3, #4]
 8007614:	685a      	ldr	r2, [r3, #4]
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	605a      	str	r2, [r3, #4]
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	685a      	ldr	r2, [r3, #4]
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	3308      	adds	r3, #8
 8007622:	429a      	cmp	r2, r3
 8007624:	d104      	bne.n	8007630 <vTaskSwitchContext+0x8c>
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	685a      	ldr	r2, [r3, #4]
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	605a      	str	r2, [r3, #4]
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	68db      	ldr	r3, [r3, #12]
 8007636:	4a09      	ldr	r2, [pc, #36]	@ (800765c <vTaskSwitchContext+0xb8>)
 8007638:	6013      	str	r3, [r2, #0]
 800763a:	4a06      	ldr	r2, [pc, #24]	@ (8007654 <vTaskSwitchContext+0xb0>)
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	6013      	str	r3, [r2, #0]
}
 8007640:	bf00      	nop
 8007642:	3714      	adds	r7, #20
 8007644:	46bd      	mov	sp, r7
 8007646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764a:	4770      	bx	lr
 800764c:	200013dc 	.word	0x200013dc
 8007650:	200013c8 	.word	0x200013c8
 8007654:	200013bc 	.word	0x200013bc
 8007658:	20000ee4 	.word	0x20000ee4
 800765c:	20000ee0 	.word	0x20000ee0

08007660 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b084      	sub	sp, #16
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
 8007668:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d10b      	bne.n	8007688 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007670:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007674:	f383 8811 	msr	BASEPRI, r3
 8007678:	f3bf 8f6f 	isb	sy
 800767c:	f3bf 8f4f 	dsb	sy
 8007680:	60fb      	str	r3, [r7, #12]
}
 8007682:	bf00      	nop
 8007684:	bf00      	nop
 8007686:	e7fd      	b.n	8007684 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007688:	4b07      	ldr	r3, [pc, #28]	@ (80076a8 <vTaskPlaceOnEventList+0x48>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	3318      	adds	r3, #24
 800768e:	4619      	mov	r1, r3
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f7fe fa86 	bl	8005ba2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007696:	2101      	movs	r1, #1
 8007698:	6838      	ldr	r0, [r7, #0]
 800769a:	f000 fb91 	bl	8007dc0 <prvAddCurrentTaskToDelayedList>
}
 800769e:	bf00      	nop
 80076a0:	3710      	adds	r7, #16
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}
 80076a6:	bf00      	nop
 80076a8:	20000ee0 	.word	0x20000ee0

080076ac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b086      	sub	sp, #24
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	60f8      	str	r0, [r7, #12]
 80076b4:	60b9      	str	r1, [r7, #8]
 80076b6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d10b      	bne.n	80076d6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80076be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076c2:	f383 8811 	msr	BASEPRI, r3
 80076c6:	f3bf 8f6f 	isb	sy
 80076ca:	f3bf 8f4f 	dsb	sy
 80076ce:	617b      	str	r3, [r7, #20]
}
 80076d0:	bf00      	nop
 80076d2:	bf00      	nop
 80076d4:	e7fd      	b.n	80076d2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80076d6:	4b0a      	ldr	r3, [pc, #40]	@ (8007700 <vTaskPlaceOnEventListRestricted+0x54>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	3318      	adds	r3, #24
 80076dc:	4619      	mov	r1, r3
 80076de:	68f8      	ldr	r0, [r7, #12]
 80076e0:	f7fe fa3b 	bl	8005b5a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d002      	beq.n	80076f0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80076ea:	f04f 33ff 	mov.w	r3, #4294967295
 80076ee:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80076f0:	6879      	ldr	r1, [r7, #4]
 80076f2:	68b8      	ldr	r0, [r7, #8]
 80076f4:	f000 fb64 	bl	8007dc0 <prvAddCurrentTaskToDelayedList>
	}
 80076f8:	bf00      	nop
 80076fa:	3718      	adds	r7, #24
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}
 8007700:	20000ee0 	.word	0x20000ee0

08007704 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b086      	sub	sp, #24
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	68db      	ldr	r3, [r3, #12]
 8007710:	68db      	ldr	r3, [r3, #12]
 8007712:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d10b      	bne.n	8007732 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800771a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800771e:	f383 8811 	msr	BASEPRI, r3
 8007722:	f3bf 8f6f 	isb	sy
 8007726:	f3bf 8f4f 	dsb	sy
 800772a:	60fb      	str	r3, [r7, #12]
}
 800772c:	bf00      	nop
 800772e:	bf00      	nop
 8007730:	e7fd      	b.n	800772e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	3318      	adds	r3, #24
 8007736:	4618      	mov	r0, r3
 8007738:	f7fe fa6c 	bl	8005c14 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800773c:	4b1d      	ldr	r3, [pc, #116]	@ (80077b4 <xTaskRemoveFromEventList+0xb0>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d11d      	bne.n	8007780 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	3304      	adds	r3, #4
 8007748:	4618      	mov	r0, r3
 800774a:	f7fe fa63 	bl	8005c14 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007752:	4b19      	ldr	r3, [pc, #100]	@ (80077b8 <xTaskRemoveFromEventList+0xb4>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	429a      	cmp	r2, r3
 8007758:	d903      	bls.n	8007762 <xTaskRemoveFromEventList+0x5e>
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800775e:	4a16      	ldr	r2, [pc, #88]	@ (80077b8 <xTaskRemoveFromEventList+0xb4>)
 8007760:	6013      	str	r3, [r2, #0]
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007766:	4613      	mov	r3, r2
 8007768:	009b      	lsls	r3, r3, #2
 800776a:	4413      	add	r3, r2
 800776c:	009b      	lsls	r3, r3, #2
 800776e:	4a13      	ldr	r2, [pc, #76]	@ (80077bc <xTaskRemoveFromEventList+0xb8>)
 8007770:	441a      	add	r2, r3
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	3304      	adds	r3, #4
 8007776:	4619      	mov	r1, r3
 8007778:	4610      	mov	r0, r2
 800777a:	f7fe f9ee 	bl	8005b5a <vListInsertEnd>
 800777e:	e005      	b.n	800778c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	3318      	adds	r3, #24
 8007784:	4619      	mov	r1, r3
 8007786:	480e      	ldr	r0, [pc, #56]	@ (80077c0 <xTaskRemoveFromEventList+0xbc>)
 8007788:	f7fe f9e7 	bl	8005b5a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007790:	4b0c      	ldr	r3, [pc, #48]	@ (80077c4 <xTaskRemoveFromEventList+0xc0>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007796:	429a      	cmp	r2, r3
 8007798:	d905      	bls.n	80077a6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800779a:	2301      	movs	r3, #1
 800779c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800779e:	4b0a      	ldr	r3, [pc, #40]	@ (80077c8 <xTaskRemoveFromEventList+0xc4>)
 80077a0:	2201      	movs	r2, #1
 80077a2:	601a      	str	r2, [r3, #0]
 80077a4:	e001      	b.n	80077aa <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80077a6:	2300      	movs	r3, #0
 80077a8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80077aa:	697b      	ldr	r3, [r7, #20]
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3718      	adds	r7, #24
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}
 80077b4:	200013dc 	.word	0x200013dc
 80077b8:	200013bc 	.word	0x200013bc
 80077bc:	20000ee4 	.word	0x20000ee4
 80077c0:	20001374 	.word	0x20001374
 80077c4:	20000ee0 	.word	0x20000ee0
 80077c8:	200013c8 	.word	0x200013c8

080077cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80077cc:	b480      	push	{r7}
 80077ce:	b083      	sub	sp, #12
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80077d4:	4b06      	ldr	r3, [pc, #24]	@ (80077f0 <vTaskInternalSetTimeOutState+0x24>)
 80077d6:	681a      	ldr	r2, [r3, #0]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80077dc:	4b05      	ldr	r3, [pc, #20]	@ (80077f4 <vTaskInternalSetTimeOutState+0x28>)
 80077de:	681a      	ldr	r2, [r3, #0]
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	605a      	str	r2, [r3, #4]
}
 80077e4:	bf00      	nop
 80077e6:	370c      	adds	r7, #12
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr
 80077f0:	200013cc 	.word	0x200013cc
 80077f4:	200013b8 	.word	0x200013b8

080077f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b088      	sub	sp, #32
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
 8007800:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d10b      	bne.n	8007820 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007808:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800780c:	f383 8811 	msr	BASEPRI, r3
 8007810:	f3bf 8f6f 	isb	sy
 8007814:	f3bf 8f4f 	dsb	sy
 8007818:	613b      	str	r3, [r7, #16]
}
 800781a:	bf00      	nop
 800781c:	bf00      	nop
 800781e:	e7fd      	b.n	800781c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d10b      	bne.n	800783e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800782a:	f383 8811 	msr	BASEPRI, r3
 800782e:	f3bf 8f6f 	isb	sy
 8007832:	f3bf 8f4f 	dsb	sy
 8007836:	60fb      	str	r3, [r7, #12]
}
 8007838:	bf00      	nop
 800783a:	bf00      	nop
 800783c:	e7fd      	b.n	800783a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800783e:	f000 ff9b 	bl	8008778 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007842:	4b1d      	ldr	r3, [pc, #116]	@ (80078b8 <xTaskCheckForTimeOut+0xc0>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	69ba      	ldr	r2, [r7, #24]
 800784e:	1ad3      	subs	r3, r2, r3
 8007850:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800785a:	d102      	bne.n	8007862 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800785c:	2300      	movs	r3, #0
 800785e:	61fb      	str	r3, [r7, #28]
 8007860:	e023      	b.n	80078aa <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681a      	ldr	r2, [r3, #0]
 8007866:	4b15      	ldr	r3, [pc, #84]	@ (80078bc <xTaskCheckForTimeOut+0xc4>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	429a      	cmp	r2, r3
 800786c:	d007      	beq.n	800787e <xTaskCheckForTimeOut+0x86>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	69ba      	ldr	r2, [r7, #24]
 8007874:	429a      	cmp	r2, r3
 8007876:	d302      	bcc.n	800787e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007878:	2301      	movs	r3, #1
 800787a:	61fb      	str	r3, [r7, #28]
 800787c:	e015      	b.n	80078aa <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	697a      	ldr	r2, [r7, #20]
 8007884:	429a      	cmp	r2, r3
 8007886:	d20b      	bcs.n	80078a0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	681a      	ldr	r2, [r3, #0]
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	1ad2      	subs	r2, r2, r3
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f7ff ff99 	bl	80077cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800789a:	2300      	movs	r3, #0
 800789c:	61fb      	str	r3, [r7, #28]
 800789e:	e004      	b.n	80078aa <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	2200      	movs	r2, #0
 80078a4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80078a6:	2301      	movs	r3, #1
 80078a8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80078aa:	f000 ff97 	bl	80087dc <vPortExitCritical>

	return xReturn;
 80078ae:	69fb      	ldr	r3, [r7, #28]
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3720      	adds	r7, #32
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}
 80078b8:	200013b8 	.word	0x200013b8
 80078bc:	200013cc 	.word	0x200013cc

080078c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80078c0:	b480      	push	{r7}
 80078c2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80078c4:	4b03      	ldr	r3, [pc, #12]	@ (80078d4 <vTaskMissedYield+0x14>)
 80078c6:	2201      	movs	r2, #1
 80078c8:	601a      	str	r2, [r3, #0]
}
 80078ca:	bf00      	nop
 80078cc:	46bd      	mov	sp, r7
 80078ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d2:	4770      	bx	lr
 80078d4:	200013c8 	.word	0x200013c8

080078d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b082      	sub	sp, #8
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80078e0:	f000 f852 	bl	8007988 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80078e4:	4b06      	ldr	r3, [pc, #24]	@ (8007900 <prvIdleTask+0x28>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	2b01      	cmp	r3, #1
 80078ea:	d9f9      	bls.n	80078e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80078ec:	4b05      	ldr	r3, [pc, #20]	@ (8007904 <prvIdleTask+0x2c>)
 80078ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80078f2:	601a      	str	r2, [r3, #0]
 80078f4:	f3bf 8f4f 	dsb	sy
 80078f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80078fc:	e7f0      	b.n	80078e0 <prvIdleTask+0x8>
 80078fe:	bf00      	nop
 8007900:	20000ee4 	.word	0x20000ee4
 8007904:	e000ed04 	.word	0xe000ed04

08007908 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b082      	sub	sp, #8
 800790c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800790e:	2300      	movs	r3, #0
 8007910:	607b      	str	r3, [r7, #4]
 8007912:	e00c      	b.n	800792e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007914:	687a      	ldr	r2, [r7, #4]
 8007916:	4613      	mov	r3, r2
 8007918:	009b      	lsls	r3, r3, #2
 800791a:	4413      	add	r3, r2
 800791c:	009b      	lsls	r3, r3, #2
 800791e:	4a12      	ldr	r2, [pc, #72]	@ (8007968 <prvInitialiseTaskLists+0x60>)
 8007920:	4413      	add	r3, r2
 8007922:	4618      	mov	r0, r3
 8007924:	f7fe f8ec 	bl	8005b00 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	3301      	adds	r3, #1
 800792c:	607b      	str	r3, [r7, #4]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2b37      	cmp	r3, #55	@ 0x37
 8007932:	d9ef      	bls.n	8007914 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007934:	480d      	ldr	r0, [pc, #52]	@ (800796c <prvInitialiseTaskLists+0x64>)
 8007936:	f7fe f8e3 	bl	8005b00 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800793a:	480d      	ldr	r0, [pc, #52]	@ (8007970 <prvInitialiseTaskLists+0x68>)
 800793c:	f7fe f8e0 	bl	8005b00 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007940:	480c      	ldr	r0, [pc, #48]	@ (8007974 <prvInitialiseTaskLists+0x6c>)
 8007942:	f7fe f8dd 	bl	8005b00 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007946:	480c      	ldr	r0, [pc, #48]	@ (8007978 <prvInitialiseTaskLists+0x70>)
 8007948:	f7fe f8da 	bl	8005b00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800794c:	480b      	ldr	r0, [pc, #44]	@ (800797c <prvInitialiseTaskLists+0x74>)
 800794e:	f7fe f8d7 	bl	8005b00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007952:	4b0b      	ldr	r3, [pc, #44]	@ (8007980 <prvInitialiseTaskLists+0x78>)
 8007954:	4a05      	ldr	r2, [pc, #20]	@ (800796c <prvInitialiseTaskLists+0x64>)
 8007956:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007958:	4b0a      	ldr	r3, [pc, #40]	@ (8007984 <prvInitialiseTaskLists+0x7c>)
 800795a:	4a05      	ldr	r2, [pc, #20]	@ (8007970 <prvInitialiseTaskLists+0x68>)
 800795c:	601a      	str	r2, [r3, #0]
}
 800795e:	bf00      	nop
 8007960:	3708      	adds	r7, #8
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}
 8007966:	bf00      	nop
 8007968:	20000ee4 	.word	0x20000ee4
 800796c:	20001344 	.word	0x20001344
 8007970:	20001358 	.word	0x20001358
 8007974:	20001374 	.word	0x20001374
 8007978:	20001388 	.word	0x20001388
 800797c:	200013a0 	.word	0x200013a0
 8007980:	2000136c 	.word	0x2000136c
 8007984:	20001370 	.word	0x20001370

08007988 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b082      	sub	sp, #8
 800798c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800798e:	e019      	b.n	80079c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007990:	f000 fef2 	bl	8008778 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007994:	4b10      	ldr	r3, [pc, #64]	@ (80079d8 <prvCheckTasksWaitingTermination+0x50>)
 8007996:	68db      	ldr	r3, [r3, #12]
 8007998:	68db      	ldr	r3, [r3, #12]
 800799a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	3304      	adds	r3, #4
 80079a0:	4618      	mov	r0, r3
 80079a2:	f7fe f937 	bl	8005c14 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80079a6:	4b0d      	ldr	r3, [pc, #52]	@ (80079dc <prvCheckTasksWaitingTermination+0x54>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	3b01      	subs	r3, #1
 80079ac:	4a0b      	ldr	r2, [pc, #44]	@ (80079dc <prvCheckTasksWaitingTermination+0x54>)
 80079ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80079b0:	4b0b      	ldr	r3, [pc, #44]	@ (80079e0 <prvCheckTasksWaitingTermination+0x58>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	3b01      	subs	r3, #1
 80079b6:	4a0a      	ldr	r2, [pc, #40]	@ (80079e0 <prvCheckTasksWaitingTermination+0x58>)
 80079b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80079ba:	f000 ff0f 	bl	80087dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f000 f810 	bl	80079e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80079c4:	4b06      	ldr	r3, [pc, #24]	@ (80079e0 <prvCheckTasksWaitingTermination+0x58>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d1e1      	bne.n	8007990 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80079cc:	bf00      	nop
 80079ce:	bf00      	nop
 80079d0:	3708      	adds	r7, #8
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}
 80079d6:	bf00      	nop
 80079d8:	20001388 	.word	0x20001388
 80079dc:	200013b4 	.word	0x200013b4
 80079e0:	2000139c 	.word	0x2000139c

080079e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b084      	sub	sp, #16
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d108      	bne.n	8007a08 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079fa:	4618      	mov	r0, r3
 80079fc:	f001 f8ac 	bl	8008b58 <vPortFree>
				vPortFree( pxTCB );
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f001 f8a9 	bl	8008b58 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007a06:	e019      	b.n	8007a3c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007a0e:	2b01      	cmp	r3, #1
 8007a10:	d103      	bne.n	8007a1a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f001 f8a0 	bl	8008b58 <vPortFree>
	}
 8007a18:	e010      	b.n	8007a3c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007a20:	2b02      	cmp	r3, #2
 8007a22:	d00b      	beq.n	8007a3c <prvDeleteTCB+0x58>
	__asm volatile
 8007a24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a28:	f383 8811 	msr	BASEPRI, r3
 8007a2c:	f3bf 8f6f 	isb	sy
 8007a30:	f3bf 8f4f 	dsb	sy
 8007a34:	60fb      	str	r3, [r7, #12]
}
 8007a36:	bf00      	nop
 8007a38:	bf00      	nop
 8007a3a:	e7fd      	b.n	8007a38 <prvDeleteTCB+0x54>
	}
 8007a3c:	bf00      	nop
 8007a3e:	3710      	adds	r7, #16
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}

08007a44 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007a44:	b480      	push	{r7}
 8007a46:	b083      	sub	sp, #12
 8007a48:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a4a:	4b0c      	ldr	r3, [pc, #48]	@ (8007a7c <prvResetNextTaskUnblockTime+0x38>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d104      	bne.n	8007a5e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007a54:	4b0a      	ldr	r3, [pc, #40]	@ (8007a80 <prvResetNextTaskUnblockTime+0x3c>)
 8007a56:	f04f 32ff 	mov.w	r2, #4294967295
 8007a5a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007a5c:	e008      	b.n	8007a70 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a5e:	4b07      	ldr	r3, [pc, #28]	@ (8007a7c <prvResetNextTaskUnblockTime+0x38>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	68db      	ldr	r3, [r3, #12]
 8007a64:	68db      	ldr	r3, [r3, #12]
 8007a66:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	4a04      	ldr	r2, [pc, #16]	@ (8007a80 <prvResetNextTaskUnblockTime+0x3c>)
 8007a6e:	6013      	str	r3, [r2, #0]
}
 8007a70:	bf00      	nop
 8007a72:	370c      	adds	r7, #12
 8007a74:	46bd      	mov	sp, r7
 8007a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7a:	4770      	bx	lr
 8007a7c:	2000136c 	.word	0x2000136c
 8007a80:	200013d4 	.word	0x200013d4

08007a84 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007a84:	b480      	push	{r7}
 8007a86:	b083      	sub	sp, #12
 8007a88:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8007a8a:	4b05      	ldr	r3, [pc, #20]	@ (8007aa0 <xTaskGetCurrentTaskHandle+0x1c>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8007a90:	687b      	ldr	r3, [r7, #4]
	}
 8007a92:	4618      	mov	r0, r3
 8007a94:	370c      	adds	r7, #12
 8007a96:	46bd      	mov	sp, r7
 8007a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9c:	4770      	bx	lr
 8007a9e:	bf00      	nop
 8007aa0:	20000ee0 	.word	0x20000ee0

08007aa4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b083      	sub	sp, #12
 8007aa8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007aaa:	4b0b      	ldr	r3, [pc, #44]	@ (8007ad8 <xTaskGetSchedulerState+0x34>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d102      	bne.n	8007ab8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	607b      	str	r3, [r7, #4]
 8007ab6:	e008      	b.n	8007aca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ab8:	4b08      	ldr	r3, [pc, #32]	@ (8007adc <xTaskGetSchedulerState+0x38>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d102      	bne.n	8007ac6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007ac0:	2302      	movs	r3, #2
 8007ac2:	607b      	str	r3, [r7, #4]
 8007ac4:	e001      	b.n	8007aca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007aca:	687b      	ldr	r3, [r7, #4]
	}
 8007acc:	4618      	mov	r0, r3
 8007ace:	370c      	adds	r7, #12
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad6:	4770      	bx	lr
 8007ad8:	200013c0 	.word	0x200013c0
 8007adc:	200013dc 	.word	0x200013dc

08007ae0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b084      	sub	sp, #16
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007aec:	2300      	movs	r3, #0
 8007aee:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d051      	beq.n	8007b9a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007afa:	4b2a      	ldr	r3, [pc, #168]	@ (8007ba4 <xTaskPriorityInherit+0xc4>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b00:	429a      	cmp	r2, r3
 8007b02:	d241      	bcs.n	8007b88 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	699b      	ldr	r3, [r3, #24]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	db06      	blt.n	8007b1a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b0c:	4b25      	ldr	r3, [pc, #148]	@ (8007ba4 <xTaskPriorityInherit+0xc4>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b12:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	6959      	ldr	r1, [r3, #20]
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b22:	4613      	mov	r3, r2
 8007b24:	009b      	lsls	r3, r3, #2
 8007b26:	4413      	add	r3, r2
 8007b28:	009b      	lsls	r3, r3, #2
 8007b2a:	4a1f      	ldr	r2, [pc, #124]	@ (8007ba8 <xTaskPriorityInherit+0xc8>)
 8007b2c:	4413      	add	r3, r2
 8007b2e:	4299      	cmp	r1, r3
 8007b30:	d122      	bne.n	8007b78 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	3304      	adds	r3, #4
 8007b36:	4618      	mov	r0, r3
 8007b38:	f7fe f86c 	bl	8005c14 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007b3c:	4b19      	ldr	r3, [pc, #100]	@ (8007ba4 <xTaskPriorityInherit+0xc4>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b4a:	4b18      	ldr	r3, [pc, #96]	@ (8007bac <xTaskPriorityInherit+0xcc>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	429a      	cmp	r2, r3
 8007b50:	d903      	bls.n	8007b5a <xTaskPriorityInherit+0x7a>
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b56:	4a15      	ldr	r2, [pc, #84]	@ (8007bac <xTaskPriorityInherit+0xcc>)
 8007b58:	6013      	str	r3, [r2, #0]
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b5e:	4613      	mov	r3, r2
 8007b60:	009b      	lsls	r3, r3, #2
 8007b62:	4413      	add	r3, r2
 8007b64:	009b      	lsls	r3, r3, #2
 8007b66:	4a10      	ldr	r2, [pc, #64]	@ (8007ba8 <xTaskPriorityInherit+0xc8>)
 8007b68:	441a      	add	r2, r3
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	3304      	adds	r3, #4
 8007b6e:	4619      	mov	r1, r3
 8007b70:	4610      	mov	r0, r2
 8007b72:	f7fd fff2 	bl	8005b5a <vListInsertEnd>
 8007b76:	e004      	b.n	8007b82 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007b78:	4b0a      	ldr	r3, [pc, #40]	@ (8007ba4 <xTaskPriorityInherit+0xc4>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007b82:	2301      	movs	r3, #1
 8007b84:	60fb      	str	r3, [r7, #12]
 8007b86:	e008      	b.n	8007b9a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007b8c:	4b05      	ldr	r3, [pc, #20]	@ (8007ba4 <xTaskPriorityInherit+0xc4>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b92:	429a      	cmp	r2, r3
 8007b94:	d201      	bcs.n	8007b9a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007b96:	2301      	movs	r3, #1
 8007b98:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
	}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3710      	adds	r7, #16
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}
 8007ba4:	20000ee0 	.word	0x20000ee0
 8007ba8:	20000ee4 	.word	0x20000ee4
 8007bac:	200013bc 	.word	0x200013bc

08007bb0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b086      	sub	sp, #24
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d058      	beq.n	8007c78 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007bc6:	4b2f      	ldr	r3, [pc, #188]	@ (8007c84 <xTaskPriorityDisinherit+0xd4>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	693a      	ldr	r2, [r7, #16]
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d00b      	beq.n	8007be8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007bd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bd4:	f383 8811 	msr	BASEPRI, r3
 8007bd8:	f3bf 8f6f 	isb	sy
 8007bdc:	f3bf 8f4f 	dsb	sy
 8007be0:	60fb      	str	r3, [r7, #12]
}
 8007be2:	bf00      	nop
 8007be4:	bf00      	nop
 8007be6:	e7fd      	b.n	8007be4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d10b      	bne.n	8007c08 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bf4:	f383 8811 	msr	BASEPRI, r3
 8007bf8:	f3bf 8f6f 	isb	sy
 8007bfc:	f3bf 8f4f 	dsb	sy
 8007c00:	60bb      	str	r3, [r7, #8]
}
 8007c02:	bf00      	nop
 8007c04:	bf00      	nop
 8007c06:	e7fd      	b.n	8007c04 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007c08:	693b      	ldr	r3, [r7, #16]
 8007c0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c0c:	1e5a      	subs	r2, r3, #1
 8007c0e:	693b      	ldr	r3, [r7, #16]
 8007c10:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c1a:	429a      	cmp	r2, r3
 8007c1c:	d02c      	beq.n	8007c78 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d128      	bne.n	8007c78 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	3304      	adds	r3, #4
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f7fd fff2 	bl	8005c14 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c3c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c48:	4b0f      	ldr	r3, [pc, #60]	@ (8007c88 <xTaskPriorityDisinherit+0xd8>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	d903      	bls.n	8007c58 <xTaskPriorityDisinherit+0xa8>
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c54:	4a0c      	ldr	r2, [pc, #48]	@ (8007c88 <xTaskPriorityDisinherit+0xd8>)
 8007c56:	6013      	str	r3, [r2, #0]
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c5c:	4613      	mov	r3, r2
 8007c5e:	009b      	lsls	r3, r3, #2
 8007c60:	4413      	add	r3, r2
 8007c62:	009b      	lsls	r3, r3, #2
 8007c64:	4a09      	ldr	r2, [pc, #36]	@ (8007c8c <xTaskPriorityDisinherit+0xdc>)
 8007c66:	441a      	add	r2, r3
 8007c68:	693b      	ldr	r3, [r7, #16]
 8007c6a:	3304      	adds	r3, #4
 8007c6c:	4619      	mov	r1, r3
 8007c6e:	4610      	mov	r0, r2
 8007c70:	f7fd ff73 	bl	8005b5a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007c74:	2301      	movs	r3, #1
 8007c76:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007c78:	697b      	ldr	r3, [r7, #20]
	}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3718      	adds	r7, #24
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}
 8007c82:	bf00      	nop
 8007c84:	20000ee0 	.word	0x20000ee0
 8007c88:	200013bc 	.word	0x200013bc
 8007c8c:	20000ee4 	.word	0x20000ee4

08007c90 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b088      	sub	sp, #32
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d06c      	beq.n	8007d82 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007ca8:	69bb      	ldr	r3, [r7, #24]
 8007caa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d10b      	bne.n	8007cc8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8007cb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cb4:	f383 8811 	msr	BASEPRI, r3
 8007cb8:	f3bf 8f6f 	isb	sy
 8007cbc:	f3bf 8f4f 	dsb	sy
 8007cc0:	60fb      	str	r3, [r7, #12]
}
 8007cc2:	bf00      	nop
 8007cc4:	bf00      	nop
 8007cc6:	e7fd      	b.n	8007cc4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007cc8:	69bb      	ldr	r3, [r7, #24]
 8007cca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ccc:	683a      	ldr	r2, [r7, #0]
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	d902      	bls.n	8007cd8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	61fb      	str	r3, [r7, #28]
 8007cd6:	e002      	b.n	8007cde <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007cd8:	69bb      	ldr	r3, [r7, #24]
 8007cda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007cdc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007cde:	69bb      	ldr	r3, [r7, #24]
 8007ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ce2:	69fa      	ldr	r2, [r7, #28]
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	d04c      	beq.n	8007d82 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007ce8:	69bb      	ldr	r3, [r7, #24]
 8007cea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007cec:	697a      	ldr	r2, [r7, #20]
 8007cee:	429a      	cmp	r2, r3
 8007cf0:	d147      	bne.n	8007d82 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007cf2:	4b26      	ldr	r3, [pc, #152]	@ (8007d8c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	69ba      	ldr	r2, [r7, #24]
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	d10b      	bne.n	8007d14 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8007cfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d00:	f383 8811 	msr	BASEPRI, r3
 8007d04:	f3bf 8f6f 	isb	sy
 8007d08:	f3bf 8f4f 	dsb	sy
 8007d0c:	60bb      	str	r3, [r7, #8]
}
 8007d0e:	bf00      	nop
 8007d10:	bf00      	nop
 8007d12:	e7fd      	b.n	8007d10 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007d14:	69bb      	ldr	r3, [r7, #24]
 8007d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d18:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007d1a:	69bb      	ldr	r3, [r7, #24]
 8007d1c:	69fa      	ldr	r2, [r7, #28]
 8007d1e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007d20:	69bb      	ldr	r3, [r7, #24]
 8007d22:	699b      	ldr	r3, [r3, #24]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	db04      	blt.n	8007d32 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d28:	69fb      	ldr	r3, [r7, #28]
 8007d2a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007d2e:	69bb      	ldr	r3, [r7, #24]
 8007d30:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007d32:	69bb      	ldr	r3, [r7, #24]
 8007d34:	6959      	ldr	r1, [r3, #20]
 8007d36:	693a      	ldr	r2, [r7, #16]
 8007d38:	4613      	mov	r3, r2
 8007d3a:	009b      	lsls	r3, r3, #2
 8007d3c:	4413      	add	r3, r2
 8007d3e:	009b      	lsls	r3, r3, #2
 8007d40:	4a13      	ldr	r2, [pc, #76]	@ (8007d90 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007d42:	4413      	add	r3, r2
 8007d44:	4299      	cmp	r1, r3
 8007d46:	d11c      	bne.n	8007d82 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d48:	69bb      	ldr	r3, [r7, #24]
 8007d4a:	3304      	adds	r3, #4
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f7fd ff61 	bl	8005c14 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007d52:	69bb      	ldr	r3, [r7, #24]
 8007d54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d56:	4b0f      	ldr	r3, [pc, #60]	@ (8007d94 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	429a      	cmp	r2, r3
 8007d5c:	d903      	bls.n	8007d66 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8007d5e:	69bb      	ldr	r3, [r7, #24]
 8007d60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d62:	4a0c      	ldr	r2, [pc, #48]	@ (8007d94 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007d64:	6013      	str	r3, [r2, #0]
 8007d66:	69bb      	ldr	r3, [r7, #24]
 8007d68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d6a:	4613      	mov	r3, r2
 8007d6c:	009b      	lsls	r3, r3, #2
 8007d6e:	4413      	add	r3, r2
 8007d70:	009b      	lsls	r3, r3, #2
 8007d72:	4a07      	ldr	r2, [pc, #28]	@ (8007d90 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007d74:	441a      	add	r2, r3
 8007d76:	69bb      	ldr	r3, [r7, #24]
 8007d78:	3304      	adds	r3, #4
 8007d7a:	4619      	mov	r1, r3
 8007d7c:	4610      	mov	r0, r2
 8007d7e:	f7fd feec 	bl	8005b5a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007d82:	bf00      	nop
 8007d84:	3720      	adds	r7, #32
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}
 8007d8a:	bf00      	nop
 8007d8c:	20000ee0 	.word	0x20000ee0
 8007d90:	20000ee4 	.word	0x20000ee4
 8007d94:	200013bc 	.word	0x200013bc

08007d98 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007d98:	b480      	push	{r7}
 8007d9a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007d9c:	4b07      	ldr	r3, [pc, #28]	@ (8007dbc <pvTaskIncrementMutexHeldCount+0x24>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d004      	beq.n	8007dae <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007da4:	4b05      	ldr	r3, [pc, #20]	@ (8007dbc <pvTaskIncrementMutexHeldCount+0x24>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007daa:	3201      	adds	r2, #1
 8007dac:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8007dae:	4b03      	ldr	r3, [pc, #12]	@ (8007dbc <pvTaskIncrementMutexHeldCount+0x24>)
 8007db0:	681b      	ldr	r3, [r3, #0]
	}
 8007db2:	4618      	mov	r0, r3
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr
 8007dbc:	20000ee0 	.word	0x20000ee0

08007dc0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b084      	sub	sp, #16
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
 8007dc8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007dca:	4b21      	ldr	r3, [pc, #132]	@ (8007e50 <prvAddCurrentTaskToDelayedList+0x90>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007dd0:	4b20      	ldr	r3, [pc, #128]	@ (8007e54 <prvAddCurrentTaskToDelayedList+0x94>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	3304      	adds	r3, #4
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f7fd ff1c 	bl	8005c14 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007de2:	d10a      	bne.n	8007dfa <prvAddCurrentTaskToDelayedList+0x3a>
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d007      	beq.n	8007dfa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007dea:	4b1a      	ldr	r3, [pc, #104]	@ (8007e54 <prvAddCurrentTaskToDelayedList+0x94>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	3304      	adds	r3, #4
 8007df0:	4619      	mov	r1, r3
 8007df2:	4819      	ldr	r0, [pc, #100]	@ (8007e58 <prvAddCurrentTaskToDelayedList+0x98>)
 8007df4:	f7fd feb1 	bl	8005b5a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007df8:	e026      	b.n	8007e48 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007dfa:	68fa      	ldr	r2, [r7, #12]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	4413      	add	r3, r2
 8007e00:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007e02:	4b14      	ldr	r3, [pc, #80]	@ (8007e54 <prvAddCurrentTaskToDelayedList+0x94>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	68ba      	ldr	r2, [r7, #8]
 8007e08:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007e0a:	68ba      	ldr	r2, [r7, #8]
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	429a      	cmp	r2, r3
 8007e10:	d209      	bcs.n	8007e26 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e12:	4b12      	ldr	r3, [pc, #72]	@ (8007e5c <prvAddCurrentTaskToDelayedList+0x9c>)
 8007e14:	681a      	ldr	r2, [r3, #0]
 8007e16:	4b0f      	ldr	r3, [pc, #60]	@ (8007e54 <prvAddCurrentTaskToDelayedList+0x94>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	3304      	adds	r3, #4
 8007e1c:	4619      	mov	r1, r3
 8007e1e:	4610      	mov	r0, r2
 8007e20:	f7fd febf 	bl	8005ba2 <vListInsert>
}
 8007e24:	e010      	b.n	8007e48 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e26:	4b0e      	ldr	r3, [pc, #56]	@ (8007e60 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007e28:	681a      	ldr	r2, [r3, #0]
 8007e2a:	4b0a      	ldr	r3, [pc, #40]	@ (8007e54 <prvAddCurrentTaskToDelayedList+0x94>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	3304      	adds	r3, #4
 8007e30:	4619      	mov	r1, r3
 8007e32:	4610      	mov	r0, r2
 8007e34:	f7fd feb5 	bl	8005ba2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007e38:	4b0a      	ldr	r3, [pc, #40]	@ (8007e64 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	68ba      	ldr	r2, [r7, #8]
 8007e3e:	429a      	cmp	r2, r3
 8007e40:	d202      	bcs.n	8007e48 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007e42:	4a08      	ldr	r2, [pc, #32]	@ (8007e64 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	6013      	str	r3, [r2, #0]
}
 8007e48:	bf00      	nop
 8007e4a:	3710      	adds	r7, #16
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}
 8007e50:	200013b8 	.word	0x200013b8
 8007e54:	20000ee0 	.word	0x20000ee0
 8007e58:	200013a0 	.word	0x200013a0
 8007e5c:	20001370 	.word	0x20001370
 8007e60:	2000136c 	.word	0x2000136c
 8007e64:	200013d4 	.word	0x200013d4

08007e68 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b08a      	sub	sp, #40	@ 0x28
 8007e6c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007e72:	f000 fb13 	bl	800849c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007e76:	4b1d      	ldr	r3, [pc, #116]	@ (8007eec <xTimerCreateTimerTask+0x84>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d021      	beq.n	8007ec2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007e82:	2300      	movs	r3, #0
 8007e84:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007e86:	1d3a      	adds	r2, r7, #4
 8007e88:	f107 0108 	add.w	r1, r7, #8
 8007e8c:	f107 030c 	add.w	r3, r7, #12
 8007e90:	4618      	mov	r0, r3
 8007e92:	f7fd fe1b 	bl	8005acc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007e96:	6879      	ldr	r1, [r7, #4]
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	68fa      	ldr	r2, [r7, #12]
 8007e9c:	9202      	str	r2, [sp, #8]
 8007e9e:	9301      	str	r3, [sp, #4]
 8007ea0:	2302      	movs	r3, #2
 8007ea2:	9300      	str	r3, [sp, #0]
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	460a      	mov	r2, r1
 8007ea8:	4911      	ldr	r1, [pc, #68]	@ (8007ef0 <xTimerCreateTimerTask+0x88>)
 8007eaa:	4812      	ldr	r0, [pc, #72]	@ (8007ef4 <xTimerCreateTimerTask+0x8c>)
 8007eac:	f7fe ffc0 	bl	8006e30 <xTaskCreateStatic>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	4a11      	ldr	r2, [pc, #68]	@ (8007ef8 <xTimerCreateTimerTask+0x90>)
 8007eb4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007eb6:	4b10      	ldr	r3, [pc, #64]	@ (8007ef8 <xTimerCreateTimerTask+0x90>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d001      	beq.n	8007ec2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d10b      	bne.n	8007ee0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007ec8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ecc:	f383 8811 	msr	BASEPRI, r3
 8007ed0:	f3bf 8f6f 	isb	sy
 8007ed4:	f3bf 8f4f 	dsb	sy
 8007ed8:	613b      	str	r3, [r7, #16]
}
 8007eda:	bf00      	nop
 8007edc:	bf00      	nop
 8007ede:	e7fd      	b.n	8007edc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007ee0:	697b      	ldr	r3, [r7, #20]
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3718      	adds	r7, #24
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}
 8007eea:	bf00      	nop
 8007eec:	20001410 	.word	0x20001410
 8007ef0:	08008e68 	.word	0x08008e68
 8007ef4:	08008035 	.word	0x08008035
 8007ef8:	20001414 	.word	0x20001414

08007efc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b08a      	sub	sp, #40	@ 0x28
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	60f8      	str	r0, [r7, #12]
 8007f04:	60b9      	str	r1, [r7, #8]
 8007f06:	607a      	str	r2, [r7, #4]
 8007f08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d10b      	bne.n	8007f2c <xTimerGenericCommand+0x30>
	__asm volatile
 8007f14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f18:	f383 8811 	msr	BASEPRI, r3
 8007f1c:	f3bf 8f6f 	isb	sy
 8007f20:	f3bf 8f4f 	dsb	sy
 8007f24:	623b      	str	r3, [r7, #32]
}
 8007f26:	bf00      	nop
 8007f28:	bf00      	nop
 8007f2a:	e7fd      	b.n	8007f28 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007f2c:	4b19      	ldr	r3, [pc, #100]	@ (8007f94 <xTimerGenericCommand+0x98>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d02a      	beq.n	8007f8a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	2b05      	cmp	r3, #5
 8007f44:	dc18      	bgt.n	8007f78 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007f46:	f7ff fdad 	bl	8007aa4 <xTaskGetSchedulerState>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	2b02      	cmp	r3, #2
 8007f4e:	d109      	bne.n	8007f64 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007f50:	4b10      	ldr	r3, [pc, #64]	@ (8007f94 <xTimerGenericCommand+0x98>)
 8007f52:	6818      	ldr	r0, [r3, #0]
 8007f54:	f107 0110 	add.w	r1, r7, #16
 8007f58:	2300      	movs	r3, #0
 8007f5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f5c:	f7fe f8f0 	bl	8006140 <xQueueGenericSend>
 8007f60:	6278      	str	r0, [r7, #36]	@ 0x24
 8007f62:	e012      	b.n	8007f8a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007f64:	4b0b      	ldr	r3, [pc, #44]	@ (8007f94 <xTimerGenericCommand+0x98>)
 8007f66:	6818      	ldr	r0, [r3, #0]
 8007f68:	f107 0110 	add.w	r1, r7, #16
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	2200      	movs	r2, #0
 8007f70:	f7fe f8e6 	bl	8006140 <xQueueGenericSend>
 8007f74:	6278      	str	r0, [r7, #36]	@ 0x24
 8007f76:	e008      	b.n	8007f8a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007f78:	4b06      	ldr	r3, [pc, #24]	@ (8007f94 <xTimerGenericCommand+0x98>)
 8007f7a:	6818      	ldr	r0, [r3, #0]
 8007f7c:	f107 0110 	add.w	r1, r7, #16
 8007f80:	2300      	movs	r3, #0
 8007f82:	683a      	ldr	r2, [r7, #0]
 8007f84:	f7fe f9de 	bl	8006344 <xQueueGenericSendFromISR>
 8007f88:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3728      	adds	r7, #40	@ 0x28
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}
 8007f94:	20001410 	.word	0x20001410

08007f98 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b088      	sub	sp, #32
 8007f9c:	af02      	add	r7, sp, #8
 8007f9e:	6078      	str	r0, [r7, #4]
 8007fa0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fa2:	4b23      	ldr	r3, [pc, #140]	@ (8008030 <prvProcessExpiredTimer+0x98>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	68db      	ldr	r3, [r3, #12]
 8007fa8:	68db      	ldr	r3, [r3, #12]
 8007faa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	3304      	adds	r3, #4
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f7fd fe2f 	bl	8005c14 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007fbc:	f003 0304 	and.w	r3, r3, #4
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d023      	beq.n	800800c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	699a      	ldr	r2, [r3, #24]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	18d1      	adds	r1, r2, r3
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	683a      	ldr	r2, [r7, #0]
 8007fd0:	6978      	ldr	r0, [r7, #20]
 8007fd2:	f000 f8d5 	bl	8008180 <prvInsertTimerInActiveList>
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d020      	beq.n	800801e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007fdc:	2300      	movs	r3, #0
 8007fde:	9300      	str	r3, [sp, #0]
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	687a      	ldr	r2, [r7, #4]
 8007fe4:	2100      	movs	r1, #0
 8007fe6:	6978      	ldr	r0, [r7, #20]
 8007fe8:	f7ff ff88 	bl	8007efc <xTimerGenericCommand>
 8007fec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007fee:	693b      	ldr	r3, [r7, #16]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d114      	bne.n	800801e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007ff4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ff8:	f383 8811 	msr	BASEPRI, r3
 8007ffc:	f3bf 8f6f 	isb	sy
 8008000:	f3bf 8f4f 	dsb	sy
 8008004:	60fb      	str	r3, [r7, #12]
}
 8008006:	bf00      	nop
 8008008:	bf00      	nop
 800800a:	e7fd      	b.n	8008008 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800800c:	697b      	ldr	r3, [r7, #20]
 800800e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008012:	f023 0301 	bic.w	r3, r3, #1
 8008016:	b2da      	uxtb	r2, r3
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	6a1b      	ldr	r3, [r3, #32]
 8008022:	6978      	ldr	r0, [r7, #20]
 8008024:	4798      	blx	r3
}
 8008026:	bf00      	nop
 8008028:	3718      	adds	r7, #24
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}
 800802e:	bf00      	nop
 8008030:	20001408 	.word	0x20001408

08008034 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b084      	sub	sp, #16
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800803c:	f107 0308 	add.w	r3, r7, #8
 8008040:	4618      	mov	r0, r3
 8008042:	f000 f859 	bl	80080f8 <prvGetNextExpireTime>
 8008046:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	4619      	mov	r1, r3
 800804c:	68f8      	ldr	r0, [r7, #12]
 800804e:	f000 f805 	bl	800805c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008052:	f000 f8d7 	bl	8008204 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008056:	bf00      	nop
 8008058:	e7f0      	b.n	800803c <prvTimerTask+0x8>
	...

0800805c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b084      	sub	sp, #16
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008066:	f7ff f927 	bl	80072b8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800806a:	f107 0308 	add.w	r3, r7, #8
 800806e:	4618      	mov	r0, r3
 8008070:	f000 f866 	bl	8008140 <prvSampleTimeNow>
 8008074:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d130      	bne.n	80080de <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d10a      	bne.n	8008098 <prvProcessTimerOrBlockTask+0x3c>
 8008082:	687a      	ldr	r2, [r7, #4]
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	429a      	cmp	r2, r3
 8008088:	d806      	bhi.n	8008098 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800808a:	f7ff f923 	bl	80072d4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800808e:	68f9      	ldr	r1, [r7, #12]
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f7ff ff81 	bl	8007f98 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008096:	e024      	b.n	80080e2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d008      	beq.n	80080b0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800809e:	4b13      	ldr	r3, [pc, #76]	@ (80080ec <prvProcessTimerOrBlockTask+0x90>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d101      	bne.n	80080ac <prvProcessTimerOrBlockTask+0x50>
 80080a8:	2301      	movs	r3, #1
 80080aa:	e000      	b.n	80080ae <prvProcessTimerOrBlockTask+0x52>
 80080ac:	2300      	movs	r3, #0
 80080ae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80080b0:	4b0f      	ldr	r3, [pc, #60]	@ (80080f0 <prvProcessTimerOrBlockTask+0x94>)
 80080b2:	6818      	ldr	r0, [r3, #0]
 80080b4:	687a      	ldr	r2, [r7, #4]
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	1ad3      	subs	r3, r2, r3
 80080ba:	683a      	ldr	r2, [r7, #0]
 80080bc:	4619      	mov	r1, r3
 80080be:	f7fe fe83 	bl	8006dc8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80080c2:	f7ff f907 	bl	80072d4 <xTaskResumeAll>
 80080c6:	4603      	mov	r3, r0
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d10a      	bne.n	80080e2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80080cc:	4b09      	ldr	r3, [pc, #36]	@ (80080f4 <prvProcessTimerOrBlockTask+0x98>)
 80080ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80080d2:	601a      	str	r2, [r3, #0]
 80080d4:	f3bf 8f4f 	dsb	sy
 80080d8:	f3bf 8f6f 	isb	sy
}
 80080dc:	e001      	b.n	80080e2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80080de:	f7ff f8f9 	bl	80072d4 <xTaskResumeAll>
}
 80080e2:	bf00      	nop
 80080e4:	3710      	adds	r7, #16
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}
 80080ea:	bf00      	nop
 80080ec:	2000140c 	.word	0x2000140c
 80080f0:	20001410 	.word	0x20001410
 80080f4:	e000ed04 	.word	0xe000ed04

080080f8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80080f8:	b480      	push	{r7}
 80080fa:	b085      	sub	sp, #20
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008100:	4b0e      	ldr	r3, [pc, #56]	@ (800813c <prvGetNextExpireTime+0x44>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d101      	bne.n	800810e <prvGetNextExpireTime+0x16>
 800810a:	2201      	movs	r2, #1
 800810c:	e000      	b.n	8008110 <prvGetNextExpireTime+0x18>
 800810e:	2200      	movs	r2, #0
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d105      	bne.n	8008128 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800811c:	4b07      	ldr	r3, [pc, #28]	@ (800813c <prvGetNextExpireTime+0x44>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	68db      	ldr	r3, [r3, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	60fb      	str	r3, [r7, #12]
 8008126:	e001      	b.n	800812c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008128:	2300      	movs	r3, #0
 800812a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800812c:	68fb      	ldr	r3, [r7, #12]
}
 800812e:	4618      	mov	r0, r3
 8008130:	3714      	adds	r7, #20
 8008132:	46bd      	mov	sp, r7
 8008134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008138:	4770      	bx	lr
 800813a:	bf00      	nop
 800813c:	20001408 	.word	0x20001408

08008140 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b084      	sub	sp, #16
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008148:	f7ff f962 	bl	8007410 <xTaskGetTickCount>
 800814c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800814e:	4b0b      	ldr	r3, [pc, #44]	@ (800817c <prvSampleTimeNow+0x3c>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	68fa      	ldr	r2, [r7, #12]
 8008154:	429a      	cmp	r2, r3
 8008156:	d205      	bcs.n	8008164 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008158:	f000 f93a 	bl	80083d0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2201      	movs	r2, #1
 8008160:	601a      	str	r2, [r3, #0]
 8008162:	e002      	b.n	800816a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2200      	movs	r2, #0
 8008168:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800816a:	4a04      	ldr	r2, [pc, #16]	@ (800817c <prvSampleTimeNow+0x3c>)
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008170:	68fb      	ldr	r3, [r7, #12]
}
 8008172:	4618      	mov	r0, r3
 8008174:	3710      	adds	r7, #16
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}
 800817a:	bf00      	nop
 800817c:	20001418 	.word	0x20001418

08008180 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b086      	sub	sp, #24
 8008184:	af00      	add	r7, sp, #0
 8008186:	60f8      	str	r0, [r7, #12]
 8008188:	60b9      	str	r1, [r7, #8]
 800818a:	607a      	str	r2, [r7, #4]
 800818c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800818e:	2300      	movs	r3, #0
 8008190:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	68ba      	ldr	r2, [r7, #8]
 8008196:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	68fa      	ldr	r2, [r7, #12]
 800819c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800819e:	68ba      	ldr	r2, [r7, #8]
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	429a      	cmp	r2, r3
 80081a4:	d812      	bhi.n	80081cc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081a6:	687a      	ldr	r2, [r7, #4]
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	1ad2      	subs	r2, r2, r3
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	699b      	ldr	r3, [r3, #24]
 80081b0:	429a      	cmp	r2, r3
 80081b2:	d302      	bcc.n	80081ba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80081b4:	2301      	movs	r3, #1
 80081b6:	617b      	str	r3, [r7, #20]
 80081b8:	e01b      	b.n	80081f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80081ba:	4b10      	ldr	r3, [pc, #64]	@ (80081fc <prvInsertTimerInActiveList+0x7c>)
 80081bc:	681a      	ldr	r2, [r3, #0]
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	3304      	adds	r3, #4
 80081c2:	4619      	mov	r1, r3
 80081c4:	4610      	mov	r0, r2
 80081c6:	f7fd fcec 	bl	8005ba2 <vListInsert>
 80081ca:	e012      	b.n	80081f2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80081cc:	687a      	ldr	r2, [r7, #4]
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	429a      	cmp	r2, r3
 80081d2:	d206      	bcs.n	80081e2 <prvInsertTimerInActiveList+0x62>
 80081d4:	68ba      	ldr	r2, [r7, #8]
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	429a      	cmp	r2, r3
 80081da:	d302      	bcc.n	80081e2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80081dc:	2301      	movs	r3, #1
 80081de:	617b      	str	r3, [r7, #20]
 80081e0:	e007      	b.n	80081f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80081e2:	4b07      	ldr	r3, [pc, #28]	@ (8008200 <prvInsertTimerInActiveList+0x80>)
 80081e4:	681a      	ldr	r2, [r3, #0]
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	3304      	adds	r3, #4
 80081ea:	4619      	mov	r1, r3
 80081ec:	4610      	mov	r0, r2
 80081ee:	f7fd fcd8 	bl	8005ba2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80081f2:	697b      	ldr	r3, [r7, #20]
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3718      	adds	r7, #24
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}
 80081fc:	2000140c 	.word	0x2000140c
 8008200:	20001408 	.word	0x20001408

08008204 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b08e      	sub	sp, #56	@ 0x38
 8008208:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800820a:	e0ce      	b.n	80083aa <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2b00      	cmp	r3, #0
 8008210:	da19      	bge.n	8008246 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008212:	1d3b      	adds	r3, r7, #4
 8008214:	3304      	adds	r3, #4
 8008216:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800821a:	2b00      	cmp	r3, #0
 800821c:	d10b      	bne.n	8008236 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800821e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008222:	f383 8811 	msr	BASEPRI, r3
 8008226:	f3bf 8f6f 	isb	sy
 800822a:	f3bf 8f4f 	dsb	sy
 800822e:	61fb      	str	r3, [r7, #28]
}
 8008230:	bf00      	nop
 8008232:	bf00      	nop
 8008234:	e7fd      	b.n	8008232 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800823c:	6850      	ldr	r0, [r2, #4]
 800823e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008240:	6892      	ldr	r2, [r2, #8]
 8008242:	4611      	mov	r1, r2
 8008244:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2b00      	cmp	r3, #0
 800824a:	f2c0 80ae 	blt.w	80083aa <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008254:	695b      	ldr	r3, [r3, #20]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d004      	beq.n	8008264 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800825a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800825c:	3304      	adds	r3, #4
 800825e:	4618      	mov	r0, r3
 8008260:	f7fd fcd8 	bl	8005c14 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008264:	463b      	mov	r3, r7
 8008266:	4618      	mov	r0, r3
 8008268:	f7ff ff6a 	bl	8008140 <prvSampleTimeNow>
 800826c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2b09      	cmp	r3, #9
 8008272:	f200 8097 	bhi.w	80083a4 <prvProcessReceivedCommands+0x1a0>
 8008276:	a201      	add	r2, pc, #4	@ (adr r2, 800827c <prvProcessReceivedCommands+0x78>)
 8008278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800827c:	080082a5 	.word	0x080082a5
 8008280:	080082a5 	.word	0x080082a5
 8008284:	080082a5 	.word	0x080082a5
 8008288:	0800831b 	.word	0x0800831b
 800828c:	0800832f 	.word	0x0800832f
 8008290:	0800837b 	.word	0x0800837b
 8008294:	080082a5 	.word	0x080082a5
 8008298:	080082a5 	.word	0x080082a5
 800829c:	0800831b 	.word	0x0800831b
 80082a0:	0800832f 	.word	0x0800832f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80082a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082a6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80082aa:	f043 0301 	orr.w	r3, r3, #1
 80082ae:	b2da      	uxtb	r2, r3
 80082b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082b2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80082b6:	68ba      	ldr	r2, [r7, #8]
 80082b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082ba:	699b      	ldr	r3, [r3, #24]
 80082bc:	18d1      	adds	r1, r2, r3
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80082c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80082c4:	f7ff ff5c 	bl	8008180 <prvInsertTimerInActiveList>
 80082c8:	4603      	mov	r3, r0
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d06c      	beq.n	80083a8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80082ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082d0:	6a1b      	ldr	r3, [r3, #32]
 80082d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80082d4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80082d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80082dc:	f003 0304 	and.w	r3, r3, #4
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d061      	beq.n	80083a8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80082e4:	68ba      	ldr	r2, [r7, #8]
 80082e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082e8:	699b      	ldr	r3, [r3, #24]
 80082ea:	441a      	add	r2, r3
 80082ec:	2300      	movs	r3, #0
 80082ee:	9300      	str	r3, [sp, #0]
 80082f0:	2300      	movs	r3, #0
 80082f2:	2100      	movs	r1, #0
 80082f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80082f6:	f7ff fe01 	bl	8007efc <xTimerGenericCommand>
 80082fa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80082fc:	6a3b      	ldr	r3, [r7, #32]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d152      	bne.n	80083a8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8008302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008306:	f383 8811 	msr	BASEPRI, r3
 800830a:	f3bf 8f6f 	isb	sy
 800830e:	f3bf 8f4f 	dsb	sy
 8008312:	61bb      	str	r3, [r7, #24]
}
 8008314:	bf00      	nop
 8008316:	bf00      	nop
 8008318:	e7fd      	b.n	8008316 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800831a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800831c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008320:	f023 0301 	bic.w	r3, r3, #1
 8008324:	b2da      	uxtb	r2, r3
 8008326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008328:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800832c:	e03d      	b.n	80083aa <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800832e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008330:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008334:	f043 0301 	orr.w	r3, r3, #1
 8008338:	b2da      	uxtb	r2, r3
 800833a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800833c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008340:	68ba      	ldr	r2, [r7, #8]
 8008342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008344:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008348:	699b      	ldr	r3, [r3, #24]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d10b      	bne.n	8008366 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800834e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008352:	f383 8811 	msr	BASEPRI, r3
 8008356:	f3bf 8f6f 	isb	sy
 800835a:	f3bf 8f4f 	dsb	sy
 800835e:	617b      	str	r3, [r7, #20]
}
 8008360:	bf00      	nop
 8008362:	bf00      	nop
 8008364:	e7fd      	b.n	8008362 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008368:	699a      	ldr	r2, [r3, #24]
 800836a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800836c:	18d1      	adds	r1, r2, r3
 800836e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008370:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008372:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008374:	f7ff ff04 	bl	8008180 <prvInsertTimerInActiveList>
					break;
 8008378:	e017      	b.n	80083aa <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800837a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800837c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008380:	f003 0302 	and.w	r3, r3, #2
 8008384:	2b00      	cmp	r3, #0
 8008386:	d103      	bne.n	8008390 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008388:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800838a:	f000 fbe5 	bl	8008b58 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800838e:	e00c      	b.n	80083aa <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008392:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008396:	f023 0301 	bic.w	r3, r3, #1
 800839a:	b2da      	uxtb	r2, r3
 800839c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800839e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80083a2:	e002      	b.n	80083aa <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80083a4:	bf00      	nop
 80083a6:	e000      	b.n	80083aa <prvProcessReceivedCommands+0x1a6>
					break;
 80083a8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80083aa:	4b08      	ldr	r3, [pc, #32]	@ (80083cc <prvProcessReceivedCommands+0x1c8>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	1d39      	adds	r1, r7, #4
 80083b0:	2200      	movs	r2, #0
 80083b2:	4618      	mov	r0, r3
 80083b4:	f7fe f8f4 	bl	80065a0 <xQueueReceive>
 80083b8:	4603      	mov	r3, r0
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	f47f af26 	bne.w	800820c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80083c0:	bf00      	nop
 80083c2:	bf00      	nop
 80083c4:	3730      	adds	r7, #48	@ 0x30
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}
 80083ca:	bf00      	nop
 80083cc:	20001410 	.word	0x20001410

080083d0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b088      	sub	sp, #32
 80083d4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80083d6:	e049      	b.n	800846c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80083d8:	4b2e      	ldr	r3, [pc, #184]	@ (8008494 <prvSwitchTimerLists+0xc4>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	68db      	ldr	r3, [r3, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083e2:	4b2c      	ldr	r3, [pc, #176]	@ (8008494 <prvSwitchTimerLists+0xc4>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	68db      	ldr	r3, [r3, #12]
 80083e8:	68db      	ldr	r3, [r3, #12]
 80083ea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	3304      	adds	r3, #4
 80083f0:	4618      	mov	r0, r3
 80083f2:	f7fd fc0f 	bl	8005c14 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	6a1b      	ldr	r3, [r3, #32]
 80083fa:	68f8      	ldr	r0, [r7, #12]
 80083fc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008404:	f003 0304 	and.w	r3, r3, #4
 8008408:	2b00      	cmp	r3, #0
 800840a:	d02f      	beq.n	800846c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	699b      	ldr	r3, [r3, #24]
 8008410:	693a      	ldr	r2, [r7, #16]
 8008412:	4413      	add	r3, r2
 8008414:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008416:	68ba      	ldr	r2, [r7, #8]
 8008418:	693b      	ldr	r3, [r7, #16]
 800841a:	429a      	cmp	r2, r3
 800841c:	d90e      	bls.n	800843c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	68ba      	ldr	r2, [r7, #8]
 8008422:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	68fa      	ldr	r2, [r7, #12]
 8008428:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800842a:	4b1a      	ldr	r3, [pc, #104]	@ (8008494 <prvSwitchTimerLists+0xc4>)
 800842c:	681a      	ldr	r2, [r3, #0]
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	3304      	adds	r3, #4
 8008432:	4619      	mov	r1, r3
 8008434:	4610      	mov	r0, r2
 8008436:	f7fd fbb4 	bl	8005ba2 <vListInsert>
 800843a:	e017      	b.n	800846c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800843c:	2300      	movs	r3, #0
 800843e:	9300      	str	r3, [sp, #0]
 8008440:	2300      	movs	r3, #0
 8008442:	693a      	ldr	r2, [r7, #16]
 8008444:	2100      	movs	r1, #0
 8008446:	68f8      	ldr	r0, [r7, #12]
 8008448:	f7ff fd58 	bl	8007efc <xTimerGenericCommand>
 800844c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d10b      	bne.n	800846c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008454:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008458:	f383 8811 	msr	BASEPRI, r3
 800845c:	f3bf 8f6f 	isb	sy
 8008460:	f3bf 8f4f 	dsb	sy
 8008464:	603b      	str	r3, [r7, #0]
}
 8008466:	bf00      	nop
 8008468:	bf00      	nop
 800846a:	e7fd      	b.n	8008468 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800846c:	4b09      	ldr	r3, [pc, #36]	@ (8008494 <prvSwitchTimerLists+0xc4>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d1b0      	bne.n	80083d8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008476:	4b07      	ldr	r3, [pc, #28]	@ (8008494 <prvSwitchTimerLists+0xc4>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800847c:	4b06      	ldr	r3, [pc, #24]	@ (8008498 <prvSwitchTimerLists+0xc8>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a04      	ldr	r2, [pc, #16]	@ (8008494 <prvSwitchTimerLists+0xc4>)
 8008482:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008484:	4a04      	ldr	r2, [pc, #16]	@ (8008498 <prvSwitchTimerLists+0xc8>)
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	6013      	str	r3, [r2, #0]
}
 800848a:	bf00      	nop
 800848c:	3718      	adds	r7, #24
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}
 8008492:	bf00      	nop
 8008494:	20001408 	.word	0x20001408
 8008498:	2000140c 	.word	0x2000140c

0800849c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b082      	sub	sp, #8
 80084a0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80084a2:	f000 f969 	bl	8008778 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80084a6:	4b15      	ldr	r3, [pc, #84]	@ (80084fc <prvCheckForValidListAndQueue+0x60>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d120      	bne.n	80084f0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80084ae:	4814      	ldr	r0, [pc, #80]	@ (8008500 <prvCheckForValidListAndQueue+0x64>)
 80084b0:	f7fd fb26 	bl	8005b00 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80084b4:	4813      	ldr	r0, [pc, #76]	@ (8008504 <prvCheckForValidListAndQueue+0x68>)
 80084b6:	f7fd fb23 	bl	8005b00 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80084ba:	4b13      	ldr	r3, [pc, #76]	@ (8008508 <prvCheckForValidListAndQueue+0x6c>)
 80084bc:	4a10      	ldr	r2, [pc, #64]	@ (8008500 <prvCheckForValidListAndQueue+0x64>)
 80084be:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80084c0:	4b12      	ldr	r3, [pc, #72]	@ (800850c <prvCheckForValidListAndQueue+0x70>)
 80084c2:	4a10      	ldr	r2, [pc, #64]	@ (8008504 <prvCheckForValidListAndQueue+0x68>)
 80084c4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80084c6:	2300      	movs	r3, #0
 80084c8:	9300      	str	r3, [sp, #0]
 80084ca:	4b11      	ldr	r3, [pc, #68]	@ (8008510 <prvCheckForValidListAndQueue+0x74>)
 80084cc:	4a11      	ldr	r2, [pc, #68]	@ (8008514 <prvCheckForValidListAndQueue+0x78>)
 80084ce:	2110      	movs	r1, #16
 80084d0:	200a      	movs	r0, #10
 80084d2:	f7fd fc33 	bl	8005d3c <xQueueGenericCreateStatic>
 80084d6:	4603      	mov	r3, r0
 80084d8:	4a08      	ldr	r2, [pc, #32]	@ (80084fc <prvCheckForValidListAndQueue+0x60>)
 80084da:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80084dc:	4b07      	ldr	r3, [pc, #28]	@ (80084fc <prvCheckForValidListAndQueue+0x60>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d005      	beq.n	80084f0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80084e4:	4b05      	ldr	r3, [pc, #20]	@ (80084fc <prvCheckForValidListAndQueue+0x60>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	490b      	ldr	r1, [pc, #44]	@ (8008518 <prvCheckForValidListAndQueue+0x7c>)
 80084ea:	4618      	mov	r0, r3
 80084ec:	f7fe fc18 	bl	8006d20 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80084f0:	f000 f974 	bl	80087dc <vPortExitCritical>
}
 80084f4:	bf00      	nop
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}
 80084fa:	bf00      	nop
 80084fc:	20001410 	.word	0x20001410
 8008500:	200013e0 	.word	0x200013e0
 8008504:	200013f4 	.word	0x200013f4
 8008508:	20001408 	.word	0x20001408
 800850c:	2000140c 	.word	0x2000140c
 8008510:	200014bc 	.word	0x200014bc
 8008514:	2000141c 	.word	0x2000141c
 8008518:	08008e70 	.word	0x08008e70

0800851c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800851c:	b480      	push	{r7}
 800851e:	b085      	sub	sp, #20
 8008520:	af00      	add	r7, sp, #0
 8008522:	60f8      	str	r0, [r7, #12]
 8008524:	60b9      	str	r1, [r7, #8]
 8008526:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	3b04      	subs	r3, #4
 800852c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008534:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	3b04      	subs	r3, #4
 800853a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	f023 0201 	bic.w	r2, r3, #1
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	3b04      	subs	r3, #4
 800854a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800854c:	4a0c      	ldr	r2, [pc, #48]	@ (8008580 <pxPortInitialiseStack+0x64>)
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	3b14      	subs	r3, #20
 8008556:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008558:	687a      	ldr	r2, [r7, #4]
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	3b04      	subs	r3, #4
 8008562:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	f06f 0202 	mvn.w	r2, #2
 800856a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	3b20      	subs	r3, #32
 8008570:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008572:	68fb      	ldr	r3, [r7, #12]
}
 8008574:	4618      	mov	r0, r3
 8008576:	3714      	adds	r7, #20
 8008578:	46bd      	mov	sp, r7
 800857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857e:	4770      	bx	lr
 8008580:	08008585 	.word	0x08008585

08008584 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008584:	b480      	push	{r7}
 8008586:	b085      	sub	sp, #20
 8008588:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800858a:	2300      	movs	r3, #0
 800858c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800858e:	4b13      	ldr	r3, [pc, #76]	@ (80085dc <prvTaskExitError+0x58>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008596:	d00b      	beq.n	80085b0 <prvTaskExitError+0x2c>
	__asm volatile
 8008598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800859c:	f383 8811 	msr	BASEPRI, r3
 80085a0:	f3bf 8f6f 	isb	sy
 80085a4:	f3bf 8f4f 	dsb	sy
 80085a8:	60fb      	str	r3, [r7, #12]
}
 80085aa:	bf00      	nop
 80085ac:	bf00      	nop
 80085ae:	e7fd      	b.n	80085ac <prvTaskExitError+0x28>
	__asm volatile
 80085b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085b4:	f383 8811 	msr	BASEPRI, r3
 80085b8:	f3bf 8f6f 	isb	sy
 80085bc:	f3bf 8f4f 	dsb	sy
 80085c0:	60bb      	str	r3, [r7, #8]
}
 80085c2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80085c4:	bf00      	nop
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d0fc      	beq.n	80085c6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80085cc:	bf00      	nop
 80085ce:	bf00      	nop
 80085d0:	3714      	adds	r7, #20
 80085d2:	46bd      	mov	sp, r7
 80085d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d8:	4770      	bx	lr
 80085da:	bf00      	nop
 80085dc:	2000000c 	.word	0x2000000c

080085e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80085e0:	4b07      	ldr	r3, [pc, #28]	@ (8008600 <pxCurrentTCBConst2>)
 80085e2:	6819      	ldr	r1, [r3, #0]
 80085e4:	6808      	ldr	r0, [r1, #0]
 80085e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085ea:	f380 8809 	msr	PSP, r0
 80085ee:	f3bf 8f6f 	isb	sy
 80085f2:	f04f 0000 	mov.w	r0, #0
 80085f6:	f380 8811 	msr	BASEPRI, r0
 80085fa:	4770      	bx	lr
 80085fc:	f3af 8000 	nop.w

08008600 <pxCurrentTCBConst2>:
 8008600:	20000ee0 	.word	0x20000ee0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008604:	bf00      	nop
 8008606:	bf00      	nop

08008608 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008608:	4808      	ldr	r0, [pc, #32]	@ (800862c <prvPortStartFirstTask+0x24>)
 800860a:	6800      	ldr	r0, [r0, #0]
 800860c:	6800      	ldr	r0, [r0, #0]
 800860e:	f380 8808 	msr	MSP, r0
 8008612:	f04f 0000 	mov.w	r0, #0
 8008616:	f380 8814 	msr	CONTROL, r0
 800861a:	b662      	cpsie	i
 800861c:	b661      	cpsie	f
 800861e:	f3bf 8f4f 	dsb	sy
 8008622:	f3bf 8f6f 	isb	sy
 8008626:	df00      	svc	0
 8008628:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800862a:	bf00      	nop
 800862c:	e000ed08 	.word	0xe000ed08

08008630 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b086      	sub	sp, #24
 8008634:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008636:	4b47      	ldr	r3, [pc, #284]	@ (8008754 <xPortStartScheduler+0x124>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4a47      	ldr	r2, [pc, #284]	@ (8008758 <xPortStartScheduler+0x128>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d10b      	bne.n	8008658 <xPortStartScheduler+0x28>
	__asm volatile
 8008640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008644:	f383 8811 	msr	BASEPRI, r3
 8008648:	f3bf 8f6f 	isb	sy
 800864c:	f3bf 8f4f 	dsb	sy
 8008650:	613b      	str	r3, [r7, #16]
}
 8008652:	bf00      	nop
 8008654:	bf00      	nop
 8008656:	e7fd      	b.n	8008654 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008658:	4b3e      	ldr	r3, [pc, #248]	@ (8008754 <xPortStartScheduler+0x124>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	4a3f      	ldr	r2, [pc, #252]	@ (800875c <xPortStartScheduler+0x12c>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d10b      	bne.n	800867a <xPortStartScheduler+0x4a>
	__asm volatile
 8008662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008666:	f383 8811 	msr	BASEPRI, r3
 800866a:	f3bf 8f6f 	isb	sy
 800866e:	f3bf 8f4f 	dsb	sy
 8008672:	60fb      	str	r3, [r7, #12]
}
 8008674:	bf00      	nop
 8008676:	bf00      	nop
 8008678:	e7fd      	b.n	8008676 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800867a:	4b39      	ldr	r3, [pc, #228]	@ (8008760 <xPortStartScheduler+0x130>)
 800867c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	781b      	ldrb	r3, [r3, #0]
 8008682:	b2db      	uxtb	r3, r3
 8008684:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	22ff      	movs	r2, #255	@ 0xff
 800868a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	781b      	ldrb	r3, [r3, #0]
 8008690:	b2db      	uxtb	r3, r3
 8008692:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008694:	78fb      	ldrb	r3, [r7, #3]
 8008696:	b2db      	uxtb	r3, r3
 8008698:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800869c:	b2da      	uxtb	r2, r3
 800869e:	4b31      	ldr	r3, [pc, #196]	@ (8008764 <xPortStartScheduler+0x134>)
 80086a0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80086a2:	4b31      	ldr	r3, [pc, #196]	@ (8008768 <xPortStartScheduler+0x138>)
 80086a4:	2207      	movs	r2, #7
 80086a6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80086a8:	e009      	b.n	80086be <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80086aa:	4b2f      	ldr	r3, [pc, #188]	@ (8008768 <xPortStartScheduler+0x138>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	3b01      	subs	r3, #1
 80086b0:	4a2d      	ldr	r2, [pc, #180]	@ (8008768 <xPortStartScheduler+0x138>)
 80086b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80086b4:	78fb      	ldrb	r3, [r7, #3]
 80086b6:	b2db      	uxtb	r3, r3
 80086b8:	005b      	lsls	r3, r3, #1
 80086ba:	b2db      	uxtb	r3, r3
 80086bc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80086be:	78fb      	ldrb	r3, [r7, #3]
 80086c0:	b2db      	uxtb	r3, r3
 80086c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086c6:	2b80      	cmp	r3, #128	@ 0x80
 80086c8:	d0ef      	beq.n	80086aa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80086ca:	4b27      	ldr	r3, [pc, #156]	@ (8008768 <xPortStartScheduler+0x138>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f1c3 0307 	rsb	r3, r3, #7
 80086d2:	2b04      	cmp	r3, #4
 80086d4:	d00b      	beq.n	80086ee <xPortStartScheduler+0xbe>
	__asm volatile
 80086d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086da:	f383 8811 	msr	BASEPRI, r3
 80086de:	f3bf 8f6f 	isb	sy
 80086e2:	f3bf 8f4f 	dsb	sy
 80086e6:	60bb      	str	r3, [r7, #8]
}
 80086e8:	bf00      	nop
 80086ea:	bf00      	nop
 80086ec:	e7fd      	b.n	80086ea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80086ee:	4b1e      	ldr	r3, [pc, #120]	@ (8008768 <xPortStartScheduler+0x138>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	021b      	lsls	r3, r3, #8
 80086f4:	4a1c      	ldr	r2, [pc, #112]	@ (8008768 <xPortStartScheduler+0x138>)
 80086f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80086f8:	4b1b      	ldr	r3, [pc, #108]	@ (8008768 <xPortStartScheduler+0x138>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008700:	4a19      	ldr	r2, [pc, #100]	@ (8008768 <xPortStartScheduler+0x138>)
 8008702:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	b2da      	uxtb	r2, r3
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800870c:	4b17      	ldr	r3, [pc, #92]	@ (800876c <xPortStartScheduler+0x13c>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4a16      	ldr	r2, [pc, #88]	@ (800876c <xPortStartScheduler+0x13c>)
 8008712:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008716:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008718:	4b14      	ldr	r3, [pc, #80]	@ (800876c <xPortStartScheduler+0x13c>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	4a13      	ldr	r2, [pc, #76]	@ (800876c <xPortStartScheduler+0x13c>)
 800871e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008722:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008724:	f000 f8da 	bl	80088dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008728:	4b11      	ldr	r3, [pc, #68]	@ (8008770 <xPortStartScheduler+0x140>)
 800872a:	2200      	movs	r2, #0
 800872c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800872e:	f000 f8f9 	bl	8008924 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008732:	4b10      	ldr	r3, [pc, #64]	@ (8008774 <xPortStartScheduler+0x144>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	4a0f      	ldr	r2, [pc, #60]	@ (8008774 <xPortStartScheduler+0x144>)
 8008738:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800873c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800873e:	f7ff ff63 	bl	8008608 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008742:	f7fe ff2f 	bl	80075a4 <vTaskSwitchContext>
	prvTaskExitError();
 8008746:	f7ff ff1d 	bl	8008584 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800874a:	2300      	movs	r3, #0
}
 800874c:	4618      	mov	r0, r3
 800874e:	3718      	adds	r7, #24
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}
 8008754:	e000ed00 	.word	0xe000ed00
 8008758:	410fc271 	.word	0x410fc271
 800875c:	410fc270 	.word	0x410fc270
 8008760:	e000e400 	.word	0xe000e400
 8008764:	2000150c 	.word	0x2000150c
 8008768:	20001510 	.word	0x20001510
 800876c:	e000ed20 	.word	0xe000ed20
 8008770:	2000000c 	.word	0x2000000c
 8008774:	e000ef34 	.word	0xe000ef34

08008778 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008778:	b480      	push	{r7}
 800877a:	b083      	sub	sp, #12
 800877c:	af00      	add	r7, sp, #0
	__asm volatile
 800877e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008782:	f383 8811 	msr	BASEPRI, r3
 8008786:	f3bf 8f6f 	isb	sy
 800878a:	f3bf 8f4f 	dsb	sy
 800878e:	607b      	str	r3, [r7, #4]
}
 8008790:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008792:	4b10      	ldr	r3, [pc, #64]	@ (80087d4 <vPortEnterCritical+0x5c>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	3301      	adds	r3, #1
 8008798:	4a0e      	ldr	r2, [pc, #56]	@ (80087d4 <vPortEnterCritical+0x5c>)
 800879a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800879c:	4b0d      	ldr	r3, [pc, #52]	@ (80087d4 <vPortEnterCritical+0x5c>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	2b01      	cmp	r3, #1
 80087a2:	d110      	bne.n	80087c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80087a4:	4b0c      	ldr	r3, [pc, #48]	@ (80087d8 <vPortEnterCritical+0x60>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	b2db      	uxtb	r3, r3
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d00b      	beq.n	80087c6 <vPortEnterCritical+0x4e>
	__asm volatile
 80087ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087b2:	f383 8811 	msr	BASEPRI, r3
 80087b6:	f3bf 8f6f 	isb	sy
 80087ba:	f3bf 8f4f 	dsb	sy
 80087be:	603b      	str	r3, [r7, #0]
}
 80087c0:	bf00      	nop
 80087c2:	bf00      	nop
 80087c4:	e7fd      	b.n	80087c2 <vPortEnterCritical+0x4a>
	}
}
 80087c6:	bf00      	nop
 80087c8:	370c      	adds	r7, #12
 80087ca:	46bd      	mov	sp, r7
 80087cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d0:	4770      	bx	lr
 80087d2:	bf00      	nop
 80087d4:	2000000c 	.word	0x2000000c
 80087d8:	e000ed04 	.word	0xe000ed04

080087dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80087dc:	b480      	push	{r7}
 80087de:	b083      	sub	sp, #12
 80087e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80087e2:	4b12      	ldr	r3, [pc, #72]	@ (800882c <vPortExitCritical+0x50>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d10b      	bne.n	8008802 <vPortExitCritical+0x26>
	__asm volatile
 80087ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087ee:	f383 8811 	msr	BASEPRI, r3
 80087f2:	f3bf 8f6f 	isb	sy
 80087f6:	f3bf 8f4f 	dsb	sy
 80087fa:	607b      	str	r3, [r7, #4]
}
 80087fc:	bf00      	nop
 80087fe:	bf00      	nop
 8008800:	e7fd      	b.n	80087fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008802:	4b0a      	ldr	r3, [pc, #40]	@ (800882c <vPortExitCritical+0x50>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	3b01      	subs	r3, #1
 8008808:	4a08      	ldr	r2, [pc, #32]	@ (800882c <vPortExitCritical+0x50>)
 800880a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800880c:	4b07      	ldr	r3, [pc, #28]	@ (800882c <vPortExitCritical+0x50>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d105      	bne.n	8008820 <vPortExitCritical+0x44>
 8008814:	2300      	movs	r3, #0
 8008816:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	f383 8811 	msr	BASEPRI, r3
}
 800881e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008820:	bf00      	nop
 8008822:	370c      	adds	r7, #12
 8008824:	46bd      	mov	sp, r7
 8008826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882a:	4770      	bx	lr
 800882c:	2000000c 	.word	0x2000000c

08008830 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008830:	f3ef 8009 	mrs	r0, PSP
 8008834:	f3bf 8f6f 	isb	sy
 8008838:	4b15      	ldr	r3, [pc, #84]	@ (8008890 <pxCurrentTCBConst>)
 800883a:	681a      	ldr	r2, [r3, #0]
 800883c:	f01e 0f10 	tst.w	lr, #16
 8008840:	bf08      	it	eq
 8008842:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008846:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800884a:	6010      	str	r0, [r2, #0]
 800884c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008850:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008854:	f380 8811 	msr	BASEPRI, r0
 8008858:	f3bf 8f4f 	dsb	sy
 800885c:	f3bf 8f6f 	isb	sy
 8008860:	f7fe fea0 	bl	80075a4 <vTaskSwitchContext>
 8008864:	f04f 0000 	mov.w	r0, #0
 8008868:	f380 8811 	msr	BASEPRI, r0
 800886c:	bc09      	pop	{r0, r3}
 800886e:	6819      	ldr	r1, [r3, #0]
 8008870:	6808      	ldr	r0, [r1, #0]
 8008872:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008876:	f01e 0f10 	tst.w	lr, #16
 800887a:	bf08      	it	eq
 800887c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008880:	f380 8809 	msr	PSP, r0
 8008884:	f3bf 8f6f 	isb	sy
 8008888:	4770      	bx	lr
 800888a:	bf00      	nop
 800888c:	f3af 8000 	nop.w

08008890 <pxCurrentTCBConst>:
 8008890:	20000ee0 	.word	0x20000ee0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008894:	bf00      	nop
 8008896:	bf00      	nop

08008898 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b082      	sub	sp, #8
 800889c:	af00      	add	r7, sp, #0
	__asm volatile
 800889e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088a2:	f383 8811 	msr	BASEPRI, r3
 80088a6:	f3bf 8f6f 	isb	sy
 80088aa:	f3bf 8f4f 	dsb	sy
 80088ae:	607b      	str	r3, [r7, #4]
}
 80088b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80088b2:	f7fe fdbd 	bl	8007430 <xTaskIncrementTick>
 80088b6:	4603      	mov	r3, r0
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d003      	beq.n	80088c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80088bc:	4b06      	ldr	r3, [pc, #24]	@ (80088d8 <xPortSysTickHandler+0x40>)
 80088be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80088c2:	601a      	str	r2, [r3, #0]
 80088c4:	2300      	movs	r3, #0
 80088c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	f383 8811 	msr	BASEPRI, r3
}
 80088ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80088d0:	bf00      	nop
 80088d2:	3708      	adds	r7, #8
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}
 80088d8:	e000ed04 	.word	0xe000ed04

080088dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80088dc:	b480      	push	{r7}
 80088de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80088e0:	4b0b      	ldr	r3, [pc, #44]	@ (8008910 <vPortSetupTimerInterrupt+0x34>)
 80088e2:	2200      	movs	r2, #0
 80088e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80088e6:	4b0b      	ldr	r3, [pc, #44]	@ (8008914 <vPortSetupTimerInterrupt+0x38>)
 80088e8:	2200      	movs	r2, #0
 80088ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80088ec:	4b0a      	ldr	r3, [pc, #40]	@ (8008918 <vPortSetupTimerInterrupt+0x3c>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	4a0a      	ldr	r2, [pc, #40]	@ (800891c <vPortSetupTimerInterrupt+0x40>)
 80088f2:	fba2 2303 	umull	r2, r3, r2, r3
 80088f6:	099b      	lsrs	r3, r3, #6
 80088f8:	4a09      	ldr	r2, [pc, #36]	@ (8008920 <vPortSetupTimerInterrupt+0x44>)
 80088fa:	3b01      	subs	r3, #1
 80088fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80088fe:	4b04      	ldr	r3, [pc, #16]	@ (8008910 <vPortSetupTimerInterrupt+0x34>)
 8008900:	2207      	movs	r2, #7
 8008902:	601a      	str	r2, [r3, #0]
}
 8008904:	bf00      	nop
 8008906:	46bd      	mov	sp, r7
 8008908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890c:	4770      	bx	lr
 800890e:	bf00      	nop
 8008910:	e000e010 	.word	0xe000e010
 8008914:	e000e018 	.word	0xe000e018
 8008918:	20000000 	.word	0x20000000
 800891c:	10624dd3 	.word	0x10624dd3
 8008920:	e000e014 	.word	0xe000e014

08008924 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008924:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008934 <vPortEnableVFP+0x10>
 8008928:	6801      	ldr	r1, [r0, #0]
 800892a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800892e:	6001      	str	r1, [r0, #0]
 8008930:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008932:	bf00      	nop
 8008934:	e000ed88 	.word	0xe000ed88

08008938 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008938:	b480      	push	{r7}
 800893a:	b085      	sub	sp, #20
 800893c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800893e:	f3ef 8305 	mrs	r3, IPSR
 8008942:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	2b0f      	cmp	r3, #15
 8008948:	d915      	bls.n	8008976 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800894a:	4a18      	ldr	r2, [pc, #96]	@ (80089ac <vPortValidateInterruptPriority+0x74>)
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	4413      	add	r3, r2
 8008950:	781b      	ldrb	r3, [r3, #0]
 8008952:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008954:	4b16      	ldr	r3, [pc, #88]	@ (80089b0 <vPortValidateInterruptPriority+0x78>)
 8008956:	781b      	ldrb	r3, [r3, #0]
 8008958:	7afa      	ldrb	r2, [r7, #11]
 800895a:	429a      	cmp	r2, r3
 800895c:	d20b      	bcs.n	8008976 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800895e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008962:	f383 8811 	msr	BASEPRI, r3
 8008966:	f3bf 8f6f 	isb	sy
 800896a:	f3bf 8f4f 	dsb	sy
 800896e:	607b      	str	r3, [r7, #4]
}
 8008970:	bf00      	nop
 8008972:	bf00      	nop
 8008974:	e7fd      	b.n	8008972 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008976:	4b0f      	ldr	r3, [pc, #60]	@ (80089b4 <vPortValidateInterruptPriority+0x7c>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800897e:	4b0e      	ldr	r3, [pc, #56]	@ (80089b8 <vPortValidateInterruptPriority+0x80>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	429a      	cmp	r2, r3
 8008984:	d90b      	bls.n	800899e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800898a:	f383 8811 	msr	BASEPRI, r3
 800898e:	f3bf 8f6f 	isb	sy
 8008992:	f3bf 8f4f 	dsb	sy
 8008996:	603b      	str	r3, [r7, #0]
}
 8008998:	bf00      	nop
 800899a:	bf00      	nop
 800899c:	e7fd      	b.n	800899a <vPortValidateInterruptPriority+0x62>
	}
 800899e:	bf00      	nop
 80089a0:	3714      	adds	r7, #20
 80089a2:	46bd      	mov	sp, r7
 80089a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a8:	4770      	bx	lr
 80089aa:	bf00      	nop
 80089ac:	e000e3f0 	.word	0xe000e3f0
 80089b0:	2000150c 	.word	0x2000150c
 80089b4:	e000ed0c 	.word	0xe000ed0c
 80089b8:	20001510 	.word	0x20001510

080089bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b08a      	sub	sp, #40	@ 0x28
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80089c4:	2300      	movs	r3, #0
 80089c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80089c8:	f7fe fc76 	bl	80072b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80089cc:	4b5c      	ldr	r3, [pc, #368]	@ (8008b40 <pvPortMalloc+0x184>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d101      	bne.n	80089d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80089d4:	f000 f924 	bl	8008c20 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80089d8:	4b5a      	ldr	r3, [pc, #360]	@ (8008b44 <pvPortMalloc+0x188>)
 80089da:	681a      	ldr	r2, [r3, #0]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	4013      	ands	r3, r2
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	f040 8095 	bne.w	8008b10 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d01e      	beq.n	8008a2a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80089ec:	2208      	movs	r2, #8
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	4413      	add	r3, r2
 80089f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f003 0307 	and.w	r3, r3, #7
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d015      	beq.n	8008a2a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f023 0307 	bic.w	r3, r3, #7
 8008a04:	3308      	adds	r3, #8
 8008a06:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f003 0307 	and.w	r3, r3, #7
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d00b      	beq.n	8008a2a <pvPortMalloc+0x6e>
	__asm volatile
 8008a12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a16:	f383 8811 	msr	BASEPRI, r3
 8008a1a:	f3bf 8f6f 	isb	sy
 8008a1e:	f3bf 8f4f 	dsb	sy
 8008a22:	617b      	str	r3, [r7, #20]
}
 8008a24:	bf00      	nop
 8008a26:	bf00      	nop
 8008a28:	e7fd      	b.n	8008a26 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d06f      	beq.n	8008b10 <pvPortMalloc+0x154>
 8008a30:	4b45      	ldr	r3, [pc, #276]	@ (8008b48 <pvPortMalloc+0x18c>)
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	687a      	ldr	r2, [r7, #4]
 8008a36:	429a      	cmp	r2, r3
 8008a38:	d86a      	bhi.n	8008b10 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008a3a:	4b44      	ldr	r3, [pc, #272]	@ (8008b4c <pvPortMalloc+0x190>)
 8008a3c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008a3e:	4b43      	ldr	r3, [pc, #268]	@ (8008b4c <pvPortMalloc+0x190>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008a44:	e004      	b.n	8008a50 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a48:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a52:	685b      	ldr	r3, [r3, #4]
 8008a54:	687a      	ldr	r2, [r7, #4]
 8008a56:	429a      	cmp	r2, r3
 8008a58:	d903      	bls.n	8008a62 <pvPortMalloc+0xa6>
 8008a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d1f1      	bne.n	8008a46 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008a62:	4b37      	ldr	r3, [pc, #220]	@ (8008b40 <pvPortMalloc+0x184>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a68:	429a      	cmp	r2, r3
 8008a6a:	d051      	beq.n	8008b10 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008a6c:	6a3b      	ldr	r3, [r7, #32]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	2208      	movs	r2, #8
 8008a72:	4413      	add	r3, r2
 8008a74:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a78:	681a      	ldr	r2, [r3, #0]
 8008a7a:	6a3b      	ldr	r3, [r7, #32]
 8008a7c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a80:	685a      	ldr	r2, [r3, #4]
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	1ad2      	subs	r2, r2, r3
 8008a86:	2308      	movs	r3, #8
 8008a88:	005b      	lsls	r3, r3, #1
 8008a8a:	429a      	cmp	r2, r3
 8008a8c:	d920      	bls.n	8008ad0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008a8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	4413      	add	r3, r2
 8008a94:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a96:	69bb      	ldr	r3, [r7, #24]
 8008a98:	f003 0307 	and.w	r3, r3, #7
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d00b      	beq.n	8008ab8 <pvPortMalloc+0xfc>
	__asm volatile
 8008aa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aa4:	f383 8811 	msr	BASEPRI, r3
 8008aa8:	f3bf 8f6f 	isb	sy
 8008aac:	f3bf 8f4f 	dsb	sy
 8008ab0:	613b      	str	r3, [r7, #16]
}
 8008ab2:	bf00      	nop
 8008ab4:	bf00      	nop
 8008ab6:	e7fd      	b.n	8008ab4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aba:	685a      	ldr	r2, [r3, #4]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	1ad2      	subs	r2, r2, r3
 8008ac0:	69bb      	ldr	r3, [r7, #24]
 8008ac2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ac6:	687a      	ldr	r2, [r7, #4]
 8008ac8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008aca:	69b8      	ldr	r0, [r7, #24]
 8008acc:	f000 f90a 	bl	8008ce4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008ad0:	4b1d      	ldr	r3, [pc, #116]	@ (8008b48 <pvPortMalloc+0x18c>)
 8008ad2:	681a      	ldr	r2, [r3, #0]
 8008ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ad6:	685b      	ldr	r3, [r3, #4]
 8008ad8:	1ad3      	subs	r3, r2, r3
 8008ada:	4a1b      	ldr	r2, [pc, #108]	@ (8008b48 <pvPortMalloc+0x18c>)
 8008adc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008ade:	4b1a      	ldr	r3, [pc, #104]	@ (8008b48 <pvPortMalloc+0x18c>)
 8008ae0:	681a      	ldr	r2, [r3, #0]
 8008ae2:	4b1b      	ldr	r3, [pc, #108]	@ (8008b50 <pvPortMalloc+0x194>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	429a      	cmp	r2, r3
 8008ae8:	d203      	bcs.n	8008af2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008aea:	4b17      	ldr	r3, [pc, #92]	@ (8008b48 <pvPortMalloc+0x18c>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	4a18      	ldr	r2, [pc, #96]	@ (8008b50 <pvPortMalloc+0x194>)
 8008af0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008af4:	685a      	ldr	r2, [r3, #4]
 8008af6:	4b13      	ldr	r3, [pc, #76]	@ (8008b44 <pvPortMalloc+0x188>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	431a      	orrs	r2, r3
 8008afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008afe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b02:	2200      	movs	r2, #0
 8008b04:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008b06:	4b13      	ldr	r3, [pc, #76]	@ (8008b54 <pvPortMalloc+0x198>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	3301      	adds	r3, #1
 8008b0c:	4a11      	ldr	r2, [pc, #68]	@ (8008b54 <pvPortMalloc+0x198>)
 8008b0e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008b10:	f7fe fbe0 	bl	80072d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b14:	69fb      	ldr	r3, [r7, #28]
 8008b16:	f003 0307 	and.w	r3, r3, #7
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d00b      	beq.n	8008b36 <pvPortMalloc+0x17a>
	__asm volatile
 8008b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b22:	f383 8811 	msr	BASEPRI, r3
 8008b26:	f3bf 8f6f 	isb	sy
 8008b2a:	f3bf 8f4f 	dsb	sy
 8008b2e:	60fb      	str	r3, [r7, #12]
}
 8008b30:	bf00      	nop
 8008b32:	bf00      	nop
 8008b34:	e7fd      	b.n	8008b32 <pvPortMalloc+0x176>
	return pvReturn;
 8008b36:	69fb      	ldr	r3, [r7, #28]
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	3728      	adds	r7, #40	@ 0x28
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}
 8008b40:	200020d4 	.word	0x200020d4
 8008b44:	200020e8 	.word	0x200020e8
 8008b48:	200020d8 	.word	0x200020d8
 8008b4c:	200020cc 	.word	0x200020cc
 8008b50:	200020dc 	.word	0x200020dc
 8008b54:	200020e0 	.word	0x200020e0

08008b58 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b086      	sub	sp, #24
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d04f      	beq.n	8008c0a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008b6a:	2308      	movs	r3, #8
 8008b6c:	425b      	negs	r3, r3
 8008b6e:	697a      	ldr	r2, [r7, #20]
 8008b70:	4413      	add	r3, r2
 8008b72:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008b78:	693b      	ldr	r3, [r7, #16]
 8008b7a:	685a      	ldr	r2, [r3, #4]
 8008b7c:	4b25      	ldr	r3, [pc, #148]	@ (8008c14 <vPortFree+0xbc>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4013      	ands	r3, r2
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d10b      	bne.n	8008b9e <vPortFree+0x46>
	__asm volatile
 8008b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b8a:	f383 8811 	msr	BASEPRI, r3
 8008b8e:	f3bf 8f6f 	isb	sy
 8008b92:	f3bf 8f4f 	dsb	sy
 8008b96:	60fb      	str	r3, [r7, #12]
}
 8008b98:	bf00      	nop
 8008b9a:	bf00      	nop
 8008b9c:	e7fd      	b.n	8008b9a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008b9e:	693b      	ldr	r3, [r7, #16]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d00b      	beq.n	8008bbe <vPortFree+0x66>
	__asm volatile
 8008ba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008baa:	f383 8811 	msr	BASEPRI, r3
 8008bae:	f3bf 8f6f 	isb	sy
 8008bb2:	f3bf 8f4f 	dsb	sy
 8008bb6:	60bb      	str	r3, [r7, #8]
}
 8008bb8:	bf00      	nop
 8008bba:	bf00      	nop
 8008bbc:	e7fd      	b.n	8008bba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008bbe:	693b      	ldr	r3, [r7, #16]
 8008bc0:	685a      	ldr	r2, [r3, #4]
 8008bc2:	4b14      	ldr	r3, [pc, #80]	@ (8008c14 <vPortFree+0xbc>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	4013      	ands	r3, r2
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d01e      	beq.n	8008c0a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d11a      	bne.n	8008c0a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	685a      	ldr	r2, [r3, #4]
 8008bd8:	4b0e      	ldr	r3, [pc, #56]	@ (8008c14 <vPortFree+0xbc>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	43db      	mvns	r3, r3
 8008bde:	401a      	ands	r2, r3
 8008be0:	693b      	ldr	r3, [r7, #16]
 8008be2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008be4:	f7fe fb68 	bl	80072b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008be8:	693b      	ldr	r3, [r7, #16]
 8008bea:	685a      	ldr	r2, [r3, #4]
 8008bec:	4b0a      	ldr	r3, [pc, #40]	@ (8008c18 <vPortFree+0xc0>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	4413      	add	r3, r2
 8008bf2:	4a09      	ldr	r2, [pc, #36]	@ (8008c18 <vPortFree+0xc0>)
 8008bf4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008bf6:	6938      	ldr	r0, [r7, #16]
 8008bf8:	f000 f874 	bl	8008ce4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008bfc:	4b07      	ldr	r3, [pc, #28]	@ (8008c1c <vPortFree+0xc4>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	3301      	adds	r3, #1
 8008c02:	4a06      	ldr	r2, [pc, #24]	@ (8008c1c <vPortFree+0xc4>)
 8008c04:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008c06:	f7fe fb65 	bl	80072d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008c0a:	bf00      	nop
 8008c0c:	3718      	adds	r7, #24
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}
 8008c12:	bf00      	nop
 8008c14:	200020e8 	.word	0x200020e8
 8008c18:	200020d8 	.word	0x200020d8
 8008c1c:	200020e4 	.word	0x200020e4

08008c20 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008c20:	b480      	push	{r7}
 8008c22:	b085      	sub	sp, #20
 8008c24:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008c26:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8008c2a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008c2c:	4b27      	ldr	r3, [pc, #156]	@ (8008ccc <prvHeapInit+0xac>)
 8008c2e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	f003 0307 	and.w	r3, r3, #7
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d00c      	beq.n	8008c54 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	3307      	adds	r3, #7
 8008c3e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	f023 0307 	bic.w	r3, r3, #7
 8008c46:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008c48:	68ba      	ldr	r2, [r7, #8]
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	1ad3      	subs	r3, r2, r3
 8008c4e:	4a1f      	ldr	r2, [pc, #124]	@ (8008ccc <prvHeapInit+0xac>)
 8008c50:	4413      	add	r3, r2
 8008c52:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008c58:	4a1d      	ldr	r2, [pc, #116]	@ (8008cd0 <prvHeapInit+0xb0>)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008c5e:	4b1c      	ldr	r3, [pc, #112]	@ (8008cd0 <prvHeapInit+0xb0>)
 8008c60:	2200      	movs	r2, #0
 8008c62:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	68ba      	ldr	r2, [r7, #8]
 8008c68:	4413      	add	r3, r2
 8008c6a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008c6c:	2208      	movs	r2, #8
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	1a9b      	subs	r3, r3, r2
 8008c72:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	f023 0307 	bic.w	r3, r3, #7
 8008c7a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	4a15      	ldr	r2, [pc, #84]	@ (8008cd4 <prvHeapInit+0xb4>)
 8008c80:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008c82:	4b14      	ldr	r3, [pc, #80]	@ (8008cd4 <prvHeapInit+0xb4>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	2200      	movs	r2, #0
 8008c88:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008c8a:	4b12      	ldr	r3, [pc, #72]	@ (8008cd4 <prvHeapInit+0xb4>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	68fa      	ldr	r2, [r7, #12]
 8008c9a:	1ad2      	subs	r2, r2, r3
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008ca0:	4b0c      	ldr	r3, [pc, #48]	@ (8008cd4 <prvHeapInit+0xb4>)
 8008ca2:	681a      	ldr	r2, [r3, #0]
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	685b      	ldr	r3, [r3, #4]
 8008cac:	4a0a      	ldr	r2, [pc, #40]	@ (8008cd8 <prvHeapInit+0xb8>)
 8008cae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	685b      	ldr	r3, [r3, #4]
 8008cb4:	4a09      	ldr	r2, [pc, #36]	@ (8008cdc <prvHeapInit+0xbc>)
 8008cb6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008cb8:	4b09      	ldr	r3, [pc, #36]	@ (8008ce0 <prvHeapInit+0xc0>)
 8008cba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008cbe:	601a      	str	r2, [r3, #0]
}
 8008cc0:	bf00      	nop
 8008cc2:	3714      	adds	r7, #20
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cca:	4770      	bx	lr
 8008ccc:	20001514 	.word	0x20001514
 8008cd0:	200020cc 	.word	0x200020cc
 8008cd4:	200020d4 	.word	0x200020d4
 8008cd8:	200020dc 	.word	0x200020dc
 8008cdc:	200020d8 	.word	0x200020d8
 8008ce0:	200020e8 	.word	0x200020e8

08008ce4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b085      	sub	sp, #20
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008cec:	4b28      	ldr	r3, [pc, #160]	@ (8008d90 <prvInsertBlockIntoFreeList+0xac>)
 8008cee:	60fb      	str	r3, [r7, #12]
 8008cf0:	e002      	b.n	8008cf8 <prvInsertBlockIntoFreeList+0x14>
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	60fb      	str	r3, [r7, #12]
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	687a      	ldr	r2, [r7, #4]
 8008cfe:	429a      	cmp	r2, r3
 8008d00:	d8f7      	bhi.n	8008cf2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	685b      	ldr	r3, [r3, #4]
 8008d0a:	68ba      	ldr	r2, [r7, #8]
 8008d0c:	4413      	add	r3, r2
 8008d0e:	687a      	ldr	r2, [r7, #4]
 8008d10:	429a      	cmp	r2, r3
 8008d12:	d108      	bne.n	8008d26 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	685a      	ldr	r2, [r3, #4]
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	685b      	ldr	r3, [r3, #4]
 8008d1c:	441a      	add	r2, r3
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	685b      	ldr	r3, [r3, #4]
 8008d2e:	68ba      	ldr	r2, [r7, #8]
 8008d30:	441a      	add	r2, r3
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	429a      	cmp	r2, r3
 8008d38:	d118      	bne.n	8008d6c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681a      	ldr	r2, [r3, #0]
 8008d3e:	4b15      	ldr	r3, [pc, #84]	@ (8008d94 <prvInsertBlockIntoFreeList+0xb0>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	429a      	cmp	r2, r3
 8008d44:	d00d      	beq.n	8008d62 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	685a      	ldr	r2, [r3, #4]
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	685b      	ldr	r3, [r3, #4]
 8008d50:	441a      	add	r2, r3
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	681a      	ldr	r2, [r3, #0]
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	601a      	str	r2, [r3, #0]
 8008d60:	e008      	b.n	8008d74 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008d62:	4b0c      	ldr	r3, [pc, #48]	@ (8008d94 <prvInsertBlockIntoFreeList+0xb0>)
 8008d64:	681a      	ldr	r2, [r3, #0]
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	601a      	str	r2, [r3, #0]
 8008d6a:	e003      	b.n	8008d74 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681a      	ldr	r2, [r3, #0]
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008d74:	68fa      	ldr	r2, [r7, #12]
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	429a      	cmp	r2, r3
 8008d7a:	d002      	beq.n	8008d82 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	687a      	ldr	r2, [r7, #4]
 8008d80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008d82:	bf00      	nop
 8008d84:	3714      	adds	r7, #20
 8008d86:	46bd      	mov	sp, r7
 8008d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8c:	4770      	bx	lr
 8008d8e:	bf00      	nop
 8008d90:	200020cc 	.word	0x200020cc
 8008d94:	200020d4 	.word	0x200020d4

08008d98 <memset>:
 8008d98:	4402      	add	r2, r0
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d100      	bne.n	8008da2 <memset+0xa>
 8008da0:	4770      	bx	lr
 8008da2:	f803 1b01 	strb.w	r1, [r3], #1
 8008da6:	e7f9      	b.n	8008d9c <memset+0x4>

08008da8 <__libc_init_array>:
 8008da8:	b570      	push	{r4, r5, r6, lr}
 8008daa:	4d0d      	ldr	r5, [pc, #52]	@ (8008de0 <__libc_init_array+0x38>)
 8008dac:	4c0d      	ldr	r4, [pc, #52]	@ (8008de4 <__libc_init_array+0x3c>)
 8008dae:	1b64      	subs	r4, r4, r5
 8008db0:	10a4      	asrs	r4, r4, #2
 8008db2:	2600      	movs	r6, #0
 8008db4:	42a6      	cmp	r6, r4
 8008db6:	d109      	bne.n	8008dcc <__libc_init_array+0x24>
 8008db8:	4d0b      	ldr	r5, [pc, #44]	@ (8008de8 <__libc_init_array+0x40>)
 8008dba:	4c0c      	ldr	r4, [pc, #48]	@ (8008dec <__libc_init_array+0x44>)
 8008dbc:	f000 f826 	bl	8008e0c <_init>
 8008dc0:	1b64      	subs	r4, r4, r5
 8008dc2:	10a4      	asrs	r4, r4, #2
 8008dc4:	2600      	movs	r6, #0
 8008dc6:	42a6      	cmp	r6, r4
 8008dc8:	d105      	bne.n	8008dd6 <__libc_init_array+0x2e>
 8008dca:	bd70      	pop	{r4, r5, r6, pc}
 8008dcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dd0:	4798      	blx	r3
 8008dd2:	3601      	adds	r6, #1
 8008dd4:	e7ee      	b.n	8008db4 <__libc_init_array+0xc>
 8008dd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dda:	4798      	blx	r3
 8008ddc:	3601      	adds	r6, #1
 8008dde:	e7f2      	b.n	8008dc6 <__libc_init_array+0x1e>
 8008de0:	08008f64 	.word	0x08008f64
 8008de4:	08008f64 	.word	0x08008f64
 8008de8:	08008f64 	.word	0x08008f64
 8008dec:	08008f68 	.word	0x08008f68

08008df0 <memcpy>:
 8008df0:	440a      	add	r2, r1
 8008df2:	4291      	cmp	r1, r2
 8008df4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008df8:	d100      	bne.n	8008dfc <memcpy+0xc>
 8008dfa:	4770      	bx	lr
 8008dfc:	b510      	push	{r4, lr}
 8008dfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e06:	4291      	cmp	r1, r2
 8008e08:	d1f9      	bne.n	8008dfe <memcpy+0xe>
 8008e0a:	bd10      	pop	{r4, pc}

08008e0c <_init>:
 8008e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e0e:	bf00      	nop
 8008e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e12:	bc08      	pop	{r3}
 8008e14:	469e      	mov	lr, r3
 8008e16:	4770      	bx	lr

08008e18 <_fini>:
 8008e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e1a:	bf00      	nop
 8008e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e1e:	bc08      	pop	{r3}
 8008e20:	469e      	mov	lr, r3
 8008e22:	4770      	bx	lr
