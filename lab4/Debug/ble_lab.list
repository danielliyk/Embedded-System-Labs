
ble_lab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cfbc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e8  0800d14c  0800d14c  0000e14c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d634  0800d634  0000f0b8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d634  0800d634  0000e634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d63c  0800d63c  0000f0b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d63c  0800d63c  0000e63c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d640  0800d640  0000e640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000b8  20000000  0800d644  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003df8  200000b8  0800d6fc  0000f0b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003eb0  0800d6fc  0000feb0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f0b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028f57  00000000  00000000  0000f0e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005f64  00000000  00000000  0003803f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002458  00000000  00000000  0003dfa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001bf5  00000000  00000000  00040400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00031333  00000000  00000000  00041ff5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002de34  00000000  00000000  00073328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00113db8  00000000  00000000  000a115c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001b4f14  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a42c  00000000  00000000  001b4f58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001bf384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000b8 	.word	0x200000b8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d134 	.word	0x0800d134

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000bc 	.word	0x200000bc
 80001cc:	0800d134 	.word	0x0800d134

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_d2f>:
 80005f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80005fc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000600:	bf24      	itt	cs
 8000602:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000606:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800060a:	d90d      	bls.n	8000628 <__aeabi_d2f+0x30>
 800060c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000610:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000614:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000618:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 800061c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000620:	bf08      	it	eq
 8000622:	f020 0001 	biceq.w	r0, r0, #1
 8000626:	4770      	bx	lr
 8000628:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 800062c:	d121      	bne.n	8000672 <__aeabi_d2f+0x7a>
 800062e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000632:	bfbc      	itt	lt
 8000634:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000638:	4770      	bxlt	lr
 800063a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800063e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000642:	f1c2 0218 	rsb	r2, r2, #24
 8000646:	f1c2 0c20 	rsb	ip, r2, #32
 800064a:	fa10 f30c 	lsls.w	r3, r0, ip
 800064e:	fa20 f002 	lsr.w	r0, r0, r2
 8000652:	bf18      	it	ne
 8000654:	f040 0001 	orrne.w	r0, r0, #1
 8000658:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800065c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000660:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000664:	ea40 000c 	orr.w	r0, r0, ip
 8000668:	fa23 f302 	lsr.w	r3, r3, r2
 800066c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000670:	e7cc      	b.n	800060c <__aeabi_d2f+0x14>
 8000672:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000676:	d107      	bne.n	8000688 <__aeabi_d2f+0x90>
 8000678:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800067c:	bf1e      	ittt	ne
 800067e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000682:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000686:	4770      	bxne	lr
 8000688:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 800068c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000690:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop

08000698 <__aeabi_uldivmod>:
 8000698:	b953      	cbnz	r3, 80006b0 <__aeabi_uldivmod+0x18>
 800069a:	b94a      	cbnz	r2, 80006b0 <__aeabi_uldivmod+0x18>
 800069c:	2900      	cmp	r1, #0
 800069e:	bf08      	it	eq
 80006a0:	2800      	cmpeq	r0, #0
 80006a2:	bf1c      	itt	ne
 80006a4:	f04f 31ff 	movne.w	r1, #4294967295
 80006a8:	f04f 30ff 	movne.w	r0, #4294967295
 80006ac:	f000 b96a 	b.w	8000984 <__aeabi_idiv0>
 80006b0:	f1ad 0c08 	sub.w	ip, sp, #8
 80006b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006b8:	f000 f806 	bl	80006c8 <__udivmoddi4>
 80006bc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006c4:	b004      	add	sp, #16
 80006c6:	4770      	bx	lr

080006c8 <__udivmoddi4>:
 80006c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006cc:	9d08      	ldr	r5, [sp, #32]
 80006ce:	460c      	mov	r4, r1
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d14e      	bne.n	8000772 <__udivmoddi4+0xaa>
 80006d4:	4694      	mov	ip, r2
 80006d6:	458c      	cmp	ip, r1
 80006d8:	4686      	mov	lr, r0
 80006da:	fab2 f282 	clz	r2, r2
 80006de:	d962      	bls.n	80007a6 <__udivmoddi4+0xde>
 80006e0:	b14a      	cbz	r2, 80006f6 <__udivmoddi4+0x2e>
 80006e2:	f1c2 0320 	rsb	r3, r2, #32
 80006e6:	4091      	lsls	r1, r2
 80006e8:	fa20 f303 	lsr.w	r3, r0, r3
 80006ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80006f0:	4319      	orrs	r1, r3
 80006f2:	fa00 fe02 	lsl.w	lr, r0, r2
 80006f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006fa:	fa1f f68c 	uxth.w	r6, ip
 80006fe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000702:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000706:	fb07 1114 	mls	r1, r7, r4, r1
 800070a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800070e:	fb04 f106 	mul.w	r1, r4, r6
 8000712:	4299      	cmp	r1, r3
 8000714:	d90a      	bls.n	800072c <__udivmoddi4+0x64>
 8000716:	eb1c 0303 	adds.w	r3, ip, r3
 800071a:	f104 30ff 	add.w	r0, r4, #4294967295
 800071e:	f080 8112 	bcs.w	8000946 <__udivmoddi4+0x27e>
 8000722:	4299      	cmp	r1, r3
 8000724:	f240 810f 	bls.w	8000946 <__udivmoddi4+0x27e>
 8000728:	3c02      	subs	r4, #2
 800072a:	4463      	add	r3, ip
 800072c:	1a59      	subs	r1, r3, r1
 800072e:	fa1f f38e 	uxth.w	r3, lr
 8000732:	fbb1 f0f7 	udiv	r0, r1, r7
 8000736:	fb07 1110 	mls	r1, r7, r0, r1
 800073a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800073e:	fb00 f606 	mul.w	r6, r0, r6
 8000742:	429e      	cmp	r6, r3
 8000744:	d90a      	bls.n	800075c <__udivmoddi4+0x94>
 8000746:	eb1c 0303 	adds.w	r3, ip, r3
 800074a:	f100 31ff 	add.w	r1, r0, #4294967295
 800074e:	f080 80fc 	bcs.w	800094a <__udivmoddi4+0x282>
 8000752:	429e      	cmp	r6, r3
 8000754:	f240 80f9 	bls.w	800094a <__udivmoddi4+0x282>
 8000758:	4463      	add	r3, ip
 800075a:	3802      	subs	r0, #2
 800075c:	1b9b      	subs	r3, r3, r6
 800075e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000762:	2100      	movs	r1, #0
 8000764:	b11d      	cbz	r5, 800076e <__udivmoddi4+0xa6>
 8000766:	40d3      	lsrs	r3, r2
 8000768:	2200      	movs	r2, #0
 800076a:	e9c5 3200 	strd	r3, r2, [r5]
 800076e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000772:	428b      	cmp	r3, r1
 8000774:	d905      	bls.n	8000782 <__udivmoddi4+0xba>
 8000776:	b10d      	cbz	r5, 800077c <__udivmoddi4+0xb4>
 8000778:	e9c5 0100 	strd	r0, r1, [r5]
 800077c:	2100      	movs	r1, #0
 800077e:	4608      	mov	r0, r1
 8000780:	e7f5      	b.n	800076e <__udivmoddi4+0xa6>
 8000782:	fab3 f183 	clz	r1, r3
 8000786:	2900      	cmp	r1, #0
 8000788:	d146      	bne.n	8000818 <__udivmoddi4+0x150>
 800078a:	42a3      	cmp	r3, r4
 800078c:	d302      	bcc.n	8000794 <__udivmoddi4+0xcc>
 800078e:	4290      	cmp	r0, r2
 8000790:	f0c0 80f0 	bcc.w	8000974 <__udivmoddi4+0x2ac>
 8000794:	1a86      	subs	r6, r0, r2
 8000796:	eb64 0303 	sbc.w	r3, r4, r3
 800079a:	2001      	movs	r0, #1
 800079c:	2d00      	cmp	r5, #0
 800079e:	d0e6      	beq.n	800076e <__udivmoddi4+0xa6>
 80007a0:	e9c5 6300 	strd	r6, r3, [r5]
 80007a4:	e7e3      	b.n	800076e <__udivmoddi4+0xa6>
 80007a6:	2a00      	cmp	r2, #0
 80007a8:	f040 8090 	bne.w	80008cc <__udivmoddi4+0x204>
 80007ac:	eba1 040c 	sub.w	r4, r1, ip
 80007b0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007b4:	fa1f f78c 	uxth.w	r7, ip
 80007b8:	2101      	movs	r1, #1
 80007ba:	fbb4 f6f8 	udiv	r6, r4, r8
 80007be:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80007c2:	fb08 4416 	mls	r4, r8, r6, r4
 80007c6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80007ca:	fb07 f006 	mul.w	r0, r7, r6
 80007ce:	4298      	cmp	r0, r3
 80007d0:	d908      	bls.n	80007e4 <__udivmoddi4+0x11c>
 80007d2:	eb1c 0303 	adds.w	r3, ip, r3
 80007d6:	f106 34ff 	add.w	r4, r6, #4294967295
 80007da:	d202      	bcs.n	80007e2 <__udivmoddi4+0x11a>
 80007dc:	4298      	cmp	r0, r3
 80007de:	f200 80cd 	bhi.w	800097c <__udivmoddi4+0x2b4>
 80007e2:	4626      	mov	r6, r4
 80007e4:	1a1c      	subs	r4, r3, r0
 80007e6:	fa1f f38e 	uxth.w	r3, lr
 80007ea:	fbb4 f0f8 	udiv	r0, r4, r8
 80007ee:	fb08 4410 	mls	r4, r8, r0, r4
 80007f2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80007f6:	fb00 f707 	mul.w	r7, r0, r7
 80007fa:	429f      	cmp	r7, r3
 80007fc:	d908      	bls.n	8000810 <__udivmoddi4+0x148>
 80007fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000802:	f100 34ff 	add.w	r4, r0, #4294967295
 8000806:	d202      	bcs.n	800080e <__udivmoddi4+0x146>
 8000808:	429f      	cmp	r7, r3
 800080a:	f200 80b0 	bhi.w	800096e <__udivmoddi4+0x2a6>
 800080e:	4620      	mov	r0, r4
 8000810:	1bdb      	subs	r3, r3, r7
 8000812:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000816:	e7a5      	b.n	8000764 <__udivmoddi4+0x9c>
 8000818:	f1c1 0620 	rsb	r6, r1, #32
 800081c:	408b      	lsls	r3, r1
 800081e:	fa22 f706 	lsr.w	r7, r2, r6
 8000822:	431f      	orrs	r7, r3
 8000824:	fa20 fc06 	lsr.w	ip, r0, r6
 8000828:	fa04 f301 	lsl.w	r3, r4, r1
 800082c:	ea43 030c 	orr.w	r3, r3, ip
 8000830:	40f4      	lsrs	r4, r6
 8000832:	fa00 f801 	lsl.w	r8, r0, r1
 8000836:	0c38      	lsrs	r0, r7, #16
 8000838:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800083c:	fbb4 fef0 	udiv	lr, r4, r0
 8000840:	fa1f fc87 	uxth.w	ip, r7
 8000844:	fb00 441e 	mls	r4, r0, lr, r4
 8000848:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800084c:	fb0e f90c 	mul.w	r9, lr, ip
 8000850:	45a1      	cmp	r9, r4
 8000852:	fa02 f201 	lsl.w	r2, r2, r1
 8000856:	d90a      	bls.n	800086e <__udivmoddi4+0x1a6>
 8000858:	193c      	adds	r4, r7, r4
 800085a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800085e:	f080 8084 	bcs.w	800096a <__udivmoddi4+0x2a2>
 8000862:	45a1      	cmp	r9, r4
 8000864:	f240 8081 	bls.w	800096a <__udivmoddi4+0x2a2>
 8000868:	f1ae 0e02 	sub.w	lr, lr, #2
 800086c:	443c      	add	r4, r7
 800086e:	eba4 0409 	sub.w	r4, r4, r9
 8000872:	fa1f f983 	uxth.w	r9, r3
 8000876:	fbb4 f3f0 	udiv	r3, r4, r0
 800087a:	fb00 4413 	mls	r4, r0, r3, r4
 800087e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000882:	fb03 fc0c 	mul.w	ip, r3, ip
 8000886:	45a4      	cmp	ip, r4
 8000888:	d907      	bls.n	800089a <__udivmoddi4+0x1d2>
 800088a:	193c      	adds	r4, r7, r4
 800088c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000890:	d267      	bcs.n	8000962 <__udivmoddi4+0x29a>
 8000892:	45a4      	cmp	ip, r4
 8000894:	d965      	bls.n	8000962 <__udivmoddi4+0x29a>
 8000896:	3b02      	subs	r3, #2
 8000898:	443c      	add	r4, r7
 800089a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800089e:	fba0 9302 	umull	r9, r3, r0, r2
 80008a2:	eba4 040c 	sub.w	r4, r4, ip
 80008a6:	429c      	cmp	r4, r3
 80008a8:	46ce      	mov	lr, r9
 80008aa:	469c      	mov	ip, r3
 80008ac:	d351      	bcc.n	8000952 <__udivmoddi4+0x28a>
 80008ae:	d04e      	beq.n	800094e <__udivmoddi4+0x286>
 80008b0:	b155      	cbz	r5, 80008c8 <__udivmoddi4+0x200>
 80008b2:	ebb8 030e 	subs.w	r3, r8, lr
 80008b6:	eb64 040c 	sbc.w	r4, r4, ip
 80008ba:	fa04 f606 	lsl.w	r6, r4, r6
 80008be:	40cb      	lsrs	r3, r1
 80008c0:	431e      	orrs	r6, r3
 80008c2:	40cc      	lsrs	r4, r1
 80008c4:	e9c5 6400 	strd	r6, r4, [r5]
 80008c8:	2100      	movs	r1, #0
 80008ca:	e750      	b.n	800076e <__udivmoddi4+0xa6>
 80008cc:	f1c2 0320 	rsb	r3, r2, #32
 80008d0:	fa20 f103 	lsr.w	r1, r0, r3
 80008d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80008d8:	fa24 f303 	lsr.w	r3, r4, r3
 80008dc:	4094      	lsls	r4, r2
 80008de:	430c      	orrs	r4, r1
 80008e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008e4:	fa00 fe02 	lsl.w	lr, r0, r2
 80008e8:	fa1f f78c 	uxth.w	r7, ip
 80008ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80008f0:	fb08 3110 	mls	r1, r8, r0, r3
 80008f4:	0c23      	lsrs	r3, r4, #16
 80008f6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008fa:	fb00 f107 	mul.w	r1, r0, r7
 80008fe:	4299      	cmp	r1, r3
 8000900:	d908      	bls.n	8000914 <__udivmoddi4+0x24c>
 8000902:	eb1c 0303 	adds.w	r3, ip, r3
 8000906:	f100 36ff 	add.w	r6, r0, #4294967295
 800090a:	d22c      	bcs.n	8000966 <__udivmoddi4+0x29e>
 800090c:	4299      	cmp	r1, r3
 800090e:	d92a      	bls.n	8000966 <__udivmoddi4+0x29e>
 8000910:	3802      	subs	r0, #2
 8000912:	4463      	add	r3, ip
 8000914:	1a5b      	subs	r3, r3, r1
 8000916:	b2a4      	uxth	r4, r4
 8000918:	fbb3 f1f8 	udiv	r1, r3, r8
 800091c:	fb08 3311 	mls	r3, r8, r1, r3
 8000920:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000924:	fb01 f307 	mul.w	r3, r1, r7
 8000928:	42a3      	cmp	r3, r4
 800092a:	d908      	bls.n	800093e <__udivmoddi4+0x276>
 800092c:	eb1c 0404 	adds.w	r4, ip, r4
 8000930:	f101 36ff 	add.w	r6, r1, #4294967295
 8000934:	d213      	bcs.n	800095e <__udivmoddi4+0x296>
 8000936:	42a3      	cmp	r3, r4
 8000938:	d911      	bls.n	800095e <__udivmoddi4+0x296>
 800093a:	3902      	subs	r1, #2
 800093c:	4464      	add	r4, ip
 800093e:	1ae4      	subs	r4, r4, r3
 8000940:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000944:	e739      	b.n	80007ba <__udivmoddi4+0xf2>
 8000946:	4604      	mov	r4, r0
 8000948:	e6f0      	b.n	800072c <__udivmoddi4+0x64>
 800094a:	4608      	mov	r0, r1
 800094c:	e706      	b.n	800075c <__udivmoddi4+0x94>
 800094e:	45c8      	cmp	r8, r9
 8000950:	d2ae      	bcs.n	80008b0 <__udivmoddi4+0x1e8>
 8000952:	ebb9 0e02 	subs.w	lr, r9, r2
 8000956:	eb63 0c07 	sbc.w	ip, r3, r7
 800095a:	3801      	subs	r0, #1
 800095c:	e7a8      	b.n	80008b0 <__udivmoddi4+0x1e8>
 800095e:	4631      	mov	r1, r6
 8000960:	e7ed      	b.n	800093e <__udivmoddi4+0x276>
 8000962:	4603      	mov	r3, r0
 8000964:	e799      	b.n	800089a <__udivmoddi4+0x1d2>
 8000966:	4630      	mov	r0, r6
 8000968:	e7d4      	b.n	8000914 <__udivmoddi4+0x24c>
 800096a:	46d6      	mov	lr, sl
 800096c:	e77f      	b.n	800086e <__udivmoddi4+0x1a6>
 800096e:	4463      	add	r3, ip
 8000970:	3802      	subs	r0, #2
 8000972:	e74d      	b.n	8000810 <__udivmoddi4+0x148>
 8000974:	4606      	mov	r6, r0
 8000976:	4623      	mov	r3, r4
 8000978:	4608      	mov	r0, r1
 800097a:	e70f      	b.n	800079c <__udivmoddi4+0xd4>
 800097c:	3e02      	subs	r6, #2
 800097e:	4463      	add	r3, ip
 8000980:	e730      	b.n	80007e4 <__udivmoddi4+0x11c>
 8000982:	bf00      	nop

08000984 <__aeabi_idiv0>:
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <MX_BlueNRG_MS_Init>:
  PRINT_CSV("%02ld:%02ld:%02ld.%03ld", (long)(ms/(60*60*1000)%24), (long)(ms/(60*1000)%60), (long)((ms/1000)%60), (long)(ms%1000));
}
#endif

void MX_BlueNRG_MS_Init(void)
{
 8000988:	b5b0      	push	{r4, r5, r7, lr}
 800098a:	b08a      	sub	sp, #40	@ 0x28
 800098c:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN BlueNRG_MS_Init_PreTreatment */

  /* USER CODE END BlueNRG_MS_Init_PreTreatment */

  /* Initialize the peripherals and the BLE Stack */
  const char *name = "BlueNRG";
 800098e:	4b69      	ldr	r3, [pc, #420]	@ (8000b34 <MX_BlueNRG_MS_Init+0x1ac>)
 8000990:	613b      	str	r3, [r7, #16]
  uint8_t  bdaddr_len_out;
  uint8_t  hwVersion;
  uint16_t fwVersion;
  int ret;

  User_Init();
 8000992:	f000 f8f9 	bl	8000b88 <User_Init>

  /* Get the User Button initial state */
  user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 8000996:	2000      	movs	r0, #0
 8000998:	f003 f9de 	bl	8003d58 <BSP_PB_GetState>
 800099c:	4603      	mov	r3, r0
 800099e:	b2da      	uxtb	r2, r3
 80009a0:	4b65      	ldr	r3, [pc, #404]	@ (8000b38 <MX_BlueNRG_MS_Init+0x1b0>)
 80009a2:	701a      	strb	r2, [r3, #0]

  hci_init(user_notify, NULL);
 80009a4:	2100      	movs	r1, #0
 80009a6:	4865      	ldr	r0, [pc, #404]	@ (8000b3c <MX_BlueNRG_MS_Init+0x1b4>)
 80009a8:	f009 fbd8 	bl	800a15c <hci_init>

  /* get the BlueNRG HW and FW versions */
  getBlueNRGVersion(&hwVersion, &fwVersion);
 80009ac:	1dba      	adds	r2, r7, #6
 80009ae:	f107 0308 	add.w	r3, r7, #8
 80009b2:	4611      	mov	r1, r2
 80009b4:	4618      	mov	r0, r3
 80009b6:	f009 fa46 	bl	8009e46 <getBlueNRGVersion>
   * Reset BlueNRG again otherwise we won't
   * be able to change its MAC address.
   * aci_hal_write_config_data() must be the first
   * command after reset otherwise it will fail.
   */
  hci_reset();
 80009ba:	f009 fa88 	bl	8009ece <hci_reset>
  HAL_Delay(100);
 80009be:	2064      	movs	r0, #100	@ 0x64
 80009c0:	f003 ff36 	bl	8004830 <HAL_Delay>

  PRINTF("HWver %d\nFWver %d\n", hwVersion, fwVersion);
 80009c4:	7a3b      	ldrb	r3, [r7, #8]
 80009c6:	4619      	mov	r1, r3
 80009c8:	88fb      	ldrh	r3, [r7, #6]
 80009ca:	461a      	mov	r2, r3
 80009cc:	485c      	ldr	r0, [pc, #368]	@ (8000b40 <MX_BlueNRG_MS_Init+0x1b8>)
 80009ce:	f00b fa77 	bl	800bec0 <iprintf>
  if (hwVersion > 0x30) { /* X-NUCLEO-IDB05A1 expansion board is used */
 80009d2:	7a3b      	ldrb	r3, [r7, #8]
 80009d4:	2b30      	cmp	r3, #48	@ 0x30
 80009d6:	d902      	bls.n	80009de <MX_BlueNRG_MS_Init+0x56>
    bnrg_expansion_board = IDB05A1;
 80009d8:	4b5a      	ldr	r3, [pc, #360]	@ (8000b44 <MX_BlueNRG_MS_Init+0x1bc>)
 80009da:	2201      	movs	r2, #1
 80009dc:	701a      	strb	r2, [r3, #0]
  }

  ret = aci_hal_read_config_data(CONFIG_DATA_RANDOM_ADDRESS, BDADDR_SIZE, &bdaddr_len_out, bdaddr);
 80009de:	f107 0209 	add.w	r2, r7, #9
 80009e2:	4b59      	ldr	r3, [pc, #356]	@ (8000b48 <MX_BlueNRG_MS_Init+0x1c0>)
 80009e4:	2106      	movs	r1, #6
 80009e6:	2080      	movs	r0, #128	@ 0x80
 80009e8:	f009 f9a7 	bl	8009d3a <aci_hal_read_config_data>
 80009ec:	4603      	mov	r3, r0
 80009ee:	617b      	str	r3, [r7, #20]

  if (ret) {
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d002      	beq.n	80009fc <MX_BlueNRG_MS_Init+0x74>
    PRINTF("Read Static Random address failed.\n");
 80009f6:	4855      	ldr	r0, [pc, #340]	@ (8000b4c <MX_BlueNRG_MS_Init+0x1c4>)
 80009f8:	f00b faca 	bl	800bf90 <puts>
  }

  if ((bdaddr[5] & 0xC0) != 0xC0) {
 80009fc:	4b52      	ldr	r3, [pc, #328]	@ (8000b48 <MX_BlueNRG_MS_Init+0x1c0>)
 80009fe:	795b      	ldrb	r3, [r3, #5]
 8000a00:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8000a04:	2bc0      	cmp	r3, #192	@ 0xc0
 8000a06:	d004      	beq.n	8000a12 <MX_BlueNRG_MS_Init+0x8a>
    PRINTF("Static Random address not well formed.\n");
 8000a08:	4851      	ldr	r0, [pc, #324]	@ (8000b50 <MX_BlueNRG_MS_Init+0x1c8>)
 8000a0a:	f00b fac1 	bl	800bf90 <puts>
    while(1);
 8000a0e:	bf00      	nop
 8000a10:	e7fd      	b.n	8000a0e <MX_BlueNRG_MS_Init+0x86>
  }

  /* GATT Init */
  ret = aci_gatt_init();
 8000a12:	f008 febe 	bl	8009792 <aci_gatt_init>
 8000a16:	4603      	mov	r3, r0
 8000a18:	617b      	str	r3, [r7, #20]
  if(ret){
 8000a1a:	697b      	ldr	r3, [r7, #20]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d002      	beq.n	8000a26 <MX_BlueNRG_MS_Init+0x9e>
    PRINTF("GATT_Init failed.\n");
 8000a20:	484c      	ldr	r0, [pc, #304]	@ (8000b54 <MX_BlueNRG_MS_Init+0x1cc>)
 8000a22:	f00b fab5 	bl	800bf90 <puts>
  }

  /* GAP Init */
  if (bnrg_expansion_board == IDB05A1) {
 8000a26:	4b47      	ldr	r3, [pc, #284]	@ (8000b44 <MX_BlueNRG_MS_Init+0x1bc>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	2b01      	cmp	r3, #1
 8000a2c:	d110      	bne.n	8000a50 <MX_BlueNRG_MS_Init+0xc8>
    ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8000a2e:	f107 020e 	add.w	r2, r7, #14
 8000a32:	f107 030a 	add.w	r3, r7, #10
 8000a36:	9301      	str	r3, [sp, #4]
 8000a38:	f107 030c 	add.w	r3, r7, #12
 8000a3c:	9300      	str	r3, [sp, #0]
 8000a3e:	4613      	mov	r3, r2
 8000a40:	2207      	movs	r2, #7
 8000a42:	2100      	movs	r1, #0
 8000a44:	2001      	movs	r0, #1
 8000a46:	f008 fc78 	bl	800933a <aci_gap_init_IDB05A1>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	617b      	str	r3, [r7, #20]
 8000a4e:	e00a      	b.n	8000a66 <MX_BlueNRG_MS_Init+0xde>
  }
  else {
    ret = aci_gap_init_IDB04A1(GAP_PERIPHERAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8000a50:	f107 030a 	add.w	r3, r7, #10
 8000a54:	f107 020c 	add.w	r2, r7, #12
 8000a58:	f107 010e 	add.w	r1, r7, #14
 8000a5c:	2001      	movs	r0, #1
 8000a5e:	f008 fcbc 	bl	80093da <aci_gap_init_IDB04A1>
 8000a62:	4603      	mov	r3, r0
 8000a64:	617b      	str	r3, [r7, #20]
  }
  if (ret != BLE_STATUS_SUCCESS) {
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d002      	beq.n	8000a72 <MX_BlueNRG_MS_Init+0xea>
    PRINTF("GAP_Init failed.\n");
 8000a6c:	483a      	ldr	r0, [pc, #232]	@ (8000b58 <MX_BlueNRG_MS_Init+0x1d0>)
 8000a6e:	f00b fa8f 	bl	800bf90 <puts>
  }

  /* Update device name */
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 8000a72:	89fc      	ldrh	r4, [r7, #14]
 8000a74:	89bd      	ldrh	r5, [r7, #12]
                                   strlen(name), (uint8_t *)name);
 8000a76:	6938      	ldr	r0, [r7, #16]
 8000a78:	f7ff fbaa 	bl	80001d0 <strlen>
 8000a7c:	4603      	mov	r3, r0
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 8000a7e:	b2da      	uxtb	r2, r3
 8000a80:	693b      	ldr	r3, [r7, #16]
 8000a82:	9300      	str	r3, [sp, #0]
 8000a84:	4613      	mov	r3, r2
 8000a86:	2200      	movs	r2, #0
 8000a88:	4629      	mov	r1, r5
 8000a8a:	4620      	mov	r0, r4
 8000a8c:	f008 fff8 	bl	8009a80 <aci_gatt_update_char_value>
 8000a90:	4603      	mov	r3, r0
 8000a92:	617b      	str	r3, [r7, #20]
  if (ret) {
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d004      	beq.n	8000aa4 <MX_BlueNRG_MS_Init+0x11c>
    PRINTF("aci_gatt_update_char_value failed.\n");
 8000a9a:	4830      	ldr	r0, [pc, #192]	@ (8000b5c <MX_BlueNRG_MS_Init+0x1d4>)
 8000a9c:	f00b fa78 	bl	800bf90 <puts>
    while(1);
 8000aa0:	bf00      	nop
 8000aa2:	e7fd      	b.n	8000aa0 <MX_BlueNRG_MS_Init+0x118>
  }

  ret = aci_gap_set_auth_requirement(MITM_PROTECTION_REQUIRED,
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	9303      	str	r3, [sp, #12]
 8000aa8:	4b2d      	ldr	r3, [pc, #180]	@ (8000b60 <MX_BlueNRG_MS_Init+0x1d8>)
 8000aaa:	9302      	str	r3, [sp, #8]
 8000aac:	2300      	movs	r3, #0
 8000aae:	9301      	str	r3, [sp, #4]
 8000ab0:	2310      	movs	r3, #16
 8000ab2:	9300      	str	r3, [sp, #0]
 8000ab4:	2307      	movs	r3, #7
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	2100      	movs	r1, #0
 8000aba:	2001      	movs	r0, #1
 8000abc:	f008 fdc1 	bl	8009642 <aci_gap_set_auth_requirement>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	617b      	str	r3, [r7, #20]
                                     7,
                                     16,
                                     USE_FIXED_PIN_FOR_PAIRING,
                                     123456,
                                     BONDING);
  if (ret) {
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d004      	beq.n	8000ad4 <MX_BlueNRG_MS_Init+0x14c>
    PRINTF("aci_gap_set_authentication_requirement failed.\n");
 8000aca:	4826      	ldr	r0, [pc, #152]	@ (8000b64 <MX_BlueNRG_MS_Init+0x1dc>)
 8000acc:	f00b fa60 	bl	800bf90 <puts>
    while(1);
 8000ad0:	bf00      	nop
 8000ad2:	e7fd      	b.n	8000ad0 <MX_BlueNRG_MS_Init+0x148>
  }

  PRINTF("BLE Stack Initialized\n");
 8000ad4:	4824      	ldr	r0, [pc, #144]	@ (8000b68 <MX_BlueNRG_MS_Init+0x1e0>)
 8000ad6:	f00b fa5b 	bl	800bf90 <puts>

  ret = Add_HWServW2ST_Service();
 8000ada:	f001 fab7 	bl	800204c <Add_HWServW2ST_Service>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	617b      	str	r3, [r7, #20]
  if(ret == BLE_STATUS_SUCCESS) {
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d10a      	bne.n	8000afe <MX_BlueNRG_MS_Init+0x176>
    PRINTF("BlueMS HW service added successfully.\n");
 8000ae8:	4820      	ldr	r0, [pc, #128]	@ (8000b6c <MX_BlueNRG_MS_Init+0x1e4>)
 8000aea:	f00b fa51 	bl	800bf90 <puts>
  } else {
    PRINTF("Error while adding BlueMS HW service: 0x%02x\r\n", ret);
    while(1);
  }

  ret = Add_SWServW2ST_Service();
 8000aee:	f001 fb75 	bl	80021dc <Add_SWServW2ST_Service>
 8000af2:	4603      	mov	r3, r0
 8000af4:	617b      	str	r3, [r7, #20]
  if(ret == BLE_STATUS_SUCCESS) {
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d10a      	bne.n	8000b12 <MX_BlueNRG_MS_Init+0x18a>
 8000afc:	e005      	b.n	8000b0a <MX_BlueNRG_MS_Init+0x182>
    PRINTF("Error while adding BlueMS HW service: 0x%02x\r\n", ret);
 8000afe:	6979      	ldr	r1, [r7, #20]
 8000b00:	481b      	ldr	r0, [pc, #108]	@ (8000b70 <MX_BlueNRG_MS_Init+0x1e8>)
 8000b02:	f00b f9dd 	bl	800bec0 <iprintf>
    while(1);
 8000b06:	bf00      	nop
 8000b08:	e7fd      	b.n	8000b06 <MX_BlueNRG_MS_Init+0x17e>
     PRINTF("BlueMS SW service added successfully.\n");
 8000b0a:	481a      	ldr	r0, [pc, #104]	@ (8000b74 <MX_BlueNRG_MS_Init+0x1ec>)
 8000b0c:	f00b fa40 	bl	800bf90 <puts>
 8000b10:	e005      	b.n	8000b1e <MX_BlueNRG_MS_Init+0x196>
  } else {
     PRINTF("Error while adding BlueMS HW service: 0x%02x\r\n", ret);
 8000b12:	6979      	ldr	r1, [r7, #20]
 8000b14:	4816      	ldr	r0, [pc, #88]	@ (8000b70 <MX_BlueNRG_MS_Init+0x1e8>)
 8000b16:	f00b f9d3 	bl	800bec0 <iprintf>
     while(1);
 8000b1a:	bf00      	nop
 8000b1c:	e7fd      	b.n	8000b1a <MX_BlueNRG_MS_Init+0x192>
  }

  /* Set output power level */
  ret = aci_hal_set_tx_power_level(1,4);
 8000b1e:	2104      	movs	r1, #4
 8000b20:	2001      	movs	r0, #1
 8000b22:	f009 f95f 	bl	8009de4 <aci_hal_set_tx_power_level>
 8000b26:	4603      	mov	r3, r0
 8000b28:	617b      	str	r3, [r7, #20]

  /* USER CODE BEGIN BlueNRG_MS_Init_PostTreatment */

  /* USER CODE END BlueNRG_MS_Init_PostTreatment */
}
 8000b2a:	bf00      	nop
 8000b2c:	3718      	adds	r7, #24
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bdb0      	pop	{r4, r5, r7, pc}
 8000b32:	bf00      	nop
 8000b34:	0800d14c 	.word	0x0800d14c
 8000b38:	20000000 	.word	0x20000000
 8000b3c:	080028dd 	.word	0x080028dd
 8000b40:	0800d154 	.word	0x0800d154
 8000b44:	200000d4 	.word	0x200000d4
 8000b48:	200000d8 	.word	0x200000d8
 8000b4c:	0800d168 	.word	0x0800d168
 8000b50:	0800d18c 	.word	0x0800d18c
 8000b54:	0800d1b4 	.word	0x0800d1b4
 8000b58:	0800d1c8 	.word	0x0800d1c8
 8000b5c:	0800d1dc 	.word	0x0800d1dc
 8000b60:	0001e240 	.word	0x0001e240
 8000b64:	0800d200 	.word	0x0800d200
 8000b68:	0800d230 	.word	0x0800d230
 8000b6c:	0800d248 	.word	0x0800d248
 8000b70:	0800d270 	.word	0x0800d270
 8000b74:	0800d2a0 	.word	0x0800d2a0

08000b78 <MX_BlueNRG_MS_Process>:

/*
 * BlueNRG-MS background task
 */
void MX_BlueNRG_MS_Process(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BlueNRG_MS_Process_PreTreatment */

  /* USER CODE END BlueNRG_MS_Process_PreTreatment */

  User_Process();
 8000b7c:	f000 f812 	bl	8000ba4 <User_Process>
  hci_user_evt_proc();
 8000b80:	f009 fc66 	bl	800a450 <hci_user_evt_proc>

  /* USER CODE BEGIN BlueNRG_MS_Process_PostTreatment */

  /* USER CODE END BlueNRG_MS_Process_PostTreatment */
}
 8000b84:	bf00      	nop
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <User_Init>:
 *
 * @param  None
 * @retval None
 */
static void User_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8000b8c:	2101      	movs	r1, #1
 8000b8e:	2000      	movs	r0, #0
 8000b90:	f003 f88e 	bl	8003cb0 <BSP_PB_Init>
  BSP_LED_Init(LED2);
 8000b94:	2000      	movs	r0, #0
 8000b96:	f003 f823 	bl	8003be0 <BSP_LED_Init>

  BSP_COM_Init(COM1);
 8000b9a:	2000      	movs	r0, #0
 8000b9c:	f003 f93a 	bl	8003e14 <BSP_COM_Init>
}
 8000ba0:	bf00      	nop
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <User_Process>:
 *
 * @param  None
 * @retval None
 */
static void User_Process(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
  float data_t;
  float data_p;
  static uint32_t counter = 0;

  if (set_connectable)
 8000baa:	4b2c      	ldr	r3, [pc, #176]	@ (8000c5c <User_Process+0xb8>)
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d004      	beq.n	8000bbe <User_Process+0x1a>
  {
    Set_DeviceConnectable();
 8000bb4:	f001 fe06 	bl	80027c4 <Set_DeviceConnectable>
    set_connectable = FALSE;
 8000bb8:	4b28      	ldr	r3, [pc, #160]	@ (8000c5c <User_Process+0xb8>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	701a      	strb	r2, [r3, #0]
    while (BSP_PB_GetState(BUTTON_KEY) == !user_button_init_state);

    /* Debouncing */
    HAL_Delay(50);
#endif
    BSP_LED_Toggle(LED2);
 8000bbe:	2000      	movs	r0, #0
 8000bc0:	f003 f820 	bl	8003c04 <BSP_LED_Toggle>

    if (connected)
 8000bc4:	4b26      	ldr	r3, [pc, #152]	@ (8000c60 <User_Process+0xbc>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d042      	beq.n	8000c52 <User_Process+0xae>
    {
      /* Set a random seed */
      srand(HAL_GetTick());
 8000bcc:	f003 fe24 	bl	8004818 <HAL_GetTick>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f00b f846 	bl	800bc64 <srand>

      /* Update emulated Environmental data */
      Set_Random_Environmental_Values(&data_t, &data_p);
 8000bd8:	463a      	mov	r2, r7
 8000bda:	1d3b      	adds	r3, r7, #4
 8000bdc:	4611      	mov	r1, r2
 8000bde:	4618      	mov	r0, r3
 8000be0:	f000 f84c 	bl	8000c7c <Set_Random_Environmental_Values>
      BlueMS_Environmental_Update((int32_t)(data_p *100), (int16_t)(data_t * 10));
 8000be4:	edd7 7a00 	vldr	s15, [r7]
 8000be8:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8000c64 <User_Process+0xc0>
 8000bec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bf0:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8000bf4:	edd7 7a01 	vldr	s15, [r7, #4]
 8000bf8:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000bfc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c04:	ee17 3a90 	vmov	r3, s15
 8000c08:	b21b      	sxth	r3, r3
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	ee16 0a90 	vmov	r0, s13
 8000c10:	f001 fd92 	bl	8002738 <BlueMS_Environmental_Update>

      /* Update emulated Acceleration, Gyroscope and Sensor Fusion data */
      Set_Random_Motion_Values(counter);
 8000c14:	4b14      	ldr	r3, [pc, #80]	@ (8000c68 <User_Process+0xc4>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f000 f8af 	bl	8000d7c <Set_Random_Motion_Values>
      Acc_Update(&x_axes, &g_axes, &m_axes);
 8000c1e:	4a13      	ldr	r2, [pc, #76]	@ (8000c6c <User_Process+0xc8>)
 8000c20:	4913      	ldr	r1, [pc, #76]	@ (8000c70 <User_Process+0xcc>)
 8000c22:	4814      	ldr	r0, [pc, #80]	@ (8000c74 <User_Process+0xd0>)
 8000c24:	f001 fb6a 	bl	80022fc <Acc_Update>
      Quat_Update(&q_axes);
 8000c28:	4813      	ldr	r0, [pc, #76]	@ (8000c78 <User_Process+0xd4>)
 8000c2a:	f001 fc63 	bl	80024f4 <Quat_Update>

      counter ++;
 8000c2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c68 <User_Process+0xc4>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	3301      	adds	r3, #1
 8000c34:	4a0c      	ldr	r2, [pc, #48]	@ (8000c68 <User_Process+0xc4>)
 8000c36:	6013      	str	r3, [r2, #0]
      if (counter == 40) {
 8000c38:	4b0b      	ldr	r3, [pc, #44]	@ (8000c68 <User_Process+0xc4>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	2b28      	cmp	r3, #40	@ 0x28
 8000c3e:	d104      	bne.n	8000c4a <User_Process+0xa6>
        counter = 0;
 8000c40:	4b09      	ldr	r3, [pc, #36]	@ (8000c68 <User_Process+0xc4>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
        Reset_Motion_Values();
 8000c46:	f001 f907 	bl	8001e58 <Reset_Motion_Values>
      }
#if !USE_BUTTON
      HAL_Delay(1000); /* wait 1 sec before sending new data */
 8000c4a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c4e:	f003 fdef 	bl	8004830 <HAL_Delay>
#if USE_BUTTON
    /* Reset the User Button flag */
    user_button_pressed = 0;
  }
#endif
}
 8000c52:	bf00      	nop
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	20000001 	.word	0x20000001
 8000c60:	20000114 	.word	0x20000114
 8000c64:	42c80000 	.word	0x42c80000
 8000c68:	200000e0 	.word	0x200000e0
 8000c6c:	20000130 	.word	0x20000130
 8000c70:	20000124 	.word	0x20000124
 8000c74:	20000118 	.word	0x20000118
 8000c78:	2000013c 	.word	0x2000013c

08000c7c <Set_Random_Environmental_Values>:
 * @param  float pointer to temperature data
 * @param  float pointer to pressure data
 * @retval None
 */
static void Set_Random_Environmental_Values(float *data_t, float *data_p)
{
 8000c7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000c80:	b084      	sub	sp, #16
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	60f8      	str	r0, [r7, #12]
 8000c86:	60b9      	str	r1, [r7, #8]
  *data_t = 27.0 + ((uint64_t)rand()*5)/RAND_MAX;     /* T sensor emulation */
 8000c88:	f00b f81a 	bl	800bcc0 <rand>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	17da      	asrs	r2, r3, #31
 8000c90:	469a      	mov	sl, r3
 8000c92:	4693      	mov	fp, r2
 8000c94:	4652      	mov	r2, sl
 8000c96:	465b      	mov	r3, fp
 8000c98:	f04f 0000 	mov.w	r0, #0
 8000c9c:	f04f 0100 	mov.w	r1, #0
 8000ca0:	0099      	lsls	r1, r3, #2
 8000ca2:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8000ca6:	0090      	lsls	r0, r2, #2
 8000ca8:	4602      	mov	r2, r0
 8000caa:	460b      	mov	r3, r1
 8000cac:	eb12 010a 	adds.w	r1, r2, sl
 8000cb0:	6039      	str	r1, [r7, #0]
 8000cb2:	eb43 030b 	adc.w	r3, r3, fp
 8000cb6:	607b      	str	r3, [r7, #4]
 8000cb8:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000cc4:	f7ff fce8 	bl	8000698 <__aeabi_uldivmod>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	460b      	mov	r3, r1
 8000ccc:	4610      	mov	r0, r2
 8000cce:	4619      	mov	r1, r3
 8000cd0:	f7ff fc5c 	bl	800058c <__aeabi_ul2d>
 8000cd4:	f04f 0200 	mov.w	r2, #0
 8000cd8:	4b26      	ldr	r3, [pc, #152]	@ (8000d74 <Set_Random_Environmental_Values+0xf8>)
 8000cda:	f7ff fad7 	bl	800028c <__adddf3>
 8000cde:	4602      	mov	r2, r0
 8000ce0:	460b      	mov	r3, r1
 8000ce2:	4610      	mov	r0, r2
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	f7ff fc87 	bl	80005f8 <__aeabi_d2f>
 8000cea:	4602      	mov	r2, r0
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	601a      	str	r2, [r3, #0]
  *data_p = 1000.0 + ((uint64_t)rand()*80)/RAND_MAX; /* P sensor emulation */
 8000cf0:	f00a ffe6 	bl	800bcc0 <rand>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	17da      	asrs	r2, r3, #31
 8000cf8:	4698      	mov	r8, r3
 8000cfa:	4691      	mov	r9, r2
 8000cfc:	4642      	mov	r2, r8
 8000cfe:	464b      	mov	r3, r9
 8000d00:	f04f 0000 	mov.w	r0, #0
 8000d04:	f04f 0100 	mov.w	r1, #0
 8000d08:	0099      	lsls	r1, r3, #2
 8000d0a:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8000d0e:	0090      	lsls	r0, r2, #2
 8000d10:	4602      	mov	r2, r0
 8000d12:	460b      	mov	r3, r1
 8000d14:	eb12 0408 	adds.w	r4, r2, r8
 8000d18:	eb43 0509 	adc.w	r5, r3, r9
 8000d1c:	f04f 0200 	mov.w	r2, #0
 8000d20:	f04f 0300 	mov.w	r3, #0
 8000d24:	012b      	lsls	r3, r5, #4
 8000d26:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8000d2a:	0122      	lsls	r2, r4, #4
 8000d2c:	4614      	mov	r4, r2
 8000d2e:	461d      	mov	r5, r3
 8000d30:	4620      	mov	r0, r4
 8000d32:	4629      	mov	r1, r5
 8000d34:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8000d38:	f04f 0300 	mov.w	r3, #0
 8000d3c:	f7ff fcac 	bl	8000698 <__aeabi_uldivmod>
 8000d40:	4602      	mov	r2, r0
 8000d42:	460b      	mov	r3, r1
 8000d44:	4610      	mov	r0, r2
 8000d46:	4619      	mov	r1, r3
 8000d48:	f7ff fc20 	bl	800058c <__aeabi_ul2d>
 8000d4c:	f04f 0200 	mov.w	r2, #0
 8000d50:	4b09      	ldr	r3, [pc, #36]	@ (8000d78 <Set_Random_Environmental_Values+0xfc>)
 8000d52:	f7ff fa9b 	bl	800028c <__adddf3>
 8000d56:	4602      	mov	r2, r0
 8000d58:	460b      	mov	r3, r1
 8000d5a:	4610      	mov	r0, r2
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	f7ff fc4b 	bl	80005f8 <__aeabi_d2f>
 8000d62:	4602      	mov	r2, r0
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	601a      	str	r2, [r3, #0]
}
 8000d68:	bf00      	nop
 8000d6a:	3710      	adds	r7, #16
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000d72:	bf00      	nop
 8000d74:	403b0000 	.word	0x403b0000
 8000d78:	408f4000 	.word	0x408f4000

08000d7c <Set_Random_Motion_Values>:
 * @brief  Set random values for all motion sensor data
 * @param  uint32_t counter for changing the rotation direction
 * @retval None
 */
static void Set_Random_Motion_Values(uint32_t cnt)
{
 8000d7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000d80:	f5ad 7d7a 	sub.w	sp, sp, #1000	@ 0x3e8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	f8c7 03e4 	str.w	r0, [r7, #996]	@ 0x3e4
  /* Update Acceleration, Gyroscope and Sensor Fusion data */
  if (cnt < 20) {
 8000d8a:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8000d8e:	2b13      	cmp	r3, #19
 8000d90:	f200 8426 	bhi.w	80015e0 <Set_Random_Motion_Values+0x864>
    x_axes.AXIS_X +=  (10  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8000d94:	f00a ff94 	bl	800bcc0 <rand>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	17da      	asrs	r2, r3, #31
 8000d9c:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
 8000da0:	f8c7 232c 	str.w	r2, [r7, #812]	@ 0x32c
 8000da4:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8000da8:	2200      	movs	r2, #0
 8000daa:	f8c7 3320 	str.w	r3, [r7, #800]	@ 0x320
 8000dae:	f8c7 2324 	str.w	r2, [r7, #804]	@ 0x324
 8000db2:	e9d7 45ca 	ldrd	r4, r5, [r7, #808]	@ 0x328
 8000db6:	462b      	mov	r3, r5
 8000db8:	e9d7 abc8 	ldrd	sl, fp, [r7, #800]	@ 0x320
 8000dbc:	4652      	mov	r2, sl
 8000dbe:	fb02 f203 	mul.w	r2, r2, r3
 8000dc2:	465b      	mov	r3, fp
 8000dc4:	4621      	mov	r1, r4
 8000dc6:	fb01 f303 	mul.w	r3, r1, r3
 8000dca:	4413      	add	r3, r2
 8000dcc:	4622      	mov	r2, r4
 8000dce:	4651      	mov	r1, sl
 8000dd0:	fba2 8901 	umull	r8, r9, r2, r1
 8000dd4:	444b      	add	r3, r9
 8000dd6:	4699      	mov	r9, r3
 8000dd8:	4642      	mov	r2, r8
 8000dda:	464b      	mov	r3, r9
 8000ddc:	1891      	adds	r1, r2, r2
 8000dde:	66b9      	str	r1, [r7, #104]	@ 0x68
 8000de0:	415b      	adcs	r3, r3
 8000de2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8000de4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8000de8:	eb12 0108 	adds.w	r1, r2, r8
 8000dec:	f8c7 1318 	str.w	r1, [r7, #792]	@ 0x318
 8000df0:	eb43 0309 	adc.w	r3, r3, r9
 8000df4:	f8c7 331c 	str.w	r3, [r7, #796]	@ 0x31c
 8000df8:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8000dfc:	f04f 0300 	mov.w	r3, #0
 8000e00:	e9d7 01c6 	ldrd	r0, r1, [r7, #792]	@ 0x318
 8000e04:	f7ff fc48 	bl	8000698 <__aeabi_uldivmod>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	460b      	mov	r3, r1
 8000e0c:	f112 010a 	adds.w	r1, r2, #10
 8000e10:	f8c7 10c8 	str.w	r1, [r7, #200]	@ 0xc8
 8000e14:	f143 0300 	adc.w	r3, r3, #0
 8000e18:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8000e1c:	4bec      	ldr	r3, [pc, #944]	@ (80011d0 <Set_Random_Motion_Values+0x454>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	461a      	mov	r2, r3
 8000e22:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8000e26:	4413      	add	r3, r2
 8000e28:	461a      	mov	r2, r3
 8000e2a:	4be9      	ldr	r3, [pc, #932]	@ (80011d0 <Set_Random_Motion_Values+0x454>)
 8000e2c:	601a      	str	r2, [r3, #0]
    x_axes.AXIS_Y += -(10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 8000e2e:	f00a ff47 	bl	800bcc0 <rand>
 8000e32:	4603      	mov	r3, r0
 8000e34:	17da      	asrs	r2, r3, #31
 8000e36:	f8c7 3310 	str.w	r3, [r7, #784]	@ 0x310
 8000e3a:	f8c7 2314 	str.w	r2, [r7, #788]	@ 0x314
 8000e3e:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8000e42:	2200      	movs	r2, #0
 8000e44:	f8c7 3308 	str.w	r3, [r7, #776]	@ 0x308
 8000e48:	f8c7 230c 	str.w	r2, [r7, #780]	@ 0x30c
 8000e4c:	e9d7 45c4 	ldrd	r4, r5, [r7, #784]	@ 0x310
 8000e50:	462b      	mov	r3, r5
 8000e52:	e9d7 89c2 	ldrd	r8, r9, [r7, #776]	@ 0x308
 8000e56:	4642      	mov	r2, r8
 8000e58:	fb02 f203 	mul.w	r2, r2, r3
 8000e5c:	464b      	mov	r3, r9
 8000e5e:	4621      	mov	r1, r4
 8000e60:	fb01 f303 	mul.w	r3, r1, r3
 8000e64:	4413      	add	r3, r2
 8000e66:	4622      	mov	r2, r4
 8000e68:	4641      	mov	r1, r8
 8000e6a:	fba2 1201 	umull	r1, r2, r2, r1
 8000e6e:	f8c7 23dc 	str.w	r2, [r7, #988]	@ 0x3dc
 8000e72:	460a      	mov	r2, r1
 8000e74:	f8c7 23d8 	str.w	r2, [r7, #984]	@ 0x3d8
 8000e78:	f8d7 23dc 	ldr.w	r2, [r7, #988]	@ 0x3dc
 8000e7c:	4413      	add	r3, r2
 8000e7e:	f8c7 33dc 	str.w	r3, [r7, #988]	@ 0x3dc
 8000e82:	e9d7 45f6 	ldrd	r4, r5, [r7, #984]	@ 0x3d8
 8000e86:	4622      	mov	r2, r4
 8000e88:	462b      	mov	r3, r5
 8000e8a:	f04f 0000 	mov.w	r0, #0
 8000e8e:	f04f 0100 	mov.w	r1, #0
 8000e92:	0099      	lsls	r1, r3, #2
 8000e94:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8000e98:	0090      	lsls	r0, r2, #2
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	460b      	mov	r3, r1
 8000e9e:	4621      	mov	r1, r4
 8000ea0:	1851      	adds	r1, r2, r1
 8000ea2:	f8c7 1300 	str.w	r1, [r7, #768]	@ 0x300
 8000ea6:	4629      	mov	r1, r5
 8000ea8:	eb43 0101 	adc.w	r1, r3, r1
 8000eac:	f8c7 1304 	str.w	r1, [r7, #772]	@ 0x304
 8000eb0:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8000eb4:	f04f 0300 	mov.w	r3, #0
 8000eb8:	e9d7 01c0 	ldrd	r0, r1, [r7, #768]	@ 0x300
 8000ebc:	f7ff fbec 	bl	8000698 <__aeabi_uldivmod>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	460b      	mov	r3, r1
 8000ec4:	f06f 0009 	mvn.w	r0, #9
 8000ec8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ecc:	1a80      	subs	r0, r0, r2
 8000ece:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
 8000ed2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ed6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8000eda:	4bbd      	ldr	r3, [pc, #756]	@ (80011d0 <Set_Random_Motion_Values+0x454>)
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	461a      	mov	r2, r3
 8000ee0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000ee4:	4413      	add	r3, r2
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	4bb9      	ldr	r3, [pc, #740]	@ (80011d0 <Set_Random_Motion_Values+0x454>)
 8000eea:	605a      	str	r2, [r3, #4]
    x_axes.AXIS_Z +=  (10  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8000eec:	f00a fee8 	bl	800bcc0 <rand>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	17da      	asrs	r2, r3, #31
 8000ef4:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8
 8000ef8:	f8c7 22fc 	str.w	r2, [r7, #764]	@ 0x2fc
 8000efc:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8000f00:	2200      	movs	r2, #0
 8000f02:	f8c7 32f0 	str.w	r3, [r7, #752]	@ 0x2f0
 8000f06:	f8c7 22f4 	str.w	r2, [r7, #756]	@ 0x2f4
 8000f0a:	e9d7 45be 	ldrd	r4, r5, [r7, #760]	@ 0x2f8
 8000f0e:	462b      	mov	r3, r5
 8000f10:	e9d7 89bc 	ldrd	r8, r9, [r7, #752]	@ 0x2f0
 8000f14:	4642      	mov	r2, r8
 8000f16:	fb02 f203 	mul.w	r2, r2, r3
 8000f1a:	464b      	mov	r3, r9
 8000f1c:	4621      	mov	r1, r4
 8000f1e:	fb01 f303 	mul.w	r3, r1, r3
 8000f22:	4413      	add	r3, r2
 8000f24:	4622      	mov	r2, r4
 8000f26:	4641      	mov	r1, r8
 8000f28:	fba2 1201 	umull	r1, r2, r2, r1
 8000f2c:	f8c7 23d4 	str.w	r2, [r7, #980]	@ 0x3d4
 8000f30:	460a      	mov	r2, r1
 8000f32:	f8c7 23d0 	str.w	r2, [r7, #976]	@ 0x3d0
 8000f36:	f8d7 23d4 	ldr.w	r2, [r7, #980]	@ 0x3d4
 8000f3a:	4413      	add	r3, r2
 8000f3c:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
 8000f40:	e9d7 45f4 	ldrd	r4, r5, [r7, #976]	@ 0x3d0
 8000f44:	4622      	mov	r2, r4
 8000f46:	462b      	mov	r3, r5
 8000f48:	f04f 0000 	mov.w	r0, #0
 8000f4c:	f04f 0100 	mov.w	r1, #0
 8000f50:	00d9      	lsls	r1, r3, #3
 8000f52:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8000f56:	00d0      	lsls	r0, r2, #3
 8000f58:	4602      	mov	r2, r0
 8000f5a:	460b      	mov	r3, r1
 8000f5c:	4621      	mov	r1, r4
 8000f5e:	1a51      	subs	r1, r2, r1
 8000f60:	f8c7 12e8 	str.w	r1, [r7, #744]	@ 0x2e8
 8000f64:	4629      	mov	r1, r5
 8000f66:	eb63 0301 	sbc.w	r3, r3, r1
 8000f6a:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
 8000f6e:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8000f72:	f04f 0300 	mov.w	r3, #0
 8000f76:	e9d7 01ba 	ldrd	r0, r1, [r7, #744]	@ 0x2e8
 8000f7a:	f7ff fb8d 	bl	8000698 <__aeabi_uldivmod>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	460b      	mov	r3, r1
 8000f82:	f112 010a 	adds.w	r1, r2, #10
 8000f86:	f8c7 10b8 	str.w	r1, [r7, #184]	@ 0xb8
 8000f8a:	f143 0300 	adc.w	r3, r3, #0
 8000f8e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8000f92:	4b8f      	ldr	r3, [pc, #572]	@ (80011d0 <Set_Random_Motion_Values+0x454>)
 8000f94:	689b      	ldr	r3, [r3, #8]
 8000f96:	461a      	mov	r2, r3
 8000f98:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000f9c:	4413      	add	r3, r2
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	4b8b      	ldr	r3, [pc, #556]	@ (80011d0 <Set_Random_Motion_Values+0x454>)
 8000fa2:	609a      	str	r2, [r3, #8]
    g_axes.AXIS_X +=  (100 + ((uint64_t)rand()*2*cnt)/RAND_MAX);
 8000fa4:	f00a fe8c 	bl	800bcc0 <rand>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	17da      	asrs	r2, r3, #31
 8000fac:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
 8000fb0:	f8c7 22e4 	str.w	r2, [r7, #740]	@ 0x2e4
 8000fb4:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f8c7 32d8 	str.w	r3, [r7, #728]	@ 0x2d8
 8000fbe:	f8c7 22dc 	str.w	r2, [r7, #732]	@ 0x2dc
 8000fc2:	e9d7 45b8 	ldrd	r4, r5, [r7, #736]	@ 0x2e0
 8000fc6:	462b      	mov	r3, r5
 8000fc8:	e9d7 89b6 	ldrd	r8, r9, [r7, #728]	@ 0x2d8
 8000fcc:	4642      	mov	r2, r8
 8000fce:	fb02 f203 	mul.w	r2, r2, r3
 8000fd2:	464b      	mov	r3, r9
 8000fd4:	4621      	mov	r1, r4
 8000fd6:	fb01 f303 	mul.w	r3, r1, r3
 8000fda:	4413      	add	r3, r2
 8000fdc:	4622      	mov	r2, r4
 8000fde:	4641      	mov	r1, r8
 8000fe0:	fba2 1201 	umull	r1, r2, r2, r1
 8000fe4:	f8c7 23cc 	str.w	r2, [r7, #972]	@ 0x3cc
 8000fe8:	460a      	mov	r2, r1
 8000fea:	f8c7 23c8 	str.w	r2, [r7, #968]	@ 0x3c8
 8000fee:	f8d7 23cc 	ldr.w	r2, [r7, #972]	@ 0x3cc
 8000ff2:	4413      	add	r3, r2
 8000ff4:	f8c7 33cc 	str.w	r3, [r7, #972]	@ 0x3cc
 8000ff8:	e9d7 12f2 	ldrd	r1, r2, [r7, #968]	@ 0x3c8
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	18db      	adds	r3, r3, r3
 8001000:	663b      	str	r3, [r7, #96]	@ 0x60
 8001002:	4613      	mov	r3, r2
 8001004:	eb42 0303 	adc.w	r3, r2, r3
 8001008:	667b      	str	r3, [r7, #100]	@ 0x64
 800100a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 800100e:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001012:	f04f 0300 	mov.w	r3, #0
 8001016:	f7ff fb3f 	bl	8000698 <__aeabi_uldivmod>
 800101a:	4602      	mov	r2, r0
 800101c:	460b      	mov	r3, r1
 800101e:	f112 0164 	adds.w	r1, r2, #100	@ 0x64
 8001022:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 8001026:	f143 0300 	adc.w	r3, r3, #0
 800102a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800102e:	4b69      	ldr	r3, [pc, #420]	@ (80011d4 <Set_Random_Motion_Values+0x458>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	461a      	mov	r2, r3
 8001034:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001038:	4413      	add	r3, r2
 800103a:	461a      	mov	r2, r3
 800103c:	4b65      	ldr	r3, [pc, #404]	@ (80011d4 <Set_Random_Motion_Values+0x458>)
 800103e:	601a      	str	r2, [r3, #0]
    g_axes.AXIS_Y += -(100 + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 8001040:	f00a fe3e 	bl	800bcc0 <rand>
 8001044:	4603      	mov	r3, r0
 8001046:	17da      	asrs	r2, r3, #31
 8001048:	f8c7 32d0 	str.w	r3, [r7, #720]	@ 0x2d0
 800104c:	f8c7 22d4 	str.w	r2, [r7, #724]	@ 0x2d4
 8001050:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001054:	2200      	movs	r2, #0
 8001056:	f8c7 32c8 	str.w	r3, [r7, #712]	@ 0x2c8
 800105a:	f8c7 22cc 	str.w	r2, [r7, #716]	@ 0x2cc
 800105e:	e9d7 45b4 	ldrd	r4, r5, [r7, #720]	@ 0x2d0
 8001062:	462b      	mov	r3, r5
 8001064:	e9d7 89b2 	ldrd	r8, r9, [r7, #712]	@ 0x2c8
 8001068:	4642      	mov	r2, r8
 800106a:	fb02 f203 	mul.w	r2, r2, r3
 800106e:	464b      	mov	r3, r9
 8001070:	4621      	mov	r1, r4
 8001072:	fb01 f303 	mul.w	r3, r1, r3
 8001076:	4413      	add	r3, r2
 8001078:	4622      	mov	r2, r4
 800107a:	4641      	mov	r1, r8
 800107c:	fba2 1201 	umull	r1, r2, r2, r1
 8001080:	f8c7 23c4 	str.w	r2, [r7, #964]	@ 0x3c4
 8001084:	460a      	mov	r2, r1
 8001086:	f8c7 23c0 	str.w	r2, [r7, #960]	@ 0x3c0
 800108a:	f8d7 23c4 	ldr.w	r2, [r7, #964]	@ 0x3c4
 800108e:	4413      	add	r3, r2
 8001090:	f8c7 33c4 	str.w	r3, [r7, #964]	@ 0x3c4
 8001094:	f04f 0000 	mov.w	r0, #0
 8001098:	f04f 0100 	mov.w	r1, #0
 800109c:	e9d7 45f0 	ldrd	r4, r5, [r7, #960]	@ 0x3c0
 80010a0:	462b      	mov	r3, r5
 80010a2:	0099      	lsls	r1, r3, #2
 80010a4:	4623      	mov	r3, r4
 80010a6:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 80010aa:	4623      	mov	r3, r4
 80010ac:	0098      	lsls	r0, r3, #2
 80010ae:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80010b2:	f04f 0300 	mov.w	r3, #0
 80010b6:	f7ff faef 	bl	8000698 <__aeabi_uldivmod>
 80010ba:	4602      	mov	r2, r0
 80010bc:	460b      	mov	r3, r1
 80010be:	f06f 0063 	mvn.w	r0, #99	@ 0x63
 80010c2:	f04f 31ff 	mov.w	r1, #4294967295
 80010c6:	1a80      	subs	r0, r0, r2
 80010c8:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
 80010cc:	eb61 0303 	sbc.w	r3, r1, r3
 80010d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80010d4:	4b3f      	ldr	r3, [pc, #252]	@ (80011d4 <Set_Random_Motion_Values+0x458>)
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	461a      	mov	r2, r3
 80010da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80010de:	4413      	add	r3, r2
 80010e0:	461a      	mov	r2, r3
 80010e2:	4b3c      	ldr	r3, [pc, #240]	@ (80011d4 <Set_Random_Motion_Values+0x458>)
 80010e4:	605a      	str	r2, [r3, #4]
    g_axes.AXIS_Z +=  (100 + ((uint64_t)rand()*6*cnt)/RAND_MAX);
 80010e6:	f00a fdeb 	bl	800bcc0 <rand>
 80010ea:	4603      	mov	r3, r0
 80010ec:	17da      	asrs	r2, r3, #31
 80010ee:	f8c7 32c0 	str.w	r3, [r7, #704]	@ 0x2c0
 80010f2:	f8c7 22c4 	str.w	r2, [r7, #708]	@ 0x2c4
 80010f6:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 80010fa:	2200      	movs	r2, #0
 80010fc:	f8c7 32b8 	str.w	r3, [r7, #696]	@ 0x2b8
 8001100:	f8c7 22bc 	str.w	r2, [r7, #700]	@ 0x2bc
 8001104:	e9d7 45b0 	ldrd	r4, r5, [r7, #704]	@ 0x2c0
 8001108:	462b      	mov	r3, r5
 800110a:	e9d7 89ae 	ldrd	r8, r9, [r7, #696]	@ 0x2b8
 800110e:	4642      	mov	r2, r8
 8001110:	fb02 f203 	mul.w	r2, r2, r3
 8001114:	464b      	mov	r3, r9
 8001116:	4621      	mov	r1, r4
 8001118:	fb01 f303 	mul.w	r3, r1, r3
 800111c:	4413      	add	r3, r2
 800111e:	4622      	mov	r2, r4
 8001120:	4641      	mov	r1, r8
 8001122:	fba2 1201 	umull	r1, r2, r2, r1
 8001126:	f8c7 23bc 	str.w	r2, [r7, #956]	@ 0x3bc
 800112a:	460a      	mov	r2, r1
 800112c:	f8c7 23b8 	str.w	r2, [r7, #952]	@ 0x3b8
 8001130:	f8d7 23bc 	ldr.w	r2, [r7, #956]	@ 0x3bc
 8001134:	4413      	add	r3, r2
 8001136:	f8c7 33bc 	str.w	r3, [r7, #956]	@ 0x3bc
 800113a:	e9d7 45ee 	ldrd	r4, r5, [r7, #952]	@ 0x3b8
 800113e:	4622      	mov	r2, r4
 8001140:	462b      	mov	r3, r5
 8001142:	1891      	adds	r1, r2, r2
 8001144:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001146:	415b      	adcs	r3, r3
 8001148:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800114a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800114e:	4621      	mov	r1, r4
 8001150:	1851      	adds	r1, r2, r1
 8001152:	6539      	str	r1, [r7, #80]	@ 0x50
 8001154:	4629      	mov	r1, r5
 8001156:	eb43 0101 	adc.w	r1, r3, r1
 800115a:	6579      	str	r1, [r7, #84]	@ 0x54
 800115c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8001160:	460b      	mov	r3, r1
 8001162:	18db      	adds	r3, r3, r3
 8001164:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001166:	4613      	mov	r3, r2
 8001168:	eb42 0303 	adc.w	r3, r2, r3
 800116c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800116e:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 8001172:	4618      	mov	r0, r3
 8001174:	4621      	mov	r1, r4
 8001176:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800117a:	f04f 0300 	mov.w	r3, #0
 800117e:	f7ff fa8b 	bl	8000698 <__aeabi_uldivmod>
 8001182:	4602      	mov	r2, r0
 8001184:	460b      	mov	r3, r1
 8001186:	f112 0164 	adds.w	r1, r2, #100	@ 0x64
 800118a:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 800118e:	f143 0300 	adc.w	r3, r3, #0
 8001192:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001196:	4b0f      	ldr	r3, [pc, #60]	@ (80011d4 <Set_Random_Motion_Values+0x458>)
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	461a      	mov	r2, r3
 800119c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80011a0:	4413      	add	r3, r2
 80011a2:	461a      	mov	r2, r3
 80011a4:	4b0b      	ldr	r3, [pc, #44]	@ (80011d4 <Set_Random_Motion_Values+0x458>)
 80011a6:	609a      	str	r2, [r3, #8]
    m_axes.AXIS_X +=  (3  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 80011a8:	f00a fd8a 	bl	800bcc0 <rand>
 80011ac:	4603      	mov	r3, r0
 80011ae:	17da      	asrs	r2, r3, #31
 80011b0:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
 80011b4:	f8c7 22b4 	str.w	r2, [r7, #692]	@ 0x2b4
 80011b8:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 80011bc:	2200      	movs	r2, #0
 80011be:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
 80011c2:	f8c7 22ac 	str.w	r2, [r7, #684]	@ 0x2ac
 80011c6:	e9d7 45ac 	ldrd	r4, r5, [r7, #688]	@ 0x2b0
 80011ca:	462b      	mov	r3, r5
 80011cc:	e004      	b.n	80011d8 <Set_Random_Motion_Values+0x45c>
 80011ce:	bf00      	nop
 80011d0:	20000118 	.word	0x20000118
 80011d4:	20000124 	.word	0x20000124
 80011d8:	e9d7 89aa 	ldrd	r8, r9, [r7, #680]	@ 0x2a8
 80011dc:	4642      	mov	r2, r8
 80011de:	fb02 f203 	mul.w	r2, r2, r3
 80011e2:	464b      	mov	r3, r9
 80011e4:	4621      	mov	r1, r4
 80011e6:	fb01 f303 	mul.w	r3, r1, r3
 80011ea:	4413      	add	r3, r2
 80011ec:	4622      	mov	r2, r4
 80011ee:	4641      	mov	r1, r8
 80011f0:	fba2 1201 	umull	r1, r2, r2, r1
 80011f4:	f8c7 23b4 	str.w	r2, [r7, #948]	@ 0x3b4
 80011f8:	460a      	mov	r2, r1
 80011fa:	f8c7 23b0 	str.w	r2, [r7, #944]	@ 0x3b0
 80011fe:	f8d7 23b4 	ldr.w	r2, [r7, #948]	@ 0x3b4
 8001202:	4413      	add	r3, r2
 8001204:	f8c7 33b4 	str.w	r3, [r7, #948]	@ 0x3b4
 8001208:	e9d7 45ec 	ldrd	r4, r5, [r7, #944]	@ 0x3b0
 800120c:	4622      	mov	r2, r4
 800120e:	462b      	mov	r3, r5
 8001210:	1891      	adds	r1, r2, r2
 8001212:	6439      	str	r1, [r7, #64]	@ 0x40
 8001214:	415b      	adcs	r3, r3
 8001216:	647b      	str	r3, [r7, #68]	@ 0x44
 8001218:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800121c:	4621      	mov	r1, r4
 800121e:	1851      	adds	r1, r2, r1
 8001220:	f8c7 12a0 	str.w	r1, [r7, #672]	@ 0x2a0
 8001224:	4629      	mov	r1, r5
 8001226:	eb43 0101 	adc.w	r1, r3, r1
 800122a:	f8c7 12a4 	str.w	r1, [r7, #676]	@ 0x2a4
 800122e:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001232:	f04f 0300 	mov.w	r3, #0
 8001236:	e9d7 01a8 	ldrd	r0, r1, [r7, #672]	@ 0x2a0
 800123a:	f7ff fa2d 	bl	8000698 <__aeabi_uldivmod>
 800123e:	4602      	mov	r2, r0
 8001240:	460b      	mov	r3, r1
 8001242:	1cd1      	adds	r1, r2, #3
 8001244:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8001248:	f143 0300 	adc.w	r3, r3, #0
 800124c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001250:	4be1      	ldr	r3, [pc, #900]	@ (80015d8 <Set_Random_Motion_Values+0x85c>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	461a      	mov	r2, r3
 8001256:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800125a:	4413      	add	r3, r2
 800125c:	461a      	mov	r2, r3
 800125e:	4bde      	ldr	r3, [pc, #888]	@ (80015d8 <Set_Random_Motion_Values+0x85c>)
 8001260:	601a      	str	r2, [r3, #0]
    m_axes.AXIS_Y += -(3  + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 8001262:	f00a fd2d 	bl	800bcc0 <rand>
 8001266:	4603      	mov	r3, r0
 8001268:	17da      	asrs	r2, r3, #31
 800126a:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
 800126e:	f8c7 229c 	str.w	r2, [r7, #668]	@ 0x29c
 8001272:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001276:	2200      	movs	r2, #0
 8001278:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
 800127c:	f8c7 2294 	str.w	r2, [r7, #660]	@ 0x294
 8001280:	e9d7 45a6 	ldrd	r4, r5, [r7, #664]	@ 0x298
 8001284:	462b      	mov	r3, r5
 8001286:	e9d7 89a4 	ldrd	r8, r9, [r7, #656]	@ 0x290
 800128a:	4642      	mov	r2, r8
 800128c:	fb02 f203 	mul.w	r2, r2, r3
 8001290:	464b      	mov	r3, r9
 8001292:	4621      	mov	r1, r4
 8001294:	fb01 f303 	mul.w	r3, r1, r3
 8001298:	4413      	add	r3, r2
 800129a:	4622      	mov	r2, r4
 800129c:	4641      	mov	r1, r8
 800129e:	fba2 1201 	umull	r1, r2, r2, r1
 80012a2:	f8c7 23ac 	str.w	r2, [r7, #940]	@ 0x3ac
 80012a6:	460a      	mov	r2, r1
 80012a8:	f8c7 23a8 	str.w	r2, [r7, #936]	@ 0x3a8
 80012ac:	f8d7 23ac 	ldr.w	r2, [r7, #940]	@ 0x3ac
 80012b0:	4413      	add	r3, r2
 80012b2:	f8c7 33ac 	str.w	r3, [r7, #940]	@ 0x3ac
 80012b6:	f04f 0000 	mov.w	r0, #0
 80012ba:	f04f 0100 	mov.w	r1, #0
 80012be:	e9d7 45ea 	ldrd	r4, r5, [r7, #936]	@ 0x3a8
 80012c2:	462b      	mov	r3, r5
 80012c4:	0099      	lsls	r1, r3, #2
 80012c6:	4623      	mov	r3, r4
 80012c8:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 80012cc:	4623      	mov	r3, r4
 80012ce:	0098      	lsls	r0, r3, #2
 80012d0:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80012d4:	f04f 0300 	mov.w	r3, #0
 80012d8:	f7ff f9de 	bl	8000698 <__aeabi_uldivmod>
 80012dc:	4602      	mov	r2, r0
 80012de:	460b      	mov	r3, r1
 80012e0:	f06f 0002 	mvn.w	r0, #2
 80012e4:	f04f 31ff 	mov.w	r1, #4294967295
 80012e8:	1a80      	subs	r0, r0, r2
 80012ea:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
 80012ee:	eb61 0303 	sbc.w	r3, r1, r3
 80012f2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80012f6:	4bb8      	ldr	r3, [pc, #736]	@ (80015d8 <Set_Random_Motion_Values+0x85c>)
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	461a      	mov	r2, r3
 80012fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001300:	4413      	add	r3, r2
 8001302:	461a      	mov	r2, r3
 8001304:	4bb4      	ldr	r3, [pc, #720]	@ (80015d8 <Set_Random_Motion_Values+0x85c>)
 8001306:	605a      	str	r2, [r3, #4]
    m_axes.AXIS_Z +=  (3  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 8001308:	f00a fcda 	bl	800bcc0 <rand>
 800130c:	4603      	mov	r3, r0
 800130e:	17da      	asrs	r2, r3, #31
 8001310:	f8c7 3288 	str.w	r3, [r7, #648]	@ 0x288
 8001314:	f8c7 228c 	str.w	r2, [r7, #652]	@ 0x28c
 8001318:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 800131c:	2200      	movs	r2, #0
 800131e:	f8c7 3280 	str.w	r3, [r7, #640]	@ 0x280
 8001322:	f8c7 2284 	str.w	r2, [r7, #644]	@ 0x284
 8001326:	e9d7 45a2 	ldrd	r4, r5, [r7, #648]	@ 0x288
 800132a:	462b      	mov	r3, r5
 800132c:	e9d7 89a0 	ldrd	r8, r9, [r7, #640]	@ 0x280
 8001330:	4642      	mov	r2, r8
 8001332:	fb02 f203 	mul.w	r2, r2, r3
 8001336:	464b      	mov	r3, r9
 8001338:	4621      	mov	r1, r4
 800133a:	fb01 f303 	mul.w	r3, r1, r3
 800133e:	4413      	add	r3, r2
 8001340:	4622      	mov	r2, r4
 8001342:	4641      	mov	r1, r8
 8001344:	fba2 1201 	umull	r1, r2, r2, r1
 8001348:	f8c7 23a4 	str.w	r2, [r7, #932]	@ 0x3a4
 800134c:	460a      	mov	r2, r1
 800134e:	f8c7 23a0 	str.w	r2, [r7, #928]	@ 0x3a0
 8001352:	f8d7 23a4 	ldr.w	r2, [r7, #932]	@ 0x3a4
 8001356:	4413      	add	r3, r2
 8001358:	f8c7 33a4 	str.w	r3, [r7, #932]	@ 0x3a4
 800135c:	e9d7 45e8 	ldrd	r4, r5, [r7, #928]	@ 0x3a0
 8001360:	4622      	mov	r2, r4
 8001362:	462b      	mov	r3, r5
 8001364:	f04f 0000 	mov.w	r0, #0
 8001368:	f04f 0100 	mov.w	r1, #0
 800136c:	0099      	lsls	r1, r3, #2
 800136e:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001372:	0090      	lsls	r0, r2, #2
 8001374:	4602      	mov	r2, r0
 8001376:	460b      	mov	r3, r1
 8001378:	4621      	mov	r1, r4
 800137a:	1851      	adds	r1, r2, r1
 800137c:	f8c7 1278 	str.w	r1, [r7, #632]	@ 0x278
 8001380:	4629      	mov	r1, r5
 8001382:	eb43 0101 	adc.w	r1, r3, r1
 8001386:	f8c7 127c 	str.w	r1, [r7, #636]	@ 0x27c
 800138a:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800138e:	f04f 0300 	mov.w	r3, #0
 8001392:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	@ 0x278
 8001396:	f7ff f97f 	bl	8000698 <__aeabi_uldivmod>
 800139a:	4602      	mov	r2, r0
 800139c:	460b      	mov	r3, r1
 800139e:	1cd1      	adds	r1, r2, #3
 80013a0:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 80013a4:	f143 0300 	adc.w	r3, r3, #0
 80013a8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80013ac:	4b8a      	ldr	r3, [pc, #552]	@ (80015d8 <Set_Random_Motion_Values+0x85c>)
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	461a      	mov	r2, r3
 80013b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80013b6:	4413      	add	r3, r2
 80013b8:	461a      	mov	r2, r3
 80013ba:	4b87      	ldr	r3, [pc, #540]	@ (80015d8 <Set_Random_Motion_Values+0x85c>)
 80013bc:	609a      	str	r2, [r3, #8]

    q_axes.AXIS_X -= (100  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 80013be:	f00a fc7f 	bl	800bcc0 <rand>
 80013c2:	4603      	mov	r3, r0
 80013c4:	17da      	asrs	r2, r3, #31
 80013c6:	f8c7 3270 	str.w	r3, [r7, #624]	@ 0x270
 80013ca:	f8c7 2274 	str.w	r2, [r7, #628]	@ 0x274
 80013ce:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 80013d2:	2200      	movs	r2, #0
 80013d4:	f8c7 3268 	str.w	r3, [r7, #616]	@ 0x268
 80013d8:	f8c7 226c 	str.w	r2, [r7, #620]	@ 0x26c
 80013dc:	e9d7 459c 	ldrd	r4, r5, [r7, #624]	@ 0x270
 80013e0:	462b      	mov	r3, r5
 80013e2:	e9d7 899a 	ldrd	r8, r9, [r7, #616]	@ 0x268
 80013e6:	4642      	mov	r2, r8
 80013e8:	fb02 f203 	mul.w	r2, r2, r3
 80013ec:	464b      	mov	r3, r9
 80013ee:	4621      	mov	r1, r4
 80013f0:	fb01 f303 	mul.w	r3, r1, r3
 80013f4:	4413      	add	r3, r2
 80013f6:	4622      	mov	r2, r4
 80013f8:	4641      	mov	r1, r8
 80013fa:	fba2 1201 	umull	r1, r2, r2, r1
 80013fe:	f8c7 239c 	str.w	r2, [r7, #924]	@ 0x39c
 8001402:	460a      	mov	r2, r1
 8001404:	f8c7 2398 	str.w	r2, [r7, #920]	@ 0x398
 8001408:	f8d7 239c 	ldr.w	r2, [r7, #924]	@ 0x39c
 800140c:	4413      	add	r3, r2
 800140e:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
 8001412:	e9d7 45e6 	ldrd	r4, r5, [r7, #920]	@ 0x398
 8001416:	4622      	mov	r2, r4
 8001418:	462b      	mov	r3, r5
 800141a:	1891      	adds	r1, r2, r2
 800141c:	63b9      	str	r1, [r7, #56]	@ 0x38
 800141e:	415b      	adcs	r3, r3
 8001420:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001422:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001426:	4621      	mov	r1, r4
 8001428:	1851      	adds	r1, r2, r1
 800142a:	f8c7 1260 	str.w	r1, [r7, #608]	@ 0x260
 800142e:	4629      	mov	r1, r5
 8001430:	eb43 0101 	adc.w	r1, r3, r1
 8001434:	f8c7 1264 	str.w	r1, [r7, #612]	@ 0x264
 8001438:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800143c:	f04f 0300 	mov.w	r3, #0
 8001440:	e9d7 0198 	ldrd	r0, r1, [r7, #608]	@ 0x260
 8001444:	f7ff f928 	bl	8000698 <__aeabi_uldivmod>
 8001448:	4602      	mov	r2, r0
 800144a:	460b      	mov	r3, r1
 800144c:	f112 0164 	adds.w	r1, r2, #100	@ 0x64
 8001450:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 8001454:	f143 0300 	adc.w	r3, r3, #0
 8001458:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800145c:	4b5f      	ldr	r3, [pc, #380]	@ (80015dc <Set_Random_Motion_Values+0x860>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	461a      	mov	r2, r3
 8001462:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	461a      	mov	r2, r3
 800146a:	4b5c      	ldr	r3, [pc, #368]	@ (80015dc <Set_Random_Motion_Values+0x860>)
 800146c:	601a      	str	r2, [r3, #0]
    q_axes.AXIS_Y += (100  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 800146e:	f00a fc27 	bl	800bcc0 <rand>
 8001472:	4603      	mov	r3, r0
 8001474:	17da      	asrs	r2, r3, #31
 8001476:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
 800147a:	f8c7 225c 	str.w	r2, [r7, #604]	@ 0x25c
 800147e:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001482:	2200      	movs	r2, #0
 8001484:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
 8001488:	f8c7 2254 	str.w	r2, [r7, #596]	@ 0x254
 800148c:	e9d7 4596 	ldrd	r4, r5, [r7, #600]	@ 0x258
 8001490:	462b      	mov	r3, r5
 8001492:	e9d7 8994 	ldrd	r8, r9, [r7, #592]	@ 0x250
 8001496:	4642      	mov	r2, r8
 8001498:	fb02 f203 	mul.w	r2, r2, r3
 800149c:	464b      	mov	r3, r9
 800149e:	4621      	mov	r1, r4
 80014a0:	fb01 f303 	mul.w	r3, r1, r3
 80014a4:	4413      	add	r3, r2
 80014a6:	4622      	mov	r2, r4
 80014a8:	4641      	mov	r1, r8
 80014aa:	fba2 1201 	umull	r1, r2, r2, r1
 80014ae:	f8c7 2394 	str.w	r2, [r7, #916]	@ 0x394
 80014b2:	460a      	mov	r2, r1
 80014b4:	f8c7 2390 	str.w	r2, [r7, #912]	@ 0x390
 80014b8:	f8d7 2394 	ldr.w	r2, [r7, #916]	@ 0x394
 80014bc:	4413      	add	r3, r2
 80014be:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
 80014c2:	e9d7 45e4 	ldrd	r4, r5, [r7, #912]	@ 0x390
 80014c6:	4622      	mov	r2, r4
 80014c8:	462b      	mov	r3, r5
 80014ca:	f04f 0000 	mov.w	r0, #0
 80014ce:	f04f 0100 	mov.w	r1, #0
 80014d2:	0099      	lsls	r1, r3, #2
 80014d4:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80014d8:	0090      	lsls	r0, r2, #2
 80014da:	4602      	mov	r2, r0
 80014dc:	460b      	mov	r3, r1
 80014de:	4621      	mov	r1, r4
 80014e0:	1851      	adds	r1, r2, r1
 80014e2:	f8c7 1248 	str.w	r1, [r7, #584]	@ 0x248
 80014e6:	4629      	mov	r1, r5
 80014e8:	eb43 0101 	adc.w	r1, r3, r1
 80014ec:	f8c7 124c 	str.w	r1, [r7, #588]	@ 0x24c
 80014f0:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80014f4:	f04f 0300 	mov.w	r3, #0
 80014f8:	e9d7 0192 	ldrd	r0, r1, [r7, #584]	@ 0x248
 80014fc:	f7ff f8cc 	bl	8000698 <__aeabi_uldivmod>
 8001500:	4602      	mov	r2, r0
 8001502:	460b      	mov	r3, r1
 8001504:	f112 0164 	adds.w	r1, r2, #100	@ 0x64
 8001508:	67b9      	str	r1, [r7, #120]	@ 0x78
 800150a:	f143 0300 	adc.w	r3, r3, #0
 800150e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001510:	4b32      	ldr	r3, [pc, #200]	@ (80015dc <Set_Random_Motion_Values+0x860>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	461a      	mov	r2, r3
 8001516:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001518:	4413      	add	r3, r2
 800151a:	461a      	mov	r2, r3
 800151c:	4b2f      	ldr	r3, [pc, #188]	@ (80015dc <Set_Random_Motion_Values+0x860>)
 800151e:	605a      	str	r2, [r3, #4]
    q_axes.AXIS_Z -= (100  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8001520:	f00a fbce 	bl	800bcc0 <rand>
 8001524:	4603      	mov	r3, r0
 8001526:	17da      	asrs	r2, r3, #31
 8001528:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
 800152c:	f8c7 2244 	str.w	r2, [r7, #580]	@ 0x244
 8001530:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001534:	2200      	movs	r2, #0
 8001536:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
 800153a:	f8c7 223c 	str.w	r2, [r7, #572]	@ 0x23c
 800153e:	e9d7 4590 	ldrd	r4, r5, [r7, #576]	@ 0x240
 8001542:	462b      	mov	r3, r5
 8001544:	e9d7 898e 	ldrd	r8, r9, [r7, #568]	@ 0x238
 8001548:	4642      	mov	r2, r8
 800154a:	fb02 f203 	mul.w	r2, r2, r3
 800154e:	464b      	mov	r3, r9
 8001550:	4621      	mov	r1, r4
 8001552:	fb01 f303 	mul.w	r3, r1, r3
 8001556:	4413      	add	r3, r2
 8001558:	4622      	mov	r2, r4
 800155a:	4641      	mov	r1, r8
 800155c:	fba2 1201 	umull	r1, r2, r2, r1
 8001560:	f8c7 238c 	str.w	r2, [r7, #908]	@ 0x38c
 8001564:	460a      	mov	r2, r1
 8001566:	f8c7 2388 	str.w	r2, [r7, #904]	@ 0x388
 800156a:	f8d7 238c 	ldr.w	r2, [r7, #908]	@ 0x38c
 800156e:	4413      	add	r3, r2
 8001570:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c
 8001574:	e9d7 45e2 	ldrd	r4, r5, [r7, #904]	@ 0x388
 8001578:	4622      	mov	r2, r4
 800157a:	462b      	mov	r3, r5
 800157c:	f04f 0000 	mov.w	r0, #0
 8001580:	f04f 0100 	mov.w	r1, #0
 8001584:	00d9      	lsls	r1, r3, #3
 8001586:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800158a:	00d0      	lsls	r0, r2, #3
 800158c:	4602      	mov	r2, r0
 800158e:	460b      	mov	r3, r1
 8001590:	4621      	mov	r1, r4
 8001592:	1a51      	subs	r1, r2, r1
 8001594:	f8c7 1230 	str.w	r1, [r7, #560]	@ 0x230
 8001598:	4629      	mov	r1, r5
 800159a:	eb63 0301 	sbc.w	r3, r3, r1
 800159e:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
 80015a2:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80015a6:	f04f 0300 	mov.w	r3, #0
 80015aa:	e9d7 018c 	ldrd	r0, r1, [r7, #560]	@ 0x230
 80015ae:	f7ff f873 	bl	8000698 <__aeabi_uldivmod>
 80015b2:	4602      	mov	r2, r0
 80015b4:	460b      	mov	r3, r1
 80015b6:	f112 0164 	adds.w	r1, r2, #100	@ 0x64
 80015ba:	6739      	str	r1, [r7, #112]	@ 0x70
 80015bc:	f143 0300 	adc.w	r3, r3, #0
 80015c0:	677b      	str	r3, [r7, #116]	@ 0x74
 80015c2:	4b06      	ldr	r3, [pc, #24]	@ (80015dc <Set_Random_Motion_Values+0x860>)
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	461a      	mov	r2, r3
 80015c8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	461a      	mov	r2, r3
 80015ce:	4b03      	ldr	r3, [pc, #12]	@ (80015dc <Set_Random_Motion_Values+0x860>)
 80015d0:	609a      	str	r2, [r3, #8]
    q_axes.AXIS_X += (200 + ((uint64_t)rand()*7*cnt)/RAND_MAX);
    q_axes.AXIS_Y -= (150 + ((uint64_t)rand()*3*cnt)/RAND_MAX);
    q_axes.AXIS_Z += (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
  }

}
 80015d2:	f000 bc37 	b.w	8001e44 <Set_Random_Motion_Values+0x10c8>
 80015d6:	bf00      	nop
 80015d8:	20000130 	.word	0x20000130
 80015dc:	2000013c 	.word	0x2000013c
    x_axes.AXIS_X += -(10  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 80015e0:	f00a fb6e 	bl	800bcc0 <rand>
 80015e4:	4603      	mov	r3, r0
 80015e6:	17da      	asrs	r2, r3, #31
 80015e8:	f8c7 3228 	str.w	r3, [r7, #552]	@ 0x228
 80015ec:	f8c7 222c 	str.w	r2, [r7, #556]	@ 0x22c
 80015f0:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 80015f4:	2200      	movs	r2, #0
 80015f6:	469a      	mov	sl, r3
 80015f8:	4693      	mov	fp, r2
 80015fa:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 80015fe:	460b      	mov	r3, r1
 8001600:	fb0a f203 	mul.w	r2, sl, r3
 8001604:	4603      	mov	r3, r0
 8001606:	fb03 f30b 	mul.w	r3, r3, fp
 800160a:	4413      	add	r3, r2
 800160c:	4602      	mov	r2, r0
 800160e:	fba2 450a 	umull	r4, r5, r2, sl
 8001612:	442b      	add	r3, r5
 8001614:	461d      	mov	r5, r3
 8001616:	4622      	mov	r2, r4
 8001618:	462b      	mov	r3, r5
 800161a:	1891      	adds	r1, r2, r2
 800161c:	6339      	str	r1, [r7, #48]	@ 0x30
 800161e:	415b      	adcs	r3, r3
 8001620:	637b      	str	r3, [r7, #52]	@ 0x34
 8001622:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001626:	1911      	adds	r1, r2, r4
 8001628:	f8c7 1220 	str.w	r1, [r7, #544]	@ 0x220
 800162c:	416b      	adcs	r3, r5
 800162e:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
 8001632:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001636:	f04f 0300 	mov.w	r3, #0
 800163a:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 800163e:	f7ff f82b 	bl	8000698 <__aeabi_uldivmod>
 8001642:	4602      	mov	r2, r0
 8001644:	460b      	mov	r3, r1
 8001646:	f06f 0009 	mvn.w	r0, #9
 800164a:	f04f 31ff 	mov.w	r1, #4294967295
 800164e:	1a80      	subs	r0, r0, r2
 8001650:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128
 8001654:	eb61 0303 	sbc.w	r3, r1, r3
 8001658:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800165c:	4beb      	ldr	r3, [pc, #940]	@ (8001a0c <Set_Random_Motion_Values+0xc90>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	461a      	mov	r2, r3
 8001662:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001666:	4413      	add	r3, r2
 8001668:	461a      	mov	r2, r3
 800166a:	4be8      	ldr	r3, [pc, #928]	@ (8001a0c <Set_Random_Motion_Values+0xc90>)
 800166c:	601a      	str	r2, [r3, #0]
    x_axes.AXIS_Y +=  (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 800166e:	f00a fb27 	bl	800bcc0 <rand>
 8001672:	4603      	mov	r3, r0
 8001674:	17da      	asrs	r2, r3, #31
 8001676:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
 800167a:	f8c7 221c 	str.w	r2, [r7, #540]	@ 0x21c
 800167e:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001682:	2200      	movs	r2, #0
 8001684:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 8001688:	f8c7 2214 	str.w	r2, [r7, #532]	@ 0x214
 800168c:	e9d7 4586 	ldrd	r4, r5, [r7, #536]	@ 0x218
 8001690:	462b      	mov	r3, r5
 8001692:	e9d7 8984 	ldrd	r8, r9, [r7, #528]	@ 0x210
 8001696:	4642      	mov	r2, r8
 8001698:	fb02 f203 	mul.w	r2, r2, r3
 800169c:	464b      	mov	r3, r9
 800169e:	4621      	mov	r1, r4
 80016a0:	fb01 f303 	mul.w	r3, r1, r3
 80016a4:	4413      	add	r3, r2
 80016a6:	4622      	mov	r2, r4
 80016a8:	4641      	mov	r1, r8
 80016aa:	fba2 1201 	umull	r1, r2, r2, r1
 80016ae:	f8c7 2384 	str.w	r2, [r7, #900]	@ 0x384
 80016b2:	460a      	mov	r2, r1
 80016b4:	f8c7 2380 	str.w	r2, [r7, #896]	@ 0x380
 80016b8:	f8d7 2384 	ldr.w	r2, [r7, #900]	@ 0x384
 80016bc:	4413      	add	r3, r2
 80016be:	f8c7 3384 	str.w	r3, [r7, #900]	@ 0x384
 80016c2:	e9d7 45e0 	ldrd	r4, r5, [r7, #896]	@ 0x380
 80016c6:	4622      	mov	r2, r4
 80016c8:	462b      	mov	r3, r5
 80016ca:	f04f 0000 	mov.w	r0, #0
 80016ce:	f04f 0100 	mov.w	r1, #0
 80016d2:	0099      	lsls	r1, r3, #2
 80016d4:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80016d8:	0090      	lsls	r0, r2, #2
 80016da:	4602      	mov	r2, r0
 80016dc:	460b      	mov	r3, r1
 80016de:	4621      	mov	r1, r4
 80016e0:	1851      	adds	r1, r2, r1
 80016e2:	f8c7 1208 	str.w	r1, [r7, #520]	@ 0x208
 80016e6:	4629      	mov	r1, r5
 80016e8:	eb43 0101 	adc.w	r1, r3, r1
 80016ec:	f8c7 120c 	str.w	r1, [r7, #524]	@ 0x20c
 80016f0:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80016f4:	f04f 0300 	mov.w	r3, #0
 80016f8:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	@ 0x208
 80016fc:	f7fe ffcc 	bl	8000698 <__aeabi_uldivmod>
 8001700:	4602      	mov	r2, r0
 8001702:	460b      	mov	r3, r1
 8001704:	f112 010a 	adds.w	r1, r2, #10
 8001708:	f8c7 1120 	str.w	r1, [r7, #288]	@ 0x120
 800170c:	f143 0300 	adc.w	r3, r3, #0
 8001710:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001714:	4bbd      	ldr	r3, [pc, #756]	@ (8001a0c <Set_Random_Motion_Values+0xc90>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	461a      	mov	r2, r3
 800171a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800171e:	4413      	add	r3, r2
 8001720:	461a      	mov	r2, r3
 8001722:	4bba      	ldr	r3, [pc, #744]	@ (8001a0c <Set_Random_Motion_Values+0xc90>)
 8001724:	605a      	str	r2, [r3, #4]
    x_axes.AXIS_Z += -(10  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8001726:	f00a facb 	bl	800bcc0 <rand>
 800172a:	4603      	mov	r3, r0
 800172c:	17da      	asrs	r2, r3, #31
 800172e:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
 8001732:	f8c7 2204 	str.w	r2, [r7, #516]	@ 0x204
 8001736:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 800173a:	2200      	movs	r2, #0
 800173c:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
 8001740:	f8c7 21fc 	str.w	r2, [r7, #508]	@ 0x1fc
 8001744:	e9d7 4580 	ldrd	r4, r5, [r7, #512]	@ 0x200
 8001748:	462b      	mov	r3, r5
 800174a:	e9d7 897e 	ldrd	r8, r9, [r7, #504]	@ 0x1f8
 800174e:	4642      	mov	r2, r8
 8001750:	fb02 f203 	mul.w	r2, r2, r3
 8001754:	464b      	mov	r3, r9
 8001756:	4621      	mov	r1, r4
 8001758:	fb01 f303 	mul.w	r3, r1, r3
 800175c:	4413      	add	r3, r2
 800175e:	4622      	mov	r2, r4
 8001760:	4641      	mov	r1, r8
 8001762:	fba2 1201 	umull	r1, r2, r2, r1
 8001766:	f8c7 237c 	str.w	r2, [r7, #892]	@ 0x37c
 800176a:	460a      	mov	r2, r1
 800176c:	f8c7 2378 	str.w	r2, [r7, #888]	@ 0x378
 8001770:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
 8001774:	4413      	add	r3, r2
 8001776:	f8c7 337c 	str.w	r3, [r7, #892]	@ 0x37c
 800177a:	e9d7 45de 	ldrd	r4, r5, [r7, #888]	@ 0x378
 800177e:	4622      	mov	r2, r4
 8001780:	462b      	mov	r3, r5
 8001782:	f04f 0000 	mov.w	r0, #0
 8001786:	f04f 0100 	mov.w	r1, #0
 800178a:	00d9      	lsls	r1, r3, #3
 800178c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001790:	00d0      	lsls	r0, r2, #3
 8001792:	4602      	mov	r2, r0
 8001794:	460b      	mov	r3, r1
 8001796:	4621      	mov	r1, r4
 8001798:	1a51      	subs	r1, r2, r1
 800179a:	f8c7 11f0 	str.w	r1, [r7, #496]	@ 0x1f0
 800179e:	4629      	mov	r1, r5
 80017a0:	eb63 0301 	sbc.w	r3, r3, r1
 80017a4:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
 80017a8:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80017ac:	f04f 0300 	mov.w	r3, #0
 80017b0:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	@ 0x1f0
 80017b4:	f7fe ff70 	bl	8000698 <__aeabi_uldivmod>
 80017b8:	4602      	mov	r2, r0
 80017ba:	460b      	mov	r3, r1
 80017bc:	f06f 0009 	mvn.w	r0, #9
 80017c0:	f04f 31ff 	mov.w	r1, #4294967295
 80017c4:	1a80      	subs	r0, r0, r2
 80017c6:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118
 80017ca:	eb61 0303 	sbc.w	r3, r1, r3
 80017ce:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80017d2:	4b8e      	ldr	r3, [pc, #568]	@ (8001a0c <Set_Random_Motion_Values+0xc90>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	461a      	mov	r2, r3
 80017d8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80017dc:	4413      	add	r3, r2
 80017de:	461a      	mov	r2, r3
 80017e0:	4b8a      	ldr	r3, [pc, #552]	@ (8001a0c <Set_Random_Motion_Values+0xc90>)
 80017e2:	609a      	str	r2, [r3, #8]
    g_axes.AXIS_X += -(100 + ((uint64_t)rand()*2*cnt)/RAND_MAX);
 80017e4:	f00a fa6c 	bl	800bcc0 <rand>
 80017e8:	4603      	mov	r3, r0
 80017ea:	17da      	asrs	r2, r3, #31
 80017ec:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 80017f0:	f8c7 21ec 	str.w	r2, [r7, #492]	@ 0x1ec
 80017f4:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 80017f8:	2200      	movs	r2, #0
 80017fa:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80017fe:	f8c7 21e4 	str.w	r2, [r7, #484]	@ 0x1e4
 8001802:	e9d7 457a 	ldrd	r4, r5, [r7, #488]	@ 0x1e8
 8001806:	462b      	mov	r3, r5
 8001808:	e9d7 8978 	ldrd	r8, r9, [r7, #480]	@ 0x1e0
 800180c:	4642      	mov	r2, r8
 800180e:	fb02 f203 	mul.w	r2, r2, r3
 8001812:	464b      	mov	r3, r9
 8001814:	4621      	mov	r1, r4
 8001816:	fb01 f303 	mul.w	r3, r1, r3
 800181a:	4413      	add	r3, r2
 800181c:	4622      	mov	r2, r4
 800181e:	4641      	mov	r1, r8
 8001820:	fba2 1201 	umull	r1, r2, r2, r1
 8001824:	f8c7 2374 	str.w	r2, [r7, #884]	@ 0x374
 8001828:	460a      	mov	r2, r1
 800182a:	f8c7 2370 	str.w	r2, [r7, #880]	@ 0x370
 800182e:	f8d7 2374 	ldr.w	r2, [r7, #884]	@ 0x374
 8001832:	4413      	add	r3, r2
 8001834:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374
 8001838:	e9d7 12dc 	ldrd	r1, r2, [r7, #880]	@ 0x370
 800183c:	460b      	mov	r3, r1
 800183e:	18db      	adds	r3, r3, r3
 8001840:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001842:	4613      	mov	r3, r2
 8001844:	eb42 0303 	adc.w	r3, r2, r3
 8001848:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800184a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800184e:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001852:	f04f 0300 	mov.w	r3, #0
 8001856:	f7fe ff1f 	bl	8000698 <__aeabi_uldivmod>
 800185a:	4602      	mov	r2, r0
 800185c:	460b      	mov	r3, r1
 800185e:	f06f 0063 	mvn.w	r0, #99	@ 0x63
 8001862:	f04f 31ff 	mov.w	r1, #4294967295
 8001866:	1a80      	subs	r0, r0, r2
 8001868:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
 800186c:	eb61 0303 	sbc.w	r3, r1, r3
 8001870:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8001874:	4b66      	ldr	r3, [pc, #408]	@ (8001a10 <Set_Random_Motion_Values+0xc94>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	461a      	mov	r2, r3
 800187a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800187e:	4413      	add	r3, r2
 8001880:	461a      	mov	r2, r3
 8001882:	4b63      	ldr	r3, [pc, #396]	@ (8001a10 <Set_Random_Motion_Values+0xc94>)
 8001884:	601a      	str	r2, [r3, #0]
    g_axes.AXIS_Y +=  (100 + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 8001886:	f00a fa1b 	bl	800bcc0 <rand>
 800188a:	4603      	mov	r3, r0
 800188c:	17da      	asrs	r2, r3, #31
 800188e:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 8001892:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8001896:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 800189a:	2200      	movs	r2, #0
 800189c:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 80018a0:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
 80018a4:	e9d7 4576 	ldrd	r4, r5, [r7, #472]	@ 0x1d8
 80018a8:	462b      	mov	r3, r5
 80018aa:	e9d7 8974 	ldrd	r8, r9, [r7, #464]	@ 0x1d0
 80018ae:	4642      	mov	r2, r8
 80018b0:	fb02 f203 	mul.w	r2, r2, r3
 80018b4:	464b      	mov	r3, r9
 80018b6:	4621      	mov	r1, r4
 80018b8:	fb01 f303 	mul.w	r3, r1, r3
 80018bc:	4413      	add	r3, r2
 80018be:	4622      	mov	r2, r4
 80018c0:	4641      	mov	r1, r8
 80018c2:	fba2 1201 	umull	r1, r2, r2, r1
 80018c6:	f8c7 236c 	str.w	r2, [r7, #876]	@ 0x36c
 80018ca:	460a      	mov	r2, r1
 80018cc:	f8c7 2368 	str.w	r2, [r7, #872]	@ 0x368
 80018d0:	f8d7 236c 	ldr.w	r2, [r7, #876]	@ 0x36c
 80018d4:	4413      	add	r3, r2
 80018d6:	f8c7 336c 	str.w	r3, [r7, #876]	@ 0x36c
 80018da:	f04f 0000 	mov.w	r0, #0
 80018de:	f04f 0100 	mov.w	r1, #0
 80018e2:	e9d7 45da 	ldrd	r4, r5, [r7, #872]	@ 0x368
 80018e6:	462b      	mov	r3, r5
 80018e8:	0099      	lsls	r1, r3, #2
 80018ea:	4623      	mov	r3, r4
 80018ec:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 80018f0:	4623      	mov	r3, r4
 80018f2:	0098      	lsls	r0, r3, #2
 80018f4:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80018f8:	f04f 0300 	mov.w	r3, #0
 80018fc:	f7fe fecc 	bl	8000698 <__aeabi_uldivmod>
 8001900:	4602      	mov	r2, r0
 8001902:	460b      	mov	r3, r1
 8001904:	f112 0164 	adds.w	r1, r2, #100	@ 0x64
 8001908:	f8c7 1108 	str.w	r1, [r7, #264]	@ 0x108
 800190c:	f143 0300 	adc.w	r3, r3, #0
 8001910:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8001914:	4b3e      	ldr	r3, [pc, #248]	@ (8001a10 <Set_Random_Motion_Values+0xc94>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	461a      	mov	r2, r3
 800191a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800191e:	4413      	add	r3, r2
 8001920:	461a      	mov	r2, r3
 8001922:	4b3b      	ldr	r3, [pc, #236]	@ (8001a10 <Set_Random_Motion_Values+0xc94>)
 8001924:	605a      	str	r2, [r3, #4]
    g_axes.AXIS_Z += -(100 + ((uint64_t)rand()*6*cnt)/RAND_MAX);
 8001926:	f00a f9cb 	bl	800bcc0 <rand>
 800192a:	4603      	mov	r3, r0
 800192c:	17da      	asrs	r2, r3, #31
 800192e:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8001932:	f8c7 21cc 	str.w	r2, [r7, #460]	@ 0x1cc
 8001936:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 800193a:	2200      	movs	r2, #0
 800193c:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001940:	f8c7 21c4 	str.w	r2, [r7, #452]	@ 0x1c4
 8001944:	e9d7 4572 	ldrd	r4, r5, [r7, #456]	@ 0x1c8
 8001948:	462b      	mov	r3, r5
 800194a:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	@ 0x1c0
 800194e:	4642      	mov	r2, r8
 8001950:	fb02 f203 	mul.w	r2, r2, r3
 8001954:	464b      	mov	r3, r9
 8001956:	4621      	mov	r1, r4
 8001958:	fb01 f303 	mul.w	r3, r1, r3
 800195c:	4413      	add	r3, r2
 800195e:	4622      	mov	r2, r4
 8001960:	4641      	mov	r1, r8
 8001962:	fba2 1201 	umull	r1, r2, r2, r1
 8001966:	f8c7 2364 	str.w	r2, [r7, #868]	@ 0x364
 800196a:	460a      	mov	r2, r1
 800196c:	f8c7 2360 	str.w	r2, [r7, #864]	@ 0x360
 8001970:	f8d7 2364 	ldr.w	r2, [r7, #868]	@ 0x364
 8001974:	4413      	add	r3, r2
 8001976:	f8c7 3364 	str.w	r3, [r7, #868]	@ 0x364
 800197a:	e9d7 45d8 	ldrd	r4, r5, [r7, #864]	@ 0x360
 800197e:	4622      	mov	r2, r4
 8001980:	462b      	mov	r3, r5
 8001982:	1891      	adds	r1, r2, r2
 8001984:	6239      	str	r1, [r7, #32]
 8001986:	415b      	adcs	r3, r3
 8001988:	627b      	str	r3, [r7, #36]	@ 0x24
 800198a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800198e:	4621      	mov	r1, r4
 8001990:	1851      	adds	r1, r2, r1
 8001992:	61b9      	str	r1, [r7, #24]
 8001994:	4629      	mov	r1, r5
 8001996:	eb43 0101 	adc.w	r1, r3, r1
 800199a:	61f9      	str	r1, [r7, #28]
 800199c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80019a0:	460b      	mov	r3, r1
 80019a2:	18db      	adds	r3, r3, r3
 80019a4:	613b      	str	r3, [r7, #16]
 80019a6:	4613      	mov	r3, r2
 80019a8:	eb42 0303 	adc.w	r3, r2, r3
 80019ac:	617b      	str	r3, [r7, #20]
 80019ae:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80019b2:	4618      	mov	r0, r3
 80019b4:	4621      	mov	r1, r4
 80019b6:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80019ba:	f04f 0300 	mov.w	r3, #0
 80019be:	f7fe fe6b 	bl	8000698 <__aeabi_uldivmod>
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
 80019c6:	f06f 0063 	mvn.w	r0, #99	@ 0x63
 80019ca:	f04f 31ff 	mov.w	r1, #4294967295
 80019ce:	1a80      	subs	r0, r0, r2
 80019d0:	f8c7 0100 	str.w	r0, [r7, #256]	@ 0x100
 80019d4:	eb61 0303 	sbc.w	r3, r1, r3
 80019d8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80019dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001a10 <Set_Random_Motion_Values+0xc94>)
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	461a      	mov	r2, r3
 80019e2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80019e6:	4413      	add	r3, r2
 80019e8:	461a      	mov	r2, r3
 80019ea:	4b09      	ldr	r3, [pc, #36]	@ (8001a10 <Set_Random_Motion_Values+0xc94>)
 80019ec:	609a      	str	r2, [r3, #8]
    m_axes.AXIS_X += -(3  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 80019ee:	f00a f967 	bl	800bcc0 <rand>
 80019f2:	4603      	mov	r3, r0
 80019f4:	17da      	asrs	r2, r3, #31
 80019f6:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 80019fa:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 80019fe:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001a02:	2200      	movs	r2, #0
 8001a04:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 8001a08:	e004      	b.n	8001a14 <Set_Random_Motion_Values+0xc98>
 8001a0a:	bf00      	nop
 8001a0c:	20000118 	.word	0x20000118
 8001a10:	20000124 	.word	0x20000124
 8001a14:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 8001a18:	e9d7 456e 	ldrd	r4, r5, [r7, #440]	@ 0x1b8
 8001a1c:	462b      	mov	r3, r5
 8001a1e:	e9d7 896c 	ldrd	r8, r9, [r7, #432]	@ 0x1b0
 8001a22:	4642      	mov	r2, r8
 8001a24:	fb02 f203 	mul.w	r2, r2, r3
 8001a28:	464b      	mov	r3, r9
 8001a2a:	4621      	mov	r1, r4
 8001a2c:	fb01 f303 	mul.w	r3, r1, r3
 8001a30:	4413      	add	r3, r2
 8001a32:	4622      	mov	r2, r4
 8001a34:	4641      	mov	r1, r8
 8001a36:	fba2 1201 	umull	r1, r2, r2, r1
 8001a3a:	f8c7 235c 	str.w	r2, [r7, #860]	@ 0x35c
 8001a3e:	460a      	mov	r2, r1
 8001a40:	f8c7 2358 	str.w	r2, [r7, #856]	@ 0x358
 8001a44:	f8d7 235c 	ldr.w	r2, [r7, #860]	@ 0x35c
 8001a48:	4413      	add	r3, r2
 8001a4a:	f8c7 335c 	str.w	r3, [r7, #860]	@ 0x35c
 8001a4e:	e9d7 45d6 	ldrd	r4, r5, [r7, #856]	@ 0x358
 8001a52:	4622      	mov	r2, r4
 8001a54:	462b      	mov	r3, r5
 8001a56:	f04f 0000 	mov.w	r0, #0
 8001a5a:	f04f 0100 	mov.w	r1, #0
 8001a5e:	00d9      	lsls	r1, r3, #3
 8001a60:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001a64:	00d0      	lsls	r0, r2, #3
 8001a66:	4602      	mov	r2, r0
 8001a68:	460b      	mov	r3, r1
 8001a6a:	4621      	mov	r1, r4
 8001a6c:	1a51      	subs	r1, r2, r1
 8001a6e:	f8c7 11a8 	str.w	r1, [r7, #424]	@ 0x1a8
 8001a72:	4629      	mov	r1, r5
 8001a74:	eb63 0301 	sbc.w	r3, r3, r1
 8001a78:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 8001a7c:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001a80:	f04f 0300 	mov.w	r3, #0
 8001a84:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	@ 0x1a8
 8001a88:	f7fe fe06 	bl	8000698 <__aeabi_uldivmod>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	460b      	mov	r3, r1
 8001a90:	f06f 0002 	mvn.w	r0, #2
 8001a94:	f04f 31ff 	mov.w	r1, #4294967295
 8001a98:	1a80      	subs	r0, r0, r2
 8001a9a:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
 8001a9e:	eb61 0303 	sbc.w	r3, r1, r3
 8001aa2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001aa6:	4bea      	ldr	r3, [pc, #936]	@ (8001e50 <Set_Random_Motion_Values+0x10d4>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	461a      	mov	r2, r3
 8001aac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001ab0:	4413      	add	r3, r2
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	4be6      	ldr	r3, [pc, #920]	@ (8001e50 <Set_Random_Motion_Values+0x10d4>)
 8001ab6:	601a      	str	r2, [r3, #0]
    m_axes.AXIS_Y +=  (3  + ((uint64_t)rand()*9*cnt)/RAND_MAX);
 8001ab8:	f00a f902 	bl	800bcc0 <rand>
 8001abc:	4603      	mov	r3, r0
 8001abe:	17da      	asrs	r2, r3, #31
 8001ac0:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001ac4:	f8c7 21a4 	str.w	r2, [r7, #420]	@ 0x1a4
 8001ac8:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001acc:	2200      	movs	r2, #0
 8001ace:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 8001ad2:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8001ad6:	e9d7 4568 	ldrd	r4, r5, [r7, #416]	@ 0x1a0
 8001ada:	462b      	mov	r3, r5
 8001adc:	e9d7 8966 	ldrd	r8, r9, [r7, #408]	@ 0x198
 8001ae0:	4642      	mov	r2, r8
 8001ae2:	fb02 f203 	mul.w	r2, r2, r3
 8001ae6:	464b      	mov	r3, r9
 8001ae8:	4621      	mov	r1, r4
 8001aea:	fb01 f303 	mul.w	r3, r1, r3
 8001aee:	4413      	add	r3, r2
 8001af0:	4622      	mov	r2, r4
 8001af2:	4641      	mov	r1, r8
 8001af4:	fba2 1201 	umull	r1, r2, r2, r1
 8001af8:	f8c7 2354 	str.w	r2, [r7, #852]	@ 0x354
 8001afc:	460a      	mov	r2, r1
 8001afe:	f8c7 2350 	str.w	r2, [r7, #848]	@ 0x350
 8001b02:	f8d7 2354 	ldr.w	r2, [r7, #852]	@ 0x354
 8001b06:	4413      	add	r3, r2
 8001b08:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8001b0c:	e9d7 45d4 	ldrd	r4, r5, [r7, #848]	@ 0x350
 8001b10:	4622      	mov	r2, r4
 8001b12:	462b      	mov	r3, r5
 8001b14:	f04f 0000 	mov.w	r0, #0
 8001b18:	f04f 0100 	mov.w	r1, #0
 8001b1c:	00d9      	lsls	r1, r3, #3
 8001b1e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001b22:	00d0      	lsls	r0, r2, #3
 8001b24:	4602      	mov	r2, r0
 8001b26:	460b      	mov	r3, r1
 8001b28:	4621      	mov	r1, r4
 8001b2a:	1851      	adds	r1, r2, r1
 8001b2c:	f8c7 1190 	str.w	r1, [r7, #400]	@ 0x190
 8001b30:	4629      	mov	r1, r5
 8001b32:	eb43 0101 	adc.w	r1, r3, r1
 8001b36:	f8c7 1194 	str.w	r1, [r7, #404]	@ 0x194
 8001b3a:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001b3e:	f04f 0300 	mov.w	r3, #0
 8001b42:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8001b46:	f7fe fda7 	bl	8000698 <__aeabi_uldivmod>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	1cd1      	adds	r1, r2, #3
 8001b50:	f8c7 10f0 	str.w	r1, [r7, #240]	@ 0xf0
 8001b54:	f143 0300 	adc.w	r3, r3, #0
 8001b58:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001b5c:	4bbc      	ldr	r3, [pc, #752]	@ (8001e50 <Set_Random_Motion_Values+0x10d4>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	461a      	mov	r2, r3
 8001b62:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8001b66:	4413      	add	r3, r2
 8001b68:	461a      	mov	r2, r3
 8001b6a:	4bb9      	ldr	r3, [pc, #740]	@ (8001e50 <Set_Random_Motion_Values+0x10d4>)
 8001b6c:	605a      	str	r2, [r3, #4]
    m_axes.AXIS_Z += -(3  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8001b6e:	f00a f8a7 	bl	800bcc0 <rand>
 8001b72:	4603      	mov	r3, r0
 8001b74:	17da      	asrs	r2, r3, #31
 8001b76:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8001b7a:	f8c7 218c 	str.w	r2, [r7, #396]	@ 0x18c
 8001b7e:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001b82:	2200      	movs	r2, #0
 8001b84:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001b88:	f8c7 2184 	str.w	r2, [r7, #388]	@ 0x184
 8001b8c:	e9d7 4562 	ldrd	r4, r5, [r7, #392]	@ 0x188
 8001b90:	462b      	mov	r3, r5
 8001b92:	e9d7 8960 	ldrd	r8, r9, [r7, #384]	@ 0x180
 8001b96:	4642      	mov	r2, r8
 8001b98:	fb02 f203 	mul.w	r2, r2, r3
 8001b9c:	464b      	mov	r3, r9
 8001b9e:	4621      	mov	r1, r4
 8001ba0:	fb01 f303 	mul.w	r3, r1, r3
 8001ba4:	4413      	add	r3, r2
 8001ba6:	4622      	mov	r2, r4
 8001ba8:	4641      	mov	r1, r8
 8001baa:	fba2 1201 	umull	r1, r2, r2, r1
 8001bae:	f8c7 234c 	str.w	r2, [r7, #844]	@ 0x34c
 8001bb2:	460a      	mov	r2, r1
 8001bb4:	f8c7 2348 	str.w	r2, [r7, #840]	@ 0x348
 8001bb8:	f8d7 234c 	ldr.w	r2, [r7, #844]	@ 0x34c
 8001bbc:	4413      	add	r3, r2
 8001bbe:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
 8001bc2:	e9d7 45d2 	ldrd	r4, r5, [r7, #840]	@ 0x348
 8001bc6:	4622      	mov	r2, r4
 8001bc8:	462b      	mov	r3, r5
 8001bca:	1891      	adds	r1, r2, r2
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	415b      	adcs	r3, r3
 8001bd0:	60fb      	str	r3, [r7, #12]
 8001bd2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001bd6:	4621      	mov	r1, r4
 8001bd8:	1851      	adds	r1, r2, r1
 8001bda:	f8c7 1178 	str.w	r1, [r7, #376]	@ 0x178
 8001bde:	4629      	mov	r1, r5
 8001be0:	eb43 0101 	adc.w	r1, r3, r1
 8001be4:	f8c7 117c 	str.w	r1, [r7, #380]	@ 0x17c
 8001be8:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001bec:	f04f 0300 	mov.w	r3, #0
 8001bf0:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	@ 0x178
 8001bf4:	f7fe fd50 	bl	8000698 <__aeabi_uldivmod>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	f06f 0002 	mvn.w	r0, #2
 8001c00:	f04f 31ff 	mov.w	r1, #4294967295
 8001c04:	1a80      	subs	r0, r0, r2
 8001c06:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
 8001c0a:	eb61 0303 	sbc.w	r3, r1, r3
 8001c0e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001c12:	4b8f      	ldr	r3, [pc, #572]	@ (8001e50 <Set_Random_Motion_Values+0x10d4>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	461a      	mov	r2, r3
 8001c18:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8001c1c:	4413      	add	r3, r2
 8001c1e:	461a      	mov	r2, r3
 8001c20:	4b8b      	ldr	r3, [pc, #556]	@ (8001e50 <Set_Random_Motion_Values+0x10d4>)
 8001c22:	609a      	str	r2, [r3, #8]
    q_axes.AXIS_X += (200 + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8001c24:	f00a f84c 	bl	800bcc0 <rand>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	17da      	asrs	r2, r3, #31
 8001c2c:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8001c30:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
 8001c34:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8001c3e:	f8c7 216c 	str.w	r2, [r7, #364]	@ 0x16c
 8001c42:	e9d7 455c 	ldrd	r4, r5, [r7, #368]	@ 0x170
 8001c46:	462b      	mov	r3, r5
 8001c48:	e9d7 895a 	ldrd	r8, r9, [r7, #360]	@ 0x168
 8001c4c:	4642      	mov	r2, r8
 8001c4e:	fb02 f203 	mul.w	r2, r2, r3
 8001c52:	464b      	mov	r3, r9
 8001c54:	4621      	mov	r1, r4
 8001c56:	fb01 f303 	mul.w	r3, r1, r3
 8001c5a:	4413      	add	r3, r2
 8001c5c:	4622      	mov	r2, r4
 8001c5e:	4641      	mov	r1, r8
 8001c60:	fba2 1201 	umull	r1, r2, r2, r1
 8001c64:	f8c7 2344 	str.w	r2, [r7, #836]	@ 0x344
 8001c68:	460a      	mov	r2, r1
 8001c6a:	f8c7 2340 	str.w	r2, [r7, #832]	@ 0x340
 8001c6e:	f8d7 2344 	ldr.w	r2, [r7, #836]	@ 0x344
 8001c72:	4413      	add	r3, r2
 8001c74:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
 8001c78:	e9d7 45d0 	ldrd	r4, r5, [r7, #832]	@ 0x340
 8001c7c:	4622      	mov	r2, r4
 8001c7e:	462b      	mov	r3, r5
 8001c80:	f04f 0000 	mov.w	r0, #0
 8001c84:	f04f 0100 	mov.w	r1, #0
 8001c88:	00d9      	lsls	r1, r3, #3
 8001c8a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001c8e:	00d0      	lsls	r0, r2, #3
 8001c90:	4602      	mov	r2, r0
 8001c92:	460b      	mov	r3, r1
 8001c94:	4621      	mov	r1, r4
 8001c96:	1a51      	subs	r1, r2, r1
 8001c98:	f8c7 1160 	str.w	r1, [r7, #352]	@ 0x160
 8001c9c:	4629      	mov	r1, r5
 8001c9e:	eb63 0301 	sbc.w	r3, r3, r1
 8001ca2:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8001ca6:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001caa:	f04f 0300 	mov.w	r3, #0
 8001cae:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	@ 0x160
 8001cb2:	f7fe fcf1 	bl	8000698 <__aeabi_uldivmod>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	460b      	mov	r3, r1
 8001cba:	f112 01c8 	adds.w	r1, r2, #200	@ 0xc8
 8001cbe:	f8c7 10e0 	str.w	r1, [r7, #224]	@ 0xe0
 8001cc2:	f143 0300 	adc.w	r3, r3, #0
 8001cc6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001cca:	4b62      	ldr	r3, [pc, #392]	@ (8001e54 <Set_Random_Motion_Values+0x10d8>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	461a      	mov	r2, r3
 8001cd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001cd4:	4413      	add	r3, r2
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	4b5e      	ldr	r3, [pc, #376]	@ (8001e54 <Set_Random_Motion_Values+0x10d8>)
 8001cda:	601a      	str	r2, [r3, #0]
    q_axes.AXIS_Y -= (150 + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8001cdc:	f009 fff0 	bl	800bcc0 <rand>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	17da      	asrs	r2, r3, #31
 8001ce4:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8001ce8:	f8c7 215c 	str.w	r2, [r7, #348]	@ 0x15c
 8001cec:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001cf6:	f8c7 2154 	str.w	r2, [r7, #340]	@ 0x154
 8001cfa:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	@ 0x158
 8001cfe:	462b      	mov	r3, r5
 8001d00:	e9d7 8954 	ldrd	r8, r9, [r7, #336]	@ 0x150
 8001d04:	4642      	mov	r2, r8
 8001d06:	fb02 f203 	mul.w	r2, r2, r3
 8001d0a:	464b      	mov	r3, r9
 8001d0c:	4621      	mov	r1, r4
 8001d0e:	fb01 f303 	mul.w	r3, r1, r3
 8001d12:	4413      	add	r3, r2
 8001d14:	4622      	mov	r2, r4
 8001d16:	4641      	mov	r1, r8
 8001d18:	fba2 1201 	umull	r1, r2, r2, r1
 8001d1c:	f8c7 233c 	str.w	r2, [r7, #828]	@ 0x33c
 8001d20:	460a      	mov	r2, r1
 8001d22:	f8c7 2338 	str.w	r2, [r7, #824]	@ 0x338
 8001d26:	f8d7 233c 	ldr.w	r2, [r7, #828]	@ 0x33c
 8001d2a:	4413      	add	r3, r2
 8001d2c:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 8001d30:	e9d7 45ce 	ldrd	r4, r5, [r7, #824]	@ 0x338
 8001d34:	4622      	mov	r2, r4
 8001d36:	462b      	mov	r3, r5
 8001d38:	1891      	adds	r1, r2, r2
 8001d3a:	6039      	str	r1, [r7, #0]
 8001d3c:	415b      	adcs	r3, r3
 8001d3e:	607b      	str	r3, [r7, #4]
 8001d40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d44:	4621      	mov	r1, r4
 8001d46:	1851      	adds	r1, r2, r1
 8001d48:	f8c7 1148 	str.w	r1, [r7, #328]	@ 0x148
 8001d4c:	4629      	mov	r1, r5
 8001d4e:	eb43 0101 	adc.w	r1, r3, r1
 8001d52:	f8c7 114c 	str.w	r1, [r7, #332]	@ 0x14c
 8001d56:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001d5a:	f04f 0300 	mov.w	r3, #0
 8001d5e:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 8001d62:	f7fe fc99 	bl	8000698 <__aeabi_uldivmod>
 8001d66:	4602      	mov	r2, r0
 8001d68:	460b      	mov	r3, r1
 8001d6a:	f112 0196 	adds.w	r1, r2, #150	@ 0x96
 8001d6e:	f8c7 10d8 	str.w	r1, [r7, #216]	@ 0xd8
 8001d72:	f143 0300 	adc.w	r3, r3, #0
 8001d76:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001d7a:	4b36      	ldr	r3, [pc, #216]	@ (8001e54 <Set_Random_Motion_Values+0x10d8>)
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	461a      	mov	r2, r3
 8001d80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	461a      	mov	r2, r3
 8001d88:	4b32      	ldr	r3, [pc, #200]	@ (8001e54 <Set_Random_Motion_Values+0x10d8>)
 8001d8a:	605a      	str	r2, [r3, #4]
    q_axes.AXIS_Z += (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 8001d8c:	f009 ff98 	bl	800bcc0 <rand>
 8001d90:	4603      	mov	r3, r0
 8001d92:	17da      	asrs	r2, r3, #31
 8001d94:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8001d98:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
 8001d9c:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001da0:	2200      	movs	r2, #0
 8001da2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8001da6:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 8001daa:	e9d7 4550 	ldrd	r4, r5, [r7, #320]	@ 0x140
 8001dae:	462b      	mov	r3, r5
 8001db0:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	@ 0x138
 8001db4:	4642      	mov	r2, r8
 8001db6:	fb02 f203 	mul.w	r2, r2, r3
 8001dba:	464b      	mov	r3, r9
 8001dbc:	4621      	mov	r1, r4
 8001dbe:	fb01 f303 	mul.w	r3, r1, r3
 8001dc2:	4413      	add	r3, r2
 8001dc4:	4622      	mov	r2, r4
 8001dc6:	4641      	mov	r1, r8
 8001dc8:	fba2 1201 	umull	r1, r2, r2, r1
 8001dcc:	f8c7 2334 	str.w	r2, [r7, #820]	@ 0x334
 8001dd0:	460a      	mov	r2, r1
 8001dd2:	f8c7 2330 	str.w	r2, [r7, #816]	@ 0x330
 8001dd6:	f8d7 2334 	ldr.w	r2, [r7, #820]	@ 0x334
 8001dda:	4413      	add	r3, r2
 8001ddc:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
 8001de0:	e9d7 45cc 	ldrd	r4, r5, [r7, #816]	@ 0x330
 8001de4:	4622      	mov	r2, r4
 8001de6:	462b      	mov	r3, r5
 8001de8:	f04f 0000 	mov.w	r0, #0
 8001dec:	f04f 0100 	mov.w	r1, #0
 8001df0:	0099      	lsls	r1, r3, #2
 8001df2:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001df6:	0090      	lsls	r0, r2, #2
 8001df8:	4602      	mov	r2, r0
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	4621      	mov	r1, r4
 8001dfe:	1851      	adds	r1, r2, r1
 8001e00:	f8c7 1130 	str.w	r1, [r7, #304]	@ 0x130
 8001e04:	4629      	mov	r1, r5
 8001e06:	eb43 0101 	adc.w	r1, r3, r1
 8001e0a:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 8001e0e:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001e12:	f04f 0300 	mov.w	r3, #0
 8001e16:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	@ 0x130
 8001e1a:	f7fe fc3d 	bl	8000698 <__aeabi_uldivmod>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	460b      	mov	r3, r1
 8001e22:	f112 010a 	adds.w	r1, r2, #10
 8001e26:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 8001e2a:	f143 0300 	adc.w	r3, r3, #0
 8001e2e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001e32:	4b08      	ldr	r3, [pc, #32]	@ (8001e54 <Set_Random_Motion_Values+0x10d8>)
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	461a      	mov	r2, r3
 8001e38:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001e3c:	4413      	add	r3, r2
 8001e3e:	461a      	mov	r2, r3
 8001e40:	4b04      	ldr	r3, [pc, #16]	@ (8001e54 <Set_Random_Motion_Values+0x10d8>)
 8001e42:	609a      	str	r2, [r3, #8]
}
 8001e44:	bf00      	nop
 8001e46:	f507 777a 	add.w	r7, r7, #1000	@ 0x3e8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e50:	20000130 	.word	0x20000130
 8001e54:	2000013c 	.word	0x2000013c

08001e58 <Reset_Motion_Values>:
 * @brief  Reset values for all motion sensor data
 * @param  None
 * @retval None
 */
static void Reset_Motion_Values(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  x_axes.AXIS_X = (x_axes.AXIS_X)%2000 == 0 ? -x_axes.AXIS_X : 10;
 8001e5c:	4b6e      	ldr	r3, [pc, #440]	@ (8002018 <Reset_Motion_Values+0x1c0>)
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	4b6e      	ldr	r3, [pc, #440]	@ (800201c <Reset_Motion_Values+0x1c4>)
 8001e62:	fb83 1302 	smull	r1, r3, r3, r2
 8001e66:	11d9      	asrs	r1, r3, #7
 8001e68:	17d3      	asrs	r3, r2, #31
 8001e6a:	1acb      	subs	r3, r1, r3
 8001e6c:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8001e70:	fb01 f303 	mul.w	r3, r1, r3
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d103      	bne.n	8001e82 <Reset_Motion_Values+0x2a>
 8001e7a:	4b67      	ldr	r3, [pc, #412]	@ (8002018 <Reset_Motion_Values+0x1c0>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	425b      	negs	r3, r3
 8001e80:	e000      	b.n	8001e84 <Reset_Motion_Values+0x2c>
 8001e82:	230a      	movs	r3, #10
 8001e84:	4a64      	ldr	r2, [pc, #400]	@ (8002018 <Reset_Motion_Values+0x1c0>)
 8001e86:	6013      	str	r3, [r2, #0]
  x_axes.AXIS_Y = (x_axes.AXIS_Y)%2000 == 0 ? -x_axes.AXIS_Y : -10;
 8001e88:	4b63      	ldr	r3, [pc, #396]	@ (8002018 <Reset_Motion_Values+0x1c0>)
 8001e8a:	685a      	ldr	r2, [r3, #4]
 8001e8c:	4b63      	ldr	r3, [pc, #396]	@ (800201c <Reset_Motion_Values+0x1c4>)
 8001e8e:	fb83 1302 	smull	r1, r3, r3, r2
 8001e92:	11d9      	asrs	r1, r3, #7
 8001e94:	17d3      	asrs	r3, r2, #31
 8001e96:	1acb      	subs	r3, r1, r3
 8001e98:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8001e9c:	fb01 f303 	mul.w	r3, r1, r3
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d103      	bne.n	8001eae <Reset_Motion_Values+0x56>
 8001ea6:	4b5c      	ldr	r3, [pc, #368]	@ (8002018 <Reset_Motion_Values+0x1c0>)
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	425b      	negs	r3, r3
 8001eac:	e001      	b.n	8001eb2 <Reset_Motion_Values+0x5a>
 8001eae:	f06f 0309 	mvn.w	r3, #9
 8001eb2:	4a59      	ldr	r2, [pc, #356]	@ (8002018 <Reset_Motion_Values+0x1c0>)
 8001eb4:	6053      	str	r3, [r2, #4]
  x_axes.AXIS_Z = (x_axes.AXIS_Z)%2000 == 0 ? -x_axes.AXIS_Z : 10;
 8001eb6:	4b58      	ldr	r3, [pc, #352]	@ (8002018 <Reset_Motion_Values+0x1c0>)
 8001eb8:	689a      	ldr	r2, [r3, #8]
 8001eba:	4b58      	ldr	r3, [pc, #352]	@ (800201c <Reset_Motion_Values+0x1c4>)
 8001ebc:	fb83 1302 	smull	r1, r3, r3, r2
 8001ec0:	11d9      	asrs	r1, r3, #7
 8001ec2:	17d3      	asrs	r3, r2, #31
 8001ec4:	1acb      	subs	r3, r1, r3
 8001ec6:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8001eca:	fb01 f303 	mul.w	r3, r1, r3
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d103      	bne.n	8001edc <Reset_Motion_Values+0x84>
 8001ed4:	4b50      	ldr	r3, [pc, #320]	@ (8002018 <Reset_Motion_Values+0x1c0>)
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	425b      	negs	r3, r3
 8001eda:	e000      	b.n	8001ede <Reset_Motion_Values+0x86>
 8001edc:	230a      	movs	r3, #10
 8001ede:	4a4e      	ldr	r2, [pc, #312]	@ (8002018 <Reset_Motion_Values+0x1c0>)
 8001ee0:	6093      	str	r3, [r2, #8]
  g_axes.AXIS_X = (g_axes.AXIS_X)%2000 == 0 ? -g_axes.AXIS_X : 100;
 8001ee2:	4b4f      	ldr	r3, [pc, #316]	@ (8002020 <Reset_Motion_Values+0x1c8>)
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	4b4d      	ldr	r3, [pc, #308]	@ (800201c <Reset_Motion_Values+0x1c4>)
 8001ee8:	fb83 1302 	smull	r1, r3, r3, r2
 8001eec:	11d9      	asrs	r1, r3, #7
 8001eee:	17d3      	asrs	r3, r2, #31
 8001ef0:	1acb      	subs	r3, r1, r3
 8001ef2:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8001ef6:	fb01 f303 	mul.w	r3, r1, r3
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d103      	bne.n	8001f08 <Reset_Motion_Values+0xb0>
 8001f00:	4b47      	ldr	r3, [pc, #284]	@ (8002020 <Reset_Motion_Values+0x1c8>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	425b      	negs	r3, r3
 8001f06:	e000      	b.n	8001f0a <Reset_Motion_Values+0xb2>
 8001f08:	2364      	movs	r3, #100	@ 0x64
 8001f0a:	4a45      	ldr	r2, [pc, #276]	@ (8002020 <Reset_Motion_Values+0x1c8>)
 8001f0c:	6013      	str	r3, [r2, #0]
  g_axes.AXIS_Y = (g_axes.AXIS_Y)%2000 == 0 ? -g_axes.AXIS_Y : -100;
 8001f0e:	4b44      	ldr	r3, [pc, #272]	@ (8002020 <Reset_Motion_Values+0x1c8>)
 8001f10:	685a      	ldr	r2, [r3, #4]
 8001f12:	4b42      	ldr	r3, [pc, #264]	@ (800201c <Reset_Motion_Values+0x1c4>)
 8001f14:	fb83 1302 	smull	r1, r3, r3, r2
 8001f18:	11d9      	asrs	r1, r3, #7
 8001f1a:	17d3      	asrs	r3, r2, #31
 8001f1c:	1acb      	subs	r3, r1, r3
 8001f1e:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8001f22:	fb01 f303 	mul.w	r3, r1, r3
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d103      	bne.n	8001f34 <Reset_Motion_Values+0xdc>
 8001f2c:	4b3c      	ldr	r3, [pc, #240]	@ (8002020 <Reset_Motion_Values+0x1c8>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	425b      	negs	r3, r3
 8001f32:	e001      	b.n	8001f38 <Reset_Motion_Values+0xe0>
 8001f34:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8001f38:	4a39      	ldr	r2, [pc, #228]	@ (8002020 <Reset_Motion_Values+0x1c8>)
 8001f3a:	6053      	str	r3, [r2, #4]
  g_axes.AXIS_Z = (g_axes.AXIS_Z)%2000 == 0 ? -g_axes.AXIS_Z : 100;
 8001f3c:	4b38      	ldr	r3, [pc, #224]	@ (8002020 <Reset_Motion_Values+0x1c8>)
 8001f3e:	689a      	ldr	r2, [r3, #8]
 8001f40:	4b36      	ldr	r3, [pc, #216]	@ (800201c <Reset_Motion_Values+0x1c4>)
 8001f42:	fb83 1302 	smull	r1, r3, r3, r2
 8001f46:	11d9      	asrs	r1, r3, #7
 8001f48:	17d3      	asrs	r3, r2, #31
 8001f4a:	1acb      	subs	r3, r1, r3
 8001f4c:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8001f50:	fb01 f303 	mul.w	r3, r1, r3
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d103      	bne.n	8001f62 <Reset_Motion_Values+0x10a>
 8001f5a:	4b31      	ldr	r3, [pc, #196]	@ (8002020 <Reset_Motion_Values+0x1c8>)
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	425b      	negs	r3, r3
 8001f60:	e000      	b.n	8001f64 <Reset_Motion_Values+0x10c>
 8001f62:	2364      	movs	r3, #100	@ 0x64
 8001f64:	4a2e      	ldr	r2, [pc, #184]	@ (8002020 <Reset_Motion_Values+0x1c8>)
 8001f66:	6093      	str	r3, [r2, #8]
  m_axes.AXIS_X = (g_axes.AXIS_X)%2000 == 0 ? -m_axes.AXIS_X : 3;
 8001f68:	4b2d      	ldr	r3, [pc, #180]	@ (8002020 <Reset_Motion_Values+0x1c8>)
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	4b2b      	ldr	r3, [pc, #172]	@ (800201c <Reset_Motion_Values+0x1c4>)
 8001f6e:	fb83 1302 	smull	r1, r3, r3, r2
 8001f72:	11d9      	asrs	r1, r3, #7
 8001f74:	17d3      	asrs	r3, r2, #31
 8001f76:	1acb      	subs	r3, r1, r3
 8001f78:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8001f7c:	fb01 f303 	mul.w	r3, r1, r3
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d103      	bne.n	8001f8e <Reset_Motion_Values+0x136>
 8001f86:	4b27      	ldr	r3, [pc, #156]	@ (8002024 <Reset_Motion_Values+0x1cc>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	425b      	negs	r3, r3
 8001f8c:	e000      	b.n	8001f90 <Reset_Motion_Values+0x138>
 8001f8e:	2303      	movs	r3, #3
 8001f90:	4a24      	ldr	r2, [pc, #144]	@ (8002024 <Reset_Motion_Values+0x1cc>)
 8001f92:	6013      	str	r3, [r2, #0]
  m_axes.AXIS_Y = (g_axes.AXIS_Y)%2000 == 0 ? -m_axes.AXIS_Y : -3;
 8001f94:	4b22      	ldr	r3, [pc, #136]	@ (8002020 <Reset_Motion_Values+0x1c8>)
 8001f96:	685a      	ldr	r2, [r3, #4]
 8001f98:	4b20      	ldr	r3, [pc, #128]	@ (800201c <Reset_Motion_Values+0x1c4>)
 8001f9a:	fb83 1302 	smull	r1, r3, r3, r2
 8001f9e:	11d9      	asrs	r1, r3, #7
 8001fa0:	17d3      	asrs	r3, r2, #31
 8001fa2:	1acb      	subs	r3, r1, r3
 8001fa4:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8001fa8:	fb01 f303 	mul.w	r3, r1, r3
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d103      	bne.n	8001fba <Reset_Motion_Values+0x162>
 8001fb2:	4b1c      	ldr	r3, [pc, #112]	@ (8002024 <Reset_Motion_Values+0x1cc>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	425b      	negs	r3, r3
 8001fb8:	e001      	b.n	8001fbe <Reset_Motion_Values+0x166>
 8001fba:	f06f 0302 	mvn.w	r3, #2
 8001fbe:	4a19      	ldr	r2, [pc, #100]	@ (8002024 <Reset_Motion_Values+0x1cc>)
 8001fc0:	6053      	str	r3, [r2, #4]
  m_axes.AXIS_Z = (g_axes.AXIS_Z)%2000 == 0 ? -m_axes.AXIS_Z : 3;
 8001fc2:	4b17      	ldr	r3, [pc, #92]	@ (8002020 <Reset_Motion_Values+0x1c8>)
 8001fc4:	689a      	ldr	r2, [r3, #8]
 8001fc6:	4b15      	ldr	r3, [pc, #84]	@ (800201c <Reset_Motion_Values+0x1c4>)
 8001fc8:	fb83 1302 	smull	r1, r3, r3, r2
 8001fcc:	11d9      	asrs	r1, r3, #7
 8001fce:	17d3      	asrs	r3, r2, #31
 8001fd0:	1acb      	subs	r3, r1, r3
 8001fd2:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8001fd6:	fb01 f303 	mul.w	r3, r1, r3
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d103      	bne.n	8001fe8 <Reset_Motion_Values+0x190>
 8001fe0:	4b10      	ldr	r3, [pc, #64]	@ (8002024 <Reset_Motion_Values+0x1cc>)
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	425b      	negs	r3, r3
 8001fe6:	e000      	b.n	8001fea <Reset_Motion_Values+0x192>
 8001fe8:	2303      	movs	r3, #3
 8001fea:	4a0e      	ldr	r2, [pc, #56]	@ (8002024 <Reset_Motion_Values+0x1cc>)
 8001fec:	6093      	str	r3, [r2, #8]
  q_axes.AXIS_X = -q_axes.AXIS_X;
 8001fee:	4b0e      	ldr	r3, [pc, #56]	@ (8002028 <Reset_Motion_Values+0x1d0>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	425b      	negs	r3, r3
 8001ff4:	4a0c      	ldr	r2, [pc, #48]	@ (8002028 <Reset_Motion_Values+0x1d0>)
 8001ff6:	6013      	str	r3, [r2, #0]
  q_axes.AXIS_Y = -q_axes.AXIS_Y;
 8001ff8:	4b0b      	ldr	r3, [pc, #44]	@ (8002028 <Reset_Motion_Values+0x1d0>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	425b      	negs	r3, r3
 8001ffe:	4a0a      	ldr	r2, [pc, #40]	@ (8002028 <Reset_Motion_Values+0x1d0>)
 8002000:	6053      	str	r3, [r2, #4]
  q_axes.AXIS_Z = -q_axes.AXIS_Z;
 8002002:	4b09      	ldr	r3, [pc, #36]	@ (8002028 <Reset_Motion_Values+0x1d0>)
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	425b      	negs	r3, r3
 8002008:	4a07      	ldr	r2, [pc, #28]	@ (8002028 <Reset_Motion_Values+0x1d0>)
 800200a:	6093      	str	r3, [r2, #8]
}
 800200c:	bf00      	nop
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	20000118 	.word	0x20000118
 800201c:	10624dd3 	.word	0x10624dd3
 8002020:	20000124 	.word	0x20000124
 8002024:	20000130 	.word	0x20000130
 8002028:	2000013c 	.word	0x2000013c

0800202c <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	4603      	mov	r3, r0
 8002034:	71fb      	strb	r3, [r7, #7]
  /* Set the User Button flag */
  user_button_pressed = 1;
 8002036:	4b04      	ldr	r3, [pc, #16]	@ (8002048 <BSP_PB_Callback+0x1c>)
 8002038:	2201      	movs	r2, #1
 800203a:	701a      	strb	r2, [r3, #0]
}
 800203c:	bf00      	nop
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr
 8002048:	200000de 	.word	0x200000de

0800204c <Add_HWServW2ST_Service>:
 * @brief  Add the 'HW' service (and the Environmental and AccGyr characteristics).
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_HWServW2ST_Service(void)
{
 800204c:	b590      	push	{r4, r7, lr}
 800204e:	b08d      	sub	sp, #52	@ 0x34
 8002050:	af06      	add	r7, sp, #24
  tBleStatus ret;
  uint8_t uuid[16];

  /* Add_HWServW2ST_Service */
  COPY_HW_SENS_W2ST_SERVICE_UUID(uuid);
 8002052:	231b      	movs	r3, #27
 8002054:	713b      	strb	r3, [r7, #4]
 8002056:	23c5      	movs	r3, #197	@ 0xc5
 8002058:	717b      	strb	r3, [r7, #5]
 800205a:	23d5      	movs	r3, #213	@ 0xd5
 800205c:	71bb      	strb	r3, [r7, #6]
 800205e:	23a5      	movs	r3, #165	@ 0xa5
 8002060:	71fb      	strb	r3, [r7, #7]
 8002062:	2302      	movs	r3, #2
 8002064:	723b      	strb	r3, [r7, #8]
 8002066:	2300      	movs	r3, #0
 8002068:	727b      	strb	r3, [r7, #9]
 800206a:	23b4      	movs	r3, #180	@ 0xb4
 800206c:	72bb      	strb	r3, [r7, #10]
 800206e:	239a      	movs	r3, #154	@ 0x9a
 8002070:	72fb      	strb	r3, [r7, #11]
 8002072:	23e1      	movs	r3, #225	@ 0xe1
 8002074:	733b      	strb	r3, [r7, #12]
 8002076:	2311      	movs	r3, #17
 8002078:	737b      	strb	r3, [r7, #13]
 800207a:	2301      	movs	r3, #1
 800207c:	73bb      	strb	r3, [r7, #14]
 800207e:	2300      	movs	r3, #0
 8002080:	73fb      	strb	r3, [r7, #15]
 8002082:	2300      	movs	r3, #0
 8002084:	743b      	strb	r3, [r7, #16]
 8002086:	2300      	movs	r3, #0
 8002088:	747b      	strb	r3, [r7, #17]
 800208a:	2300      	movs	r3, #0
 800208c:	74bb      	strb	r3, [r7, #18]
 800208e:	2300      	movs	r3, #0
 8002090:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 8002092:	4b4d      	ldr	r3, [pc, #308]	@ (80021c8 <Add_HWServW2ST_Service+0x17c>)
 8002094:	461c      	mov	r4, r3
 8002096:	1d3b      	adds	r3, r7, #4
 8002098:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800209a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid.Service_UUID_128, PRIMARY_SERVICE,
 800209e:	4b4b      	ldr	r3, [pc, #300]	@ (80021cc <Add_HWServW2ST_Service+0x180>)
 80020a0:	9300      	str	r3, [sp, #0]
 80020a2:	2310      	movs	r3, #16
 80020a4:	2201      	movs	r2, #1
 80020a6:	4948      	ldr	r1, [pc, #288]	@ (80021c8 <Add_HWServW2ST_Service+0x17c>)
 80020a8:	2002      	movs	r0, #2
 80020aa:	f007 fb95 	bl	80097d8 <aci_gatt_add_serv>
 80020ae:	4603      	mov	r3, r0
 80020b0:	75fb      	strb	r3, [r7, #23]
                          1+3*5, &HWServW2STHandle);
  if (ret != BLE_STATUS_SUCCESS)
 80020b2:	7dfb      	ldrb	r3, [r7, #23]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <Add_HWServW2ST_Service+0x70>
    return BLE_STATUS_ERROR;
 80020b8:	2347      	movs	r3, #71	@ 0x47
 80020ba:	e080      	b.n	80021be <Add_HWServW2ST_Service+0x172>

  /* Fill the Environmental BLE Characteristc */
  COPY_ENVIRONMENTAL_W2ST_CHAR_UUID(uuid);
 80020bc:	231b      	movs	r3, #27
 80020be:	713b      	strb	r3, [r7, #4]
 80020c0:	23c5      	movs	r3, #197	@ 0xc5
 80020c2:	717b      	strb	r3, [r7, #5]
 80020c4:	23d5      	movs	r3, #213	@ 0xd5
 80020c6:	71bb      	strb	r3, [r7, #6]
 80020c8:	23a5      	movs	r3, #165	@ 0xa5
 80020ca:	71fb      	strb	r3, [r7, #7]
 80020cc:	2302      	movs	r3, #2
 80020ce:	723b      	strb	r3, [r7, #8]
 80020d0:	2300      	movs	r3, #0
 80020d2:	727b      	strb	r3, [r7, #9]
 80020d4:	2336      	movs	r3, #54	@ 0x36
 80020d6:	72bb      	strb	r3, [r7, #10]
 80020d8:	23ac      	movs	r3, #172	@ 0xac
 80020da:	72fb      	strb	r3, [r7, #11]
 80020dc:	23e1      	movs	r3, #225	@ 0xe1
 80020de:	733b      	strb	r3, [r7, #12]
 80020e0:	2311      	movs	r3, #17
 80020e2:	737b      	strb	r3, [r7, #13]
 80020e4:	2301      	movs	r3, #1
 80020e6:	73bb      	strb	r3, [r7, #14]
 80020e8:	2300      	movs	r3, #0
 80020ea:	73fb      	strb	r3, [r7, #15]
 80020ec:	2300      	movs	r3, #0
 80020ee:	743b      	strb	r3, [r7, #16]
 80020f0:	2300      	movs	r3, #0
 80020f2:	747b      	strb	r3, [r7, #17]
 80020f4:	2300      	movs	r3, #0
 80020f6:	74bb      	strb	r3, [r7, #18]
 80020f8:	2300      	movs	r3, #0
 80020fa:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 80020fc:	4b34      	ldr	r3, [pc, #208]	@ (80021d0 <Add_HWServW2ST_Service+0x184>)
 80020fe:	461c      	mov	r4, r3
 8002100:	1d3b      	adds	r3, r7, #4
 8002102:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002104:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128,
 8002108:	4b30      	ldr	r3, [pc, #192]	@ (80021cc <Add_HWServW2ST_Service+0x180>)
 800210a:	8818      	ldrh	r0, [r3, #0]
 800210c:	4b31      	ldr	r3, [pc, #196]	@ (80021d4 <Add_HWServW2ST_Service+0x188>)
 800210e:	9305      	str	r3, [sp, #20]
 8002110:	2300      	movs	r3, #0
 8002112:	9304      	str	r3, [sp, #16]
 8002114:	2310      	movs	r3, #16
 8002116:	9303      	str	r3, [sp, #12]
 8002118:	2304      	movs	r3, #4
 800211a:	9302      	str	r3, [sp, #8]
 800211c:	2300      	movs	r3, #0
 800211e:	9301      	str	r3, [sp, #4]
 8002120:	2312      	movs	r3, #18
 8002122:	9300      	str	r3, [sp, #0]
 8002124:	2306      	movs	r3, #6
 8002126:	4a2a      	ldr	r2, [pc, #168]	@ (80021d0 <Add_HWServW2ST_Service+0x184>)
 8002128:	2102      	movs	r1, #2
 800212a:	f007 fbde 	bl	80098ea <aci_gatt_add_char>
 800212e:	4603      	mov	r3, r0
 8002130:	75fb      	strb	r3, [r7, #23]
                           6,
                           CHAR_PROP_NOTIFY|CHAR_PROP_READ,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &AccDataCharHandle);
  if (ret != BLE_STATUS_SUCCESS)
 8002132:	7dfb      	ldrb	r3, [r7, #23]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <Add_HWServW2ST_Service+0xf0>
    return BLE_STATUS_ERROR;
 8002138:	2347      	movs	r3, #71	@ 0x47
 800213a:	e040      	b.n	80021be <Add_HWServW2ST_Service+0x172>

  /* Fill the AccGyroMag BLE Characteristc */
  COPY_ACC_GYRO_MAG_W2ST_CHAR_UUID(uuid);
 800213c:	231b      	movs	r3, #27
 800213e:	713b      	strb	r3, [r7, #4]
 8002140:	23c5      	movs	r3, #197	@ 0xc5
 8002142:	717b      	strb	r3, [r7, #5]
 8002144:	23d5      	movs	r3, #213	@ 0xd5
 8002146:	71bb      	strb	r3, [r7, #6]
 8002148:	23a5      	movs	r3, #165	@ 0xa5
 800214a:	71fb      	strb	r3, [r7, #7]
 800214c:	2302      	movs	r3, #2
 800214e:	723b      	strb	r3, [r7, #8]
 8002150:	2300      	movs	r3, #0
 8002152:	727b      	strb	r3, [r7, #9]
 8002154:	2336      	movs	r3, #54	@ 0x36
 8002156:	72bb      	strb	r3, [r7, #10]
 8002158:	23ac      	movs	r3, #172	@ 0xac
 800215a:	72fb      	strb	r3, [r7, #11]
 800215c:	23e1      	movs	r3, #225	@ 0xe1
 800215e:	733b      	strb	r3, [r7, #12]
 8002160:	2311      	movs	r3, #17
 8002162:	737b      	strb	r3, [r7, #13]
 8002164:	2301      	movs	r3, #1
 8002166:	73bb      	strb	r3, [r7, #14]
 8002168:	2300      	movs	r3, #0
 800216a:	73fb      	strb	r3, [r7, #15]
 800216c:	2300      	movs	r3, #0
 800216e:	743b      	strb	r3, [r7, #16]
 8002170:	2300      	movs	r3, #0
 8002172:	747b      	strb	r3, [r7, #17]
 8002174:	23e0      	movs	r3, #224	@ 0xe0
 8002176:	74bb      	strb	r3, [r7, #18]
 8002178:	2300      	movs	r3, #0
 800217a:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 800217c:	4b14      	ldr	r3, [pc, #80]	@ (80021d0 <Add_HWServW2ST_Service+0x184>)
 800217e:	461c      	mov	r4, r3
 8002180:	1d3b      	adds	r3, r7, #4
 8002182:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002184:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128,
 8002188:	4b10      	ldr	r3, [pc, #64]	@ (80021cc <Add_HWServW2ST_Service+0x180>)
 800218a:	8818      	ldrh	r0, [r3, #0]
 800218c:	4b12      	ldr	r3, [pc, #72]	@ (80021d8 <Add_HWServW2ST_Service+0x18c>)
 800218e:	9305      	str	r3, [sp, #20]
 8002190:	2300      	movs	r3, #0
 8002192:	9304      	str	r3, [sp, #16]
 8002194:	2310      	movs	r3, #16
 8002196:	9303      	str	r3, [sp, #12]
 8002198:	2302      	movs	r3, #2
 800219a:	9302      	str	r3, [sp, #8]
 800219c:	2300      	movs	r3, #0
 800219e:	9301      	str	r3, [sp, #4]
 80021a0:	2304      	movs	r3, #4
 80021a2:	9300      	str	r3, [sp, #0]
 80021a4:	2314      	movs	r3, #20
 80021a6:	4a0a      	ldr	r2, [pc, #40]	@ (80021d0 <Add_HWServW2ST_Service+0x184>)
 80021a8:	2102      	movs	r1, #2
 80021aa:	f007 fb9e 	bl	80098ea <aci_gatt_add_char>
 80021ae:	4603      	mov	r3, r0
 80021b0:	75fb      	strb	r3, [r7, #23]
                           2+3*3*2,
						   CHAR_PROP_WRITE_WITHOUT_RESP,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_WRITE_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &AccGyroMagCharHandle);
  if (ret != BLE_STATUS_SUCCESS)
 80021b2:	7dfb      	ldrb	r3, [r7, #23]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <Add_HWServW2ST_Service+0x170>
    return BLE_STATUS_ERROR;
 80021b8:	2347      	movs	r3, #71	@ 0x47
 80021ba:	e000      	b.n	80021be <Add_HWServW2ST_Service+0x172>

  return BLE_STATUS_SUCCESS;
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	371c      	adds	r7, #28
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd90      	pop	{r4, r7, pc}
 80021c6:	bf00      	nop
 80021c8:	200000f0 	.word	0x200000f0
 80021cc:	200000e4 	.word	0x200000e4
 80021d0:	20000100 	.word	0x20000100
 80021d4:	200000ea 	.word	0x200000ea
 80021d8:	200000e8 	.word	0x200000e8

080021dc <Add_SWServW2ST_Service>:
 * @brief  Add the SW Feature service using a vendor specific profile
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_SWServW2ST_Service(void)
{
 80021dc:	b590      	push	{r4, r7, lr}
 80021de:	b08d      	sub	sp, #52	@ 0x34
 80021e0:	af06      	add	r7, sp, #24
  tBleStatus ret;
  int32_t NumberOfRecords=1;
 80021e2:	2301      	movs	r3, #1
 80021e4:	617b      	str	r3, [r7, #20]
  uint8_t uuid[16];

  COPY_SW_SENS_W2ST_SERVICE_UUID(uuid);
 80021e6:	231b      	movs	r3, #27
 80021e8:	703b      	strb	r3, [r7, #0]
 80021ea:	23c5      	movs	r3, #197	@ 0xc5
 80021ec:	707b      	strb	r3, [r7, #1]
 80021ee:	23d5      	movs	r3, #213	@ 0xd5
 80021f0:	70bb      	strb	r3, [r7, #2]
 80021f2:	23a5      	movs	r3, #165	@ 0xa5
 80021f4:	70fb      	strb	r3, [r7, #3]
 80021f6:	2302      	movs	r3, #2
 80021f8:	713b      	strb	r3, [r7, #4]
 80021fa:	2300      	movs	r3, #0
 80021fc:	717b      	strb	r3, [r7, #5]
 80021fe:	23b4      	movs	r3, #180	@ 0xb4
 8002200:	71bb      	strb	r3, [r7, #6]
 8002202:	239a      	movs	r3, #154	@ 0x9a
 8002204:	71fb      	strb	r3, [r7, #7]
 8002206:	23e1      	movs	r3, #225	@ 0xe1
 8002208:	723b      	strb	r3, [r7, #8]
 800220a:	2311      	movs	r3, #17
 800220c:	727b      	strb	r3, [r7, #9]
 800220e:	2302      	movs	r3, #2
 8002210:	72bb      	strb	r3, [r7, #10]
 8002212:	2300      	movs	r3, #0
 8002214:	72fb      	strb	r3, [r7, #11]
 8002216:	2300      	movs	r3, #0
 8002218:	733b      	strb	r3, [r7, #12]
 800221a:	2300      	movs	r3, #0
 800221c:	737b      	strb	r3, [r7, #13]
 800221e:	2300      	movs	r3, #0
 8002220:	73bb      	strb	r3, [r7, #14]
 8002222:	2300      	movs	r3, #0
 8002224:	73fb      	strb	r3, [r7, #15]
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 8002226:	4b31      	ldr	r3, [pc, #196]	@ (80022ec <Add_SWServW2ST_Service+0x110>)
 8002228:	461c      	mov	r4, r3
 800222a:	463b      	mov	r3, r7
 800222c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800222e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid.Service_UUID_128, PRIMARY_SERVICE,
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	b2db      	uxtb	r3, r3
 8002236:	461a      	mov	r2, r3
 8002238:	0052      	lsls	r2, r2, #1
 800223a:	4413      	add	r3, r2
 800223c:	b2db      	uxtb	r3, r3
 800223e:	3301      	adds	r3, #1
 8002240:	b2db      	uxtb	r3, r3
 8002242:	4a2b      	ldr	r2, [pc, #172]	@ (80022f0 <Add_SWServW2ST_Service+0x114>)
 8002244:	9200      	str	r2, [sp, #0]
 8002246:	2201      	movs	r2, #1
 8002248:	4928      	ldr	r1, [pc, #160]	@ (80022ec <Add_SWServW2ST_Service+0x110>)
 800224a:	2002      	movs	r0, #2
 800224c:	f007 fac4 	bl	80097d8 <aci_gatt_add_serv>
 8002250:	4603      	mov	r3, r0
 8002252:	74fb      	strb	r3, [r7, #19]
                          1+3*NumberOfRecords, &SWServW2STHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 8002254:	7cfb      	ldrb	r3, [r7, #19]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d13f      	bne.n	80022da <Add_SWServW2ST_Service+0xfe>
    goto fail;
  }

  COPY_QUATERNIONS_W2ST_CHAR_UUID(uuid);
 800225a:	231b      	movs	r3, #27
 800225c:	703b      	strb	r3, [r7, #0]
 800225e:	23c5      	movs	r3, #197	@ 0xc5
 8002260:	707b      	strb	r3, [r7, #1]
 8002262:	23d5      	movs	r3, #213	@ 0xd5
 8002264:	70bb      	strb	r3, [r7, #2]
 8002266:	23a5      	movs	r3, #165	@ 0xa5
 8002268:	70fb      	strb	r3, [r7, #3]
 800226a:	2302      	movs	r3, #2
 800226c:	713b      	strb	r3, [r7, #4]
 800226e:	2300      	movs	r3, #0
 8002270:	717b      	strb	r3, [r7, #5]
 8002272:	2336      	movs	r3, #54	@ 0x36
 8002274:	71bb      	strb	r3, [r7, #6]
 8002276:	23ac      	movs	r3, #172	@ 0xac
 8002278:	71fb      	strb	r3, [r7, #7]
 800227a:	23e1      	movs	r3, #225	@ 0xe1
 800227c:	723b      	strb	r3, [r7, #8]
 800227e:	2311      	movs	r3, #17
 8002280:	727b      	strb	r3, [r7, #9]
 8002282:	2301      	movs	r3, #1
 8002284:	72bb      	strb	r3, [r7, #10]
 8002286:	2300      	movs	r3, #0
 8002288:	72fb      	strb	r3, [r7, #11]
 800228a:	2300      	movs	r3, #0
 800228c:	733b      	strb	r3, [r7, #12]
 800228e:	2301      	movs	r3, #1
 8002290:	737b      	strb	r3, [r7, #13]
 8002292:	2300      	movs	r3, #0
 8002294:	73bb      	strb	r3, [r7, #14]
 8002296:	2300      	movs	r3, #0
 8002298:	73fb      	strb	r3, [r7, #15]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 800229a:	4b16      	ldr	r3, [pc, #88]	@ (80022f4 <Add_SWServW2ST_Service+0x118>)
 800229c:	461c      	mov	r4, r3
 800229e:	463b      	mov	r3, r7
 80022a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(SWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128,
 80022a6:	4b12      	ldr	r3, [pc, #72]	@ (80022f0 <Add_SWServW2ST_Service+0x114>)
 80022a8:	8818      	ldrh	r0, [r3, #0]
 80022aa:	4b13      	ldr	r3, [pc, #76]	@ (80022f8 <Add_SWServW2ST_Service+0x11c>)
 80022ac:	9305      	str	r3, [sp, #20]
 80022ae:	2300      	movs	r3, #0
 80022b0:	9304      	str	r3, [sp, #16]
 80022b2:	2310      	movs	r3, #16
 80022b4:	9303      	str	r3, [sp, #12]
 80022b6:	2304      	movs	r3, #4
 80022b8:	9302      	str	r3, [sp, #8]
 80022ba:	2300      	movs	r3, #0
 80022bc:	9301      	str	r3, [sp, #4]
 80022be:	2310      	movs	r3, #16
 80022c0:	9300      	str	r3, [sp, #0]
 80022c2:	2308      	movs	r3, #8
 80022c4:	4a0b      	ldr	r2, [pc, #44]	@ (80022f4 <Add_SWServW2ST_Service+0x118>)
 80022c6:	2102      	movs	r1, #2
 80022c8:	f007 fb0f 	bl	80098ea <aci_gatt_add_char>
 80022cc:	4603      	mov	r3, r0
 80022ce:	74fb      	strb	r3, [r7, #19]
                           CHAR_PROP_NOTIFY,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &QuaternionsCharHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 80022d0:	7cfb      	ldrb	r3, [r7, #19]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d103      	bne.n	80022de <Add_SWServW2ST_Service+0x102>
    goto fail;
  }

  return BLE_STATUS_SUCCESS;
 80022d6:	2300      	movs	r3, #0
 80022d8:	e003      	b.n	80022e2 <Add_SWServW2ST_Service+0x106>
    goto fail;
 80022da:	bf00      	nop
 80022dc:	e000      	b.n	80022e0 <Add_SWServW2ST_Service+0x104>
    goto fail;
 80022de:	bf00      	nop

fail:
  return BLE_STATUS_ERROR;
 80022e0:	2347      	movs	r3, #71	@ 0x47
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	371c      	adds	r7, #28
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd90      	pop	{r4, r7, pc}
 80022ea:	bf00      	nop
 80022ec:	200000f0 	.word	0x200000f0
 80022f0:	200000ec 	.word	0x200000ec
 80022f4:	20000100 	.word	0x20000100
 80022f8:	200000ee 	.word	0x200000ee

080022fc <Acc_Update>:
 * @brief  Update acceleration characteristic value
 * @param  AxesRaw_t structure containing acceleration value in mg.
 * @retval tBleStatus Status
 */
tBleStatus Acc_Update(AxesRaw_t *x_axes, AxesRaw_t *g_axes, AxesRaw_t *m_axes)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b08c      	sub	sp, #48	@ 0x30
 8002300:	af02      	add	r7, sp, #8
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	607a      	str	r2, [r7, #4]
  uint8_t buff[2+2*3*3];
  tBleStatus ret;

  HOST_TO_LE_16(buff,(HAL_GetTick()>>3));
 8002308:	f002 fa86 	bl	8004818 <HAL_GetTick>
 800230c:	4603      	mov	r3, r0
 800230e:	08db      	lsrs	r3, r3, #3
 8002310:	b2db      	uxtb	r3, r3
 8002312:	743b      	strb	r3, [r7, #16]
 8002314:	f002 fa80 	bl	8004818 <HAL_GetTick>
 8002318:	4603      	mov	r3, r0
 800231a:	0adb      	lsrs	r3, r3, #11
 800231c:	b2db      	uxtb	r3, r3
 800231e:	747b      	strb	r3, [r7, #17]

  HOST_TO_LE_16(buff+2,-x_axes->AXIS_Y);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	b2db      	uxtb	r3, r3
 8002326:	425b      	negs	r3, r3
 8002328:	b2db      	uxtb	r3, r3
 800232a:	74bb      	strb	r3, [r7, #18]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	425b      	negs	r3, r3
 8002332:	121b      	asrs	r3, r3, #8
 8002334:	b2db      	uxtb	r3, r3
 8002336:	74fb      	strb	r3, [r7, #19]
  HOST_TO_LE_16(buff+4, x_axes->AXIS_X);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	b2db      	uxtb	r3, r3
 800233e:	753b      	strb	r3, [r7, #20]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	121b      	asrs	r3, r3, #8
 8002346:	b2db      	uxtb	r3, r3
 8002348:	757b      	strb	r3, [r7, #21]
  HOST_TO_LE_16(buff+6,-x_axes->AXIS_Z);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	b2db      	uxtb	r3, r3
 8002350:	425b      	negs	r3, r3
 8002352:	b2db      	uxtb	r3, r3
 8002354:	75bb      	strb	r3, [r7, #22]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	425b      	negs	r3, r3
 800235c:	121b      	asrs	r3, r3, #8
 800235e:	b2db      	uxtb	r3, r3
 8002360:	75fb      	strb	r3, [r7, #23]

  HOST_TO_LE_16(buff+8,g_axes->AXIS_Y);
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	b2db      	uxtb	r3, r3
 8002368:	763b      	strb	r3, [r7, #24]
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	121b      	asrs	r3, r3, #8
 8002370:	b2db      	uxtb	r3, r3
 8002372:	767b      	strb	r3, [r7, #25]
  HOST_TO_LE_16(buff+10,g_axes->AXIS_X);
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	b2db      	uxtb	r3, r3
 800237a:	76bb      	strb	r3, [r7, #26]
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	121b      	asrs	r3, r3, #8
 8002382:	b2db      	uxtb	r3, r3
 8002384:	76fb      	strb	r3, [r7, #27]
  HOST_TO_LE_16(buff+12,g_axes->AXIS_Z);
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	b2db      	uxtb	r3, r3
 800238c:	773b      	strb	r3, [r7, #28]
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	121b      	asrs	r3, r3, #8
 8002394:	b2db      	uxtb	r3, r3
 8002396:	777b      	strb	r3, [r7, #29]

  HOST_TO_LE_16(buff+14,m_axes->AXIS_Y);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	b2db      	uxtb	r3, r3
 800239e:	77bb      	strb	r3, [r7, #30]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	121b      	asrs	r3, r3, #8
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	77fb      	strb	r3, [r7, #31]
  HOST_TO_LE_16(buff+16,m_axes->AXIS_X);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	f887 3020 	strb.w	r3, [r7, #32]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	121b      	asrs	r3, r3, #8
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  HOST_TO_LE_16(buff+18,m_axes->AXIS_Z);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	121b      	asrs	r3, r3, #8
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  ret = aci_gatt_update_char_value(HWServW2STHandle, AccGyroMagCharHandle,
 80023d6:	4b0f      	ldr	r3, [pc, #60]	@ (8002414 <Acc_Update+0x118>)
 80023d8:	8818      	ldrh	r0, [r3, #0]
 80023da:	4b0f      	ldr	r3, [pc, #60]	@ (8002418 <Acc_Update+0x11c>)
 80023dc:	8819      	ldrh	r1, [r3, #0]
 80023de:	f107 0310 	add.w	r3, r7, #16
 80023e2:	9300      	str	r3, [sp, #0]
 80023e4:	2314      	movs	r3, #20
 80023e6:	2200      	movs	r2, #0
 80023e8:	f007 fb4a 	bl	8009a80 <aci_gatt_update_char_value>
 80023ec:	4603      	mov	r3, r0
 80023ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				   0, 2+2*3*3, buff);
  if (ret != BLE_STATUS_SUCCESS){
 80023f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d007      	beq.n	800240a <Acc_Update+0x10e>
    PRINTF("Error while updating Acceleration characteristic: 0x%02X\n",ret) ;
 80023fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80023fe:	4619      	mov	r1, r3
 8002400:	4806      	ldr	r0, [pc, #24]	@ (800241c <Acc_Update+0x120>)
 8002402:	f009 fd5d 	bl	800bec0 <iprintf>
    return BLE_STATUS_ERROR ;
 8002406:	2347      	movs	r3, #71	@ 0x47
 8002408:	e000      	b.n	800240c <Acc_Update+0x110>
  }

  return BLE_STATUS_SUCCESS;
 800240a:	2300      	movs	r3, #0
}
 800240c:	4618      	mov	r0, r3
 800240e:	3728      	adds	r7, #40	@ 0x28
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	200000e4 	.word	0x200000e4
 8002418:	200000e8 	.word	0x200000e8
 800241c:	0800d2c8 	.word	0x0800d2c8

08002420 <Sample_rate_Update>:

tBleStatus Sample_rate_Update(uint8_t data)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	4603      	mov	r3, r0
 8002428:	71fb      	strb	r3, [r7, #7]
	sample_rate = data;
 800242a:	4a05      	ldr	r2, [pc, #20]	@ (8002440 <Sample_rate_Update+0x20>)
 800242c:	79fb      	ldrb	r3, [r7, #7]
 800242e:	7013      	strb	r3, [r2, #0]
}
 8002430:	bf00      	nop
 8002432:	4618      	mov	r0, r3
 8002434:	370c      	adds	r7, #12
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	20000002 	.word	0x20000002

08002444 <ACC_DATA_Update>:


tBleStatus ACC_DATA_Update()
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b0a2      	sub	sp, #136	@ 0x88
 8002448:	af02      	add	r7, sp, #8



  int16_t pDataXYZ[3] = {0};
 800244a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800244e:	2200      	movs	r2, #0
 8002450:	601a      	str	r2, [r3, #0]
 8002452:	809a      	strh	r2, [r3, #4]
  char buffer[100];

  BSP_ACCELERO_AccGetXYZ(pDataXYZ);
 8002454:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002458:	4618      	mov	r0, r3
 800245a:	f002 f847 	bl	80044ec <BSP_ACCELERO_AccGetXYZ>
  int x = pDataXYZ[0], y = pDataXYZ[1], z = pDataXYZ[2];
 800245e:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	@ 0x6c
 8002462:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002464:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8002468:	67bb      	str	r3, [r7, #120]	@ 0x78
 800246a:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	@ 0x70
 800246e:	677b      	str	r3, [r7, #116]	@ 0x74
  snprintf(buffer, sizeof(buffer), "X: %d Y: %d Z: %d\n", pDataXYZ[0], pDataXYZ[1], pDataXYZ[2]);
 8002470:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	@ 0x6c
 8002474:	4619      	mov	r1, r3
 8002476:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 800247a:	f9b7 2070 	ldrsh.w	r2, [r7, #112]	@ 0x70
 800247e:	f107 0008 	add.w	r0, r7, #8
 8002482:	9201      	str	r2, [sp, #4]
 8002484:	9300      	str	r3, [sp, #0]
 8002486:	460b      	mov	r3, r1
 8002488:	4a16      	ldr	r2, [pc, #88]	@ (80024e4 <ACC_DATA_Update+0xa0>)
 800248a:	2164      	movs	r1, #100	@ 0x64
 800248c:	f009 fd88 	bl	800bfa0 <sniprintf>
  printf("Data sent: %s", buffer);
 8002490:	f107 0308 	add.w	r3, r7, #8
 8002494:	4619      	mov	r1, r3
 8002496:	4814      	ldr	r0, [pc, #80]	@ (80024e8 <ACC_DATA_Update+0xa4>)
 8002498:	f009 fd12 	bl	800bec0 <iprintf>
  //	  tBleStatus ret;
  uint8_t buff[6];
  HOST_TO_LE_16(buff, x);
 800249c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	703b      	strb	r3, [r7, #0]
 80024a2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80024a4:	121b      	asrs	r3, r3, #8
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	707b      	strb	r3, [r7, #1]

  HOST_TO_LE_16(buff+2,y);
 80024aa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	70bb      	strb	r3, [r7, #2]
 80024b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80024b2:	121b      	asrs	r3, r3, #8
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	70fb      	strb	r3, [r7, #3]
  HOST_TO_LE_16(buff+4,z);
 80024b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	713b      	strb	r3, [r7, #4]
 80024be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80024c0:	121b      	asrs	r3, r3, #8
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	717b      	strb	r3, [r7, #5]

  aci_gatt_update_char_value(HWServW2STHandle, AccDataCharHandle, 0, 6, buff);
 80024c6:	4b09      	ldr	r3, [pc, #36]	@ (80024ec <ACC_DATA_Update+0xa8>)
 80024c8:	8818      	ldrh	r0, [r3, #0]
 80024ca:	4b09      	ldr	r3, [pc, #36]	@ (80024f0 <ACC_DATA_Update+0xac>)
 80024cc:	8819      	ldrh	r1, [r3, #0]
 80024ce:	463b      	mov	r3, r7
 80024d0:	9300      	str	r3, [sp, #0]
 80024d2:	2306      	movs	r3, #6
 80024d4:	2200      	movs	r2, #0
 80024d6:	f007 fad3 	bl	8009a80 <aci_gatt_update_char_value>
}
 80024da:	bf00      	nop
 80024dc:	4618      	mov	r0, r3
 80024de:	3780      	adds	r7, #128	@ 0x80
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	0800d304 	.word	0x0800d304
 80024e8:	0800d318 	.word	0x0800d318
 80024ec:	200000e4 	.word	0x200000e4
 80024f0:	200000ea 	.word	0x200000ea

080024f4 <Quat_Update>:
 * @brief  Update quaternions characteristic value
 * @param  SensorAxes_t *data Structure containing the quaterions
 * @retval tBleStatus      Status
 */
tBleStatus Quat_Update(AxesRaw_t *data)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b088      	sub	sp, #32
 80024f8:	af02      	add	r7, sp, #8
 80024fa:	6078      	str	r0, [r7, #4]
  tBleStatus ret;
  uint8_t buff[2+6*SEND_N_QUATERNIONS];

  HOST_TO_LE_16(buff,(HAL_GetTick()>>3));
 80024fc:	f002 f98c 	bl	8004818 <HAL_GetTick>
 8002500:	4603      	mov	r3, r0
 8002502:	08db      	lsrs	r3, r3, #3
 8002504:	b2db      	uxtb	r3, r3
 8002506:	733b      	strb	r3, [r7, #12]
 8002508:	f002 f986 	bl	8004818 <HAL_GetTick>
 800250c:	4603      	mov	r3, r0
 800250e:	0adb      	lsrs	r3, r3, #11
 8002510:	b2db      	uxtb	r3, r3
 8002512:	737b      	strb	r3, [r7, #13]

#if SEND_N_QUATERNIONS == 1
  HOST_TO_LE_16(buff+2,data[0].AXIS_X);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	b2db      	uxtb	r3, r3
 800251a:	73bb      	strb	r3, [r7, #14]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	121b      	asrs	r3, r3, #8
 8002522:	b2db      	uxtb	r3, r3
 8002524:	73fb      	strb	r3, [r7, #15]
  HOST_TO_LE_16(buff+4,data[0].AXIS_Y);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	b2db      	uxtb	r3, r3
 800252c:	743b      	strb	r3, [r7, #16]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	121b      	asrs	r3, r3, #8
 8002534:	b2db      	uxtb	r3, r3
 8002536:	747b      	strb	r3, [r7, #17]
  HOST_TO_LE_16(buff+6,data[0].AXIS_Z);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	b2db      	uxtb	r3, r3
 800253e:	74bb      	strb	r3, [r7, #18]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	121b      	asrs	r3, r3, #8
 8002546:	b2db      	uxtb	r3, r3
 8002548:	74fb      	strb	r3, [r7, #19]
  HOST_TO_LE_16(buff+18,data[2].AXIS_Z);
#else
#error SEND_N_QUATERNIONS could be only 1,2,3
#endif

  ret = aci_gatt_update_char_value(SWServW2STHandle, QuaternionsCharHandle,
 800254a:	4b0e      	ldr	r3, [pc, #56]	@ (8002584 <Quat_Update+0x90>)
 800254c:	8818      	ldrh	r0, [r3, #0]
 800254e:	4b0e      	ldr	r3, [pc, #56]	@ (8002588 <Quat_Update+0x94>)
 8002550:	8819      	ldrh	r1, [r3, #0]
 8002552:	f107 030c 	add.w	r3, r7, #12
 8002556:	9300      	str	r3, [sp, #0]
 8002558:	2308      	movs	r3, #8
 800255a:	2200      	movs	r2, #0
 800255c:	f007 fa90 	bl	8009a80 <aci_gatt_update_char_value>
 8002560:	4603      	mov	r3, r0
 8002562:	75fb      	strb	r3, [r7, #23]
				   0, 2+6*SEND_N_QUATERNIONS, buff);
  if (ret != BLE_STATUS_SUCCESS){
 8002564:	7dfb      	ldrb	r3, [r7, #23]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d006      	beq.n	8002578 <Quat_Update+0x84>
    PRINTF("Error while updating Sensor Fusion characteristic: 0x%02X\n",ret) ;
 800256a:	7dfb      	ldrb	r3, [r7, #23]
 800256c:	4619      	mov	r1, r3
 800256e:	4807      	ldr	r0, [pc, #28]	@ (800258c <Quat_Update+0x98>)
 8002570:	f009 fca6 	bl	800bec0 <iprintf>
    return BLE_STATUS_ERROR ;
 8002574:	2347      	movs	r3, #71	@ 0x47
 8002576:	e000      	b.n	800257a <Quat_Update+0x86>
  }

  return BLE_STATUS_SUCCESS;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3718      	adds	r7, #24
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	200000ec 	.word	0x200000ec
 8002588:	200000ee 	.word	0x200000ee
 800258c:	0800d328 	.word	0x0800d328

08002590 <Read_Request_CB>:
* Description    : Update the sensor values.
* Input          : Handle of the characteristic to update.
* Return         : None.
*******************************************************************************/
void Read_Request_CB(uint16_t handle)
{
 8002590:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002594:	b08e      	sub	sp, #56	@ 0x38
 8002596:	af00      	add	r7, sp, #0
 8002598:	4603      	mov	r3, r0
 800259a:	84fb      	strh	r3, [r7, #38]	@ 0x26
  tBleStatus ret;

  if(handle == AccGyroMagCharHandle + 1)
 800259c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800259e:	4b5c      	ldr	r3, [pc, #368]	@ (8002710 <Read_Request_CB+0x180>)
 80025a0:	881b      	ldrh	r3, [r3, #0]
 80025a2:	3301      	adds	r3, #1
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d105      	bne.n	80025b4 <Read_Request_CB+0x24>
  {
    Acc_Update(&x_axes, &g_axes, &m_axes);
 80025a8:	4a5a      	ldr	r2, [pc, #360]	@ (8002714 <Read_Request_CB+0x184>)
 80025aa:	495b      	ldr	r1, [pc, #364]	@ (8002718 <Read_Request_CB+0x188>)
 80025ac:	485b      	ldr	r0, [pc, #364]	@ (800271c <Read_Request_CB+0x18c>)
 80025ae:	f7ff fea5 	bl	80022fc <Acc_Update>
 80025b2:	e091      	b.n	80026d8 <Read_Request_CB+0x148>
  }
  else if (handle == EnvironmentalCharHandle + 1)
 80025b4:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80025b6:	4b5a      	ldr	r3, [pc, #360]	@ (8002720 <Read_Request_CB+0x190>)
 80025b8:	881b      	ldrh	r3, [r3, #0]
 80025ba:	3301      	adds	r3, #1
 80025bc:	429a      	cmp	r2, r3
 80025be:	f040 808b 	bne.w	80026d8 <Read_Request_CB+0x148>
  {
    float data_t, data_p;
    data_t = 27.0 + ((uint64_t)rand()*5)/RAND_MAX; //T sensor emulation
 80025c2:	f009 fb7d 	bl	800bcc0 <rand>
 80025c6:	4603      	mov	r3, r0
 80025c8:	17da      	asrs	r2, r3, #31
 80025ca:	61bb      	str	r3, [r7, #24]
 80025cc:	61fa      	str	r2, [r7, #28]
 80025ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025d2:	f04f 0000 	mov.w	r0, #0
 80025d6:	f04f 0100 	mov.w	r1, #0
 80025da:	0099      	lsls	r1, r3, #2
 80025dc:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80025e0:	0090      	lsls	r0, r2, #2
 80025e2:	4602      	mov	r2, r0
 80025e4:	460b      	mov	r3, r1
 80025e6:	69b9      	ldr	r1, [r7, #24]
 80025e8:	1851      	adds	r1, r2, r1
 80025ea:	6139      	str	r1, [r7, #16]
 80025ec:	69f9      	ldr	r1, [r7, #28]
 80025ee:	eb43 0101 	adc.w	r1, r3, r1
 80025f2:	6179      	str	r1, [r7, #20]
 80025f4:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80025f8:	f04f 0300 	mov.w	r3, #0
 80025fc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002600:	f7fe f84a 	bl	8000698 <__aeabi_uldivmod>
 8002604:	4602      	mov	r2, r0
 8002606:	460b      	mov	r3, r1
 8002608:	4610      	mov	r0, r2
 800260a:	4619      	mov	r1, r3
 800260c:	f7fd ffbe 	bl	800058c <__aeabi_ul2d>
 8002610:	f04f 0200 	mov.w	r2, #0
 8002614:	4b43      	ldr	r3, [pc, #268]	@ (8002724 <Read_Request_CB+0x194>)
 8002616:	f7fd fe39 	bl	800028c <__adddf3>
 800261a:	4602      	mov	r2, r0
 800261c:	460b      	mov	r3, r1
 800261e:	4610      	mov	r0, r2
 8002620:	4619      	mov	r1, r3
 8002622:	f7fd ffe9 	bl	80005f8 <__aeabi_d2f>
 8002626:	4603      	mov	r3, r0
 8002628:	637b      	str	r3, [r7, #52]	@ 0x34
    data_p = 1000.0 + ((uint64_t)rand()*100)/RAND_MAX; //P sensor emulation
 800262a:	f009 fb49 	bl	800bcc0 <rand>
 800262e:	4603      	mov	r3, r0
 8002630:	17da      	asrs	r2, r3, #31
 8002632:	4698      	mov	r8, r3
 8002634:	4691      	mov	r9, r2
 8002636:	4642      	mov	r2, r8
 8002638:	464b      	mov	r3, r9
 800263a:	1891      	adds	r1, r2, r2
 800263c:	6039      	str	r1, [r7, #0]
 800263e:	415b      	adcs	r3, r3
 8002640:	607b      	str	r3, [r7, #4]
 8002642:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002646:	eb12 0408 	adds.w	r4, r2, r8
 800264a:	eb43 0509 	adc.w	r5, r3, r9
 800264e:	f04f 0200 	mov.w	r2, #0
 8002652:	f04f 0300 	mov.w	r3, #0
 8002656:	016b      	lsls	r3, r5, #5
 8002658:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 800265c:	0162      	lsls	r2, r4, #5
 800265e:	eb14 0a02 	adds.w	sl, r4, r2
 8002662:	eb45 0b03 	adc.w	fp, r5, r3
 8002666:	eb1a 0308 	adds.w	r3, sl, r8
 800266a:	60bb      	str	r3, [r7, #8]
 800266c:	eb4b 0309 	adc.w	r3, fp, r9
 8002670:	60fb      	str	r3, [r7, #12]
 8002672:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8002676:	f04f 0300 	mov.w	r3, #0
 800267a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800267e:	f7fe f80b 	bl	8000698 <__aeabi_uldivmod>
 8002682:	4602      	mov	r2, r0
 8002684:	460b      	mov	r3, r1
 8002686:	4610      	mov	r0, r2
 8002688:	4619      	mov	r1, r3
 800268a:	f7fd ff7f 	bl	800058c <__aeabi_ul2d>
 800268e:	f04f 0200 	mov.w	r2, #0
 8002692:	4b25      	ldr	r3, [pc, #148]	@ (8002728 <Read_Request_CB+0x198>)
 8002694:	f7fd fdfa 	bl	800028c <__adddf3>
 8002698:	4602      	mov	r2, r0
 800269a:	460b      	mov	r3, r1
 800269c:	4610      	mov	r0, r2
 800269e:	4619      	mov	r1, r3
 80026a0:	f7fd ffaa 	bl	80005f8 <__aeabi_d2f>
 80026a4:	4603      	mov	r3, r0
 80026a6:	633b      	str	r3, [r7, #48]	@ 0x30
    BlueMS_Environmental_Update((int32_t)(data_p *100), (int16_t)(data_t * 10));
 80026a8:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80026ac:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 800272c <Read_Request_CB+0x19c>
 80026b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026b4:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 80026b8:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80026bc:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80026c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026c8:	ee17 3a90 	vmov	r3, s15
 80026cc:	b21b      	sxth	r3, r3
 80026ce:	4619      	mov	r1, r3
 80026d0:	ee16 0a90 	vmov	r0, s13
 80026d4:	f000 f830 	bl	8002738 <BlueMS_Environmental_Update>
  }

  if(connection_handle !=0)
 80026d8:	4b15      	ldr	r3, [pc, #84]	@ (8002730 <Read_Request_CB+0x1a0>)
 80026da:	881b      	ldrh	r3, [r3, #0]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d011      	beq.n	8002704 <Read_Request_CB+0x174>
  {
    ret = aci_gatt_allow_read(connection_handle);
 80026e0:	4b13      	ldr	r3, [pc, #76]	@ (8002730 <Read_Request_CB+0x1a0>)
 80026e2:	881b      	ldrh	r3, [r3, #0]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f007 fafb 	bl	8009ce0 <aci_gatt_allow_read>
 80026ea:	4603      	mov	r3, r0
 80026ec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (ret != BLE_STATUS_SUCCESS)
 80026f0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d005      	beq.n	8002704 <Read_Request_CB+0x174>
    {
      PRINTF("aci_gatt_allow_read() failed: 0x%02x\r\n", ret);
 80026f8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80026fc:	4619      	mov	r1, r3
 80026fe:	480d      	ldr	r0, [pc, #52]	@ (8002734 <Read_Request_CB+0x1a4>)
 8002700:	f009 fbde 	bl	800bec0 <iprintf>
    }
  }
}
 8002704:	bf00      	nop
 8002706:	3738      	adds	r7, #56	@ 0x38
 8002708:	46bd      	mov	sp, r7
 800270a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800270e:	bf00      	nop
 8002710:	200000e8 	.word	0x200000e8
 8002714:	20000130 	.word	0x20000130
 8002718:	20000124 	.word	0x20000124
 800271c:	20000118 	.word	0x20000118
 8002720:	200000e6 	.word	0x200000e6
 8002724:	403b0000 	.word	0x403b0000
 8002728:	408f4000 	.word	0x408f4000
 800272c:	42c80000 	.word	0x42c80000
 8002730:	20000110 	.word	0x20000110
 8002734:	0800d364 	.word	0x0800d364

08002738 <BlueMS_Environmental_Update>:

tBleStatus BlueMS_Environmental_Update(int32_t press, int16_t temp)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b088      	sub	sp, #32
 800273c:	af02      	add	r7, sp, #8
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	460b      	mov	r3, r1
 8002742:	807b      	strh	r3, [r7, #2]
  tBleStatus ret;
  uint8_t buff[8];
  HOST_TO_LE_16(buff, HAL_GetTick()>>3);
 8002744:	f002 f868 	bl	8004818 <HAL_GetTick>
 8002748:	4603      	mov	r3, r0
 800274a:	08db      	lsrs	r3, r3, #3
 800274c:	b2db      	uxtb	r3, r3
 800274e:	733b      	strb	r3, [r7, #12]
 8002750:	f002 f862 	bl	8004818 <HAL_GetTick>
 8002754:	4603      	mov	r3, r0
 8002756:	0adb      	lsrs	r3, r3, #11
 8002758:	b2db      	uxtb	r3, r3
 800275a:	737b      	strb	r3, [r7, #13]

  HOST_TO_LE_32(buff+2,press);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	b2db      	uxtb	r3, r3
 8002760:	73bb      	strb	r3, [r7, #14]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	121b      	asrs	r3, r3, #8
 8002766:	b2db      	uxtb	r3, r3
 8002768:	73fb      	strb	r3, [r7, #15]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	141b      	asrs	r3, r3, #16
 800276e:	b2db      	uxtb	r3, r3
 8002770:	743b      	strb	r3, [r7, #16]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	161b      	asrs	r3, r3, #24
 8002776:	b2db      	uxtb	r3, r3
 8002778:	747b      	strb	r3, [r7, #17]
  HOST_TO_LE_16(buff+6,temp);
 800277a:	887b      	ldrh	r3, [r7, #2]
 800277c:	b2db      	uxtb	r3, r3
 800277e:	74bb      	strb	r3, [r7, #18]
 8002780:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002784:	121b      	asrs	r3, r3, #8
 8002786:	b21b      	sxth	r3, r3
 8002788:	b2db      	uxtb	r3, r3
 800278a:	74fb      	strb	r3, [r7, #19]

  ret = aci_gatt_update_char_value(HWServW2STHandle, EnvironmentalCharHandle,
 800278c:	4b0b      	ldr	r3, [pc, #44]	@ (80027bc <BlueMS_Environmental_Update+0x84>)
 800278e:	8818      	ldrh	r0, [r3, #0]
 8002790:	4b0b      	ldr	r3, [pc, #44]	@ (80027c0 <BlueMS_Environmental_Update+0x88>)
 8002792:	8819      	ldrh	r1, [r3, #0]
 8002794:	f107 030c 	add.w	r3, r7, #12
 8002798:	9300      	str	r3, [sp, #0]
 800279a:	2308      	movs	r3, #8
 800279c:	2200      	movs	r2, #0
 800279e:	f007 f96f 	bl	8009a80 <aci_gatt_update_char_value>
 80027a2:	4603      	mov	r3, r0
 80027a4:	75fb      	strb	r3, [r7, #23]
                                   0, 8, buff);

  if (ret != BLE_STATUS_SUCCESS){
 80027a6:	7dfb      	ldrb	r3, [r7, #23]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <BlueMS_Environmental_Update+0x78>
    //PRINTF("Error while updating TEMP characteristic: 0x%04X\n",ret) ;
    return BLE_STATUS_ERROR ;
 80027ac:	2347      	movs	r3, #71	@ 0x47
 80027ae:	e000      	b.n	80027b2 <BlueMS_Environmental_Update+0x7a>
  }

  return BLE_STATUS_SUCCESS;
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3718      	adds	r7, #24
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	200000e4 	.word	0x200000e4
 80027c0:	200000e6 	.word	0x200000e6

080027c4 <Set_DeviceConnectable>:
 * Input          : None.
 * Output         : None.
 * Return         : None.
 *******************************************************************************/
void Set_DeviceConnectable(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b092      	sub	sp, #72	@ 0x48
 80027c8:	af08      	add	r7, sp, #32
  uint8_t ret;
  const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,SENSOR_DEMO_NAME};
 80027ca:	4a3f      	ldr	r2, [pc, #252]	@ (80028c8 <Set_DeviceConnectable+0x104>)
 80027cc:	f107 031c 	add.w	r3, r7, #28
 80027d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027d4:	e883 0003 	stmia.w	r3, {r0, r1}

  uint8_t manuf_data[26] = {
 80027d8:	2302      	movs	r3, #2
 80027da:	703b      	strb	r3, [r7, #0]
 80027dc:	230a      	movs	r3, #10
 80027de:	707b      	strb	r3, [r7, #1]
 80027e0:	2300      	movs	r3, #0
 80027e2:	70bb      	strb	r3, [r7, #2]
 80027e4:	2308      	movs	r3, #8
 80027e6:	70fb      	strb	r3, [r7, #3]
 80027e8:	2309      	movs	r3, #9
 80027ea:	713b      	strb	r3, [r7, #4]
 80027ec:	2342      	movs	r3, #66	@ 0x42
 80027ee:	717b      	strb	r3, [r7, #5]
 80027f0:	236c      	movs	r3, #108	@ 0x6c
 80027f2:	71bb      	strb	r3, [r7, #6]
 80027f4:	2375      	movs	r3, #117	@ 0x75
 80027f6:	71fb      	strb	r3, [r7, #7]
 80027f8:	2365      	movs	r3, #101	@ 0x65
 80027fa:	723b      	strb	r3, [r7, #8]
 80027fc:	2370      	movs	r3, #112	@ 0x70
 80027fe:	727b      	strb	r3, [r7, #9]
 8002800:	2369      	movs	r3, #105	@ 0x69
 8002802:	72bb      	strb	r3, [r7, #10]
 8002804:	236f      	movs	r3, #111	@ 0x6f
 8002806:	72fb      	strb	r3, [r7, #11]
 8002808:	230d      	movs	r3, #13
 800280a:	733b      	strb	r3, [r7, #12]
 800280c:	23ff      	movs	r3, #255	@ 0xff
 800280e:	737b      	strb	r3, [r7, #13]
 8002810:	2301      	movs	r3, #1
 8002812:	73bb      	strb	r3, [r7, #14]
 8002814:	2380      	movs	r3, #128	@ 0x80
 8002816:	73fb      	strb	r3, [r7, #15]
 8002818:	2300      	movs	r3, #0
 800281a:	743b      	strb	r3, [r7, #16]
 800281c:	23f4      	movs	r3, #244	@ 0xf4
 800281e:	747b      	strb	r3, [r7, #17]
 8002820:	2300      	movs	r3, #0
 8002822:	74bb      	strb	r3, [r7, #18]
 8002824:	2300      	movs	r3, #0
 8002826:	74fb      	strb	r3, [r7, #19]
    0x80,
    0x00,
    0xF4, /* ACC+Gyro+Mag 0xE0 | 0x04 Temp | 0x10 Pressure */
    0x00, /*  */
    0x00, /*  */
    bdaddr[5], /* BLE MAC start -MSB first- */
 8002828:	4b28      	ldr	r3, [pc, #160]	@ (80028cc <Set_DeviceConnectable+0x108>)
 800282a:	795b      	ldrb	r3, [r3, #5]
  uint8_t manuf_data[26] = {
 800282c:	753b      	strb	r3, [r7, #20]
    bdaddr[4],
 800282e:	4b27      	ldr	r3, [pc, #156]	@ (80028cc <Set_DeviceConnectable+0x108>)
 8002830:	791b      	ldrb	r3, [r3, #4]
  uint8_t manuf_data[26] = {
 8002832:	757b      	strb	r3, [r7, #21]
    bdaddr[3],
 8002834:	4b25      	ldr	r3, [pc, #148]	@ (80028cc <Set_DeviceConnectable+0x108>)
 8002836:	78db      	ldrb	r3, [r3, #3]
  uint8_t manuf_data[26] = {
 8002838:	75bb      	strb	r3, [r7, #22]
    bdaddr[2],
 800283a:	4b24      	ldr	r3, [pc, #144]	@ (80028cc <Set_DeviceConnectable+0x108>)
 800283c:	789b      	ldrb	r3, [r3, #2]
  uint8_t manuf_data[26] = {
 800283e:	75fb      	strb	r3, [r7, #23]
    bdaddr[1],
 8002840:	4b22      	ldr	r3, [pc, #136]	@ (80028cc <Set_DeviceConnectable+0x108>)
 8002842:	785b      	ldrb	r3, [r3, #1]
  uint8_t manuf_data[26] = {
 8002844:	763b      	strb	r3, [r7, #24]
    bdaddr[0]  /* BLE MAC stop */
 8002846:	4b21      	ldr	r3, [pc, #132]	@ (80028cc <Set_DeviceConnectable+0x108>)
 8002848:	781b      	ldrb	r3, [r3, #0]
  uint8_t manuf_data[26] = {
 800284a:	767b      	strb	r3, [r7, #25]
  };

  manuf_data[18] |= 0x01; /* Sensor Fusion */
 800284c:	7cbb      	ldrb	r3, [r7, #18]
 800284e:	f043 0301 	orr.w	r3, r3, #1
 8002852:	b2db      	uxtb	r3, r3
 8002854:	74bb      	strb	r3, [r7, #18]

  hci_le_set_scan_resp_data(0, NULL);
 8002856:	2100      	movs	r1, #0
 8002858:	2000      	movs	r0, #0
 800285a:	f007 fba4 	bl	8009fa6 <hci_le_set_scan_resp_data>

  PRINTF("Set General Discoverable Mode.\n");
 800285e:	481c      	ldr	r0, [pc, #112]	@ (80028d0 <Set_DeviceConnectable+0x10c>)
 8002860:	f009 fb96 	bl	800bf90 <puts>

  ret = aci_gap_set_discoverable(ADV_DATA_TYPE,
 8002864:	2300      	movs	r3, #0
 8002866:	9306      	str	r3, [sp, #24]
 8002868:	2300      	movs	r3, #0
 800286a:	9305      	str	r3, [sp, #20]
 800286c:	2300      	movs	r3, #0
 800286e:	9304      	str	r3, [sp, #16]
 8002870:	2300      	movs	r3, #0
 8002872:	9303      	str	r3, [sp, #12]
 8002874:	f107 031c 	add.w	r3, r7, #28
 8002878:	9302      	str	r3, [sp, #8]
 800287a:	2308      	movs	r3, #8
 800287c:	9301      	str	r3, [sp, #4]
 800287e:	2300      	movs	r3, #0
 8002880:	9300      	str	r3, [sp, #0]
 8002882:	2301      	movs	r3, #1
 8002884:	f44f 62f0 	mov.w	r2, #1920	@ 0x780
 8002888:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 800288c:	2000      	movs	r0, #0
 800288e:	f006 fdee 	bl	800946e <aci_gap_set_discoverable>
 8002892:	4603      	mov	r3, r0
 8002894:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                                (ADV_INTERVAL_MIN_MS*1000)/625,(ADV_INTERVAL_MAX_MS*1000)/625,
                                 STATIC_RANDOM_ADDR, NO_WHITE_LIST_USE,
                                 sizeof(local_name), local_name, 0, NULL, 0, 0);

  aci_gap_update_adv_data(26, manuf_data);
 8002898:	463b      	mov	r3, r7
 800289a:	4619      	mov	r1, r3
 800289c:	201a      	movs	r0, #26
 800289e:	f006 ff27 	bl	80096f0 <aci_gap_update_adv_data>

  if(ret != BLE_STATUS_SUCCESS)
 80028a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d006      	beq.n	80028b8 <Set_DeviceConnectable+0xf4>
  {
    PRINTF("aci_gap_set_discoverable() failed: 0x%02x\r\n", ret);
 80028aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80028ae:	4619      	mov	r1, r3
 80028b0:	4808      	ldr	r0, [pc, #32]	@ (80028d4 <Set_DeviceConnectable+0x110>)
 80028b2:	f009 fb05 	bl	800bec0 <iprintf>
  }
  else
    PRINTF("aci_gap_set_discoverable() --> SUCCESS\r\n");
}
 80028b6:	e002      	b.n	80028be <Set_DeviceConnectable+0xfa>
    PRINTF("aci_gap_set_discoverable() --> SUCCESS\r\n");
 80028b8:	4807      	ldr	r0, [pc, #28]	@ (80028d8 <Set_DeviceConnectable+0x114>)
 80028ba:	f009 fb69 	bl	800bf90 <puts>
}
 80028be:	bf00      	nop
 80028c0:	3728      	adds	r7, #40	@ 0x28
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	0800d400 	.word	0x0800d400
 80028cc:	200000d8 	.word	0x200000d8
 80028d0:	0800d38c 	.word	0x0800d38c
 80028d4:	0800d3ac 	.word	0x0800d3ac
 80028d8:	0800d3d8 	.word	0x0800d3d8

080028dc <user_notify>:
 *         parsed.
 * @param  void* Pointer to the ACI packet
 * @retval None
 */
void user_notify(void * pData)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b08e      	sub	sp, #56	@ 0x38
 80028e0:	af02      	add	r7, sp, #8
 80028e2:	6078      	str	r0, [r7, #4]
  hci_uart_pckt *hci_pckt = pData;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* obtain event packet */
  hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 80028e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028ea:	3301      	adds	r3, #1
 80028ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  if(hci_pckt->type != HCI_EVENT_PKT)
 80028ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	2b04      	cmp	r3, #4
 80028f4:	d15d      	bne.n	80029b2 <user_notify+0xd6>
    return;
  evt_blue_aci *blue_evt = (void*)event_pckt->data;
 80028f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028f8:	3302      	adds	r3, #2
 80028fa:	627b      	str	r3, [r7, #36]	@ 0x24
  switch(event_pckt->evt){
 80028fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	2bff      	cmp	r3, #255	@ 0xff
 8002902:	d01f      	beq.n	8002944 <user_notify+0x68>
 8002904:	2bff      	cmp	r3, #255	@ 0xff
 8002906:	dc59      	bgt.n	80029bc <user_notify+0xe0>
 8002908:	2b05      	cmp	r3, #5
 800290a:	d002      	beq.n	8002912 <user_notify+0x36>
 800290c:	2b3e      	cmp	r3, #62	@ 0x3e
 800290e:	d003      	beq.n	8002918 <user_notify+0x3c>
 8002910:	e054      	b.n	80029bc <user_notify+0xe0>

  case EVT_DISCONN_COMPLETE:
    {
      GAP_DisconnectionComplete_CB();
 8002912:	f000 f857 	bl	80029c4 <GAP_DisconnectionComplete_CB>
    }
    break;
 8002916:	e051      	b.n	80029bc <user_notify+0xe0>

  case EVT_LE_META_EVENT:
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 8002918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800291a:	3302      	adds	r3, #2
 800291c:	613b      	str	r3, [r7, #16]

      switch(evt->subevent){
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	2b01      	cmp	r3, #1
 8002924:	d147      	bne.n	80029b6 <user_notify+0xda>
      case EVT_LE_CONN_COMPLETE:
        {
          evt_le_connection_complete *cc = (void *)evt->data;
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	3301      	adds	r3, #1
 800292a:	60fb      	str	r3, [r7, #12]
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	1d5a      	adds	r2, r3, #5
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8002936:	b29b      	uxth	r3, r3
 8002938:	4619      	mov	r1, r3
 800293a:	4610      	mov	r0, r2
 800293c:	f000 f85a 	bl	80029f4 <GAP_ConnectionComplete_CB>
        }
        break;
 8002940:	bf00      	nop
      }
    }
    break;
 8002942:	e038      	b.n	80029b6 <user_notify+0xda>
  case EVT_VENDOR:
    {
      switch(blue_evt->ecode){
 8002944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002946:	881b      	ldrh	r3, [r3, #0]
 8002948:	b29b      	uxth	r3, r3
 800294a:	f640 4213 	movw	r2, #3091	@ 0xc13
 800294e:	4293      	cmp	r3, r2
 8002950:	d00d      	beq.n	800296e <user_notify+0x92>
 8002952:	f640 4214 	movw	r2, #3092	@ 0xc14
 8002956:	4293      	cmp	r3, r2
 8002958:	d12f      	bne.n	80029ba <user_notify+0xde>

      case EVT_BLUE_GATT_READ_PERMIT_REQ:
        {
          evt_gatt_read_permit_req *pr = (void*)blue_evt->data;
 800295a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800295c:	3302      	adds	r3, #2
 800295e:	623b      	str	r3, [r7, #32]
          Read_Request_CB(pr->attr_handle);
 8002960:	6a3b      	ldr	r3, [r7, #32]
 8002962:	885b      	ldrh	r3, [r3, #2]
 8002964:	b29b      	uxth	r3, r3
 8002966:	4618      	mov	r0, r3
 8002968:	f7ff fe12 	bl	8002590 <Read_Request_CB>
        }
        //Sample_rate_Update(sample_rate);
        break;
 800296c:	e020      	b.n	80029b0 <user_notify+0xd4>
      case EVT_BLUE_GATT_WRITE_PERMIT_REQ:
		{
			//// OUR CODE
			evt_gatt_write_permit_req *wr = (void*)blue_evt->data;
 800296e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002970:	3302      	adds	r3, #2
 8002972:	61fb      	str	r3, [r7, #28]
			uint16_t attr_handle = wr->attr_handle;
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	789a      	ldrb	r2, [r3, #2]
 8002978:	78db      	ldrb	r3, [r3, #3]
 800297a:	021b      	lsls	r3, r3, #8
 800297c:	4313      	orrs	r3, r2
 800297e:	837b      	strh	r3, [r7, #26]
			uint8_t *data = wr->data;
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	3305      	adds	r3, #5
 8002984:	617b      	str	r3, [r7, #20]


		     Sample_rate_Update( data[0]  );
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	4618      	mov	r0, r3
 800298c:	f7ff fd48 	bl	8002420 <Sample_rate_Update>
		     aci_gatt_write_response(wr->conn_handle, wr->attr_handle,0x00,
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	881b      	ldrh	r3, [r3, #0]
 8002994:	b298      	uxth	r0, r3
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	885b      	ldrh	r3, [r3, #2]
 800299a:	b299      	uxth	r1, r3
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	3305      	adds	r3, #5
 80029a0:	9301      	str	r3, [sp, #4]
 80029a2:	2301      	movs	r3, #1
 80029a4:	9300      	str	r3, [sp, #0]
 80029a6:	2300      	movs	r3, #0
 80029a8:	2200      	movs	r2, #0
 80029aa:	f007 f8f9 	bl	8009ba0 <aci_gatt_write_response>
                     1,
                     (uint8_t *)&(wr->data[0]));;

			//// OUR CODE
		}
		break;
 80029ae:	bf00      	nop
      }

    }
    break;
 80029b0:	e003      	b.n	80029ba <user_notify+0xde>
    return;
 80029b2:	bf00      	nop
 80029b4:	e002      	b.n	80029bc <user_notify+0xe0>
    break;
 80029b6:	bf00      	nop
 80029b8:	e000      	b.n	80029bc <user_notify+0xe0>
    break;
 80029ba:	bf00      	nop
  }
}
 80029bc:	3730      	adds	r7, #48	@ 0x30
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
	...

080029c4 <GAP_DisconnectionComplete_CB>:
 * @brief  This function is called when the peer device gets disconnected.
 * @param  None
 * @retval None
 */
void GAP_DisconnectionComplete_CB(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  connected = FALSE;
 80029c8:	4b06      	ldr	r3, [pc, #24]	@ (80029e4 <GAP_DisconnectionComplete_CB+0x20>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	601a      	str	r2, [r3, #0]
  PRINTF("Disconnected\n");
 80029ce:	4806      	ldr	r0, [pc, #24]	@ (80029e8 <GAP_DisconnectionComplete_CB+0x24>)
 80029d0:	f009 fade 	bl	800bf90 <puts>
  /* Make the device connectable again. */
  set_connectable = TRUE;
 80029d4:	4b05      	ldr	r3, [pc, #20]	@ (80029ec <GAP_DisconnectionComplete_CB+0x28>)
 80029d6:	2201      	movs	r2, #1
 80029d8:	701a      	strb	r2, [r3, #0]
  notification_enabled = FALSE;
 80029da:	4b05      	ldr	r3, [pc, #20]	@ (80029f0 <GAP_DisconnectionComplete_CB+0x2c>)
 80029dc:	2200      	movs	r2, #0
 80029de:	701a      	strb	r2, [r3, #0]
}
 80029e0:	bf00      	nop
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	20000114 	.word	0x20000114
 80029e8:	0800d408 	.word	0x0800d408
 80029ec:	20000001 	.word	0x20000001
 80029f0:	20000112 	.word	0x20000112

080029f4 <GAP_ConnectionComplete_CB>:
 * @param  uint8_t Address of peer device
 * @param  uint16_t Connection handle
 * @retval None
 */
void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	460b      	mov	r3, r1
 80029fe:	807b      	strh	r3, [r7, #2]
  connected = TRUE;
 8002a00:	4b11      	ldr	r3, [pc, #68]	@ (8002a48 <GAP_ConnectionComplete_CB+0x54>)
 8002a02:	2201      	movs	r2, #1
 8002a04:	601a      	str	r2, [r3, #0]
  connection_handle = handle;
 8002a06:	4a11      	ldr	r2, [pc, #68]	@ (8002a4c <GAP_ConnectionComplete_CB+0x58>)
 8002a08:	887b      	ldrh	r3, [r7, #2]
 8002a0a:	8013      	strh	r3, [r2, #0]

  PRINTF("Connected to device:");
 8002a0c:	4810      	ldr	r0, [pc, #64]	@ (8002a50 <GAP_ConnectionComplete_CB+0x5c>)
 8002a0e:	f009 fa57 	bl	800bec0 <iprintf>
  for(uint32_t i = 5; i > 0; i--){
 8002a12:	2305      	movs	r3, #5
 8002a14:	60fb      	str	r3, [r7, #12]
 8002a16:	e00a      	b.n	8002a2e <GAP_ConnectionComplete_CB+0x3a>
    PRINTF("%02X-", addr[i]);
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	4413      	add	r3, r2
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	4619      	mov	r1, r3
 8002a22:	480c      	ldr	r0, [pc, #48]	@ (8002a54 <GAP_ConnectionComplete_CB+0x60>)
 8002a24:	f009 fa4c 	bl	800bec0 <iprintf>
  for(uint32_t i = 5; i > 0; i--){
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	60fb      	str	r3, [r7, #12]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d1f1      	bne.n	8002a18 <GAP_ConnectionComplete_CB+0x24>
  }
  PRINTF("%02X\n", addr[0]);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	4619      	mov	r1, r3
 8002a3a:	4807      	ldr	r0, [pc, #28]	@ (8002a58 <GAP_ConnectionComplete_CB+0x64>)
 8002a3c:	f009 fa40 	bl	800bec0 <iprintf>
}
 8002a40:	bf00      	nop
 8002a42:	3710      	adds	r7, #16
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	20000114 	.word	0x20000114
 8002a4c:	20000110 	.word	0x20000110
 8002a50:	0800d418 	.word	0x0800d418
 8002a54:	0800d430 	.word	0x0800d430
 8002a58:	0800d438 	.word	0x0800d438

08002a5c <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b088      	sub	sp, #32
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a64:	4b1f      	ldr	r3, [pc, #124]	@ (8002ae4 <HCI_TL_SPI_Init+0x88>)
 8002a66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a68:	4a1e      	ldr	r2, [pc, #120]	@ (8002ae4 <HCI_TL_SPI_Init+0x88>)
 8002a6a:	f043 0301 	orr.w	r3, r3, #1
 8002a6e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a70:	4b1c      	ldr	r3, [pc, #112]	@ (8002ae4 <HCI_TL_SPI_Init+0x88>)
 8002a72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a74:	f003 0301 	and.w	r3, r3, #1
 8002a78:	60bb      	str	r3, [r7, #8]
 8002a7a:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8002a7c:	2340      	movs	r3, #64	@ 0x40
 8002a7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a80:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002a84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a86:	2300      	movs	r3, #0
 8002a88:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 8002a8a:	f107 030c 	add.w	r3, r7, #12
 8002a8e:	4619      	mov	r1, r3
 8002a90:	4815      	ldr	r0, [pc, #84]	@ (8002ae8 <HCI_TL_SPI_Init+0x8c>)
 8002a92:	f002 f96d 	bl	8004d70 <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 8002a96:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 8002aa8:	f107 030c 	add.w	r3, r7, #12
 8002aac:	4619      	mov	r1, r3
 8002aae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ab2:	f002 f95d 	bl	8004d70 <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 8002ab6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002aba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002abc:	2301      	movs	r3, #1
 8002abe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 8002ac8:	f107 030c 	add.w	r3, r7, #12
 8002acc:	4619      	mov	r1, r3
 8002ace:	4807      	ldr	r0, [pc, #28]	@ (8002aec <HCI_TL_SPI_Init+0x90>)
 8002ad0:	f002 f94e 	bl	8004d70 <HAL_GPIO_Init>

  return BSP_SPI3_Init();
 8002ad4:	f001 fbda 	bl	800428c <BSP_SPI3_Init>
 8002ad8:	4603      	mov	r3, r0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3720      	adds	r7, #32
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	40021000 	.word	0x40021000
 8002ae8:	48001000 	.word	0x48001000
 8002aec:	48000c00 	.word	0x48000c00

08002af0 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 8002af4:	2140      	movs	r1, #64	@ 0x40
 8002af6:	4808      	ldr	r0, [pc, #32]	@ (8002b18 <HCI_TL_SPI_DeInit+0x28>)
 8002af8:	f002 fae4 	bl	80050c4 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 8002afc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002b00:	4806      	ldr	r0, [pc, #24]	@ (8002b1c <HCI_TL_SPI_DeInit+0x2c>)
 8002b02:	f002 fadf 	bl	80050c4 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 8002b06:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002b0a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b0e:	f002 fad9 	bl	80050c4 <HAL_GPIO_DeInit>
  return 0;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	48001000 	.word	0x48001000
 8002b1c:	48000c00 	.word	0x48000c00

08002b20 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8002b24:	2201      	movs	r2, #1
 8002b26:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002b2a:	480d      	ldr	r0, [pc, #52]	@ (8002b60 <HCI_TL_SPI_Reset+0x40>)
 8002b2c:	f002 fbd6 	bl	80052dc <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 8002b30:	2200      	movs	r2, #0
 8002b32:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002b36:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b3a:	f002 fbcf 	bl	80052dc <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8002b3e:	2005      	movs	r0, #5
 8002b40:	f001 fe76 	bl	8004830 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 8002b44:	2201      	movs	r2, #1
 8002b46:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002b4a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b4e:	f002 fbc5 	bl	80052dc <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8002b52:	2005      	movs	r0, #5
 8002b54:	f001 fe6c 	bl	8004830 <HAL_Delay>
  return 0;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	48000c00 	.word	0x48000c00

08002b64 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b088      	sub	sp, #32
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 8002b70:	2300      	movs	r3, #0
 8002b72:	777b      	strb	r3, [r7, #29]
  uint8_t char_ff = 0xff;
 8002b74:	23ff      	movs	r3, #255	@ 0xff
 8002b76:	773b      	strb	r3, [r7, #28]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8002b78:	4a26      	ldr	r2, [pc, #152]	@ (8002c14 <HCI_TL_SPI_Receive+0xb0>)
 8002b7a:	f107 0314 	add.w	r3, r7, #20
 8002b7e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b82:	6018      	str	r0, [r3, #0]
 8002b84:	3304      	adds	r3, #4
 8002b86:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002b8e:	4822      	ldr	r0, [pc, #136]	@ (8002c18 <HCI_TL_SPI_Receive+0xb4>)
 8002b90:	f002 fba4 	bl	80052dc <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI3_SendRecv(header_master, header_slave, HEADER_SIZE);
 8002b94:	f107 010c 	add.w	r1, r7, #12
 8002b98:	f107 0314 	add.w	r3, r7, #20
 8002b9c:	2205      	movs	r2, #5
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f001 fba4 	bl	80042ec <BSP_SPI3_SendRecv>

  if(header_slave[0] == 0x02)
 8002ba4:	7b3b      	ldrb	r3, [r7, #12]
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d129      	bne.n	8002bfe <HCI_TL_SPI_Receive+0x9a>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 8002baa:	7c3b      	ldrb	r3, [r7, #16]
 8002bac:	021b      	lsls	r3, r3, #8
 8002bae:	b21a      	sxth	r2, r3
 8002bb0:	7bfb      	ldrb	r3, [r7, #15]
 8002bb2:	b21b      	sxth	r3, r3
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	b21b      	sxth	r3, r3
 8002bb8:	83fb      	strh	r3, [r7, #30]

    if(byte_count > 0)
 8002bba:	8bfb      	ldrh	r3, [r7, #30]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d01e      	beq.n	8002bfe <HCI_TL_SPI_Receive+0x9a>
    {
      /* avoid to read more data than the size of the buffer */
      if (byte_count > size){
 8002bc0:	8bfa      	ldrh	r2, [r7, #30]
 8002bc2:	887b      	ldrh	r3, [r7, #2]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d901      	bls.n	8002bcc <HCI_TL_SPI_Receive+0x68>
        byte_count = size;
 8002bc8:	887b      	ldrh	r3, [r7, #2]
 8002bca:	83fb      	strh	r3, [r7, #30]
      }

      for(len = 0; len < byte_count; len++)
 8002bcc:	2300      	movs	r3, #0
 8002bce:	777b      	strb	r3, [r7, #29]
 8002bd0:	e010      	b.n	8002bf4 <HCI_TL_SPI_Receive+0x90>
      {
        BSP_SPI3_SendRecv(&char_ff, (uint8_t*)&read_char, 1);
 8002bd2:	f107 011b 	add.w	r1, r7, #27
 8002bd6:	f107 031c 	add.w	r3, r7, #28
 8002bda:	2201      	movs	r2, #1
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f001 fb85 	bl	80042ec <BSP_SPI3_SendRecv>
        buffer[len] = read_char;
 8002be2:	7f7b      	ldrb	r3, [r7, #29]
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	4413      	add	r3, r2
 8002be8:	7efa      	ldrb	r2, [r7, #27]
 8002bea:	b2d2      	uxtb	r2, r2
 8002bec:	701a      	strb	r2, [r3, #0]
      for(len = 0; len < byte_count; len++)
 8002bee:	7f7b      	ldrb	r3, [r7, #29]
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	777b      	strb	r3, [r7, #29]
 8002bf4:	7f7b      	ldrb	r3, [r7, #29]
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	8bfa      	ldrh	r2, [r7, #30]
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d8e9      	bhi.n	8002bd2 <HCI_TL_SPI_Receive+0x6e>
      }
    }
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002c04:	4804      	ldr	r0, [pc, #16]	@ (8002c18 <HCI_TL_SPI_Receive+0xb4>)
 8002c06:	f002 fb69 	bl	80052dc <HAL_GPIO_WritePin>
    }
    PRINT_CSV("\n");
  }
#endif

  return len;
 8002c0a:	7f7b      	ldrb	r3, [r7, #29]
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3720      	adds	r7, #32
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	0800d440 	.word	0x0800d440
 8002c18:	48000c00 	.word	0x48000c00

08002c1c <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b088      	sub	sp, #32
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	460b      	mov	r3, r1
 8002c26:	807b      	strh	r3, [r7, #2]
  int32_t result;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8002c28:	4a24      	ldr	r2, [pc, #144]	@ (8002cbc <HCI_TL_SPI_Send+0xa0>)
 8002c2a:	f107 0310 	add.w	r3, r7, #16
 8002c2e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002c32:	6018      	str	r0, [r3, #0]
 8002c34:	3304      	adds	r3, #4
 8002c36:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 8002c38:	f001 fdee 	bl	8004818 <HAL_GetTick>
 8002c3c:	61b8      	str	r0, [r7, #24]

  do
  {
    result = 0;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	61fb      	str	r3, [r7, #28]

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8002c42:	2200      	movs	r2, #0
 8002c44:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002c48:	481d      	ldr	r0, [pc, #116]	@ (8002cc0 <HCI_TL_SPI_Send+0xa4>)
 8002c4a:	f002 fb47 	bl	80052dc <HAL_GPIO_WritePin>

    /* Read header */
    BSP_SPI3_SendRecv(header_master, header_slave, HEADER_SIZE);
 8002c4e:	f107 0108 	add.w	r1, r7, #8
 8002c52:	f107 0310 	add.w	r3, r7, #16
 8002c56:	2205      	movs	r2, #5
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f001 fb47 	bl	80042ec <BSP_SPI3_SendRecv>

    if(header_slave[0] == 0x02)
 8002c5e:	7a3b      	ldrb	r3, [r7, #8]
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d10f      	bne.n	8002c84 <HCI_TL_SPI_Send+0x68>
    {
      /* SPI is ready */
      if(header_slave[1] >= size)
 8002c64:	7a7b      	ldrb	r3, [r7, #9]
 8002c66:	461a      	mov	r2, r3
 8002c68:	887b      	ldrh	r3, [r7, #2]
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d806      	bhi.n	8002c7c <HCI_TL_SPI_Send+0x60>
      {
        BSP_SPI3_SendRecv(buffer, read_char_buf, size);
 8002c6e:	887b      	ldrh	r3, [r7, #2]
 8002c70:	461a      	mov	r2, r3
 8002c72:	4914      	ldr	r1, [pc, #80]	@ (8002cc4 <HCI_TL_SPI_Send+0xa8>)
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f001 fb39 	bl	80042ec <BSP_SPI3_SendRecv>
 8002c7a:	e006      	b.n	8002c8a <HCI_TL_SPI_Send+0x6e>
      }
      else
      {
        /* Buffer is too small */
        result = -2;
 8002c7c:	f06f 0301 	mvn.w	r3, #1
 8002c80:	61fb      	str	r3, [r7, #28]
 8002c82:	e002      	b.n	8002c8a <HCI_TL_SPI_Send+0x6e>
      }
    } else {
      /* SPI is not ready */
      result = -1;
 8002c84:	f04f 33ff 	mov.w	r3, #4294967295
 8002c88:	61fb      	str	r3, [r7, #28]
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002c90:	480b      	ldr	r0, [pc, #44]	@ (8002cc0 <HCI_TL_SPI_Send+0xa4>)
 8002c92:	f002 fb23 	bl	80052dc <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 8002c96:	f001 fdbf 	bl	8004818 <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	2b0f      	cmp	r3, #15
 8002ca2:	d903      	bls.n	8002cac <HCI_TL_SPI_Send+0x90>
    {
      result = -3;
 8002ca4:	f06f 0302 	mvn.w	r3, #2
 8002ca8:	61fb      	str	r3, [r7, #28]
      break;
 8002caa:	e002      	b.n	8002cb2 <HCI_TL_SPI_Send+0x96>
    }
  } while(result < 0);
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	dbc5      	blt.n	8002c3e <HCI_TL_SPI_Send+0x22>

  return result;
 8002cb2:	69fb      	ldr	r3, [r7, #28]
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3720      	adds	r7, #32
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	0800d448 	.word	0x0800d448
 8002cc0:	48000c00 	.word	0x48000c00
 8002cc4:	20000150 	.word	0x20000150

08002cc8 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8002ccc:	2140      	movs	r1, #64	@ 0x40
 8002cce:	4805      	ldr	r0, [pc, #20]	@ (8002ce4 <IsDataAvailable+0x1c>)
 8002cd0:	f002 faec 	bl	80052ac <HAL_GPIO_ReadPin>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	bf0c      	ite	eq
 8002cda:	2301      	moveq	r3, #1
 8002cdc:	2300      	movne	r3, #0
 8002cde:	b2db      	uxtb	r3, r3
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	48001000 	.word	0x48001000

08002ce8 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b088      	sub	sp, #32
 8002cec:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 8002cee:	4b12      	ldr	r3, [pc, #72]	@ (8002d38 <hci_tl_lowlevel_init+0x50>)
 8002cf0:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 8002cf2:	4b12      	ldr	r3, [pc, #72]	@ (8002d3c <hci_tl_lowlevel_init+0x54>)
 8002cf4:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 8002cf6:	4b12      	ldr	r3, [pc, #72]	@ (8002d40 <hci_tl_lowlevel_init+0x58>)
 8002cf8:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 8002cfa:	4b12      	ldr	r3, [pc, #72]	@ (8002d44 <hci_tl_lowlevel_init+0x5c>)
 8002cfc:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 8002cfe:	4b12      	ldr	r3, [pc, #72]	@ (8002d48 <hci_tl_lowlevel_init+0x60>)
 8002d00:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 8002d02:	4b12      	ldr	r3, [pc, #72]	@ (8002d4c <hci_tl_lowlevel_init+0x64>)
 8002d04:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 8002d06:	1d3b      	adds	r3, r7, #4
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f007 fa69 	bl	800a1e0 <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti6, EXTI_LINE_6);
 8002d0e:	4910      	ldr	r1, [pc, #64]	@ (8002d50 <hci_tl_lowlevel_init+0x68>)
 8002d10:	4810      	ldr	r0, [pc, #64]	@ (8002d54 <hci_tl_lowlevel_init+0x6c>)
 8002d12:	f001 ffe9 	bl	8004ce8 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti6, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 8002d16:	4a10      	ldr	r2, [pc, #64]	@ (8002d58 <hci_tl_lowlevel_init+0x70>)
 8002d18:	2100      	movs	r1, #0
 8002d1a:	480e      	ldr	r0, [pc, #56]	@ (8002d54 <hci_tl_lowlevel_init+0x6c>)
 8002d1c:	f001 ffca 	bl	8004cb4 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002d20:	2200      	movs	r2, #0
 8002d22:	2100      	movs	r1, #0
 8002d24:	2017      	movs	r0, #23
 8002d26:	f001 fe82 	bl	8004a2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002d2a:	2017      	movs	r0, #23
 8002d2c:	f001 fe9b 	bl	8004a66 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 8002d30:	bf00      	nop
 8002d32:	3720      	adds	r7, #32
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	08002a5d 	.word	0x08002a5d
 8002d3c:	08002af1 	.word	0x08002af1
 8002d40:	08002c1d 	.word	0x08002c1d
 8002d44:	08002b65 	.word	0x08002b65
 8002d48:	08002b21 	.word	0x08002b21
 8002d4c:	0800432d 	.word	0x0800432d
 8002d50:	16000006 	.word	0x16000006
 8002d54:	20000148 	.word	0x20000148
 8002d58:	08002d5d 	.word	0x08002d5d

08002d5c <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 8002d60:	e005      	b.n	8002d6e <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 8002d62:	2000      	movs	r0, #0
 8002d64:	f007 fba0 	bl	800a4a8 <hci_notify_asynch_evt>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d105      	bne.n	8002d7a <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 8002d6e:	f7ff ffab 	bl	8002cc8 <IsDataAvailable>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d1f4      	bne.n	8002d62 <hci_tl_lowlevel_isr+0x6>
 8002d78:	e000      	b.n	8002d7c <hci_tl_lowlevel_isr+0x20>
    {
      return;
 8002d7a:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 8002d7c:	bd80      	pop	{r7, pc}
	...

08002d80 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002d80:	b480      	push	{r7}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	4a07      	ldr	r2, [pc, #28]	@ (8002dac <vApplicationGetIdleTaskMemory+0x2c>)
 8002d90:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	4a06      	ldr	r2, [pc, #24]	@ (8002db0 <vApplicationGetIdleTaskMemory+0x30>)
 8002d96:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2280      	movs	r2, #128	@ 0x80
 8002d9c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002d9e:	bf00      	nop
 8002da0:	3714      	adds	r7, #20
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	20000250 	.word	0x20000250
 8002db0:	200002a4 	.word	0x200002a4

08002db4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002db4:	b5b0      	push	{r4, r5, r7, lr}
 8002db6:	b09c      	sub	sp, #112	@ 0x70
 8002db8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002dba:	f001 fcc5 	bl	8004748 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002dbe:	f000 f86d 	bl	8002e9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002dc2:	f000 f989 	bl	80030d8 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8002dc6:	f000 f8cb 	bl	8002f60 <MX_DFSDM1_Init>
  //0MX_I2C2_Init();
  MX_QUADSPI_Init();
 8002dca:	f000 f901 	bl	8002fd0 <MX_QUADSPI_Init>
  MX_USART3_UART_Init();
 8002dce:	f000 f925 	bl	800301c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8002dd2:	f000 f953 	bl	800307c <MX_USB_OTG_FS_PCD_Init>
  MX_BlueNRG_MS_Init();
 8002dd6:	f7fd fdd7 	bl	8000988 <MX_BlueNRG_MS_Init>

  /* USER CODE BEGIN 2 */
  BSP_ACCELERO_Init();
 8002dda:	f001 fb49 	bl	8004470 <BSP_ACCELERO_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadStaticDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 512, defaultTaskBuffer, &defaultTaskControlBlock);
 8002dde:	4b27      	ldr	r3, [pc, #156]	@ (8002e7c <main+0xc8>)
 8002de0:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8002de4:	461d      	mov	r5, r3
 8002de6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002de8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002dea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002dee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002df2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002df6:	2100      	movs	r1, #0
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f007 fcd7 	bl	800a7ac <osThreadCreate>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	4a1f      	ldr	r2, [pc, #124]	@ (8002e80 <main+0xcc>)
 8002e02:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadStaticDef(myTask02, StartTask02, osPriorityNormal, 0, 512, myTask02Buffer, &myTask02ControlBlock);
 8002e04:	4b1f      	ldr	r3, [pc, #124]	@ (8002e84 <main+0xd0>)
 8002e06:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8002e0a:	461d      	mov	r5, r3
 8002e0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e10:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002e14:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8002e18:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002e1c:	2100      	movs	r1, #0
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f007 fcc4 	bl	800a7ac <osThreadCreate>
 8002e24:	4603      	mov	r3, r0
 8002e26:	4a18      	ldr	r2, [pc, #96]	@ (8002e88 <main+0xd4>)
 8002e28:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadStaticDef(myTask03, StartTask03, osPriorityIdle, 0, 512, myTask03Buffer, &myTask03ControlBlock);
 8002e2a:	4b18      	ldr	r3, [pc, #96]	@ (8002e8c <main+0xd8>)
 8002e2c:	f107 041c 	add.w	r4, r7, #28
 8002e30:	461d      	mov	r5, r3
 8002e32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e36:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002e3a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 8002e3e:	f107 031c 	add.w	r3, r7, #28
 8002e42:	2100      	movs	r1, #0
 8002e44:	4618      	mov	r0, r3
 8002e46:	f007 fcb1 	bl	800a7ac <osThreadCreate>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	4a10      	ldr	r2, [pc, #64]	@ (8002e90 <main+0xdc>)
 8002e4e:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask04 */
  osThreadStaticDef(myTask04, StartTask04, osPriorityIdle, 0, 512, myTask04Buffer, &myTask04ControlBlock);
 8002e50:	4b10      	ldr	r3, [pc, #64]	@ (8002e94 <main+0xe0>)
 8002e52:	463c      	mov	r4, r7
 8002e54:	461d      	mov	r5, r3
 8002e56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e5a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002e5e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask04Handle = osThreadCreate(osThread(myTask04), NULL);
 8002e62:	463b      	mov	r3, r7
 8002e64:	2100      	movs	r1, #0
 8002e66:	4618      	mov	r0, r3
 8002e68:	f007 fca0 	bl	800a7ac <osThreadCreate>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	4a0a      	ldr	r2, [pc, #40]	@ (8002e98 <main+0xe4>)
 8002e70:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8002e72:	f007 fc94 	bl	800a79e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002e76:	bf00      	nop
 8002e78:	e7fd      	b.n	8002e76 <main+0xc2>
 8002e7a:	bf00      	nop
 8002e7c:	0800d45c 	.word	0x0800d45c
 8002e80:	20000a8c 	.word	0x20000a8c
 8002e84:	0800d484 	.word	0x0800d484
 8002e88:	200012e4 	.word	0x200012e4
 8002e8c:	0800d4ac 	.word	0x0800d4ac
 8002e90:	20001b3c 	.word	0x20001b3c
 8002e94:	0800d4d4 	.word	0x0800d4d4
 8002e98:	20002394 	.word	0x20002394

08002e9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b096      	sub	sp, #88	@ 0x58
 8002ea0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ea2:	f107 0314 	add.w	r3, r7, #20
 8002ea6:	2244      	movs	r2, #68	@ 0x44
 8002ea8:	2100      	movs	r1, #0
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f009 f984 	bl	800c1b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002eb0:	463b      	mov	r3, r7
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	601a      	str	r2, [r3, #0]
 8002eb6:	605a      	str	r2, [r3, #4]
 8002eb8:	609a      	str	r2, [r3, #8]
 8002eba:	60da      	str	r2, [r3, #12]
 8002ebc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002ebe:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002ec2:	f003 f9b7 	bl	8006234 <HAL_PWREx_ControlVoltageScaling>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d001      	beq.n	8002ed0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002ecc:	f000 fade 	bl	800348c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002ed0:	f003 f992 	bl	80061f8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002ed4:	4b21      	ldr	r3, [pc, #132]	@ (8002f5c <SystemClock_Config+0xc0>)
 8002ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eda:	4a20      	ldr	r2, [pc, #128]	@ (8002f5c <SystemClock_Config+0xc0>)
 8002edc:	f023 0318 	bic.w	r3, r3, #24
 8002ee0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8002ee4:	2314      	movs	r3, #20
 8002ee6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002eec:	2301      	movs	r3, #1
 8002eee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002ef4:	2360      	movs	r3, #96	@ 0x60
 8002ef6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ef8:	2302      	movs	r3, #2
 8002efa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002efc:	2301      	movs	r3, #1
 8002efe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002f00:	2301      	movs	r3, #1
 8002f02:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8002f04:	2328      	movs	r3, #40	@ 0x28
 8002f06:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002f08:	2307      	movs	r3, #7
 8002f0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002f0c:	2302      	movs	r3, #2
 8002f0e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002f10:	2302      	movs	r3, #2
 8002f12:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f14:	f107 0314 	add.w	r3, r7, #20
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f003 faad 	bl	8006478 <HAL_RCC_OscConfig>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d001      	beq.n	8002f28 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002f24:	f000 fab2 	bl	800348c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f28:	230f      	movs	r3, #15
 8002f2a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f30:	2300      	movs	r3, #0
 8002f32:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002f34:	2300      	movs	r3, #0
 8002f36:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002f3c:	463b      	mov	r3, r7
 8002f3e:	2104      	movs	r1, #4
 8002f40:	4618      	mov	r0, r3
 8002f42:	f003 fe75 	bl	8006c30 <HAL_RCC_ClockConfig>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d001      	beq.n	8002f50 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8002f4c:	f000 fa9e 	bl	800348c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8002f50:	f004 fb7c 	bl	800764c <HAL_RCCEx_EnableMSIPLLMode>
}
 8002f54:	bf00      	nop
 8002f56:	3758      	adds	r7, #88	@ 0x58
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	40021000 	.word	0x40021000

08002f60 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8002f64:	4b18      	ldr	r3, [pc, #96]	@ (8002fc8 <MX_DFSDM1_Init+0x68>)
 8002f66:	4a19      	ldr	r2, [pc, #100]	@ (8002fcc <MX_DFSDM1_Init+0x6c>)
 8002f68:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8002f6a:	4b17      	ldr	r3, [pc, #92]	@ (8002fc8 <MX_DFSDM1_Init+0x68>)
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8002f70:	4b15      	ldr	r3, [pc, #84]	@ (8002fc8 <MX_DFSDM1_Init+0x68>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8002f76:	4b14      	ldr	r3, [pc, #80]	@ (8002fc8 <MX_DFSDM1_Init+0x68>)
 8002f78:	2202      	movs	r2, #2
 8002f7a:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8002f7c:	4b12      	ldr	r3, [pc, #72]	@ (8002fc8 <MX_DFSDM1_Init+0x68>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8002f82:	4b11      	ldr	r3, [pc, #68]	@ (8002fc8 <MX_DFSDM1_Init+0x68>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8002f88:	4b0f      	ldr	r3, [pc, #60]	@ (8002fc8 <MX_DFSDM1_Init+0x68>)
 8002f8a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002f8e:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8002f90:	4b0d      	ldr	r3, [pc, #52]	@ (8002fc8 <MX_DFSDM1_Init+0x68>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8002f96:	4b0c      	ldr	r3, [pc, #48]	@ (8002fc8 <MX_DFSDM1_Init+0x68>)
 8002f98:	2204      	movs	r2, #4
 8002f9a:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8002f9c:	4b0a      	ldr	r3, [pc, #40]	@ (8002fc8 <MX_DFSDM1_Init+0x68>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8002fa2:	4b09      	ldr	r3, [pc, #36]	@ (8002fc8 <MX_DFSDM1_Init+0x68>)
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8002fa8:	4b07      	ldr	r3, [pc, #28]	@ (8002fc8 <MX_DFSDM1_Init+0x68>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8002fae:	4b06      	ldr	r3, [pc, #24]	@ (8002fc8 <MX_DFSDM1_Init+0x68>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8002fb4:	4804      	ldr	r0, [pc, #16]	@ (8002fc8 <MX_DFSDM1_Init+0x68>)
 8002fb6:	f001 fd71 	bl	8004a9c <HAL_DFSDM_ChannelInit>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8002fc0:	f000 fa64 	bl	800348c <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8002fc4:	bf00      	nop
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	200004a4 	.word	0x200004a4
 8002fcc:	40016020 	.word	0x40016020

08002fd0 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8002fd4:	4b0f      	ldr	r3, [pc, #60]	@ (8003014 <MX_QUADSPI_Init+0x44>)
 8002fd6:	4a10      	ldr	r2, [pc, #64]	@ (8003018 <MX_QUADSPI_Init+0x48>)
 8002fd8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8002fda:	4b0e      	ldr	r3, [pc, #56]	@ (8003014 <MX_QUADSPI_Init+0x44>)
 8002fdc:	2202      	movs	r2, #2
 8002fde:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8002fe0:	4b0c      	ldr	r3, [pc, #48]	@ (8003014 <MX_QUADSPI_Init+0x44>)
 8002fe2:	2204      	movs	r2, #4
 8002fe4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8002fe6:	4b0b      	ldr	r3, [pc, #44]	@ (8003014 <MX_QUADSPI_Init+0x44>)
 8002fe8:	2210      	movs	r2, #16
 8002fea:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8002fec:	4b09      	ldr	r3, [pc, #36]	@ (8003014 <MX_QUADSPI_Init+0x44>)
 8002fee:	2217      	movs	r2, #23
 8002ff0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8002ff2:	4b08      	ldr	r3, [pc, #32]	@ (8003014 <MX_QUADSPI_Init+0x44>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8002ff8:	4b06      	ldr	r3, [pc, #24]	@ (8003014 <MX_QUADSPI_Init+0x44>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8002ffe:	4805      	ldr	r0, [pc, #20]	@ (8003014 <MX_QUADSPI_Init+0x44>)
 8003000:	f003 f97e 	bl	8006300 <HAL_QSPI_Init>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d001      	beq.n	800300e <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 800300a:	f000 fa3f 	bl	800348c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800300e:	bf00      	nop
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	200004dc 	.word	0x200004dc
 8003018:	a0001000 	.word	0xa0001000

0800301c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003020:	4b14      	ldr	r3, [pc, #80]	@ (8003074 <MX_USART3_UART_Init+0x58>)
 8003022:	4a15      	ldr	r2, [pc, #84]	@ (8003078 <MX_USART3_UART_Init+0x5c>)
 8003024:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003026:	4b13      	ldr	r3, [pc, #76]	@ (8003074 <MX_USART3_UART_Init+0x58>)
 8003028:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800302c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800302e:	4b11      	ldr	r3, [pc, #68]	@ (8003074 <MX_USART3_UART_Init+0x58>)
 8003030:	2200      	movs	r2, #0
 8003032:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003034:	4b0f      	ldr	r3, [pc, #60]	@ (8003074 <MX_USART3_UART_Init+0x58>)
 8003036:	2200      	movs	r2, #0
 8003038:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800303a:	4b0e      	ldr	r3, [pc, #56]	@ (8003074 <MX_USART3_UART_Init+0x58>)
 800303c:	2200      	movs	r2, #0
 800303e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003040:	4b0c      	ldr	r3, [pc, #48]	@ (8003074 <MX_USART3_UART_Init+0x58>)
 8003042:	220c      	movs	r2, #12
 8003044:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003046:	4b0b      	ldr	r3, [pc, #44]	@ (8003074 <MX_USART3_UART_Init+0x58>)
 8003048:	2200      	movs	r2, #0
 800304a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800304c:	4b09      	ldr	r3, [pc, #36]	@ (8003074 <MX_USART3_UART_Init+0x58>)
 800304e:	2200      	movs	r2, #0
 8003050:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003052:	4b08      	ldr	r3, [pc, #32]	@ (8003074 <MX_USART3_UART_Init+0x58>)
 8003054:	2200      	movs	r2, #0
 8003056:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003058:	4b06      	ldr	r3, [pc, #24]	@ (8003074 <MX_USART3_UART_Init+0x58>)
 800305a:	2200      	movs	r2, #0
 800305c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800305e:	4805      	ldr	r0, [pc, #20]	@ (8003074 <MX_USART3_UART_Init+0x58>)
 8003060:	f005 f914 	bl	800828c <HAL_UART_Init>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d001      	beq.n	800306e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800306a:	f000 fa0f 	bl	800348c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800306e:	bf00      	nop
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	20000520 	.word	0x20000520
 8003078:	40004800 	.word	0x40004800

0800307c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8003080:	4b14      	ldr	r3, [pc, #80]	@ (80030d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003082:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8003086:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8003088:	4b12      	ldr	r3, [pc, #72]	@ (80030d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800308a:	2206      	movs	r2, #6
 800308c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800308e:	4b11      	ldr	r3, [pc, #68]	@ (80030d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003090:	2202      	movs	r2, #2
 8003092:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003094:	4b0f      	ldr	r3, [pc, #60]	@ (80030d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003096:	2202      	movs	r2, #2
 8003098:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800309a:	4b0e      	ldr	r3, [pc, #56]	@ (80030d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800309c:	2200      	movs	r2, #0
 800309e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80030a0:	4b0c      	ldr	r3, [pc, #48]	@ (80030d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80030a6:	4b0b      	ldr	r3, [pc, #44]	@ (80030d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80030ac:	4b09      	ldr	r3, [pc, #36]	@ (80030d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80030b2:	4b08      	ldr	r3, [pc, #32]	@ (80030d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80030b8:	4b06      	ldr	r3, [pc, #24]	@ (80030d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80030be:	4805      	ldr	r0, [pc, #20]	@ (80030d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80030c0:	f002 ff67 	bl	8005f92 <HAL_PCD_Init>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80030ca:	f000 f9df 	bl	800348c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80030ce:	bf00      	nop
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	200005a8 	.word	0x200005a8

080030d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b08a      	sub	sp, #40	@ 0x28
 80030dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030de:	f107 0314 	add.w	r3, r7, #20
 80030e2:	2200      	movs	r2, #0
 80030e4:	601a      	str	r2, [r3, #0]
 80030e6:	605a      	str	r2, [r3, #4]
 80030e8:	609a      	str	r2, [r3, #8]
 80030ea:	60da      	str	r2, [r3, #12]
 80030ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80030ee:	4bbd      	ldr	r3, [pc, #756]	@ (80033e4 <MX_GPIO_Init+0x30c>)
 80030f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030f2:	4abc      	ldr	r2, [pc, #752]	@ (80033e4 <MX_GPIO_Init+0x30c>)
 80030f4:	f043 0310 	orr.w	r3, r3, #16
 80030f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80030fa:	4bba      	ldr	r3, [pc, #744]	@ (80033e4 <MX_GPIO_Init+0x30c>)
 80030fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030fe:	f003 0310 	and.w	r3, r3, #16
 8003102:	613b      	str	r3, [r7, #16]
 8003104:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003106:	4bb7      	ldr	r3, [pc, #732]	@ (80033e4 <MX_GPIO_Init+0x30c>)
 8003108:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800310a:	4ab6      	ldr	r2, [pc, #728]	@ (80033e4 <MX_GPIO_Init+0x30c>)
 800310c:	f043 0304 	orr.w	r3, r3, #4
 8003110:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003112:	4bb4      	ldr	r3, [pc, #720]	@ (80033e4 <MX_GPIO_Init+0x30c>)
 8003114:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003116:	f003 0304 	and.w	r3, r3, #4
 800311a:	60fb      	str	r3, [r7, #12]
 800311c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800311e:	4bb1      	ldr	r3, [pc, #708]	@ (80033e4 <MX_GPIO_Init+0x30c>)
 8003120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003122:	4ab0      	ldr	r2, [pc, #704]	@ (80033e4 <MX_GPIO_Init+0x30c>)
 8003124:	f043 0301 	orr.w	r3, r3, #1
 8003128:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800312a:	4bae      	ldr	r3, [pc, #696]	@ (80033e4 <MX_GPIO_Init+0x30c>)
 800312c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	60bb      	str	r3, [r7, #8]
 8003134:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003136:	4bab      	ldr	r3, [pc, #684]	@ (80033e4 <MX_GPIO_Init+0x30c>)
 8003138:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800313a:	4aaa      	ldr	r2, [pc, #680]	@ (80033e4 <MX_GPIO_Init+0x30c>)
 800313c:	f043 0302 	orr.w	r3, r3, #2
 8003140:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003142:	4ba8      	ldr	r3, [pc, #672]	@ (80033e4 <MX_GPIO_Init+0x30c>)
 8003144:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	607b      	str	r3, [r7, #4]
 800314c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800314e:	4ba5      	ldr	r3, [pc, #660]	@ (80033e4 <MX_GPIO_Init+0x30c>)
 8003150:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003152:	4aa4      	ldr	r2, [pc, #656]	@ (80033e4 <MX_GPIO_Init+0x30c>)
 8003154:	f043 0308 	orr.w	r3, r3, #8
 8003158:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800315a:	4ba2      	ldr	r3, [pc, #648]	@ (80033e4 <MX_GPIO_Init+0x30c>)
 800315c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800315e:	f003 0308 	and.w	r3, r3, #8
 8003162:	603b      	str	r3, [r7, #0]
 8003164:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8003166:	2200      	movs	r2, #0
 8003168:	f44f 718a 	mov.w	r1, #276	@ 0x114
 800316c:	489e      	ldr	r0, [pc, #632]	@ (80033e8 <MX_GPIO_Init+0x310>)
 800316e:	f002 f8b5 	bl	80052dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8003172:	2200      	movs	r2, #0
 8003174:	f248 1104 	movw	r1, #33028	@ 0x8104
 8003178:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800317c:	f002 f8ae 	bl	80052dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|SPSGRF_915_SDN_Pin
 8003180:	2200      	movs	r2, #0
 8003182:	f24b 0114 	movw	r1, #45076	@ 0xb014
 8003186:	4899      	ldr	r0, [pc, #612]	@ (80033ec <MX_GPIO_Init+0x314>)
 8003188:	f002 f8a8 	bl	80052dc <HAL_GPIO_WritePin>
                          |ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 800318c:	2200      	movs	r2, #0
 800318e:	f241 0181 	movw	r1, #4225	@ 0x1081
 8003192:	4897      	ldr	r0, [pc, #604]	@ (80033f0 <MX_GPIO_Init+0x318>)
 8003194:	f002 f8a2 	bl	80052dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8003198:	2201      	movs	r2, #1
 800319a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800319e:	4894      	ldr	r0, [pc, #592]	@ (80033f0 <MX_GPIO_Init+0x318>)
 80031a0:	f002 f89c 	bl	80052dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 80031a4:	2200      	movs	r2, #0
 80031a6:	f44f 7110 	mov.w	r1, #576	@ 0x240
 80031aa:	4892      	ldr	r0, [pc, #584]	@ (80033f4 <MX_GPIO_Init+0x31c>)
 80031ac:	f002 f896 	bl	80052dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 80031b0:	2201      	movs	r2, #1
 80031b2:	2120      	movs	r1, #32
 80031b4:	488d      	ldr	r0, [pc, #564]	@ (80033ec <MX_GPIO_Init+0x314>)
 80031b6:	f002 f891 	bl	80052dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 80031ba:	2201      	movs	r2, #1
 80031bc:	2101      	movs	r1, #1
 80031be:	488a      	ldr	r0, [pc, #552]	@ (80033e8 <MX_GPIO_Init+0x310>)
 80031c0:	f002 f88c 	bl	80052dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80031c4:	f240 1315 	movw	r3, #277	@ 0x115
 80031c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031ca:	2301      	movs	r3, #1
 80031cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ce:	2300      	movs	r3, #0
 80031d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031d2:	2300      	movs	r3, #0
 80031d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80031d6:	f107 0314 	add.w	r3, r7, #20
 80031da:	4619      	mov	r1, r3
 80031dc:	4882      	ldr	r0, [pc, #520]	@ (80033e8 <MX_GPIO_Init+0x310>)
 80031de:	f001 fdc7 	bl	8004d70 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 80031e2:	236a      	movs	r3, #106	@ 0x6a
 80031e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80031e6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80031ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ec:	2300      	movs	r3, #0
 80031ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80031f0:	f107 0314 	add.w	r3, r7, #20
 80031f4:	4619      	mov	r1, r3
 80031f6:	487c      	ldr	r0, [pc, #496]	@ (80033e8 <MX_GPIO_Init+0x310>)
 80031f8:	f001 fdba 	bl	8004d70 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 80031fc:	233f      	movs	r3, #63	@ 0x3f
 80031fe:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003200:	230b      	movs	r3, #11
 8003202:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003204:	2300      	movs	r3, #0
 8003206:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003208:	f107 0314 	add.w	r3, r7, #20
 800320c:	4619      	mov	r1, r3
 800320e:	4879      	ldr	r0, [pc, #484]	@ (80033f4 <MX_GPIO_Init+0x31c>)
 8003210:	f001 fdae 	bl	8004d70 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8003214:	2303      	movs	r3, #3
 8003216:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003218:	2302      	movs	r3, #2
 800321a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800321c:	2300      	movs	r3, #0
 800321e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003220:	2303      	movs	r3, #3
 8003222:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003224:	2308      	movs	r3, #8
 8003226:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003228:	f107 0314 	add.w	r3, r7, #20
 800322c:	4619      	mov	r1, r3
 800322e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003232:	f001 fd9d 	bl	8004d70 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8003236:	f248 1304 	movw	r3, #33028	@ 0x8104
 800323a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800323c:	2301      	movs	r3, #1
 800323e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003240:	2300      	movs	r3, #0
 8003242:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003244:	2300      	movs	r3, #0
 8003246:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003248:	f107 0314 	add.w	r3, r7, #20
 800324c:	4619      	mov	r1, r3
 800324e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003252:	f001 fd8d 	bl	8004d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8003256:	2308      	movs	r3, #8
 8003258:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800325a:	2302      	movs	r3, #2
 800325c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800325e:	2300      	movs	r3, #0
 8003260:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003262:	2300      	movs	r3, #0
 8003264:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003266:	2301      	movs	r3, #1
 8003268:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 800326a:	f107 0314 	add.w	r3, r7, #20
 800326e:	4619      	mov	r1, r3
 8003270:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003274:	f001 fd7c 	bl	8004d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8003278:	2310      	movs	r3, #16
 800327a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800327c:	230b      	movs	r3, #11
 800327e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003280:	2300      	movs	r3, #0
 8003282:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8003284:	f107 0314 	add.w	r3, r7, #20
 8003288:	4619      	mov	r1, r3
 800328a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800328e:	f001 fd6f 	bl	8004d70 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8003292:	23e0      	movs	r3, #224	@ 0xe0
 8003294:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003296:	2302      	movs	r3, #2
 8003298:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800329a:	2300      	movs	r3, #0
 800329c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800329e:	2303      	movs	r3, #3
 80032a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80032a2:	2305      	movs	r3, #5
 80032a4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032a6:	f107 0314 	add.w	r3, r7, #20
 80032aa:	4619      	mov	r1, r3
 80032ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80032b0:	f001 fd5e 	bl	8004d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 80032b4:	2301      	movs	r3, #1
 80032b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80032b8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80032bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032be:	2300      	movs	r3, #0
 80032c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80032c2:	f107 0314 	add.w	r3, r7, #20
 80032c6:	4619      	mov	r1, r3
 80032c8:	4848      	ldr	r0, [pc, #288]	@ (80033ec <MX_GPIO_Init+0x314>)
 80032ca:	f001 fd51 	bl	8004d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80032ce:	2302      	movs	r3, #2
 80032d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80032d2:	230b      	movs	r3, #11
 80032d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d6:	2300      	movs	r3, #0
 80032d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80032da:	f107 0314 	add.w	r3, r7, #20
 80032de:	4619      	mov	r1, r3
 80032e0:	4842      	ldr	r0, [pc, #264]	@ (80033ec <MX_GPIO_Init+0x314>)
 80032e2:	f001 fd45 	bl	8004d70 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin SPSGRF_915_SDN_Pin
                           ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|SPSGRF_915_SDN_Pin
 80032e6:	f24b 0334 	movw	r3, #45108	@ 0xb034
 80032ea:	617b      	str	r3, [r7, #20]
                          |ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032ec:	2301      	movs	r3, #1
 80032ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f0:	2300      	movs	r3, #0
 80032f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032f4:	2300      	movs	r3, #0
 80032f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032f8:	f107 0314 	add.w	r3, r7, #20
 80032fc:	4619      	mov	r1, r3
 80032fe:	483b      	ldr	r0, [pc, #236]	@ (80033ec <MX_GPIO_Init+0x314>)
 8003300:	f001 fd36 	bl	8004d70 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8003304:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 8003308:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800330a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800330e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003310:	2300      	movs	r3, #0
 8003312:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003314:	f107 0314 	add.w	r3, r7, #20
 8003318:	4619      	mov	r1, r3
 800331a:	4835      	ldr	r0, [pc, #212]	@ (80033f0 <MX_GPIO_Init+0x318>)
 800331c:	f001 fd28 	bl	8004d70 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8003320:	f243 0381 	movw	r3, #12417	@ 0x3081
 8003324:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003326:	2301      	movs	r3, #1
 8003328:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800332a:	2300      	movs	r3, #0
 800332c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800332e:	2300      	movs	r3, #0
 8003330:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003332:	f107 0314 	add.w	r3, r7, #20
 8003336:	4619      	mov	r1, r3
 8003338:	482d      	ldr	r0, [pc, #180]	@ (80033f0 <MX_GPIO_Init+0x318>)
 800333a:	f001 fd19 	bl	8004d70 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 800333e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8003342:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003344:	2301      	movs	r3, #1
 8003346:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003348:	2300      	movs	r3, #0
 800334a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800334c:	2300      	movs	r3, #0
 800334e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003350:	f107 0314 	add.w	r3, r7, #20
 8003354:	4619      	mov	r1, r3
 8003356:	4827      	ldr	r0, [pc, #156]	@ (80033f4 <MX_GPIO_Init+0x31c>)
 8003358:	f001 fd0a 	bl	8004d70 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 800335c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8003360:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003362:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003366:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003368:	2300      	movs	r3, #0
 800336a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800336c:	f107 0314 	add.w	r3, r7, #20
 8003370:	4619      	mov	r1, r3
 8003372:	4820      	ldr	r0, [pc, #128]	@ (80033f4 <MX_GPIO_Init+0x31c>)
 8003374:	f001 fcfc 	bl	8004d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8003378:	2302      	movs	r3, #2
 800337a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800337c:	2302      	movs	r3, #2
 800337e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003380:	2300      	movs	r3, #0
 8003382:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003384:	2303      	movs	r3, #3
 8003386:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003388:	2305      	movs	r3, #5
 800338a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 800338c:	f107 0314 	add.w	r3, r7, #20
 8003390:	4619      	mov	r1, r3
 8003392:	4817      	ldr	r0, [pc, #92]	@ (80033f0 <MX_GPIO_Init+0x318>)
 8003394:	f001 fcec 	bl	8004d70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8003398:	2378      	movs	r3, #120	@ 0x78
 800339a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800339c:	2302      	movs	r3, #2
 800339e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a0:	2300      	movs	r3, #0
 80033a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033a4:	2303      	movs	r3, #3
 80033a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80033a8:	2307      	movs	r3, #7
 80033aa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033ac:	f107 0314 	add.w	r3, r7, #20
 80033b0:	4619      	mov	r1, r3
 80033b2:	480f      	ldr	r0, [pc, #60]	@ (80033f0 <MX_GPIO_Init+0x318>)
 80033b4:	f001 fcdc 	bl	8004d70 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80033b8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80033bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80033be:	2312      	movs	r3, #18
 80033c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c2:	2300      	movs	r3, #0
 80033c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033c6:	2303      	movs	r3, #3
 80033c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80033ca:	2304      	movs	r3, #4
 80033cc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033ce:	f107 0314 	add.w	r3, r7, #20
 80033d2:	4619      	mov	r1, r3
 80033d4:	4805      	ldr	r0, [pc, #20]	@ (80033ec <MX_GPIO_Init+0x314>)
 80033d6:	f001 fccb 	bl	8004d70 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80033da:	2200      	movs	r2, #0
 80033dc:	2105      	movs	r1, #5
 80033de:	2017      	movs	r0, #23
 80033e0:	e00a      	b.n	80033f8 <MX_GPIO_Init+0x320>
 80033e2:	bf00      	nop
 80033e4:	40021000 	.word	0x40021000
 80033e8:	48001000 	.word	0x48001000
 80033ec:	48000400 	.word	0x48000400
 80033f0:	48000c00 	.word	0x48000c00
 80033f4:	48000800 	.word	0x48000800
 80033f8:	f001 fb19 	bl	8004a2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80033fc:	2017      	movs	r0, #23
 80033fe:	f001 fb32 	bl	8004a66 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8003402:	2200      	movs	r2, #0
 8003404:	2105      	movs	r1, #5
 8003406:	2028      	movs	r0, #40	@ 0x28
 8003408:	f001 fb11 	bl	8004a2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800340c:	2028      	movs	r0, #40	@ 0x28
 800340e:	f001 fb2a 	bl	8004a66 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003412:	bf00      	nop
 8003414:	3728      	adds	r7, #40	@ 0x28
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop

0800341c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	MX_BlueNRG_MS_Process();
 8003424:	f7fd fba8 	bl	8000b78 <MX_BlueNRG_MS_Process>
    osDelay(110);
 8003428:	206e      	movs	r0, #110	@ 0x6e
 800342a:	f007 fa0b 	bl	800a844 <osDelay>
	MX_BlueNRG_MS_Process();
 800342e:	bf00      	nop
 8003430:	e7f8      	b.n	8003424 <StartDefaultTask+0x8>
	...

08003434 <StartTask02>:
/* USER CODE END Header_StartTask02 */
uint8_t sample_rate = 1;
uint8_t pio = 0;

void StartTask02(void const * argument)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
      pio = sample_rate + 1;
 800343c:	4b09      	ldr	r3, [pc, #36]	@ (8003464 <StartTask02+0x30>)
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	3301      	adds	r3, #1
 8003442:	b2da      	uxtb	r2, r3
 8003444:	4b08      	ldr	r3, [pc, #32]	@ (8003468 <StartTask02+0x34>)
 8003446:	701a      	strb	r2, [r3, #0]

      osDelay(100 * pio);
 8003448:	4b07      	ldr	r3, [pc, #28]	@ (8003468 <StartTask02+0x34>)
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	461a      	mov	r2, r3
 800344e:	2364      	movs	r3, #100	@ 0x64
 8003450:	fb02 f303 	mul.w	r3, r2, r3
 8003454:	4618      	mov	r0, r3
 8003456:	f007 f9f5 	bl	800a844 <osDelay>

      ACC_DATA_Update();
 800345a:	f7fe fff3 	bl	8002444 <ACC_DATA_Update>
  {
 800345e:	bf00      	nop
 8003460:	e7ec      	b.n	800343c <StartTask02+0x8>
 8003462:	bf00      	nop
 8003464:	20000002 	.word	0x20000002
 8003468:	20002bec 	.word	0x20002bec

0800346c <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(20);
 8003474:	2014      	movs	r0, #20
 8003476:	f007 f9e5 	bl	800a844 <osDelay>
 800347a:	e7fb      	b.n	8003474 <StartTask03+0x8>

0800347c <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void const * argument)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(50);
 8003484:	2032      	movs	r0, #50	@ 0x32
 8003486:	f007 f9dd 	bl	800a844 <osDelay>
 800348a:	e7fb      	b.n	8003484 <StartTask04+0x8>

0800348c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800348c:	b480      	push	{r7}
 800348e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003490:	b672      	cpsid	i
}
 8003492:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003494:	bf00      	nop
 8003496:	e7fd      	b.n	8003494 <Error_Handler+0x8>

08003498 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800349e:	4b11      	ldr	r3, [pc, #68]	@ (80034e4 <HAL_MspInit+0x4c>)
 80034a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034a2:	4a10      	ldr	r2, [pc, #64]	@ (80034e4 <HAL_MspInit+0x4c>)
 80034a4:	f043 0301 	orr.w	r3, r3, #1
 80034a8:	6613      	str	r3, [r2, #96]	@ 0x60
 80034aa:	4b0e      	ldr	r3, [pc, #56]	@ (80034e4 <HAL_MspInit+0x4c>)
 80034ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	607b      	str	r3, [r7, #4]
 80034b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80034b6:	4b0b      	ldr	r3, [pc, #44]	@ (80034e4 <HAL_MspInit+0x4c>)
 80034b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034ba:	4a0a      	ldr	r2, [pc, #40]	@ (80034e4 <HAL_MspInit+0x4c>)
 80034bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80034c2:	4b08      	ldr	r3, [pc, #32]	@ (80034e4 <HAL_MspInit+0x4c>)
 80034c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034ca:	603b      	str	r3, [r7, #0]
 80034cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80034ce:	2200      	movs	r2, #0
 80034d0:	210f      	movs	r1, #15
 80034d2:	f06f 0001 	mvn.w	r0, #1
 80034d6:	f001 faaa 	bl	8004a2e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80034da:	bf00      	nop
 80034dc:	3708      	adds	r7, #8
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	40021000 	.word	0x40021000

080034e8 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b0ac      	sub	sp, #176	@ 0xb0
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034f0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80034f4:	2200      	movs	r2, #0
 80034f6:	601a      	str	r2, [r3, #0]
 80034f8:	605a      	str	r2, [r3, #4]
 80034fa:	609a      	str	r2, [r3, #8]
 80034fc:	60da      	str	r2, [r3, #12]
 80034fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003500:	f107 0314 	add.w	r3, r7, #20
 8003504:	2288      	movs	r2, #136	@ 0x88
 8003506:	2100      	movs	r1, #0
 8003508:	4618      	mov	r0, r3
 800350a:	f008 fe55 	bl	800c1b8 <memset>
  if(DFSDM1_Init == 0)
 800350e:	4b25      	ldr	r3, [pc, #148]	@ (80035a4 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d142      	bne.n	800359c <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8003516:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800351a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 800351c:	2300      	movs	r3, #0
 800351e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003522:	f107 0314 	add.w	r3, r7, #20
 8003526:	4618      	mov	r0, r3
 8003528:	f003 fda6 	bl	8007078 <HAL_RCCEx_PeriphCLKConfig>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d001      	beq.n	8003536 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8003532:	f7ff ffab 	bl	800348c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8003536:	4b1c      	ldr	r3, [pc, #112]	@ (80035a8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8003538:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800353a:	4a1b      	ldr	r2, [pc, #108]	@ (80035a8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800353c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003540:	6613      	str	r3, [r2, #96]	@ 0x60
 8003542:	4b19      	ldr	r3, [pc, #100]	@ (80035a8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8003544:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003546:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800354a:	613b      	str	r3, [r7, #16]
 800354c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800354e:	4b16      	ldr	r3, [pc, #88]	@ (80035a8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8003550:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003552:	4a15      	ldr	r2, [pc, #84]	@ (80035a8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8003554:	f043 0310 	orr.w	r3, r3, #16
 8003558:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800355a:	4b13      	ldr	r3, [pc, #76]	@ (80035a8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800355c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800355e:	f003 0310 	and.w	r3, r3, #16
 8003562:	60fb      	str	r3, [r7, #12]
 8003564:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8003566:	f44f 7320 	mov.w	r3, #640	@ 0x280
 800356a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800356e:	2302      	movs	r3, #2
 8003570:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003574:	2300      	movs	r3, #0
 8003576:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800357a:	2300      	movs	r3, #0
 800357c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8003580:	2306      	movs	r3, #6
 8003582:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003586:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800358a:	4619      	mov	r1, r3
 800358c:	4807      	ldr	r0, [pc, #28]	@ (80035ac <HAL_DFSDM_ChannelMspInit+0xc4>)
 800358e:	f001 fbef 	bl	8004d70 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 8003592:	4b04      	ldr	r3, [pc, #16]	@ (80035a4 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	3301      	adds	r3, #1
 8003598:	4a02      	ldr	r2, [pc, #8]	@ (80035a4 <HAL_DFSDM_ChannelMspInit+0xbc>)
 800359a:	6013      	str	r3, [r2, #0]
  }

}
 800359c:	bf00      	nop
 800359e:	37b0      	adds	r7, #176	@ 0xb0
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	20002bf0 	.word	0x20002bf0
 80035a8:	40021000 	.word	0x40021000
 80035ac:	48001000 	.word	0x48001000

080035b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b0ac      	sub	sp, #176	@ 0xb0
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035b8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80035bc:	2200      	movs	r2, #0
 80035be:	601a      	str	r2, [r3, #0]
 80035c0:	605a      	str	r2, [r3, #4]
 80035c2:	609a      	str	r2, [r3, #8]
 80035c4:	60da      	str	r2, [r3, #12]
 80035c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80035c8:	f107 0314 	add.w	r3, r7, #20
 80035cc:	2288      	movs	r2, #136	@ 0x88
 80035ce:	2100      	movs	r1, #0
 80035d0:	4618      	mov	r0, r3
 80035d2:	f008 fdf1 	bl	800c1b8 <memset>
  if(hi2c->Instance==I2C2)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a21      	ldr	r2, [pc, #132]	@ (8003660 <HAL_I2C_MspInit+0xb0>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d13b      	bne.n	8003658 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80035e0:	2380      	movs	r3, #128	@ 0x80
 80035e2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80035e4:	2300      	movs	r3, #0
 80035e6:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80035e8:	f107 0314 	add.w	r3, r7, #20
 80035ec:	4618      	mov	r0, r3
 80035ee:	f003 fd43 	bl	8007078 <HAL_RCCEx_PeriphCLKConfig>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d001      	beq.n	80035fc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80035f8:	f7ff ff48 	bl	800348c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035fc:	4b19      	ldr	r3, [pc, #100]	@ (8003664 <HAL_I2C_MspInit+0xb4>)
 80035fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003600:	4a18      	ldr	r2, [pc, #96]	@ (8003664 <HAL_I2C_MspInit+0xb4>)
 8003602:	f043 0302 	orr.w	r3, r3, #2
 8003606:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003608:	4b16      	ldr	r3, [pc, #88]	@ (8003664 <HAL_I2C_MspInit+0xb4>)
 800360a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800360c:	f003 0302 	and.w	r3, r3, #2
 8003610:	613b      	str	r3, [r7, #16]
 8003612:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8003614:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003618:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800361c:	2312      	movs	r3, #18
 800361e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003622:	2301      	movs	r3, #1
 8003624:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003628:	2303      	movs	r3, #3
 800362a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800362e:	2304      	movs	r3, #4
 8003630:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003634:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003638:	4619      	mov	r1, r3
 800363a:	480b      	ldr	r0, [pc, #44]	@ (8003668 <HAL_I2C_MspInit+0xb8>)
 800363c:	f001 fb98 	bl	8004d70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003640:	4b08      	ldr	r3, [pc, #32]	@ (8003664 <HAL_I2C_MspInit+0xb4>)
 8003642:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003644:	4a07      	ldr	r2, [pc, #28]	@ (8003664 <HAL_I2C_MspInit+0xb4>)
 8003646:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800364a:	6593      	str	r3, [r2, #88]	@ 0x58
 800364c:	4b05      	ldr	r3, [pc, #20]	@ (8003664 <HAL_I2C_MspInit+0xb4>)
 800364e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003650:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003654:	60fb      	str	r3, [r7, #12]
 8003656:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8003658:	bf00      	nop
 800365a:	37b0      	adds	r7, #176	@ 0xb0
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	40005800 	.word	0x40005800
 8003664:	40021000 	.word	0x40021000
 8003668:	48000400 	.word	0x48000400

0800366c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a0b      	ldr	r2, [pc, #44]	@ (80036a8 <HAL_I2C_MspDeInit+0x3c>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d10f      	bne.n	800369e <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 800367e:	4b0b      	ldr	r3, [pc, #44]	@ (80036ac <HAL_I2C_MspDeInit+0x40>)
 8003680:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003682:	4a0a      	ldr	r2, [pc, #40]	@ (80036ac <HAL_I2C_MspDeInit+0x40>)
 8003684:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8003688:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 800368a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800368e:	4808      	ldr	r0, [pc, #32]	@ (80036b0 <HAL_I2C_MspDeInit+0x44>)
 8003690:	f001 fd18 	bl	80050c4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 8003694:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003698:	4805      	ldr	r0, [pc, #20]	@ (80036b0 <HAL_I2C_MspDeInit+0x44>)
 800369a:	f001 fd13 	bl	80050c4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 800369e:	bf00      	nop
 80036a0:	3708      	adds	r7, #8
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	40005800 	.word	0x40005800
 80036ac:	40021000 	.word	0x40021000
 80036b0:	48000400 	.word	0x48000400

080036b4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b08a      	sub	sp, #40	@ 0x28
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036bc:	f107 0314 	add.w	r3, r7, #20
 80036c0:	2200      	movs	r2, #0
 80036c2:	601a      	str	r2, [r3, #0]
 80036c4:	605a      	str	r2, [r3, #4]
 80036c6:	609a      	str	r2, [r3, #8]
 80036c8:	60da      	str	r2, [r3, #12]
 80036ca:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a17      	ldr	r2, [pc, #92]	@ (8003730 <HAL_QSPI_MspInit+0x7c>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d128      	bne.n	8003728 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80036d6:	4b17      	ldr	r3, [pc, #92]	@ (8003734 <HAL_QSPI_MspInit+0x80>)
 80036d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036da:	4a16      	ldr	r2, [pc, #88]	@ (8003734 <HAL_QSPI_MspInit+0x80>)
 80036dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036e0:	6513      	str	r3, [r2, #80]	@ 0x50
 80036e2:	4b14      	ldr	r3, [pc, #80]	@ (8003734 <HAL_QSPI_MspInit+0x80>)
 80036e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036ea:	613b      	str	r3, [r7, #16]
 80036ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80036ee:	4b11      	ldr	r3, [pc, #68]	@ (8003734 <HAL_QSPI_MspInit+0x80>)
 80036f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036f2:	4a10      	ldr	r2, [pc, #64]	@ (8003734 <HAL_QSPI_MspInit+0x80>)
 80036f4:	f043 0310 	orr.w	r3, r3, #16
 80036f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80036fa:	4b0e      	ldr	r3, [pc, #56]	@ (8003734 <HAL_QSPI_MspInit+0x80>)
 80036fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036fe:	f003 0310 	and.w	r3, r3, #16
 8003702:	60fb      	str	r3, [r7, #12]
 8003704:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8003706:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 800370a:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800370c:	2302      	movs	r3, #2
 800370e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003710:	2300      	movs	r3, #0
 8003712:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003714:	2303      	movs	r3, #3
 8003716:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8003718:	230a      	movs	r3, #10
 800371a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800371c:	f107 0314 	add.w	r3, r7, #20
 8003720:	4619      	mov	r1, r3
 8003722:	4805      	ldr	r0, [pc, #20]	@ (8003738 <HAL_QSPI_MspInit+0x84>)
 8003724:	f001 fb24 	bl	8004d70 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8003728:	bf00      	nop
 800372a:	3728      	adds	r7, #40	@ 0x28
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}
 8003730:	a0001000 	.word	0xa0001000
 8003734:	40021000 	.word	0x40021000
 8003738:	48001000 	.word	0x48001000

0800373c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b0ac      	sub	sp, #176	@ 0xb0
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003744:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003748:	2200      	movs	r2, #0
 800374a:	601a      	str	r2, [r3, #0]
 800374c:	605a      	str	r2, [r3, #4]
 800374e:	609a      	str	r2, [r3, #8]
 8003750:	60da      	str	r2, [r3, #12]
 8003752:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003754:	f107 0314 	add.w	r3, r7, #20
 8003758:	2288      	movs	r2, #136	@ 0x88
 800375a:	2100      	movs	r1, #0
 800375c:	4618      	mov	r0, r3
 800375e:	f008 fd2b 	bl	800c1b8 <memset>
  if(huart->Instance==USART3)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a21      	ldr	r2, [pc, #132]	@ (80037ec <HAL_UART_MspInit+0xb0>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d13b      	bne.n	80037e4 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800376c:	2304      	movs	r3, #4
 800376e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003770:	2300      	movs	r3, #0
 8003772:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003774:	f107 0314 	add.w	r3, r7, #20
 8003778:	4618      	mov	r0, r3
 800377a:	f003 fc7d 	bl	8007078 <HAL_RCCEx_PeriphCLKConfig>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d001      	beq.n	8003788 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003784:	f7ff fe82 	bl	800348c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003788:	4b19      	ldr	r3, [pc, #100]	@ (80037f0 <HAL_UART_MspInit+0xb4>)
 800378a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800378c:	4a18      	ldr	r2, [pc, #96]	@ (80037f0 <HAL_UART_MspInit+0xb4>)
 800378e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003792:	6593      	str	r3, [r2, #88]	@ 0x58
 8003794:	4b16      	ldr	r3, [pc, #88]	@ (80037f0 <HAL_UART_MspInit+0xb4>)
 8003796:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003798:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800379c:	613b      	str	r3, [r7, #16]
 800379e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80037a0:	4b13      	ldr	r3, [pc, #76]	@ (80037f0 <HAL_UART_MspInit+0xb4>)
 80037a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037a4:	4a12      	ldr	r2, [pc, #72]	@ (80037f0 <HAL_UART_MspInit+0xb4>)
 80037a6:	f043 0308 	orr.w	r3, r3, #8
 80037aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80037ac:	4b10      	ldr	r3, [pc, #64]	@ (80037f0 <HAL_UART_MspInit+0xb4>)
 80037ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037b0:	f003 0308 	and.w	r3, r3, #8
 80037b4:	60fb      	str	r3, [r7, #12]
 80037b6:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80037b8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80037bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037c0:	2302      	movs	r3, #2
 80037c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037c6:	2300      	movs	r3, #0
 80037c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037cc:	2303      	movs	r3, #3
 80037ce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80037d2:	2307      	movs	r3, #7
 80037d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80037d8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80037dc:	4619      	mov	r1, r3
 80037de:	4805      	ldr	r0, [pc, #20]	@ (80037f4 <HAL_UART_MspInit+0xb8>)
 80037e0:	f001 fac6 	bl	8004d70 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 80037e4:	bf00      	nop
 80037e6:	37b0      	adds	r7, #176	@ 0xb0
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	40004800 	.word	0x40004800
 80037f0:	40021000 	.word	0x40021000
 80037f4:	48000c00 	.word	0x48000c00

080037f8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b0ac      	sub	sp, #176	@ 0xb0
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003800:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003804:	2200      	movs	r2, #0
 8003806:	601a      	str	r2, [r3, #0]
 8003808:	605a      	str	r2, [r3, #4]
 800380a:	609a      	str	r2, [r3, #8]
 800380c:	60da      	str	r2, [r3, #12]
 800380e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003810:	f107 0314 	add.w	r3, r7, #20
 8003814:	2288      	movs	r2, #136	@ 0x88
 8003816:	2100      	movs	r1, #0
 8003818:	4618      	mov	r0, r3
 800381a:	f008 fccd 	bl	800c1b8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003826:	d17c      	bne.n	8003922 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8003828:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800382c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800382e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003832:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8003836:	2301      	movs	r3, #1
 8003838:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800383a:	2301      	movs	r3, #1
 800383c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800383e:	2318      	movs	r3, #24
 8003840:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8003842:	2307      	movs	r3, #7
 8003844:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8003846:	2302      	movs	r3, #2
 8003848:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800384a:	2302      	movs	r3, #2
 800384c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800384e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003852:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003854:	f107 0314 	add.w	r3, r7, #20
 8003858:	4618      	mov	r0, r3
 800385a:	f003 fc0d 	bl	8007078 <HAL_RCCEx_PeriphCLKConfig>
 800385e:	4603      	mov	r3, r0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d001      	beq.n	8003868 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8003864:	f7ff fe12 	bl	800348c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003868:	4b30      	ldr	r3, [pc, #192]	@ (800392c <HAL_PCD_MspInit+0x134>)
 800386a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800386c:	4a2f      	ldr	r2, [pc, #188]	@ (800392c <HAL_PCD_MspInit+0x134>)
 800386e:	f043 0301 	orr.w	r3, r3, #1
 8003872:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003874:	4b2d      	ldr	r3, [pc, #180]	@ (800392c <HAL_PCD_MspInit+0x134>)
 8003876:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003878:	f003 0301 	and.w	r3, r3, #1
 800387c:	613b      	str	r3, [r7, #16]
 800387e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8003880:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003884:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003888:	2300      	movs	r3, #0
 800388a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800388e:	2300      	movs	r3, #0
 8003890:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003894:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003898:	4619      	mov	r1, r3
 800389a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800389e:	f001 fa67 	bl	8004d70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80038a2:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80038a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038aa:	2302      	movs	r3, #2
 80038ac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038b0:	2300      	movs	r3, #0
 80038b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038b6:	2303      	movs	r3, #3
 80038b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80038bc:	230a      	movs	r3, #10
 80038be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038c2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80038c6:	4619      	mov	r1, r3
 80038c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80038cc:	f001 fa50 	bl	8004d70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80038d0:	4b16      	ldr	r3, [pc, #88]	@ (800392c <HAL_PCD_MspInit+0x134>)
 80038d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038d4:	4a15      	ldr	r2, [pc, #84]	@ (800392c <HAL_PCD_MspInit+0x134>)
 80038d6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80038da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80038dc:	4b13      	ldr	r3, [pc, #76]	@ (800392c <HAL_PCD_MspInit+0x134>)
 80038de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80038e4:	60fb      	str	r3, [r7, #12]
 80038e6:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038e8:	4b10      	ldr	r3, [pc, #64]	@ (800392c <HAL_PCD_MspInit+0x134>)
 80038ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d114      	bne.n	800391e <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038f4:	4b0d      	ldr	r3, [pc, #52]	@ (800392c <HAL_PCD_MspInit+0x134>)
 80038f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038f8:	4a0c      	ldr	r2, [pc, #48]	@ (800392c <HAL_PCD_MspInit+0x134>)
 80038fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8003900:	4b0a      	ldr	r3, [pc, #40]	@ (800392c <HAL_PCD_MspInit+0x134>)
 8003902:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003904:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003908:	60bb      	str	r3, [r7, #8]
 800390a:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800390c:	f002 fce8 	bl	80062e0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003910:	4b06      	ldr	r3, [pc, #24]	@ (800392c <HAL_PCD_MspInit+0x134>)
 8003912:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003914:	4a05      	ldr	r2, [pc, #20]	@ (800392c <HAL_PCD_MspInit+0x134>)
 8003916:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800391a:	6593      	str	r3, [r2, #88]	@ 0x58

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 800391c:	e001      	b.n	8003922 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 800391e:	f002 fcdf 	bl	80062e0 <HAL_PWREx_EnableVddUSB>
}
 8003922:	bf00      	nop
 8003924:	37b0      	adds	r7, #176	@ 0xb0
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	40021000 	.word	0x40021000

08003930 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003930:	b480      	push	{r7}
 8003932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003934:	bf00      	nop
 8003936:	e7fd      	b.n	8003934 <NMI_Handler+0x4>

08003938 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003938:	b480      	push	{r7}
 800393a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800393c:	bf00      	nop
 800393e:	e7fd      	b.n	800393c <HardFault_Handler+0x4>

08003940 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003940:	b480      	push	{r7}
 8003942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003944:	bf00      	nop
 8003946:	e7fd      	b.n	8003944 <MemManage_Handler+0x4>

08003948 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003948:	b480      	push	{r7}
 800394a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800394c:	bf00      	nop
 800394e:	e7fd      	b.n	800394c <BusFault_Handler+0x4>

08003950 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003950:	b480      	push	{r7}
 8003952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003954:	bf00      	nop
 8003956:	e7fd      	b.n	8003954 <UsageFault_Handler+0x4>

08003958 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003958:	b480      	push	{r7}
 800395a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800395c:	bf00      	nop
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr

08003966 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003966:	b580      	push	{r7, lr}
 8003968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800396a:	f000 ff41 	bl	80047f0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800396e:	f007 fcf9 	bl	800b364 <xTaskGetSchedulerState>
 8003972:	4603      	mov	r3, r0
 8003974:	2b01      	cmp	r3, #1
 8003976:	d001      	beq.n	800397c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8003978:	f007 ff36 	bl	800b7e8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800397c:	bf00      	nop
 800397e:	bd80      	pop	{r7, pc}

08003980 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void) //blue tooth interrupt
{
 8003980:	b580      	push	{r7, lr}
 8003982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8003984:	2020      	movs	r0, #32
 8003986:	f001 fcdb 	bl	8005340 <HAL_GPIO_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_6); //blue tooth module
 800398a:	4806      	ldr	r0, [pc, #24]	@ (80039a4 <EXTI9_5_IRQHandler+0x24>)
 800398c:	f001 f9c0 	bl	8004d10 <HAL_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8003990:	2080      	movs	r0, #128	@ 0x80
 8003992:	f001 fcd5 	bl	8005340 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8003996:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800399a:	f001 fcd1 	bl	8005340 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800399e:	bf00      	nop
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	20000148 	.word	0x20000148

080039a8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 80039ac:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80039b0:	f001 fcc6 	bl	8005340 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 80039b4:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80039b8:	f001 fcc2 	bl	8005340 <HAL_GPIO_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 80039bc:	4806      	ldr	r0, [pc, #24]	@ (80039d8 <EXTI15_10_IRQHandler+0x30>)
 80039be:	f001 f9a7 	bl	8004d10 <HAL_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 80039c2:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80039c6:	f001 fcbb 	bl	8005340 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 80039ca:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80039ce:	f001 fcb7 	bl	8005340 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80039d2:	bf00      	nop
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	20000010 	.word	0x20000010

080039dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80039dc:	b480      	push	{r7}
 80039de:	af00      	add	r7, sp, #0
  return 1;
 80039e0:	2301      	movs	r3, #1
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <_kill>:

int _kill(int pid, int sig)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80039f6:	f008 fc2d 	bl	800c254 <__errno>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2216      	movs	r2, #22
 80039fe:	601a      	str	r2, [r3, #0]
  return -1;
 8003a00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3708      	adds	r7, #8
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <_exit>:

void _exit (int status)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003a14:	f04f 31ff 	mov.w	r1, #4294967295
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f7ff ffe7 	bl	80039ec <_kill>
  while (1) {}    /* Make sure we hang here */
 8003a1e:	bf00      	nop
 8003a20:	e7fd      	b.n	8003a1e <_exit+0x12>

08003a22 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003a22:	b580      	push	{r7, lr}
 8003a24:	b086      	sub	sp, #24
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	60f8      	str	r0, [r7, #12]
 8003a2a:	60b9      	str	r1, [r7, #8]
 8003a2c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a2e:	2300      	movs	r3, #0
 8003a30:	617b      	str	r3, [r7, #20]
 8003a32:	e00a      	b.n	8003a4a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003a34:	f3af 8000 	nop.w
 8003a38:	4601      	mov	r1, r0
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	1c5a      	adds	r2, r3, #1
 8003a3e:	60ba      	str	r2, [r7, #8]
 8003a40:	b2ca      	uxtb	r2, r1
 8003a42:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	3301      	adds	r3, #1
 8003a48:	617b      	str	r3, [r7, #20]
 8003a4a:	697a      	ldr	r2, [r7, #20]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	dbf0      	blt.n	8003a34 <_read+0x12>
  }

  return len;
 8003a52:	687b      	ldr	r3, [r7, #4]
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3718      	adds	r7, #24
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b086      	sub	sp, #24
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a68:	2300      	movs	r3, #0
 8003a6a:	617b      	str	r3, [r7, #20]
 8003a6c:	e009      	b.n	8003a82 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	1c5a      	adds	r2, r3, #1
 8003a72:	60ba      	str	r2, [r7, #8]
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	4618      	mov	r0, r3
 8003a78:	f000 fa3e 	bl	8003ef8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	3301      	adds	r3, #1
 8003a80:	617b      	str	r3, [r7, #20]
 8003a82:	697a      	ldr	r2, [r7, #20]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	429a      	cmp	r2, r3
 8003a88:	dbf1      	blt.n	8003a6e <_write+0x12>
  }
  return len;
 8003a8a:	687b      	ldr	r3, [r7, #4]
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3718      	adds	r7, #24
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <_close>:

int _close(int file)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003a9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003abc:	605a      	str	r2, [r3, #4]
  return 0;
 8003abe:	2300      	movs	r3, #0
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <_isatty>:

int _isatty(int file)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003ad4:	2301      	movs	r3, #1
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	370c      	adds	r7, #12
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr

08003ae2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003ae2:	b480      	push	{r7}
 8003ae4:	b085      	sub	sp, #20
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	60f8      	str	r0, [r7, #12]
 8003aea:	60b9      	str	r1, [r7, #8]
 8003aec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003aee:	2300      	movs	r3, #0
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3714      	adds	r7, #20
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b086      	sub	sp, #24
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b04:	4a14      	ldr	r2, [pc, #80]	@ (8003b58 <_sbrk+0x5c>)
 8003b06:	4b15      	ldr	r3, [pc, #84]	@ (8003b5c <_sbrk+0x60>)
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b10:	4b13      	ldr	r3, [pc, #76]	@ (8003b60 <_sbrk+0x64>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d102      	bne.n	8003b1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003b18:	4b11      	ldr	r3, [pc, #68]	@ (8003b60 <_sbrk+0x64>)
 8003b1a:	4a12      	ldr	r2, [pc, #72]	@ (8003b64 <_sbrk+0x68>)
 8003b1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b1e:	4b10      	ldr	r3, [pc, #64]	@ (8003b60 <_sbrk+0x64>)
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4413      	add	r3, r2
 8003b26:	693a      	ldr	r2, [r7, #16]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d207      	bcs.n	8003b3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003b2c:	f008 fb92 	bl	800c254 <__errno>
 8003b30:	4603      	mov	r3, r0
 8003b32:	220c      	movs	r2, #12
 8003b34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003b36:	f04f 33ff 	mov.w	r3, #4294967295
 8003b3a:	e009      	b.n	8003b50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b3c:	4b08      	ldr	r3, [pc, #32]	@ (8003b60 <_sbrk+0x64>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b42:	4b07      	ldr	r3, [pc, #28]	@ (8003b60 <_sbrk+0x64>)
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4413      	add	r3, r2
 8003b4a:	4a05      	ldr	r2, [pc, #20]	@ (8003b60 <_sbrk+0x64>)
 8003b4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3718      	adds	r7, #24
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	20018000 	.word	0x20018000
 8003b5c:	00000400 	.word	0x00000400
 8003b60:	20002bf4 	.word	0x20002bf4
 8003b64:	20003eb0 	.word	0x20003eb0

08003b68 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003b6c:	4b06      	ldr	r3, [pc, #24]	@ (8003b88 <SystemInit+0x20>)
 8003b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b72:	4a05      	ldr	r2, [pc, #20]	@ (8003b88 <SystemInit+0x20>)
 8003b74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003b78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8003b7c:	bf00      	nop
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop
 8003b88:	e000ed00 	.word	0xe000ed00

08003b8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003b8c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003bc4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003b90:	f7ff ffea 	bl	8003b68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003b94:	480c      	ldr	r0, [pc, #48]	@ (8003bc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8003b96:	490d      	ldr	r1, [pc, #52]	@ (8003bcc <LoopForever+0xa>)
  ldr r2, =_sidata
 8003b98:	4a0d      	ldr	r2, [pc, #52]	@ (8003bd0 <LoopForever+0xe>)
  movs r3, #0
 8003b9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b9c:	e002      	b.n	8003ba4 <LoopCopyDataInit>

08003b9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ba0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ba2:	3304      	adds	r3, #4

08003ba4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ba4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ba6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ba8:	d3f9      	bcc.n	8003b9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003baa:	4a0a      	ldr	r2, [pc, #40]	@ (8003bd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003bac:	4c0a      	ldr	r4, [pc, #40]	@ (8003bd8 <LoopForever+0x16>)
  movs r3, #0
 8003bae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003bb0:	e001      	b.n	8003bb6 <LoopFillZerobss>

08003bb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003bb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003bb4:	3204      	adds	r2, #4

08003bb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003bb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003bb8:	d3fb      	bcc.n	8003bb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003bba:	f008 fb51 	bl	800c260 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003bbe:	f7ff f8f9 	bl	8002db4 <main>

08003bc2 <LoopForever>:

LoopForever:
    b LoopForever
 8003bc2:	e7fe      	b.n	8003bc2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003bc4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003bc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003bcc:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 8003bd0:	0800d644 	.word	0x0800d644
  ldr r2, =_sbss
 8003bd4:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 8003bd8:	20003eb0 	.word	0x20003eb0

08003bdc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003bdc:	e7fe      	b.n	8003bdc <ADC1_2_IRQHandler>
	...

08003be0 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	4603      	mov	r3, r0
 8003be8:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 8003bea:	79fb      	ldrb	r3, [r7, #7]
 8003bec:	4a04      	ldr	r2, [pc, #16]	@ (8003c00 <BSP_LED_Init+0x20>)
 8003bee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bf2:	4798      	blx	r3
  return BSP_ERROR_NONE;
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3708      	adds	r7, #8
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	0800d540 	.word	0x0800d540

08003c04 <BSP_LED_Toggle>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8003c0e:	79fb      	ldrb	r3, [r7, #7]
 8003c10:	4a06      	ldr	r2, [pc, #24]	@ (8003c2c <BSP_LED_Toggle+0x28>)
 8003c12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c16:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003c1a:	4611      	mov	r1, r2
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f001 fb75 	bl	800530c <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 8003c22:	2300      	movs	r3, #0
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3708      	adds	r7, #8
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	20000008 	.word	0x20000008

08003c30 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b088      	sub	sp, #32
 8003c34:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c36:	4b1c      	ldr	r3, [pc, #112]	@ (8003ca8 <LED_USER_GPIO_Init+0x78>)
 8003c38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c3a:	4a1b      	ldr	r2, [pc, #108]	@ (8003ca8 <LED_USER_GPIO_Init+0x78>)
 8003c3c:	f043 0302 	orr.w	r3, r3, #2
 8003c40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c42:	4b19      	ldr	r3, [pc, #100]	@ (8003ca8 <LED_USER_GPIO_Init+0x78>)
 8003c44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	60bb      	str	r3, [r7, #8]
 8003c4c:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c4e:	f107 030c 	add.w	r3, r7, #12
 8003c52:	2200      	movs	r2, #0
 8003c54:	601a      	str	r2, [r3, #0]
 8003c56:	605a      	str	r2, [r3, #4]
 8003c58:	609a      	str	r2, [r3, #8]
 8003c5a:	60da      	str	r2, [r3, #12]
 8003c5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c5e:	4b12      	ldr	r3, [pc, #72]	@ (8003ca8 <LED_USER_GPIO_Init+0x78>)
 8003c60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c62:	4a11      	ldr	r2, [pc, #68]	@ (8003ca8 <LED_USER_GPIO_Init+0x78>)
 8003c64:	f043 0302 	orr.w	r3, r3, #2
 8003c68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c6a:	4b0f      	ldr	r3, [pc, #60]	@ (8003ca8 <LED_USER_GPIO_Init+0x78>)
 8003c6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	607b      	str	r3, [r7, #4]
 8003c74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 8003c76:	2200      	movs	r2, #0
 8003c78:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003c7c:	480b      	ldr	r0, [pc, #44]	@ (8003cac <LED_USER_GPIO_Init+0x7c>)
 8003c7e:	f001 fb2d 	bl	80052dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 8003c82:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003c86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c90:	2300      	movs	r3, #0
 8003c92:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 8003c94:	f107 030c 	add.w	r3, r7, #12
 8003c98:	4619      	mov	r1, r3
 8003c9a:	4804      	ldr	r0, [pc, #16]	@ (8003cac <LED_USER_GPIO_Init+0x7c>)
 8003c9c:	f001 f868 	bl	8004d70 <HAL_GPIO_Init>

}
 8003ca0:	bf00      	nop
 8003ca2:	3720      	adds	r7, #32
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	40021000 	.word	0x40021000
 8003cac:	48000400 	.word	0x48000400

08003cb0 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	460a      	mov	r2, r1
 8003cba:	71fb      	strb	r3, [r7, #7]
 8003cbc:	4613      	mov	r3, r2
 8003cbe:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 8003cc4:	79fb      	ldrb	r3, [r7, #7]
 8003cc6:	4a1f      	ldr	r2, [pc, #124]	@ (8003d44 <BSP_PB_Init+0x94>)
 8003cc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ccc:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 8003cce:	79bb      	ldrb	r3, [r7, #6]
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d132      	bne.n	8003d3a <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8003cd4:	79fb      	ldrb	r3, [r7, #7]
 8003cd6:	00db      	lsls	r3, r3, #3
 8003cd8:	4a1b      	ldr	r2, [pc, #108]	@ (8003d48 <BSP_PB_Init+0x98>)
 8003cda:	441a      	add	r2, r3
 8003cdc:	79fb      	ldrb	r3, [r7, #7]
 8003cde:	491b      	ldr	r1, [pc, #108]	@ (8003d4c <BSP_PB_Init+0x9c>)
 8003ce0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	4610      	mov	r0, r2
 8003ce8:	f000 fffe 	bl	8004ce8 <HAL_EXTI_GetHandle>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d003      	beq.n	8003cfa <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8003cf2:	f06f 0303 	mvn.w	r3, #3
 8003cf6:	60fb      	str	r3, [r7, #12]
 8003cf8:	e01f      	b.n	8003d3a <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 8003cfa:	79fb      	ldrb	r3, [r7, #7]
 8003cfc:	00db      	lsls	r3, r3, #3
 8003cfe:	4a12      	ldr	r2, [pc, #72]	@ (8003d48 <BSP_PB_Init+0x98>)
 8003d00:	1898      	adds	r0, r3, r2
 8003d02:	79fb      	ldrb	r3, [r7, #7]
 8003d04:	4a12      	ldr	r2, [pc, #72]	@ (8003d50 <BSP_PB_Init+0xa0>)
 8003d06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	2100      	movs	r1, #0
 8003d0e:	f000 ffd1 	bl	8004cb4 <HAL_EXTI_RegisterCallback>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d003      	beq.n	8003d20 <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8003d18:	f06f 0303 	mvn.w	r3, #3
 8003d1c:	60fb      	str	r3, [r7, #12]
 8003d1e:	e00c      	b.n	8003d3a <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8003d20:	2028      	movs	r0, #40	@ 0x28
 8003d22:	79fb      	ldrb	r3, [r7, #7]
 8003d24:	4a0b      	ldr	r2, [pc, #44]	@ (8003d54 <BSP_PB_Init+0xa4>)
 8003d26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	f000 fe7e 	bl	8004a2e <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8003d32:	2328      	movs	r3, #40	@ 0x28
 8003d34:	4618      	mov	r0, r3
 8003d36:	f000 fe96 	bl	8004a66 <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3710      	adds	r7, #16
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	0800d544 	.word	0x0800d544
 8003d48:	20000010 	.word	0x20000010
 8003d4c:	0800d548 	.word	0x0800d548
 8003d50:	0800d54c 	.word	0x0800d54c
 8003d54:	0800d550 	.word	0x0800d550

08003d58 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	4603      	mov	r3, r0
 8003d60:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 8003d62:	79fb      	ldrb	r3, [r7, #7]
 8003d64:	4a09      	ldr	r2, [pc, #36]	@ (8003d8c <BSP_PB_GetState+0x34>)
 8003d66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d6a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003d6e:	4611      	mov	r1, r2
 8003d70:	4618      	mov	r0, r3
 8003d72:	f001 fa9b 	bl	80052ac <HAL_GPIO_ReadPin>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	bf0c      	ite	eq
 8003d7c:	2301      	moveq	r3, #1
 8003d7e:	2300      	movne	r3, #0
 8003d80:	b2db      	uxtb	r3, r3
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3708      	adds	r7, #8
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	2000000c 	.word	0x2000000c

08003d90 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8003d94:	2000      	movs	r0, #0
 8003d96:	f7fe f949 	bl	800202c <BSP_PB_Callback>
}
 8003d9a:	bf00      	nop
 8003d9c:	bd80      	pop	{r7, pc}
	...

08003da0 <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b088      	sub	sp, #32
 8003da4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003da6:	4b19      	ldr	r3, [pc, #100]	@ (8003e0c <BUTTON_USER_GPIO_Init+0x6c>)
 8003da8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003daa:	4a18      	ldr	r2, [pc, #96]	@ (8003e0c <BUTTON_USER_GPIO_Init+0x6c>)
 8003dac:	f043 0304 	orr.w	r3, r3, #4
 8003db0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003db2:	4b16      	ldr	r3, [pc, #88]	@ (8003e0c <BUTTON_USER_GPIO_Init+0x6c>)
 8003db4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003db6:	f003 0304 	and.w	r3, r3, #4
 8003dba:	60bb      	str	r3, [r7, #8]
 8003dbc:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dbe:	f107 030c 	add.w	r3, r7, #12
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	601a      	str	r2, [r3, #0]
 8003dc6:	605a      	str	r2, [r3, #4]
 8003dc8:	609a      	str	r2, [r3, #8]
 8003dca:	60da      	str	r2, [r3, #12]
 8003dcc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003dce:	4b0f      	ldr	r3, [pc, #60]	@ (8003e0c <BUTTON_USER_GPIO_Init+0x6c>)
 8003dd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dd2:	4a0e      	ldr	r2, [pc, #56]	@ (8003e0c <BUTTON_USER_GPIO_Init+0x6c>)
 8003dd4:	f043 0304 	orr.w	r3, r3, #4
 8003dd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003dda:	4b0c      	ldr	r3, [pc, #48]	@ (8003e0c <BUTTON_USER_GPIO_Init+0x6c>)
 8003ddc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dde:	f003 0304 	and.w	r3, r3, #4
 8003de2:	607b      	str	r3, [r7, #4]
 8003de4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 8003de6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003dea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003dec:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8003df0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003df2:	2300      	movs	r3, #0
 8003df4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 8003df6:	f107 030c 	add.w	r3, r7, #12
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	4804      	ldr	r0, [pc, #16]	@ (8003e10 <BUTTON_USER_GPIO_Init+0x70>)
 8003dfe:	f000 ffb7 	bl	8004d70 <HAL_GPIO_Init>

}
 8003e02:	bf00      	nop
 8003e04:	3720      	adds	r7, #32
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	40021000 	.word	0x40021000
 8003e10:	48000800 	.word	0x48000800

08003e14 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8003e22:	79fb      	ldrb	r3, [r7, #7]
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d903      	bls.n	8003e30 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003e28:	f06f 0301 	mvn.w	r3, #1
 8003e2c:	60fb      	str	r3, [r7, #12]
 8003e2e:	e025      	b.n	8003e7c <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8003e30:	79fb      	ldrb	r3, [r7, #7]
 8003e32:	79fa      	ldrb	r2, [r7, #7]
 8003e34:	4914      	ldr	r1, [pc, #80]	@ (8003e88 <BSP_COM_Init+0x74>)
 8003e36:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8003e3a:	4814      	ldr	r0, [pc, #80]	@ (8003e8c <BSP_COM_Init+0x78>)
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	011b      	lsls	r3, r3, #4
 8003e40:	4413      	add	r3, r2
 8003e42:	00db      	lsls	r3, r3, #3
 8003e44:	4403      	add	r3, r0
 8003e46:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART1_MspInit(&hcom_uart[COM]);
 8003e48:	79fa      	ldrb	r2, [r7, #7]
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	011b      	lsls	r3, r3, #4
 8003e4e:	4413      	add	r3, r2
 8003e50:	00db      	lsls	r3, r3, #3
 8003e52:	4a0e      	ldr	r2, [pc, #56]	@ (8003e8c <BSP_COM_Init+0x78>)
 8003e54:	4413      	add	r3, r2
 8003e56:	4618      	mov	r0, r3
 8003e58:	f000 f86a 	bl	8003f30 <USART1_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART1_UART_Init(&hcom_uart[COM]))
 8003e5c:	79fa      	ldrb	r2, [r7, #7]
 8003e5e:	4613      	mov	r3, r2
 8003e60:	011b      	lsls	r3, r3, #4
 8003e62:	4413      	add	r3, r2
 8003e64:	00db      	lsls	r3, r3, #3
 8003e66:	4a09      	ldr	r2, [pc, #36]	@ (8003e8c <BSP_COM_Init+0x78>)
 8003e68:	4413      	add	r3, r2
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f000 f810 	bl	8003e90 <MX_USART1_UART_Init>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d002      	beq.n	8003e7c <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8003e76:	f06f 0303 	mvn.w	r3, #3
 8003e7a:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3710      	adds	r7, #16
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	20000018 	.word	0x20000018
 8003e8c:	20002bf8 	.word	0x20002bf8

08003e90 <MX_USART1_UART_Init>:
 */

/* USART1 init function */

__weak HAL_StatusTypeDef MX_USART1_UART_Init(UART_HandleTypeDef* huart)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART1;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a15      	ldr	r2, [pc, #84]	@ (8003ef4 <MX_USART1_UART_Init+0x64>)
 8003ea0:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003ea8:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	220c      	movs	r2, #12
 8003ec0:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	621a      	str	r2, [r3, #32]
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(huart) != HAL_OK)
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f004 f9d6 	bl	800828c <HAL_UART_Init>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d001      	beq.n	8003eea <MX_USART1_UART_Init+0x5a>
  {
    ret = HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8003eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3710      	adds	r7, #16
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	40013800 	.word	0x40013800

08003ef8 <__io_putchar>:
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
  return ch;
}
#else /* For GCC Toolchains */
int __io_putchar (int ch)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 8003f00:	4b09      	ldr	r3, [pc, #36]	@ (8003f28 <__io_putchar+0x30>)
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	461a      	mov	r2, r3
 8003f06:	4613      	mov	r3, r2
 8003f08:	011b      	lsls	r3, r3, #4
 8003f0a:	4413      	add	r3, r2
 8003f0c:	00db      	lsls	r3, r3, #3
 8003f0e:	4a07      	ldr	r2, [pc, #28]	@ (8003f2c <__io_putchar+0x34>)
 8003f10:	1898      	adds	r0, r3, r2
 8003f12:	1d39      	adds	r1, r7, #4
 8003f14:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003f18:	2201      	movs	r2, #1
 8003f1a:	f004 fa05 	bl	8008328 <HAL_UART_Transmit>
  return ch;
 8003f1e:	687b      	ldr	r3, [r7, #4]
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3708      	adds	r7, #8
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	20002c80 	.word	0x20002c80
 8003f2c:	20002bf8 	.word	0x20002bf8

08003f30 <USART1_MspInit>:
 * @param  huart USART1 handle
 * @retval None
 */

static void USART1_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b0ac      	sub	sp, #176	@ 0xb0
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003f38:	f107 0314 	add.w	r3, r7, #20
 8003f3c:	2288      	movs	r2, #136	@ 0x88
 8003f3e:	2100      	movs	r1, #0
 8003f40:	4618      	mov	r0, r3
 8003f42:	f008 f939 	bl	800c1b8 <memset>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003f46:	2301      	movs	r3, #1
 8003f48:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8003f4e:	f107 0314 	add.w	r3, r7, #20
 8003f52:	4618      	mov	r0, r3
 8003f54:	f003 f890 	bl	8007078 <HAL_RCCEx_PeriphCLKConfig>

    /* Enable Peripheral clock */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003f58:	4b22      	ldr	r3, [pc, #136]	@ (8003fe4 <USART1_MspInit+0xb4>)
 8003f5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f5c:	4a21      	ldr	r2, [pc, #132]	@ (8003fe4 <USART1_MspInit+0xb4>)
 8003f5e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003f62:	6613      	str	r3, [r2, #96]	@ 0x60
 8003f64:	4b1f      	ldr	r3, [pc, #124]	@ (8003fe4 <USART1_MspInit+0xb4>)
 8003f66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f68:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f6c:	613b      	str	r3, [r7, #16]
 8003f6e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f70:	4b1c      	ldr	r3, [pc, #112]	@ (8003fe4 <USART1_MspInit+0xb4>)
 8003f72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f74:	4a1b      	ldr	r2, [pc, #108]	@ (8003fe4 <USART1_MspInit+0xb4>)
 8003f76:	f043 0302 	orr.w	r3, r3, #2
 8003f7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f7c:	4b19      	ldr	r3, [pc, #100]	@ (8003fe4 <USART1_MspInit+0xb4>)
 8003f7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f80:	f003 0302 	and.w	r3, r3, #2
 8003f84:	60fb      	str	r3, [r7, #12]
 8003f86:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BUS_USART1_TX_GPIO_PIN;
 8003f88:	2340      	movs	r3, #64	@ 0x40
 8003f8a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f8e:	2302      	movs	r3, #2
 8003f90:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f94:	2300      	movs	r3, #0
 8003f96:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = BUS_USART1_TX_GPIO_AF;
 8003fa0:	2307      	movs	r3, #7
 8003fa2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(BUS_USART1_TX_GPIO_PORT, &GPIO_InitStruct);
 8003fa6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003faa:	4619      	mov	r1, r3
 8003fac:	480e      	ldr	r0, [pc, #56]	@ (8003fe8 <USART1_MspInit+0xb8>)
 8003fae:	f000 fedf 	bl	8004d70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART1_RX_GPIO_PIN;
 8003fb2:	2380      	movs	r3, #128	@ 0x80
 8003fb4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fb8:	2302      	movs	r3, #2
 8003fba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = BUS_USART1_RX_GPIO_AF;
 8003fca:	2307      	movs	r3, #7
 8003fcc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(BUS_USART1_RX_GPIO_PORT, &GPIO_InitStruct);
 8003fd0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	4804      	ldr	r0, [pc, #16]	@ (8003fe8 <USART1_MspInit+0xb8>)
 8003fd8:	f000 feca 	bl	8004d70 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
}
 8003fdc:	bf00      	nop
 8003fde:	37b0      	adds	r7, #176	@ 0xb0
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	40021000 	.word	0x40021000
 8003fe8:	48000400 	.word	0x48000400

08003fec <I2Cx_MspInit>:
void     NFC_IO_Delay(uint32_t Delay);
/**
 * @}
 */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b08a      	sub	sp, #40	@ 0x28
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003ff4:	4b27      	ldr	r3, [pc, #156]	@ (8004094 <I2Cx_MspInit+0xa8>)
 8003ff6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ff8:	4a26      	ldr	r2, [pc, #152]	@ (8004094 <I2Cx_MspInit+0xa8>)
 8003ffa:	f043 0302 	orr.w	r3, r3, #2
 8003ffe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004000:	4b24      	ldr	r3, [pc, #144]	@ (8004094 <I2Cx_MspInit+0xa8>)
 8004002:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004004:	f003 0302 	and.w	r3, r3, #2
 8004008:	613b      	str	r3, [r7, #16]
 800400a:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 800400c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004010:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8004012:	2312      	movs	r3, #18
 8004014:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8004016:	2301      	movs	r3, #1
 8004018:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800401a:	2303      	movs	r3, #3
 800401c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800401e:	2304      	movs	r3, #4
 8004020:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004022:	f107 0314 	add.w	r3, r7, #20
 8004026:	4619      	mov	r1, r3
 8004028:	481b      	ldr	r0, [pc, #108]	@ (8004098 <I2Cx_MspInit+0xac>)
 800402a:	f000 fea1 	bl	8004d70 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800402e:	f107 0314 	add.w	r3, r7, #20
 8004032:	4619      	mov	r1, r3
 8004034:	4818      	ldr	r0, [pc, #96]	@ (8004098 <I2Cx_MspInit+0xac>)
 8004036:	f000 fe9b 	bl	8004d70 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 800403a:	4b16      	ldr	r3, [pc, #88]	@ (8004094 <I2Cx_MspInit+0xa8>)
 800403c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800403e:	4a15      	ldr	r2, [pc, #84]	@ (8004094 <I2Cx_MspInit+0xa8>)
 8004040:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004044:	6593      	str	r3, [r2, #88]	@ 0x58
 8004046:	4b13      	ldr	r3, [pc, #76]	@ (8004094 <I2Cx_MspInit+0xa8>)
 8004048:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800404a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800404e:	60fb      	str	r3, [r7, #12]
 8004050:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8004052:	4b10      	ldr	r3, [pc, #64]	@ (8004094 <I2Cx_MspInit+0xa8>)
 8004054:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004056:	4a0f      	ldr	r2, [pc, #60]	@ (8004094 <I2Cx_MspInit+0xa8>)
 8004058:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800405c:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800405e:	4b0d      	ldr	r3, [pc, #52]	@ (8004094 <I2Cx_MspInit+0xa8>)
 8004060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004062:	4a0c      	ldr	r2, [pc, #48]	@ (8004094 <I2Cx_MspInit+0xa8>)
 8004064:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8004068:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800406a:	2200      	movs	r2, #0
 800406c:	210f      	movs	r1, #15
 800406e:	2021      	movs	r0, #33	@ 0x21
 8004070:	f000 fcdd 	bl	8004a2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8004074:	2021      	movs	r0, #33	@ 0x21
 8004076:	f000 fcf6 	bl	8004a66 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800407a:	2200      	movs	r2, #0
 800407c:	210f      	movs	r1, #15
 800407e:	2022      	movs	r0, #34	@ 0x22
 8004080:	f000 fcd5 	bl	8004a2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8004084:	2022      	movs	r0, #34	@ 0x22
 8004086:	f000 fcee 	bl	8004a66 <HAL_NVIC_EnableIRQ>
}
 800408a:	bf00      	nop
 800408c:	3728      	adds	r7, #40	@ 0x28
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	40021000 	.word	0x40021000
 8004098:	48000400 	.word	0x48000400

0800409c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b082      	sub	sp, #8
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	4a12      	ldr	r2, [pc, #72]	@ (80040f0 <I2Cx_Init+0x54>)
 80040a8:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a11      	ldr	r2, [pc, #68]	@ (80040f4 <I2Cx_Init+0x58>)
 80040ae:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2201      	movs	r2, #1
 80040ba:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f7ff ff89 	bl	8003fec <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f001 f953 	bl	8005386 <HAL_I2C_Init>

  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);
 80040e0:	2100      	movs	r1, #0
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f001 ff0a 	bl	8005efc <HAL_I2CEx_ConfigAnalogFilter>
}
 80040e8:	bf00      	nop
 80040ea:	3708      	adds	r7, #8
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	40005800 	.word	0x40005800
 80040f4:	00702681 	.word	0x00702681

080040f8 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b08a      	sub	sp, #40	@ 0x28
 80040fc:	af04      	add	r7, sp, #16
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	4608      	mov	r0, r1
 8004102:	4611      	mov	r1, r2
 8004104:	461a      	mov	r2, r3
 8004106:	4603      	mov	r3, r0
 8004108:	72fb      	strb	r3, [r7, #11]
 800410a:	460b      	mov	r3, r1
 800410c:	813b      	strh	r3, [r7, #8]
 800410e:	4613      	mov	r3, r2
 8004110:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8004112:	2300      	movs	r3, #0
 8004114:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8004116:	7afb      	ldrb	r3, [r7, #11]
 8004118:	b299      	uxth	r1, r3
 800411a:	88f8      	ldrh	r0, [r7, #6]
 800411c:	893a      	ldrh	r2, [r7, #8]
 800411e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004122:	9302      	str	r3, [sp, #8]
 8004124:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004126:	9301      	str	r3, [sp, #4]
 8004128:	6a3b      	ldr	r3, [r7, #32]
 800412a:	9300      	str	r3, [sp, #0]
 800412c:	4603      	mov	r3, r0
 800412e:	68f8      	ldr	r0, [r7, #12]
 8004130:	f001 fb08 	bl	8005744 <HAL_I2C_Mem_Read>
 8004134:	4603      	mov	r3, r0
 8004136:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8004138:	7dfb      	ldrb	r3, [r7, #23]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d004      	beq.n	8004148 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800413e:	7afb      	ldrb	r3, [r7, #11]
 8004140:	4619      	mov	r1, r3
 8004142:	68f8      	ldr	r0, [r7, #12]
 8004144:	f000 f832 	bl	80041ac <I2Cx_Error>
  }
  return status;
 8004148:	7dfb      	ldrb	r3, [r7, #23]
}
 800414a:	4618      	mov	r0, r3
 800414c:	3718      	adds	r7, #24
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}

08004152 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8004152:	b580      	push	{r7, lr}
 8004154:	b08a      	sub	sp, #40	@ 0x28
 8004156:	af04      	add	r7, sp, #16
 8004158:	60f8      	str	r0, [r7, #12]
 800415a:	4608      	mov	r0, r1
 800415c:	4611      	mov	r1, r2
 800415e:	461a      	mov	r2, r3
 8004160:	4603      	mov	r3, r0
 8004162:	72fb      	strb	r3, [r7, #11]
 8004164:	460b      	mov	r3, r1
 8004166:	813b      	strh	r3, [r7, #8]
 8004168:	4613      	mov	r3, r2
 800416a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800416c:	2300      	movs	r3, #0
 800416e:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8004170:	7afb      	ldrb	r3, [r7, #11]
 8004172:	b299      	uxth	r1, r3
 8004174:	88f8      	ldrh	r0, [r7, #6]
 8004176:	893a      	ldrh	r2, [r7, #8]
 8004178:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800417c:	9302      	str	r3, [sp, #8]
 800417e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004180:	9301      	str	r3, [sp, #4]
 8004182:	6a3b      	ldr	r3, [r7, #32]
 8004184:	9300      	str	r3, [sp, #0]
 8004186:	4603      	mov	r3, r0
 8004188:	68f8      	ldr	r0, [r7, #12]
 800418a:	f001 f9c7 	bl	800551c <HAL_I2C_Mem_Write>
 800418e:	4603      	mov	r3, r0
 8004190:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8004192:	7dfb      	ldrb	r3, [r7, #23]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d004      	beq.n	80041a2 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8004198:	7afb      	ldrb	r3, [r7, #11]
 800419a:	4619      	mov	r1, r3
 800419c:	68f8      	ldr	r0, [r7, #12]
 800419e:	f000 f805 	bl	80041ac <I2Cx_Error>
  }
  return status;
 80041a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3718      	adds	r7, #24
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}

080041ac <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	460b      	mov	r3, r1
 80041b6:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f001 f97f 	bl	80054bc <HAL_I2C_DeInit>

  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f7ff ff6c 	bl	800409c <I2Cx_Init>
}
 80041c4:	bf00      	nop
 80041c6:	3708      	adds	r7, #8
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <SENSOR_IO_Init>:


void SENSOR_IO_Init(void)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 80041d0:	4802      	ldr	r0, [pc, #8]	@ (80041dc <SENSOR_IO_Init+0x10>)
 80041d2:	f7ff ff63 	bl	800409c <I2Cx_Init>
}
 80041d6:	bf00      	nop
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	20002c84 	.word	0x20002c84

080041e0 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af02      	add	r7, sp, #8
 80041e6:	4603      	mov	r3, r0
 80041e8:	71fb      	strb	r3, [r7, #7]
 80041ea:	460b      	mov	r3, r1
 80041ec:	71bb      	strb	r3, [r7, #6]
 80041ee:	4613      	mov	r3, r2
 80041f0:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80041f2:	79bb      	ldrb	r3, [r7, #6]
 80041f4:	b29a      	uxth	r2, r3
 80041f6:	79f9      	ldrb	r1, [r7, #7]
 80041f8:	2301      	movs	r3, #1
 80041fa:	9301      	str	r3, [sp, #4]
 80041fc:	1d7b      	adds	r3, r7, #5
 80041fe:	9300      	str	r3, [sp, #0]
 8004200:	2301      	movs	r3, #1
 8004202:	4803      	ldr	r0, [pc, #12]	@ (8004210 <SENSOR_IO_Write+0x30>)
 8004204:	f7ff ffa5 	bl	8004152 <I2Cx_WriteMultiple>
}
 8004208:	bf00      	nop
 800420a:	3708      	adds	r7, #8
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}
 8004210:	20002c84 	.word	0x20002c84

08004214 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b086      	sub	sp, #24
 8004218:	af02      	add	r7, sp, #8
 800421a:	4603      	mov	r3, r0
 800421c:	460a      	mov	r2, r1
 800421e:	71fb      	strb	r3, [r7, #7]
 8004220:	4613      	mov	r3, r2
 8004222:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8004224:	2300      	movs	r3, #0
 8004226:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8004228:	79bb      	ldrb	r3, [r7, #6]
 800422a:	b29a      	uxth	r2, r3
 800422c:	79f9      	ldrb	r1, [r7, #7]
 800422e:	2301      	movs	r3, #1
 8004230:	9301      	str	r3, [sp, #4]
 8004232:	f107 030f 	add.w	r3, r7, #15
 8004236:	9300      	str	r3, [sp, #0]
 8004238:	2301      	movs	r3, #1
 800423a:	4804      	ldr	r0, [pc, #16]	@ (800424c <SENSOR_IO_Read+0x38>)
 800423c:	f7ff ff5c 	bl	80040f8 <I2Cx_ReadMultiple>

  return read_value;
 8004240:	7bfb      	ldrb	r3, [r7, #15]
}
 8004242:	4618      	mov	r0, r3
 8004244:	3710      	adds	r7, #16
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	20002c84 	.word	0x20002c84

08004250 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af02      	add	r7, sp, #8
 8004256:	603a      	str	r2, [r7, #0]
 8004258:	461a      	mov	r2, r3
 800425a:	4603      	mov	r3, r0
 800425c:	71fb      	strb	r3, [r7, #7]
 800425e:	460b      	mov	r3, r1
 8004260:	71bb      	strb	r3, [r7, #6]
 8004262:	4613      	mov	r3, r2
 8004264:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8004266:	79bb      	ldrb	r3, [r7, #6]
 8004268:	b29a      	uxth	r2, r3
 800426a:	79f9      	ldrb	r1, [r7, #7]
 800426c:	88bb      	ldrh	r3, [r7, #4]
 800426e:	9301      	str	r3, [sp, #4]
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	9300      	str	r3, [sp, #0]
 8004274:	2301      	movs	r3, #1
 8004276:	4804      	ldr	r0, [pc, #16]	@ (8004288 <SENSOR_IO_ReadMultiple+0x38>)
 8004278:	f7ff ff3e 	bl	80040f8 <I2Cx_ReadMultiple>
 800427c:	4603      	mov	r3, r0
}
 800427e:	4618      	mov	r0, r3
 8004280:	3708      	adds	r7, #8
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop
 8004288:	20002c84 	.word	0x20002c84

0800428c <BSP_SPI3_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI3_Init(void)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8004292:	2300      	movs	r3, #0
 8004294:	607b      	str	r3, [r7, #4]

  hspi3.Instance  = SPI3;
 8004296:	4b12      	ldr	r3, [pc, #72]	@ (80042e0 <BSP_SPI3_Init+0x54>)
 8004298:	4a12      	ldr	r2, [pc, #72]	@ (80042e4 <BSP_SPI3_Init+0x58>)
 800429a:	601a      	str	r2, [r3, #0]

  if(SPI3InitCounter++ == 0)
 800429c:	4b12      	ldr	r3, [pc, #72]	@ (80042e8 <BSP_SPI3_Init+0x5c>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	1c5a      	adds	r2, r3, #1
 80042a2:	4911      	ldr	r1, [pc, #68]	@ (80042e8 <BSP_SPI3_Init+0x5c>)
 80042a4:	600a      	str	r2, [r1, #0]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d114      	bne.n	80042d4 <BSP_SPI3_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi3) == HAL_SPI_STATE_RESET)
 80042aa:	480d      	ldr	r0, [pc, #52]	@ (80042e0 <BSP_SPI3_Init+0x54>)
 80042ac:	f003 fe7c 	bl	8007fa8 <HAL_SPI_GetState>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d10e      	bne.n	80042d4 <BSP_SPI3_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI3_MspInit(&hspi3);
 80042b6:	480a      	ldr	r0, [pc, #40]	@ (80042e0 <BSP_SPI3_Init+0x54>)
 80042b8:	f000 f882 	bl	80043c0 <SPI3_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d108      	bne.n	80042d4 <BSP_SPI3_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI3_Init(&hspi3) != HAL_OK)
 80042c2:	4807      	ldr	r0, [pc, #28]	@ (80042e0 <BSP_SPI3_Init+0x54>)
 80042c4:	f000 f83a 	bl	800433c <MX_SPI3_Init>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d002      	beq.n	80042d4 <BSP_SPI3_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 80042ce:	f06f 0307 	mvn.w	r3, #7
 80042d2:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 80042d4:	687b      	ldr	r3, [r7, #4]
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3708      	adds	r7, #8
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	20002cd8 	.word	0x20002cd8
 80042e4:	40003c00 	.word	0x40003c00
 80042e8:	20002d3c 	.word	0x20002d3c

080042ec <BSP_SPI3_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI3_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b088      	sub	sp, #32
 80042f0:	af02      	add	r7, sp, #8
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	4613      	mov	r3, r2
 80042f8:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80042fa:	2300      	movs	r3, #0
 80042fc:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi3, pTxData, pRxData, Length, BUS_SPI3_POLL_TIMEOUT) != HAL_OK)
 80042fe:	88fb      	ldrh	r3, [r7, #6]
 8004300:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004304:	9200      	str	r2, [sp, #0]
 8004306:	68ba      	ldr	r2, [r7, #8]
 8004308:	68f9      	ldr	r1, [r7, #12]
 800430a:	4807      	ldr	r0, [pc, #28]	@ (8004328 <BSP_SPI3_SendRecv+0x3c>)
 800430c:	f003 fc2d 	bl	8007b6a <HAL_SPI_TransmitReceive>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d002      	beq.n	800431c <BSP_SPI3_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8004316:	f06f 0305 	mvn.w	r3, #5
 800431a:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800431c:	697b      	ldr	r3, [r7, #20]
}
 800431e:	4618      	mov	r0, r3
 8004320:	3718      	adds	r7, #24
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	20002cd8 	.word	0x20002cd8

0800432c <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 800432c:	b580      	push	{r7, lr}
 800432e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004330:	f000 fa72 	bl	8004818 <HAL_GetTick>
 8004334:	4603      	mov	r3, r0
}
 8004336:	4618      	mov	r0, r3
 8004338:	bd80      	pop	{r7, pc}
	...

0800433c <MX_SPI3_Init>:

/* SPI3 init function */

__weak HAL_StatusTypeDef MX_SPI3_Init(SPI_HandleTypeDef* hspi)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8004344:	2300      	movs	r3, #0
 8004346:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI3;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4a1c      	ldr	r2, [pc, #112]	@ (80043bc <MX_SPI3_Init+0x80>)
 800434c:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004354:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004362:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004376:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi->Init.CRCPolynomial = 7;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2207      	movs	r2, #7
 8004394:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2208      	movs	r2, #8
 80043a0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f003 fb34 	bl	8007a10 <HAL_SPI_Init>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d001      	beq.n	80043b2 <MX_SPI3_Init+0x76>
  {
    ret = HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80043b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3710      	adds	r7, #16
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	40003c00 	.word	0x40003c00

080043c0 <SPI3_MspInit>:

static void SPI3_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b08a      	sub	sp, #40	@ 0x28
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80043c8:	4b27      	ldr	r3, [pc, #156]	@ (8004468 <SPI3_MspInit+0xa8>)
 80043ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043cc:	4a26      	ldr	r2, [pc, #152]	@ (8004468 <SPI3_MspInit+0xa8>)
 80043ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80043d4:	4b24      	ldr	r3, [pc, #144]	@ (8004468 <SPI3_MspInit+0xa8>)
 80043d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80043dc:	613b      	str	r3, [r7, #16]
 80043de:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80043e0:	4b21      	ldr	r3, [pc, #132]	@ (8004468 <SPI3_MspInit+0xa8>)
 80043e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043e4:	4a20      	ldr	r2, [pc, #128]	@ (8004468 <SPI3_MspInit+0xa8>)
 80043e6:	f043 0304 	orr.w	r3, r3, #4
 80043ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80043ec:	4b1e      	ldr	r3, [pc, #120]	@ (8004468 <SPI3_MspInit+0xa8>)
 80043ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043f0:	f003 0304 	and.w	r3, r3, #4
 80043f4:	60fb      	str	r3, [r7, #12]
 80043f6:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = BUS_SPI3_SCK_GPIO_PIN;
 80043f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80043fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043fe:	2302      	movs	r3, #2
 8004400:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004402:	2300      	movs	r3, #0
 8004404:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004406:	2303      	movs	r3, #3
 8004408:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_SCK_GPIO_AF;
 800440a:	2306      	movs	r3, #6
 800440c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI3_SCK_GPIO_PORT, &GPIO_InitStruct);
 800440e:	f107 0314 	add.w	r3, r7, #20
 8004412:	4619      	mov	r1, r3
 8004414:	4815      	ldr	r0, [pc, #84]	@ (800446c <SPI3_MspInit+0xac>)
 8004416:	f000 fcab 	bl	8004d70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI3_MISO_GPIO_PIN;
 800441a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800441e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004420:	2302      	movs	r3, #2
 8004422:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004424:	2300      	movs	r3, #0
 8004426:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004428:	2303      	movs	r3, #3
 800442a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_MISO_GPIO_AF;
 800442c:	2306      	movs	r3, #6
 800442e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI3_MISO_GPIO_PORT, &GPIO_InitStruct);
 8004430:	f107 0314 	add.w	r3, r7, #20
 8004434:	4619      	mov	r1, r3
 8004436:	480d      	ldr	r0, [pc, #52]	@ (800446c <SPI3_MspInit+0xac>)
 8004438:	f000 fc9a 	bl	8004d70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI3_MOSI_GPIO_PIN;
 800443c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004440:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004442:	2302      	movs	r3, #2
 8004444:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004446:	2300      	movs	r3, #0
 8004448:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800444a:	2303      	movs	r3, #3
 800444c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_MOSI_GPIO_AF;
 800444e:	2306      	movs	r3, #6
 8004450:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI3_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8004452:	f107 0314 	add.w	r3, r7, #20
 8004456:	4619      	mov	r1, r3
 8004458:	4804      	ldr	r0, [pc, #16]	@ (800446c <SPI3_MspInit+0xac>)
 800445a:	f000 fc89 	bl	8004d70 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
}
 800445e:	bf00      	nop
 8004460:	3728      	adds	r7, #40	@ 0x28
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	40021000 	.word	0x40021000
 800446c:	48000800 	.word	0x48000800

08004470 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8004470:	b580      	push	{r7, lr}
 8004472:	b084      	sub	sp, #16
 8004474:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8004476:	2300      	movs	r3, #0
 8004478:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 800447a:	2300      	movs	r3, #0
 800447c:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 800447e:	4b19      	ldr	r3, [pc, #100]	@ (80044e4 <BSP_ACCELERO_Init+0x74>)
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	4798      	blx	r3
 8004484:	4603      	mov	r3, r0
 8004486:	2b6a      	cmp	r3, #106	@ 0x6a
 8004488:	d002      	beq.n	8004490 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	73fb      	strb	r3, [r7, #15]
 800448e:	e024      	b.n	80044da <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8004490:	4b15      	ldr	r3, [pc, #84]	@ (80044e8 <BSP_ACCELERO_Init+0x78>)
 8004492:	4a14      	ldr	r2, [pc, #80]	@ (80044e4 <BSP_ACCELERO_Init+0x74>)
 8004494:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8004496:	2330      	movs	r3, #48	@ 0x30
 8004498:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 800449a:	2300      	movs	r3, #0
 800449c:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 800449e:	2300      	movs	r3, #0
 80044a0:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 80044a2:	2340      	movs	r3, #64	@ 0x40
 80044a4:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 80044a6:	2300      	movs	r3, #0
 80044a8:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 80044aa:	2300      	movs	r3, #0
 80044ac:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 80044ae:	797a      	ldrb	r2, [r7, #5]
 80044b0:	7abb      	ldrb	r3, [r7, #10]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 80044b8:	7a3b      	ldrb	r3, [r7, #8]
 80044ba:	f043 0304 	orr.w	r3, r3, #4
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	021b      	lsls	r3, r3, #8
 80044c2:	b21a      	sxth	r2, r3
 80044c4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	b21b      	sxth	r3, r3
 80044cc:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 80044ce:	4b06      	ldr	r3, [pc, #24]	@ (80044e8 <BSP_ACCELERO_Init+0x78>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	89ba      	ldrh	r2, [r7, #12]
 80044d6:	4610      	mov	r0, r2
 80044d8:	4798      	blx	r3
  }  

  return ret;
 80044da:	7bfb      	ldrb	r3, [r7, #15]
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3710      	adds	r7, #16
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	2000001c 	.word	0x2000001c
 80044e8:	20002d40 	.word	0x20002d40

080044ec <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 80044f4:	4b08      	ldr	r3, [pc, #32]	@ (8004518 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d009      	beq.n	8004510 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 80044fc:	4b06      	ldr	r3, [pc, #24]	@ (8004518 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004502:	2b00      	cmp	r3, #0
 8004504:	d004      	beq.n	8004510 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8004506:	4b04      	ldr	r3, [pc, #16]	@ (8004518 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	4798      	blx	r3
    }
  }
}
 8004510:	bf00      	nop
 8004512:	3708      	adds	r7, #8
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}
 8004518:	20002d40 	.word	0x20002d40

0800451c <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	4603      	mov	r3, r0
 8004524:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8004526:	2300      	movs	r3, #0
 8004528:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800452a:	2110      	movs	r1, #16
 800452c:	20d4      	movs	r0, #212	@ 0xd4
 800452e:	f7ff fe71 	bl	8004214 <SENSOR_IO_Read>
 8004532:	4603      	mov	r3, r0
 8004534:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8004536:	88fb      	ldrh	r3, [r7, #6]
 8004538:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 800453a:	7bbb      	ldrb	r3, [r7, #14]
 800453c:	f003 0303 	and.w	r3, r3, #3
 8004540:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8004542:	7bba      	ldrb	r2, [r7, #14]
 8004544:	7bfb      	ldrb	r3, [r7, #15]
 8004546:	4313      	orrs	r3, r2
 8004548:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 800454a:	7bbb      	ldrb	r3, [r7, #14]
 800454c:	461a      	mov	r2, r3
 800454e:	2110      	movs	r1, #16
 8004550:	20d4      	movs	r0, #212	@ 0xd4
 8004552:	f7ff fe45 	bl	80041e0 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8004556:	2112      	movs	r1, #18
 8004558:	20d4      	movs	r0, #212	@ 0xd4
 800455a:	f7ff fe5b 	bl	8004214 <SENSOR_IO_Read>
 800455e:	4603      	mov	r3, r0
 8004560:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8004562:	88fb      	ldrh	r3, [r7, #6]
 8004564:	0a1b      	lsrs	r3, r3, #8
 8004566:	b29b      	uxth	r3, r3
 8004568:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 800456a:	7bbb      	ldrb	r3, [r7, #14]
 800456c:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 8004570:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8004572:	7bba      	ldrb	r2, [r7, #14]
 8004574:	7bfb      	ldrb	r3, [r7, #15]
 8004576:	4313      	orrs	r3, r2
 8004578:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 800457a:	7bbb      	ldrb	r3, [r7, #14]
 800457c:	461a      	mov	r2, r3
 800457e:	2112      	movs	r1, #18
 8004580:	20d4      	movs	r0, #212	@ 0xd4
 8004582:	f7ff fe2d 	bl	80041e0 <SENSOR_IO_Write>
}
 8004586:	bf00      	nop
 8004588:	3710      	adds	r7, #16
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}

0800458e <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 800458e:	b580      	push	{r7, lr}
 8004590:	b082      	sub	sp, #8
 8004592:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8004594:	2300      	movs	r3, #0
 8004596:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8004598:	2110      	movs	r1, #16
 800459a:	20d4      	movs	r0, #212	@ 0xd4
 800459c:	f7ff fe3a 	bl	8004214 <SENSOR_IO_Read>
 80045a0:	4603      	mov	r3, r0
 80045a2:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 80045a4:	79fb      	ldrb	r3, [r7, #7]
 80045a6:	f003 030f 	and.w	r3, r3, #15
 80045aa:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 80045ac:	79fb      	ldrb	r3, [r7, #7]
 80045ae:	461a      	mov	r2, r3
 80045b0:	2110      	movs	r1, #16
 80045b2:	20d4      	movs	r0, #212	@ 0xd4
 80045b4:	f7ff fe14 	bl	80041e0 <SENSOR_IO_Write>
}
 80045b8:	bf00      	nop
 80045ba:	3708      	adds	r7, #8
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}

080045c0 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 80045c0:	b580      	push	{r7, lr}
 80045c2:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 80045c4:	f7ff fe02 	bl	80041cc <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 80045c8:	210f      	movs	r1, #15
 80045ca:	20d4      	movs	r0, #212	@ 0xd4
 80045cc:	f7ff fe22 	bl	8004214 <SENSOR_IO_Read>
 80045d0:	4603      	mov	r3, r0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	bd80      	pop	{r7, pc}

080045d6 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 80045d6:	b580      	push	{r7, lr}
 80045d8:	b084      	sub	sp, #16
 80045da:	af00      	add	r7, sp, #0
 80045dc:	4603      	mov	r3, r0
 80045de:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80045e0:	2300      	movs	r3, #0
 80045e2:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 80045e4:	2115      	movs	r1, #21
 80045e6:	20d4      	movs	r0, #212	@ 0xd4
 80045e8:	f7ff fe14 	bl	8004214 <SENSOR_IO_Read>
 80045ec:	4603      	mov	r3, r0
 80045ee:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 80045f0:	7bfb      	ldrb	r3, [r7, #15]
 80045f2:	f023 0310 	bic.w	r3, r3, #16
 80045f6:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80045f8:	88fb      	ldrh	r3, [r7, #6]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d003      	beq.n	8004606 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 80045fe:	7bfb      	ldrb	r3, [r7, #15]
 8004600:	f043 0310 	orr.w	r3, r3, #16
 8004604:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8004606:	7bfb      	ldrb	r3, [r7, #15]
 8004608:	461a      	mov	r2, r3
 800460a:	2115      	movs	r1, #21
 800460c:	20d4      	movs	r0, #212	@ 0xd4
 800460e:	f7ff fde7 	bl	80041e0 <SENSOR_IO_Write>
}
 8004612:	bf00      	nop
 8004614:	3710      	adds	r7, #16
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
	...

0800461c <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b088      	sub	sp, #32
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8004624:	2300      	movs	r3, #0
 8004626:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8004628:	2300      	movs	r3, #0
 800462a:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 800462c:	f04f 0300 	mov.w	r3, #0
 8004630:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8004632:	2110      	movs	r1, #16
 8004634:	20d4      	movs	r0, #212	@ 0xd4
 8004636:	f7ff fded 	bl	8004214 <SENSOR_IO_Read>
 800463a:	4603      	mov	r3, r0
 800463c:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 800463e:	f107 0208 	add.w	r2, r7, #8
 8004642:	2306      	movs	r3, #6
 8004644:	2128      	movs	r1, #40	@ 0x28
 8004646:	20d4      	movs	r0, #212	@ 0xd4
 8004648:	f7ff fe02 	bl	8004250 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 800464c:	2300      	movs	r3, #0
 800464e:	77fb      	strb	r3, [r7, #31]
 8004650:	e01a      	b.n	8004688 <LSM6DSL_AccReadXYZ+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8004652:	7ffb      	ldrb	r3, [r7, #31]
 8004654:	005b      	lsls	r3, r3, #1
 8004656:	3301      	adds	r3, #1
 8004658:	3320      	adds	r3, #32
 800465a:	443b      	add	r3, r7
 800465c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8004660:	021b      	lsls	r3, r3, #8
 8004662:	b29b      	uxth	r3, r3
 8004664:	7ffa      	ldrb	r2, [r7, #31]
 8004666:	0052      	lsls	r2, r2, #1
 8004668:	3220      	adds	r2, #32
 800466a:	443a      	add	r2, r7
 800466c:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8004670:	4413      	add	r3, r2
 8004672:	b29a      	uxth	r2, r3
 8004674:	7ffb      	ldrb	r3, [r7, #31]
 8004676:	b212      	sxth	r2, r2
 8004678:	005b      	lsls	r3, r3, #1
 800467a:	3320      	adds	r3, #32
 800467c:	443b      	add	r3, r7
 800467e:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8004682:	7ffb      	ldrb	r3, [r7, #31]
 8004684:	3301      	adds	r3, #1
 8004686:	77fb      	strb	r3, [r7, #31]
 8004688:	7ffb      	ldrb	r3, [r7, #31]
 800468a:	2b02      	cmp	r3, #2
 800468c:	d9e1      	bls.n	8004652 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 800468e:	7dfb      	ldrb	r3, [r7, #23]
 8004690:	f003 030c 	and.w	r3, r3, #12
 8004694:	2b0c      	cmp	r3, #12
 8004696:	d829      	bhi.n	80046ec <LSM6DSL_AccReadXYZ+0xd0>
 8004698:	a201      	add	r2, pc, #4	@ (adr r2, 80046a0 <LSM6DSL_AccReadXYZ+0x84>)
 800469a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800469e:	bf00      	nop
 80046a0:	080046d5 	.word	0x080046d5
 80046a4:	080046ed 	.word	0x080046ed
 80046a8:	080046ed 	.word	0x080046ed
 80046ac:	080046ed 	.word	0x080046ed
 80046b0:	080046e7 	.word	0x080046e7
 80046b4:	080046ed 	.word	0x080046ed
 80046b8:	080046ed 	.word	0x080046ed
 80046bc:	080046ed 	.word	0x080046ed
 80046c0:	080046db 	.word	0x080046db
 80046c4:	080046ed 	.word	0x080046ed
 80046c8:	080046ed 	.word	0x080046ed
 80046cc:	080046ed 	.word	0x080046ed
 80046d0:	080046e1 	.word	0x080046e1
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 80046d4:	4b18      	ldr	r3, [pc, #96]	@ (8004738 <LSM6DSL_AccReadXYZ+0x11c>)
 80046d6:	61bb      	str	r3, [r7, #24]
    break;
 80046d8:	e008      	b.n	80046ec <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 80046da:	4b18      	ldr	r3, [pc, #96]	@ (800473c <LSM6DSL_AccReadXYZ+0x120>)
 80046dc:	61bb      	str	r3, [r7, #24]
    break;
 80046de:	e005      	b.n	80046ec <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 80046e0:	4b17      	ldr	r3, [pc, #92]	@ (8004740 <LSM6DSL_AccReadXYZ+0x124>)
 80046e2:	61bb      	str	r3, [r7, #24]
    break;
 80046e4:	e002      	b.n	80046ec <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 80046e6:	4b17      	ldr	r3, [pc, #92]	@ (8004744 <LSM6DSL_AccReadXYZ+0x128>)
 80046e8:	61bb      	str	r3, [r7, #24]
    break;    
 80046ea:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80046ec:	2300      	movs	r3, #0
 80046ee:	77fb      	strb	r3, [r7, #31]
 80046f0:	e01a      	b.n	8004728 <LSM6DSL_AccReadXYZ+0x10c>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80046f2:	7ffb      	ldrb	r3, [r7, #31]
 80046f4:	005b      	lsls	r3, r3, #1
 80046f6:	3320      	adds	r3, #32
 80046f8:	443b      	add	r3, r7
 80046fa:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80046fe:	ee07 3a90 	vmov	s15, r3
 8004702:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004706:	edd7 7a06 	vldr	s15, [r7, #24]
 800470a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800470e:	7ffb      	ldrb	r3, [r7, #31]
 8004710:	005b      	lsls	r3, r3, #1
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	4413      	add	r3, r2
 8004716:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800471a:	ee17 2a90 	vmov	r2, s15
 800471e:	b212      	sxth	r2, r2
 8004720:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8004722:	7ffb      	ldrb	r3, [r7, #31]
 8004724:	3301      	adds	r3, #1
 8004726:	77fb      	strb	r3, [r7, #31]
 8004728:	7ffb      	ldrb	r3, [r7, #31]
 800472a:	2b02      	cmp	r3, #2
 800472c:	d9e1      	bls.n	80046f2 <LSM6DSL_AccReadXYZ+0xd6>
  }
}
 800472e:	bf00      	nop
 8004730:	bf00      	nop
 8004732:	3720      	adds	r7, #32
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}
 8004738:	3d79db23 	.word	0x3d79db23
 800473c:	3df9db23 	.word	0x3df9db23
 8004740:	3e79db23 	.word	0x3e79db23
 8004744:	3ef9db23 	.word	0x3ef9db23

08004748 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b082      	sub	sp, #8
 800474c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800474e:	2300      	movs	r3, #0
 8004750:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004752:	2003      	movs	r0, #3
 8004754:	f000 f960 	bl	8004a18 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004758:	200f      	movs	r0, #15
 800475a:	f000 f80d 	bl	8004778 <HAL_InitTick>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d002      	beq.n	800476a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	71fb      	strb	r3, [r7, #7]
 8004768:	e001      	b.n	800476e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800476a:	f7fe fe95 	bl	8003498 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800476e:	79fb      	ldrb	r3, [r7, #7]
}
 8004770:	4618      	mov	r0, r3
 8004772:	3708      	adds	r7, #8
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004780:	2300      	movs	r3, #0
 8004782:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8004784:	4b17      	ldr	r3, [pc, #92]	@ (80047e4 <HAL_InitTick+0x6c>)
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d023      	beq.n	80047d4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800478c:	4b16      	ldr	r3, [pc, #88]	@ (80047e8 <HAL_InitTick+0x70>)
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	4b14      	ldr	r3, [pc, #80]	@ (80047e4 <HAL_InitTick+0x6c>)
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	4619      	mov	r1, r3
 8004796:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800479a:	fbb3 f3f1 	udiv	r3, r3, r1
 800479e:	fbb2 f3f3 	udiv	r3, r2, r3
 80047a2:	4618      	mov	r0, r3
 80047a4:	f000 f96d 	bl	8004a82 <HAL_SYSTICK_Config>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d10f      	bne.n	80047ce <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2b0f      	cmp	r3, #15
 80047b2:	d809      	bhi.n	80047c8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80047b4:	2200      	movs	r2, #0
 80047b6:	6879      	ldr	r1, [r7, #4]
 80047b8:	f04f 30ff 	mov.w	r0, #4294967295
 80047bc:	f000 f937 	bl	8004a2e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80047c0:	4a0a      	ldr	r2, [pc, #40]	@ (80047ec <HAL_InitTick+0x74>)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6013      	str	r3, [r2, #0]
 80047c6:	e007      	b.n	80047d8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	73fb      	strb	r3, [r7, #15]
 80047cc:	e004      	b.n	80047d8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	73fb      	strb	r3, [r7, #15]
 80047d2:	e001      	b.n	80047d8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80047d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3710      	adds	r7, #16
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	20000054 	.word	0x20000054
 80047e8:	20000004 	.word	0x20000004
 80047ec:	20000050 	.word	0x20000050

080047f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80047f0:	b480      	push	{r7}
 80047f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80047f4:	4b06      	ldr	r3, [pc, #24]	@ (8004810 <HAL_IncTick+0x20>)
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	461a      	mov	r2, r3
 80047fa:	4b06      	ldr	r3, [pc, #24]	@ (8004814 <HAL_IncTick+0x24>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4413      	add	r3, r2
 8004800:	4a04      	ldr	r2, [pc, #16]	@ (8004814 <HAL_IncTick+0x24>)
 8004802:	6013      	str	r3, [r2, #0]
}
 8004804:	bf00      	nop
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr
 800480e:	bf00      	nop
 8004810:	20000054 	.word	0x20000054
 8004814:	20002d44 	.word	0x20002d44

08004818 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004818:	b480      	push	{r7}
 800481a:	af00      	add	r7, sp, #0
  return uwTick;
 800481c:	4b03      	ldr	r3, [pc, #12]	@ (800482c <HAL_GetTick+0x14>)
 800481e:	681b      	ldr	r3, [r3, #0]
}
 8004820:	4618      	mov	r0, r3
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	20002d44 	.word	0x20002d44

08004830 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004838:	f7ff ffee 	bl	8004818 <HAL_GetTick>
 800483c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004848:	d005      	beq.n	8004856 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800484a:	4b0a      	ldr	r3, [pc, #40]	@ (8004874 <HAL_Delay+0x44>)
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	461a      	mov	r2, r3
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	4413      	add	r3, r2
 8004854:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004856:	bf00      	nop
 8004858:	f7ff ffde 	bl	8004818 <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	68fa      	ldr	r2, [r7, #12]
 8004864:	429a      	cmp	r2, r3
 8004866:	d8f7      	bhi.n	8004858 <HAL_Delay+0x28>
  {
  }
}
 8004868:	bf00      	nop
 800486a:	bf00      	nop
 800486c:	3710      	adds	r7, #16
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	20000054 	.word	0x20000054

08004878 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004878:	b480      	push	{r7}
 800487a:	b085      	sub	sp, #20
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f003 0307 	and.w	r3, r3, #7
 8004886:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004888:	4b0c      	ldr	r3, [pc, #48]	@ (80048bc <__NVIC_SetPriorityGrouping+0x44>)
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800488e:	68ba      	ldr	r2, [r7, #8]
 8004890:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004894:	4013      	ands	r3, r2
 8004896:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80048a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80048a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80048aa:	4a04      	ldr	r2, [pc, #16]	@ (80048bc <__NVIC_SetPriorityGrouping+0x44>)
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	60d3      	str	r3, [r2, #12]
}
 80048b0:	bf00      	nop
 80048b2:	3714      	adds	r7, #20
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr
 80048bc:	e000ed00 	.word	0xe000ed00

080048c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80048c0:	b480      	push	{r7}
 80048c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80048c4:	4b04      	ldr	r3, [pc, #16]	@ (80048d8 <__NVIC_GetPriorityGrouping+0x18>)
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	0a1b      	lsrs	r3, r3, #8
 80048ca:	f003 0307 	and.w	r3, r3, #7
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr
 80048d8:	e000ed00 	.word	0xe000ed00

080048dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	4603      	mov	r3, r0
 80048e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	db0b      	blt.n	8004906 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048ee:	79fb      	ldrb	r3, [r7, #7]
 80048f0:	f003 021f 	and.w	r2, r3, #31
 80048f4:	4907      	ldr	r1, [pc, #28]	@ (8004914 <__NVIC_EnableIRQ+0x38>)
 80048f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048fa:	095b      	lsrs	r3, r3, #5
 80048fc:	2001      	movs	r0, #1
 80048fe:	fa00 f202 	lsl.w	r2, r0, r2
 8004902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004906:	bf00      	nop
 8004908:	370c      	adds	r7, #12
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop
 8004914:	e000e100 	.word	0xe000e100

08004918 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	4603      	mov	r3, r0
 8004920:	6039      	str	r1, [r7, #0]
 8004922:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004928:	2b00      	cmp	r3, #0
 800492a:	db0a      	blt.n	8004942 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	b2da      	uxtb	r2, r3
 8004930:	490c      	ldr	r1, [pc, #48]	@ (8004964 <__NVIC_SetPriority+0x4c>)
 8004932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004936:	0112      	lsls	r2, r2, #4
 8004938:	b2d2      	uxtb	r2, r2
 800493a:	440b      	add	r3, r1
 800493c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004940:	e00a      	b.n	8004958 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	b2da      	uxtb	r2, r3
 8004946:	4908      	ldr	r1, [pc, #32]	@ (8004968 <__NVIC_SetPriority+0x50>)
 8004948:	79fb      	ldrb	r3, [r7, #7]
 800494a:	f003 030f 	and.w	r3, r3, #15
 800494e:	3b04      	subs	r3, #4
 8004950:	0112      	lsls	r2, r2, #4
 8004952:	b2d2      	uxtb	r2, r2
 8004954:	440b      	add	r3, r1
 8004956:	761a      	strb	r2, [r3, #24]
}
 8004958:	bf00      	nop
 800495a:	370c      	adds	r7, #12
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr
 8004964:	e000e100 	.word	0xe000e100
 8004968:	e000ed00 	.word	0xe000ed00

0800496c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800496c:	b480      	push	{r7}
 800496e:	b089      	sub	sp, #36	@ 0x24
 8004970:	af00      	add	r7, sp, #0
 8004972:	60f8      	str	r0, [r7, #12]
 8004974:	60b9      	str	r1, [r7, #8]
 8004976:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f003 0307 	and.w	r3, r3, #7
 800497e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004980:	69fb      	ldr	r3, [r7, #28]
 8004982:	f1c3 0307 	rsb	r3, r3, #7
 8004986:	2b04      	cmp	r3, #4
 8004988:	bf28      	it	cs
 800498a:	2304      	movcs	r3, #4
 800498c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	3304      	adds	r3, #4
 8004992:	2b06      	cmp	r3, #6
 8004994:	d902      	bls.n	800499c <NVIC_EncodePriority+0x30>
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	3b03      	subs	r3, #3
 800499a:	e000      	b.n	800499e <NVIC_EncodePriority+0x32>
 800499c:	2300      	movs	r3, #0
 800499e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049a0:	f04f 32ff 	mov.w	r2, #4294967295
 80049a4:	69bb      	ldr	r3, [r7, #24]
 80049a6:	fa02 f303 	lsl.w	r3, r2, r3
 80049aa:	43da      	mvns	r2, r3
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	401a      	ands	r2, r3
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80049b4:	f04f 31ff 	mov.w	r1, #4294967295
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	fa01 f303 	lsl.w	r3, r1, r3
 80049be:	43d9      	mvns	r1, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049c4:	4313      	orrs	r3, r2
         );
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3724      	adds	r7, #36	@ 0x24
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
	...

080049d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b082      	sub	sp, #8
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	3b01      	subs	r3, #1
 80049e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80049e4:	d301      	bcc.n	80049ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80049e6:	2301      	movs	r3, #1
 80049e8:	e00f      	b.n	8004a0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80049ea:	4a0a      	ldr	r2, [pc, #40]	@ (8004a14 <SysTick_Config+0x40>)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	3b01      	subs	r3, #1
 80049f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80049f2:	210f      	movs	r1, #15
 80049f4:	f04f 30ff 	mov.w	r0, #4294967295
 80049f8:	f7ff ff8e 	bl	8004918 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80049fc:	4b05      	ldr	r3, [pc, #20]	@ (8004a14 <SysTick_Config+0x40>)
 80049fe:	2200      	movs	r2, #0
 8004a00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a02:	4b04      	ldr	r3, [pc, #16]	@ (8004a14 <SysTick_Config+0x40>)
 8004a04:	2207      	movs	r2, #7
 8004a06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3708      	adds	r7, #8
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	e000e010 	.word	0xe000e010

08004a18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b082      	sub	sp, #8
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f7ff ff29 	bl	8004878 <__NVIC_SetPriorityGrouping>
}
 8004a26:	bf00      	nop
 8004a28:	3708      	adds	r7, #8
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}

08004a2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a2e:	b580      	push	{r7, lr}
 8004a30:	b086      	sub	sp, #24
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	4603      	mov	r3, r0
 8004a36:	60b9      	str	r1, [r7, #8]
 8004a38:	607a      	str	r2, [r7, #4]
 8004a3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004a40:	f7ff ff3e 	bl	80048c0 <__NVIC_GetPriorityGrouping>
 8004a44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	68b9      	ldr	r1, [r7, #8]
 8004a4a:	6978      	ldr	r0, [r7, #20]
 8004a4c:	f7ff ff8e 	bl	800496c <NVIC_EncodePriority>
 8004a50:	4602      	mov	r2, r0
 8004a52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a56:	4611      	mov	r1, r2
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f7ff ff5d 	bl	8004918 <__NVIC_SetPriority>
}
 8004a5e:	bf00      	nop
 8004a60:	3718      	adds	r7, #24
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}

08004a66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a66:	b580      	push	{r7, lr}
 8004a68:	b082      	sub	sp, #8
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a74:	4618      	mov	r0, r3
 8004a76:	f7ff ff31 	bl	80048dc <__NVIC_EnableIRQ>
}
 8004a7a:	bf00      	nop
 8004a7c:	3708      	adds	r7, #8
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}

08004a82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004a82:	b580      	push	{r7, lr}
 8004a84:	b082      	sub	sp, #8
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f7ff ffa2 	bl	80049d4 <SysTick_Config>
 8004a90:	4603      	mov	r3, r0
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3708      	adds	r7, #8
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
	...

08004a9c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b082      	sub	sp, #8
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d101      	bne.n	8004aae <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e0ac      	b.n	8004c08 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f000 f8b2 	bl	8004c1c <DFSDM_GetChannelFromInstance>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	4a55      	ldr	r2, [pc, #340]	@ (8004c10 <HAL_DFSDM_ChannelInit+0x174>)
 8004abc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d001      	beq.n	8004ac8 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e09f      	b.n	8004c08 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f7fe fd0d 	bl	80034e8 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8004ace:	4b51      	ldr	r3, [pc, #324]	@ (8004c14 <HAL_DFSDM_ChannelInit+0x178>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	4a4f      	ldr	r2, [pc, #316]	@ (8004c14 <HAL_DFSDM_ChannelInit+0x178>)
 8004ad6:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8004ad8:	4b4e      	ldr	r3, [pc, #312]	@ (8004c14 <HAL_DFSDM_ChannelInit+0x178>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d125      	bne.n	8004b2c <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8004ae0:	4b4d      	ldr	r3, [pc, #308]	@ (8004c18 <HAL_DFSDM_ChannelInit+0x17c>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a4c      	ldr	r2, [pc, #304]	@ (8004c18 <HAL_DFSDM_ChannelInit+0x17c>)
 8004ae6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004aea:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8004aec:	4b4a      	ldr	r3, [pc, #296]	@ (8004c18 <HAL_DFSDM_ChannelInit+0x17c>)
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	4948      	ldr	r1, [pc, #288]	@ (8004c18 <HAL_DFSDM_ChannelInit+0x17c>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8004afa:	4b47      	ldr	r3, [pc, #284]	@ (8004c18 <HAL_DFSDM_ChannelInit+0x17c>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a46      	ldr	r2, [pc, #280]	@ (8004c18 <HAL_DFSDM_ChannelInit+0x17c>)
 8004b00:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8004b04:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	791b      	ldrb	r3, [r3, #4]
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d108      	bne.n	8004b20 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8004b0e:	4b42      	ldr	r3, [pc, #264]	@ (8004c18 <HAL_DFSDM_ChannelInit+0x17c>)
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	3b01      	subs	r3, #1
 8004b18:	041b      	lsls	r3, r3, #16
 8004b1a:	493f      	ldr	r1, [pc, #252]	@ (8004c18 <HAL_DFSDM_ChannelInit+0x17c>)
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8004b20:	4b3d      	ldr	r3, [pc, #244]	@ (8004c18 <HAL_DFSDM_ChannelInit+0x17c>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a3c      	ldr	r2, [pc, #240]	@ (8004c18 <HAL_DFSDM_ChannelInit+0x17c>)
 8004b26:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004b2a:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 8004b3a:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	6819      	ldr	r1, [r3, #0]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004b4a:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8004b50:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	430a      	orrs	r2, r1
 8004b58:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f022 020f 	bic.w	r2, r2, #15
 8004b68:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	6819      	ldr	r1, [r3, #0]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8004b78:	431a      	orrs	r2, r3
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	430a      	orrs	r2, r1
 8004b80:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	689a      	ldr	r2, [r3, #8]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8004b90:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	6899      	ldr	r1, [r3, #8]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ba0:	3b01      	subs	r3, #1
 8004ba2:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8004ba4:	431a      	orrs	r2, r3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	430a      	orrs	r2, r1
 8004bac:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	685a      	ldr	r2, [r3, #4]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f002 0207 	and.w	r2, r2, #7
 8004bbc:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	6859      	ldr	r1, [r3, #4]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bc8:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bce:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8004bd0:	431a      	orrs	r2, r3
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	430a      	orrs	r2, r1
 8004bd8:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004be8:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2201      	movs	r2, #1
 8004bee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f000 f810 	bl	8004c1c <DFSDM_GetChannelFromInstance>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	4904      	ldr	r1, [pc, #16]	@ (8004c10 <HAL_DFSDM_ChannelInit+0x174>)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8004c06:	2300      	movs	r3, #0
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3708      	adds	r7, #8
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}
 8004c10:	20002d4c 	.word	0x20002d4c
 8004c14:	20002d48 	.word	0x20002d48
 8004c18:	40016000 	.word	0x40016000

08004c1c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b085      	sub	sp, #20
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4a1c      	ldr	r2, [pc, #112]	@ (8004c98 <DFSDM_GetChannelFromInstance+0x7c>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d102      	bne.n	8004c32 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	60fb      	str	r3, [r7, #12]
 8004c30:	e02b      	b.n	8004c8a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4a19      	ldr	r2, [pc, #100]	@ (8004c9c <DFSDM_GetChannelFromInstance+0x80>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d102      	bne.n	8004c40 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	60fb      	str	r3, [r7, #12]
 8004c3e:	e024      	b.n	8004c8a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4a17      	ldr	r2, [pc, #92]	@ (8004ca0 <DFSDM_GetChannelFromInstance+0x84>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d102      	bne.n	8004c4e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8004c48:	2302      	movs	r3, #2
 8004c4a:	60fb      	str	r3, [r7, #12]
 8004c4c:	e01d      	b.n	8004c8a <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a14      	ldr	r2, [pc, #80]	@ (8004ca4 <DFSDM_GetChannelFromInstance+0x88>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d102      	bne.n	8004c5c <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8004c56:	2304      	movs	r3, #4
 8004c58:	60fb      	str	r3, [r7, #12]
 8004c5a:	e016      	b.n	8004c8a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4a12      	ldr	r2, [pc, #72]	@ (8004ca8 <DFSDM_GetChannelFromInstance+0x8c>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d102      	bne.n	8004c6a <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8004c64:	2305      	movs	r3, #5
 8004c66:	60fb      	str	r3, [r7, #12]
 8004c68:	e00f      	b.n	8004c8a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4a0f      	ldr	r2, [pc, #60]	@ (8004cac <DFSDM_GetChannelFromInstance+0x90>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d102      	bne.n	8004c78 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8004c72:	2306      	movs	r3, #6
 8004c74:	60fb      	str	r3, [r7, #12]
 8004c76:	e008      	b.n	8004c8a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4a0d      	ldr	r2, [pc, #52]	@ (8004cb0 <DFSDM_GetChannelFromInstance+0x94>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d102      	bne.n	8004c86 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8004c80:	2307      	movs	r3, #7
 8004c82:	60fb      	str	r3, [r7, #12]
 8004c84:	e001      	b.n	8004c8a <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8004c86:	2303      	movs	r3, #3
 8004c88:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3714      	adds	r7, #20
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr
 8004c98:	40016000 	.word	0x40016000
 8004c9c:	40016020 	.word	0x40016020
 8004ca0:	40016040 	.word	0x40016040
 8004ca4:	40016080 	.word	0x40016080
 8004ca8:	400160a0 	.word	0x400160a0
 8004cac:	400160c0 	.word	0x400160c0
 8004cb0:	400160e0 	.word	0x400160e0

08004cb4 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b087      	sub	sp, #28
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	460b      	mov	r3, r1
 8004cbe:	607a      	str	r2, [r7, #4]
 8004cc0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8004cc6:	7afb      	ldrb	r3, [r7, #11]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d103      	bne.n	8004cd4 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	605a      	str	r2, [r3, #4]
      break;
 8004cd2:	e002      	b.n	8004cda <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	75fb      	strb	r3, [r7, #23]
      break;
 8004cd8:	bf00      	nop
  }

  return status;
 8004cda:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	371c      	adds	r7, #28
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr

08004ce8 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d101      	bne.n	8004cfc <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e003      	b.n	8004d04 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	683a      	ldr	r2, [r7, #0]
 8004d00:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004d02:	2300      	movs	r3, #0
  }
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	370c      	adds	r7, #12
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b086      	sub	sp, #24
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	0c1b      	lsrs	r3, r3, #16
 8004d1e:	f003 0301 	and.w	r3, r3, #1
 8004d22:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 031f 	and.w	r3, r3, #31
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d32:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	015a      	lsls	r2, r3, #5
 8004d38:	4b0c      	ldr	r3, [pc, #48]	@ (8004d6c <HAL_EXTI_IRQHandler+0x5c>)
 8004d3a:	4413      	add	r3, r2
 8004d3c:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	693a      	ldr	r2, [r7, #16]
 8004d44:	4013      	ands	r3, r2
 8004d46:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d009      	beq.n	8004d62 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	693a      	ldr	r2, [r7, #16]
 8004d52:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d002      	beq.n	8004d62 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	4798      	blx	r3
    }
  }
}
 8004d62:	bf00      	nop
 8004d64:	3718      	adds	r7, #24
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	40010414 	.word	0x40010414

08004d70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b087      	sub	sp, #28
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d7e:	e17f      	b.n	8005080 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	2101      	movs	r1, #1
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	fa01 f303 	lsl.w	r3, r1, r3
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	f000 8171 	beq.w	800507a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	f003 0303 	and.w	r3, r3, #3
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d005      	beq.n	8004db0 <HAL_GPIO_Init+0x40>
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	f003 0303 	and.w	r3, r3, #3
 8004dac:	2b02      	cmp	r3, #2
 8004dae:	d130      	bne.n	8004e12 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	005b      	lsls	r3, r3, #1
 8004dba:	2203      	movs	r2, #3
 8004dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc0:	43db      	mvns	r3, r3
 8004dc2:	693a      	ldr	r2, [r7, #16]
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	68da      	ldr	r2, [r3, #12]
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	005b      	lsls	r3, r3, #1
 8004dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd4:	693a      	ldr	r2, [r7, #16]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	693a      	ldr	r2, [r7, #16]
 8004dde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004de6:	2201      	movs	r2, #1
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	fa02 f303 	lsl.w	r3, r2, r3
 8004dee:	43db      	mvns	r3, r3
 8004df0:	693a      	ldr	r2, [r7, #16]
 8004df2:	4013      	ands	r3, r2
 8004df4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	091b      	lsrs	r3, r3, #4
 8004dfc:	f003 0201 	and.w	r2, r3, #1
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	fa02 f303 	lsl.w	r3, r2, r3
 8004e06:	693a      	ldr	r2, [r7, #16]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	693a      	ldr	r2, [r7, #16]
 8004e10:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	f003 0303 	and.w	r3, r3, #3
 8004e1a:	2b03      	cmp	r3, #3
 8004e1c:	d118      	bne.n	8004e50 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e22:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004e24:	2201      	movs	r2, #1
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	fa02 f303 	lsl.w	r3, r2, r3
 8004e2c:	43db      	mvns	r3, r3
 8004e2e:	693a      	ldr	r2, [r7, #16]
 8004e30:	4013      	ands	r3, r2
 8004e32:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	08db      	lsrs	r3, r3, #3
 8004e3a:	f003 0201 	and.w	r2, r3, #1
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	fa02 f303 	lsl.w	r3, r2, r3
 8004e44:	693a      	ldr	r2, [r7, #16]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	693a      	ldr	r2, [r7, #16]
 8004e4e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	f003 0303 	and.w	r3, r3, #3
 8004e58:	2b03      	cmp	r3, #3
 8004e5a:	d017      	beq.n	8004e8c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	005b      	lsls	r3, r3, #1
 8004e66:	2203      	movs	r2, #3
 8004e68:	fa02 f303 	lsl.w	r3, r2, r3
 8004e6c:	43db      	mvns	r3, r3
 8004e6e:	693a      	ldr	r2, [r7, #16]
 8004e70:	4013      	ands	r3, r2
 8004e72:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	689a      	ldr	r2, [r3, #8]
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	005b      	lsls	r3, r3, #1
 8004e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e80:	693a      	ldr	r2, [r7, #16]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	693a      	ldr	r2, [r7, #16]
 8004e8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	f003 0303 	and.w	r3, r3, #3
 8004e94:	2b02      	cmp	r3, #2
 8004e96:	d123      	bne.n	8004ee0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	08da      	lsrs	r2, r3, #3
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	3208      	adds	r2, #8
 8004ea0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ea4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	f003 0307 	and.w	r3, r3, #7
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	220f      	movs	r2, #15
 8004eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb4:	43db      	mvns	r3, r3
 8004eb6:	693a      	ldr	r2, [r7, #16]
 8004eb8:	4013      	ands	r3, r2
 8004eba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	691a      	ldr	r2, [r3, #16]
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	f003 0307 	and.w	r3, r3, #7
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ecc:	693a      	ldr	r2, [r7, #16]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	08da      	lsrs	r2, r3, #3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	3208      	adds	r2, #8
 8004eda:	6939      	ldr	r1, [r7, #16]
 8004edc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	005b      	lsls	r3, r3, #1
 8004eea:	2203      	movs	r2, #3
 8004eec:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef0:	43db      	mvns	r3, r3
 8004ef2:	693a      	ldr	r2, [r7, #16]
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	f003 0203 	and.w	r2, r3, #3
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	005b      	lsls	r3, r3, #1
 8004f04:	fa02 f303 	lsl.w	r3, r2, r3
 8004f08:	693a      	ldr	r2, [r7, #16]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	693a      	ldr	r2, [r7, #16]
 8004f12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	f000 80ac 	beq.w	800507a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f22:	4b5f      	ldr	r3, [pc, #380]	@ (80050a0 <HAL_GPIO_Init+0x330>)
 8004f24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f26:	4a5e      	ldr	r2, [pc, #376]	@ (80050a0 <HAL_GPIO_Init+0x330>)
 8004f28:	f043 0301 	orr.w	r3, r3, #1
 8004f2c:	6613      	str	r3, [r2, #96]	@ 0x60
 8004f2e:	4b5c      	ldr	r3, [pc, #368]	@ (80050a0 <HAL_GPIO_Init+0x330>)
 8004f30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f32:	f003 0301 	and.w	r3, r3, #1
 8004f36:	60bb      	str	r3, [r7, #8]
 8004f38:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004f3a:	4a5a      	ldr	r2, [pc, #360]	@ (80050a4 <HAL_GPIO_Init+0x334>)
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	089b      	lsrs	r3, r3, #2
 8004f40:	3302      	adds	r3, #2
 8004f42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f46:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	f003 0303 	and.w	r3, r3, #3
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	220f      	movs	r2, #15
 8004f52:	fa02 f303 	lsl.w	r3, r2, r3
 8004f56:	43db      	mvns	r3, r3
 8004f58:	693a      	ldr	r2, [r7, #16]
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004f64:	d025      	beq.n	8004fb2 <HAL_GPIO_Init+0x242>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	4a4f      	ldr	r2, [pc, #316]	@ (80050a8 <HAL_GPIO_Init+0x338>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d01f      	beq.n	8004fae <HAL_GPIO_Init+0x23e>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a4e      	ldr	r2, [pc, #312]	@ (80050ac <HAL_GPIO_Init+0x33c>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d019      	beq.n	8004faa <HAL_GPIO_Init+0x23a>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a4d      	ldr	r2, [pc, #308]	@ (80050b0 <HAL_GPIO_Init+0x340>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d013      	beq.n	8004fa6 <HAL_GPIO_Init+0x236>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4a4c      	ldr	r2, [pc, #304]	@ (80050b4 <HAL_GPIO_Init+0x344>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d00d      	beq.n	8004fa2 <HAL_GPIO_Init+0x232>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a4b      	ldr	r2, [pc, #300]	@ (80050b8 <HAL_GPIO_Init+0x348>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d007      	beq.n	8004f9e <HAL_GPIO_Init+0x22e>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a4a      	ldr	r2, [pc, #296]	@ (80050bc <HAL_GPIO_Init+0x34c>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d101      	bne.n	8004f9a <HAL_GPIO_Init+0x22a>
 8004f96:	2306      	movs	r3, #6
 8004f98:	e00c      	b.n	8004fb4 <HAL_GPIO_Init+0x244>
 8004f9a:	2307      	movs	r3, #7
 8004f9c:	e00a      	b.n	8004fb4 <HAL_GPIO_Init+0x244>
 8004f9e:	2305      	movs	r3, #5
 8004fa0:	e008      	b.n	8004fb4 <HAL_GPIO_Init+0x244>
 8004fa2:	2304      	movs	r3, #4
 8004fa4:	e006      	b.n	8004fb4 <HAL_GPIO_Init+0x244>
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	e004      	b.n	8004fb4 <HAL_GPIO_Init+0x244>
 8004faa:	2302      	movs	r3, #2
 8004fac:	e002      	b.n	8004fb4 <HAL_GPIO_Init+0x244>
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e000      	b.n	8004fb4 <HAL_GPIO_Init+0x244>
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	697a      	ldr	r2, [r7, #20]
 8004fb6:	f002 0203 	and.w	r2, r2, #3
 8004fba:	0092      	lsls	r2, r2, #2
 8004fbc:	4093      	lsls	r3, r2
 8004fbe:	693a      	ldr	r2, [r7, #16]
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004fc4:	4937      	ldr	r1, [pc, #220]	@ (80050a4 <HAL_GPIO_Init+0x334>)
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	089b      	lsrs	r3, r3, #2
 8004fca:	3302      	adds	r3, #2
 8004fcc:	693a      	ldr	r2, [r7, #16]
 8004fce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004fd2:	4b3b      	ldr	r3, [pc, #236]	@ (80050c0 <HAL_GPIO_Init+0x350>)
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	43db      	mvns	r3, r3
 8004fdc:	693a      	ldr	r2, [r7, #16]
 8004fde:	4013      	ands	r3, r2
 8004fe0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d003      	beq.n	8004ff6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004fee:	693a      	ldr	r2, [r7, #16]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004ff6:	4a32      	ldr	r2, [pc, #200]	@ (80050c0 <HAL_GPIO_Init+0x350>)
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004ffc:	4b30      	ldr	r3, [pc, #192]	@ (80050c0 <HAL_GPIO_Init+0x350>)
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	43db      	mvns	r3, r3
 8005006:	693a      	ldr	r2, [r7, #16]
 8005008:	4013      	ands	r3, r2
 800500a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005014:	2b00      	cmp	r3, #0
 8005016:	d003      	beq.n	8005020 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8005018:	693a      	ldr	r2, [r7, #16]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	4313      	orrs	r3, r2
 800501e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005020:	4a27      	ldr	r2, [pc, #156]	@ (80050c0 <HAL_GPIO_Init+0x350>)
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005026:	4b26      	ldr	r3, [pc, #152]	@ (80050c0 <HAL_GPIO_Init+0x350>)
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	43db      	mvns	r3, r3
 8005030:	693a      	ldr	r2, [r7, #16]
 8005032:	4013      	ands	r3, r2
 8005034:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800503e:	2b00      	cmp	r3, #0
 8005040:	d003      	beq.n	800504a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8005042:	693a      	ldr	r2, [r7, #16]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	4313      	orrs	r3, r2
 8005048:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800504a:	4a1d      	ldr	r2, [pc, #116]	@ (80050c0 <HAL_GPIO_Init+0x350>)
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005050:	4b1b      	ldr	r3, [pc, #108]	@ (80050c0 <HAL_GPIO_Init+0x350>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	43db      	mvns	r3, r3
 800505a:	693a      	ldr	r2, [r7, #16]
 800505c:	4013      	ands	r3, r2
 800505e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005068:	2b00      	cmp	r3, #0
 800506a:	d003      	beq.n	8005074 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800506c:	693a      	ldr	r2, [r7, #16]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	4313      	orrs	r3, r2
 8005072:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005074:	4a12      	ldr	r2, [pc, #72]	@ (80050c0 <HAL_GPIO_Init+0x350>)
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	3301      	adds	r3, #1
 800507e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	fa22 f303 	lsr.w	r3, r2, r3
 800508a:	2b00      	cmp	r3, #0
 800508c:	f47f ae78 	bne.w	8004d80 <HAL_GPIO_Init+0x10>
  }
}
 8005090:	bf00      	nop
 8005092:	bf00      	nop
 8005094:	371c      	adds	r7, #28
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr
 800509e:	bf00      	nop
 80050a0:	40021000 	.word	0x40021000
 80050a4:	40010000 	.word	0x40010000
 80050a8:	48000400 	.word	0x48000400
 80050ac:	48000800 	.word	0x48000800
 80050b0:	48000c00 	.word	0x48000c00
 80050b4:	48001000 	.word	0x48001000
 80050b8:	48001400 	.word	0x48001400
 80050bc:	48001800 	.word	0x48001800
 80050c0:	40010400 	.word	0x40010400

080050c4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b087      	sub	sp, #28
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80050ce:	2300      	movs	r3, #0
 80050d0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80050d2:	e0cd      	b.n	8005270 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80050d4:	2201      	movs	r2, #1
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	fa02 f303 	lsl.w	r3, r2, r3
 80050dc:	683a      	ldr	r2, [r7, #0]
 80050de:	4013      	ands	r3, r2
 80050e0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	f000 80c0 	beq.w	800526a <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80050ea:	4a68      	ldr	r2, [pc, #416]	@ (800528c <HAL_GPIO_DeInit+0x1c8>)
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	089b      	lsrs	r3, r3, #2
 80050f0:	3302      	adds	r3, #2
 80050f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050f6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	f003 0303 	and.w	r3, r3, #3
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	220f      	movs	r2, #15
 8005102:	fa02 f303 	lsl.w	r3, r2, r3
 8005106:	68fa      	ldr	r2, [r7, #12]
 8005108:	4013      	ands	r3, r2
 800510a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005112:	d025      	beq.n	8005160 <HAL_GPIO_DeInit+0x9c>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4a5e      	ldr	r2, [pc, #376]	@ (8005290 <HAL_GPIO_DeInit+0x1cc>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d01f      	beq.n	800515c <HAL_GPIO_DeInit+0x98>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4a5d      	ldr	r2, [pc, #372]	@ (8005294 <HAL_GPIO_DeInit+0x1d0>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d019      	beq.n	8005158 <HAL_GPIO_DeInit+0x94>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4a5c      	ldr	r2, [pc, #368]	@ (8005298 <HAL_GPIO_DeInit+0x1d4>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d013      	beq.n	8005154 <HAL_GPIO_DeInit+0x90>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4a5b      	ldr	r2, [pc, #364]	@ (800529c <HAL_GPIO_DeInit+0x1d8>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d00d      	beq.n	8005150 <HAL_GPIO_DeInit+0x8c>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	4a5a      	ldr	r2, [pc, #360]	@ (80052a0 <HAL_GPIO_DeInit+0x1dc>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d007      	beq.n	800514c <HAL_GPIO_DeInit+0x88>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4a59      	ldr	r2, [pc, #356]	@ (80052a4 <HAL_GPIO_DeInit+0x1e0>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d101      	bne.n	8005148 <HAL_GPIO_DeInit+0x84>
 8005144:	2306      	movs	r3, #6
 8005146:	e00c      	b.n	8005162 <HAL_GPIO_DeInit+0x9e>
 8005148:	2307      	movs	r3, #7
 800514a:	e00a      	b.n	8005162 <HAL_GPIO_DeInit+0x9e>
 800514c:	2305      	movs	r3, #5
 800514e:	e008      	b.n	8005162 <HAL_GPIO_DeInit+0x9e>
 8005150:	2304      	movs	r3, #4
 8005152:	e006      	b.n	8005162 <HAL_GPIO_DeInit+0x9e>
 8005154:	2303      	movs	r3, #3
 8005156:	e004      	b.n	8005162 <HAL_GPIO_DeInit+0x9e>
 8005158:	2302      	movs	r3, #2
 800515a:	e002      	b.n	8005162 <HAL_GPIO_DeInit+0x9e>
 800515c:	2301      	movs	r3, #1
 800515e:	e000      	b.n	8005162 <HAL_GPIO_DeInit+0x9e>
 8005160:	2300      	movs	r3, #0
 8005162:	697a      	ldr	r2, [r7, #20]
 8005164:	f002 0203 	and.w	r2, r2, #3
 8005168:	0092      	lsls	r2, r2, #2
 800516a:	4093      	lsls	r3, r2
 800516c:	68fa      	ldr	r2, [r7, #12]
 800516e:	429a      	cmp	r2, r3
 8005170:	d132      	bne.n	80051d8 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8005172:	4b4d      	ldr	r3, [pc, #308]	@ (80052a8 <HAL_GPIO_DeInit+0x1e4>)
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	43db      	mvns	r3, r3
 800517a:	494b      	ldr	r1, [pc, #300]	@ (80052a8 <HAL_GPIO_DeInit+0x1e4>)
 800517c:	4013      	ands	r3, r2
 800517e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8005180:	4b49      	ldr	r3, [pc, #292]	@ (80052a8 <HAL_GPIO_DeInit+0x1e4>)
 8005182:	685a      	ldr	r2, [r3, #4]
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	43db      	mvns	r3, r3
 8005188:	4947      	ldr	r1, [pc, #284]	@ (80052a8 <HAL_GPIO_DeInit+0x1e4>)
 800518a:	4013      	ands	r3, r2
 800518c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800518e:	4b46      	ldr	r3, [pc, #280]	@ (80052a8 <HAL_GPIO_DeInit+0x1e4>)
 8005190:	68da      	ldr	r2, [r3, #12]
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	43db      	mvns	r3, r3
 8005196:	4944      	ldr	r1, [pc, #272]	@ (80052a8 <HAL_GPIO_DeInit+0x1e4>)
 8005198:	4013      	ands	r3, r2
 800519a:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 800519c:	4b42      	ldr	r3, [pc, #264]	@ (80052a8 <HAL_GPIO_DeInit+0x1e4>)
 800519e:	689a      	ldr	r2, [r3, #8]
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	43db      	mvns	r3, r3
 80051a4:	4940      	ldr	r1, [pc, #256]	@ (80052a8 <HAL_GPIO_DeInit+0x1e4>)
 80051a6:	4013      	ands	r3, r2
 80051a8:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	f003 0303 	and.w	r3, r3, #3
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	220f      	movs	r2, #15
 80051b4:	fa02 f303 	lsl.w	r3, r2, r3
 80051b8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80051ba:	4a34      	ldr	r2, [pc, #208]	@ (800528c <HAL_GPIO_DeInit+0x1c8>)
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	089b      	lsrs	r3, r3, #2
 80051c0:	3302      	adds	r3, #2
 80051c2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	43da      	mvns	r2, r3
 80051ca:	4830      	ldr	r0, [pc, #192]	@ (800528c <HAL_GPIO_DeInit+0x1c8>)
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	089b      	lsrs	r3, r3, #2
 80051d0:	400a      	ands	r2, r1
 80051d2:	3302      	adds	r3, #2
 80051d4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	005b      	lsls	r3, r3, #1
 80051e0:	2103      	movs	r1, #3
 80051e2:	fa01 f303 	lsl.w	r3, r1, r3
 80051e6:	431a      	orrs	r2, r3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	08da      	lsrs	r2, r3, #3
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	3208      	adds	r2, #8
 80051f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	f003 0307 	and.w	r3, r3, #7
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	220f      	movs	r2, #15
 8005202:	fa02 f303 	lsl.w	r3, r2, r3
 8005206:	43db      	mvns	r3, r3
 8005208:	697a      	ldr	r2, [r7, #20]
 800520a:	08d2      	lsrs	r2, r2, #3
 800520c:	4019      	ands	r1, r3
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	3208      	adds	r2, #8
 8005212:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	689a      	ldr	r2, [r3, #8]
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	005b      	lsls	r3, r3, #1
 800521e:	2103      	movs	r1, #3
 8005220:	fa01 f303 	lsl.w	r3, r1, r3
 8005224:	43db      	mvns	r3, r3
 8005226:	401a      	ands	r2, r3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	685a      	ldr	r2, [r3, #4]
 8005230:	2101      	movs	r1, #1
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	fa01 f303 	lsl.w	r3, r1, r3
 8005238:	43db      	mvns	r3, r3
 800523a:	401a      	ands	r2, r3
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	68da      	ldr	r2, [r3, #12]
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	005b      	lsls	r3, r3, #1
 8005248:	2103      	movs	r1, #3
 800524a:	fa01 f303 	lsl.w	r3, r1, r3
 800524e:	43db      	mvns	r3, r3
 8005250:	401a      	ands	r2, r3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800525a:	2101      	movs	r1, #1
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	fa01 f303 	lsl.w	r3, r1, r3
 8005262:	43db      	mvns	r3, r3
 8005264:	401a      	ands	r2, r3
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	3301      	adds	r3, #1
 800526e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8005270:	683a      	ldr	r2, [r7, #0]
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	fa22 f303 	lsr.w	r3, r2, r3
 8005278:	2b00      	cmp	r3, #0
 800527a:	f47f af2b 	bne.w	80050d4 <HAL_GPIO_DeInit+0x10>
  }
}
 800527e:	bf00      	nop
 8005280:	bf00      	nop
 8005282:	371c      	adds	r7, #28
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr
 800528c:	40010000 	.word	0x40010000
 8005290:	48000400 	.word	0x48000400
 8005294:	48000800 	.word	0x48000800
 8005298:	48000c00 	.word	0x48000c00
 800529c:	48001000 	.word	0x48001000
 80052a0:	48001400 	.word	0x48001400
 80052a4:	48001800 	.word	0x48001800
 80052a8:	40010400 	.word	0x40010400

080052ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b085      	sub	sp, #20
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	460b      	mov	r3, r1
 80052b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	691a      	ldr	r2, [r3, #16]
 80052bc:	887b      	ldrh	r3, [r7, #2]
 80052be:	4013      	ands	r3, r2
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d002      	beq.n	80052ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80052c4:	2301      	movs	r3, #1
 80052c6:	73fb      	strb	r3, [r7, #15]
 80052c8:	e001      	b.n	80052ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80052ca:	2300      	movs	r3, #0
 80052cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80052ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3714      	adds	r7, #20
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr

080052dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80052dc:	b480      	push	{r7}
 80052de:	b083      	sub	sp, #12
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	460b      	mov	r3, r1
 80052e6:	807b      	strh	r3, [r7, #2]
 80052e8:	4613      	mov	r3, r2
 80052ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80052ec:	787b      	ldrb	r3, [r7, #1]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d003      	beq.n	80052fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80052f2:	887a      	ldrh	r2, [r7, #2]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80052f8:	e002      	b.n	8005300 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80052fa:	887a      	ldrh	r2, [r7, #2]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005300:	bf00      	nop
 8005302:	370c      	adds	r7, #12
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr

0800530c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800530c:	b480      	push	{r7}
 800530e:	b085      	sub	sp, #20
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	460b      	mov	r3, r1
 8005316:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	695b      	ldr	r3, [r3, #20]
 800531c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800531e:	887a      	ldrh	r2, [r7, #2]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	4013      	ands	r3, r2
 8005324:	041a      	lsls	r2, r3, #16
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	43d9      	mvns	r1, r3
 800532a:	887b      	ldrh	r3, [r7, #2]
 800532c:	400b      	ands	r3, r1
 800532e:	431a      	orrs	r2, r3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	619a      	str	r2, [r3, #24]
}
 8005334:	bf00      	nop
 8005336:	3714      	adds	r7, #20
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b082      	sub	sp, #8
 8005344:	af00      	add	r7, sp, #0
 8005346:	4603      	mov	r3, r0
 8005348:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800534a:	4b08      	ldr	r3, [pc, #32]	@ (800536c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800534c:	695a      	ldr	r2, [r3, #20]
 800534e:	88fb      	ldrh	r3, [r7, #6]
 8005350:	4013      	ands	r3, r2
 8005352:	2b00      	cmp	r3, #0
 8005354:	d006      	beq.n	8005364 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005356:	4a05      	ldr	r2, [pc, #20]	@ (800536c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005358:	88fb      	ldrh	r3, [r7, #6]
 800535a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800535c:	88fb      	ldrh	r3, [r7, #6]
 800535e:	4618      	mov	r0, r3
 8005360:	f000 f806 	bl	8005370 <HAL_GPIO_EXTI_Callback>
  }
}
 8005364:	bf00      	nop
 8005366:	3708      	adds	r7, #8
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}
 800536c:	40010400 	.word	0x40010400

08005370 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005370:	b480      	push	{r7}
 8005372:	b083      	sub	sp, #12
 8005374:	af00      	add	r7, sp, #0
 8005376:	4603      	mov	r3, r0
 8005378:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800537a:	bf00      	nop
 800537c:	370c      	adds	r7, #12
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr

08005386 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005386:	b580      	push	{r7, lr}
 8005388:	b082      	sub	sp, #8
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d101      	bne.n	8005398 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	e08d      	b.n	80054b4 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d106      	bne.n	80053b2 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f7fe f8ff 	bl	80035b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2224      	movs	r2, #36	@ 0x24
 80053b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f022 0201 	bic.w	r2, r2, #1
 80053c8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	685a      	ldr	r2, [r3, #4]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80053d6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	689a      	ldr	r2, [r3, #8]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80053e6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d107      	bne.n	8005400 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	689a      	ldr	r2, [r3, #8]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80053fc:	609a      	str	r2, [r3, #8]
 80053fe:	e006      	b.n	800540e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	689a      	ldr	r2, [r3, #8]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800540c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	2b02      	cmp	r3, #2
 8005414:	d108      	bne.n	8005428 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	685a      	ldr	r2, [r3, #4]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005424:	605a      	str	r2, [r3, #4]
 8005426:	e007      	b.n	8005438 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	685a      	ldr	r2, [r3, #4]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005436:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	6812      	ldr	r2, [r2, #0]
 8005442:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005446:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800544a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	68da      	ldr	r2, [r3, #12]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800545a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	691a      	ldr	r2, [r3, #16]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	695b      	ldr	r3, [r3, #20]
 8005464:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	699b      	ldr	r3, [r3, #24]
 800546c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	430a      	orrs	r2, r1
 8005474:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	69d9      	ldr	r1, [r3, #28]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a1a      	ldr	r2, [r3, #32]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	430a      	orrs	r2, r1
 8005484:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f042 0201 	orr.w	r2, r2, #1
 8005494:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2220      	movs	r2, #32
 80054a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80054b2:	2300      	movs	r3, #0
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3708      	adds	r7, #8
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}

080054bc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b082      	sub	sp, #8
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d101      	bne.n	80054ce <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	e021      	b.n	8005512 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2224      	movs	r2, #36	@ 0x24
 80054d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f022 0201 	bic.w	r2, r2, #1
 80054e4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f7fe f8c0 	bl	800366c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2200      	movs	r2, #0
 80054f0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005510:	2300      	movs	r3, #0
}
 8005512:	4618      	mov	r0, r3
 8005514:	3708      	adds	r7, #8
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
	...

0800551c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b088      	sub	sp, #32
 8005520:	af02      	add	r7, sp, #8
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	4608      	mov	r0, r1
 8005526:	4611      	mov	r1, r2
 8005528:	461a      	mov	r2, r3
 800552a:	4603      	mov	r3, r0
 800552c:	817b      	strh	r3, [r7, #10]
 800552e:	460b      	mov	r3, r1
 8005530:	813b      	strh	r3, [r7, #8]
 8005532:	4613      	mov	r3, r2
 8005534:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800553c:	b2db      	uxtb	r3, r3
 800553e:	2b20      	cmp	r3, #32
 8005540:	f040 80f9 	bne.w	8005736 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005544:	6a3b      	ldr	r3, [r7, #32]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d002      	beq.n	8005550 <HAL_I2C_Mem_Write+0x34>
 800554a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800554c:	2b00      	cmp	r3, #0
 800554e:	d105      	bne.n	800555c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005556:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	e0ed      	b.n	8005738 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005562:	2b01      	cmp	r3, #1
 8005564:	d101      	bne.n	800556a <HAL_I2C_Mem_Write+0x4e>
 8005566:	2302      	movs	r3, #2
 8005568:	e0e6      	b.n	8005738 <HAL_I2C_Mem_Write+0x21c>
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2201      	movs	r2, #1
 800556e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005572:	f7ff f951 	bl	8004818 <HAL_GetTick>
 8005576:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	9300      	str	r3, [sp, #0]
 800557c:	2319      	movs	r3, #25
 800557e:	2201      	movs	r2, #1
 8005580:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005584:	68f8      	ldr	r0, [r7, #12]
 8005586:	f000 fac3 	bl	8005b10 <I2C_WaitOnFlagUntilTimeout>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d001      	beq.n	8005594 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	e0d1      	b.n	8005738 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2221      	movs	r2, #33	@ 0x21
 8005598:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2240      	movs	r2, #64	@ 0x40
 80055a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2200      	movs	r2, #0
 80055a8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	6a3a      	ldr	r2, [r7, #32]
 80055ae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80055b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2200      	movs	r2, #0
 80055ba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80055bc:	88f8      	ldrh	r0, [r7, #6]
 80055be:	893a      	ldrh	r2, [r7, #8]
 80055c0:	8979      	ldrh	r1, [r7, #10]
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	9301      	str	r3, [sp, #4]
 80055c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055c8:	9300      	str	r3, [sp, #0]
 80055ca:	4603      	mov	r3, r0
 80055cc:	68f8      	ldr	r0, [r7, #12]
 80055ce:	f000 f9d3 	bl	8005978 <I2C_RequestMemoryWrite>
 80055d2:	4603      	mov	r3, r0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d005      	beq.n	80055e4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2200      	movs	r2, #0
 80055dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e0a9      	b.n	8005738 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	2bff      	cmp	r3, #255	@ 0xff
 80055ec:	d90e      	bls.n	800560c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	22ff      	movs	r2, #255	@ 0xff
 80055f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055f8:	b2da      	uxtb	r2, r3
 80055fa:	8979      	ldrh	r1, [r7, #10]
 80055fc:	2300      	movs	r3, #0
 80055fe:	9300      	str	r3, [sp, #0]
 8005600:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005604:	68f8      	ldr	r0, [r7, #12]
 8005606:	f000 fc47 	bl	8005e98 <I2C_TransferConfig>
 800560a:	e00f      	b.n	800562c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005610:	b29a      	uxth	r2, r3
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800561a:	b2da      	uxtb	r2, r3
 800561c:	8979      	ldrh	r1, [r7, #10]
 800561e:	2300      	movs	r3, #0
 8005620:	9300      	str	r3, [sp, #0]
 8005622:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005626:	68f8      	ldr	r0, [r7, #12]
 8005628:	f000 fc36 	bl	8005e98 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800562c:	697a      	ldr	r2, [r7, #20]
 800562e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005630:	68f8      	ldr	r0, [r7, #12]
 8005632:	f000 fac6 	bl	8005bc2 <I2C_WaitOnTXISFlagUntilTimeout>
 8005636:	4603      	mov	r3, r0
 8005638:	2b00      	cmp	r3, #0
 800563a:	d001      	beq.n	8005640 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	e07b      	b.n	8005738 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005644:	781a      	ldrb	r2, [r3, #0]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005650:	1c5a      	adds	r2, r3, #1
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800565a:	b29b      	uxth	r3, r3
 800565c:	3b01      	subs	r3, #1
 800565e:	b29a      	uxth	r2, r3
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005668:	3b01      	subs	r3, #1
 800566a:	b29a      	uxth	r2, r3
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005674:	b29b      	uxth	r3, r3
 8005676:	2b00      	cmp	r3, #0
 8005678:	d034      	beq.n	80056e4 <HAL_I2C_Mem_Write+0x1c8>
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800567e:	2b00      	cmp	r3, #0
 8005680:	d130      	bne.n	80056e4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	9300      	str	r3, [sp, #0]
 8005686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005688:	2200      	movs	r2, #0
 800568a:	2180      	movs	r1, #128	@ 0x80
 800568c:	68f8      	ldr	r0, [r7, #12]
 800568e:	f000 fa3f 	bl	8005b10 <I2C_WaitOnFlagUntilTimeout>
 8005692:	4603      	mov	r3, r0
 8005694:	2b00      	cmp	r3, #0
 8005696:	d001      	beq.n	800569c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	e04d      	b.n	8005738 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	2bff      	cmp	r3, #255	@ 0xff
 80056a4:	d90e      	bls.n	80056c4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	22ff      	movs	r2, #255	@ 0xff
 80056aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056b0:	b2da      	uxtb	r2, r3
 80056b2:	8979      	ldrh	r1, [r7, #10]
 80056b4:	2300      	movs	r3, #0
 80056b6:	9300      	str	r3, [sp, #0]
 80056b8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80056bc:	68f8      	ldr	r0, [r7, #12]
 80056be:	f000 fbeb 	bl	8005e98 <I2C_TransferConfig>
 80056c2:	e00f      	b.n	80056e4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056c8:	b29a      	uxth	r2, r3
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056d2:	b2da      	uxtb	r2, r3
 80056d4:	8979      	ldrh	r1, [r7, #10]
 80056d6:	2300      	movs	r3, #0
 80056d8:	9300      	str	r3, [sp, #0]
 80056da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80056de:	68f8      	ldr	r0, [r7, #12]
 80056e0:	f000 fbda 	bl	8005e98 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d19e      	bne.n	800562c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056ee:	697a      	ldr	r2, [r7, #20]
 80056f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80056f2:	68f8      	ldr	r0, [r7, #12]
 80056f4:	f000 faac 	bl	8005c50 <I2C_WaitOnSTOPFlagUntilTimeout>
 80056f8:	4603      	mov	r3, r0
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d001      	beq.n	8005702 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e01a      	b.n	8005738 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	2220      	movs	r2, #32
 8005708:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	6859      	ldr	r1, [r3, #4]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	4b0a      	ldr	r3, [pc, #40]	@ (8005740 <HAL_I2C_Mem_Write+0x224>)
 8005716:	400b      	ands	r3, r1
 8005718:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2220      	movs	r2, #32
 800571e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2200      	movs	r2, #0
 800572e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005732:	2300      	movs	r3, #0
 8005734:	e000      	b.n	8005738 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005736:	2302      	movs	r3, #2
  }
}
 8005738:	4618      	mov	r0, r3
 800573a:	3718      	adds	r7, #24
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}
 8005740:	fe00e800 	.word	0xfe00e800

08005744 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b088      	sub	sp, #32
 8005748:	af02      	add	r7, sp, #8
 800574a:	60f8      	str	r0, [r7, #12]
 800574c:	4608      	mov	r0, r1
 800574e:	4611      	mov	r1, r2
 8005750:	461a      	mov	r2, r3
 8005752:	4603      	mov	r3, r0
 8005754:	817b      	strh	r3, [r7, #10]
 8005756:	460b      	mov	r3, r1
 8005758:	813b      	strh	r3, [r7, #8]
 800575a:	4613      	mov	r3, r2
 800575c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005764:	b2db      	uxtb	r3, r3
 8005766:	2b20      	cmp	r3, #32
 8005768:	f040 80fd 	bne.w	8005966 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800576c:	6a3b      	ldr	r3, [r7, #32]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d002      	beq.n	8005778 <HAL_I2C_Mem_Read+0x34>
 8005772:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005774:	2b00      	cmp	r3, #0
 8005776:	d105      	bne.n	8005784 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800577e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	e0f1      	b.n	8005968 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800578a:	2b01      	cmp	r3, #1
 800578c:	d101      	bne.n	8005792 <HAL_I2C_Mem_Read+0x4e>
 800578e:	2302      	movs	r3, #2
 8005790:	e0ea      	b.n	8005968 <HAL_I2C_Mem_Read+0x224>
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2201      	movs	r2, #1
 8005796:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800579a:	f7ff f83d 	bl	8004818 <HAL_GetTick>
 800579e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	9300      	str	r3, [sp, #0]
 80057a4:	2319      	movs	r3, #25
 80057a6:	2201      	movs	r2, #1
 80057a8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80057ac:	68f8      	ldr	r0, [r7, #12]
 80057ae:	f000 f9af 	bl	8005b10 <I2C_WaitOnFlagUntilTimeout>
 80057b2:	4603      	mov	r3, r0
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d001      	beq.n	80057bc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	e0d5      	b.n	8005968 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2222      	movs	r2, #34	@ 0x22
 80057c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2240      	movs	r2, #64	@ 0x40
 80057c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2200      	movs	r2, #0
 80057d0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	6a3a      	ldr	r2, [r7, #32]
 80057d6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80057dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2200      	movs	r2, #0
 80057e2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80057e4:	88f8      	ldrh	r0, [r7, #6]
 80057e6:	893a      	ldrh	r2, [r7, #8]
 80057e8:	8979      	ldrh	r1, [r7, #10]
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	9301      	str	r3, [sp, #4]
 80057ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057f0:	9300      	str	r3, [sp, #0]
 80057f2:	4603      	mov	r3, r0
 80057f4:	68f8      	ldr	r0, [r7, #12]
 80057f6:	f000 f913 	bl	8005a20 <I2C_RequestMemoryRead>
 80057fa:	4603      	mov	r3, r0
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d005      	beq.n	800580c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2200      	movs	r2, #0
 8005804:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	e0ad      	b.n	8005968 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005810:	b29b      	uxth	r3, r3
 8005812:	2bff      	cmp	r3, #255	@ 0xff
 8005814:	d90e      	bls.n	8005834 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2201      	movs	r2, #1
 800581a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005820:	b2da      	uxtb	r2, r3
 8005822:	8979      	ldrh	r1, [r7, #10]
 8005824:	4b52      	ldr	r3, [pc, #328]	@ (8005970 <HAL_I2C_Mem_Read+0x22c>)
 8005826:	9300      	str	r3, [sp, #0]
 8005828:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800582c:	68f8      	ldr	r0, [r7, #12]
 800582e:	f000 fb33 	bl	8005e98 <I2C_TransferConfig>
 8005832:	e00f      	b.n	8005854 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005838:	b29a      	uxth	r2, r3
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005842:	b2da      	uxtb	r2, r3
 8005844:	8979      	ldrh	r1, [r7, #10]
 8005846:	4b4a      	ldr	r3, [pc, #296]	@ (8005970 <HAL_I2C_Mem_Read+0x22c>)
 8005848:	9300      	str	r3, [sp, #0]
 800584a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800584e:	68f8      	ldr	r0, [r7, #12]
 8005850:	f000 fb22 	bl	8005e98 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	9300      	str	r3, [sp, #0]
 8005858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800585a:	2200      	movs	r2, #0
 800585c:	2104      	movs	r1, #4
 800585e:	68f8      	ldr	r0, [r7, #12]
 8005860:	f000 f956 	bl	8005b10 <I2C_WaitOnFlagUntilTimeout>
 8005864:	4603      	mov	r3, r0
 8005866:	2b00      	cmp	r3, #0
 8005868:	d001      	beq.n	800586e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	e07c      	b.n	8005968 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005878:	b2d2      	uxtb	r2, r2
 800587a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005880:	1c5a      	adds	r2, r3, #1
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800588a:	3b01      	subs	r3, #1
 800588c:	b29a      	uxth	r2, r3
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005896:	b29b      	uxth	r3, r3
 8005898:	3b01      	subs	r3, #1
 800589a:	b29a      	uxth	r2, r3
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d034      	beq.n	8005914 <HAL_I2C_Mem_Read+0x1d0>
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d130      	bne.n	8005914 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	9300      	str	r3, [sp, #0]
 80058b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058b8:	2200      	movs	r2, #0
 80058ba:	2180      	movs	r1, #128	@ 0x80
 80058bc:	68f8      	ldr	r0, [r7, #12]
 80058be:	f000 f927 	bl	8005b10 <I2C_WaitOnFlagUntilTimeout>
 80058c2:	4603      	mov	r3, r0
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d001      	beq.n	80058cc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	e04d      	b.n	8005968 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	2bff      	cmp	r3, #255	@ 0xff
 80058d4:	d90e      	bls.n	80058f4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2201      	movs	r2, #1
 80058da:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058e0:	b2da      	uxtb	r2, r3
 80058e2:	8979      	ldrh	r1, [r7, #10]
 80058e4:	2300      	movs	r3, #0
 80058e6:	9300      	str	r3, [sp, #0]
 80058e8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80058ec:	68f8      	ldr	r0, [r7, #12]
 80058ee:	f000 fad3 	bl	8005e98 <I2C_TransferConfig>
 80058f2:	e00f      	b.n	8005914 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058f8:	b29a      	uxth	r2, r3
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005902:	b2da      	uxtb	r2, r3
 8005904:	8979      	ldrh	r1, [r7, #10]
 8005906:	2300      	movs	r3, #0
 8005908:	9300      	str	r3, [sp, #0]
 800590a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800590e:	68f8      	ldr	r0, [r7, #12]
 8005910:	f000 fac2 	bl	8005e98 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005918:	b29b      	uxth	r3, r3
 800591a:	2b00      	cmp	r3, #0
 800591c:	d19a      	bne.n	8005854 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800591e:	697a      	ldr	r2, [r7, #20]
 8005920:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005922:	68f8      	ldr	r0, [r7, #12]
 8005924:	f000 f994 	bl	8005c50 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005928:	4603      	mov	r3, r0
 800592a:	2b00      	cmp	r3, #0
 800592c:	d001      	beq.n	8005932 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e01a      	b.n	8005968 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	2220      	movs	r2, #32
 8005938:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	6859      	ldr	r1, [r3, #4]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	4b0b      	ldr	r3, [pc, #44]	@ (8005974 <HAL_I2C_Mem_Read+0x230>)
 8005946:	400b      	ands	r3, r1
 8005948:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2220      	movs	r2, #32
 800594e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2200      	movs	r2, #0
 8005956:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2200      	movs	r2, #0
 800595e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005962:	2300      	movs	r3, #0
 8005964:	e000      	b.n	8005968 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005966:	2302      	movs	r3, #2
  }
}
 8005968:	4618      	mov	r0, r3
 800596a:	3718      	adds	r7, #24
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}
 8005970:	80002400 	.word	0x80002400
 8005974:	fe00e800 	.word	0xfe00e800

08005978 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b086      	sub	sp, #24
 800597c:	af02      	add	r7, sp, #8
 800597e:	60f8      	str	r0, [r7, #12]
 8005980:	4608      	mov	r0, r1
 8005982:	4611      	mov	r1, r2
 8005984:	461a      	mov	r2, r3
 8005986:	4603      	mov	r3, r0
 8005988:	817b      	strh	r3, [r7, #10]
 800598a:	460b      	mov	r3, r1
 800598c:	813b      	strh	r3, [r7, #8]
 800598e:	4613      	mov	r3, r2
 8005990:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005992:	88fb      	ldrh	r3, [r7, #6]
 8005994:	b2da      	uxtb	r2, r3
 8005996:	8979      	ldrh	r1, [r7, #10]
 8005998:	4b20      	ldr	r3, [pc, #128]	@ (8005a1c <I2C_RequestMemoryWrite+0xa4>)
 800599a:	9300      	str	r3, [sp, #0]
 800599c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80059a0:	68f8      	ldr	r0, [r7, #12]
 80059a2:	f000 fa79 	bl	8005e98 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059a6:	69fa      	ldr	r2, [r7, #28]
 80059a8:	69b9      	ldr	r1, [r7, #24]
 80059aa:	68f8      	ldr	r0, [r7, #12]
 80059ac:	f000 f909 	bl	8005bc2 <I2C_WaitOnTXISFlagUntilTimeout>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d001      	beq.n	80059ba <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	e02c      	b.n	8005a14 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80059ba:	88fb      	ldrh	r3, [r7, #6]
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d105      	bne.n	80059cc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80059c0:	893b      	ldrh	r3, [r7, #8]
 80059c2:	b2da      	uxtb	r2, r3
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	629a      	str	r2, [r3, #40]	@ 0x28
 80059ca:	e015      	b.n	80059f8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80059cc:	893b      	ldrh	r3, [r7, #8]
 80059ce:	0a1b      	lsrs	r3, r3, #8
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	b2da      	uxtb	r2, r3
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059da:	69fa      	ldr	r2, [r7, #28]
 80059dc:	69b9      	ldr	r1, [r7, #24]
 80059de:	68f8      	ldr	r0, [r7, #12]
 80059e0:	f000 f8ef 	bl	8005bc2 <I2C_WaitOnTXISFlagUntilTimeout>
 80059e4:	4603      	mov	r3, r0
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d001      	beq.n	80059ee <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	e012      	b.n	8005a14 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80059ee:	893b      	ldrh	r3, [r7, #8]
 80059f0:	b2da      	uxtb	r2, r3
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80059f8:	69fb      	ldr	r3, [r7, #28]
 80059fa:	9300      	str	r3, [sp, #0]
 80059fc:	69bb      	ldr	r3, [r7, #24]
 80059fe:	2200      	movs	r2, #0
 8005a00:	2180      	movs	r1, #128	@ 0x80
 8005a02:	68f8      	ldr	r0, [r7, #12]
 8005a04:	f000 f884 	bl	8005b10 <I2C_WaitOnFlagUntilTimeout>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d001      	beq.n	8005a12 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e000      	b.n	8005a14 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005a12:	2300      	movs	r3, #0
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3710      	adds	r7, #16
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}
 8005a1c:	80002000 	.word	0x80002000

08005a20 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b086      	sub	sp, #24
 8005a24:	af02      	add	r7, sp, #8
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	4608      	mov	r0, r1
 8005a2a:	4611      	mov	r1, r2
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	4603      	mov	r3, r0
 8005a30:	817b      	strh	r3, [r7, #10]
 8005a32:	460b      	mov	r3, r1
 8005a34:	813b      	strh	r3, [r7, #8]
 8005a36:	4613      	mov	r3, r2
 8005a38:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005a3a:	88fb      	ldrh	r3, [r7, #6]
 8005a3c:	b2da      	uxtb	r2, r3
 8005a3e:	8979      	ldrh	r1, [r7, #10]
 8005a40:	4b20      	ldr	r3, [pc, #128]	@ (8005ac4 <I2C_RequestMemoryRead+0xa4>)
 8005a42:	9300      	str	r3, [sp, #0]
 8005a44:	2300      	movs	r3, #0
 8005a46:	68f8      	ldr	r0, [r7, #12]
 8005a48:	f000 fa26 	bl	8005e98 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a4c:	69fa      	ldr	r2, [r7, #28]
 8005a4e:	69b9      	ldr	r1, [r7, #24]
 8005a50:	68f8      	ldr	r0, [r7, #12]
 8005a52:	f000 f8b6 	bl	8005bc2 <I2C_WaitOnTXISFlagUntilTimeout>
 8005a56:	4603      	mov	r3, r0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d001      	beq.n	8005a60 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e02c      	b.n	8005aba <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005a60:	88fb      	ldrh	r3, [r7, #6]
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d105      	bne.n	8005a72 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005a66:	893b      	ldrh	r3, [r7, #8]
 8005a68:	b2da      	uxtb	r2, r3
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	629a      	str	r2, [r3, #40]	@ 0x28
 8005a70:	e015      	b.n	8005a9e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005a72:	893b      	ldrh	r3, [r7, #8]
 8005a74:	0a1b      	lsrs	r3, r3, #8
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	b2da      	uxtb	r2, r3
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a80:	69fa      	ldr	r2, [r7, #28]
 8005a82:	69b9      	ldr	r1, [r7, #24]
 8005a84:	68f8      	ldr	r0, [r7, #12]
 8005a86:	f000 f89c 	bl	8005bc2 <I2C_WaitOnTXISFlagUntilTimeout>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d001      	beq.n	8005a94 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	e012      	b.n	8005aba <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005a94:	893b      	ldrh	r3, [r7, #8]
 8005a96:	b2da      	uxtb	r2, r3
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005a9e:	69fb      	ldr	r3, [r7, #28]
 8005aa0:	9300      	str	r3, [sp, #0]
 8005aa2:	69bb      	ldr	r3, [r7, #24]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	2140      	movs	r1, #64	@ 0x40
 8005aa8:	68f8      	ldr	r0, [r7, #12]
 8005aaa:	f000 f831 	bl	8005b10 <I2C_WaitOnFlagUntilTimeout>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d001      	beq.n	8005ab8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	e000      	b.n	8005aba <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005ab8:	2300      	movs	r3, #0
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3710      	adds	r7, #16
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}
 8005ac2:	bf00      	nop
 8005ac4:	80002000 	.word	0x80002000

08005ac8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b083      	sub	sp, #12
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	699b      	ldr	r3, [r3, #24]
 8005ad6:	f003 0302 	and.w	r3, r3, #2
 8005ada:	2b02      	cmp	r3, #2
 8005adc:	d103      	bne.n	8005ae6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	699b      	ldr	r3, [r3, #24]
 8005aec:	f003 0301 	and.w	r3, r3, #1
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d007      	beq.n	8005b04 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	699a      	ldr	r2, [r3, #24]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f042 0201 	orr.w	r2, r2, #1
 8005b02:	619a      	str	r2, [r3, #24]
  }
}
 8005b04:	bf00      	nop
 8005b06:	370c      	adds	r7, #12
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr

08005b10 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	60b9      	str	r1, [r7, #8]
 8005b1a:	603b      	str	r3, [r7, #0]
 8005b1c:	4613      	mov	r3, r2
 8005b1e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b20:	e03b      	b.n	8005b9a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b22:	69ba      	ldr	r2, [r7, #24]
 8005b24:	6839      	ldr	r1, [r7, #0]
 8005b26:	68f8      	ldr	r0, [r7, #12]
 8005b28:	f000 f8d6 	bl	8005cd8 <I2C_IsErrorOccurred>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d001      	beq.n	8005b36 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	e041      	b.n	8005bba <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b3c:	d02d      	beq.n	8005b9a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b3e:	f7fe fe6b 	bl	8004818 <HAL_GetTick>
 8005b42:	4602      	mov	r2, r0
 8005b44:	69bb      	ldr	r3, [r7, #24]
 8005b46:	1ad3      	subs	r3, r2, r3
 8005b48:	683a      	ldr	r2, [r7, #0]
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d302      	bcc.n	8005b54 <I2C_WaitOnFlagUntilTimeout+0x44>
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d122      	bne.n	8005b9a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	699a      	ldr	r2, [r3, #24]
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	68ba      	ldr	r2, [r7, #8]
 8005b60:	429a      	cmp	r2, r3
 8005b62:	bf0c      	ite	eq
 8005b64:	2301      	moveq	r3, #1
 8005b66:	2300      	movne	r3, #0
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	79fb      	ldrb	r3, [r7, #7]
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d113      	bne.n	8005b9a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b76:	f043 0220 	orr.w	r2, r3, #32
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2220      	movs	r2, #32
 8005b82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2200      	movs	r2, #0
 8005b92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	e00f      	b.n	8005bba <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	699a      	ldr	r2, [r3, #24]
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	68ba      	ldr	r2, [r7, #8]
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	bf0c      	ite	eq
 8005baa:	2301      	moveq	r3, #1
 8005bac:	2300      	movne	r3, #0
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	79fb      	ldrb	r3, [r7, #7]
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d0b4      	beq.n	8005b22 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005bb8:	2300      	movs	r3, #0
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3710      	adds	r7, #16
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}

08005bc2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005bc2:	b580      	push	{r7, lr}
 8005bc4:	b084      	sub	sp, #16
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	60f8      	str	r0, [r7, #12]
 8005bca:	60b9      	str	r1, [r7, #8]
 8005bcc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005bce:	e033      	b.n	8005c38 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bd0:	687a      	ldr	r2, [r7, #4]
 8005bd2:	68b9      	ldr	r1, [r7, #8]
 8005bd4:	68f8      	ldr	r0, [r7, #12]
 8005bd6:	f000 f87f 	bl	8005cd8 <I2C_IsErrorOccurred>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d001      	beq.n	8005be4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005be0:	2301      	movs	r3, #1
 8005be2:	e031      	b.n	8005c48 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bea:	d025      	beq.n	8005c38 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bec:	f7fe fe14 	bl	8004818 <HAL_GetTick>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	1ad3      	subs	r3, r2, r3
 8005bf6:	68ba      	ldr	r2, [r7, #8]
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d302      	bcc.n	8005c02 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d11a      	bne.n	8005c38 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	699b      	ldr	r3, [r3, #24]
 8005c08:	f003 0302 	and.w	r3, r3, #2
 8005c0c:	2b02      	cmp	r3, #2
 8005c0e:	d013      	beq.n	8005c38 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c14:	f043 0220 	orr.w	r2, r3, #32
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2220      	movs	r2, #32
 8005c20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2200      	movs	r2, #0
 8005c28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	e007      	b.n	8005c48 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	699b      	ldr	r3, [r3, #24]
 8005c3e:	f003 0302 	and.w	r3, r3, #2
 8005c42:	2b02      	cmp	r3, #2
 8005c44:	d1c4      	bne.n	8005bd0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005c46:	2300      	movs	r3, #0
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3710      	adds	r7, #16
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b084      	sub	sp, #16
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	60b9      	str	r1, [r7, #8]
 8005c5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c5c:	e02f      	b.n	8005cbe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	68b9      	ldr	r1, [r7, #8]
 8005c62:	68f8      	ldr	r0, [r7, #12]
 8005c64:	f000 f838 	bl	8005cd8 <I2C_IsErrorOccurred>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d001      	beq.n	8005c72 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e02d      	b.n	8005cce <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c72:	f7fe fdd1 	bl	8004818 <HAL_GetTick>
 8005c76:	4602      	mov	r2, r0
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	1ad3      	subs	r3, r2, r3
 8005c7c:	68ba      	ldr	r2, [r7, #8]
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d302      	bcc.n	8005c88 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d11a      	bne.n	8005cbe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	699b      	ldr	r3, [r3, #24]
 8005c8e:	f003 0320 	and.w	r3, r3, #32
 8005c92:	2b20      	cmp	r3, #32
 8005c94:	d013      	beq.n	8005cbe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c9a:	f043 0220 	orr.w	r2, r3, #32
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2220      	movs	r2, #32
 8005ca6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2200      	movs	r2, #0
 8005cae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e007      	b.n	8005cce <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	699b      	ldr	r3, [r3, #24]
 8005cc4:	f003 0320 	and.w	r3, r3, #32
 8005cc8:	2b20      	cmp	r3, #32
 8005cca:	d1c8      	bne.n	8005c5e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005ccc:	2300      	movs	r3, #0
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3710      	adds	r7, #16
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}
	...

08005cd8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b08a      	sub	sp, #40	@ 0x28
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	60f8      	str	r0, [r7, #12]
 8005ce0:	60b9      	str	r1, [r7, #8]
 8005ce2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	699b      	ldr	r3, [r3, #24]
 8005cf0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005cfa:	69bb      	ldr	r3, [r7, #24]
 8005cfc:	f003 0310 	and.w	r3, r3, #16
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d068      	beq.n	8005dd6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	2210      	movs	r2, #16
 8005d0a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005d0c:	e049      	b.n	8005da2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d14:	d045      	beq.n	8005da2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005d16:	f7fe fd7f 	bl	8004818 <HAL_GetTick>
 8005d1a:	4602      	mov	r2, r0
 8005d1c:	69fb      	ldr	r3, [r7, #28]
 8005d1e:	1ad3      	subs	r3, r2, r3
 8005d20:	68ba      	ldr	r2, [r7, #8]
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d302      	bcc.n	8005d2c <I2C_IsErrorOccurred+0x54>
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d13a      	bne.n	8005da2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d36:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005d3e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	699b      	ldr	r3, [r3, #24]
 8005d46:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005d4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d4e:	d121      	bne.n	8005d94 <I2C_IsErrorOccurred+0xbc>
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005d56:	d01d      	beq.n	8005d94 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005d58:	7cfb      	ldrb	r3, [r7, #19]
 8005d5a:	2b20      	cmp	r3, #32
 8005d5c:	d01a      	beq.n	8005d94 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	685a      	ldr	r2, [r3, #4]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005d6c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005d6e:	f7fe fd53 	bl	8004818 <HAL_GetTick>
 8005d72:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005d74:	e00e      	b.n	8005d94 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005d76:	f7fe fd4f 	bl	8004818 <HAL_GetTick>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	69fb      	ldr	r3, [r7, #28]
 8005d7e:	1ad3      	subs	r3, r2, r3
 8005d80:	2b19      	cmp	r3, #25
 8005d82:	d907      	bls.n	8005d94 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005d84:	6a3b      	ldr	r3, [r7, #32]
 8005d86:	f043 0320 	orr.w	r3, r3, #32
 8005d8a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005d92:	e006      	b.n	8005da2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	699b      	ldr	r3, [r3, #24]
 8005d9a:	f003 0320 	and.w	r3, r3, #32
 8005d9e:	2b20      	cmp	r3, #32
 8005da0:	d1e9      	bne.n	8005d76 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	699b      	ldr	r3, [r3, #24]
 8005da8:	f003 0320 	and.w	r3, r3, #32
 8005dac:	2b20      	cmp	r3, #32
 8005dae:	d003      	beq.n	8005db8 <I2C_IsErrorOccurred+0xe0>
 8005db0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d0aa      	beq.n	8005d0e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005db8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d103      	bne.n	8005dc8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	2220      	movs	r2, #32
 8005dc6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005dc8:	6a3b      	ldr	r3, [r7, #32]
 8005dca:	f043 0304 	orr.w	r3, r3, #4
 8005dce:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	699b      	ldr	r3, [r3, #24]
 8005ddc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d00b      	beq.n	8005e00 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005de8:	6a3b      	ldr	r3, [r7, #32]
 8005dea:	f043 0301 	orr.w	r3, r3, #1
 8005dee:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005df8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005e00:	69bb      	ldr	r3, [r7, #24]
 8005e02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d00b      	beq.n	8005e22 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005e0a:	6a3b      	ldr	r3, [r7, #32]
 8005e0c:	f043 0308 	orr.w	r3, r3, #8
 8005e10:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005e1a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005e22:	69bb      	ldr	r3, [r7, #24]
 8005e24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d00b      	beq.n	8005e44 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005e2c:	6a3b      	ldr	r3, [r7, #32]
 8005e2e:	f043 0302 	orr.w	r3, r3, #2
 8005e32:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e3c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005e44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d01c      	beq.n	8005e86 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005e4c:	68f8      	ldr	r0, [r7, #12]
 8005e4e:	f7ff fe3b 	bl	8005ac8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	6859      	ldr	r1, [r3, #4]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	4b0d      	ldr	r3, [pc, #52]	@ (8005e94 <I2C_IsErrorOccurred+0x1bc>)
 8005e5e:	400b      	ands	r3, r1
 8005e60:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005e66:	6a3b      	ldr	r3, [r7, #32]
 8005e68:	431a      	orrs	r2, r3
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2220      	movs	r2, #32
 8005e72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2200      	movs	r2, #0
 8005e82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005e86:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3728      	adds	r7, #40	@ 0x28
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop
 8005e94:	fe00e800 	.word	0xfe00e800

08005e98 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b087      	sub	sp, #28
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	607b      	str	r3, [r7, #4]
 8005ea2:	460b      	mov	r3, r1
 8005ea4:	817b      	strh	r3, [r7, #10]
 8005ea6:	4613      	mov	r3, r2
 8005ea8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005eaa:	897b      	ldrh	r3, [r7, #10]
 8005eac:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005eb0:	7a7b      	ldrb	r3, [r7, #9]
 8005eb2:	041b      	lsls	r3, r3, #16
 8005eb4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005eb8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005ebe:	6a3b      	ldr	r3, [r7, #32]
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005ec6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	685a      	ldr	r2, [r3, #4]
 8005ece:	6a3b      	ldr	r3, [r7, #32]
 8005ed0:	0d5b      	lsrs	r3, r3, #21
 8005ed2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005ed6:	4b08      	ldr	r3, [pc, #32]	@ (8005ef8 <I2C_TransferConfig+0x60>)
 8005ed8:	430b      	orrs	r3, r1
 8005eda:	43db      	mvns	r3, r3
 8005edc:	ea02 0103 	and.w	r1, r2, r3
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	697a      	ldr	r2, [r7, #20]
 8005ee6:	430a      	orrs	r2, r1
 8005ee8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005eea:	bf00      	nop
 8005eec:	371c      	adds	r7, #28
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr
 8005ef6:	bf00      	nop
 8005ef8:	03ff63ff 	.word	0x03ff63ff

08005efc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b083      	sub	sp, #12
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	2b20      	cmp	r3, #32
 8005f10:	d138      	bne.n	8005f84 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d101      	bne.n	8005f20 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005f1c:	2302      	movs	r3, #2
 8005f1e:	e032      	b.n	8005f86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2224      	movs	r2, #36	@ 0x24
 8005f2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f022 0201 	bic.w	r2, r2, #1
 8005f3e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005f4e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	6819      	ldr	r1, [r3, #0]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	683a      	ldr	r2, [r7, #0]
 8005f5c:	430a      	orrs	r2, r1
 8005f5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f042 0201 	orr.w	r2, r2, #1
 8005f6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2220      	movs	r2, #32
 8005f74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005f80:	2300      	movs	r3, #0
 8005f82:	e000      	b.n	8005f86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005f84:	2302      	movs	r3, #2
  }
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	370c      	adds	r7, #12
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr

08005f92 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005f92:	b580      	push	{r7, lr}
 8005f94:	b086      	sub	sp, #24
 8005f96:	af02      	add	r7, sp, #8
 8005f98:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d101      	bne.n	8005fa4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	e101      	b.n	80061a8 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8005faa:	b2db      	uxtb	r3, r3
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d106      	bne.n	8005fbe <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f7fd fc1d 	bl	80037f8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2203      	movs	r2, #3
 8005fc2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f002 ff33 	bl	8008e3c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6818      	ldr	r0, [r3, #0]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	7c1a      	ldrb	r2, [r3, #16]
 8005fde:	f88d 2000 	strb.w	r2, [sp]
 8005fe2:	3304      	adds	r3, #4
 8005fe4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005fe6:	f002 fefc 	bl	8008de2 <USB_CoreInit>
 8005fea:	4603      	mov	r3, r0
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d005      	beq.n	8005ffc <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2202      	movs	r2, #2
 8005ff4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	e0d5      	b.n	80061a8 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	2100      	movs	r1, #0
 8006002:	4618      	mov	r0, r3
 8006004:	f002 ff2b 	bl	8008e5e <USB_SetCurrentMode>
 8006008:	4603      	mov	r3, r0
 800600a:	2b00      	cmp	r3, #0
 800600c:	d005      	beq.n	800601a <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2202      	movs	r2, #2
 8006012:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	e0c6      	b.n	80061a8 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800601a:	2300      	movs	r3, #0
 800601c:	73fb      	strb	r3, [r7, #15]
 800601e:	e04a      	b.n	80060b6 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006020:	7bfa      	ldrb	r2, [r7, #15]
 8006022:	6879      	ldr	r1, [r7, #4]
 8006024:	4613      	mov	r3, r2
 8006026:	00db      	lsls	r3, r3, #3
 8006028:	4413      	add	r3, r2
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	440b      	add	r3, r1
 800602e:	3315      	adds	r3, #21
 8006030:	2201      	movs	r2, #1
 8006032:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006034:	7bfa      	ldrb	r2, [r7, #15]
 8006036:	6879      	ldr	r1, [r7, #4]
 8006038:	4613      	mov	r3, r2
 800603a:	00db      	lsls	r3, r3, #3
 800603c:	4413      	add	r3, r2
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	440b      	add	r3, r1
 8006042:	3314      	adds	r3, #20
 8006044:	7bfa      	ldrb	r2, [r7, #15]
 8006046:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006048:	7bfa      	ldrb	r2, [r7, #15]
 800604a:	7bfb      	ldrb	r3, [r7, #15]
 800604c:	b298      	uxth	r0, r3
 800604e:	6879      	ldr	r1, [r7, #4]
 8006050:	4613      	mov	r3, r2
 8006052:	00db      	lsls	r3, r3, #3
 8006054:	4413      	add	r3, r2
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	440b      	add	r3, r1
 800605a:	332e      	adds	r3, #46	@ 0x2e
 800605c:	4602      	mov	r2, r0
 800605e:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006060:	7bfa      	ldrb	r2, [r7, #15]
 8006062:	6879      	ldr	r1, [r7, #4]
 8006064:	4613      	mov	r3, r2
 8006066:	00db      	lsls	r3, r3, #3
 8006068:	4413      	add	r3, r2
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	440b      	add	r3, r1
 800606e:	3318      	adds	r3, #24
 8006070:	2200      	movs	r2, #0
 8006072:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006074:	7bfa      	ldrb	r2, [r7, #15]
 8006076:	6879      	ldr	r1, [r7, #4]
 8006078:	4613      	mov	r3, r2
 800607a:	00db      	lsls	r3, r3, #3
 800607c:	4413      	add	r3, r2
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	440b      	add	r3, r1
 8006082:	331c      	adds	r3, #28
 8006084:	2200      	movs	r2, #0
 8006086:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006088:	7bfa      	ldrb	r2, [r7, #15]
 800608a:	6879      	ldr	r1, [r7, #4]
 800608c:	4613      	mov	r3, r2
 800608e:	00db      	lsls	r3, r3, #3
 8006090:	4413      	add	r3, r2
 8006092:	009b      	lsls	r3, r3, #2
 8006094:	440b      	add	r3, r1
 8006096:	3320      	adds	r3, #32
 8006098:	2200      	movs	r2, #0
 800609a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800609c:	7bfa      	ldrb	r2, [r7, #15]
 800609e:	6879      	ldr	r1, [r7, #4]
 80060a0:	4613      	mov	r3, r2
 80060a2:	00db      	lsls	r3, r3, #3
 80060a4:	4413      	add	r3, r2
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	440b      	add	r3, r1
 80060aa:	3324      	adds	r3, #36	@ 0x24
 80060ac:	2200      	movs	r2, #0
 80060ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80060b0:	7bfb      	ldrb	r3, [r7, #15]
 80060b2:	3301      	adds	r3, #1
 80060b4:	73fb      	strb	r3, [r7, #15]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	791b      	ldrb	r3, [r3, #4]
 80060ba:	7bfa      	ldrb	r2, [r7, #15]
 80060bc:	429a      	cmp	r2, r3
 80060be:	d3af      	bcc.n	8006020 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80060c0:	2300      	movs	r3, #0
 80060c2:	73fb      	strb	r3, [r7, #15]
 80060c4:	e044      	b.n	8006150 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80060c6:	7bfa      	ldrb	r2, [r7, #15]
 80060c8:	6879      	ldr	r1, [r7, #4]
 80060ca:	4613      	mov	r3, r2
 80060cc:	00db      	lsls	r3, r3, #3
 80060ce:	4413      	add	r3, r2
 80060d0:	009b      	lsls	r3, r3, #2
 80060d2:	440b      	add	r3, r1
 80060d4:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80060d8:	2200      	movs	r2, #0
 80060da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80060dc:	7bfa      	ldrb	r2, [r7, #15]
 80060de:	6879      	ldr	r1, [r7, #4]
 80060e0:	4613      	mov	r3, r2
 80060e2:	00db      	lsls	r3, r3, #3
 80060e4:	4413      	add	r3, r2
 80060e6:	009b      	lsls	r3, r3, #2
 80060e8:	440b      	add	r3, r1
 80060ea:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80060ee:	7bfa      	ldrb	r2, [r7, #15]
 80060f0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80060f2:	7bfa      	ldrb	r2, [r7, #15]
 80060f4:	6879      	ldr	r1, [r7, #4]
 80060f6:	4613      	mov	r3, r2
 80060f8:	00db      	lsls	r3, r3, #3
 80060fa:	4413      	add	r3, r2
 80060fc:	009b      	lsls	r3, r3, #2
 80060fe:	440b      	add	r3, r1
 8006100:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006104:	2200      	movs	r2, #0
 8006106:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006108:	7bfa      	ldrb	r2, [r7, #15]
 800610a:	6879      	ldr	r1, [r7, #4]
 800610c:	4613      	mov	r3, r2
 800610e:	00db      	lsls	r3, r3, #3
 8006110:	4413      	add	r3, r2
 8006112:	009b      	lsls	r3, r3, #2
 8006114:	440b      	add	r3, r1
 8006116:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800611a:	2200      	movs	r2, #0
 800611c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800611e:	7bfa      	ldrb	r2, [r7, #15]
 8006120:	6879      	ldr	r1, [r7, #4]
 8006122:	4613      	mov	r3, r2
 8006124:	00db      	lsls	r3, r3, #3
 8006126:	4413      	add	r3, r2
 8006128:	009b      	lsls	r3, r3, #2
 800612a:	440b      	add	r3, r1
 800612c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006130:	2200      	movs	r2, #0
 8006132:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006134:	7bfa      	ldrb	r2, [r7, #15]
 8006136:	6879      	ldr	r1, [r7, #4]
 8006138:	4613      	mov	r3, r2
 800613a:	00db      	lsls	r3, r3, #3
 800613c:	4413      	add	r3, r2
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	440b      	add	r3, r1
 8006142:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006146:	2200      	movs	r2, #0
 8006148:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800614a:	7bfb      	ldrb	r3, [r7, #15]
 800614c:	3301      	adds	r3, #1
 800614e:	73fb      	strb	r3, [r7, #15]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	791b      	ldrb	r3, [r3, #4]
 8006154:	7bfa      	ldrb	r2, [r7, #15]
 8006156:	429a      	cmp	r2, r3
 8006158:	d3b5      	bcc.n	80060c6 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6818      	ldr	r0, [r3, #0]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	7c1a      	ldrb	r2, [r3, #16]
 8006162:	f88d 2000 	strb.w	r2, [sp]
 8006166:	3304      	adds	r3, #4
 8006168:	cb0e      	ldmia	r3, {r1, r2, r3}
 800616a:	f002 fec5 	bl	8008ef8 <USB_DevInit>
 800616e:	4603      	mov	r3, r0
 8006170:	2b00      	cmp	r3, #0
 8006172:	d005      	beq.n	8006180 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2202      	movs	r2, #2
 8006178:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800617c:	2301      	movs	r3, #1
 800617e:	e013      	b.n	80061a8 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2200      	movs	r2, #0
 8006184:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2201      	movs	r2, #1
 800618a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	7b1b      	ldrb	r3, [r3, #12]
 8006192:	2b01      	cmp	r3, #1
 8006194:	d102      	bne.n	800619c <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 f80a 	bl	80061b0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4618      	mov	r0, r3
 80061a2:	f003 f86a 	bl	800927a <USB_DevDisconnect>

  return HAL_OK;
 80061a6:	2300      	movs	r3, #0
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3710      	adds	r7, #16
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}

080061b0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b085      	sub	sp, #20
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2201      	movs	r2, #1
 80061c2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2200      	movs	r2, #0
 80061ca:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	699b      	ldr	r3, [r3, #24]
 80061d2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80061e2:	f043 0303 	orr.w	r3, r3, #3
 80061e6:	68fa      	ldr	r2, [r7, #12]
 80061e8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80061ea:	2300      	movs	r3, #0
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3714      	adds	r7, #20
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80061f8:	b480      	push	{r7}
 80061fa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80061fc:	4b05      	ldr	r3, [pc, #20]	@ (8006214 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a04      	ldr	r2, [pc, #16]	@ (8006214 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006202:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006206:	6013      	str	r3, [r2, #0]
}
 8006208:	bf00      	nop
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr
 8006212:	bf00      	nop
 8006214:	40007000 	.word	0x40007000

08006218 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006218:	b480      	push	{r7}
 800621a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800621c:	4b04      	ldr	r3, [pc, #16]	@ (8006230 <HAL_PWREx_GetVoltageRange+0x18>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8006224:	4618      	mov	r0, r3
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr
 800622e:	bf00      	nop
 8006230:	40007000 	.word	0x40007000

08006234 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006234:	b480      	push	{r7}
 8006236:	b085      	sub	sp, #20
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006242:	d130      	bne.n	80062a6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006244:	4b23      	ldr	r3, [pc, #140]	@ (80062d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800624c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006250:	d038      	beq.n	80062c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006252:	4b20      	ldr	r3, [pc, #128]	@ (80062d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800625a:	4a1e      	ldr	r2, [pc, #120]	@ (80062d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800625c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006260:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006262:	4b1d      	ldr	r3, [pc, #116]	@ (80062d8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	2232      	movs	r2, #50	@ 0x32
 8006268:	fb02 f303 	mul.w	r3, r2, r3
 800626c:	4a1b      	ldr	r2, [pc, #108]	@ (80062dc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800626e:	fba2 2303 	umull	r2, r3, r2, r3
 8006272:	0c9b      	lsrs	r3, r3, #18
 8006274:	3301      	adds	r3, #1
 8006276:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006278:	e002      	b.n	8006280 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	3b01      	subs	r3, #1
 800627e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006280:	4b14      	ldr	r3, [pc, #80]	@ (80062d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006282:	695b      	ldr	r3, [r3, #20]
 8006284:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006288:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800628c:	d102      	bne.n	8006294 <HAL_PWREx_ControlVoltageScaling+0x60>
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d1f2      	bne.n	800627a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006294:	4b0f      	ldr	r3, [pc, #60]	@ (80062d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006296:	695b      	ldr	r3, [r3, #20]
 8006298:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800629c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062a0:	d110      	bne.n	80062c4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80062a2:	2303      	movs	r3, #3
 80062a4:	e00f      	b.n	80062c6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80062a6:	4b0b      	ldr	r3, [pc, #44]	@ (80062d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80062ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062b2:	d007      	beq.n	80062c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80062b4:	4b07      	ldr	r3, [pc, #28]	@ (80062d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80062bc:	4a05      	ldr	r2, [pc, #20]	@ (80062d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80062be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80062c2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80062c4:	2300      	movs	r3, #0
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3714      	adds	r7, #20
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr
 80062d2:	bf00      	nop
 80062d4:	40007000 	.word	0x40007000
 80062d8:	20000004 	.word	0x20000004
 80062dc:	431bde83 	.word	0x431bde83

080062e0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80062e0:	b480      	push	{r7}
 80062e2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80062e4:	4b05      	ldr	r3, [pc, #20]	@ (80062fc <HAL_PWREx_EnableVddUSB+0x1c>)
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	4a04      	ldr	r2, [pc, #16]	@ (80062fc <HAL_PWREx_EnableVddUSB+0x1c>)
 80062ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80062ee:	6053      	str	r3, [r2, #4]
}
 80062f0:	bf00      	nop
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr
 80062fa:	bf00      	nop
 80062fc:	40007000 	.word	0x40007000

08006300 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b086      	sub	sp, #24
 8006304:	af02      	add	r7, sp, #8
 8006306:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006308:	f7fe fa86 	bl	8004818 <HAL_GetTick>
 800630c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d101      	bne.n	8006318 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8006314:	2301      	movs	r3, #1
 8006316:	e063      	b.n	80063e0 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800631e:	b2db      	uxtb	r3, r3
 8006320:	2b00      	cmp	r3, #0
 8006322:	d10b      	bne.n	800633c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2200      	movs	r2, #0
 8006328:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f7fd f9c1 	bl	80036b4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8006332:	f241 3188 	movw	r1, #5000	@ 0x1388
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 f858 	bl	80063ec <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	3b01      	subs	r3, #1
 800634c:	021a      	lsls	r2, r3, #8
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	430a      	orrs	r2, r1
 8006354:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800635a:	9300      	str	r3, [sp, #0]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2200      	movs	r2, #0
 8006360:	2120      	movs	r1, #32
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f000 f850 	bl	8006408 <QSPI_WaitFlagStateUntilTimeout>
 8006368:	4603      	mov	r3, r0
 800636a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800636c:	7afb      	ldrb	r3, [r7, #11]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d131      	bne.n	80063d6 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800637c:	f023 0310 	bic.w	r3, r3, #16
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	6852      	ldr	r2, [r2, #4]
 8006384:	0611      	lsls	r1, r2, #24
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	68d2      	ldr	r2, [r2, #12]
 800638a:	4311      	orrs	r1, r2
 800638c:	687a      	ldr	r2, [r7, #4]
 800638e:	6812      	ldr	r2, [r2, #0]
 8006390:	430b      	orrs	r3, r1
 8006392:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	685a      	ldr	r2, [r3, #4]
 800639a:	4b13      	ldr	r3, [pc, #76]	@ (80063e8 <HAL_QSPI_Init+0xe8>)
 800639c:	4013      	ands	r3, r2
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	6912      	ldr	r2, [r2, #16]
 80063a2:	0411      	lsls	r1, r2, #16
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	6952      	ldr	r2, [r2, #20]
 80063a8:	4311      	orrs	r1, r2
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	6992      	ldr	r2, [r2, #24]
 80063ae:	4311      	orrs	r1, r2
 80063b0:	687a      	ldr	r2, [r7, #4]
 80063b2:	6812      	ldr	r2, [r2, #0]
 80063b4:	430b      	orrs	r3, r1
 80063b6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	681a      	ldr	r2, [r3, #0]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f042 0201 	orr.w	r2, r2, #1
 80063c6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2201      	movs	r2, #1
 80063d2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 80063de:	7afb      	ldrb	r3, [r7, #11]
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3710      	adds	r7, #16
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}
 80063e8:	ffe0f8fe 	.word	0xffe0f8fe

080063ec <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b083      	sub	sp, #12
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	683a      	ldr	r2, [r7, #0]
 80063fa:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80063fc:	bf00      	nop
 80063fe:	370c      	adds	r7, #12
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr

08006408 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b084      	sub	sp, #16
 800640c:	af00      	add	r7, sp, #0
 800640e:	60f8      	str	r0, [r7, #12]
 8006410:	60b9      	str	r1, [r7, #8]
 8006412:	603b      	str	r3, [r7, #0]
 8006414:	4613      	mov	r3, r2
 8006416:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006418:	e01a      	b.n	8006450 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800641a:	69bb      	ldr	r3, [r7, #24]
 800641c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006420:	d016      	beq.n	8006450 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006422:	f7fe f9f9 	bl	8004818 <HAL_GetTick>
 8006426:	4602      	mov	r2, r0
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	1ad3      	subs	r3, r2, r3
 800642c:	69ba      	ldr	r2, [r7, #24]
 800642e:	429a      	cmp	r2, r3
 8006430:	d302      	bcc.n	8006438 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8006432:	69bb      	ldr	r3, [r7, #24]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d10b      	bne.n	8006450 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2204      	movs	r2, #4
 800643c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006444:	f043 0201 	orr.w	r2, r3, #1
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	e00e      	b.n	800646e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	689a      	ldr	r2, [r3, #8]
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	4013      	ands	r3, r2
 800645a:	2b00      	cmp	r3, #0
 800645c:	bf14      	ite	ne
 800645e:	2301      	movne	r3, #1
 8006460:	2300      	moveq	r3, #0
 8006462:	b2db      	uxtb	r3, r3
 8006464:	461a      	mov	r2, r3
 8006466:	79fb      	ldrb	r3, [r7, #7]
 8006468:	429a      	cmp	r2, r3
 800646a:	d1d6      	bne.n	800641a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800646c:	2300      	movs	r3, #0
}
 800646e:	4618      	mov	r0, r3
 8006470:	3710      	adds	r7, #16
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}
	...

08006478 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b088      	sub	sp, #32
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d101      	bne.n	800648a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006486:	2301      	movs	r3, #1
 8006488:	e3ca      	b.n	8006c20 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800648a:	4b97      	ldr	r3, [pc, #604]	@ (80066e8 <HAL_RCC_OscConfig+0x270>)
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	f003 030c 	and.w	r3, r3, #12
 8006492:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006494:	4b94      	ldr	r3, [pc, #592]	@ (80066e8 <HAL_RCC_OscConfig+0x270>)
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	f003 0303 	and.w	r3, r3, #3
 800649c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f003 0310 	and.w	r3, r3, #16
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	f000 80e4 	beq.w	8006674 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80064ac:	69bb      	ldr	r3, [r7, #24]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d007      	beq.n	80064c2 <HAL_RCC_OscConfig+0x4a>
 80064b2:	69bb      	ldr	r3, [r7, #24]
 80064b4:	2b0c      	cmp	r3, #12
 80064b6:	f040 808b 	bne.w	80065d0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	2b01      	cmp	r3, #1
 80064be:	f040 8087 	bne.w	80065d0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80064c2:	4b89      	ldr	r3, [pc, #548]	@ (80066e8 <HAL_RCC_OscConfig+0x270>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f003 0302 	and.w	r3, r3, #2
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d005      	beq.n	80064da <HAL_RCC_OscConfig+0x62>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	699b      	ldr	r3, [r3, #24]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d101      	bne.n	80064da <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	e3a2      	b.n	8006c20 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6a1a      	ldr	r2, [r3, #32]
 80064de:	4b82      	ldr	r3, [pc, #520]	@ (80066e8 <HAL_RCC_OscConfig+0x270>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f003 0308 	and.w	r3, r3, #8
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d004      	beq.n	80064f4 <HAL_RCC_OscConfig+0x7c>
 80064ea:	4b7f      	ldr	r3, [pc, #508]	@ (80066e8 <HAL_RCC_OscConfig+0x270>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80064f2:	e005      	b.n	8006500 <HAL_RCC_OscConfig+0x88>
 80064f4:	4b7c      	ldr	r3, [pc, #496]	@ (80066e8 <HAL_RCC_OscConfig+0x270>)
 80064f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80064fa:	091b      	lsrs	r3, r3, #4
 80064fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006500:	4293      	cmp	r3, r2
 8006502:	d223      	bcs.n	800654c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6a1b      	ldr	r3, [r3, #32]
 8006508:	4618      	mov	r0, r3
 800650a:	f000 fd55 	bl	8006fb8 <RCC_SetFlashLatencyFromMSIRange>
 800650e:	4603      	mov	r3, r0
 8006510:	2b00      	cmp	r3, #0
 8006512:	d001      	beq.n	8006518 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8006514:	2301      	movs	r3, #1
 8006516:	e383      	b.n	8006c20 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006518:	4b73      	ldr	r3, [pc, #460]	@ (80066e8 <HAL_RCC_OscConfig+0x270>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a72      	ldr	r2, [pc, #456]	@ (80066e8 <HAL_RCC_OscConfig+0x270>)
 800651e:	f043 0308 	orr.w	r3, r3, #8
 8006522:	6013      	str	r3, [r2, #0]
 8006524:	4b70      	ldr	r3, [pc, #448]	@ (80066e8 <HAL_RCC_OscConfig+0x270>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6a1b      	ldr	r3, [r3, #32]
 8006530:	496d      	ldr	r1, [pc, #436]	@ (80066e8 <HAL_RCC_OscConfig+0x270>)
 8006532:	4313      	orrs	r3, r2
 8006534:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006536:	4b6c      	ldr	r3, [pc, #432]	@ (80066e8 <HAL_RCC_OscConfig+0x270>)
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	69db      	ldr	r3, [r3, #28]
 8006542:	021b      	lsls	r3, r3, #8
 8006544:	4968      	ldr	r1, [pc, #416]	@ (80066e8 <HAL_RCC_OscConfig+0x270>)
 8006546:	4313      	orrs	r3, r2
 8006548:	604b      	str	r3, [r1, #4]
 800654a:	e025      	b.n	8006598 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800654c:	4b66      	ldr	r3, [pc, #408]	@ (80066e8 <HAL_RCC_OscConfig+0x270>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a65      	ldr	r2, [pc, #404]	@ (80066e8 <HAL_RCC_OscConfig+0x270>)
 8006552:	f043 0308 	orr.w	r3, r3, #8
 8006556:	6013      	str	r3, [r2, #0]
 8006558:	4b63      	ldr	r3, [pc, #396]	@ (80066e8 <HAL_RCC_OscConfig+0x270>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6a1b      	ldr	r3, [r3, #32]
 8006564:	4960      	ldr	r1, [pc, #384]	@ (80066e8 <HAL_RCC_OscConfig+0x270>)
 8006566:	4313      	orrs	r3, r2
 8006568:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800656a:	4b5f      	ldr	r3, [pc, #380]	@ (80066e8 <HAL_RCC_OscConfig+0x270>)
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	69db      	ldr	r3, [r3, #28]
 8006576:	021b      	lsls	r3, r3, #8
 8006578:	495b      	ldr	r1, [pc, #364]	@ (80066e8 <HAL_RCC_OscConfig+0x270>)
 800657a:	4313      	orrs	r3, r2
 800657c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800657e:	69bb      	ldr	r3, [r7, #24]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d109      	bne.n	8006598 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6a1b      	ldr	r3, [r3, #32]
 8006588:	4618      	mov	r0, r3
 800658a:	f000 fd15 	bl	8006fb8 <RCC_SetFlashLatencyFromMSIRange>
 800658e:	4603      	mov	r3, r0
 8006590:	2b00      	cmp	r3, #0
 8006592:	d001      	beq.n	8006598 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	e343      	b.n	8006c20 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006598:	f000 fc4a 	bl	8006e30 <HAL_RCC_GetSysClockFreq>
 800659c:	4602      	mov	r2, r0
 800659e:	4b52      	ldr	r3, [pc, #328]	@ (80066e8 <HAL_RCC_OscConfig+0x270>)
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	091b      	lsrs	r3, r3, #4
 80065a4:	f003 030f 	and.w	r3, r3, #15
 80065a8:	4950      	ldr	r1, [pc, #320]	@ (80066ec <HAL_RCC_OscConfig+0x274>)
 80065aa:	5ccb      	ldrb	r3, [r1, r3]
 80065ac:	f003 031f 	and.w	r3, r3, #31
 80065b0:	fa22 f303 	lsr.w	r3, r2, r3
 80065b4:	4a4e      	ldr	r2, [pc, #312]	@ (80066f0 <HAL_RCC_OscConfig+0x278>)
 80065b6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80065b8:	4b4e      	ldr	r3, [pc, #312]	@ (80066f4 <HAL_RCC_OscConfig+0x27c>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4618      	mov	r0, r3
 80065be:	f7fe f8db 	bl	8004778 <HAL_InitTick>
 80065c2:	4603      	mov	r3, r0
 80065c4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80065c6:	7bfb      	ldrb	r3, [r7, #15]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d052      	beq.n	8006672 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80065cc:	7bfb      	ldrb	r3, [r7, #15]
 80065ce:	e327      	b.n	8006c20 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	699b      	ldr	r3, [r3, #24]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d032      	beq.n	800663e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80065d8:	4b43      	ldr	r3, [pc, #268]	@ (80066e8 <HAL_RCC_OscConfig+0x270>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a42      	ldr	r2, [pc, #264]	@ (80066e8 <HAL_RCC_OscConfig+0x270>)
 80065de:	f043 0301 	orr.w	r3, r3, #1
 80065e2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80065e4:	f7fe f918 	bl	8004818 <HAL_GetTick>
 80065e8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80065ea:	e008      	b.n	80065fe <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80065ec:	f7fe f914 	bl	8004818 <HAL_GetTick>
 80065f0:	4602      	mov	r2, r0
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	1ad3      	subs	r3, r2, r3
 80065f6:	2b02      	cmp	r3, #2
 80065f8:	d901      	bls.n	80065fe <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80065fa:	2303      	movs	r3, #3
 80065fc:	e310      	b.n	8006c20 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80065fe:	4b3a      	ldr	r3, [pc, #232]	@ (80066e8 <HAL_RCC_OscConfig+0x270>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f003 0302 	and.w	r3, r3, #2
 8006606:	2b00      	cmp	r3, #0
 8006608:	d0f0      	beq.n	80065ec <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800660a:	4b37      	ldr	r3, [pc, #220]	@ (80066e8 <HAL_RCC_OscConfig+0x270>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a36      	ldr	r2, [pc, #216]	@ (80066e8 <HAL_RCC_OscConfig+0x270>)
 8006610:	f043 0308 	orr.w	r3, r3, #8
 8006614:	6013      	str	r3, [r2, #0]
 8006616:	4b34      	ldr	r3, [pc, #208]	@ (80066e8 <HAL_RCC_OscConfig+0x270>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6a1b      	ldr	r3, [r3, #32]
 8006622:	4931      	ldr	r1, [pc, #196]	@ (80066e8 <HAL_RCC_OscConfig+0x270>)
 8006624:	4313      	orrs	r3, r2
 8006626:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006628:	4b2f      	ldr	r3, [pc, #188]	@ (80066e8 <HAL_RCC_OscConfig+0x270>)
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	69db      	ldr	r3, [r3, #28]
 8006634:	021b      	lsls	r3, r3, #8
 8006636:	492c      	ldr	r1, [pc, #176]	@ (80066e8 <HAL_RCC_OscConfig+0x270>)
 8006638:	4313      	orrs	r3, r2
 800663a:	604b      	str	r3, [r1, #4]
 800663c:	e01a      	b.n	8006674 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800663e:	4b2a      	ldr	r3, [pc, #168]	@ (80066e8 <HAL_RCC_OscConfig+0x270>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a29      	ldr	r2, [pc, #164]	@ (80066e8 <HAL_RCC_OscConfig+0x270>)
 8006644:	f023 0301 	bic.w	r3, r3, #1
 8006648:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800664a:	f7fe f8e5 	bl	8004818 <HAL_GetTick>
 800664e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006650:	e008      	b.n	8006664 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006652:	f7fe f8e1 	bl	8004818 <HAL_GetTick>
 8006656:	4602      	mov	r2, r0
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	1ad3      	subs	r3, r2, r3
 800665c:	2b02      	cmp	r3, #2
 800665e:	d901      	bls.n	8006664 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8006660:	2303      	movs	r3, #3
 8006662:	e2dd      	b.n	8006c20 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006664:	4b20      	ldr	r3, [pc, #128]	@ (80066e8 <HAL_RCC_OscConfig+0x270>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f003 0302 	and.w	r3, r3, #2
 800666c:	2b00      	cmp	r3, #0
 800666e:	d1f0      	bne.n	8006652 <HAL_RCC_OscConfig+0x1da>
 8006670:	e000      	b.n	8006674 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006672:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f003 0301 	and.w	r3, r3, #1
 800667c:	2b00      	cmp	r3, #0
 800667e:	d074      	beq.n	800676a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006680:	69bb      	ldr	r3, [r7, #24]
 8006682:	2b08      	cmp	r3, #8
 8006684:	d005      	beq.n	8006692 <HAL_RCC_OscConfig+0x21a>
 8006686:	69bb      	ldr	r3, [r7, #24]
 8006688:	2b0c      	cmp	r3, #12
 800668a:	d10e      	bne.n	80066aa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	2b03      	cmp	r3, #3
 8006690:	d10b      	bne.n	80066aa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006692:	4b15      	ldr	r3, [pc, #84]	@ (80066e8 <HAL_RCC_OscConfig+0x270>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800669a:	2b00      	cmp	r3, #0
 800669c:	d064      	beq.n	8006768 <HAL_RCC_OscConfig+0x2f0>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d160      	bne.n	8006768 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	e2ba      	b.n	8006c20 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066b2:	d106      	bne.n	80066c2 <HAL_RCC_OscConfig+0x24a>
 80066b4:	4b0c      	ldr	r3, [pc, #48]	@ (80066e8 <HAL_RCC_OscConfig+0x270>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a0b      	ldr	r2, [pc, #44]	@ (80066e8 <HAL_RCC_OscConfig+0x270>)
 80066ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066be:	6013      	str	r3, [r2, #0]
 80066c0:	e026      	b.n	8006710 <HAL_RCC_OscConfig+0x298>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80066ca:	d115      	bne.n	80066f8 <HAL_RCC_OscConfig+0x280>
 80066cc:	4b06      	ldr	r3, [pc, #24]	@ (80066e8 <HAL_RCC_OscConfig+0x270>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a05      	ldr	r2, [pc, #20]	@ (80066e8 <HAL_RCC_OscConfig+0x270>)
 80066d2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80066d6:	6013      	str	r3, [r2, #0]
 80066d8:	4b03      	ldr	r3, [pc, #12]	@ (80066e8 <HAL_RCC_OscConfig+0x270>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a02      	ldr	r2, [pc, #8]	@ (80066e8 <HAL_RCC_OscConfig+0x270>)
 80066de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066e2:	6013      	str	r3, [r2, #0]
 80066e4:	e014      	b.n	8006710 <HAL_RCC_OscConfig+0x298>
 80066e6:	bf00      	nop
 80066e8:	40021000 	.word	0x40021000
 80066ec:	0800d4f8 	.word	0x0800d4f8
 80066f0:	20000004 	.word	0x20000004
 80066f4:	20000050 	.word	0x20000050
 80066f8:	4ba0      	ldr	r3, [pc, #640]	@ (800697c <HAL_RCC_OscConfig+0x504>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a9f      	ldr	r2, [pc, #636]	@ (800697c <HAL_RCC_OscConfig+0x504>)
 80066fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006702:	6013      	str	r3, [r2, #0]
 8006704:	4b9d      	ldr	r3, [pc, #628]	@ (800697c <HAL_RCC_OscConfig+0x504>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a9c      	ldr	r2, [pc, #624]	@ (800697c <HAL_RCC_OscConfig+0x504>)
 800670a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800670e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d013      	beq.n	8006740 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006718:	f7fe f87e 	bl	8004818 <HAL_GetTick>
 800671c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800671e:	e008      	b.n	8006732 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006720:	f7fe f87a 	bl	8004818 <HAL_GetTick>
 8006724:	4602      	mov	r2, r0
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	1ad3      	subs	r3, r2, r3
 800672a:	2b64      	cmp	r3, #100	@ 0x64
 800672c:	d901      	bls.n	8006732 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800672e:	2303      	movs	r3, #3
 8006730:	e276      	b.n	8006c20 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006732:	4b92      	ldr	r3, [pc, #584]	@ (800697c <HAL_RCC_OscConfig+0x504>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800673a:	2b00      	cmp	r3, #0
 800673c:	d0f0      	beq.n	8006720 <HAL_RCC_OscConfig+0x2a8>
 800673e:	e014      	b.n	800676a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006740:	f7fe f86a 	bl	8004818 <HAL_GetTick>
 8006744:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006746:	e008      	b.n	800675a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006748:	f7fe f866 	bl	8004818 <HAL_GetTick>
 800674c:	4602      	mov	r2, r0
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	1ad3      	subs	r3, r2, r3
 8006752:	2b64      	cmp	r3, #100	@ 0x64
 8006754:	d901      	bls.n	800675a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006756:	2303      	movs	r3, #3
 8006758:	e262      	b.n	8006c20 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800675a:	4b88      	ldr	r3, [pc, #544]	@ (800697c <HAL_RCC_OscConfig+0x504>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006762:	2b00      	cmp	r3, #0
 8006764:	d1f0      	bne.n	8006748 <HAL_RCC_OscConfig+0x2d0>
 8006766:	e000      	b.n	800676a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006768:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f003 0302 	and.w	r3, r3, #2
 8006772:	2b00      	cmp	r3, #0
 8006774:	d060      	beq.n	8006838 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006776:	69bb      	ldr	r3, [r7, #24]
 8006778:	2b04      	cmp	r3, #4
 800677a:	d005      	beq.n	8006788 <HAL_RCC_OscConfig+0x310>
 800677c:	69bb      	ldr	r3, [r7, #24]
 800677e:	2b0c      	cmp	r3, #12
 8006780:	d119      	bne.n	80067b6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	2b02      	cmp	r3, #2
 8006786:	d116      	bne.n	80067b6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006788:	4b7c      	ldr	r3, [pc, #496]	@ (800697c <HAL_RCC_OscConfig+0x504>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006790:	2b00      	cmp	r3, #0
 8006792:	d005      	beq.n	80067a0 <HAL_RCC_OscConfig+0x328>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	68db      	ldr	r3, [r3, #12]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d101      	bne.n	80067a0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800679c:	2301      	movs	r3, #1
 800679e:	e23f      	b.n	8006c20 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067a0:	4b76      	ldr	r3, [pc, #472]	@ (800697c <HAL_RCC_OscConfig+0x504>)
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	691b      	ldr	r3, [r3, #16]
 80067ac:	061b      	lsls	r3, r3, #24
 80067ae:	4973      	ldr	r1, [pc, #460]	@ (800697c <HAL_RCC_OscConfig+0x504>)
 80067b0:	4313      	orrs	r3, r2
 80067b2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80067b4:	e040      	b.n	8006838 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	68db      	ldr	r3, [r3, #12]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d023      	beq.n	8006806 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80067be:	4b6f      	ldr	r3, [pc, #444]	@ (800697c <HAL_RCC_OscConfig+0x504>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a6e      	ldr	r2, [pc, #440]	@ (800697c <HAL_RCC_OscConfig+0x504>)
 80067c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067ca:	f7fe f825 	bl	8004818 <HAL_GetTick>
 80067ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80067d0:	e008      	b.n	80067e4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067d2:	f7fe f821 	bl	8004818 <HAL_GetTick>
 80067d6:	4602      	mov	r2, r0
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	1ad3      	subs	r3, r2, r3
 80067dc:	2b02      	cmp	r3, #2
 80067de:	d901      	bls.n	80067e4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80067e0:	2303      	movs	r3, #3
 80067e2:	e21d      	b.n	8006c20 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80067e4:	4b65      	ldr	r3, [pc, #404]	@ (800697c <HAL_RCC_OscConfig+0x504>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d0f0      	beq.n	80067d2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067f0:	4b62      	ldr	r3, [pc, #392]	@ (800697c <HAL_RCC_OscConfig+0x504>)
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	691b      	ldr	r3, [r3, #16]
 80067fc:	061b      	lsls	r3, r3, #24
 80067fe:	495f      	ldr	r1, [pc, #380]	@ (800697c <HAL_RCC_OscConfig+0x504>)
 8006800:	4313      	orrs	r3, r2
 8006802:	604b      	str	r3, [r1, #4]
 8006804:	e018      	b.n	8006838 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006806:	4b5d      	ldr	r3, [pc, #372]	@ (800697c <HAL_RCC_OscConfig+0x504>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a5c      	ldr	r2, [pc, #368]	@ (800697c <HAL_RCC_OscConfig+0x504>)
 800680c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006810:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006812:	f7fe f801 	bl	8004818 <HAL_GetTick>
 8006816:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006818:	e008      	b.n	800682c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800681a:	f7fd fffd 	bl	8004818 <HAL_GetTick>
 800681e:	4602      	mov	r2, r0
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	1ad3      	subs	r3, r2, r3
 8006824:	2b02      	cmp	r3, #2
 8006826:	d901      	bls.n	800682c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006828:	2303      	movs	r3, #3
 800682a:	e1f9      	b.n	8006c20 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800682c:	4b53      	ldr	r3, [pc, #332]	@ (800697c <HAL_RCC_OscConfig+0x504>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006834:	2b00      	cmp	r3, #0
 8006836:	d1f0      	bne.n	800681a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f003 0308 	and.w	r3, r3, #8
 8006840:	2b00      	cmp	r3, #0
 8006842:	d03c      	beq.n	80068be <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	695b      	ldr	r3, [r3, #20]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d01c      	beq.n	8006886 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800684c:	4b4b      	ldr	r3, [pc, #300]	@ (800697c <HAL_RCC_OscConfig+0x504>)
 800684e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006852:	4a4a      	ldr	r2, [pc, #296]	@ (800697c <HAL_RCC_OscConfig+0x504>)
 8006854:	f043 0301 	orr.w	r3, r3, #1
 8006858:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800685c:	f7fd ffdc 	bl	8004818 <HAL_GetTick>
 8006860:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006862:	e008      	b.n	8006876 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006864:	f7fd ffd8 	bl	8004818 <HAL_GetTick>
 8006868:	4602      	mov	r2, r0
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	1ad3      	subs	r3, r2, r3
 800686e:	2b02      	cmp	r3, #2
 8006870:	d901      	bls.n	8006876 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006872:	2303      	movs	r3, #3
 8006874:	e1d4      	b.n	8006c20 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006876:	4b41      	ldr	r3, [pc, #260]	@ (800697c <HAL_RCC_OscConfig+0x504>)
 8006878:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800687c:	f003 0302 	and.w	r3, r3, #2
 8006880:	2b00      	cmp	r3, #0
 8006882:	d0ef      	beq.n	8006864 <HAL_RCC_OscConfig+0x3ec>
 8006884:	e01b      	b.n	80068be <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006886:	4b3d      	ldr	r3, [pc, #244]	@ (800697c <HAL_RCC_OscConfig+0x504>)
 8006888:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800688c:	4a3b      	ldr	r2, [pc, #236]	@ (800697c <HAL_RCC_OscConfig+0x504>)
 800688e:	f023 0301 	bic.w	r3, r3, #1
 8006892:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006896:	f7fd ffbf 	bl	8004818 <HAL_GetTick>
 800689a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800689c:	e008      	b.n	80068b0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800689e:	f7fd ffbb 	bl	8004818 <HAL_GetTick>
 80068a2:	4602      	mov	r2, r0
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	1ad3      	subs	r3, r2, r3
 80068a8:	2b02      	cmp	r3, #2
 80068aa:	d901      	bls.n	80068b0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80068ac:	2303      	movs	r3, #3
 80068ae:	e1b7      	b.n	8006c20 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80068b0:	4b32      	ldr	r3, [pc, #200]	@ (800697c <HAL_RCC_OscConfig+0x504>)
 80068b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80068b6:	f003 0302 	and.w	r3, r3, #2
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d1ef      	bne.n	800689e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f003 0304 	and.w	r3, r3, #4
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	f000 80a6 	beq.w	8006a18 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80068cc:	2300      	movs	r3, #0
 80068ce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80068d0:	4b2a      	ldr	r3, [pc, #168]	@ (800697c <HAL_RCC_OscConfig+0x504>)
 80068d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d10d      	bne.n	80068f8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068dc:	4b27      	ldr	r3, [pc, #156]	@ (800697c <HAL_RCC_OscConfig+0x504>)
 80068de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068e0:	4a26      	ldr	r2, [pc, #152]	@ (800697c <HAL_RCC_OscConfig+0x504>)
 80068e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80068e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80068e8:	4b24      	ldr	r3, [pc, #144]	@ (800697c <HAL_RCC_OscConfig+0x504>)
 80068ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068f0:	60bb      	str	r3, [r7, #8]
 80068f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80068f4:	2301      	movs	r3, #1
 80068f6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80068f8:	4b21      	ldr	r3, [pc, #132]	@ (8006980 <HAL_RCC_OscConfig+0x508>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006900:	2b00      	cmp	r3, #0
 8006902:	d118      	bne.n	8006936 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006904:	4b1e      	ldr	r3, [pc, #120]	@ (8006980 <HAL_RCC_OscConfig+0x508>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a1d      	ldr	r2, [pc, #116]	@ (8006980 <HAL_RCC_OscConfig+0x508>)
 800690a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800690e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006910:	f7fd ff82 	bl	8004818 <HAL_GetTick>
 8006914:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006916:	e008      	b.n	800692a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006918:	f7fd ff7e 	bl	8004818 <HAL_GetTick>
 800691c:	4602      	mov	r2, r0
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	1ad3      	subs	r3, r2, r3
 8006922:	2b02      	cmp	r3, #2
 8006924:	d901      	bls.n	800692a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006926:	2303      	movs	r3, #3
 8006928:	e17a      	b.n	8006c20 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800692a:	4b15      	ldr	r3, [pc, #84]	@ (8006980 <HAL_RCC_OscConfig+0x508>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006932:	2b00      	cmp	r3, #0
 8006934:	d0f0      	beq.n	8006918 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	2b01      	cmp	r3, #1
 800693c:	d108      	bne.n	8006950 <HAL_RCC_OscConfig+0x4d8>
 800693e:	4b0f      	ldr	r3, [pc, #60]	@ (800697c <HAL_RCC_OscConfig+0x504>)
 8006940:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006944:	4a0d      	ldr	r2, [pc, #52]	@ (800697c <HAL_RCC_OscConfig+0x504>)
 8006946:	f043 0301 	orr.w	r3, r3, #1
 800694a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800694e:	e029      	b.n	80069a4 <HAL_RCC_OscConfig+0x52c>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	2b05      	cmp	r3, #5
 8006956:	d115      	bne.n	8006984 <HAL_RCC_OscConfig+0x50c>
 8006958:	4b08      	ldr	r3, [pc, #32]	@ (800697c <HAL_RCC_OscConfig+0x504>)
 800695a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800695e:	4a07      	ldr	r2, [pc, #28]	@ (800697c <HAL_RCC_OscConfig+0x504>)
 8006960:	f043 0304 	orr.w	r3, r3, #4
 8006964:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006968:	4b04      	ldr	r3, [pc, #16]	@ (800697c <HAL_RCC_OscConfig+0x504>)
 800696a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800696e:	4a03      	ldr	r2, [pc, #12]	@ (800697c <HAL_RCC_OscConfig+0x504>)
 8006970:	f043 0301 	orr.w	r3, r3, #1
 8006974:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006978:	e014      	b.n	80069a4 <HAL_RCC_OscConfig+0x52c>
 800697a:	bf00      	nop
 800697c:	40021000 	.word	0x40021000
 8006980:	40007000 	.word	0x40007000
 8006984:	4b9c      	ldr	r3, [pc, #624]	@ (8006bf8 <HAL_RCC_OscConfig+0x780>)
 8006986:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800698a:	4a9b      	ldr	r2, [pc, #620]	@ (8006bf8 <HAL_RCC_OscConfig+0x780>)
 800698c:	f023 0301 	bic.w	r3, r3, #1
 8006990:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006994:	4b98      	ldr	r3, [pc, #608]	@ (8006bf8 <HAL_RCC_OscConfig+0x780>)
 8006996:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800699a:	4a97      	ldr	r2, [pc, #604]	@ (8006bf8 <HAL_RCC_OscConfig+0x780>)
 800699c:	f023 0304 	bic.w	r3, r3, #4
 80069a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d016      	beq.n	80069da <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069ac:	f7fd ff34 	bl	8004818 <HAL_GetTick>
 80069b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80069b2:	e00a      	b.n	80069ca <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069b4:	f7fd ff30 	bl	8004818 <HAL_GetTick>
 80069b8:	4602      	mov	r2, r0
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	1ad3      	subs	r3, r2, r3
 80069be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d901      	bls.n	80069ca <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80069c6:	2303      	movs	r3, #3
 80069c8:	e12a      	b.n	8006c20 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80069ca:	4b8b      	ldr	r3, [pc, #556]	@ (8006bf8 <HAL_RCC_OscConfig+0x780>)
 80069cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069d0:	f003 0302 	and.w	r3, r3, #2
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d0ed      	beq.n	80069b4 <HAL_RCC_OscConfig+0x53c>
 80069d8:	e015      	b.n	8006a06 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069da:	f7fd ff1d 	bl	8004818 <HAL_GetTick>
 80069de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80069e0:	e00a      	b.n	80069f8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069e2:	f7fd ff19 	bl	8004818 <HAL_GetTick>
 80069e6:	4602      	mov	r2, r0
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	1ad3      	subs	r3, r2, r3
 80069ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d901      	bls.n	80069f8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80069f4:	2303      	movs	r3, #3
 80069f6:	e113      	b.n	8006c20 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80069f8:	4b7f      	ldr	r3, [pc, #508]	@ (8006bf8 <HAL_RCC_OscConfig+0x780>)
 80069fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069fe:	f003 0302 	and.w	r3, r3, #2
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d1ed      	bne.n	80069e2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006a06:	7ffb      	ldrb	r3, [r7, #31]
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d105      	bne.n	8006a18 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a0c:	4b7a      	ldr	r3, [pc, #488]	@ (8006bf8 <HAL_RCC_OscConfig+0x780>)
 8006a0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a10:	4a79      	ldr	r2, [pc, #484]	@ (8006bf8 <HAL_RCC_OscConfig+0x780>)
 8006a12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006a16:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	f000 80fe 	beq.w	8006c1e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a26:	2b02      	cmp	r3, #2
 8006a28:	f040 80d0 	bne.w	8006bcc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006a2c:	4b72      	ldr	r3, [pc, #456]	@ (8006bf8 <HAL_RCC_OscConfig+0x780>)
 8006a2e:	68db      	ldr	r3, [r3, #12]
 8006a30:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	f003 0203 	and.w	r2, r3, #3
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d130      	bne.n	8006aa2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a4a:	3b01      	subs	r3, #1
 8006a4c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a4e:	429a      	cmp	r2, r3
 8006a50:	d127      	bne.n	8006aa2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a5c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	d11f      	bne.n	8006aa2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a68:	687a      	ldr	r2, [r7, #4]
 8006a6a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006a6c:	2a07      	cmp	r2, #7
 8006a6e:	bf14      	ite	ne
 8006a70:	2201      	movne	r2, #1
 8006a72:	2200      	moveq	r2, #0
 8006a74:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d113      	bne.n	8006aa2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a84:	085b      	lsrs	r3, r3, #1
 8006a86:	3b01      	subs	r3, #1
 8006a88:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d109      	bne.n	8006aa2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a98:	085b      	lsrs	r3, r3, #1
 8006a9a:	3b01      	subs	r3, #1
 8006a9c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d06e      	beq.n	8006b80 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006aa2:	69bb      	ldr	r3, [r7, #24]
 8006aa4:	2b0c      	cmp	r3, #12
 8006aa6:	d069      	beq.n	8006b7c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006aa8:	4b53      	ldr	r3, [pc, #332]	@ (8006bf8 <HAL_RCC_OscConfig+0x780>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d105      	bne.n	8006ac0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8006ab4:	4b50      	ldr	r3, [pc, #320]	@ (8006bf8 <HAL_RCC_OscConfig+0x780>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d001      	beq.n	8006ac4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e0ad      	b.n	8006c20 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006ac4:	4b4c      	ldr	r3, [pc, #304]	@ (8006bf8 <HAL_RCC_OscConfig+0x780>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a4b      	ldr	r2, [pc, #300]	@ (8006bf8 <HAL_RCC_OscConfig+0x780>)
 8006aca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006ace:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006ad0:	f7fd fea2 	bl	8004818 <HAL_GetTick>
 8006ad4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ad6:	e008      	b.n	8006aea <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ad8:	f7fd fe9e 	bl	8004818 <HAL_GetTick>
 8006adc:	4602      	mov	r2, r0
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	1ad3      	subs	r3, r2, r3
 8006ae2:	2b02      	cmp	r3, #2
 8006ae4:	d901      	bls.n	8006aea <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8006ae6:	2303      	movs	r3, #3
 8006ae8:	e09a      	b.n	8006c20 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006aea:	4b43      	ldr	r3, [pc, #268]	@ (8006bf8 <HAL_RCC_OscConfig+0x780>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d1f0      	bne.n	8006ad8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006af6:	4b40      	ldr	r3, [pc, #256]	@ (8006bf8 <HAL_RCC_OscConfig+0x780>)
 8006af8:	68da      	ldr	r2, [r3, #12]
 8006afa:	4b40      	ldr	r3, [pc, #256]	@ (8006bfc <HAL_RCC_OscConfig+0x784>)
 8006afc:	4013      	ands	r3, r2
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006b06:	3a01      	subs	r2, #1
 8006b08:	0112      	lsls	r2, r2, #4
 8006b0a:	4311      	orrs	r1, r2
 8006b0c:	687a      	ldr	r2, [r7, #4]
 8006b0e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006b10:	0212      	lsls	r2, r2, #8
 8006b12:	4311      	orrs	r1, r2
 8006b14:	687a      	ldr	r2, [r7, #4]
 8006b16:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006b18:	0852      	lsrs	r2, r2, #1
 8006b1a:	3a01      	subs	r2, #1
 8006b1c:	0552      	lsls	r2, r2, #21
 8006b1e:	4311      	orrs	r1, r2
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006b24:	0852      	lsrs	r2, r2, #1
 8006b26:	3a01      	subs	r2, #1
 8006b28:	0652      	lsls	r2, r2, #25
 8006b2a:	4311      	orrs	r1, r2
 8006b2c:	687a      	ldr	r2, [r7, #4]
 8006b2e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006b30:	0912      	lsrs	r2, r2, #4
 8006b32:	0452      	lsls	r2, r2, #17
 8006b34:	430a      	orrs	r2, r1
 8006b36:	4930      	ldr	r1, [pc, #192]	@ (8006bf8 <HAL_RCC_OscConfig+0x780>)
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006b3c:	4b2e      	ldr	r3, [pc, #184]	@ (8006bf8 <HAL_RCC_OscConfig+0x780>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a2d      	ldr	r2, [pc, #180]	@ (8006bf8 <HAL_RCC_OscConfig+0x780>)
 8006b42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006b46:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006b48:	4b2b      	ldr	r3, [pc, #172]	@ (8006bf8 <HAL_RCC_OscConfig+0x780>)
 8006b4a:	68db      	ldr	r3, [r3, #12]
 8006b4c:	4a2a      	ldr	r2, [pc, #168]	@ (8006bf8 <HAL_RCC_OscConfig+0x780>)
 8006b4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006b52:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006b54:	f7fd fe60 	bl	8004818 <HAL_GetTick>
 8006b58:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b5a:	e008      	b.n	8006b6e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b5c:	f7fd fe5c 	bl	8004818 <HAL_GetTick>
 8006b60:	4602      	mov	r2, r0
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	1ad3      	subs	r3, r2, r3
 8006b66:	2b02      	cmp	r3, #2
 8006b68:	d901      	bls.n	8006b6e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8006b6a:	2303      	movs	r3, #3
 8006b6c:	e058      	b.n	8006c20 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b6e:	4b22      	ldr	r3, [pc, #136]	@ (8006bf8 <HAL_RCC_OscConfig+0x780>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d0f0      	beq.n	8006b5c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006b7a:	e050      	b.n	8006c1e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	e04f      	b.n	8006c20 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b80:	4b1d      	ldr	r3, [pc, #116]	@ (8006bf8 <HAL_RCC_OscConfig+0x780>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d148      	bne.n	8006c1e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006b8c:	4b1a      	ldr	r3, [pc, #104]	@ (8006bf8 <HAL_RCC_OscConfig+0x780>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a19      	ldr	r2, [pc, #100]	@ (8006bf8 <HAL_RCC_OscConfig+0x780>)
 8006b92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006b96:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006b98:	4b17      	ldr	r3, [pc, #92]	@ (8006bf8 <HAL_RCC_OscConfig+0x780>)
 8006b9a:	68db      	ldr	r3, [r3, #12]
 8006b9c:	4a16      	ldr	r2, [pc, #88]	@ (8006bf8 <HAL_RCC_OscConfig+0x780>)
 8006b9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006ba2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006ba4:	f7fd fe38 	bl	8004818 <HAL_GetTick>
 8006ba8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006baa:	e008      	b.n	8006bbe <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bac:	f7fd fe34 	bl	8004818 <HAL_GetTick>
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	1ad3      	subs	r3, r2, r3
 8006bb6:	2b02      	cmp	r3, #2
 8006bb8:	d901      	bls.n	8006bbe <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8006bba:	2303      	movs	r3, #3
 8006bbc:	e030      	b.n	8006c20 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006bbe:	4b0e      	ldr	r3, [pc, #56]	@ (8006bf8 <HAL_RCC_OscConfig+0x780>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d0f0      	beq.n	8006bac <HAL_RCC_OscConfig+0x734>
 8006bca:	e028      	b.n	8006c1e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006bcc:	69bb      	ldr	r3, [r7, #24]
 8006bce:	2b0c      	cmp	r3, #12
 8006bd0:	d023      	beq.n	8006c1a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bd2:	4b09      	ldr	r3, [pc, #36]	@ (8006bf8 <HAL_RCC_OscConfig+0x780>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a08      	ldr	r2, [pc, #32]	@ (8006bf8 <HAL_RCC_OscConfig+0x780>)
 8006bd8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006bdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bde:	f7fd fe1b 	bl	8004818 <HAL_GetTick>
 8006be2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006be4:	e00c      	b.n	8006c00 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006be6:	f7fd fe17 	bl	8004818 <HAL_GetTick>
 8006bea:	4602      	mov	r2, r0
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	1ad3      	subs	r3, r2, r3
 8006bf0:	2b02      	cmp	r3, #2
 8006bf2:	d905      	bls.n	8006c00 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8006bf4:	2303      	movs	r3, #3
 8006bf6:	e013      	b.n	8006c20 <HAL_RCC_OscConfig+0x7a8>
 8006bf8:	40021000 	.word	0x40021000
 8006bfc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c00:	4b09      	ldr	r3, [pc, #36]	@ (8006c28 <HAL_RCC_OscConfig+0x7b0>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d1ec      	bne.n	8006be6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006c0c:	4b06      	ldr	r3, [pc, #24]	@ (8006c28 <HAL_RCC_OscConfig+0x7b0>)
 8006c0e:	68da      	ldr	r2, [r3, #12]
 8006c10:	4905      	ldr	r1, [pc, #20]	@ (8006c28 <HAL_RCC_OscConfig+0x7b0>)
 8006c12:	4b06      	ldr	r3, [pc, #24]	@ (8006c2c <HAL_RCC_OscConfig+0x7b4>)
 8006c14:	4013      	ands	r3, r2
 8006c16:	60cb      	str	r3, [r1, #12]
 8006c18:	e001      	b.n	8006c1e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	e000      	b.n	8006c20 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8006c1e:	2300      	movs	r3, #0
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3720      	adds	r7, #32
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}
 8006c28:	40021000 	.word	0x40021000
 8006c2c:	feeefffc 	.word	0xfeeefffc

08006c30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b084      	sub	sp, #16
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d101      	bne.n	8006c44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c40:	2301      	movs	r3, #1
 8006c42:	e0e7      	b.n	8006e14 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006c44:	4b75      	ldr	r3, [pc, #468]	@ (8006e1c <HAL_RCC_ClockConfig+0x1ec>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f003 0307 	and.w	r3, r3, #7
 8006c4c:	683a      	ldr	r2, [r7, #0]
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	d910      	bls.n	8006c74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c52:	4b72      	ldr	r3, [pc, #456]	@ (8006e1c <HAL_RCC_ClockConfig+0x1ec>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f023 0207 	bic.w	r2, r3, #7
 8006c5a:	4970      	ldr	r1, [pc, #448]	@ (8006e1c <HAL_RCC_ClockConfig+0x1ec>)
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c62:	4b6e      	ldr	r3, [pc, #440]	@ (8006e1c <HAL_RCC_ClockConfig+0x1ec>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f003 0307 	and.w	r3, r3, #7
 8006c6a:	683a      	ldr	r2, [r7, #0]
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d001      	beq.n	8006c74 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006c70:	2301      	movs	r3, #1
 8006c72:	e0cf      	b.n	8006e14 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f003 0302 	and.w	r3, r3, #2
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d010      	beq.n	8006ca2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	689a      	ldr	r2, [r3, #8]
 8006c84:	4b66      	ldr	r3, [pc, #408]	@ (8006e20 <HAL_RCC_ClockConfig+0x1f0>)
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d908      	bls.n	8006ca2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c90:	4b63      	ldr	r3, [pc, #396]	@ (8006e20 <HAL_RCC_ClockConfig+0x1f0>)
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	689b      	ldr	r3, [r3, #8]
 8006c9c:	4960      	ldr	r1, [pc, #384]	@ (8006e20 <HAL_RCC_ClockConfig+0x1f0>)
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f003 0301 	and.w	r3, r3, #1
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d04c      	beq.n	8006d48 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	2b03      	cmp	r3, #3
 8006cb4:	d107      	bne.n	8006cc6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006cb6:	4b5a      	ldr	r3, [pc, #360]	@ (8006e20 <HAL_RCC_ClockConfig+0x1f0>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d121      	bne.n	8006d06 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	e0a6      	b.n	8006e14 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	2b02      	cmp	r3, #2
 8006ccc:	d107      	bne.n	8006cde <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006cce:	4b54      	ldr	r3, [pc, #336]	@ (8006e20 <HAL_RCC_ClockConfig+0x1f0>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d115      	bne.n	8006d06 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e09a      	b.n	8006e14 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d107      	bne.n	8006cf6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006ce6:	4b4e      	ldr	r3, [pc, #312]	@ (8006e20 <HAL_RCC_ClockConfig+0x1f0>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f003 0302 	and.w	r3, r3, #2
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d109      	bne.n	8006d06 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	e08e      	b.n	8006e14 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006cf6:	4b4a      	ldr	r3, [pc, #296]	@ (8006e20 <HAL_RCC_ClockConfig+0x1f0>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d101      	bne.n	8006d06 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006d02:	2301      	movs	r3, #1
 8006d04:	e086      	b.n	8006e14 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006d06:	4b46      	ldr	r3, [pc, #280]	@ (8006e20 <HAL_RCC_ClockConfig+0x1f0>)
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	f023 0203 	bic.w	r2, r3, #3
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	4943      	ldr	r1, [pc, #268]	@ (8006e20 <HAL_RCC_ClockConfig+0x1f0>)
 8006d14:	4313      	orrs	r3, r2
 8006d16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d18:	f7fd fd7e 	bl	8004818 <HAL_GetTick>
 8006d1c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d1e:	e00a      	b.n	8006d36 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d20:	f7fd fd7a 	bl	8004818 <HAL_GetTick>
 8006d24:	4602      	mov	r2, r0
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	1ad3      	subs	r3, r2, r3
 8006d2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d901      	bls.n	8006d36 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006d32:	2303      	movs	r3, #3
 8006d34:	e06e      	b.n	8006e14 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d36:	4b3a      	ldr	r3, [pc, #232]	@ (8006e20 <HAL_RCC_ClockConfig+0x1f0>)
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	f003 020c 	and.w	r2, r3, #12
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	009b      	lsls	r3, r3, #2
 8006d44:	429a      	cmp	r2, r3
 8006d46:	d1eb      	bne.n	8006d20 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f003 0302 	and.w	r3, r3, #2
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d010      	beq.n	8006d76 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	689a      	ldr	r2, [r3, #8]
 8006d58:	4b31      	ldr	r3, [pc, #196]	@ (8006e20 <HAL_RCC_ClockConfig+0x1f0>)
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d208      	bcs.n	8006d76 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d64:	4b2e      	ldr	r3, [pc, #184]	@ (8006e20 <HAL_RCC_ClockConfig+0x1f0>)
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	492b      	ldr	r1, [pc, #172]	@ (8006e20 <HAL_RCC_ClockConfig+0x1f0>)
 8006d72:	4313      	orrs	r3, r2
 8006d74:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006d76:	4b29      	ldr	r3, [pc, #164]	@ (8006e1c <HAL_RCC_ClockConfig+0x1ec>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f003 0307 	and.w	r3, r3, #7
 8006d7e:	683a      	ldr	r2, [r7, #0]
 8006d80:	429a      	cmp	r2, r3
 8006d82:	d210      	bcs.n	8006da6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d84:	4b25      	ldr	r3, [pc, #148]	@ (8006e1c <HAL_RCC_ClockConfig+0x1ec>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f023 0207 	bic.w	r2, r3, #7
 8006d8c:	4923      	ldr	r1, [pc, #140]	@ (8006e1c <HAL_RCC_ClockConfig+0x1ec>)
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	4313      	orrs	r3, r2
 8006d92:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d94:	4b21      	ldr	r3, [pc, #132]	@ (8006e1c <HAL_RCC_ClockConfig+0x1ec>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f003 0307 	and.w	r3, r3, #7
 8006d9c:	683a      	ldr	r2, [r7, #0]
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	d001      	beq.n	8006da6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006da2:	2301      	movs	r3, #1
 8006da4:	e036      	b.n	8006e14 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f003 0304 	and.w	r3, r3, #4
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d008      	beq.n	8006dc4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006db2:	4b1b      	ldr	r3, [pc, #108]	@ (8006e20 <HAL_RCC_ClockConfig+0x1f0>)
 8006db4:	689b      	ldr	r3, [r3, #8]
 8006db6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	68db      	ldr	r3, [r3, #12]
 8006dbe:	4918      	ldr	r1, [pc, #96]	@ (8006e20 <HAL_RCC_ClockConfig+0x1f0>)
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f003 0308 	and.w	r3, r3, #8
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d009      	beq.n	8006de4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006dd0:	4b13      	ldr	r3, [pc, #76]	@ (8006e20 <HAL_RCC_ClockConfig+0x1f0>)
 8006dd2:	689b      	ldr	r3, [r3, #8]
 8006dd4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	691b      	ldr	r3, [r3, #16]
 8006ddc:	00db      	lsls	r3, r3, #3
 8006dde:	4910      	ldr	r1, [pc, #64]	@ (8006e20 <HAL_RCC_ClockConfig+0x1f0>)
 8006de0:	4313      	orrs	r3, r2
 8006de2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006de4:	f000 f824 	bl	8006e30 <HAL_RCC_GetSysClockFreq>
 8006de8:	4602      	mov	r2, r0
 8006dea:	4b0d      	ldr	r3, [pc, #52]	@ (8006e20 <HAL_RCC_ClockConfig+0x1f0>)
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	091b      	lsrs	r3, r3, #4
 8006df0:	f003 030f 	and.w	r3, r3, #15
 8006df4:	490b      	ldr	r1, [pc, #44]	@ (8006e24 <HAL_RCC_ClockConfig+0x1f4>)
 8006df6:	5ccb      	ldrb	r3, [r1, r3]
 8006df8:	f003 031f 	and.w	r3, r3, #31
 8006dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8006e00:	4a09      	ldr	r2, [pc, #36]	@ (8006e28 <HAL_RCC_ClockConfig+0x1f8>)
 8006e02:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006e04:	4b09      	ldr	r3, [pc, #36]	@ (8006e2c <HAL_RCC_ClockConfig+0x1fc>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f7fd fcb5 	bl	8004778 <HAL_InitTick>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	72fb      	strb	r3, [r7, #11]

  return status;
 8006e12:	7afb      	ldrb	r3, [r7, #11]
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3710      	adds	r7, #16
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}
 8006e1c:	40022000 	.word	0x40022000
 8006e20:	40021000 	.word	0x40021000
 8006e24:	0800d4f8 	.word	0x0800d4f8
 8006e28:	20000004 	.word	0x20000004
 8006e2c:	20000050 	.word	0x20000050

08006e30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b089      	sub	sp, #36	@ 0x24
 8006e34:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006e36:	2300      	movs	r3, #0
 8006e38:	61fb      	str	r3, [r7, #28]
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e3e:	4b3e      	ldr	r3, [pc, #248]	@ (8006f38 <HAL_RCC_GetSysClockFreq+0x108>)
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	f003 030c 	and.w	r3, r3, #12
 8006e46:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006e48:	4b3b      	ldr	r3, [pc, #236]	@ (8006f38 <HAL_RCC_GetSysClockFreq+0x108>)
 8006e4a:	68db      	ldr	r3, [r3, #12]
 8006e4c:	f003 0303 	and.w	r3, r3, #3
 8006e50:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d005      	beq.n	8006e64 <HAL_RCC_GetSysClockFreq+0x34>
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	2b0c      	cmp	r3, #12
 8006e5c:	d121      	bne.n	8006ea2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d11e      	bne.n	8006ea2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006e64:	4b34      	ldr	r3, [pc, #208]	@ (8006f38 <HAL_RCC_GetSysClockFreq+0x108>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f003 0308 	and.w	r3, r3, #8
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d107      	bne.n	8006e80 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006e70:	4b31      	ldr	r3, [pc, #196]	@ (8006f38 <HAL_RCC_GetSysClockFreq+0x108>)
 8006e72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006e76:	0a1b      	lsrs	r3, r3, #8
 8006e78:	f003 030f 	and.w	r3, r3, #15
 8006e7c:	61fb      	str	r3, [r7, #28]
 8006e7e:	e005      	b.n	8006e8c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006e80:	4b2d      	ldr	r3, [pc, #180]	@ (8006f38 <HAL_RCC_GetSysClockFreq+0x108>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	091b      	lsrs	r3, r3, #4
 8006e86:	f003 030f 	and.w	r3, r3, #15
 8006e8a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006e8c:	4a2b      	ldr	r2, [pc, #172]	@ (8006f3c <HAL_RCC_GetSysClockFreq+0x10c>)
 8006e8e:	69fb      	ldr	r3, [r7, #28]
 8006e90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e94:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d10d      	bne.n	8006eb8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006e9c:	69fb      	ldr	r3, [r7, #28]
 8006e9e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006ea0:	e00a      	b.n	8006eb8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	2b04      	cmp	r3, #4
 8006ea6:	d102      	bne.n	8006eae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006ea8:	4b25      	ldr	r3, [pc, #148]	@ (8006f40 <HAL_RCC_GetSysClockFreq+0x110>)
 8006eaa:	61bb      	str	r3, [r7, #24]
 8006eac:	e004      	b.n	8006eb8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	2b08      	cmp	r3, #8
 8006eb2:	d101      	bne.n	8006eb8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006eb4:	4b23      	ldr	r3, [pc, #140]	@ (8006f44 <HAL_RCC_GetSysClockFreq+0x114>)
 8006eb6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	2b0c      	cmp	r3, #12
 8006ebc:	d134      	bne.n	8006f28 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006ebe:	4b1e      	ldr	r3, [pc, #120]	@ (8006f38 <HAL_RCC_GetSysClockFreq+0x108>)
 8006ec0:	68db      	ldr	r3, [r3, #12]
 8006ec2:	f003 0303 	and.w	r3, r3, #3
 8006ec6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	2b02      	cmp	r3, #2
 8006ecc:	d003      	beq.n	8006ed6 <HAL_RCC_GetSysClockFreq+0xa6>
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	2b03      	cmp	r3, #3
 8006ed2:	d003      	beq.n	8006edc <HAL_RCC_GetSysClockFreq+0xac>
 8006ed4:	e005      	b.n	8006ee2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006ed6:	4b1a      	ldr	r3, [pc, #104]	@ (8006f40 <HAL_RCC_GetSysClockFreq+0x110>)
 8006ed8:	617b      	str	r3, [r7, #20]
      break;
 8006eda:	e005      	b.n	8006ee8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006edc:	4b19      	ldr	r3, [pc, #100]	@ (8006f44 <HAL_RCC_GetSysClockFreq+0x114>)
 8006ede:	617b      	str	r3, [r7, #20]
      break;
 8006ee0:	e002      	b.n	8006ee8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006ee2:	69fb      	ldr	r3, [r7, #28]
 8006ee4:	617b      	str	r3, [r7, #20]
      break;
 8006ee6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006ee8:	4b13      	ldr	r3, [pc, #76]	@ (8006f38 <HAL_RCC_GetSysClockFreq+0x108>)
 8006eea:	68db      	ldr	r3, [r3, #12]
 8006eec:	091b      	lsrs	r3, r3, #4
 8006eee:	f003 0307 	and.w	r3, r3, #7
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006ef6:	4b10      	ldr	r3, [pc, #64]	@ (8006f38 <HAL_RCC_GetSysClockFreq+0x108>)
 8006ef8:	68db      	ldr	r3, [r3, #12]
 8006efa:	0a1b      	lsrs	r3, r3, #8
 8006efc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f00:	697a      	ldr	r2, [r7, #20]
 8006f02:	fb03 f202 	mul.w	r2, r3, r2
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f0c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006f0e:	4b0a      	ldr	r3, [pc, #40]	@ (8006f38 <HAL_RCC_GetSysClockFreq+0x108>)
 8006f10:	68db      	ldr	r3, [r3, #12]
 8006f12:	0e5b      	lsrs	r3, r3, #25
 8006f14:	f003 0303 	and.w	r3, r3, #3
 8006f18:	3301      	adds	r3, #1
 8006f1a:	005b      	lsls	r3, r3, #1
 8006f1c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006f1e:	697a      	ldr	r2, [r7, #20]
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f26:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006f28:	69bb      	ldr	r3, [r7, #24]
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3724      	adds	r7, #36	@ 0x24
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f34:	4770      	bx	lr
 8006f36:	bf00      	nop
 8006f38:	40021000 	.word	0x40021000
 8006f3c:	0800d510 	.word	0x0800d510
 8006f40:	00f42400 	.word	0x00f42400
 8006f44:	007a1200 	.word	0x007a1200

08006f48 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f4c:	4b03      	ldr	r3, [pc, #12]	@ (8006f5c <HAL_RCC_GetHCLKFreq+0x14>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	46bd      	mov	sp, r7
 8006f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f58:	4770      	bx	lr
 8006f5a:	bf00      	nop
 8006f5c:	20000004 	.word	0x20000004

08006f60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006f64:	f7ff fff0 	bl	8006f48 <HAL_RCC_GetHCLKFreq>
 8006f68:	4602      	mov	r2, r0
 8006f6a:	4b06      	ldr	r3, [pc, #24]	@ (8006f84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f6c:	689b      	ldr	r3, [r3, #8]
 8006f6e:	0a1b      	lsrs	r3, r3, #8
 8006f70:	f003 0307 	and.w	r3, r3, #7
 8006f74:	4904      	ldr	r1, [pc, #16]	@ (8006f88 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006f76:	5ccb      	ldrb	r3, [r1, r3]
 8006f78:	f003 031f 	and.w	r3, r3, #31
 8006f7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	bd80      	pop	{r7, pc}
 8006f84:	40021000 	.word	0x40021000
 8006f88:	0800d508 	.word	0x0800d508

08006f8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006f90:	f7ff ffda 	bl	8006f48 <HAL_RCC_GetHCLKFreq>
 8006f94:	4602      	mov	r2, r0
 8006f96:	4b06      	ldr	r3, [pc, #24]	@ (8006fb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	0adb      	lsrs	r3, r3, #11
 8006f9c:	f003 0307 	and.w	r3, r3, #7
 8006fa0:	4904      	ldr	r1, [pc, #16]	@ (8006fb4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006fa2:	5ccb      	ldrb	r3, [r1, r3]
 8006fa4:	f003 031f 	and.w	r3, r3, #31
 8006fa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	bd80      	pop	{r7, pc}
 8006fb0:	40021000 	.word	0x40021000
 8006fb4:	0800d508 	.word	0x0800d508

08006fb8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b086      	sub	sp, #24
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006fc4:	4b2a      	ldr	r3, [pc, #168]	@ (8007070 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006fc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d003      	beq.n	8006fd8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006fd0:	f7ff f922 	bl	8006218 <HAL_PWREx_GetVoltageRange>
 8006fd4:	6178      	str	r0, [r7, #20]
 8006fd6:	e014      	b.n	8007002 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006fd8:	4b25      	ldr	r3, [pc, #148]	@ (8007070 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006fda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fdc:	4a24      	ldr	r2, [pc, #144]	@ (8007070 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006fde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006fe2:	6593      	str	r3, [r2, #88]	@ 0x58
 8006fe4:	4b22      	ldr	r3, [pc, #136]	@ (8007070 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006fe6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fe8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006fec:	60fb      	str	r3, [r7, #12]
 8006fee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006ff0:	f7ff f912 	bl	8006218 <HAL_PWREx_GetVoltageRange>
 8006ff4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006ff6:	4b1e      	ldr	r3, [pc, #120]	@ (8007070 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006ff8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ffa:	4a1d      	ldr	r2, [pc, #116]	@ (8007070 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006ffc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007000:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007008:	d10b      	bne.n	8007022 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2b80      	cmp	r3, #128	@ 0x80
 800700e:	d919      	bls.n	8007044 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2ba0      	cmp	r3, #160	@ 0xa0
 8007014:	d902      	bls.n	800701c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007016:	2302      	movs	r3, #2
 8007018:	613b      	str	r3, [r7, #16]
 800701a:	e013      	b.n	8007044 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800701c:	2301      	movs	r3, #1
 800701e:	613b      	str	r3, [r7, #16]
 8007020:	e010      	b.n	8007044 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2b80      	cmp	r3, #128	@ 0x80
 8007026:	d902      	bls.n	800702e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007028:	2303      	movs	r3, #3
 800702a:	613b      	str	r3, [r7, #16]
 800702c:	e00a      	b.n	8007044 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2b80      	cmp	r3, #128	@ 0x80
 8007032:	d102      	bne.n	800703a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007034:	2302      	movs	r3, #2
 8007036:	613b      	str	r3, [r7, #16]
 8007038:	e004      	b.n	8007044 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2b70      	cmp	r3, #112	@ 0x70
 800703e:	d101      	bne.n	8007044 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007040:	2301      	movs	r3, #1
 8007042:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007044:	4b0b      	ldr	r3, [pc, #44]	@ (8007074 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f023 0207 	bic.w	r2, r3, #7
 800704c:	4909      	ldr	r1, [pc, #36]	@ (8007074 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	4313      	orrs	r3, r2
 8007052:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007054:	4b07      	ldr	r3, [pc, #28]	@ (8007074 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f003 0307 	and.w	r3, r3, #7
 800705c:	693a      	ldr	r2, [r7, #16]
 800705e:	429a      	cmp	r2, r3
 8007060:	d001      	beq.n	8007066 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007062:	2301      	movs	r3, #1
 8007064:	e000      	b.n	8007068 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8007066:	2300      	movs	r3, #0
}
 8007068:	4618      	mov	r0, r3
 800706a:	3718      	adds	r7, #24
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}
 8007070:	40021000 	.word	0x40021000
 8007074:	40022000 	.word	0x40022000

08007078 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b086      	sub	sp, #24
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007080:	2300      	movs	r3, #0
 8007082:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007084:	2300      	movs	r3, #0
 8007086:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007090:	2b00      	cmp	r3, #0
 8007092:	d041      	beq.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007098:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800709c:	d02a      	beq.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800709e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80070a2:	d824      	bhi.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0x76>
 80070a4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80070a8:	d008      	beq.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80070aa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80070ae:	d81e      	bhi.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0x76>
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d00a      	beq.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x52>
 80070b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80070b8:	d010      	beq.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80070ba:	e018      	b.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80070bc:	4b86      	ldr	r3, [pc, #536]	@ (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80070be:	68db      	ldr	r3, [r3, #12]
 80070c0:	4a85      	ldr	r2, [pc, #532]	@ (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80070c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80070c6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80070c8:	e015      	b.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	3304      	adds	r3, #4
 80070ce:	2100      	movs	r1, #0
 80070d0:	4618      	mov	r0, r3
 80070d2:	f000 facb 	bl	800766c <RCCEx_PLLSAI1_Config>
 80070d6:	4603      	mov	r3, r0
 80070d8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80070da:	e00c      	b.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	3320      	adds	r3, #32
 80070e0:	2100      	movs	r1, #0
 80070e2:	4618      	mov	r0, r3
 80070e4:	f000 fbb6 	bl	8007854 <RCCEx_PLLSAI2_Config>
 80070e8:	4603      	mov	r3, r0
 80070ea:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80070ec:	e003      	b.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80070ee:	2301      	movs	r3, #1
 80070f0:	74fb      	strb	r3, [r7, #19]
      break;
 80070f2:	e000      	b.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80070f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070f6:	7cfb      	ldrb	r3, [r7, #19]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d10b      	bne.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80070fc:	4b76      	ldr	r3, [pc, #472]	@ (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80070fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007102:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800710a:	4973      	ldr	r1, [pc, #460]	@ (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800710c:	4313      	orrs	r3, r2
 800710e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8007112:	e001      	b.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007114:	7cfb      	ldrb	r3, [r7, #19]
 8007116:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007120:	2b00      	cmp	r3, #0
 8007122:	d041      	beq.n	80071a8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007128:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800712c:	d02a      	beq.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800712e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007132:	d824      	bhi.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007134:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007138:	d008      	beq.n	800714c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800713a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800713e:	d81e      	bhi.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007140:	2b00      	cmp	r3, #0
 8007142:	d00a      	beq.n	800715a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8007144:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007148:	d010      	beq.n	800716c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800714a:	e018      	b.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800714c:	4b62      	ldr	r3, [pc, #392]	@ (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800714e:	68db      	ldr	r3, [r3, #12]
 8007150:	4a61      	ldr	r2, [pc, #388]	@ (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007152:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007156:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007158:	e015      	b.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	3304      	adds	r3, #4
 800715e:	2100      	movs	r1, #0
 8007160:	4618      	mov	r0, r3
 8007162:	f000 fa83 	bl	800766c <RCCEx_PLLSAI1_Config>
 8007166:	4603      	mov	r3, r0
 8007168:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800716a:	e00c      	b.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	3320      	adds	r3, #32
 8007170:	2100      	movs	r1, #0
 8007172:	4618      	mov	r0, r3
 8007174:	f000 fb6e 	bl	8007854 <RCCEx_PLLSAI2_Config>
 8007178:	4603      	mov	r3, r0
 800717a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800717c:	e003      	b.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800717e:	2301      	movs	r3, #1
 8007180:	74fb      	strb	r3, [r7, #19]
      break;
 8007182:	e000      	b.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8007184:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007186:	7cfb      	ldrb	r3, [r7, #19]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d10b      	bne.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800718c:	4b52      	ldr	r3, [pc, #328]	@ (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800718e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007192:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800719a:	494f      	ldr	r1, [pc, #316]	@ (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800719c:	4313      	orrs	r3, r2
 800719e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80071a2:	e001      	b.n	80071a8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071a4:	7cfb      	ldrb	r3, [r7, #19]
 80071a6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	f000 80a0 	beq.w	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80071b6:	2300      	movs	r3, #0
 80071b8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80071ba:	4b47      	ldr	r3, [pc, #284]	@ (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80071bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d101      	bne.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x152>
 80071c6:	2301      	movs	r3, #1
 80071c8:	e000      	b.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80071ca:	2300      	movs	r3, #0
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d00d      	beq.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80071d0:	4b41      	ldr	r3, [pc, #260]	@ (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80071d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071d4:	4a40      	ldr	r2, [pc, #256]	@ (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80071d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80071da:	6593      	str	r3, [r2, #88]	@ 0x58
 80071dc:	4b3e      	ldr	r3, [pc, #248]	@ (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80071de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80071e4:	60bb      	str	r3, [r7, #8]
 80071e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80071e8:	2301      	movs	r3, #1
 80071ea:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80071ec:	4b3b      	ldr	r3, [pc, #236]	@ (80072dc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a3a      	ldr	r2, [pc, #232]	@ (80072dc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80071f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80071f6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80071f8:	f7fd fb0e 	bl	8004818 <HAL_GetTick>
 80071fc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80071fe:	e009      	b.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007200:	f7fd fb0a 	bl	8004818 <HAL_GetTick>
 8007204:	4602      	mov	r2, r0
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	1ad3      	subs	r3, r2, r3
 800720a:	2b02      	cmp	r3, #2
 800720c:	d902      	bls.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800720e:	2303      	movs	r3, #3
 8007210:	74fb      	strb	r3, [r7, #19]
        break;
 8007212:	e005      	b.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007214:	4b31      	ldr	r3, [pc, #196]	@ (80072dc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800721c:	2b00      	cmp	r3, #0
 800721e:	d0ef      	beq.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8007220:	7cfb      	ldrb	r3, [r7, #19]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d15c      	bne.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007226:	4b2c      	ldr	r3, [pc, #176]	@ (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007228:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800722c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007230:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d01f      	beq.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800723e:	697a      	ldr	r2, [r7, #20]
 8007240:	429a      	cmp	r2, r3
 8007242:	d019      	beq.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007244:	4b24      	ldr	r3, [pc, #144]	@ (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007246:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800724a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800724e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007250:	4b21      	ldr	r3, [pc, #132]	@ (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007252:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007256:	4a20      	ldr	r2, [pc, #128]	@ (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007258:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800725c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007260:	4b1d      	ldr	r3, [pc, #116]	@ (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007262:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007266:	4a1c      	ldr	r2, [pc, #112]	@ (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007268:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800726c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007270:	4a19      	ldr	r2, [pc, #100]	@ (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	f003 0301 	and.w	r3, r3, #1
 800727e:	2b00      	cmp	r3, #0
 8007280:	d016      	beq.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007282:	f7fd fac9 	bl	8004818 <HAL_GetTick>
 8007286:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007288:	e00b      	b.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800728a:	f7fd fac5 	bl	8004818 <HAL_GetTick>
 800728e:	4602      	mov	r2, r0
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	1ad3      	subs	r3, r2, r3
 8007294:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007298:	4293      	cmp	r3, r2
 800729a:	d902      	bls.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800729c:	2303      	movs	r3, #3
 800729e:	74fb      	strb	r3, [r7, #19]
            break;
 80072a0:	e006      	b.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80072a2:	4b0d      	ldr	r3, [pc, #52]	@ (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80072a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072a8:	f003 0302 	and.w	r3, r3, #2
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d0ec      	beq.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80072b0:	7cfb      	ldrb	r3, [r7, #19]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d10c      	bne.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80072b6:	4b08      	ldr	r3, [pc, #32]	@ (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80072b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80072c6:	4904      	ldr	r1, [pc, #16]	@ (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80072c8:	4313      	orrs	r3, r2
 80072ca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80072ce:	e009      	b.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80072d0:	7cfb      	ldrb	r3, [r7, #19]
 80072d2:	74bb      	strb	r3, [r7, #18]
 80072d4:	e006      	b.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80072d6:	bf00      	nop
 80072d8:	40021000 	.word	0x40021000
 80072dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072e0:	7cfb      	ldrb	r3, [r7, #19]
 80072e2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80072e4:	7c7b      	ldrb	r3, [r7, #17]
 80072e6:	2b01      	cmp	r3, #1
 80072e8:	d105      	bne.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80072ea:	4b9e      	ldr	r3, [pc, #632]	@ (8007564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072ee:	4a9d      	ldr	r2, [pc, #628]	@ (8007564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80072f4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f003 0301 	and.w	r3, r3, #1
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d00a      	beq.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007302:	4b98      	ldr	r3, [pc, #608]	@ (8007564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007304:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007308:	f023 0203 	bic.w	r2, r3, #3
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007310:	4994      	ldr	r1, [pc, #592]	@ (8007564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007312:	4313      	orrs	r3, r2
 8007314:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f003 0302 	and.w	r3, r3, #2
 8007320:	2b00      	cmp	r3, #0
 8007322:	d00a      	beq.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007324:	4b8f      	ldr	r3, [pc, #572]	@ (8007564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007326:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800732a:	f023 020c 	bic.w	r2, r3, #12
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007332:	498c      	ldr	r1, [pc, #560]	@ (8007564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007334:	4313      	orrs	r3, r2
 8007336:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f003 0304 	and.w	r3, r3, #4
 8007342:	2b00      	cmp	r3, #0
 8007344:	d00a      	beq.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007346:	4b87      	ldr	r3, [pc, #540]	@ (8007564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007348:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800734c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007354:	4983      	ldr	r1, [pc, #524]	@ (8007564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007356:	4313      	orrs	r3, r2
 8007358:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f003 0308 	and.w	r3, r3, #8
 8007364:	2b00      	cmp	r3, #0
 8007366:	d00a      	beq.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007368:	4b7e      	ldr	r3, [pc, #504]	@ (8007564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800736a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800736e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007376:	497b      	ldr	r1, [pc, #492]	@ (8007564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007378:	4313      	orrs	r3, r2
 800737a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f003 0310 	and.w	r3, r3, #16
 8007386:	2b00      	cmp	r3, #0
 8007388:	d00a      	beq.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800738a:	4b76      	ldr	r3, [pc, #472]	@ (8007564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800738c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007390:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007398:	4972      	ldr	r1, [pc, #456]	@ (8007564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800739a:	4313      	orrs	r3, r2
 800739c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f003 0320 	and.w	r3, r3, #32
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d00a      	beq.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80073ac:	4b6d      	ldr	r3, [pc, #436]	@ (8007564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073b2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073ba:	496a      	ldr	r1, [pc, #424]	@ (8007564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073bc:	4313      	orrs	r3, r2
 80073be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d00a      	beq.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80073ce:	4b65      	ldr	r3, [pc, #404]	@ (8007564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073d4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073dc:	4961      	ldr	r1, [pc, #388]	@ (8007564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073de:	4313      	orrs	r3, r2
 80073e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d00a      	beq.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80073f0:	4b5c      	ldr	r3, [pc, #368]	@ (8007564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073f6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80073fe:	4959      	ldr	r1, [pc, #356]	@ (8007564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007400:	4313      	orrs	r3, r2
 8007402:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800740e:	2b00      	cmp	r3, #0
 8007410:	d00a      	beq.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007412:	4b54      	ldr	r3, [pc, #336]	@ (8007564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007414:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007418:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007420:	4950      	ldr	r1, [pc, #320]	@ (8007564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007422:	4313      	orrs	r3, r2
 8007424:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007430:	2b00      	cmp	r3, #0
 8007432:	d00a      	beq.n	800744a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007434:	4b4b      	ldr	r3, [pc, #300]	@ (8007564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007436:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800743a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007442:	4948      	ldr	r1, [pc, #288]	@ (8007564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007444:	4313      	orrs	r3, r2
 8007446:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007452:	2b00      	cmp	r3, #0
 8007454:	d00a      	beq.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007456:	4b43      	ldr	r3, [pc, #268]	@ (8007564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007458:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800745c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007464:	493f      	ldr	r1, [pc, #252]	@ (8007564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007466:	4313      	orrs	r3, r2
 8007468:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007474:	2b00      	cmp	r3, #0
 8007476:	d028      	beq.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007478:	4b3a      	ldr	r3, [pc, #232]	@ (8007564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800747a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800747e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007486:	4937      	ldr	r1, [pc, #220]	@ (8007564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007488:	4313      	orrs	r3, r2
 800748a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007492:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007496:	d106      	bne.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007498:	4b32      	ldr	r3, [pc, #200]	@ (8007564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800749a:	68db      	ldr	r3, [r3, #12]
 800749c:	4a31      	ldr	r2, [pc, #196]	@ (8007564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800749e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80074a2:	60d3      	str	r3, [r2, #12]
 80074a4:	e011      	b.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80074aa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80074ae:	d10c      	bne.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	3304      	adds	r3, #4
 80074b4:	2101      	movs	r1, #1
 80074b6:	4618      	mov	r0, r3
 80074b8:	f000 f8d8 	bl	800766c <RCCEx_PLLSAI1_Config>
 80074bc:	4603      	mov	r3, r0
 80074be:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80074c0:	7cfb      	ldrb	r3, [r7, #19]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d001      	beq.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80074c6:	7cfb      	ldrb	r3, [r7, #19]
 80074c8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d028      	beq.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80074d6:	4b23      	ldr	r3, [pc, #140]	@ (8007564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80074d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074dc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074e4:	491f      	ldr	r1, [pc, #124]	@ (8007564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80074e6:	4313      	orrs	r3, r2
 80074e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80074f4:	d106      	bne.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80074f6:	4b1b      	ldr	r3, [pc, #108]	@ (8007564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80074f8:	68db      	ldr	r3, [r3, #12]
 80074fa:	4a1a      	ldr	r2, [pc, #104]	@ (8007564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80074fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007500:	60d3      	str	r3, [r2, #12]
 8007502:	e011      	b.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007508:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800750c:	d10c      	bne.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	3304      	adds	r3, #4
 8007512:	2101      	movs	r1, #1
 8007514:	4618      	mov	r0, r3
 8007516:	f000 f8a9 	bl	800766c <RCCEx_PLLSAI1_Config>
 800751a:	4603      	mov	r3, r0
 800751c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800751e:	7cfb      	ldrb	r3, [r7, #19]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d001      	beq.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8007524:	7cfb      	ldrb	r3, [r7, #19]
 8007526:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007530:	2b00      	cmp	r3, #0
 8007532:	d02b      	beq.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007534:	4b0b      	ldr	r3, [pc, #44]	@ (8007564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007536:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800753a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007542:	4908      	ldr	r1, [pc, #32]	@ (8007564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007544:	4313      	orrs	r3, r2
 8007546:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800754e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007552:	d109      	bne.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007554:	4b03      	ldr	r3, [pc, #12]	@ (8007564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007556:	68db      	ldr	r3, [r3, #12]
 8007558:	4a02      	ldr	r2, [pc, #8]	@ (8007564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800755a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800755e:	60d3      	str	r3, [r2, #12]
 8007560:	e014      	b.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8007562:	bf00      	nop
 8007564:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800756c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007570:	d10c      	bne.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	3304      	adds	r3, #4
 8007576:	2101      	movs	r1, #1
 8007578:	4618      	mov	r0, r3
 800757a:	f000 f877 	bl	800766c <RCCEx_PLLSAI1_Config>
 800757e:	4603      	mov	r3, r0
 8007580:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007582:	7cfb      	ldrb	r3, [r7, #19]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d001      	beq.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8007588:	7cfb      	ldrb	r3, [r7, #19]
 800758a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007594:	2b00      	cmp	r3, #0
 8007596:	d02f      	beq.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007598:	4b2b      	ldr	r3, [pc, #172]	@ (8007648 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800759a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800759e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80075a6:	4928      	ldr	r1, [pc, #160]	@ (8007648 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80075a8:	4313      	orrs	r3, r2
 80075aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80075b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80075b6:	d10d      	bne.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	3304      	adds	r3, #4
 80075bc:	2102      	movs	r1, #2
 80075be:	4618      	mov	r0, r3
 80075c0:	f000 f854 	bl	800766c <RCCEx_PLLSAI1_Config>
 80075c4:	4603      	mov	r3, r0
 80075c6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80075c8:	7cfb      	ldrb	r3, [r7, #19]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d014      	beq.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80075ce:	7cfb      	ldrb	r3, [r7, #19]
 80075d0:	74bb      	strb	r3, [r7, #18]
 80075d2:	e011      	b.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80075d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80075dc:	d10c      	bne.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	3320      	adds	r3, #32
 80075e2:	2102      	movs	r1, #2
 80075e4:	4618      	mov	r0, r3
 80075e6:	f000 f935 	bl	8007854 <RCCEx_PLLSAI2_Config>
 80075ea:	4603      	mov	r3, r0
 80075ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80075ee:	7cfb      	ldrb	r3, [r7, #19]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d001      	beq.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80075f4:	7cfb      	ldrb	r3, [r7, #19]
 80075f6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007600:	2b00      	cmp	r3, #0
 8007602:	d00a      	beq.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007604:	4b10      	ldr	r3, [pc, #64]	@ (8007648 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007606:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800760a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007612:	490d      	ldr	r1, [pc, #52]	@ (8007648 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007614:	4313      	orrs	r3, r2
 8007616:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007622:	2b00      	cmp	r3, #0
 8007624:	d00b      	beq.n	800763e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007626:	4b08      	ldr	r3, [pc, #32]	@ (8007648 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007628:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800762c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007636:	4904      	ldr	r1, [pc, #16]	@ (8007648 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007638:	4313      	orrs	r3, r2
 800763a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800763e:	7cbb      	ldrb	r3, [r7, #18]
}
 8007640:	4618      	mov	r0, r3
 8007642:	3718      	adds	r7, #24
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}
 8007648:	40021000 	.word	0x40021000

0800764c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800764c:	b480      	push	{r7}
 800764e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8007650:	4b05      	ldr	r3, [pc, #20]	@ (8007668 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a04      	ldr	r2, [pc, #16]	@ (8007668 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8007656:	f043 0304 	orr.w	r3, r3, #4
 800765a:	6013      	str	r3, [r2, #0]
}
 800765c:	bf00      	nop
 800765e:	46bd      	mov	sp, r7
 8007660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007664:	4770      	bx	lr
 8007666:	bf00      	nop
 8007668:	40021000 	.word	0x40021000

0800766c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b084      	sub	sp, #16
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007676:	2300      	movs	r3, #0
 8007678:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800767a:	4b75      	ldr	r3, [pc, #468]	@ (8007850 <RCCEx_PLLSAI1_Config+0x1e4>)
 800767c:	68db      	ldr	r3, [r3, #12]
 800767e:	f003 0303 	and.w	r3, r3, #3
 8007682:	2b00      	cmp	r3, #0
 8007684:	d018      	beq.n	80076b8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007686:	4b72      	ldr	r3, [pc, #456]	@ (8007850 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007688:	68db      	ldr	r3, [r3, #12]
 800768a:	f003 0203 	and.w	r2, r3, #3
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	429a      	cmp	r2, r3
 8007694:	d10d      	bne.n	80076b2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
       ||
 800769a:	2b00      	cmp	r3, #0
 800769c:	d009      	beq.n	80076b2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800769e:	4b6c      	ldr	r3, [pc, #432]	@ (8007850 <RCCEx_PLLSAI1_Config+0x1e4>)
 80076a0:	68db      	ldr	r3, [r3, #12]
 80076a2:	091b      	lsrs	r3, r3, #4
 80076a4:	f003 0307 	and.w	r3, r3, #7
 80076a8:	1c5a      	adds	r2, r3, #1
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	685b      	ldr	r3, [r3, #4]
       ||
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d047      	beq.n	8007742 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80076b2:	2301      	movs	r3, #1
 80076b4:	73fb      	strb	r3, [r7, #15]
 80076b6:	e044      	b.n	8007742 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	2b03      	cmp	r3, #3
 80076be:	d018      	beq.n	80076f2 <RCCEx_PLLSAI1_Config+0x86>
 80076c0:	2b03      	cmp	r3, #3
 80076c2:	d825      	bhi.n	8007710 <RCCEx_PLLSAI1_Config+0xa4>
 80076c4:	2b01      	cmp	r3, #1
 80076c6:	d002      	beq.n	80076ce <RCCEx_PLLSAI1_Config+0x62>
 80076c8:	2b02      	cmp	r3, #2
 80076ca:	d009      	beq.n	80076e0 <RCCEx_PLLSAI1_Config+0x74>
 80076cc:	e020      	b.n	8007710 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80076ce:	4b60      	ldr	r3, [pc, #384]	@ (8007850 <RCCEx_PLLSAI1_Config+0x1e4>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f003 0302 	and.w	r3, r3, #2
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d11d      	bne.n	8007716 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80076da:	2301      	movs	r3, #1
 80076dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80076de:	e01a      	b.n	8007716 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80076e0:	4b5b      	ldr	r3, [pc, #364]	@ (8007850 <RCCEx_PLLSAI1_Config+0x1e4>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d116      	bne.n	800771a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80076ec:	2301      	movs	r3, #1
 80076ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80076f0:	e013      	b.n	800771a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80076f2:	4b57      	ldr	r3, [pc, #348]	@ (8007850 <RCCEx_PLLSAI1_Config+0x1e4>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d10f      	bne.n	800771e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80076fe:	4b54      	ldr	r3, [pc, #336]	@ (8007850 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007706:	2b00      	cmp	r3, #0
 8007708:	d109      	bne.n	800771e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800770a:	2301      	movs	r3, #1
 800770c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800770e:	e006      	b.n	800771e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007710:	2301      	movs	r3, #1
 8007712:	73fb      	strb	r3, [r7, #15]
      break;
 8007714:	e004      	b.n	8007720 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007716:	bf00      	nop
 8007718:	e002      	b.n	8007720 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800771a:	bf00      	nop
 800771c:	e000      	b.n	8007720 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800771e:	bf00      	nop
    }

    if(status == HAL_OK)
 8007720:	7bfb      	ldrb	r3, [r7, #15]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d10d      	bne.n	8007742 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007726:	4b4a      	ldr	r3, [pc, #296]	@ (8007850 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007728:	68db      	ldr	r3, [r3, #12]
 800772a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6819      	ldr	r1, [r3, #0]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	3b01      	subs	r3, #1
 8007738:	011b      	lsls	r3, r3, #4
 800773a:	430b      	orrs	r3, r1
 800773c:	4944      	ldr	r1, [pc, #272]	@ (8007850 <RCCEx_PLLSAI1_Config+0x1e4>)
 800773e:	4313      	orrs	r3, r2
 8007740:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007742:	7bfb      	ldrb	r3, [r7, #15]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d17d      	bne.n	8007844 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007748:	4b41      	ldr	r3, [pc, #260]	@ (8007850 <RCCEx_PLLSAI1_Config+0x1e4>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a40      	ldr	r2, [pc, #256]	@ (8007850 <RCCEx_PLLSAI1_Config+0x1e4>)
 800774e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007752:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007754:	f7fd f860 	bl	8004818 <HAL_GetTick>
 8007758:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800775a:	e009      	b.n	8007770 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800775c:	f7fd f85c 	bl	8004818 <HAL_GetTick>
 8007760:	4602      	mov	r2, r0
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	1ad3      	subs	r3, r2, r3
 8007766:	2b02      	cmp	r3, #2
 8007768:	d902      	bls.n	8007770 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800776a:	2303      	movs	r3, #3
 800776c:	73fb      	strb	r3, [r7, #15]
        break;
 800776e:	e005      	b.n	800777c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007770:	4b37      	ldr	r3, [pc, #220]	@ (8007850 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007778:	2b00      	cmp	r3, #0
 800777a:	d1ef      	bne.n	800775c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800777c:	7bfb      	ldrb	r3, [r7, #15]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d160      	bne.n	8007844 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d111      	bne.n	80077ac <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007788:	4b31      	ldr	r3, [pc, #196]	@ (8007850 <RCCEx_PLLSAI1_Config+0x1e4>)
 800778a:	691b      	ldr	r3, [r3, #16]
 800778c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8007790:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007794:	687a      	ldr	r2, [r7, #4]
 8007796:	6892      	ldr	r2, [r2, #8]
 8007798:	0211      	lsls	r1, r2, #8
 800779a:	687a      	ldr	r2, [r7, #4]
 800779c:	68d2      	ldr	r2, [r2, #12]
 800779e:	0912      	lsrs	r2, r2, #4
 80077a0:	0452      	lsls	r2, r2, #17
 80077a2:	430a      	orrs	r2, r1
 80077a4:	492a      	ldr	r1, [pc, #168]	@ (8007850 <RCCEx_PLLSAI1_Config+0x1e4>)
 80077a6:	4313      	orrs	r3, r2
 80077a8:	610b      	str	r3, [r1, #16]
 80077aa:	e027      	b.n	80077fc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	2b01      	cmp	r3, #1
 80077b0:	d112      	bne.n	80077d8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80077b2:	4b27      	ldr	r3, [pc, #156]	@ (8007850 <RCCEx_PLLSAI1_Config+0x1e4>)
 80077b4:	691b      	ldr	r3, [r3, #16]
 80077b6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80077ba:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80077be:	687a      	ldr	r2, [r7, #4]
 80077c0:	6892      	ldr	r2, [r2, #8]
 80077c2:	0211      	lsls	r1, r2, #8
 80077c4:	687a      	ldr	r2, [r7, #4]
 80077c6:	6912      	ldr	r2, [r2, #16]
 80077c8:	0852      	lsrs	r2, r2, #1
 80077ca:	3a01      	subs	r2, #1
 80077cc:	0552      	lsls	r2, r2, #21
 80077ce:	430a      	orrs	r2, r1
 80077d0:	491f      	ldr	r1, [pc, #124]	@ (8007850 <RCCEx_PLLSAI1_Config+0x1e4>)
 80077d2:	4313      	orrs	r3, r2
 80077d4:	610b      	str	r3, [r1, #16]
 80077d6:	e011      	b.n	80077fc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80077d8:	4b1d      	ldr	r3, [pc, #116]	@ (8007850 <RCCEx_PLLSAI1_Config+0x1e4>)
 80077da:	691b      	ldr	r3, [r3, #16]
 80077dc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80077e0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80077e4:	687a      	ldr	r2, [r7, #4]
 80077e6:	6892      	ldr	r2, [r2, #8]
 80077e8:	0211      	lsls	r1, r2, #8
 80077ea:	687a      	ldr	r2, [r7, #4]
 80077ec:	6952      	ldr	r2, [r2, #20]
 80077ee:	0852      	lsrs	r2, r2, #1
 80077f0:	3a01      	subs	r2, #1
 80077f2:	0652      	lsls	r2, r2, #25
 80077f4:	430a      	orrs	r2, r1
 80077f6:	4916      	ldr	r1, [pc, #88]	@ (8007850 <RCCEx_PLLSAI1_Config+0x1e4>)
 80077f8:	4313      	orrs	r3, r2
 80077fa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80077fc:	4b14      	ldr	r3, [pc, #80]	@ (8007850 <RCCEx_PLLSAI1_Config+0x1e4>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4a13      	ldr	r2, [pc, #76]	@ (8007850 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007802:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007806:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007808:	f7fd f806 	bl	8004818 <HAL_GetTick>
 800780c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800780e:	e009      	b.n	8007824 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007810:	f7fd f802 	bl	8004818 <HAL_GetTick>
 8007814:	4602      	mov	r2, r0
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	1ad3      	subs	r3, r2, r3
 800781a:	2b02      	cmp	r3, #2
 800781c:	d902      	bls.n	8007824 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800781e:	2303      	movs	r3, #3
 8007820:	73fb      	strb	r3, [r7, #15]
          break;
 8007822:	e005      	b.n	8007830 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007824:	4b0a      	ldr	r3, [pc, #40]	@ (8007850 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800782c:	2b00      	cmp	r3, #0
 800782e:	d0ef      	beq.n	8007810 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8007830:	7bfb      	ldrb	r3, [r7, #15]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d106      	bne.n	8007844 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007836:	4b06      	ldr	r3, [pc, #24]	@ (8007850 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007838:	691a      	ldr	r2, [r3, #16]
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	699b      	ldr	r3, [r3, #24]
 800783e:	4904      	ldr	r1, [pc, #16]	@ (8007850 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007840:	4313      	orrs	r3, r2
 8007842:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007844:	7bfb      	ldrb	r3, [r7, #15]
}
 8007846:	4618      	mov	r0, r3
 8007848:	3710      	adds	r7, #16
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}
 800784e:	bf00      	nop
 8007850:	40021000 	.word	0x40021000

08007854 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b084      	sub	sp, #16
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
 800785c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800785e:	2300      	movs	r3, #0
 8007860:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007862:	4b6a      	ldr	r3, [pc, #424]	@ (8007a0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007864:	68db      	ldr	r3, [r3, #12]
 8007866:	f003 0303 	and.w	r3, r3, #3
 800786a:	2b00      	cmp	r3, #0
 800786c:	d018      	beq.n	80078a0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800786e:	4b67      	ldr	r3, [pc, #412]	@ (8007a0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007870:	68db      	ldr	r3, [r3, #12]
 8007872:	f003 0203 	and.w	r2, r3, #3
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	429a      	cmp	r2, r3
 800787c:	d10d      	bne.n	800789a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
       ||
 8007882:	2b00      	cmp	r3, #0
 8007884:	d009      	beq.n	800789a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8007886:	4b61      	ldr	r3, [pc, #388]	@ (8007a0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007888:	68db      	ldr	r3, [r3, #12]
 800788a:	091b      	lsrs	r3, r3, #4
 800788c:	f003 0307 	and.w	r3, r3, #7
 8007890:	1c5a      	adds	r2, r3, #1
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	685b      	ldr	r3, [r3, #4]
       ||
 8007896:	429a      	cmp	r2, r3
 8007898:	d047      	beq.n	800792a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800789a:	2301      	movs	r3, #1
 800789c:	73fb      	strb	r3, [r7, #15]
 800789e:	e044      	b.n	800792a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	2b03      	cmp	r3, #3
 80078a6:	d018      	beq.n	80078da <RCCEx_PLLSAI2_Config+0x86>
 80078a8:	2b03      	cmp	r3, #3
 80078aa:	d825      	bhi.n	80078f8 <RCCEx_PLLSAI2_Config+0xa4>
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d002      	beq.n	80078b6 <RCCEx_PLLSAI2_Config+0x62>
 80078b0:	2b02      	cmp	r3, #2
 80078b2:	d009      	beq.n	80078c8 <RCCEx_PLLSAI2_Config+0x74>
 80078b4:	e020      	b.n	80078f8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80078b6:	4b55      	ldr	r3, [pc, #340]	@ (8007a0c <RCCEx_PLLSAI2_Config+0x1b8>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f003 0302 	and.w	r3, r3, #2
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d11d      	bne.n	80078fe <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80078c2:	2301      	movs	r3, #1
 80078c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80078c6:	e01a      	b.n	80078fe <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80078c8:	4b50      	ldr	r3, [pc, #320]	@ (8007a0c <RCCEx_PLLSAI2_Config+0x1b8>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d116      	bne.n	8007902 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80078d4:	2301      	movs	r3, #1
 80078d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80078d8:	e013      	b.n	8007902 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80078da:	4b4c      	ldr	r3, [pc, #304]	@ (8007a0c <RCCEx_PLLSAI2_Config+0x1b8>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d10f      	bne.n	8007906 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80078e6:	4b49      	ldr	r3, [pc, #292]	@ (8007a0c <RCCEx_PLLSAI2_Config+0x1b8>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d109      	bne.n	8007906 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80078f2:	2301      	movs	r3, #1
 80078f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80078f6:	e006      	b.n	8007906 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80078f8:	2301      	movs	r3, #1
 80078fa:	73fb      	strb	r3, [r7, #15]
      break;
 80078fc:	e004      	b.n	8007908 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80078fe:	bf00      	nop
 8007900:	e002      	b.n	8007908 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007902:	bf00      	nop
 8007904:	e000      	b.n	8007908 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007906:	bf00      	nop
    }

    if(status == HAL_OK)
 8007908:	7bfb      	ldrb	r3, [r7, #15]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d10d      	bne.n	800792a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800790e:	4b3f      	ldr	r3, [pc, #252]	@ (8007a0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007910:	68db      	ldr	r3, [r3, #12]
 8007912:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6819      	ldr	r1, [r3, #0]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	3b01      	subs	r3, #1
 8007920:	011b      	lsls	r3, r3, #4
 8007922:	430b      	orrs	r3, r1
 8007924:	4939      	ldr	r1, [pc, #228]	@ (8007a0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007926:	4313      	orrs	r3, r2
 8007928:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800792a:	7bfb      	ldrb	r3, [r7, #15]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d167      	bne.n	8007a00 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007930:	4b36      	ldr	r3, [pc, #216]	@ (8007a0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a35      	ldr	r2, [pc, #212]	@ (8007a0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007936:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800793a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800793c:	f7fc ff6c 	bl	8004818 <HAL_GetTick>
 8007940:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007942:	e009      	b.n	8007958 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007944:	f7fc ff68 	bl	8004818 <HAL_GetTick>
 8007948:	4602      	mov	r2, r0
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	1ad3      	subs	r3, r2, r3
 800794e:	2b02      	cmp	r3, #2
 8007950:	d902      	bls.n	8007958 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007952:	2303      	movs	r3, #3
 8007954:	73fb      	strb	r3, [r7, #15]
        break;
 8007956:	e005      	b.n	8007964 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007958:	4b2c      	ldr	r3, [pc, #176]	@ (8007a0c <RCCEx_PLLSAI2_Config+0x1b8>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007960:	2b00      	cmp	r3, #0
 8007962:	d1ef      	bne.n	8007944 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007964:	7bfb      	ldrb	r3, [r7, #15]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d14a      	bne.n	8007a00 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d111      	bne.n	8007994 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007970:	4b26      	ldr	r3, [pc, #152]	@ (8007a0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007972:	695b      	ldr	r3, [r3, #20]
 8007974:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8007978:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800797c:	687a      	ldr	r2, [r7, #4]
 800797e:	6892      	ldr	r2, [r2, #8]
 8007980:	0211      	lsls	r1, r2, #8
 8007982:	687a      	ldr	r2, [r7, #4]
 8007984:	68d2      	ldr	r2, [r2, #12]
 8007986:	0912      	lsrs	r2, r2, #4
 8007988:	0452      	lsls	r2, r2, #17
 800798a:	430a      	orrs	r2, r1
 800798c:	491f      	ldr	r1, [pc, #124]	@ (8007a0c <RCCEx_PLLSAI2_Config+0x1b8>)
 800798e:	4313      	orrs	r3, r2
 8007990:	614b      	str	r3, [r1, #20]
 8007992:	e011      	b.n	80079b8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007994:	4b1d      	ldr	r3, [pc, #116]	@ (8007a0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007996:	695b      	ldr	r3, [r3, #20]
 8007998:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800799c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80079a0:	687a      	ldr	r2, [r7, #4]
 80079a2:	6892      	ldr	r2, [r2, #8]
 80079a4:	0211      	lsls	r1, r2, #8
 80079a6:	687a      	ldr	r2, [r7, #4]
 80079a8:	6912      	ldr	r2, [r2, #16]
 80079aa:	0852      	lsrs	r2, r2, #1
 80079ac:	3a01      	subs	r2, #1
 80079ae:	0652      	lsls	r2, r2, #25
 80079b0:	430a      	orrs	r2, r1
 80079b2:	4916      	ldr	r1, [pc, #88]	@ (8007a0c <RCCEx_PLLSAI2_Config+0x1b8>)
 80079b4:	4313      	orrs	r3, r2
 80079b6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80079b8:	4b14      	ldr	r3, [pc, #80]	@ (8007a0c <RCCEx_PLLSAI2_Config+0x1b8>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a13      	ldr	r2, [pc, #76]	@ (8007a0c <RCCEx_PLLSAI2_Config+0x1b8>)
 80079be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80079c2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079c4:	f7fc ff28 	bl	8004818 <HAL_GetTick>
 80079c8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80079ca:	e009      	b.n	80079e0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80079cc:	f7fc ff24 	bl	8004818 <HAL_GetTick>
 80079d0:	4602      	mov	r2, r0
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	1ad3      	subs	r3, r2, r3
 80079d6:	2b02      	cmp	r3, #2
 80079d8:	d902      	bls.n	80079e0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80079da:	2303      	movs	r3, #3
 80079dc:	73fb      	strb	r3, [r7, #15]
          break;
 80079de:	e005      	b.n	80079ec <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80079e0:	4b0a      	ldr	r3, [pc, #40]	@ (8007a0c <RCCEx_PLLSAI2_Config+0x1b8>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d0ef      	beq.n	80079cc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80079ec:	7bfb      	ldrb	r3, [r7, #15]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d106      	bne.n	8007a00 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80079f2:	4b06      	ldr	r3, [pc, #24]	@ (8007a0c <RCCEx_PLLSAI2_Config+0x1b8>)
 80079f4:	695a      	ldr	r2, [r3, #20]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	695b      	ldr	r3, [r3, #20]
 80079fa:	4904      	ldr	r1, [pc, #16]	@ (8007a0c <RCCEx_PLLSAI2_Config+0x1b8>)
 80079fc:	4313      	orrs	r3, r2
 80079fe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	3710      	adds	r7, #16
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}
 8007a0a:	bf00      	nop
 8007a0c:	40021000 	.word	0x40021000

08007a10 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b084      	sub	sp, #16
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d101      	bne.n	8007a22 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007a1e:	2301      	movs	r3, #1
 8007a20:	e095      	b.n	8007b4e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d108      	bne.n	8007a3c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007a32:	d009      	beq.n	8007a48 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2200      	movs	r2, #0
 8007a38:	61da      	str	r2, [r3, #28]
 8007a3a:	e005      	b.n	8007a48 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2200      	movs	r2, #0
 8007a46:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007a54:	b2db      	uxtb	r3, r3
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d106      	bne.n	8007a68 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f000 f877 	bl	8007b56 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2202      	movs	r2, #2
 8007a6c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	681a      	ldr	r2, [r3, #0]
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007a7e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	68db      	ldr	r3, [r3, #12]
 8007a84:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007a88:	d902      	bls.n	8007a90 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	60fb      	str	r3, [r7, #12]
 8007a8e:	e002      	b.n	8007a96 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007a90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007a94:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	68db      	ldr	r3, [r3, #12]
 8007a9a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007a9e:	d007      	beq.n	8007ab0 <HAL_SPI_Init+0xa0>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	68db      	ldr	r3, [r3, #12]
 8007aa4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007aa8:	d002      	beq.n	8007ab0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2200      	movs	r2, #0
 8007aae:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	689b      	ldr	r3, [r3, #8]
 8007abc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007ac0:	431a      	orrs	r2, r3
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	691b      	ldr	r3, [r3, #16]
 8007ac6:	f003 0302 	and.w	r3, r3, #2
 8007aca:	431a      	orrs	r2, r3
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	695b      	ldr	r3, [r3, #20]
 8007ad0:	f003 0301 	and.w	r3, r3, #1
 8007ad4:	431a      	orrs	r2, r3
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	699b      	ldr	r3, [r3, #24]
 8007ada:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007ade:	431a      	orrs	r2, r3
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	69db      	ldr	r3, [r3, #28]
 8007ae4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007ae8:	431a      	orrs	r2, r3
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6a1b      	ldr	r3, [r3, #32]
 8007aee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007af2:	ea42 0103 	orr.w	r1, r2, r3
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007afa:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	430a      	orrs	r2, r1
 8007b04:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	699b      	ldr	r3, [r3, #24]
 8007b0a:	0c1b      	lsrs	r3, r3, #16
 8007b0c:	f003 0204 	and.w	r2, r3, #4
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b14:	f003 0310 	and.w	r3, r3, #16
 8007b18:	431a      	orrs	r2, r3
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b1e:	f003 0308 	and.w	r3, r3, #8
 8007b22:	431a      	orrs	r2, r3
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	68db      	ldr	r3, [r3, #12]
 8007b28:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007b2c:	ea42 0103 	orr.w	r1, r2, r3
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	430a      	orrs	r2, r1
 8007b3c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2200      	movs	r2, #0
 8007b42:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2201      	movs	r2, #1
 8007b48:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8007b4c:	2300      	movs	r3, #0
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3710      	adds	r7, #16
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}

08007b56 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8007b56:	b480      	push	{r7}
 8007b58:	b083      	sub	sp, #12
 8007b5a:	af00      	add	r7, sp, #0
 8007b5c:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8007b5e:	bf00      	nop
 8007b60:	370c      	adds	r7, #12
 8007b62:	46bd      	mov	sp, r7
 8007b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b68:	4770      	bx	lr

08007b6a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007b6a:	b580      	push	{r7, lr}
 8007b6c:	b08a      	sub	sp, #40	@ 0x28
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	60f8      	str	r0, [r7, #12]
 8007b72:	60b9      	str	r1, [r7, #8]
 8007b74:	607a      	str	r2, [r7, #4]
 8007b76:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007b78:	2301      	movs	r3, #1
 8007b7a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007b7c:	f7fc fe4c 	bl	8004818 <HAL_GetTick>
 8007b80:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007b88:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007b90:	887b      	ldrh	r3, [r7, #2]
 8007b92:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8007b94:	887b      	ldrh	r3, [r7, #2]
 8007b96:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007b98:	7ffb      	ldrb	r3, [r7, #31]
 8007b9a:	2b01      	cmp	r3, #1
 8007b9c:	d00c      	beq.n	8007bb8 <HAL_SPI_TransmitReceive+0x4e>
 8007b9e:	69bb      	ldr	r3, [r7, #24]
 8007ba0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007ba4:	d106      	bne.n	8007bb4 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	689b      	ldr	r3, [r3, #8]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d102      	bne.n	8007bb4 <HAL_SPI_TransmitReceive+0x4a>
 8007bae:	7ffb      	ldrb	r3, [r7, #31]
 8007bb0:	2b04      	cmp	r3, #4
 8007bb2:	d001      	beq.n	8007bb8 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8007bb4:	2302      	movs	r3, #2
 8007bb6:	e1f3      	b.n	8007fa0 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d005      	beq.n	8007bca <HAL_SPI_TransmitReceive+0x60>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d002      	beq.n	8007bca <HAL_SPI_TransmitReceive+0x60>
 8007bc4:	887b      	ldrh	r3, [r7, #2]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d101      	bne.n	8007bce <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8007bca:	2301      	movs	r3, #1
 8007bcc:	e1e8      	b.n	8007fa0 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	d101      	bne.n	8007bdc <HAL_SPI_TransmitReceive+0x72>
 8007bd8:	2302      	movs	r3, #2
 8007bda:	e1e1      	b.n	8007fa0 <HAL_SPI_TransmitReceive+0x436>
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2201      	movs	r2, #1
 8007be0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007bea:	b2db      	uxtb	r3, r3
 8007bec:	2b04      	cmp	r3, #4
 8007bee:	d003      	beq.n	8007bf8 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	2205      	movs	r2, #5
 8007bf4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	687a      	ldr	r2, [r7, #4]
 8007c02:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	887a      	ldrh	r2, [r7, #2]
 8007c08:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	887a      	ldrh	r2, [r7, #2]
 8007c10:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	68ba      	ldr	r2, [r7, #8]
 8007c18:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	887a      	ldrh	r2, [r7, #2]
 8007c1e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	887a      	ldrh	r2, [r7, #2]
 8007c24:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	68db      	ldr	r3, [r3, #12]
 8007c36:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007c3a:	d802      	bhi.n	8007c42 <HAL_SPI_TransmitReceive+0xd8>
 8007c3c:	8abb      	ldrh	r3, [r7, #20]
 8007c3e:	2b01      	cmp	r3, #1
 8007c40:	d908      	bls.n	8007c54 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	685a      	ldr	r2, [r3, #4]
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007c50:	605a      	str	r2, [r3, #4]
 8007c52:	e007      	b.n	8007c64 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	685a      	ldr	r2, [r3, #4]
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007c62:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c6e:	2b40      	cmp	r3, #64	@ 0x40
 8007c70:	d007      	beq.n	8007c82 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	681a      	ldr	r2, [r3, #0]
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007c80:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	68db      	ldr	r3, [r3, #12]
 8007c86:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007c8a:	f240 8083 	bls.w	8007d94 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d002      	beq.n	8007c9c <HAL_SPI_TransmitReceive+0x132>
 8007c96:	8afb      	ldrh	r3, [r7, #22]
 8007c98:	2b01      	cmp	r3, #1
 8007c9a:	d16f      	bne.n	8007d7c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ca0:	881a      	ldrh	r2, [r3, #0]
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cac:	1c9a      	adds	r2, r3, #2
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007cb6:	b29b      	uxth	r3, r3
 8007cb8:	3b01      	subs	r3, #1
 8007cba:	b29a      	uxth	r2, r3
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007cc0:	e05c      	b.n	8007d7c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	689b      	ldr	r3, [r3, #8]
 8007cc8:	f003 0302 	and.w	r3, r3, #2
 8007ccc:	2b02      	cmp	r3, #2
 8007cce:	d11b      	bne.n	8007d08 <HAL_SPI_TransmitReceive+0x19e>
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007cd4:	b29b      	uxth	r3, r3
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d016      	beq.n	8007d08 <HAL_SPI_TransmitReceive+0x19e>
 8007cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	d113      	bne.n	8007d08 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ce4:	881a      	ldrh	r2, [r3, #0]
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cf0:	1c9a      	adds	r2, r3, #2
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007cfa:	b29b      	uxth	r3, r3
 8007cfc:	3b01      	subs	r3, #1
 8007cfe:	b29a      	uxth	r2, r3
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007d04:	2300      	movs	r3, #0
 8007d06:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	689b      	ldr	r3, [r3, #8]
 8007d0e:	f003 0301 	and.w	r3, r3, #1
 8007d12:	2b01      	cmp	r3, #1
 8007d14:	d11c      	bne.n	8007d50 <HAL_SPI_TransmitReceive+0x1e6>
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d016      	beq.n	8007d50 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	68da      	ldr	r2, [r3, #12]
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d2c:	b292      	uxth	r2, r2
 8007d2e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d34:	1c9a      	adds	r2, r3, #2
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007d40:	b29b      	uxth	r3, r3
 8007d42:	3b01      	subs	r3, #1
 8007d44:	b29a      	uxth	r2, r3
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007d50:	f7fc fd62 	bl	8004818 <HAL_GetTick>
 8007d54:	4602      	mov	r2, r0
 8007d56:	6a3b      	ldr	r3, [r7, #32]
 8007d58:	1ad3      	subs	r3, r2, r3
 8007d5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	d80d      	bhi.n	8007d7c <HAL_SPI_TransmitReceive+0x212>
 8007d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d66:	d009      	beq.n	8007d7c <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	2200      	movs	r2, #0
 8007d74:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8007d78:	2303      	movs	r3, #3
 8007d7a:	e111      	b.n	8007fa0 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d80:	b29b      	uxth	r3, r3
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d19d      	bne.n	8007cc2 <HAL_SPI_TransmitReceive+0x158>
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007d8c:	b29b      	uxth	r3, r3
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d197      	bne.n	8007cc2 <HAL_SPI_TransmitReceive+0x158>
 8007d92:	e0e5      	b.n	8007f60 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d003      	beq.n	8007da4 <HAL_SPI_TransmitReceive+0x23a>
 8007d9c:	8afb      	ldrh	r3, [r7, #22]
 8007d9e:	2b01      	cmp	r3, #1
 8007da0:	f040 80d1 	bne.w	8007f46 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007da8:	b29b      	uxth	r3, r3
 8007daa:	2b01      	cmp	r3, #1
 8007dac:	d912      	bls.n	8007dd4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007db2:	881a      	ldrh	r2, [r3, #0]
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dbe:	1c9a      	adds	r2, r3, #2
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007dc8:	b29b      	uxth	r3, r3
 8007dca:	3b02      	subs	r3, #2
 8007dcc:	b29a      	uxth	r2, r3
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007dd2:	e0b8      	b.n	8007f46 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	330c      	adds	r3, #12
 8007dde:	7812      	ldrb	r2, [r2, #0]
 8007de0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007de6:	1c5a      	adds	r2, r3, #1
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007df0:	b29b      	uxth	r3, r3
 8007df2:	3b01      	subs	r3, #1
 8007df4:	b29a      	uxth	r2, r3
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007dfa:	e0a4      	b.n	8007f46 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	689b      	ldr	r3, [r3, #8]
 8007e02:	f003 0302 	and.w	r3, r3, #2
 8007e06:	2b02      	cmp	r3, #2
 8007e08:	d134      	bne.n	8007e74 <HAL_SPI_TransmitReceive+0x30a>
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d02f      	beq.n	8007e74 <HAL_SPI_TransmitReceive+0x30a>
 8007e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e16:	2b01      	cmp	r3, #1
 8007e18:	d12c      	bne.n	8007e74 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e1e:	b29b      	uxth	r3, r3
 8007e20:	2b01      	cmp	r3, #1
 8007e22:	d912      	bls.n	8007e4a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e28:	881a      	ldrh	r2, [r3, #0]
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e34:	1c9a      	adds	r2, r3, #2
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e3e:	b29b      	uxth	r3, r3
 8007e40:	3b02      	subs	r3, #2
 8007e42:	b29a      	uxth	r2, r3
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007e48:	e012      	b.n	8007e70 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	330c      	adds	r3, #12
 8007e54:	7812      	ldrb	r2, [r2, #0]
 8007e56:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e5c:	1c5a      	adds	r2, r3, #1
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e66:	b29b      	uxth	r3, r3
 8007e68:	3b01      	subs	r3, #1
 8007e6a:	b29a      	uxth	r2, r3
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007e70:	2300      	movs	r3, #0
 8007e72:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	689b      	ldr	r3, [r3, #8]
 8007e7a:	f003 0301 	and.w	r3, r3, #1
 8007e7e:	2b01      	cmp	r3, #1
 8007e80:	d148      	bne.n	8007f14 <HAL_SPI_TransmitReceive+0x3aa>
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007e88:	b29b      	uxth	r3, r3
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d042      	beq.n	8007f14 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007e94:	b29b      	uxth	r3, r3
 8007e96:	2b01      	cmp	r3, #1
 8007e98:	d923      	bls.n	8007ee2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	68da      	ldr	r2, [r3, #12]
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ea4:	b292      	uxth	r2, r2
 8007ea6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eac:	1c9a      	adds	r2, r3, #2
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007eb8:	b29b      	uxth	r3, r3
 8007eba:	3b02      	subs	r3, #2
 8007ebc:	b29a      	uxth	r2, r3
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007eca:	b29b      	uxth	r3, r3
 8007ecc:	2b01      	cmp	r3, #1
 8007ece:	d81f      	bhi.n	8007f10 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	685a      	ldr	r2, [r3, #4]
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007ede:	605a      	str	r2, [r3, #4]
 8007ee0:	e016      	b.n	8007f10 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f103 020c 	add.w	r2, r3, #12
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eee:	7812      	ldrb	r2, [r2, #0]
 8007ef0:	b2d2      	uxtb	r2, r2
 8007ef2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ef8:	1c5a      	adds	r2, r3, #1
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	3b01      	subs	r3, #1
 8007f08:	b29a      	uxth	r2, r3
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007f10:	2301      	movs	r3, #1
 8007f12:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007f14:	f7fc fc80 	bl	8004818 <HAL_GetTick>
 8007f18:	4602      	mov	r2, r0
 8007f1a:	6a3b      	ldr	r3, [r7, #32]
 8007f1c:	1ad3      	subs	r3, r2, r3
 8007f1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f20:	429a      	cmp	r2, r3
 8007f22:	d803      	bhi.n	8007f2c <HAL_SPI_TransmitReceive+0x3c2>
 8007f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f2a:	d102      	bne.n	8007f32 <HAL_SPI_TransmitReceive+0x3c8>
 8007f2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d109      	bne.n	8007f46 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2201      	movs	r2, #1
 8007f36:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8007f42:	2303      	movs	r3, #3
 8007f44:	e02c      	b.n	8007fa0 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007f4a:	b29b      	uxth	r3, r3
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	f47f af55 	bne.w	8007dfc <HAL_SPI_TransmitReceive+0x292>
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007f58:	b29b      	uxth	r3, r3
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	f47f af4e 	bne.w	8007dfc <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007f60:	6a3a      	ldr	r2, [r7, #32]
 8007f62:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007f64:	68f8      	ldr	r0, [r7, #12]
 8007f66:	f000 f94b 	bl	8008200 <SPI_EndRxTxTransaction>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d008      	beq.n	8007f82 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	2220      	movs	r2, #32
 8007f74:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8007f7e:	2301      	movs	r3, #1
 8007f80:	e00e      	b.n	8007fa0 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	2201      	movs	r2, #1
 8007f86:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d001      	beq.n	8007f9e <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	e000      	b.n	8007fa0 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8007f9e:	2300      	movs	r3, #0
  }
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	3728      	adds	r7, #40	@ 0x28
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}

08007fa8 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b083      	sub	sp, #12
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007fb6:	b2db      	uxtb	r3, r3
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	370c      	adds	r7, #12
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc2:	4770      	bx	lr

08007fc4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b088      	sub	sp, #32
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	60f8      	str	r0, [r7, #12]
 8007fcc:	60b9      	str	r1, [r7, #8]
 8007fce:	603b      	str	r3, [r7, #0]
 8007fd0:	4613      	mov	r3, r2
 8007fd2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007fd4:	f7fc fc20 	bl	8004818 <HAL_GetTick>
 8007fd8:	4602      	mov	r2, r0
 8007fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fdc:	1a9b      	subs	r3, r3, r2
 8007fde:	683a      	ldr	r2, [r7, #0]
 8007fe0:	4413      	add	r3, r2
 8007fe2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007fe4:	f7fc fc18 	bl	8004818 <HAL_GetTick>
 8007fe8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007fea:	4b39      	ldr	r3, [pc, #228]	@ (80080d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	015b      	lsls	r3, r3, #5
 8007ff0:	0d1b      	lsrs	r3, r3, #20
 8007ff2:	69fa      	ldr	r2, [r7, #28]
 8007ff4:	fb02 f303 	mul.w	r3, r2, r3
 8007ff8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007ffa:	e054      	b.n	80080a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008002:	d050      	beq.n	80080a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008004:	f7fc fc08 	bl	8004818 <HAL_GetTick>
 8008008:	4602      	mov	r2, r0
 800800a:	69bb      	ldr	r3, [r7, #24]
 800800c:	1ad3      	subs	r3, r2, r3
 800800e:	69fa      	ldr	r2, [r7, #28]
 8008010:	429a      	cmp	r2, r3
 8008012:	d902      	bls.n	800801a <SPI_WaitFlagStateUntilTimeout+0x56>
 8008014:	69fb      	ldr	r3, [r7, #28]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d13d      	bne.n	8008096 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	685a      	ldr	r2, [r3, #4]
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008028:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	685b      	ldr	r3, [r3, #4]
 800802e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008032:	d111      	bne.n	8008058 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	689b      	ldr	r3, [r3, #8]
 8008038:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800803c:	d004      	beq.n	8008048 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	689b      	ldr	r3, [r3, #8]
 8008042:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008046:	d107      	bne.n	8008058 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	681a      	ldr	r2, [r3, #0]
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008056:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800805c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008060:	d10f      	bne.n	8008082 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	681a      	ldr	r2, [r3, #0]
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008070:	601a      	str	r2, [r3, #0]
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	681a      	ldr	r2, [r3, #0]
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008080:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	2201      	movs	r2, #1
 8008086:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2200      	movs	r2, #0
 800808e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8008092:	2303      	movs	r3, #3
 8008094:	e017      	b.n	80080c6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d101      	bne.n	80080a0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800809c:	2300      	movs	r3, #0
 800809e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	3b01      	subs	r3, #1
 80080a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	689a      	ldr	r2, [r3, #8]
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	4013      	ands	r3, r2
 80080b0:	68ba      	ldr	r2, [r7, #8]
 80080b2:	429a      	cmp	r2, r3
 80080b4:	bf0c      	ite	eq
 80080b6:	2301      	moveq	r3, #1
 80080b8:	2300      	movne	r3, #0
 80080ba:	b2db      	uxtb	r3, r3
 80080bc:	461a      	mov	r2, r3
 80080be:	79fb      	ldrb	r3, [r7, #7]
 80080c0:	429a      	cmp	r2, r3
 80080c2:	d19b      	bne.n	8007ffc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80080c4:	2300      	movs	r3, #0
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3720      	adds	r7, #32
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}
 80080ce:	bf00      	nop
 80080d0:	20000004 	.word	0x20000004

080080d4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b08a      	sub	sp, #40	@ 0x28
 80080d8:	af00      	add	r7, sp, #0
 80080da:	60f8      	str	r0, [r7, #12]
 80080dc:	60b9      	str	r1, [r7, #8]
 80080de:	607a      	str	r2, [r7, #4]
 80080e0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80080e2:	2300      	movs	r3, #0
 80080e4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80080e6:	f7fc fb97 	bl	8004818 <HAL_GetTick>
 80080ea:	4602      	mov	r2, r0
 80080ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ee:	1a9b      	subs	r3, r3, r2
 80080f0:	683a      	ldr	r2, [r7, #0]
 80080f2:	4413      	add	r3, r2
 80080f4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80080f6:	f7fc fb8f 	bl	8004818 <HAL_GetTick>
 80080fa:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	330c      	adds	r3, #12
 8008102:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008104:	4b3d      	ldr	r3, [pc, #244]	@ (80081fc <SPI_WaitFifoStateUntilTimeout+0x128>)
 8008106:	681a      	ldr	r2, [r3, #0]
 8008108:	4613      	mov	r3, r2
 800810a:	009b      	lsls	r3, r3, #2
 800810c:	4413      	add	r3, r2
 800810e:	00da      	lsls	r2, r3, #3
 8008110:	1ad3      	subs	r3, r2, r3
 8008112:	0d1b      	lsrs	r3, r3, #20
 8008114:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008116:	fb02 f303 	mul.w	r3, r2, r3
 800811a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800811c:	e060      	b.n	80081e0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008124:	d107      	bne.n	8008136 <SPI_WaitFifoStateUntilTimeout+0x62>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d104      	bne.n	8008136 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800812c:	69fb      	ldr	r3, [r7, #28]
 800812e:	781b      	ldrb	r3, [r3, #0]
 8008130:	b2db      	uxtb	r3, r3
 8008132:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008134:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800813c:	d050      	beq.n	80081e0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800813e:	f7fc fb6b 	bl	8004818 <HAL_GetTick>
 8008142:	4602      	mov	r2, r0
 8008144:	6a3b      	ldr	r3, [r7, #32]
 8008146:	1ad3      	subs	r3, r2, r3
 8008148:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800814a:	429a      	cmp	r2, r3
 800814c:	d902      	bls.n	8008154 <SPI_WaitFifoStateUntilTimeout+0x80>
 800814e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008150:	2b00      	cmp	r3, #0
 8008152:	d13d      	bne.n	80081d0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	685a      	ldr	r2, [r3, #4]
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008162:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800816c:	d111      	bne.n	8008192 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	689b      	ldr	r3, [r3, #8]
 8008172:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008176:	d004      	beq.n	8008182 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	689b      	ldr	r3, [r3, #8]
 800817c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008180:	d107      	bne.n	8008192 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	681a      	ldr	r2, [r3, #0]
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008190:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008196:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800819a:	d10f      	bne.n	80081bc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	681a      	ldr	r2, [r3, #0]
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80081aa:	601a      	str	r2, [r3, #0]
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	681a      	ldr	r2, [r3, #0]
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80081ba:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	2201      	movs	r2, #1
 80081c0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	2200      	movs	r2, #0
 80081c8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80081cc:	2303      	movs	r3, #3
 80081ce:	e010      	b.n	80081f2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80081d0:	69bb      	ldr	r3, [r7, #24]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d101      	bne.n	80081da <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80081d6:	2300      	movs	r3, #0
 80081d8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80081da:	69bb      	ldr	r3, [r7, #24]
 80081dc:	3b01      	subs	r3, #1
 80081de:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	689a      	ldr	r2, [r3, #8]
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	4013      	ands	r3, r2
 80081ea:	687a      	ldr	r2, [r7, #4]
 80081ec:	429a      	cmp	r2, r3
 80081ee:	d196      	bne.n	800811e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80081f0:	2300      	movs	r3, #0
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3728      	adds	r7, #40	@ 0x28
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}
 80081fa:	bf00      	nop
 80081fc:	20000004 	.word	0x20000004

08008200 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b086      	sub	sp, #24
 8008204:	af02      	add	r7, sp, #8
 8008206:	60f8      	str	r0, [r7, #12]
 8008208:	60b9      	str	r1, [r7, #8]
 800820a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	9300      	str	r3, [sp, #0]
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	2200      	movs	r2, #0
 8008214:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8008218:	68f8      	ldr	r0, [r7, #12]
 800821a:	f7ff ff5b 	bl	80080d4 <SPI_WaitFifoStateUntilTimeout>
 800821e:	4603      	mov	r3, r0
 8008220:	2b00      	cmp	r3, #0
 8008222:	d007      	beq.n	8008234 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008228:	f043 0220 	orr.w	r2, r3, #32
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008230:	2303      	movs	r3, #3
 8008232:	e027      	b.n	8008284 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	9300      	str	r3, [sp, #0]
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	2200      	movs	r2, #0
 800823c:	2180      	movs	r1, #128	@ 0x80
 800823e:	68f8      	ldr	r0, [r7, #12]
 8008240:	f7ff fec0 	bl	8007fc4 <SPI_WaitFlagStateUntilTimeout>
 8008244:	4603      	mov	r3, r0
 8008246:	2b00      	cmp	r3, #0
 8008248:	d007      	beq.n	800825a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800824e:	f043 0220 	orr.w	r2, r3, #32
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008256:	2303      	movs	r3, #3
 8008258:	e014      	b.n	8008284 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	9300      	str	r3, [sp, #0]
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	2200      	movs	r2, #0
 8008262:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8008266:	68f8      	ldr	r0, [r7, #12]
 8008268:	f7ff ff34 	bl	80080d4 <SPI_WaitFifoStateUntilTimeout>
 800826c:	4603      	mov	r3, r0
 800826e:	2b00      	cmp	r3, #0
 8008270:	d007      	beq.n	8008282 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008276:	f043 0220 	orr.w	r2, r3, #32
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800827e:	2303      	movs	r3, #3
 8008280:	e000      	b.n	8008284 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008282:	2300      	movs	r3, #0
}
 8008284:	4618      	mov	r0, r3
 8008286:	3710      	adds	r7, #16
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}

0800828c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b082      	sub	sp, #8
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d101      	bne.n	800829e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800829a:	2301      	movs	r3, #1
 800829c:	e040      	b.n	8008320 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d106      	bne.n	80082b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2200      	movs	r2, #0
 80082aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f7fb fa44 	bl	800373c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2224      	movs	r2, #36	@ 0x24
 80082b8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	681a      	ldr	r2, [r3, #0]
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f022 0201 	bic.w	r2, r2, #1
 80082c8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d002      	beq.n	80082d8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f000 fb6a 	bl	80089ac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f000 f8af 	bl	800843c <UART_SetConfig>
 80082de:	4603      	mov	r3, r0
 80082e0:	2b01      	cmp	r3, #1
 80082e2:	d101      	bne.n	80082e8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80082e4:	2301      	movs	r3, #1
 80082e6:	e01b      	b.n	8008320 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	685a      	ldr	r2, [r3, #4]
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80082f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	689a      	ldr	r2, [r3, #8]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008306:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	681a      	ldr	r2, [r3, #0]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f042 0201 	orr.w	r2, r2, #1
 8008316:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f000 fbe9 	bl	8008af0 <UART_CheckIdleState>
 800831e:	4603      	mov	r3, r0
}
 8008320:	4618      	mov	r0, r3
 8008322:	3708      	adds	r7, #8
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}

08008328 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b08a      	sub	sp, #40	@ 0x28
 800832c:	af02      	add	r7, sp, #8
 800832e:	60f8      	str	r0, [r7, #12]
 8008330:	60b9      	str	r1, [r7, #8]
 8008332:	603b      	str	r3, [r7, #0]
 8008334:	4613      	mov	r3, r2
 8008336:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800833c:	2b20      	cmp	r3, #32
 800833e:	d177      	bne.n	8008430 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d002      	beq.n	800834c <HAL_UART_Transmit+0x24>
 8008346:	88fb      	ldrh	r3, [r7, #6]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d101      	bne.n	8008350 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800834c:	2301      	movs	r3, #1
 800834e:	e070      	b.n	8008432 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	2200      	movs	r2, #0
 8008354:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	2221      	movs	r2, #33	@ 0x21
 800835c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800835e:	f7fc fa5b 	bl	8004818 <HAL_GetTick>
 8008362:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	88fa      	ldrh	r2, [r7, #6]
 8008368:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	88fa      	ldrh	r2, [r7, #6]
 8008370:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	689b      	ldr	r3, [r3, #8]
 8008378:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800837c:	d108      	bne.n	8008390 <HAL_UART_Transmit+0x68>
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	691b      	ldr	r3, [r3, #16]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d104      	bne.n	8008390 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8008386:	2300      	movs	r3, #0
 8008388:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	61bb      	str	r3, [r7, #24]
 800838e:	e003      	b.n	8008398 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008394:	2300      	movs	r3, #0
 8008396:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008398:	e02f      	b.n	80083fa <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	9300      	str	r3, [sp, #0]
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	2200      	movs	r2, #0
 80083a2:	2180      	movs	r1, #128	@ 0x80
 80083a4:	68f8      	ldr	r0, [r7, #12]
 80083a6:	f000 fc4b 	bl	8008c40 <UART_WaitOnFlagUntilTimeout>
 80083aa:	4603      	mov	r3, r0
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d004      	beq.n	80083ba <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2220      	movs	r2, #32
 80083b4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80083b6:	2303      	movs	r3, #3
 80083b8:	e03b      	b.n	8008432 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80083ba:	69fb      	ldr	r3, [r7, #28]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d10b      	bne.n	80083d8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80083c0:	69bb      	ldr	r3, [r7, #24]
 80083c2:	881a      	ldrh	r2, [r3, #0]
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80083cc:	b292      	uxth	r2, r2
 80083ce:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80083d0:	69bb      	ldr	r3, [r7, #24]
 80083d2:	3302      	adds	r3, #2
 80083d4:	61bb      	str	r3, [r7, #24]
 80083d6:	e007      	b.n	80083e8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80083d8:	69fb      	ldr	r3, [r7, #28]
 80083da:	781a      	ldrb	r2, [r3, #0]
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80083e2:	69fb      	ldr	r3, [r7, #28]
 80083e4:	3301      	adds	r3, #1
 80083e6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80083ee:	b29b      	uxth	r3, r3
 80083f0:	3b01      	subs	r3, #1
 80083f2:	b29a      	uxth	r2, r3
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008400:	b29b      	uxth	r3, r3
 8008402:	2b00      	cmp	r3, #0
 8008404:	d1c9      	bne.n	800839a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	9300      	str	r3, [sp, #0]
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	2200      	movs	r2, #0
 800840e:	2140      	movs	r1, #64	@ 0x40
 8008410:	68f8      	ldr	r0, [r7, #12]
 8008412:	f000 fc15 	bl	8008c40 <UART_WaitOnFlagUntilTimeout>
 8008416:	4603      	mov	r3, r0
 8008418:	2b00      	cmp	r3, #0
 800841a:	d004      	beq.n	8008426 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	2220      	movs	r2, #32
 8008420:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8008422:	2303      	movs	r3, #3
 8008424:	e005      	b.n	8008432 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	2220      	movs	r2, #32
 800842a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800842c:	2300      	movs	r3, #0
 800842e:	e000      	b.n	8008432 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8008430:	2302      	movs	r3, #2
  }
}
 8008432:	4618      	mov	r0, r3
 8008434:	3720      	adds	r7, #32
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}
	...

0800843c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800843c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008440:	b08a      	sub	sp, #40	@ 0x28
 8008442:	af00      	add	r7, sp, #0
 8008444:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008446:	2300      	movs	r3, #0
 8008448:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	689a      	ldr	r2, [r3, #8]
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	691b      	ldr	r3, [r3, #16]
 8008454:	431a      	orrs	r2, r3
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	695b      	ldr	r3, [r3, #20]
 800845a:	431a      	orrs	r2, r3
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	69db      	ldr	r3, [r3, #28]
 8008460:	4313      	orrs	r3, r2
 8008462:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	681a      	ldr	r2, [r3, #0]
 800846a:	4ba4      	ldr	r3, [pc, #656]	@ (80086fc <UART_SetConfig+0x2c0>)
 800846c:	4013      	ands	r3, r2
 800846e:	68fa      	ldr	r2, [r7, #12]
 8008470:	6812      	ldr	r2, [r2, #0]
 8008472:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008474:	430b      	orrs	r3, r1
 8008476:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	685b      	ldr	r3, [r3, #4]
 800847e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	68da      	ldr	r2, [r3, #12]
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	430a      	orrs	r2, r1
 800848c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	699b      	ldr	r3, [r3, #24]
 8008492:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4a99      	ldr	r2, [pc, #612]	@ (8008700 <UART_SetConfig+0x2c4>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d004      	beq.n	80084a8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	6a1b      	ldr	r3, [r3, #32]
 80084a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084a4:	4313      	orrs	r3, r2
 80084a6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	689b      	ldr	r3, [r3, #8]
 80084ae:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084b8:	430a      	orrs	r2, r1
 80084ba:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a90      	ldr	r2, [pc, #576]	@ (8008704 <UART_SetConfig+0x2c8>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d126      	bne.n	8008514 <UART_SetConfig+0xd8>
 80084c6:	4b90      	ldr	r3, [pc, #576]	@ (8008708 <UART_SetConfig+0x2cc>)
 80084c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084cc:	f003 0303 	and.w	r3, r3, #3
 80084d0:	2b03      	cmp	r3, #3
 80084d2:	d81b      	bhi.n	800850c <UART_SetConfig+0xd0>
 80084d4:	a201      	add	r2, pc, #4	@ (adr r2, 80084dc <UART_SetConfig+0xa0>)
 80084d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084da:	bf00      	nop
 80084dc:	080084ed 	.word	0x080084ed
 80084e0:	080084fd 	.word	0x080084fd
 80084e4:	080084f5 	.word	0x080084f5
 80084e8:	08008505 	.word	0x08008505
 80084ec:	2301      	movs	r3, #1
 80084ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80084f2:	e116      	b.n	8008722 <UART_SetConfig+0x2e6>
 80084f4:	2302      	movs	r3, #2
 80084f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80084fa:	e112      	b.n	8008722 <UART_SetConfig+0x2e6>
 80084fc:	2304      	movs	r3, #4
 80084fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008502:	e10e      	b.n	8008722 <UART_SetConfig+0x2e6>
 8008504:	2308      	movs	r3, #8
 8008506:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800850a:	e10a      	b.n	8008722 <UART_SetConfig+0x2e6>
 800850c:	2310      	movs	r3, #16
 800850e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008512:	e106      	b.n	8008722 <UART_SetConfig+0x2e6>
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	4a7c      	ldr	r2, [pc, #496]	@ (800870c <UART_SetConfig+0x2d0>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d138      	bne.n	8008590 <UART_SetConfig+0x154>
 800851e:	4b7a      	ldr	r3, [pc, #488]	@ (8008708 <UART_SetConfig+0x2cc>)
 8008520:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008524:	f003 030c 	and.w	r3, r3, #12
 8008528:	2b0c      	cmp	r3, #12
 800852a:	d82d      	bhi.n	8008588 <UART_SetConfig+0x14c>
 800852c:	a201      	add	r2, pc, #4	@ (adr r2, 8008534 <UART_SetConfig+0xf8>)
 800852e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008532:	bf00      	nop
 8008534:	08008569 	.word	0x08008569
 8008538:	08008589 	.word	0x08008589
 800853c:	08008589 	.word	0x08008589
 8008540:	08008589 	.word	0x08008589
 8008544:	08008579 	.word	0x08008579
 8008548:	08008589 	.word	0x08008589
 800854c:	08008589 	.word	0x08008589
 8008550:	08008589 	.word	0x08008589
 8008554:	08008571 	.word	0x08008571
 8008558:	08008589 	.word	0x08008589
 800855c:	08008589 	.word	0x08008589
 8008560:	08008589 	.word	0x08008589
 8008564:	08008581 	.word	0x08008581
 8008568:	2300      	movs	r3, #0
 800856a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800856e:	e0d8      	b.n	8008722 <UART_SetConfig+0x2e6>
 8008570:	2302      	movs	r3, #2
 8008572:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008576:	e0d4      	b.n	8008722 <UART_SetConfig+0x2e6>
 8008578:	2304      	movs	r3, #4
 800857a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800857e:	e0d0      	b.n	8008722 <UART_SetConfig+0x2e6>
 8008580:	2308      	movs	r3, #8
 8008582:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008586:	e0cc      	b.n	8008722 <UART_SetConfig+0x2e6>
 8008588:	2310      	movs	r3, #16
 800858a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800858e:	e0c8      	b.n	8008722 <UART_SetConfig+0x2e6>
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4a5e      	ldr	r2, [pc, #376]	@ (8008710 <UART_SetConfig+0x2d4>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d125      	bne.n	80085e6 <UART_SetConfig+0x1aa>
 800859a:	4b5b      	ldr	r3, [pc, #364]	@ (8008708 <UART_SetConfig+0x2cc>)
 800859c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085a0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80085a4:	2b30      	cmp	r3, #48	@ 0x30
 80085a6:	d016      	beq.n	80085d6 <UART_SetConfig+0x19a>
 80085a8:	2b30      	cmp	r3, #48	@ 0x30
 80085aa:	d818      	bhi.n	80085de <UART_SetConfig+0x1a2>
 80085ac:	2b20      	cmp	r3, #32
 80085ae:	d00a      	beq.n	80085c6 <UART_SetConfig+0x18a>
 80085b0:	2b20      	cmp	r3, #32
 80085b2:	d814      	bhi.n	80085de <UART_SetConfig+0x1a2>
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d002      	beq.n	80085be <UART_SetConfig+0x182>
 80085b8:	2b10      	cmp	r3, #16
 80085ba:	d008      	beq.n	80085ce <UART_SetConfig+0x192>
 80085bc:	e00f      	b.n	80085de <UART_SetConfig+0x1a2>
 80085be:	2300      	movs	r3, #0
 80085c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80085c4:	e0ad      	b.n	8008722 <UART_SetConfig+0x2e6>
 80085c6:	2302      	movs	r3, #2
 80085c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80085cc:	e0a9      	b.n	8008722 <UART_SetConfig+0x2e6>
 80085ce:	2304      	movs	r3, #4
 80085d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80085d4:	e0a5      	b.n	8008722 <UART_SetConfig+0x2e6>
 80085d6:	2308      	movs	r3, #8
 80085d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80085dc:	e0a1      	b.n	8008722 <UART_SetConfig+0x2e6>
 80085de:	2310      	movs	r3, #16
 80085e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80085e4:	e09d      	b.n	8008722 <UART_SetConfig+0x2e6>
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4a4a      	ldr	r2, [pc, #296]	@ (8008714 <UART_SetConfig+0x2d8>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d125      	bne.n	800863c <UART_SetConfig+0x200>
 80085f0:	4b45      	ldr	r3, [pc, #276]	@ (8008708 <UART_SetConfig+0x2cc>)
 80085f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085f6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80085fa:	2bc0      	cmp	r3, #192	@ 0xc0
 80085fc:	d016      	beq.n	800862c <UART_SetConfig+0x1f0>
 80085fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8008600:	d818      	bhi.n	8008634 <UART_SetConfig+0x1f8>
 8008602:	2b80      	cmp	r3, #128	@ 0x80
 8008604:	d00a      	beq.n	800861c <UART_SetConfig+0x1e0>
 8008606:	2b80      	cmp	r3, #128	@ 0x80
 8008608:	d814      	bhi.n	8008634 <UART_SetConfig+0x1f8>
 800860a:	2b00      	cmp	r3, #0
 800860c:	d002      	beq.n	8008614 <UART_SetConfig+0x1d8>
 800860e:	2b40      	cmp	r3, #64	@ 0x40
 8008610:	d008      	beq.n	8008624 <UART_SetConfig+0x1e8>
 8008612:	e00f      	b.n	8008634 <UART_SetConfig+0x1f8>
 8008614:	2300      	movs	r3, #0
 8008616:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800861a:	e082      	b.n	8008722 <UART_SetConfig+0x2e6>
 800861c:	2302      	movs	r3, #2
 800861e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008622:	e07e      	b.n	8008722 <UART_SetConfig+0x2e6>
 8008624:	2304      	movs	r3, #4
 8008626:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800862a:	e07a      	b.n	8008722 <UART_SetConfig+0x2e6>
 800862c:	2308      	movs	r3, #8
 800862e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008632:	e076      	b.n	8008722 <UART_SetConfig+0x2e6>
 8008634:	2310      	movs	r3, #16
 8008636:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800863a:	e072      	b.n	8008722 <UART_SetConfig+0x2e6>
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4a35      	ldr	r2, [pc, #212]	@ (8008718 <UART_SetConfig+0x2dc>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d12a      	bne.n	800869c <UART_SetConfig+0x260>
 8008646:	4b30      	ldr	r3, [pc, #192]	@ (8008708 <UART_SetConfig+0x2cc>)
 8008648:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800864c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008650:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008654:	d01a      	beq.n	800868c <UART_SetConfig+0x250>
 8008656:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800865a:	d81b      	bhi.n	8008694 <UART_SetConfig+0x258>
 800865c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008660:	d00c      	beq.n	800867c <UART_SetConfig+0x240>
 8008662:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008666:	d815      	bhi.n	8008694 <UART_SetConfig+0x258>
 8008668:	2b00      	cmp	r3, #0
 800866a:	d003      	beq.n	8008674 <UART_SetConfig+0x238>
 800866c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008670:	d008      	beq.n	8008684 <UART_SetConfig+0x248>
 8008672:	e00f      	b.n	8008694 <UART_SetConfig+0x258>
 8008674:	2300      	movs	r3, #0
 8008676:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800867a:	e052      	b.n	8008722 <UART_SetConfig+0x2e6>
 800867c:	2302      	movs	r3, #2
 800867e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008682:	e04e      	b.n	8008722 <UART_SetConfig+0x2e6>
 8008684:	2304      	movs	r3, #4
 8008686:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800868a:	e04a      	b.n	8008722 <UART_SetConfig+0x2e6>
 800868c:	2308      	movs	r3, #8
 800868e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008692:	e046      	b.n	8008722 <UART_SetConfig+0x2e6>
 8008694:	2310      	movs	r3, #16
 8008696:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800869a:	e042      	b.n	8008722 <UART_SetConfig+0x2e6>
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a17      	ldr	r2, [pc, #92]	@ (8008700 <UART_SetConfig+0x2c4>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d13a      	bne.n	800871c <UART_SetConfig+0x2e0>
 80086a6:	4b18      	ldr	r3, [pc, #96]	@ (8008708 <UART_SetConfig+0x2cc>)
 80086a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086ac:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80086b0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80086b4:	d01a      	beq.n	80086ec <UART_SetConfig+0x2b0>
 80086b6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80086ba:	d81b      	bhi.n	80086f4 <UART_SetConfig+0x2b8>
 80086bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80086c0:	d00c      	beq.n	80086dc <UART_SetConfig+0x2a0>
 80086c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80086c6:	d815      	bhi.n	80086f4 <UART_SetConfig+0x2b8>
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d003      	beq.n	80086d4 <UART_SetConfig+0x298>
 80086cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80086d0:	d008      	beq.n	80086e4 <UART_SetConfig+0x2a8>
 80086d2:	e00f      	b.n	80086f4 <UART_SetConfig+0x2b8>
 80086d4:	2300      	movs	r3, #0
 80086d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80086da:	e022      	b.n	8008722 <UART_SetConfig+0x2e6>
 80086dc:	2302      	movs	r3, #2
 80086de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80086e2:	e01e      	b.n	8008722 <UART_SetConfig+0x2e6>
 80086e4:	2304      	movs	r3, #4
 80086e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80086ea:	e01a      	b.n	8008722 <UART_SetConfig+0x2e6>
 80086ec:	2308      	movs	r3, #8
 80086ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80086f2:	e016      	b.n	8008722 <UART_SetConfig+0x2e6>
 80086f4:	2310      	movs	r3, #16
 80086f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80086fa:	e012      	b.n	8008722 <UART_SetConfig+0x2e6>
 80086fc:	efff69f3 	.word	0xefff69f3
 8008700:	40008000 	.word	0x40008000
 8008704:	40013800 	.word	0x40013800
 8008708:	40021000 	.word	0x40021000
 800870c:	40004400 	.word	0x40004400
 8008710:	40004800 	.word	0x40004800
 8008714:	40004c00 	.word	0x40004c00
 8008718:	40005000 	.word	0x40005000
 800871c:	2310      	movs	r3, #16
 800871e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	4a9f      	ldr	r2, [pc, #636]	@ (80089a4 <UART_SetConfig+0x568>)
 8008728:	4293      	cmp	r3, r2
 800872a:	d17a      	bne.n	8008822 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800872c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008730:	2b08      	cmp	r3, #8
 8008732:	d824      	bhi.n	800877e <UART_SetConfig+0x342>
 8008734:	a201      	add	r2, pc, #4	@ (adr r2, 800873c <UART_SetConfig+0x300>)
 8008736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800873a:	bf00      	nop
 800873c:	08008761 	.word	0x08008761
 8008740:	0800877f 	.word	0x0800877f
 8008744:	08008769 	.word	0x08008769
 8008748:	0800877f 	.word	0x0800877f
 800874c:	0800876f 	.word	0x0800876f
 8008750:	0800877f 	.word	0x0800877f
 8008754:	0800877f 	.word	0x0800877f
 8008758:	0800877f 	.word	0x0800877f
 800875c:	08008777 	.word	0x08008777
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008760:	f7fe fbfe 	bl	8006f60 <HAL_RCC_GetPCLK1Freq>
 8008764:	61f8      	str	r0, [r7, #28]
        break;
 8008766:	e010      	b.n	800878a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008768:	4b8f      	ldr	r3, [pc, #572]	@ (80089a8 <UART_SetConfig+0x56c>)
 800876a:	61fb      	str	r3, [r7, #28]
        break;
 800876c:	e00d      	b.n	800878a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800876e:	f7fe fb5f 	bl	8006e30 <HAL_RCC_GetSysClockFreq>
 8008772:	61f8      	str	r0, [r7, #28]
        break;
 8008774:	e009      	b.n	800878a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008776:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800877a:	61fb      	str	r3, [r7, #28]
        break;
 800877c:	e005      	b.n	800878a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800877e:	2300      	movs	r3, #0
 8008780:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008782:	2301      	movs	r3, #1
 8008784:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008788:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800878a:	69fb      	ldr	r3, [r7, #28]
 800878c:	2b00      	cmp	r3, #0
 800878e:	f000 80fb 	beq.w	8008988 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	685a      	ldr	r2, [r3, #4]
 8008796:	4613      	mov	r3, r2
 8008798:	005b      	lsls	r3, r3, #1
 800879a:	4413      	add	r3, r2
 800879c:	69fa      	ldr	r2, [r7, #28]
 800879e:	429a      	cmp	r2, r3
 80087a0:	d305      	bcc.n	80087ae <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	685b      	ldr	r3, [r3, #4]
 80087a6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80087a8:	69fa      	ldr	r2, [r7, #28]
 80087aa:	429a      	cmp	r2, r3
 80087ac:	d903      	bls.n	80087b6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80087ae:	2301      	movs	r3, #1
 80087b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80087b4:	e0e8      	b.n	8008988 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80087b6:	69fb      	ldr	r3, [r7, #28]
 80087b8:	2200      	movs	r2, #0
 80087ba:	461c      	mov	r4, r3
 80087bc:	4615      	mov	r5, r2
 80087be:	f04f 0200 	mov.w	r2, #0
 80087c2:	f04f 0300 	mov.w	r3, #0
 80087c6:	022b      	lsls	r3, r5, #8
 80087c8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80087cc:	0222      	lsls	r2, r4, #8
 80087ce:	68f9      	ldr	r1, [r7, #12]
 80087d0:	6849      	ldr	r1, [r1, #4]
 80087d2:	0849      	lsrs	r1, r1, #1
 80087d4:	2000      	movs	r0, #0
 80087d6:	4688      	mov	r8, r1
 80087d8:	4681      	mov	r9, r0
 80087da:	eb12 0a08 	adds.w	sl, r2, r8
 80087de:	eb43 0b09 	adc.w	fp, r3, r9
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	685b      	ldr	r3, [r3, #4]
 80087e6:	2200      	movs	r2, #0
 80087e8:	603b      	str	r3, [r7, #0]
 80087ea:	607a      	str	r2, [r7, #4]
 80087ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087f0:	4650      	mov	r0, sl
 80087f2:	4659      	mov	r1, fp
 80087f4:	f7f7 ff50 	bl	8000698 <__aeabi_uldivmod>
 80087f8:	4602      	mov	r2, r0
 80087fa:	460b      	mov	r3, r1
 80087fc:	4613      	mov	r3, r2
 80087fe:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008800:	69bb      	ldr	r3, [r7, #24]
 8008802:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008806:	d308      	bcc.n	800881a <UART_SetConfig+0x3de>
 8008808:	69bb      	ldr	r3, [r7, #24]
 800880a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800880e:	d204      	bcs.n	800881a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	69ba      	ldr	r2, [r7, #24]
 8008816:	60da      	str	r2, [r3, #12]
 8008818:	e0b6      	b.n	8008988 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800881a:	2301      	movs	r3, #1
 800881c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008820:	e0b2      	b.n	8008988 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	69db      	ldr	r3, [r3, #28]
 8008826:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800882a:	d15e      	bne.n	80088ea <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800882c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008830:	2b08      	cmp	r3, #8
 8008832:	d828      	bhi.n	8008886 <UART_SetConfig+0x44a>
 8008834:	a201      	add	r2, pc, #4	@ (adr r2, 800883c <UART_SetConfig+0x400>)
 8008836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800883a:	bf00      	nop
 800883c:	08008861 	.word	0x08008861
 8008840:	08008869 	.word	0x08008869
 8008844:	08008871 	.word	0x08008871
 8008848:	08008887 	.word	0x08008887
 800884c:	08008877 	.word	0x08008877
 8008850:	08008887 	.word	0x08008887
 8008854:	08008887 	.word	0x08008887
 8008858:	08008887 	.word	0x08008887
 800885c:	0800887f 	.word	0x0800887f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008860:	f7fe fb7e 	bl	8006f60 <HAL_RCC_GetPCLK1Freq>
 8008864:	61f8      	str	r0, [r7, #28]
        break;
 8008866:	e014      	b.n	8008892 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008868:	f7fe fb90 	bl	8006f8c <HAL_RCC_GetPCLK2Freq>
 800886c:	61f8      	str	r0, [r7, #28]
        break;
 800886e:	e010      	b.n	8008892 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008870:	4b4d      	ldr	r3, [pc, #308]	@ (80089a8 <UART_SetConfig+0x56c>)
 8008872:	61fb      	str	r3, [r7, #28]
        break;
 8008874:	e00d      	b.n	8008892 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008876:	f7fe fadb 	bl	8006e30 <HAL_RCC_GetSysClockFreq>
 800887a:	61f8      	str	r0, [r7, #28]
        break;
 800887c:	e009      	b.n	8008892 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800887e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008882:	61fb      	str	r3, [r7, #28]
        break;
 8008884:	e005      	b.n	8008892 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8008886:	2300      	movs	r3, #0
 8008888:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800888a:	2301      	movs	r3, #1
 800888c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008890:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008892:	69fb      	ldr	r3, [r7, #28]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d077      	beq.n	8008988 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008898:	69fb      	ldr	r3, [r7, #28]
 800889a:	005a      	lsls	r2, r3, #1
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	685b      	ldr	r3, [r3, #4]
 80088a0:	085b      	lsrs	r3, r3, #1
 80088a2:	441a      	add	r2, r3
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80088ac:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80088ae:	69bb      	ldr	r3, [r7, #24]
 80088b0:	2b0f      	cmp	r3, #15
 80088b2:	d916      	bls.n	80088e2 <UART_SetConfig+0x4a6>
 80088b4:	69bb      	ldr	r3, [r7, #24]
 80088b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80088ba:	d212      	bcs.n	80088e2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80088bc:	69bb      	ldr	r3, [r7, #24]
 80088be:	b29b      	uxth	r3, r3
 80088c0:	f023 030f 	bic.w	r3, r3, #15
 80088c4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80088c6:	69bb      	ldr	r3, [r7, #24]
 80088c8:	085b      	lsrs	r3, r3, #1
 80088ca:	b29b      	uxth	r3, r3
 80088cc:	f003 0307 	and.w	r3, r3, #7
 80088d0:	b29a      	uxth	r2, r3
 80088d2:	8afb      	ldrh	r3, [r7, #22]
 80088d4:	4313      	orrs	r3, r2
 80088d6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	8afa      	ldrh	r2, [r7, #22]
 80088de:	60da      	str	r2, [r3, #12]
 80088e0:	e052      	b.n	8008988 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80088e2:	2301      	movs	r3, #1
 80088e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80088e8:	e04e      	b.n	8008988 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80088ea:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80088ee:	2b08      	cmp	r3, #8
 80088f0:	d827      	bhi.n	8008942 <UART_SetConfig+0x506>
 80088f2:	a201      	add	r2, pc, #4	@ (adr r2, 80088f8 <UART_SetConfig+0x4bc>)
 80088f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088f8:	0800891d 	.word	0x0800891d
 80088fc:	08008925 	.word	0x08008925
 8008900:	0800892d 	.word	0x0800892d
 8008904:	08008943 	.word	0x08008943
 8008908:	08008933 	.word	0x08008933
 800890c:	08008943 	.word	0x08008943
 8008910:	08008943 	.word	0x08008943
 8008914:	08008943 	.word	0x08008943
 8008918:	0800893b 	.word	0x0800893b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800891c:	f7fe fb20 	bl	8006f60 <HAL_RCC_GetPCLK1Freq>
 8008920:	61f8      	str	r0, [r7, #28]
        break;
 8008922:	e014      	b.n	800894e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008924:	f7fe fb32 	bl	8006f8c <HAL_RCC_GetPCLK2Freq>
 8008928:	61f8      	str	r0, [r7, #28]
        break;
 800892a:	e010      	b.n	800894e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800892c:	4b1e      	ldr	r3, [pc, #120]	@ (80089a8 <UART_SetConfig+0x56c>)
 800892e:	61fb      	str	r3, [r7, #28]
        break;
 8008930:	e00d      	b.n	800894e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008932:	f7fe fa7d 	bl	8006e30 <HAL_RCC_GetSysClockFreq>
 8008936:	61f8      	str	r0, [r7, #28]
        break;
 8008938:	e009      	b.n	800894e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800893a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800893e:	61fb      	str	r3, [r7, #28]
        break;
 8008940:	e005      	b.n	800894e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8008942:	2300      	movs	r3, #0
 8008944:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008946:	2301      	movs	r3, #1
 8008948:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800894c:	bf00      	nop
    }

    if (pclk != 0U)
 800894e:	69fb      	ldr	r3, [r7, #28]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d019      	beq.n	8008988 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	685b      	ldr	r3, [r3, #4]
 8008958:	085a      	lsrs	r2, r3, #1
 800895a:	69fb      	ldr	r3, [r7, #28]
 800895c:	441a      	add	r2, r3
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	685b      	ldr	r3, [r3, #4]
 8008962:	fbb2 f3f3 	udiv	r3, r2, r3
 8008966:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008968:	69bb      	ldr	r3, [r7, #24]
 800896a:	2b0f      	cmp	r3, #15
 800896c:	d909      	bls.n	8008982 <UART_SetConfig+0x546>
 800896e:	69bb      	ldr	r3, [r7, #24]
 8008970:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008974:	d205      	bcs.n	8008982 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008976:	69bb      	ldr	r3, [r7, #24]
 8008978:	b29a      	uxth	r2, r3
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	60da      	str	r2, [r3, #12]
 8008980:	e002      	b.n	8008988 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008982:	2301      	movs	r3, #1
 8008984:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	2200      	movs	r2, #0
 800898c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	2200      	movs	r2, #0
 8008992:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8008994:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8008998:	4618      	mov	r0, r3
 800899a:	3728      	adds	r7, #40	@ 0x28
 800899c:	46bd      	mov	sp, r7
 800899e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80089a2:	bf00      	nop
 80089a4:	40008000 	.word	0x40008000
 80089a8:	00f42400 	.word	0x00f42400

080089ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80089ac:	b480      	push	{r7}
 80089ae:	b083      	sub	sp, #12
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089b8:	f003 0308 	and.w	r3, r3, #8
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d00a      	beq.n	80089d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	685b      	ldr	r3, [r3, #4]
 80089c6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	430a      	orrs	r2, r1
 80089d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089da:	f003 0301 	and.w	r3, r3, #1
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d00a      	beq.n	80089f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	685b      	ldr	r3, [r3, #4]
 80089e8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	430a      	orrs	r2, r1
 80089f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089fc:	f003 0302 	and.w	r3, r3, #2
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d00a      	beq.n	8008a1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	685b      	ldr	r3, [r3, #4]
 8008a0a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	430a      	orrs	r2, r1
 8008a18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a1e:	f003 0304 	and.w	r3, r3, #4
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d00a      	beq.n	8008a3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	685b      	ldr	r3, [r3, #4]
 8008a2c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	430a      	orrs	r2, r1
 8008a3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a40:	f003 0310 	and.w	r3, r3, #16
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d00a      	beq.n	8008a5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	689b      	ldr	r3, [r3, #8]
 8008a4e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	430a      	orrs	r2, r1
 8008a5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a62:	f003 0320 	and.w	r3, r3, #32
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d00a      	beq.n	8008a80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	689b      	ldr	r3, [r3, #8]
 8008a70:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	430a      	orrs	r2, r1
 8008a7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d01a      	beq.n	8008ac2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	685b      	ldr	r3, [r3, #4]
 8008a92:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	430a      	orrs	r2, r1
 8008aa0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008aa6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008aaa:	d10a      	bne.n	8008ac2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	685b      	ldr	r3, [r3, #4]
 8008ab2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	430a      	orrs	r2, r1
 8008ac0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ac6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d00a      	beq.n	8008ae4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	685b      	ldr	r3, [r3, #4]
 8008ad4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	430a      	orrs	r2, r1
 8008ae2:	605a      	str	r2, [r3, #4]
  }
}
 8008ae4:	bf00      	nop
 8008ae6:	370c      	adds	r7, #12
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aee:	4770      	bx	lr

08008af0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b098      	sub	sp, #96	@ 0x60
 8008af4:	af02      	add	r7, sp, #8
 8008af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2200      	movs	r2, #0
 8008afc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008b00:	f7fb fe8a 	bl	8004818 <HAL_GetTick>
 8008b04:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f003 0308 	and.w	r3, r3, #8
 8008b10:	2b08      	cmp	r3, #8
 8008b12:	d12e      	bne.n	8008b72 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008b14:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008b18:	9300      	str	r3, [sp, #0]
 8008b1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f000 f88c 	bl	8008c40 <UART_WaitOnFlagUntilTimeout>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d021      	beq.n	8008b72 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b36:	e853 3f00 	ldrex	r3, [r3]
 8008b3a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008b3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b3e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008b42:	653b      	str	r3, [r7, #80]	@ 0x50
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	461a      	mov	r2, r3
 8008b4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008b4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b4e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b50:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008b52:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008b54:	e841 2300 	strex	r3, r2, [r1]
 8008b58:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008b5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d1e6      	bne.n	8008b2e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2220      	movs	r2, #32
 8008b64:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b6e:	2303      	movs	r3, #3
 8008b70:	e062      	b.n	8008c38 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f003 0304 	and.w	r3, r3, #4
 8008b7c:	2b04      	cmp	r3, #4
 8008b7e:	d149      	bne.n	8008c14 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008b80:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008b84:	9300      	str	r3, [sp, #0]
 8008b86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008b88:	2200      	movs	r2, #0
 8008b8a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f000 f856 	bl	8008c40 <UART_WaitOnFlagUntilTimeout>
 8008b94:	4603      	mov	r3, r0
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d03c      	beq.n	8008c14 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ba2:	e853 3f00 	ldrex	r3, [r3]
 8008ba6:	623b      	str	r3, [r7, #32]
   return(result);
 8008ba8:	6a3b      	ldr	r3, [r7, #32]
 8008baa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008bae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	461a      	mov	r2, r3
 8008bb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008bb8:	633b      	str	r3, [r7, #48]	@ 0x30
 8008bba:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bbc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008bbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008bc0:	e841 2300 	strex	r3, r2, [r1]
 8008bc4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d1e6      	bne.n	8008b9a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	3308      	adds	r3, #8
 8008bd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	e853 3f00 	ldrex	r3, [r3]
 8008bda:	60fb      	str	r3, [r7, #12]
   return(result);
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	f023 0301 	bic.w	r3, r3, #1
 8008be2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	3308      	adds	r3, #8
 8008bea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008bec:	61fa      	str	r2, [r7, #28]
 8008bee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bf0:	69b9      	ldr	r1, [r7, #24]
 8008bf2:	69fa      	ldr	r2, [r7, #28]
 8008bf4:	e841 2300 	strex	r3, r2, [r1]
 8008bf8:	617b      	str	r3, [r7, #20]
   return(result);
 8008bfa:	697b      	ldr	r3, [r7, #20]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d1e5      	bne.n	8008bcc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2220      	movs	r2, #32
 8008c04:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c10:	2303      	movs	r3, #3
 8008c12:	e011      	b.n	8008c38 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2220      	movs	r2, #32
 8008c18:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2220      	movs	r2, #32
 8008c1e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2200      	movs	r2, #0
 8008c26:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2200      	movs	r2, #0
 8008c32:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8008c36:	2300      	movs	r3, #0
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	3758      	adds	r7, #88	@ 0x58
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bd80      	pop	{r7, pc}

08008c40 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b084      	sub	sp, #16
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	60f8      	str	r0, [r7, #12]
 8008c48:	60b9      	str	r1, [r7, #8]
 8008c4a:	603b      	str	r3, [r7, #0]
 8008c4c:	4613      	mov	r3, r2
 8008c4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c50:	e04f      	b.n	8008cf2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c52:	69bb      	ldr	r3, [r7, #24]
 8008c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c58:	d04b      	beq.n	8008cf2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c5a:	f7fb fddd 	bl	8004818 <HAL_GetTick>
 8008c5e:	4602      	mov	r2, r0
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	1ad3      	subs	r3, r2, r3
 8008c64:	69ba      	ldr	r2, [r7, #24]
 8008c66:	429a      	cmp	r2, r3
 8008c68:	d302      	bcc.n	8008c70 <UART_WaitOnFlagUntilTimeout+0x30>
 8008c6a:	69bb      	ldr	r3, [r7, #24]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d101      	bne.n	8008c74 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008c70:	2303      	movs	r3, #3
 8008c72:	e04e      	b.n	8008d12 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f003 0304 	and.w	r3, r3, #4
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d037      	beq.n	8008cf2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	2b80      	cmp	r3, #128	@ 0x80
 8008c86:	d034      	beq.n	8008cf2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	2b40      	cmp	r3, #64	@ 0x40
 8008c8c:	d031      	beq.n	8008cf2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	69db      	ldr	r3, [r3, #28]
 8008c94:	f003 0308 	and.w	r3, r3, #8
 8008c98:	2b08      	cmp	r3, #8
 8008c9a:	d110      	bne.n	8008cbe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	2208      	movs	r2, #8
 8008ca2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008ca4:	68f8      	ldr	r0, [r7, #12]
 8008ca6:	f000 f838 	bl	8008d1a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	2208      	movs	r2, #8
 8008cae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8008cba:	2301      	movs	r3, #1
 8008cbc:	e029      	b.n	8008d12 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	69db      	ldr	r3, [r3, #28]
 8008cc4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008cc8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008ccc:	d111      	bne.n	8008cf2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008cd6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008cd8:	68f8      	ldr	r0, [r7, #12]
 8008cda:	f000 f81e 	bl	8008d1a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	2220      	movs	r2, #32
 8008ce2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	2200      	movs	r2, #0
 8008cea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8008cee:	2303      	movs	r3, #3
 8008cf0:	e00f      	b.n	8008d12 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	69da      	ldr	r2, [r3, #28]
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	4013      	ands	r3, r2
 8008cfc:	68ba      	ldr	r2, [r7, #8]
 8008cfe:	429a      	cmp	r2, r3
 8008d00:	bf0c      	ite	eq
 8008d02:	2301      	moveq	r3, #1
 8008d04:	2300      	movne	r3, #0
 8008d06:	b2db      	uxtb	r3, r3
 8008d08:	461a      	mov	r2, r3
 8008d0a:	79fb      	ldrb	r3, [r7, #7]
 8008d0c:	429a      	cmp	r2, r3
 8008d0e:	d0a0      	beq.n	8008c52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008d10:	2300      	movs	r3, #0
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3710      	adds	r7, #16
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}

08008d1a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008d1a:	b480      	push	{r7}
 8008d1c:	b095      	sub	sp, #84	@ 0x54
 8008d1e:	af00      	add	r7, sp, #0
 8008d20:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d2a:	e853 3f00 	ldrex	r3, [r3]
 8008d2e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d32:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008d36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	461a      	mov	r2, r3
 8008d3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d40:	643b      	str	r3, [r7, #64]	@ 0x40
 8008d42:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d44:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008d46:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008d48:	e841 2300 	strex	r3, r2, [r1]
 8008d4c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008d4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d1e6      	bne.n	8008d22 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	3308      	adds	r3, #8
 8008d5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d5c:	6a3b      	ldr	r3, [r7, #32]
 8008d5e:	e853 3f00 	ldrex	r3, [r3]
 8008d62:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d64:	69fb      	ldr	r3, [r7, #28]
 8008d66:	f023 0301 	bic.w	r3, r3, #1
 8008d6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	3308      	adds	r3, #8
 8008d72:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008d74:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008d76:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d78:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008d7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008d7c:	e841 2300 	strex	r3, r2, [r1]
 8008d80:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d1e5      	bne.n	8008d54 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008d8c:	2b01      	cmp	r3, #1
 8008d8e:	d118      	bne.n	8008dc2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	e853 3f00 	ldrex	r3, [r3]
 8008d9c:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d9e:	68bb      	ldr	r3, [r7, #8]
 8008da0:	f023 0310 	bic.w	r3, r3, #16
 8008da4:	647b      	str	r3, [r7, #68]	@ 0x44
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	461a      	mov	r2, r3
 8008dac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008dae:	61bb      	str	r3, [r7, #24]
 8008db0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008db2:	6979      	ldr	r1, [r7, #20]
 8008db4:	69ba      	ldr	r2, [r7, #24]
 8008db6:	e841 2300 	strex	r3, r2, [r1]
 8008dba:	613b      	str	r3, [r7, #16]
   return(result);
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d1e6      	bne.n	8008d90 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2220      	movs	r2, #32
 8008dc6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2200      	movs	r2, #0
 8008dce:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008dd6:	bf00      	nop
 8008dd8:	3754      	adds	r7, #84	@ 0x54
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de0:	4770      	bx	lr

08008de2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008de2:	b084      	sub	sp, #16
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b084      	sub	sp, #16
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
 8008dec:	f107 001c 	add.w	r0, r7, #28
 8008df0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	68db      	ldr	r3, [r3, #12]
 8008df8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f000 fa69 	bl	80092d8 <USB_CoreReset>
 8008e06:	4603      	mov	r3, r0
 8008e08:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8008e0a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d106      	bne.n	8008e20 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e16:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	639a      	str	r2, [r3, #56]	@ 0x38
 8008e1e:	e005      	b.n	8008e2c <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e24:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8008e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	3710      	adds	r7, #16
 8008e32:	46bd      	mov	sp, r7
 8008e34:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008e38:	b004      	add	sp, #16
 8008e3a:	4770      	bx	lr

08008e3c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b083      	sub	sp, #12
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	689b      	ldr	r3, [r3, #8]
 8008e48:	f023 0201 	bic.w	r2, r3, #1
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008e50:	2300      	movs	r3, #0
}
 8008e52:	4618      	mov	r0, r3
 8008e54:	370c      	adds	r7, #12
 8008e56:	46bd      	mov	sp, r7
 8008e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5c:	4770      	bx	lr

08008e5e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8008e5e:	b580      	push	{r7, lr}
 8008e60:	b084      	sub	sp, #16
 8008e62:	af00      	add	r7, sp, #0
 8008e64:	6078      	str	r0, [r7, #4]
 8008e66:	460b      	mov	r3, r1
 8008e68:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	68db      	ldr	r3, [r3, #12]
 8008e72:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008e7a:	78fb      	ldrb	r3, [r7, #3]
 8008e7c:	2b01      	cmp	r3, #1
 8008e7e:	d115      	bne.n	8008eac <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	68db      	ldr	r3, [r3, #12]
 8008e84:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008e8c:	200a      	movs	r0, #10
 8008e8e:	f7fb fccf 	bl	8004830 <HAL_Delay>
      ms += 10U;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	330a      	adds	r3, #10
 8008e96:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f000 fa0f 	bl	80092bc <USB_GetMode>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	2b01      	cmp	r3, #1
 8008ea2:	d01e      	beq.n	8008ee2 <USB_SetCurrentMode+0x84>
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	2bc7      	cmp	r3, #199	@ 0xc7
 8008ea8:	d9f0      	bls.n	8008e8c <USB_SetCurrentMode+0x2e>
 8008eaa:	e01a      	b.n	8008ee2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008eac:	78fb      	ldrb	r3, [r7, #3]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d115      	bne.n	8008ede <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	68db      	ldr	r3, [r3, #12]
 8008eb6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008ebe:	200a      	movs	r0, #10
 8008ec0:	f7fb fcb6 	bl	8004830 <HAL_Delay>
      ms += 10U;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	330a      	adds	r3, #10
 8008ec8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f000 f9f6 	bl	80092bc <USB_GetMode>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d005      	beq.n	8008ee2 <USB_SetCurrentMode+0x84>
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	2bc7      	cmp	r3, #199	@ 0xc7
 8008eda:	d9f0      	bls.n	8008ebe <USB_SetCurrentMode+0x60>
 8008edc:	e001      	b.n	8008ee2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008ede:	2301      	movs	r3, #1
 8008ee0:	e005      	b.n	8008eee <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	2bc8      	cmp	r3, #200	@ 0xc8
 8008ee6:	d101      	bne.n	8008eec <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008ee8:	2301      	movs	r3, #1
 8008eea:	e000      	b.n	8008eee <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008eec:	2300      	movs	r3, #0
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3710      	adds	r7, #16
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}
	...

08008ef8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008ef8:	b084      	sub	sp, #16
 8008efa:	b580      	push	{r7, lr}
 8008efc:	b086      	sub	sp, #24
 8008efe:	af00      	add	r7, sp, #0
 8008f00:	6078      	str	r0, [r7, #4]
 8008f02:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008f06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008f12:	2300      	movs	r3, #0
 8008f14:	613b      	str	r3, [r7, #16]
 8008f16:	e009      	b.n	8008f2c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008f18:	687a      	ldr	r2, [r7, #4]
 8008f1a:	693b      	ldr	r3, [r7, #16]
 8008f1c:	3340      	adds	r3, #64	@ 0x40
 8008f1e:	009b      	lsls	r3, r3, #2
 8008f20:	4413      	add	r3, r2
 8008f22:	2200      	movs	r2, #0
 8008f24:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008f26:	693b      	ldr	r3, [r7, #16]
 8008f28:	3301      	adds	r3, #1
 8008f2a:	613b      	str	r3, [r7, #16]
 8008f2c:	693b      	ldr	r3, [r7, #16]
 8008f2e:	2b0e      	cmp	r3, #14
 8008f30:	d9f2      	bls.n	8008f18 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008f32:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d11c      	bne.n	8008f74 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f40:	685b      	ldr	r3, [r3, #4]
 8008f42:	68fa      	ldr	r2, [r7, #12]
 8008f44:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008f48:	f043 0302 	orr.w	r3, r3, #2
 8008f4c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f52:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	601a      	str	r2, [r3, #0]
 8008f72:	e005      	b.n	8008f80 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f78:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008f86:	461a      	mov	r2, r3
 8008f88:	2300      	movs	r3, #0
 8008f8a:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008f8c:	2103      	movs	r1, #3
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f000 f95a 	bl	8009248 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008f94:	2110      	movs	r1, #16
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f000 f8f6 	bl	8009188 <USB_FlushTxFifo>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d001      	beq.n	8008fa6 <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f000 f920 	bl	80091ec <USB_FlushRxFifo>
 8008fac:	4603      	mov	r3, r0
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d001      	beq.n	8008fb6 <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008fbc:	461a      	mov	r2, r3
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008fc8:	461a      	mov	r2, r3
 8008fca:	2300      	movs	r3, #0
 8008fcc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008fd4:	461a      	mov	r2, r3
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008fda:	2300      	movs	r3, #0
 8008fdc:	613b      	str	r3, [r7, #16]
 8008fde:	e043      	b.n	8009068 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	015a      	lsls	r2, r3, #5
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	4413      	add	r3, r2
 8008fe8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008ff2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008ff6:	d118      	bne.n	800902a <USB_DevInit+0x132>
    {
      if (i == 0U)
 8008ff8:	693b      	ldr	r3, [r7, #16]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d10a      	bne.n	8009014 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008ffe:	693b      	ldr	r3, [r7, #16]
 8009000:	015a      	lsls	r2, r3, #5
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	4413      	add	r3, r2
 8009006:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800900a:	461a      	mov	r2, r3
 800900c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009010:	6013      	str	r3, [r2, #0]
 8009012:	e013      	b.n	800903c <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009014:	693b      	ldr	r3, [r7, #16]
 8009016:	015a      	lsls	r2, r3, #5
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	4413      	add	r3, r2
 800901c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009020:	461a      	mov	r2, r3
 8009022:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009026:	6013      	str	r3, [r2, #0]
 8009028:	e008      	b.n	800903c <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800902a:	693b      	ldr	r3, [r7, #16]
 800902c:	015a      	lsls	r2, r3, #5
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	4413      	add	r3, r2
 8009032:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009036:	461a      	mov	r2, r3
 8009038:	2300      	movs	r3, #0
 800903a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800903c:	693b      	ldr	r3, [r7, #16]
 800903e:	015a      	lsls	r2, r3, #5
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	4413      	add	r3, r2
 8009044:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009048:	461a      	mov	r2, r3
 800904a:	2300      	movs	r3, #0
 800904c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	015a      	lsls	r2, r3, #5
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	4413      	add	r3, r2
 8009056:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800905a:	461a      	mov	r2, r3
 800905c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009060:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	3301      	adds	r3, #1
 8009066:	613b      	str	r3, [r7, #16]
 8009068:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800906c:	461a      	mov	r2, r3
 800906e:	693b      	ldr	r3, [r7, #16]
 8009070:	4293      	cmp	r3, r2
 8009072:	d3b5      	bcc.n	8008fe0 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009074:	2300      	movs	r3, #0
 8009076:	613b      	str	r3, [r7, #16]
 8009078:	e043      	b.n	8009102 <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800907a:	693b      	ldr	r3, [r7, #16]
 800907c:	015a      	lsls	r2, r3, #5
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	4413      	add	r3, r2
 8009082:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800908c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009090:	d118      	bne.n	80090c4 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8009092:	693b      	ldr	r3, [r7, #16]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d10a      	bne.n	80090ae <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	015a      	lsls	r2, r3, #5
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	4413      	add	r3, r2
 80090a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80090a4:	461a      	mov	r2, r3
 80090a6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80090aa:	6013      	str	r3, [r2, #0]
 80090ac:	e013      	b.n	80090d6 <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80090ae:	693b      	ldr	r3, [r7, #16]
 80090b0:	015a      	lsls	r2, r3, #5
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	4413      	add	r3, r2
 80090b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80090ba:	461a      	mov	r2, r3
 80090bc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80090c0:	6013      	str	r3, [r2, #0]
 80090c2:	e008      	b.n	80090d6 <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80090c4:	693b      	ldr	r3, [r7, #16]
 80090c6:	015a      	lsls	r2, r3, #5
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	4413      	add	r3, r2
 80090cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80090d0:	461a      	mov	r2, r3
 80090d2:	2300      	movs	r3, #0
 80090d4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80090d6:	693b      	ldr	r3, [r7, #16]
 80090d8:	015a      	lsls	r2, r3, #5
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	4413      	add	r3, r2
 80090de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80090e2:	461a      	mov	r2, r3
 80090e4:	2300      	movs	r3, #0
 80090e6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80090e8:	693b      	ldr	r3, [r7, #16]
 80090ea:	015a      	lsls	r2, r3, #5
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	4413      	add	r3, r2
 80090f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80090f4:	461a      	mov	r2, r3
 80090f6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80090fa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80090fc:	693b      	ldr	r3, [r7, #16]
 80090fe:	3301      	adds	r3, #1
 8009100:	613b      	str	r3, [r7, #16]
 8009102:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009106:	461a      	mov	r2, r3
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	4293      	cmp	r3, r2
 800910c:	d3b5      	bcc.n	800907a <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009114:	691b      	ldr	r3, [r3, #16]
 8009116:	68fa      	ldr	r2, [r7, #12]
 8009118:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800911c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009120:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2200      	movs	r2, #0
 8009126:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800912e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	699b      	ldr	r3, [r3, #24]
 8009134:	f043 0210 	orr.w	r2, r3, #16
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	699a      	ldr	r2, [r3, #24]
 8009140:	4b10      	ldr	r3, [pc, #64]	@ (8009184 <USB_DevInit+0x28c>)
 8009142:	4313      	orrs	r3, r2
 8009144:	687a      	ldr	r2, [r7, #4]
 8009146:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009148:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800914c:	2b00      	cmp	r3, #0
 800914e:	d005      	beq.n	800915c <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	699b      	ldr	r3, [r3, #24]
 8009154:	f043 0208 	orr.w	r2, r3, #8
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800915c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009160:	2b01      	cmp	r3, #1
 8009162:	d107      	bne.n	8009174 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	699b      	ldr	r3, [r3, #24]
 8009168:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800916c:	f043 0304 	orr.w	r3, r3, #4
 8009170:	687a      	ldr	r2, [r7, #4]
 8009172:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009174:	7dfb      	ldrb	r3, [r7, #23]
}
 8009176:	4618      	mov	r0, r3
 8009178:	3718      	adds	r7, #24
 800917a:	46bd      	mov	sp, r7
 800917c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009180:	b004      	add	sp, #16
 8009182:	4770      	bx	lr
 8009184:	803c3800 	.word	0x803c3800

08009188 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009188:	b480      	push	{r7}
 800918a:	b085      	sub	sp, #20
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
 8009190:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009192:	2300      	movs	r3, #0
 8009194:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	3301      	adds	r3, #1
 800919a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80091a2:	d901      	bls.n	80091a8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80091a4:	2303      	movs	r3, #3
 80091a6:	e01b      	b.n	80091e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	691b      	ldr	r3, [r3, #16]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	daf2      	bge.n	8009196 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80091b0:	2300      	movs	r3, #0
 80091b2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	019b      	lsls	r3, r3, #6
 80091b8:	f043 0220 	orr.w	r2, r3, #32
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	3301      	adds	r3, #1
 80091c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80091cc:	d901      	bls.n	80091d2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80091ce:	2303      	movs	r3, #3
 80091d0:	e006      	b.n	80091e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	691b      	ldr	r3, [r3, #16]
 80091d6:	f003 0320 	and.w	r3, r3, #32
 80091da:	2b20      	cmp	r3, #32
 80091dc:	d0f0      	beq.n	80091c0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80091de:	2300      	movs	r3, #0
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	3714      	adds	r7, #20
 80091e4:	46bd      	mov	sp, r7
 80091e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ea:	4770      	bx	lr

080091ec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80091ec:	b480      	push	{r7}
 80091ee:	b085      	sub	sp, #20
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80091f4:	2300      	movs	r3, #0
 80091f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	3301      	adds	r3, #1
 80091fc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009204:	d901      	bls.n	800920a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009206:	2303      	movs	r3, #3
 8009208:	e018      	b.n	800923c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	691b      	ldr	r3, [r3, #16]
 800920e:	2b00      	cmp	r3, #0
 8009210:	daf2      	bge.n	80091f8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009212:	2300      	movs	r3, #0
 8009214:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2210      	movs	r2, #16
 800921a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	3301      	adds	r3, #1
 8009220:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009228:	d901      	bls.n	800922e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800922a:	2303      	movs	r3, #3
 800922c:	e006      	b.n	800923c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	691b      	ldr	r3, [r3, #16]
 8009232:	f003 0310 	and.w	r3, r3, #16
 8009236:	2b10      	cmp	r3, #16
 8009238:	d0f0      	beq.n	800921c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800923a:	2300      	movs	r3, #0
}
 800923c:	4618      	mov	r0, r3
 800923e:	3714      	adds	r7, #20
 8009240:	46bd      	mov	sp, r7
 8009242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009246:	4770      	bx	lr

08009248 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009248:	b480      	push	{r7}
 800924a:	b085      	sub	sp, #20
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
 8009250:	460b      	mov	r3, r1
 8009252:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800925e:	681a      	ldr	r2, [r3, #0]
 8009260:	78fb      	ldrb	r3, [r7, #3]
 8009262:	68f9      	ldr	r1, [r7, #12]
 8009264:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009268:	4313      	orrs	r3, r2
 800926a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800926c:	2300      	movs	r3, #0
}
 800926e:	4618      	mov	r0, r3
 8009270:	3714      	adds	r7, #20
 8009272:	46bd      	mov	sp, r7
 8009274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009278:	4770      	bx	lr

0800927a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800927a:	b480      	push	{r7}
 800927c:	b085      	sub	sp, #20
 800927e:	af00      	add	r7, sp, #0
 8009280:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	68fa      	ldr	r2, [r7, #12]
 8009290:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009294:	f023 0303 	bic.w	r3, r3, #3
 8009298:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80092a0:	685b      	ldr	r3, [r3, #4]
 80092a2:	68fa      	ldr	r2, [r7, #12]
 80092a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80092a8:	f043 0302 	orr.w	r3, r3, #2
 80092ac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80092ae:	2300      	movs	r3, #0
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	3714      	adds	r7, #20
 80092b4:	46bd      	mov	sp, r7
 80092b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ba:	4770      	bx	lr

080092bc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80092bc:	b480      	push	{r7}
 80092be:	b083      	sub	sp, #12
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	695b      	ldr	r3, [r3, #20]
 80092c8:	f003 0301 	and.w	r3, r3, #1
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	370c      	adds	r7, #12
 80092d0:	46bd      	mov	sp, r7
 80092d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d6:	4770      	bx	lr

080092d8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80092d8:	b480      	push	{r7}
 80092da:	b085      	sub	sp, #20
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80092e0:	2300      	movs	r3, #0
 80092e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	3301      	adds	r3, #1
 80092e8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80092f0:	d901      	bls.n	80092f6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80092f2:	2303      	movs	r3, #3
 80092f4:	e01b      	b.n	800932e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	691b      	ldr	r3, [r3, #16]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	daf2      	bge.n	80092e4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80092fe:	2300      	movs	r3, #0
 8009300:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	691b      	ldr	r3, [r3, #16]
 8009306:	f043 0201 	orr.w	r2, r3, #1
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	3301      	adds	r3, #1
 8009312:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800931a:	d901      	bls.n	8009320 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800931c:	2303      	movs	r3, #3
 800931e:	e006      	b.n	800932e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	691b      	ldr	r3, [r3, #16]
 8009324:	f003 0301 	and.w	r3, r3, #1
 8009328:	2b01      	cmp	r3, #1
 800932a:	d0f0      	beq.n	800930e <USB_CoreReset+0x36>

  return HAL_OK;
 800932c:	2300      	movs	r3, #0
}
 800932e:	4618      	mov	r0, r3
 8009330:	3714      	adds	r7, #20
 8009332:	46bd      	mov	sp, r7
 8009334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009338:	4770      	bx	lr

0800933a <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 800933a:	b580      	push	{r7, lr}
 800933c:	b08c      	sub	sp, #48	@ 0x30
 800933e:	af00      	add	r7, sp, #0
 8009340:	603b      	str	r3, [r7, #0]
 8009342:	4603      	mov	r3, r0
 8009344:	71fb      	strb	r3, [r7, #7]
 8009346:	460b      	mov	r3, r1
 8009348:	71bb      	strb	r3, [r7, #6]
 800934a:	4613      	mov	r3, r2
 800934c:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 800934e:	79fb      	ldrb	r3, [r7, #7]
 8009350:	753b      	strb	r3, [r7, #20]
  cp.privacy_enabled = privacy_enabled;
 8009352:	79bb      	ldrb	r3, [r7, #6]
 8009354:	757b      	strb	r3, [r7, #21]
  cp.device_name_char_len = device_name_char_len;
 8009356:	797b      	ldrb	r3, [r7, #5]
 8009358:	75bb      	strb	r3, [r7, #22]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800935a:	f107 030c 	add.w	r3, r7, #12
 800935e:	2207      	movs	r2, #7
 8009360:	2100      	movs	r1, #0
 8009362:	4618      	mov	r0, r3
 8009364:	f002 ff28 	bl	800c1b8 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009368:	f107 0318 	add.w	r3, r7, #24
 800936c:	2218      	movs	r2, #24
 800936e:	2100      	movs	r1, #0
 8009370:	4618      	mov	r0, r3
 8009372:	f002 ff21 	bl	800c1b8 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8009376:	233f      	movs	r3, #63	@ 0x3f
 8009378:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_GAP_INIT;
 800937a:	238a      	movs	r3, #138	@ 0x8a
 800937c:	837b      	strh	r3, [r7, #26]
  rq.cparam = &cp;
 800937e:	f107 0314 	add.w	r3, r7, #20
 8009382:	623b      	str	r3, [r7, #32]
  rq.clen = sizeof(cp);
 8009384:	2303      	movs	r3, #3
 8009386:	627b      	str	r3, [r7, #36]	@ 0x24
  rq.rparam = &resp;
 8009388:	f107 030c 	add.w	r3, r7, #12
 800938c:	62bb      	str	r3, [r7, #40]	@ 0x28
  rq.rlen = GAP_INIT_RP_SIZE;
 800938e:	2307      	movs	r3, #7
 8009390:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 8009392:	f107 0318 	add.w	r3, r7, #24
 8009396:	2100      	movs	r1, #0
 8009398:	4618      	mov	r0, r3
 800939a:	f000 ff41 	bl	800a220 <hci_send_req>
 800939e:	4603      	mov	r3, r0
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	da01      	bge.n	80093a8 <aci_gap_init_IDB05A1+0x6e>
    return BLE_STATUS_TIMEOUT;
 80093a4:	23ff      	movs	r3, #255	@ 0xff
 80093a6:	e014      	b.n	80093d2 <aci_gap_init_IDB05A1+0x98>
  
  if (resp.status) {
 80093a8:	7b3b      	ldrb	r3, [r7, #12]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d001      	beq.n	80093b2 <aci_gap_init_IDB05A1+0x78>
    return resp.status;
 80093ae:	7b3b      	ldrb	r3, [r7, #12]
 80093b0:	e00f      	b.n	80093d2 <aci_gap_init_IDB05A1+0x98>
  }
  
  *service_handle = btohs(resp.service_handle);
 80093b2:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 80093b6:	b29a      	uxth	r2, r3
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 80093bc:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 80093c0:	b29a      	uxth	r2, r3
 80093c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093c4:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 80093c6:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 80093ca:	b29a      	uxth	r2, r3
 80093cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093ce:	801a      	strh	r2, [r3, #0]
  
  return 0;
 80093d0:	2300      	movs	r3, #0
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	3730      	adds	r7, #48	@ 0x30
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}

080093da <aci_gap_init_IDB04A1>:

tBleStatus aci_gap_init_IDB04A1(uint8_t role, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 80093da:	b580      	push	{r7, lr}
 80093dc:	b08e      	sub	sp, #56	@ 0x38
 80093de:	af00      	add	r7, sp, #0
 80093e0:	60b9      	str	r1, [r7, #8]
 80093e2:	607a      	str	r2, [r7, #4]
 80093e4:	603b      	str	r3, [r7, #0]
 80093e6:	4603      	mov	r3, r0
 80093e8:	73fb      	strb	r3, [r7, #15]
  struct hci_request rq;
  gap_init_cp_IDB04A1 cp;
  gap_init_rp resp;

  cp.role = role;
 80093ea:	7bfb      	ldrb	r3, [r7, #15]
 80093ec:	773b      	strb	r3, [r7, #28]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80093ee:	f107 0314 	add.w	r3, r7, #20
 80093f2:	2207      	movs	r2, #7
 80093f4:	2100      	movs	r1, #0
 80093f6:	4618      	mov	r0, r3
 80093f8:	f002 fede 	bl	800c1b8 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80093fc:	f107 0320 	add.w	r3, r7, #32
 8009400:	2218      	movs	r2, #24
 8009402:	2100      	movs	r1, #0
 8009404:	4618      	mov	r0, r3
 8009406:	f002 fed7 	bl	800c1b8 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800940a:	233f      	movs	r3, #63	@ 0x3f
 800940c:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_GAP_INIT;
 800940e:	238a      	movs	r3, #138	@ 0x8a
 8009410:	847b      	strh	r3, [r7, #34]	@ 0x22
  rq.cparam = &cp;
 8009412:	f107 031c 	add.w	r3, r7, #28
 8009416:	62bb      	str	r3, [r7, #40]	@ 0x28
  rq.clen = sizeof(cp);
 8009418:	2301      	movs	r3, #1
 800941a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  rq.rparam = &resp;
 800941c:	f107 0314 	add.w	r3, r7, #20
 8009420:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.rlen = GAP_INIT_RP_SIZE;
 8009422:	2307      	movs	r3, #7
 8009424:	637b      	str	r3, [r7, #52]	@ 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 8009426:	f107 0320 	add.w	r3, r7, #32
 800942a:	2100      	movs	r1, #0
 800942c:	4618      	mov	r0, r3
 800942e:	f000 fef7 	bl	800a220 <hci_send_req>
 8009432:	4603      	mov	r3, r0
 8009434:	2b00      	cmp	r3, #0
 8009436:	da01      	bge.n	800943c <aci_gap_init_IDB04A1+0x62>
    return BLE_STATUS_TIMEOUT;
 8009438:	23ff      	movs	r3, #255	@ 0xff
 800943a:	e014      	b.n	8009466 <aci_gap_init_IDB04A1+0x8c>
  
  if (resp.status) {
 800943c:	7d3b      	ldrb	r3, [r7, #20]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d001      	beq.n	8009446 <aci_gap_init_IDB04A1+0x6c>
    return resp.status;
 8009442:	7d3b      	ldrb	r3, [r7, #20]
 8009444:	e00f      	b.n	8009466 <aci_gap_init_IDB04A1+0x8c>
  }
  
  *service_handle = btohs(resp.service_handle);
 8009446:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 800944a:	b29a      	uxth	r2, r3
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8009450:	f8b7 3017 	ldrh.w	r3, [r7, #23]
 8009454:	b29a      	uxth	r2, r3
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 800945a:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 800945e:	b29a      	uxth	r2, r3
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8009464:	2300      	movs	r3, #0
}
 8009466:	4618      	mov	r0, r3
 8009468:	3738      	adds	r7, #56	@ 0x38
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}

0800946e <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 800946e:	b590      	push	{r4, r7, lr}
 8009470:	b095      	sub	sp, #84	@ 0x54
 8009472:	af00      	add	r7, sp, #0
 8009474:	4604      	mov	r4, r0
 8009476:	4608      	mov	r0, r1
 8009478:	4611      	mov	r1, r2
 800947a:	461a      	mov	r2, r3
 800947c:	4623      	mov	r3, r4
 800947e:	71fb      	strb	r3, [r7, #7]
 8009480:	4603      	mov	r3, r0
 8009482:	80bb      	strh	r3, [r7, #4]
 8009484:	460b      	mov	r3, r1
 8009486:	807b      	strh	r3, [r7, #2]
 8009488:	4613      	mov	r3, r2
 800948a:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
 800948c:	2300      	movs	r3, #0
 800948e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 8009492:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 8009496:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 800949a:	4413      	add	r3, r2
 800949c:	330e      	adds	r3, #14
 800949e:	2b28      	cmp	r3, #40	@ 0x28
 80094a0:	d901      	bls.n	80094a6 <aci_gap_set_discoverable+0x38>
    return BLE_STATUS_INVALID_PARAMS;
 80094a2:	2342      	movs	r3, #66	@ 0x42
 80094a4:	e0c9      	b.n	800963a <aci_gap_set_discoverable+0x1cc>

  buffer[indx] = AdvType;
 80094a6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80094aa:	3350      	adds	r3, #80	@ 0x50
 80094ac:	443b      	add	r3, r7
 80094ae:	79fa      	ldrb	r2, [r7, #7]
 80094b0:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 80094b4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80094b8:	3301      	adds	r3, #1
 80094ba:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  AdvIntervMin = htobs(AdvIntervMin);
 80094be:	88bb      	ldrh	r3, [r7, #4]
 80094c0:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 80094c2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80094c6:	f107 0208 	add.w	r2, r7, #8
 80094ca:	4413      	add	r3, r2
 80094cc:	88ba      	ldrh	r2, [r7, #4]
 80094ce:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 80094d0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80094d4:	3302      	adds	r3, #2
 80094d6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  AdvIntervMax = htobs(AdvIntervMax);
 80094da:	887b      	ldrh	r3, [r7, #2]
 80094dc:	807b      	strh	r3, [r7, #2]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 80094de:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80094e2:	f107 0208 	add.w	r2, r7, #8
 80094e6:	4413      	add	r3, r2
 80094e8:	887a      	ldrh	r2, [r7, #2]
 80094ea:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 80094ec:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80094f0:	3302      	adds	r3, #2
 80094f2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  buffer[indx] = OwnAddrType;
 80094f6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80094fa:	3350      	adds	r3, #80	@ 0x50
 80094fc:	443b      	add	r3, r7
 80094fe:	79ba      	ldrb	r2, [r7, #6]
 8009500:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8009504:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009508:	3301      	adds	r3, #1
 800950a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  buffer[indx] = AdvFilterPolicy;
 800950e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009512:	3350      	adds	r3, #80	@ 0x50
 8009514:	443b      	add	r3, r7
 8009516:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 800951a:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800951e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009522:	3301      	adds	r3, #1
 8009524:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  buffer[indx] = LocalNameLen;
 8009528:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800952c:	3350      	adds	r3, #80	@ 0x50
 800952e:	443b      	add	r3, r7
 8009530:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 8009534:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8009538:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800953c:	3301      	adds	r3, #1
 800953e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 8009542:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009546:	f107 0208 	add.w	r2, r7, #8
 800954a:	4413      	add	r3, r2
 800954c:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 8009550:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009552:	4618      	mov	r0, r3
 8009554:	f002 feab 	bl	800c2ae <memcpy>
  indx +=  LocalNameLen;
 8009558:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 800955c:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8009560:	4413      	add	r3, r2
 8009562:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  buffer[indx] = ServiceUUIDLen;
 8009566:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800956a:	3350      	adds	r3, #80	@ 0x50
 800956c:	443b      	add	r3, r7
 800956e:	f897 206c 	ldrb.w	r2, [r7, #108]	@ 0x6c
 8009572:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8009576:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800957a:	3301      	adds	r3, #1
 800957c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 8009580:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009584:	f107 0208 	add.w	r2, r7, #8
 8009588:	4413      	add	r3, r2
 800958a:	f897 206c 	ldrb.w	r2, [r7, #108]	@ 0x6c
 800958e:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8009590:	4618      	mov	r0, r3
 8009592:	f002 fe8c 	bl	800c2ae <memcpy>
  indx +=  ServiceUUIDLen;  
 8009596:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 800959a:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 800959e:	4413      	add	r3, r2
 80095a0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
 80095a4:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 80095a8:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 80095ac:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80095b0:	f107 0208 	add.w	r2, r7, #8
 80095b4:	4413      	add	r3, r2
 80095b6:	f8b7 2074 	ldrh.w	r2, [r7, #116]	@ 0x74
 80095ba:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 80095bc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80095c0:	3302      	adds	r3, #2
 80095c2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
 80095c6:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 80095ca:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 80095ce:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80095d2:	f107 0208 	add.w	r2, r7, #8
 80095d6:	4413      	add	r3, r2
 80095d8:	f8b7 2078 	ldrh.w	r2, [r7, #120]	@ 0x78
 80095dc:	801a      	strh	r2, [r3, #0]
  indx +=  2;    
 80095de:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80095e2:	3302      	adds	r3, #2
 80095e4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80095e8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80095ec:	2218      	movs	r2, #24
 80095ee:	2100      	movs	r1, #0
 80095f0:	4618      	mov	r0, r3
 80095f2:	f002 fde1 	bl	800c1b8 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80095f6:	233f      	movs	r3, #63	@ 0x3f
 80095f8:	86bb      	strh	r3, [r7, #52]	@ 0x34
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 80095fa:	2383      	movs	r3, #131	@ 0x83
 80095fc:	86fb      	strh	r3, [r7, #54]	@ 0x36
  rq.cparam = (void *)buffer;
 80095fe:	f107 0308 	add.w	r3, r7, #8
 8009602:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.clen = indx;
 8009604:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009608:	643b      	str	r3, [r7, #64]	@ 0x40
  rq.rparam = &status;
 800960a:	f107 0333 	add.w	r3, r7, #51	@ 0x33
 800960e:	647b      	str	r3, [r7, #68]	@ 0x44
  rq.rlen = 1;
 8009610:	2301      	movs	r3, #1
 8009612:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (hci_send_req(&rq, FALSE) < 0)
 8009614:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8009618:	2100      	movs	r1, #0
 800961a:	4618      	mov	r0, r3
 800961c:	f000 fe00 	bl	800a220 <hci_send_req>
 8009620:	4603      	mov	r3, r0
 8009622:	2b00      	cmp	r3, #0
 8009624:	da01      	bge.n	800962a <aci_gap_set_discoverable+0x1bc>
    return BLE_STATUS_TIMEOUT;
 8009626:	23ff      	movs	r3, #255	@ 0xff
 8009628:	e007      	b.n	800963a <aci_gap_set_discoverable+0x1cc>

  if (status) {
 800962a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800962e:	2b00      	cmp	r3, #0
 8009630:	d002      	beq.n	8009638 <aci_gap_set_discoverable+0x1ca>
    return status;
 8009632:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009636:	e000      	b.n	800963a <aci_gap_set_discoverable+0x1cc>
  }

  return 0;
 8009638:	2300      	movs	r3, #0
}
 800963a:	4618      	mov	r0, r3
 800963c:	3754      	adds	r7, #84	@ 0x54
 800963e:	46bd      	mov	sp, r7
 8009640:	bd90      	pop	{r4, r7, pc}

08009642 <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 8009642:	b590      	push	{r4, r7, lr}
 8009644:	b091      	sub	sp, #68	@ 0x44
 8009646:	af00      	add	r7, sp, #0
 8009648:	603a      	str	r2, [r7, #0]
 800964a:	461a      	mov	r2, r3
 800964c:	4603      	mov	r3, r0
 800964e:	71fb      	strb	r3, [r7, #7]
 8009650:	460b      	mov	r3, r1
 8009652:	71bb      	strb	r3, [r7, #6]
 8009654:	4613      	mov	r3, r2
 8009656:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 8009658:	79fb      	ldrb	r3, [r7, #7]
 800965a:	733b      	strb	r3, [r7, #12]
  cp.oob_enable = oob_enable;
 800965c:	79bb      	ldrb	r3, [r7, #6]
 800965e:	737b      	strb	r3, [r7, #13]
  /* FIX: check on oob_enable introduced to fix issue in projects for Cortex-M33 */
  if (oob_enable) {
 8009660:	79bb      	ldrb	r3, [r7, #6]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d00a      	beq.n	800967c <aci_gap_set_auth_requirement+0x3a>
    BLUENRG_memcpy(cp.oob_data, oob_data, 16);
 8009666:	683a      	ldr	r2, [r7, #0]
 8009668:	f107 030e 	add.w	r3, r7, #14
 800966c:	6814      	ldr	r4, [r2, #0]
 800966e:	6850      	ldr	r0, [r2, #4]
 8009670:	6891      	ldr	r1, [r2, #8]
 8009672:	68d2      	ldr	r2, [r2, #12]
 8009674:	601c      	str	r4, [r3, #0]
 8009676:	6058      	str	r0, [r3, #4]
 8009678:	6099      	str	r1, [r3, #8]
 800967a:	60da      	str	r2, [r3, #12]
  }
  cp.min_encryption_key_size = min_encryption_key_size;
 800967c:	797b      	ldrb	r3, [r7, #5]
 800967e:	77bb      	strb	r3, [r7, #30]
  cp.max_encryption_key_size = max_encryption_key_size;
 8009680:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8009684:	77fb      	strb	r3, [r7, #31]
  cp.use_fixed_pin = use_fixed_pin;
 8009686:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800968a:	f887 3020 	strb.w	r3, [r7, #32]
  cp.fixed_pin = htobl(fixed_pin);
 800968e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009690:	f8c7 3021 	str.w	r3, [r7, #33]	@ 0x21
  cp.bonding_mode = bonding_mode;
 8009694:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 8009698:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800969c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80096a0:	2218      	movs	r2, #24
 80096a2:	2100      	movs	r1, #0
 80096a4:	4618      	mov	r0, r3
 80096a6:	f002 fd87 	bl	800c1b8 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80096aa:	233f      	movs	r3, #63	@ 0x3f
 80096ac:	853b      	strh	r3, [r7, #40]	@ 0x28
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 80096ae:	2386      	movs	r3, #134	@ 0x86
 80096b0:	857b      	strh	r3, [r7, #42]	@ 0x2a
  rq.cparam = &cp;
 80096b2:	f107 030c 	add.w	r3, r7, #12
 80096b6:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.clen = sizeof(cp);
 80096b8:	231a      	movs	r3, #26
 80096ba:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.rparam = &status;
 80096bc:	f107 030b 	add.w	r3, r7, #11
 80096c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.rlen = 1;
 80096c2:	2301      	movs	r3, #1
 80096c4:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (hci_send_req(&rq, FALSE) < 0)
 80096c6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80096ca:	2100      	movs	r1, #0
 80096cc:	4618      	mov	r0, r3
 80096ce:	f000 fda7 	bl	800a220 <hci_send_req>
 80096d2:	4603      	mov	r3, r0
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	da01      	bge.n	80096dc <aci_gap_set_auth_requirement+0x9a>
    return BLE_STATUS_TIMEOUT;
 80096d8:	23ff      	movs	r3, #255	@ 0xff
 80096da:	e005      	b.n	80096e8 <aci_gap_set_auth_requirement+0xa6>

  if (status) {
 80096dc:	7afb      	ldrb	r3, [r7, #11]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d001      	beq.n	80096e6 <aci_gap_set_auth_requirement+0xa4>
    return status;
 80096e2:	7afb      	ldrb	r3, [r7, #11]
 80096e4:	e000      	b.n	80096e8 <aci_gap_set_auth_requirement+0xa6>
  }
    
  return 0;
 80096e6:	2300      	movs	r3, #0
}
 80096e8:	4618      	mov	r0, r3
 80096ea:	3744      	adds	r7, #68	@ 0x44
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bd90      	pop	{r4, r7, pc}

080096f0 <aci_gap_update_adv_data>:
  return status;

}

tBleStatus aci_gap_update_adv_data(uint8_t AdvLen, const uint8_t *AdvData)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b092      	sub	sp, #72	@ 0x48
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	4603      	mov	r3, r0
 80096f8:	6039      	str	r1, [r7, #0]
 80096fa:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[32];
  uint8_t indx = 0;
 80096fc:	2300      	movs	r3, #0
 80096fe:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  if (AdvLen > (sizeof(buffer)-1))
 8009702:	79fb      	ldrb	r3, [r7, #7]
 8009704:	2b1f      	cmp	r3, #31
 8009706:	d901      	bls.n	800970c <aci_gap_update_adv_data+0x1c>
    return BLE_STATUS_INVALID_PARAMS;
 8009708:	2342      	movs	r3, #66	@ 0x42
 800970a:	e03e      	b.n	800978a <aci_gap_update_adv_data+0x9a>

  buffer[indx] = AdvLen;
 800970c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009710:	3348      	adds	r3, #72	@ 0x48
 8009712:	443b      	add	r3, r7
 8009714:	79fa      	ldrb	r2, [r7, #7]
 8009716:	f803 2c40 	strb.w	r2, [r3, #-64]
  indx++;
 800971a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800971e:	3301      	adds	r3, #1
 8009720:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  BLUENRG_memcpy(buffer + indx, AdvData, AdvLen);
 8009724:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009728:	f107 0208 	add.w	r2, r7, #8
 800972c:	4413      	add	r3, r2
 800972e:	79fa      	ldrb	r2, [r7, #7]
 8009730:	6839      	ldr	r1, [r7, #0]
 8009732:	4618      	mov	r0, r3
 8009734:	f002 fdbb 	bl	800c2ae <memcpy>
  indx +=  AdvLen;
 8009738:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 800973c:	79fb      	ldrb	r3, [r7, #7]
 800973e:	4413      	add	r3, r2
 8009740:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009744:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009748:	2218      	movs	r2, #24
 800974a:	2100      	movs	r1, #0
 800974c:	4618      	mov	r0, r3
 800974e:	f002 fd33 	bl	800c1b8 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8009752:	233f      	movs	r3, #63	@ 0x3f
 8009754:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  rq.ocf = OCF_GAP_UPDATE_ADV_DATA;
 8009756:	238e      	movs	r3, #142	@ 0x8e
 8009758:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  rq.cparam = (void *)buffer;
 800975a:	f107 0308 	add.w	r3, r7, #8
 800975e:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.clen = indx;
 8009760:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009764:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.rparam = &status;
 8009766:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800976a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.rlen = 1;
 800976c:	2301      	movs	r3, #1
 800976e:	643b      	str	r3, [r7, #64]	@ 0x40
    
  if (hci_send_req(&rq, FALSE) < 0)
 8009770:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009774:	2100      	movs	r1, #0
 8009776:	4618      	mov	r0, r3
 8009778:	f000 fd52 	bl	800a220 <hci_send_req>
 800977c:	4603      	mov	r3, r0
 800977e:	2b00      	cmp	r3, #0
 8009780:	da01      	bge.n	8009786 <aci_gap_update_adv_data+0x96>
    return BLE_STATUS_TIMEOUT;
 8009782:	23ff      	movs	r3, #255	@ 0xff
 8009784:	e001      	b.n	800978a <aci_gap_update_adv_data+0x9a>
    
  return status;
 8009786:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800978a:	4618      	mov	r0, r3
 800978c:	3748      	adds	r7, #72	@ 0x48
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}

08009792 <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 8009792:	b580      	push	{r7, lr}
 8009794:	b088      	sub	sp, #32
 8009796:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009798:	f107 0308 	add.w	r3, r7, #8
 800979c:	2218      	movs	r2, #24
 800979e:	2100      	movs	r1, #0
 80097a0:	4618      	mov	r0, r3
 80097a2:	f002 fd09 	bl	800c1b8 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80097a6:	233f      	movs	r3, #63	@ 0x3f
 80097a8:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_GATT_INIT;
 80097aa:	f240 1301 	movw	r3, #257	@ 0x101
 80097ae:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80097b0:	1dfb      	adds	r3, r7, #7
 80097b2:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80097b4:	2301      	movs	r3, #1
 80097b6:	61fb      	str	r3, [r7, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 80097b8:	f107 0308 	add.w	r3, r7, #8
 80097bc:	2100      	movs	r1, #0
 80097be:	4618      	mov	r0, r3
 80097c0:	f000 fd2e 	bl	800a220 <hci_send_req>
 80097c4:	4603      	mov	r3, r0
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	da01      	bge.n	80097ce <aci_gatt_init+0x3c>
    return BLE_STATUS_TIMEOUT;
 80097ca:	23ff      	movs	r3, #255	@ 0xff
 80097cc:	e000      	b.n	80097d0 <aci_gatt_init+0x3e>

  return status;
 80097ce:	79fb      	ldrb	r3, [r7, #7]
}
 80097d0:	4618      	mov	r0, r3
 80097d2:	3720      	adds	r7, #32
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd80      	pop	{r7, pc}

080097d8 <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b090      	sub	sp, #64	@ 0x40
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6039      	str	r1, [r7, #0]
 80097e0:	4611      	mov	r1, r2
 80097e2:	461a      	mov	r2, r3
 80097e4:	4603      	mov	r3, r0
 80097e6:	71fb      	strb	r3, [r7, #7]
 80097e8:	460b      	mov	r3, r1
 80097ea:	71bb      	strb	r3, [r7, #6]
 80097ec:	4613      	mov	r3, r2
 80097ee:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
 80097f0:	2300      	movs	r3, #0
 80097f2:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  buffer[indx] = service_uuid_type;
 80097f6:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80097fa:	3340      	adds	r3, #64	@ 0x40
 80097fc:	443b      	add	r3, r7
 80097fe:	79fa      	ldrb	r2, [r7, #7]
 8009800:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8009804:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8009808:	3301      	adds	r3, #1
 800980a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  if(service_uuid_type == UUID_TYPE_16){
 800980e:	79fb      	ldrb	r3, [r7, #7]
 8009810:	2b01      	cmp	r3, #1
 8009812:	d103      	bne.n	800981c <aci_gatt_add_serv+0x44>
    uuid_len = 2;
 8009814:	2302      	movs	r3, #2
 8009816:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800981a:	e002      	b.n	8009822 <aci_gatt_add_serv+0x4a>
  }
  else {
    uuid_len = 16;
 800981c:	2310      	movs	r3, #16
 800981e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 8009822:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8009826:	f107 020c 	add.w	r2, r7, #12
 800982a:	4413      	add	r3, r2
 800982c:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8009830:	6839      	ldr	r1, [r7, #0]
 8009832:	4618      	mov	r0, r3
 8009834:	f002 fd3b 	bl	800c2ae <memcpy>
  indx +=  uuid_len;
 8009838:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 800983c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009840:	4413      	add	r3, r2
 8009842:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  buffer[indx] = service_type;
 8009846:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800984a:	3340      	adds	r3, #64	@ 0x40
 800984c:	443b      	add	r3, r7
 800984e:	79ba      	ldrb	r2, [r7, #6]
 8009850:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8009854:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8009858:	3301      	adds	r3, #1
 800985a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  buffer[indx] = max_attr_records;
 800985e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8009862:	3340      	adds	r3, #64	@ 0x40
 8009864:	443b      	add	r3, r7
 8009866:	797a      	ldrb	r2, [r7, #5]
 8009868:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 800986c:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8009870:	3301      	adds	r3, #1
 8009872:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8009876:	f107 0320 	add.w	r3, r7, #32
 800987a:	2203      	movs	r2, #3
 800987c:	2100      	movs	r1, #0
 800987e:	4618      	mov	r0, r3
 8009880:	f002 fc9a 	bl	800c1b8 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009884:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009888:	2218      	movs	r2, #24
 800988a:	2100      	movs	r1, #0
 800988c:	4618      	mov	r0, r3
 800988e:	f002 fc93 	bl	800c1b8 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8009892:	233f      	movs	r3, #63	@ 0x3f
 8009894:	84bb      	strh	r3, [r7, #36]	@ 0x24
  rq.ocf = OCF_GATT_ADD_SERV;
 8009896:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800989a:	84fb      	strh	r3, [r7, #38]	@ 0x26
  rq.cparam = (void *)buffer;
 800989c:	f107 030c 	add.w	r3, r7, #12
 80098a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  rq.clen = indx;
 80098a2:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80098a6:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.rparam = &resp;
 80098a8:	f107 0320 	add.w	r3, r7, #32
 80098ac:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 80098ae:	2303      	movs	r3, #3
 80098b0:	63bb      	str	r3, [r7, #56]	@ 0x38

  if (hci_send_req(&rq, FALSE) < 0)
 80098b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80098b6:	2100      	movs	r1, #0
 80098b8:	4618      	mov	r0, r3
 80098ba:	f000 fcb1 	bl	800a220 <hci_send_req>
 80098be:	4603      	mov	r3, r0
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	da01      	bge.n	80098c8 <aci_gatt_add_serv+0xf0>
    return BLE_STATUS_TIMEOUT;
 80098c4:	23ff      	movs	r3, #255	@ 0xff
 80098c6:	e00c      	b.n	80098e2 <aci_gatt_add_serv+0x10a>

  if (resp.status) {
 80098c8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d002      	beq.n	80098d6 <aci_gatt_add_serv+0xfe>
    return resp.status;
 80098d0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80098d4:	e005      	b.n	80098e2 <aci_gatt_add_serv+0x10a>
  }
    
  *serviceHandle = btohs(resp.handle);
 80098d6:	f8b7 3021 	ldrh.w	r3, [r7, #33]	@ 0x21
 80098da:	b29a      	uxth	r2, r3
 80098dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80098de:	801a      	strh	r2, [r3, #0]

  return 0;
 80098e0:	2300      	movs	r3, #0
}
 80098e2:	4618      	mov	r0, r3
 80098e4:	3740      	adds	r7, #64	@ 0x40
 80098e6:	46bd      	mov	sp, r7
 80098e8:	bd80      	pop	{r7, pc}

080098ea <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 80098ea:	b580      	push	{r7, lr}
 80098ec:	b092      	sub	sp, #72	@ 0x48
 80098ee:	af00      	add	r7, sp, #0
 80098f0:	603a      	str	r2, [r7, #0]
 80098f2:	461a      	mov	r2, r3
 80098f4:	4603      	mov	r3, r0
 80098f6:	80fb      	strh	r3, [r7, #6]
 80098f8:	460b      	mov	r3, r1
 80098fa:	717b      	strb	r3, [r7, #5]
 80098fc:	4613      	mov	r3, r2
 80098fe:	713b      	strb	r3, [r7, #4]
  struct hci_request rq;
  gatt_add_serv_rp resp;
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8009900:	2300      	movs	r3, #0
 8009902:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  serviceHandle = htobs(serviceHandle);
 8009906:	88fb      	ldrh	r3, [r7, #6]
 8009908:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 800990a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800990e:	f107 020c 	add.w	r2, r7, #12
 8009912:	4413      	add	r3, r2
 8009914:	88fa      	ldrh	r2, [r7, #6]
 8009916:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8009918:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800991c:	3302      	adds	r3, #2
 800991e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = charUuidType;
 8009922:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009926:	3348      	adds	r3, #72	@ 0x48
 8009928:	443b      	add	r3, r7
 800992a:	797a      	ldrb	r2, [r7, #5]
 800992c:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8009930:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009934:	3301      	adds	r3, #1
 8009936:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  if(charUuidType == UUID_TYPE_16){
 800993a:	797b      	ldrb	r3, [r7, #5]
 800993c:	2b01      	cmp	r3, #1
 800993e:	d103      	bne.n	8009948 <aci_gatt_add_char+0x5e>
    uuid_len = 2;
 8009940:	2302      	movs	r3, #2
 8009942:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8009946:	e002      	b.n	800994e <aci_gatt_add_char+0x64>
  }
  else {
    uuid_len = 16;
 8009948:	2310      	movs	r3, #16
 800994a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 800994e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009952:	f107 020c 	add.w	r2, r7, #12
 8009956:	4413      	add	r3, r2
 8009958:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 800995c:	6839      	ldr	r1, [r7, #0]
 800995e:	4618      	mov	r0, r3
 8009960:	f002 fca5 	bl	800c2ae <memcpy>
  indx +=  uuid_len;
 8009964:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8009968:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800996c:	4413      	add	r3, r2
 800996e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = charValueLen;
 8009972:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009976:	3348      	adds	r3, #72	@ 0x48
 8009978:	443b      	add	r3, r7
 800997a:	793a      	ldrb	r2, [r7, #4]
 800997c:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8009980:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009984:	3301      	adds	r3, #1
 8009986:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = charProperties;
 800998a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800998e:	3348      	adds	r3, #72	@ 0x48
 8009990:	443b      	add	r3, r7
 8009992:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 8009996:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800999a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800999e:	3301      	adds	r3, #1
 80099a0:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = secPermissions;
 80099a4:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80099a8:	3348      	adds	r3, #72	@ 0x48
 80099aa:	443b      	add	r3, r7
 80099ac:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 80099b0:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80099b4:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80099b8:	3301      	adds	r3, #1
 80099ba:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = gattEvtMask;
 80099be:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80099c2:	3348      	adds	r3, #72	@ 0x48
 80099c4:	443b      	add	r3, r7
 80099c6:	f897 2058 	ldrb.w	r2, [r7, #88]	@ 0x58
 80099ca:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80099ce:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80099d2:	3301      	adds	r3, #1
 80099d4:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = encryKeySize;
 80099d8:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80099dc:	3348      	adds	r3, #72	@ 0x48
 80099de:	443b      	add	r3, r7
 80099e0:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 80099e4:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80099e8:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80099ec:	3301      	adds	r3, #1
 80099ee:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = isVariable;
 80099f2:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80099f6:	3348      	adds	r3, #72	@ 0x48
 80099f8:	443b      	add	r3, r7
 80099fa:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 80099fe:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8009a02:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009a06:	3301      	adds	r3, #1
 8009a08:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8009a0c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8009a10:	2203      	movs	r2, #3
 8009a12:	2100      	movs	r1, #0
 8009a14:	4618      	mov	r0, r3
 8009a16:	f002 fbcf 	bl	800c1b8 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009a1a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009a1e:	2218      	movs	r2, #24
 8009a20:	2100      	movs	r1, #0
 8009a22:	4618      	mov	r0, r3
 8009a24:	f002 fbc8 	bl	800c1b8 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8009a28:	233f      	movs	r3, #63	@ 0x3f
 8009a2a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  rq.ocf = OCF_GATT_ADD_CHAR;
 8009a2c:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8009a30:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  rq.cparam = (void *)buffer;
 8009a32:	f107 030c 	add.w	r3, r7, #12
 8009a36:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.clen = indx;
 8009a38:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009a3c:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.rparam = &resp;
 8009a3e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8009a42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 8009a44:	2303      	movs	r3, #3
 8009a46:	643b      	str	r3, [r7, #64]	@ 0x40

  if (hci_send_req(&rq, FALSE) < 0)
 8009a48:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009a4c:	2100      	movs	r1, #0
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f000 fbe6 	bl	800a220 <hci_send_req>
 8009a54:	4603      	mov	r3, r0
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	da01      	bge.n	8009a5e <aci_gatt_add_char+0x174>
    return BLE_STATUS_TIMEOUT;
 8009a5a:	23ff      	movs	r3, #255	@ 0xff
 8009a5c:	e00c      	b.n	8009a78 <aci_gatt_add_char+0x18e>

  if (resp.status) {
 8009a5e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d002      	beq.n	8009a6c <aci_gatt_add_char+0x182>
    return resp.status;
 8009a66:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009a6a:	e005      	b.n	8009a78 <aci_gatt_add_char+0x18e>
  }
    
  *charHandle = btohs(resp.handle);
 8009a6c:	f8b7 3029 	ldrh.w	r3, [r7, #41]	@ 0x29
 8009a70:	b29a      	uxth	r2, r3
 8009a72:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009a74:	801a      	strh	r2, [r3, #0]

  return 0;
 8009a76:	2300      	movs	r3, #0
}
 8009a78:	4618      	mov	r0, r3
 8009a7a:	3748      	adds	r7, #72	@ 0x48
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bd80      	pop	{r7, pc}

08009a80 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 8009a80:	b590      	push	{r4, r7, lr}
 8009a82:	b0ab      	sub	sp, #172	@ 0xac
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	4604      	mov	r4, r0
 8009a88:	4608      	mov	r0, r1
 8009a8a:	4611      	mov	r1, r2
 8009a8c:	461a      	mov	r2, r3
 8009a8e:	4623      	mov	r3, r4
 8009a90:	80fb      	strh	r3, [r7, #6]
 8009a92:	4603      	mov	r3, r0
 8009a94:	80bb      	strh	r3, [r7, #4]
 8009a96:	460b      	mov	r3, r1
 8009a98:	70fb      	strb	r3, [r7, #3]
 8009a9a:	4613      	mov	r3, r2
 8009a9c:	70bb      	strb	r3, [r7, #2]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 8009aa4:	78bb      	ldrb	r3, [r7, #2]
 8009aa6:	2b7a      	cmp	r3, #122	@ 0x7a
 8009aa8:	d901      	bls.n	8009aae <aci_gatt_update_char_value+0x2e>
    return BLE_STATUS_INVALID_PARAMS;
 8009aaa:	2342      	movs	r3, #66	@ 0x42
 8009aac:	e074      	b.n	8009b98 <aci_gatt_update_char_value+0x118>

  servHandle = htobs(servHandle);
 8009aae:	88fb      	ldrh	r3, [r7, #6]
 8009ab0:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 8009ab2:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8009ab6:	f107 0208 	add.w	r2, r7, #8
 8009aba:	4413      	add	r3, r2
 8009abc:	88fa      	ldrh	r2, [r7, #6]
 8009abe:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8009ac0:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8009ac4:	3302      	adds	r3, #2
 8009ac6:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  charHandle = htobs(charHandle);
 8009aca:	88bb      	ldrh	r3, [r7, #4]
 8009acc:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 8009ace:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8009ad2:	f107 0208 	add.w	r2, r7, #8
 8009ad6:	4413      	add	r3, r2
 8009ad8:	88ba      	ldrh	r2, [r7, #4]
 8009ada:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8009adc:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8009ae0:	3302      	adds	r3, #2
 8009ae2:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  buffer[indx] = charValOffset;
 8009ae6:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8009aea:	33a8      	adds	r3, #168	@ 0xa8
 8009aec:	443b      	add	r3, r7
 8009aee:	78fa      	ldrb	r2, [r7, #3]
 8009af0:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8009af4:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8009af8:	3301      	adds	r3, #1
 8009afa:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  buffer[indx] = charValueLen;
 8009afe:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8009b02:	33a8      	adds	r3, #168	@ 0xa8
 8009b04:	443b      	add	r3, r7
 8009b06:	78ba      	ldrb	r2, [r7, #2]
 8009b08:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8009b0c:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8009b10:	3301      	adds	r3, #1
 8009b12:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 8009b16:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8009b1a:	f107 0208 	add.w	r2, r7, #8
 8009b1e:	4413      	add	r3, r2
 8009b20:	78ba      	ldrb	r2, [r7, #2]
 8009b22:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 8009b26:	4618      	mov	r0, r3
 8009b28:	f002 fbc1 	bl	800c2ae <memcpy>
  indx +=  charValueLen;
 8009b2c:	f897 20a7 	ldrb.w	r2, [r7, #167]	@ 0xa7
 8009b30:	78bb      	ldrb	r3, [r7, #2]
 8009b32:	4413      	add	r3, r2
 8009b34:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009b38:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8009b3c:	2218      	movs	r2, #24
 8009b3e:	2100      	movs	r1, #0
 8009b40:	4618      	mov	r0, r3
 8009b42:	f002 fb39 	bl	800c1b8 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8009b46:	233f      	movs	r3, #63	@ 0x3f
 8009b48:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 8009b4c:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8009b50:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
  rq.cparam = (void *)buffer;
 8009b54:	f107 0308 	add.w	r3, r7, #8
 8009b58:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  rq.clen = indx;
 8009b5c:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8009b60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  rq.rparam = &status;
 8009b64:	f107 038b 	add.w	r3, r7, #139	@ 0x8b
 8009b68:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  rq.rlen = 1;
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 8009b72:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8009b76:	2100      	movs	r1, #0
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f000 fb51 	bl	800a220 <hci_send_req>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	da01      	bge.n	8009b88 <aci_gatt_update_char_value+0x108>
    return BLE_STATUS_TIMEOUT;
 8009b84:	23ff      	movs	r3, #255	@ 0xff
 8009b86:	e007      	b.n	8009b98 <aci_gatt_update_char_value+0x118>

  if (status) {
 8009b88:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d002      	beq.n	8009b96 <aci_gatt_update_char_value+0x116>
    return status;
 8009b90:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8009b94:	e000      	b.n	8009b98 <aci_gatt_update_char_value+0x118>
  }

  return 0;
 8009b96:	2300      	movs	r3, #0
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	37ac      	adds	r7, #172	@ 0xac
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bd90      	pop	{r4, r7, pc}

08009ba0 <aci_gatt_write_response>:
                                   uint16_t attr_handle,
                                   uint8_t write_status,
                                   uint8_t err_code,
                                   uint8_t att_val_len,
                                   uint8_t *att_val)
{
 8009ba0:	b590      	push	{r4, r7, lr}
 8009ba2:	b0ab      	sub	sp, #172	@ 0xac
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	4604      	mov	r4, r0
 8009ba8:	4608      	mov	r0, r1
 8009baa:	4611      	mov	r1, r2
 8009bac:	461a      	mov	r2, r3
 8009bae:	4623      	mov	r3, r4
 8009bb0:	80fb      	strh	r3, [r7, #6]
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	80bb      	strh	r3, [r7, #4]
 8009bb6:	460b      	mov	r3, r1
 8009bb8:	70fb      	strb	r3, [r7, #3]
 8009bba:	4613      	mov	r3, r2
 8009bbc:	70bb      	strb	r3, [r7, #2]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
  
  if ((att_val_len+7) > HCI_MAX_PAYLOAD_SIZE)
 8009bc4:	f897 30b8 	ldrb.w	r3, [r7, #184]	@ 0xb8
 8009bc8:	2b79      	cmp	r3, #121	@ 0x79
 8009bca:	d901      	bls.n	8009bd0 <aci_gatt_write_response+0x30>
    return BLE_STATUS_INVALID_PARAMS;
 8009bcc:	2342      	movs	r3, #66	@ 0x42
 8009bce:	e083      	b.n	8009cd8 <aci_gatt_write_response+0x138>

  conn_handle = htobs(conn_handle);  
 8009bd0:	88fb      	ldrh	r3, [r7, #6]
 8009bd2:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &conn_handle, 2);
 8009bd4:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8009bd8:	f107 0208 	add.w	r2, r7, #8
 8009bdc:	4413      	add	r3, r2
 8009bde:	88fa      	ldrh	r2, [r7, #6]
 8009be0:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8009be2:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8009be6:	3302      	adds	r3, #2
 8009be8:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  attr_handle = htobs(attr_handle);
 8009bec:	88bb      	ldrh	r3, [r7, #4]
 8009bee:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &attr_handle, 2);
 8009bf0:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8009bf4:	f107 0208 	add.w	r2, r7, #8
 8009bf8:	4413      	add	r3, r2
 8009bfa:	88ba      	ldrh	r2, [r7, #4]
 8009bfc:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8009bfe:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8009c02:	3302      	adds	r3, #2
 8009c04:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  buffer[indx] = write_status;
 8009c08:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8009c0c:	33a8      	adds	r3, #168	@ 0xa8
 8009c0e:	443b      	add	r3, r7
 8009c10:	78fa      	ldrb	r2, [r7, #3]
 8009c12:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx += 1;
 8009c16:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8009c1a:	3301      	adds	r3, #1
 8009c1c:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  buffer[indx] = err_code;
 8009c20:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8009c24:	33a8      	adds	r3, #168	@ 0xa8
 8009c26:	443b      	add	r3, r7
 8009c28:	78ba      	ldrb	r2, [r7, #2]
 8009c2a:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx += 1;
 8009c2e:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8009c32:	3301      	adds	r3, #1
 8009c34:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  buffer[indx] = att_val_len;
 8009c38:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8009c3c:	33a8      	adds	r3, #168	@ 0xa8
 8009c3e:	443b      	add	r3, r7
 8009c40:	f897 20b8 	ldrb.w	r2, [r7, #184]	@ 0xb8
 8009c44:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx += 1;
 8009c48:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8009c4c:	3301      	adds	r3, #1
 8009c4e:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  BLUENRG_memcpy(buffer + indx, att_val, att_val_len);
 8009c52:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8009c56:	f107 0208 	add.w	r2, r7, #8
 8009c5a:	4413      	add	r3, r2
 8009c5c:	f897 20b8 	ldrb.w	r2, [r7, #184]	@ 0xb8
 8009c60:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 8009c64:	4618      	mov	r0, r3
 8009c66:	f002 fb22 	bl	800c2ae <memcpy>
  indx += att_val_len;
 8009c6a:	f897 20a7 	ldrb.w	r2, [r7, #167]	@ 0xa7
 8009c6e:	f897 30b8 	ldrb.w	r3, [r7, #184]	@ 0xb8
 8009c72:	4413      	add	r3, r2
 8009c74:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009c78:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8009c7c:	2218      	movs	r2, #24
 8009c7e:	2100      	movs	r1, #0
 8009c80:	4618      	mov	r0, r3
 8009c82:	f002 fa99 	bl	800c1b8 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8009c86:	233f      	movs	r3, #63	@ 0x3f
 8009c88:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
  rq.ocf = OCF_GATT_WRITE_RESPONSE;
 8009c8c:	f44f 7393 	mov.w	r3, #294	@ 0x126
 8009c90:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
  rq.cparam = (void *)buffer;
 8009c94:	f107 0308 	add.w	r3, r7, #8
 8009c98:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  rq.clen = indx;
 8009c9c:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8009ca0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  rq.rparam = &status;
 8009ca4:	f107 038b 	add.w	r3, r7, #139	@ 0x8b
 8009ca8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  rq.rlen = 1;
 8009cac:	2301      	movs	r3, #1
 8009cae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 8009cb2:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8009cb6:	2100      	movs	r1, #0
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f000 fab1 	bl	800a220 <hci_send_req>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	da01      	bge.n	8009cc8 <aci_gatt_write_response+0x128>
    return BLE_STATUS_TIMEOUT;
 8009cc4:	23ff      	movs	r3, #255	@ 0xff
 8009cc6:	e007      	b.n	8009cd8 <aci_gatt_write_response+0x138>

  if (status) {
 8009cc8:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d002      	beq.n	8009cd6 <aci_gatt_write_response+0x136>
    return status;
 8009cd0:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8009cd4:	e000      	b.n	8009cd8 <aci_gatt_write_response+0x138>
  }

  return 0;
 8009cd6:	2300      	movs	r3, #0
}
 8009cd8:	4618      	mov	r0, r3
 8009cda:	37ac      	adds	r7, #172	@ 0xac
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	bd90      	pop	{r4, r7, pc}

08009ce0 <aci_gatt_allow_read>:

tBleStatus aci_gatt_allow_read(uint16_t conn_handle)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b08a      	sub	sp, #40	@ 0x28
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	80fb      	strh	r3, [r7, #6]
    struct hci_request rq;
    gatt_allow_read_cp cp;
    uint8_t status;
    
    cp.conn_handle = htobs(conn_handle);
 8009cea:	88fb      	ldrh	r3, [r7, #6]
 8009cec:	81bb      	strh	r3, [r7, #12]

    BLUENRG_memset(&rq, 0, sizeof(rq));
 8009cee:	f107 0310 	add.w	r3, r7, #16
 8009cf2:	2218      	movs	r2, #24
 8009cf4:	2100      	movs	r1, #0
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f002 fa5e 	bl	800c1b8 <memset>
    rq.ogf = OGF_VENDOR_CMD;
 8009cfc:	233f      	movs	r3, #63	@ 0x3f
 8009cfe:	823b      	strh	r3, [r7, #16]
    rq.ocf = OCF_GATT_ALLOW_READ;
 8009d00:	f240 1327 	movw	r3, #295	@ 0x127
 8009d04:	827b      	strh	r3, [r7, #18]
    rq.cparam = &cp;
 8009d06:	f107 030c 	add.w	r3, r7, #12
 8009d0a:	61bb      	str	r3, [r7, #24]
    rq.clen = GATT_ALLOW_READ_CP_SIZE;
 8009d0c:	2302      	movs	r3, #2
 8009d0e:	61fb      	str	r3, [r7, #28]
    rq.rparam = &status;
 8009d10:	f107 030b 	add.w	r3, r7, #11
 8009d14:	623b      	str	r3, [r7, #32]
    rq.rlen = 1;
 8009d16:	2301      	movs	r3, #1
 8009d18:	627b      	str	r3, [r7, #36]	@ 0x24

    if (hci_send_req(&rq, FALSE) < 0)
 8009d1a:	f107 0310 	add.w	r3, r7, #16
 8009d1e:	2100      	movs	r1, #0
 8009d20:	4618      	mov	r0, r3
 8009d22:	f000 fa7d 	bl	800a220 <hci_send_req>
 8009d26:	4603      	mov	r3, r0
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	da01      	bge.n	8009d30 <aci_gatt_allow_read+0x50>
      return BLE_STATUS_TIMEOUT;
 8009d2c:	23ff      	movs	r3, #255	@ 0xff
 8009d2e:	e000      	b.n	8009d32 <aci_gatt_allow_read+0x52>

    return status;
 8009d30:	7afb      	ldrb	r3, [r7, #11]
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	3728      	adds	r7, #40	@ 0x28
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}

08009d3a <aci_hal_read_config_data>:

  return status;
}

tBleStatus aci_hal_read_config_data(uint8_t offset, uint16_t data_len, uint8_t *data_len_out_p, uint8_t *data)
{
 8009d3a:	b580      	push	{r7, lr}
 8009d3c:	b0ac      	sub	sp, #176	@ 0xb0
 8009d3e:	af00      	add	r7, sp, #0
 8009d40:	60ba      	str	r2, [r7, #8]
 8009d42:	607b      	str	r3, [r7, #4]
 8009d44:	4603      	mov	r3, r0
 8009d46:	73fb      	strb	r3, [r7, #15]
 8009d48:	460b      	mov	r3, r1
 8009d4a:	81bb      	strh	r3, [r7, #12]
  struct hci_request rq;
  hal_read_config_data_cp cp;
  hal_read_config_data_rp rp;
  
  cp.offset = offset;
 8009d4c:	7bfb      	ldrb	r3, [r7, #15]
 8009d4e:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009d52:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8009d56:	2218      	movs	r2, #24
 8009d58:	2100      	movs	r1, #0
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	f002 fa2c 	bl	800c1b8 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8009d60:	233f      	movs	r3, #63	@ 0x3f
 8009d62:	f8a7 3098 	strh.w	r3, [r7, #152]	@ 0x98
  rq.ocf = OCF_HAL_READ_CONFIG_DATA;
 8009d66:	230d      	movs	r3, #13
 8009d68:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
  rq.cparam = &cp;
 8009d6c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8009d70:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  rq.clen = sizeof(cp);
 8009d74:	2301      	movs	r3, #1
 8009d76:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  rq.rparam = &rp;
 8009d7a:	f107 0314 	add.w	r3, r7, #20
 8009d7e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  rq.rlen = sizeof(rp);
 8009d82:	2380      	movs	r3, #128	@ 0x80
 8009d84:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  
  if (hci_send_req(&rq, FALSE) < 0)
 8009d88:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8009d8c:	2100      	movs	r1, #0
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f000 fa46 	bl	800a220 <hci_send_req>
 8009d94:	4603      	mov	r3, r0
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	da01      	bge.n	8009d9e <aci_hal_read_config_data+0x64>
    return BLE_STATUS_TIMEOUT;
 8009d9a:	23ff      	movs	r3, #255	@ 0xff
 8009d9c:	e01e      	b.n	8009ddc <aci_hal_read_config_data+0xa2>
  
  if(rp.status)
 8009d9e:	7d3b      	ldrb	r3, [r7, #20]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d001      	beq.n	8009da8 <aci_hal_read_config_data+0x6e>
    return rp.status;
 8009da4:	7d3b      	ldrb	r3, [r7, #20]
 8009da6:	e019      	b.n	8009ddc <aci_hal_read_config_data+0xa2>
  
  *data_len_out_p = rq.rlen-1;
 8009da8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009dac:	b2db      	uxtb	r3, r3
 8009dae:	3b01      	subs	r3, #1
 8009db0:	b2da      	uxtb	r2, r3
 8009db2:	68bb      	ldr	r3, [r7, #8]
 8009db4:	701a      	strb	r2, [r3, #0]
  
  BLUENRG_memcpy(data, rp.data, MIN(data_len, *data_len_out_p));
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	781b      	ldrb	r3, [r3, #0]
 8009dba:	461a      	mov	r2, r3
 8009dbc:	89bb      	ldrh	r3, [r7, #12]
 8009dbe:	4293      	cmp	r3, r2
 8009dc0:	d201      	bcs.n	8009dc6 <aci_hal_read_config_data+0x8c>
 8009dc2:	89ba      	ldrh	r2, [r7, #12]
 8009dc4:	e002      	b.n	8009dcc <aci_hal_read_config_data+0x92>
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	781b      	ldrb	r3, [r3, #0]
 8009dca:	461a      	mov	r2, r3
 8009dcc:	f107 0314 	add.w	r3, r7, #20
 8009dd0:	3301      	adds	r3, #1
 8009dd2:	4619      	mov	r1, r3
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f002 fa6a 	bl	800c2ae <memcpy>
  
  return 0;
 8009dda:	2300      	movs	r3, #0
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	37b0      	adds	r7, #176	@ 0xb0
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bd80      	pop	{r7, pc}

08009de4 <aci_hal_set_tx_power_level>:

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b08a      	sub	sp, #40	@ 0x28
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	4603      	mov	r3, r0
 8009dec:	460a      	mov	r2, r1
 8009dee:	71fb      	strb	r3, [r7, #7]
 8009df0:	4613      	mov	r3, r2
 8009df2:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  hal_set_tx_power_level_cp cp;    
  uint8_t status;
    
  cp.en_high_power = en_high_power;
 8009df4:	79fb      	ldrb	r3, [r7, #7]
 8009df6:	733b      	strb	r3, [r7, #12]
  cp.pa_level = pa_level;
 8009df8:	79bb      	ldrb	r3, [r7, #6]
 8009dfa:	737b      	strb	r3, [r7, #13]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009dfc:	f107 0310 	add.w	r3, r7, #16
 8009e00:	2218      	movs	r2, #24
 8009e02:	2100      	movs	r1, #0
 8009e04:	4618      	mov	r0, r3
 8009e06:	f002 f9d7 	bl	800c1b8 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8009e0a:	233f      	movs	r3, #63	@ 0x3f
 8009e0c:	823b      	strh	r3, [r7, #16]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
 8009e0e:	230f      	movs	r3, #15
 8009e10:	827b      	strh	r3, [r7, #18]
  rq.cparam = &cp;
 8009e12:	f107 030c 	add.w	r3, r7, #12
 8009e16:	61bb      	str	r3, [r7, #24]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 8009e18:	2302      	movs	r3, #2
 8009e1a:	61fb      	str	r3, [r7, #28]
  rq.rparam = &status;
 8009e1c:	f107 030b 	add.w	r3, r7, #11
 8009e20:	623b      	str	r3, [r7, #32]
  rq.rlen = 1;
 8009e22:	2301      	movs	r3, #1
 8009e24:	627b      	str	r3, [r7, #36]	@ 0x24

  if (hci_send_req(&rq, FALSE) < 0)
 8009e26:	f107 0310 	add.w	r3, r7, #16
 8009e2a:	2100      	movs	r1, #0
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f000 f9f7 	bl	800a220 <hci_send_req>
 8009e32:	4603      	mov	r3, r0
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	da01      	bge.n	8009e3c <aci_hal_set_tx_power_level+0x58>
    return BLE_STATUS_TIMEOUT;
 8009e38:	23ff      	movs	r3, #255	@ 0xff
 8009e3a:	e000      	b.n	8009e3e <aci_hal_set_tx_power_level+0x5a>

  return status;
 8009e3c:	7afb      	ldrb	r3, [r7, #11]
}
 8009e3e:	4618      	mov	r0, r3
 8009e40:	3728      	adds	r7, #40	@ 0x28
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bd80      	pop	{r7, pc}

08009e46 <getBlueNRGVersion>:
#include "hci.h"
#include "hci_le.h"
#include "string.h"

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 8009e46:	b590      	push	{r4, r7, lr}
 8009e48:	b089      	sub	sp, #36	@ 0x24
 8009e4a:	af02      	add	r7, sp, #8
 8009e4c:	6078      	str	r0, [r7, #4]
 8009e4e:	6039      	str	r1, [r7, #0]
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 8009e50:	f107 0410 	add.w	r4, r7, #16
 8009e54:	f107 0215 	add.w	r2, r7, #21
 8009e58:	f107 0112 	add.w	r1, r7, #18
 8009e5c:	f107 0016 	add.w	r0, r7, #22
 8009e60:	f107 030e 	add.w	r3, r7, #14
 8009e64:	9300      	str	r3, [sp, #0]
 8009e66:	4623      	mov	r3, r4
 8009e68:	f000 f853 	bl	8009f12 <hci_le_read_local_version>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	75fb      	strb	r3, [r7, #23]
                                     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 8009e70:	7dfb      	ldrb	r3, [r7, #23]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d126      	bne.n	8009ec4 <getBlueNRGVersion+0x7e>
    *hwVersion = hci_revision >> 8;
 8009e76:	8a7b      	ldrh	r3, [r7, #18]
 8009e78:	0a1b      	lsrs	r3, r3, #8
 8009e7a:	b29b      	uxth	r3, r3
 8009e7c:	b2da      	uxtb	r2, r3
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	701a      	strb	r2, [r3, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
 8009e82:	8a7b      	ldrh	r3, [r7, #18]
 8009e84:	021b      	lsls	r3, r3, #8
 8009e86:	b29a      	uxth	r2, r3
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	801a      	strh	r2, [r3, #0]
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	881b      	ldrh	r3, [r3, #0]
 8009e90:	b21a      	sxth	r2, r3
 8009e92:	89fb      	ldrh	r3, [r7, #14]
 8009e94:	091b      	lsrs	r3, r3, #4
 8009e96:	b29b      	uxth	r3, r3
 8009e98:	011b      	lsls	r3, r3, #4
 8009e9a:	b21b      	sxth	r3, r3
 8009e9c:	b2db      	uxtb	r3, r3
 8009e9e:	b21b      	sxth	r3, r3
 8009ea0:	4313      	orrs	r3, r2
 8009ea2:	b21b      	sxth	r3, r3
 8009ea4:	b29a      	uxth	r2, r3
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	801a      	strh	r2, [r3, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	881b      	ldrh	r3, [r3, #0]
 8009eae:	b21a      	sxth	r2, r3
 8009eb0:	89fb      	ldrh	r3, [r7, #14]
 8009eb2:	b21b      	sxth	r3, r3
 8009eb4:	f003 030f 	and.w	r3, r3, #15
 8009eb8:	b21b      	sxth	r3, r3
 8009eba:	4313      	orrs	r3, r2
 8009ebc:	b21b      	sxth	r3, r3
 8009ebe:	b29a      	uxth	r2, r3
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	801a      	strh	r2, [r3, #0]
  }
  return status;
 8009ec4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	371c      	adds	r7, #28
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd90      	pop	{r4, r7, pc}

08009ece <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 8009ece:	b580      	push	{r7, lr}
 8009ed0:	b088      	sub	sp, #32
 8009ed2:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009ed4:	f107 0308 	add.w	r3, r7, #8
 8009ed8:	2218      	movs	r2, #24
 8009eda:	2100      	movs	r1, #0
 8009edc:	4618      	mov	r0, r3
 8009ede:	f002 f96b 	bl	800c1b8 <memset>
  rq.ogf = OGF_HOST_CTL;
 8009ee2:	2303      	movs	r3, #3
 8009ee4:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_RESET;
 8009ee6:	2303      	movs	r3, #3
 8009ee8:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009eea:	1dfb      	adds	r3, r7, #7
 8009eec:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009eee:	2301      	movs	r3, #1
 8009ef0:	61fb      	str	r3, [r7, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 8009ef2:	f107 0308 	add.w	r3, r7, #8
 8009ef6:	2100      	movs	r1, #0
 8009ef8:	4618      	mov	r0, r3
 8009efa:	f000 f991 	bl	800a220 <hci_send_req>
 8009efe:	4603      	mov	r3, r0
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	da01      	bge.n	8009f08 <hci_reset+0x3a>
    return BLE_STATUS_TIMEOUT;
 8009f04:	23ff      	movs	r3, #255	@ 0xff
 8009f06:	e000      	b.n	8009f0a <hci_reset+0x3c>
  
  return status;  
 8009f08:	79fb      	ldrb	r3, [r7, #7]
}
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	3720      	adds	r7, #32
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd80      	pop	{r7, pc}

08009f12 <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 8009f12:	b580      	push	{r7, lr}
 8009f14:	b08e      	sub	sp, #56	@ 0x38
 8009f16:	af00      	add	r7, sp, #0
 8009f18:	60f8      	str	r0, [r7, #12]
 8009f1a:	60b9      	str	r1, [r7, #8]
 8009f1c:	607a      	str	r2, [r7, #4]
 8009f1e:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  read_local_version_rp resp;
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8009f20:	f107 0314 	add.w	r3, r7, #20
 8009f24:	2209      	movs	r2, #9
 8009f26:	2100      	movs	r1, #0
 8009f28:	4618      	mov	r0, r3
 8009f2a:	f002 f945 	bl	800c1b8 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009f2e:	f107 0320 	add.w	r3, r7, #32
 8009f32:	2218      	movs	r2, #24
 8009f34:	2100      	movs	r1, #0
 8009f36:	4618      	mov	r0, r3
 8009f38:	f002 f93e 	bl	800c1b8 <memset>
  rq.ogf = OGF_INFO_PARAM;
 8009f3c:	2304      	movs	r3, #4
 8009f3e:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_READ_LOCAL_VERSION;
 8009f40:	2301      	movs	r3, #1
 8009f42:	847b      	strh	r3, [r7, #34]	@ 0x22
  rq.cparam = NULL;
 8009f44:	2300      	movs	r3, #0
 8009f46:	62bb      	str	r3, [r7, #40]	@ 0x28
  rq.clen = 0;
 8009f48:	2300      	movs	r3, #0
 8009f4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  rq.rparam = &resp;
 8009f4c:	f107 0314 	add.w	r3, r7, #20
 8009f50:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 8009f52:	2309      	movs	r3, #9
 8009f54:	637b      	str	r3, [r7, #52]	@ 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 8009f56:	f107 0320 	add.w	r3, r7, #32
 8009f5a:	2100      	movs	r1, #0
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	f000 f95f 	bl	800a220 <hci_send_req>
 8009f62:	4603      	mov	r3, r0
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	da01      	bge.n	8009f6c <hci_le_read_local_version+0x5a>
    return BLE_STATUS_TIMEOUT;
 8009f68:	23ff      	movs	r3, #255	@ 0xff
 8009f6a:	e018      	b.n	8009f9e <hci_le_read_local_version+0x8c>
  
  if (resp.status) {
 8009f6c:	7d3b      	ldrb	r3, [r7, #20]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d001      	beq.n	8009f76 <hci_le_read_local_version+0x64>
    return resp.status;
 8009f72:	7d3b      	ldrb	r3, [r7, #20]
 8009f74:	e013      	b.n	8009f9e <hci_le_read_local_version+0x8c>
  }
  
  
  *hci_version = resp.hci_version;
 8009f76:	7d7a      	ldrb	r2, [r7, #21]
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	701a      	strb	r2, [r3, #0]
  *hci_revision =  btohs(resp.hci_revision);
 8009f7c:	8afa      	ldrh	r2, [r7, #22]
 8009f7e:	68bb      	ldr	r3, [r7, #8]
 8009f80:	801a      	strh	r2, [r3, #0]
  *lmp_pal_version = resp.lmp_pal_version;
 8009f82:	7e3a      	ldrb	r2, [r7, #24]
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	701a      	strb	r2, [r3, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 8009f88:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 8009f8c:	b29a      	uxth	r2, r3
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	801a      	strh	r2, [r3, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 8009f92:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 8009f96:	b29a      	uxth	r2, r3
 8009f98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f9a:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8009f9c:	2300      	movs	r3, #0
}
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	3738      	adds	r7, #56	@ 0x38
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd80      	pop	{r7, pc}

08009fa6 <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 8009fa6:	b580      	push	{r7, lr}
 8009fa8:	b092      	sub	sp, #72	@ 0x48
 8009faa:	af00      	add	r7, sp, #0
 8009fac:	4603      	mov	r3, r0
 8009fae:	6039      	str	r1, [r7, #0]
 8009fb0:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 8009fb2:	f107 0310 	add.w	r3, r7, #16
 8009fb6:	2220      	movs	r2, #32
 8009fb8:	2100      	movs	r1, #0
 8009fba:	4618      	mov	r0, r3
 8009fbc:	f002 f8fc 	bl	800c1b8 <memset>
  scan_resp_cp.length = length;
 8009fc0:	79fb      	ldrb	r3, [r7, #7]
 8009fc2:	743b      	strb	r3, [r7, #16]
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 8009fc4:	79fb      	ldrb	r3, [r7, #7]
 8009fc6:	2b1f      	cmp	r3, #31
 8009fc8:	bf28      	it	cs
 8009fca:	231f      	movcs	r3, #31
 8009fcc:	b2db      	uxtb	r3, r3
 8009fce:	461a      	mov	r2, r3
 8009fd0:	f107 0310 	add.w	r3, r7, #16
 8009fd4:	3301      	adds	r3, #1
 8009fd6:	6839      	ldr	r1, [r7, #0]
 8009fd8:	4618      	mov	r0, r3
 8009fda:	f002 f968 	bl	800c2ae <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009fde:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8009fe2:	2218      	movs	r2, #24
 8009fe4:	2100      	movs	r1, #0
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	f002 f8e6 	bl	800c1b8 <memset>
  rq.ogf = OGF_LE_CTL;
 8009fec:	2308      	movs	r3, #8
 8009fee:	863b      	strh	r3, [r7, #48]	@ 0x30
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 8009ff0:	2309      	movs	r3, #9
 8009ff2:	867b      	strh	r3, [r7, #50]	@ 0x32
  rq.cparam = &scan_resp_cp;
 8009ff4:	f107 0310 	add.w	r3, r7, #16
 8009ff8:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 8009ffa:	2320      	movs	r3, #32
 8009ffc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.rparam = &status;
 8009ffe:	f107 030f 	add.w	r3, r7, #15
 800a002:	643b      	str	r3, [r7, #64]	@ 0x40
  rq.rlen = 1;
 800a004:	2301      	movs	r3, #1
 800a006:	647b      	str	r3, [r7, #68]	@ 0x44
  
  if (hci_send_req(&rq, FALSE) < 0)
 800a008:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800a00c:	2100      	movs	r1, #0
 800a00e:	4618      	mov	r0, r3
 800a010:	f000 f906 	bl	800a220 <hci_send_req>
 800a014:	4603      	mov	r3, r0
 800a016:	2b00      	cmp	r3, #0
 800a018:	da01      	bge.n	800a01e <hci_le_set_scan_resp_data+0x78>
    return BLE_STATUS_TIMEOUT;
 800a01a:	23ff      	movs	r3, #255	@ 0xff
 800a01c:	e000      	b.n	800a020 <hci_le_set_scan_resp_data+0x7a>
  
  return status;
 800a01e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a020:	4618      	mov	r0, r3
 800a022:	3748      	adds	r7, #72	@ 0x48
 800a024:	46bd      	mov	sp, r7
 800a026:	bd80      	pop	{r7, pc}

0800a028 <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 800a028:	b480      	push	{r7}
 800a02a:	b085      	sub	sp, #20
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	3308      	adds	r3, #8
 800a034:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	781b      	ldrb	r3, [r3, #0]
 800a03a:	2b04      	cmp	r3, #4
 800a03c:	d001      	beq.n	800a042 <verify_packet+0x1a>
    return 1; /* Incorrect type */
 800a03e:	2301      	movs	r3, #1
 800a040:	e00c      	b.n	800a05c <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	3302      	adds	r3, #2
 800a046:	781b      	ldrb	r3, [r3, #0]
 800a048:	461a      	mov	r2, r3
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800a050:	3b03      	subs	r3, #3
 800a052:	429a      	cmp	r2, r3
 800a054:	d001      	beq.n	800a05a <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 800a056:	2302      	movs	r3, #2
 800a058:	e000      	b.n	800a05c <verify_packet+0x34>
  
  return 0;      
 800a05a:	2300      	movs	r3, #0
}
 800a05c:	4618      	mov	r0, r3
 800a05e:	3714      	adds	r7, #20
 800a060:	46bd      	mov	sp, r7
 800a062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a066:	4770      	bx	lr

0800a068 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b0a6      	sub	sp, #152	@ 0x98
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	607b      	str	r3, [r7, #4]
 800a070:	4603      	mov	r3, r0
 800a072:	81fb      	strh	r3, [r7, #14]
 800a074:	460b      	mov	r3, r1
 800a076:	81bb      	strh	r3, [r7, #12]
 800a078:	4613      	mov	r3, r2
 800a07a:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 800a07c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800a080:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a084:	b21a      	sxth	r2, r3
 800a086:	89fb      	ldrh	r3, [r7, #14]
 800a088:	029b      	lsls	r3, r3, #10
 800a08a:	b21b      	sxth	r3, r3
 800a08c:	4313      	orrs	r3, r2
 800a08e:	b21b      	sxth	r3, r3
 800a090:	b29b      	uxth	r3, r3
 800a092:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 800a094:	7afb      	ldrb	r3, [r7, #11]
 800a096:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 800a098:	2301      	movs	r3, #1
 800a09a:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 800a09c:	f107 0318 	add.w	r3, r7, #24
 800a0a0:	3301      	adds	r3, #1
 800a0a2:	461a      	mov	r2, r3
 800a0a4:	f107 0314 	add.w	r3, r7, #20
 800a0a8:	8819      	ldrh	r1, [r3, #0]
 800a0aa:	789b      	ldrb	r3, [r3, #2]
 800a0ac:	8011      	strh	r1, [r2, #0]
 800a0ae:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 800a0b0:	f107 0318 	add.w	r3, r7, #24
 800a0b4:	3304      	adds	r3, #4
 800a0b6:	7afa      	ldrb	r2, [r7, #11]
 800a0b8:	6879      	ldr	r1, [r7, #4]
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f002 f8f7 	bl	800c2ae <memcpy>
  
  if (hciContext.io.Send)
 800a0c0:	4b08      	ldr	r3, [pc, #32]	@ (800a0e4 <send_cmd+0x7c>)
 800a0c2:	691b      	ldr	r3, [r3, #16]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d009      	beq.n	800a0dc <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 800a0c8:	4b06      	ldr	r3, [pc, #24]	@ (800a0e4 <send_cmd+0x7c>)
 800a0ca:	691b      	ldr	r3, [r3, #16]
 800a0cc:	7afa      	ldrb	r2, [r7, #11]
 800a0ce:	b292      	uxth	r2, r2
 800a0d0:	3204      	adds	r2, #4
 800a0d2:	b291      	uxth	r1, r2
 800a0d4:	f107 0218 	add.w	r2, r7, #24
 800a0d8:	4610      	mov	r0, r2
 800a0da:	4798      	blx	r3
  }
}
 800a0dc:	bf00      	nop
 800a0de:	3798      	adds	r7, #152	@ 0x98
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bd80      	pop	{r7, pc}
 800a0e4:	20003038 	.word	0x20003038

0800a0e8 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b084      	sub	sp, #16
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
 800a0f0:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 800a0f2:	e00a      	b.n	800a10a <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 800a0f4:	f107 030c 	add.w	r3, r7, #12
 800a0f8:	4619      	mov	r1, r3
 800a0fa:	6838      	ldr	r0, [r7, #0]
 800a0fc:	f000 fae8 	bl	800a6d0 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	4619      	mov	r1, r3
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	f000 fa4f 	bl	800a5a8 <list_insert_head>
  while (!list_is_empty(src_list))
 800a10a:	6838      	ldr	r0, [r7, #0]
 800a10c:	f000 fa2a 	bl	800a564 <list_is_empty>
 800a110:	4603      	mov	r3, r0
 800a112:	2b00      	cmp	r3, #0
 800a114:	d0ee      	beq.n	800a0f4 <move_list+0xc>
  }
}
 800a116:	bf00      	nop
 800a118:	bf00      	nop
 800a11a:	3710      	adds	r7, #16
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bd80      	pop	{r7, pc}

0800a120 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b082      	sub	sp, #8
 800a124:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800a126:	e009      	b.n	800a13c <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 800a128:	1d3b      	adds	r3, r7, #4
 800a12a:	4619      	mov	r1, r3
 800a12c:	4809      	ldr	r0, [pc, #36]	@ (800a154 <free_event_list+0x34>)
 800a12e:	f000 faa8 	bl	800a682 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	4619      	mov	r1, r3
 800a136:	4808      	ldr	r0, [pc, #32]	@ (800a158 <free_event_list+0x38>)
 800a138:	f000 fa5c 	bl	800a5f4 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800a13c:	4806      	ldr	r0, [pc, #24]	@ (800a158 <free_event_list+0x38>)
 800a13e:	f000 faee 	bl	800a71e <list_get_size>
 800a142:	4603      	mov	r3, r0
 800a144:	2b01      	cmp	r3, #1
 800a146:	ddef      	ble.n	800a128 <free_event_list+0x8>
  }
}
 800a148:	bf00      	nop
 800a14a:	bf00      	nop
 800a14c:	3708      	adds	r7, #8
 800a14e:	46bd      	mov	sp, r7
 800a150:	bd80      	pop	{r7, pc}
 800a152:	bf00      	nop
 800a154:	20002d74 	.word	0x20002d74
 800a158:	20002d6c 	.word	0x20002d6c

0800a15c <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b084      	sub	sp, #16
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
 800a164:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d002      	beq.n	800a172 <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 800a16c:	4a18      	ldr	r2, [pc, #96]	@ (800a1d0 <hci_init+0x74>)
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 800a172:	4818      	ldr	r0, [pc, #96]	@ (800a1d4 <hci_init+0x78>)
 800a174:	f000 f9e6 	bl	800a544 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 800a178:	4817      	ldr	r0, [pc, #92]	@ (800a1d8 <hci_init+0x7c>)
 800a17a:	f000 f9e3 	bl	800a544 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 800a17e:	f7f8 fdb3 	bl	8002ce8 <hci_tl_lowlevel_init>
    
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800a182:	2300      	movs	r3, #0
 800a184:	73fb      	strb	r3, [r7, #15]
 800a186:	e00c      	b.n	800a1a2 <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 800a188:	7bfb      	ldrb	r3, [r7, #15]
 800a18a:	228c      	movs	r2, #140	@ 0x8c
 800a18c:	fb02 f303 	mul.w	r3, r2, r3
 800a190:	4a12      	ldr	r2, [pc, #72]	@ (800a1dc <hci_init+0x80>)
 800a192:	4413      	add	r3, r2
 800a194:	4619      	mov	r1, r3
 800a196:	480f      	ldr	r0, [pc, #60]	@ (800a1d4 <hci_init+0x78>)
 800a198:	f000 fa2c 	bl	800a5f4 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800a19c:	7bfb      	ldrb	r3, [r7, #15]
 800a19e:	3301      	adds	r3, #1
 800a1a0:	73fb      	strb	r3, [r7, #15]
 800a1a2:	7bfb      	ldrb	r3, [r7, #15]
 800a1a4:	2b04      	cmp	r3, #4
 800a1a6:	d9ef      	bls.n	800a188 <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 800a1a8:	4b09      	ldr	r3, [pc, #36]	@ (800a1d0 <hci_init+0x74>)
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d003      	beq.n	800a1b8 <hci_init+0x5c>
 800a1b0:	4b07      	ldr	r3, [pc, #28]	@ (800a1d0 <hci_init+0x74>)
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	2000      	movs	r0, #0
 800a1b6:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 800a1b8:	4b05      	ldr	r3, [pc, #20]	@ (800a1d0 <hci_init+0x74>)
 800a1ba:	689b      	ldr	r3, [r3, #8]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d002      	beq.n	800a1c6 <hci_init+0x6a>
 800a1c0:	4b03      	ldr	r3, [pc, #12]	@ (800a1d0 <hci_init+0x74>)
 800a1c2:	689b      	ldr	r3, [r3, #8]
 800a1c4:	4798      	blx	r3
}
 800a1c6:	bf00      	nop
 800a1c8:	3710      	adds	r7, #16
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}
 800a1ce:	bf00      	nop
 800a1d0:	20003038 	.word	0x20003038
 800a1d4:	20002d6c 	.word	0x20002d6c
 800a1d8:	20002d74 	.word	0x20002d74
 800a1dc:	20002d7c 	.word	0x20002d7c

0800a1e0 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 800a1e0:	b480      	push	{r7}
 800a1e2:	b083      	sub	sp, #12
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	4a0b      	ldr	r2, [pc, #44]	@ (800a21c <hci_register_io_bus+0x3c>)
 800a1ee:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	68db      	ldr	r3, [r3, #12]
 800a1f4:	4a09      	ldr	r2, [pc, #36]	@ (800a21c <hci_register_io_bus+0x3c>)
 800a1f6:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	691b      	ldr	r3, [r3, #16]
 800a1fc:	4a07      	ldr	r2, [pc, #28]	@ (800a21c <hci_register_io_bus+0x3c>)
 800a1fe:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	699b      	ldr	r3, [r3, #24]
 800a204:	4a05      	ldr	r2, [pc, #20]	@ (800a21c <hci_register_io_bus+0x3c>)
 800a206:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	689b      	ldr	r3, [r3, #8]
 800a20c:	4a03      	ldr	r2, [pc, #12]	@ (800a21c <hci_register_io_bus+0x3c>)
 800a20e:	6093      	str	r3, [r2, #8]
}
 800a210:	bf00      	nop
 800a212:	370c      	adds	r7, #12
 800a214:	46bd      	mov	sp, r7
 800a216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21a:	4770      	bx	lr
 800a21c:	20003038 	.word	0x20003038

0800a220 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b08e      	sub	sp, #56	@ 0x38
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
 800a228:	460b      	mov	r3, r1
 800a22a:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	885b      	ldrh	r3, [r3, #2]
 800a230:	b21b      	sxth	r3, r3
 800a232:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a236:	b21a      	sxth	r2, r3
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	881b      	ldrh	r3, [r3, #0]
 800a23c:	029b      	lsls	r3, r3, #10
 800a23e:	b21b      	sxth	r3, r3
 800a240:	4313      	orrs	r3, r2
 800a242:	b21b      	sxth	r3, r3
 800a244:	86fb      	strh	r3, [r7, #54]	@ 0x36
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 800a246:	2300      	movs	r3, #0
 800a248:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 800a24a:	f107 0308 	add.w	r3, r7, #8
 800a24e:	4618      	mov	r0, r3
 800a250:	f000 f978 	bl	800a544 <list_init_head>

  free_event_list();
 800a254:	f7ff ff64 	bl	800a120 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	8818      	ldrh	r0, [r3, #0]
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	8859      	ldrh	r1, [r3, #2]
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	68db      	ldr	r3, [r3, #12]
 800a264:	b2da      	uxtb	r2, r3
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	689b      	ldr	r3, [r3, #8]
 800a26a:	f7ff fefd 	bl	800a068 <send_cmd>
  
  if (async)
 800a26e:	78fb      	ldrb	r3, [r7, #3]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d001      	beq.n	800a278 <hci_send_req+0x58>
  {
    return 0;
 800a274:	2300      	movs	r3, #0
 800a276:	e0e2      	b.n	800a43e <hci_send_req+0x21e>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 800a278:	f7fa face 	bl	8004818 <HAL_GetTick>
 800a27c:	6338      	str	r0, [r7, #48]	@ 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800a27e:	f7fa facb 	bl	8004818 <HAL_GetTick>
 800a282:	4602      	mov	r2, r0
 800a284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a286:	1ad3      	subs	r3, r2, r3
 800a288:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a28c:	f200 80b3 	bhi.w	800a3f6 <hci_send_req+0x1d6>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 800a290:	486d      	ldr	r0, [pc, #436]	@ (800a448 <hci_send_req+0x228>)
 800a292:	f000 f967 	bl	800a564 <list_is_empty>
 800a296:	4603      	mov	r3, r0
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d000      	beq.n	800a29e <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800a29c:	e7ef      	b.n	800a27e <hci_send_req+0x5e>
      {
        break;
 800a29e:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 800a2a0:	f107 0310 	add.w	r3, r7, #16
 800a2a4:	4619      	mov	r1, r3
 800a2a6:	4868      	ldr	r0, [pc, #416]	@ (800a448 <hci_send_req+0x228>)
 800a2a8:	f000 f9eb 	bl	800a682 <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 800a2ac:	693b      	ldr	r3, [r7, #16]
 800a2ae:	3308      	adds	r3, #8
 800a2b0:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 800a2b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2b4:	781b      	ldrb	r3, [r3, #0]
 800a2b6:	2b04      	cmp	r3, #4
 800a2b8:	d17f      	bne.n	800a3ba <hci_send_req+0x19a>
    {
      event_pckt = (void *)(hci_hdr->data);
 800a2ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2bc:	3301      	adds	r3, #1
 800a2be:	62bb      	str	r3, [r7, #40]	@ 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 800a2c0:	693b      	ldr	r3, [r7, #16]
 800a2c2:	3308      	adds	r3, #8
 800a2c4:	3303      	adds	r3, #3
 800a2c6:	627b      	str	r3, [r7, #36]	@ 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 800a2c8:	693b      	ldr	r3, [r7, #16]
 800a2ca:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800a2ce:	3b03      	subs	r3, #3
 800a2d0:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 800a2d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2d4:	781b      	ldrb	r3, [r3, #0]
 800a2d6:	2b3e      	cmp	r3, #62	@ 0x3e
 800a2d8:	d04c      	beq.n	800a374 <hci_send_req+0x154>
 800a2da:	2b3e      	cmp	r3, #62	@ 0x3e
 800a2dc:	dc68      	bgt.n	800a3b0 <hci_send_req+0x190>
 800a2de:	2b10      	cmp	r3, #16
 800a2e0:	f000 808b 	beq.w	800a3fa <hci_send_req+0x1da>
 800a2e4:	2b10      	cmp	r3, #16
 800a2e6:	dc63      	bgt.n	800a3b0 <hci_send_req+0x190>
 800a2e8:	2b0e      	cmp	r3, #14
 800a2ea:	d023      	beq.n	800a334 <hci_send_req+0x114>
 800a2ec:	2b0f      	cmp	r3, #15
 800a2ee:	d15f      	bne.n	800a3b0 <hci_send_req+0x190>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 800a2f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2f2:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 800a2f4:	69bb      	ldr	r3, [r7, #24]
 800a2f6:	885b      	ldrh	r3, [r3, #2]
 800a2f8:	b29b      	uxth	r3, r3
 800a2fa:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a2fc:	429a      	cmp	r2, r3
 800a2fe:	d17e      	bne.n	800a3fe <hci_send_req+0x1de>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	685b      	ldr	r3, [r3, #4]
 800a304:	2b0f      	cmp	r3, #15
 800a306:	d004      	beq.n	800a312 <hci_send_req+0xf2>
          if (cs->status) {
 800a308:	69bb      	ldr	r3, [r7, #24]
 800a30a:	781b      	ldrb	r3, [r3, #0]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d051      	beq.n	800a3b4 <hci_send_req+0x194>
            goto failed;
 800a310:	e078      	b.n	800a404 <hci_send_req+0x1e4>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	695a      	ldr	r2, [r3, #20]
 800a316:	6a3b      	ldr	r3, [r7, #32]
 800a318:	429a      	cmp	r2, r3
 800a31a:	bf28      	it	cs
 800a31c:	461a      	movcs	r2, r3
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6918      	ldr	r0, [r3, #16]
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	695b      	ldr	r3, [r3, #20]
 800a32a:	461a      	mov	r2, r3
 800a32c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a32e:	f001 ffbe 	bl	800c2ae <memcpy>
        goto done;
 800a332:	e078      	b.n	800a426 <hci_send_req+0x206>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 800a334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a336:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 800a338:	697b      	ldr	r3, [r7, #20]
 800a33a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a33e:	b29b      	uxth	r3, r3
 800a340:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a342:	429a      	cmp	r2, r3
 800a344:	d15d      	bne.n	800a402 <hci_send_req+0x1e2>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 800a346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a348:	3303      	adds	r3, #3
 800a34a:	627b      	str	r3, [r7, #36]	@ 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 800a34c:	6a3b      	ldr	r3, [r7, #32]
 800a34e:	3b03      	subs	r3, #3
 800a350:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	695a      	ldr	r2, [r3, #20]
 800a356:	6a3b      	ldr	r3, [r7, #32]
 800a358:	429a      	cmp	r2, r3
 800a35a:	bf28      	it	cs
 800a35c:	461a      	movcs	r2, r3
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	6918      	ldr	r0, [r3, #16]
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	695b      	ldr	r3, [r3, #20]
 800a36a:	461a      	mov	r2, r3
 800a36c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a36e:	f001 ff9e 	bl	800c2ae <memcpy>
        goto done;
 800a372:	e058      	b.n	800a426 <hci_send_req+0x206>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 800a374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a376:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 800a378:	69fb      	ldr	r3, [r7, #28]
 800a37a:	781b      	ldrb	r3, [r3, #0]
 800a37c:	461a      	mov	r2, r3
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	685b      	ldr	r3, [r3, #4]
 800a382:	429a      	cmp	r2, r3
 800a384:	d118      	bne.n	800a3b8 <hci_send_req+0x198>
          break;
      
        len -= 1;
 800a386:	6a3b      	ldr	r3, [r7, #32]
 800a388:	3b01      	subs	r3, #1
 800a38a:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	695a      	ldr	r2, [r3, #20]
 800a390:	6a3b      	ldr	r3, [r7, #32]
 800a392:	429a      	cmp	r2, r3
 800a394:	bf28      	it	cs
 800a396:	461a      	movcs	r2, r3
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	6918      	ldr	r0, [r3, #16]
 800a3a0:	69fb      	ldr	r3, [r7, #28]
 800a3a2:	1c59      	adds	r1, r3, #1
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	695b      	ldr	r3, [r3, #20]
 800a3a8:	461a      	mov	r2, r3
 800a3aa:	f001 ff80 	bl	800c2ae <memcpy>
        goto done;
 800a3ae:	e03a      	b.n	800a426 <hci_send_req+0x206>
      
      case EVT_HARDWARE_ERROR:            
        goto failed;
      
      default:      
        break;
 800a3b0:	bf00      	nop
 800a3b2:	e002      	b.n	800a3ba <hci_send_req+0x19a>
          break;
 800a3b4:	bf00      	nop
 800a3b6:	e000      	b.n	800a3ba <hci_send_req+0x19a>
          break;
 800a3b8:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 800a3ba:	4824      	ldr	r0, [pc, #144]	@ (800a44c <hci_send_req+0x22c>)
 800a3bc:	f000 f8d2 	bl	800a564 <list_is_empty>
 800a3c0:	4603      	mov	r3, r0
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d00d      	beq.n	800a3e2 <hci_send_req+0x1c2>
 800a3c6:	4820      	ldr	r0, [pc, #128]	@ (800a448 <hci_send_req+0x228>)
 800a3c8:	f000 f8cc 	bl	800a564 <list_is_empty>
 800a3cc:	4603      	mov	r3, r0
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d007      	beq.n	800a3e2 <hci_send_req+0x1c2>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800a3d2:	693b      	ldr	r3, [r7, #16]
 800a3d4:	4619      	mov	r1, r3
 800a3d6:	481d      	ldr	r0, [pc, #116]	@ (800a44c <hci_send_req+0x22c>)
 800a3d8:	f000 f90c 	bl	800a5f4 <list_insert_tail>
      hciReadPacket=NULL;
 800a3dc:	2300      	movs	r3, #0
 800a3de:	613b      	str	r3, [r7, #16]
 800a3e0:	e008      	b.n	800a3f4 <hci_send_req+0x1d4>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 800a3e2:	693a      	ldr	r2, [r7, #16]
 800a3e4:	f107 0308 	add.w	r3, r7, #8
 800a3e8:	4611      	mov	r1, r2
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	f000 f902 	bl	800a5f4 <list_insert_tail>
      hciReadPacket=NULL;
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	613b      	str	r3, [r7, #16]
  {
 800a3f4:	e740      	b.n	800a278 <hci_send_req+0x58>
        goto failed;
 800a3f6:	bf00      	nop
 800a3f8:	e004      	b.n	800a404 <hci_send_req+0x1e4>
        goto failed;
 800a3fa:	bf00      	nop
 800a3fc:	e002      	b.n	800a404 <hci_send_req+0x1e4>
          goto failed;
 800a3fe:	bf00      	nop
 800a400:	e000      	b.n	800a404 <hci_send_req+0x1e4>
          goto failed;
 800a402:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 800a404:	693b      	ldr	r3, [r7, #16]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d004      	beq.n	800a414 <hci_send_req+0x1f4>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800a40a:	693b      	ldr	r3, [r7, #16]
 800a40c:	4619      	mov	r1, r3
 800a40e:	480f      	ldr	r0, [pc, #60]	@ (800a44c <hci_send_req+0x22c>)
 800a410:	f000 f8ca 	bl	800a5a8 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800a414:	f107 0308 	add.w	r3, r7, #8
 800a418:	4619      	mov	r1, r3
 800a41a:	480b      	ldr	r0, [pc, #44]	@ (800a448 <hci_send_req+0x228>)
 800a41c:	f7ff fe64 	bl	800a0e8 <move_list>

  return -1;
 800a420:	f04f 33ff 	mov.w	r3, #4294967295
 800a424:	e00b      	b.n	800a43e <hci_send_req+0x21e>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 800a426:	693b      	ldr	r3, [r7, #16]
 800a428:	4619      	mov	r1, r3
 800a42a:	4808      	ldr	r0, [pc, #32]	@ (800a44c <hci_send_req+0x22c>)
 800a42c:	f000 f8bc 	bl	800a5a8 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800a430:	f107 0308 	add.w	r3, r7, #8
 800a434:	4619      	mov	r1, r3
 800a436:	4804      	ldr	r0, [pc, #16]	@ (800a448 <hci_send_req+0x228>)
 800a438:	f7ff fe56 	bl	800a0e8 <move_list>

  return 0;
 800a43c:	2300      	movs	r3, #0
}
 800a43e:	4618      	mov	r0, r3
 800a440:	3738      	adds	r7, #56	@ 0x38
 800a442:	46bd      	mov	sp, r7
 800a444:	bd80      	pop	{r7, pc}
 800a446:	bf00      	nop
 800a448:	20002d74 	.word	0x20002d74
 800a44c:	20002d6c 	.word	0x20002d6c

0800a450 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b082      	sub	sp, #8
 800a454:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 800a456:	2300      	movs	r3, #0
 800a458:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800a45a:	e013      	b.n	800a484 <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 800a45c:	1d3b      	adds	r3, r7, #4
 800a45e:	4619      	mov	r1, r3
 800a460:	480e      	ldr	r0, [pc, #56]	@ (800a49c <hci_user_evt_proc+0x4c>)
 800a462:	f000 f90e 	bl	800a682 <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800a466:	4b0e      	ldr	r3, [pc, #56]	@ (800a4a0 <hci_user_evt_proc+0x50>)
 800a468:	69db      	ldr	r3, [r3, #28]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d005      	beq.n	800a47a <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 800a46e:	4b0c      	ldr	r3, [pc, #48]	@ (800a4a0 <hci_user_evt_proc+0x50>)
 800a470:	69db      	ldr	r3, [r3, #28]
 800a472:	687a      	ldr	r2, [r7, #4]
 800a474:	3208      	adds	r2, #8
 800a476:	4610      	mov	r0, r2
 800a478:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	4619      	mov	r1, r3
 800a47e:	4809      	ldr	r0, [pc, #36]	@ (800a4a4 <hci_user_evt_proc+0x54>)
 800a480:	f000 f8b8 	bl	800a5f4 <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800a484:	4805      	ldr	r0, [pc, #20]	@ (800a49c <hci_user_evt_proc+0x4c>)
 800a486:	f000 f86d 	bl	800a564 <list_is_empty>
 800a48a:	4603      	mov	r3, r0
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d0e5      	beq.n	800a45c <hci_user_evt_proc+0xc>
  }
}
 800a490:	bf00      	nop
 800a492:	bf00      	nop
 800a494:	3708      	adds	r7, #8
 800a496:	46bd      	mov	sp, r7
 800a498:	bd80      	pop	{r7, pc}
 800a49a:	bf00      	nop
 800a49c:	20002d74 	.word	0x20002d74
 800a4a0:	20003038 	.word	0x20003038
 800a4a4:	20002d6c 	.word	0x20002d6c

0800a4a8 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b086      	sub	sp, #24
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 800a4b8:	481f      	ldr	r0, [pc, #124]	@ (800a538 <hci_notify_asynch_evt+0x90>)
 800a4ba:	f000 f853 	bl	800a564 <list_is_empty>
 800a4be:	4603      	mov	r3, r0
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d132      	bne.n	800a52a <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 800a4c4:	f107 030c 	add.w	r3, r7, #12
 800a4c8:	4619      	mov	r1, r3
 800a4ca:	481b      	ldr	r0, [pc, #108]	@ (800a538 <hci_notify_asynch_evt+0x90>)
 800a4cc:	f000 f8d9 	bl	800a682 <list_remove_head>
    
    if (hciContext.io.Receive)
 800a4d0:	4b1a      	ldr	r3, [pc, #104]	@ (800a53c <hci_notify_asynch_evt+0x94>)
 800a4d2:	68db      	ldr	r3, [r3, #12]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d02a      	beq.n	800a52e <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 800a4d8:	4b18      	ldr	r3, [pc, #96]	@ (800a53c <hci_notify_asynch_evt+0x94>)
 800a4da:	68db      	ldr	r3, [r3, #12]
 800a4dc:	68fa      	ldr	r2, [r7, #12]
 800a4de:	3208      	adds	r2, #8
 800a4e0:	2180      	movs	r1, #128	@ 0x80
 800a4e2:	4610      	mov	r0, r2
 800a4e4:	4798      	blx	r3
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 800a4ea:	7cfb      	ldrb	r3, [r7, #19]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d016      	beq.n	800a51e <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	7cfa      	ldrb	r2, [r7, #19]
 800a4f4:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
        if (verify_packet(hciReadPacket) == 0)
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	f7ff fd94 	bl	800a028 <verify_packet>
 800a500:	4603      	mov	r3, r0
 800a502:	2b00      	cmp	r3, #0
 800a504:	d105      	bne.n	800a512 <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	4619      	mov	r1, r3
 800a50a:	480d      	ldr	r0, [pc, #52]	@ (800a540 <hci_notify_asynch_evt+0x98>)
 800a50c:	f000 f872 	bl	800a5f4 <list_insert_tail>
 800a510:	e00d      	b.n	800a52e <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	4619      	mov	r1, r3
 800a516:	4808      	ldr	r0, [pc, #32]	@ (800a538 <hci_notify_asynch_evt+0x90>)
 800a518:	f000 f846 	bl	800a5a8 <list_insert_head>
 800a51c:	e007      	b.n	800a52e <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	4619      	mov	r1, r3
 800a522:	4805      	ldr	r0, [pc, #20]	@ (800a538 <hci_notify_asynch_evt+0x90>)
 800a524:	f000 f840 	bl	800a5a8 <list_insert_head>
 800a528:	e001      	b.n	800a52e <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 800a52a:	2301      	movs	r3, #1
 800a52c:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800a52e:	697b      	ldr	r3, [r7, #20]

}
 800a530:	4618      	mov	r0, r3
 800a532:	3718      	adds	r7, #24
 800a534:	46bd      	mov	sp, r7
 800a536:	bd80      	pop	{r7, pc}
 800a538:	20002d6c 	.word	0x20002d6c
 800a53c:	20003038 	.word	0x20003038
 800a540:	20002d74 	.word	0x20002d74

0800a544 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 800a544:	b480      	push	{r7}
 800a546:	b083      	sub	sp, #12
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	687a      	ldr	r2, [r7, #4]
 800a550:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	687a      	ldr	r2, [r7, #4]
 800a556:	605a      	str	r2, [r3, #4]
}
 800a558:	bf00      	nop
 800a55a:	370c      	adds	r7, #12
 800a55c:	46bd      	mov	sp, r7
 800a55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a562:	4770      	bx	lr

0800a564 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 800a564:	b480      	push	{r7}
 800a566:	b087      	sub	sp, #28
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a56c:	f3ef 8310 	mrs	r3, PRIMASK
 800a570:	60fb      	str	r3, [r7, #12]
  return(result);
 800a572:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a574:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800a576:	b672      	cpsid	i
}
 800a578:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	687a      	ldr	r2, [r7, #4]
 800a580:	429a      	cmp	r2, r3
 800a582:	d102      	bne.n	800a58a <list_is_empty+0x26>
  {
    return_value = 1;
 800a584:	2301      	movs	r3, #1
 800a586:	75fb      	strb	r3, [r7, #23]
 800a588:	e001      	b.n	800a58e <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 800a58a:	2300      	movs	r3, #0
 800a58c:	75fb      	strb	r3, [r7, #23]
 800a58e:	693b      	ldr	r3, [r7, #16]
 800a590:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	f383 8810 	msr	PRIMASK, r3
}
 800a598:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 800a59a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a59c:	4618      	mov	r0, r3
 800a59e:	371c      	adds	r7, #28
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a6:	4770      	bx	lr

0800a5a8 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 800a5a8:	b480      	push	{r7}
 800a5aa:	b087      	sub	sp, #28
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
 800a5b0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a5b2:	f3ef 8310 	mrs	r3, PRIMASK
 800a5b6:	60fb      	str	r3, [r7, #12]
  return(result);
 800a5b8:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a5ba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a5bc:	b672      	cpsid	i
}
 800a5be:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681a      	ldr	r2, [r3, #0]
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	687a      	ldr	r2, [r7, #4]
 800a5cc:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	683a      	ldr	r2, [r7, #0]
 800a5d2:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	683a      	ldr	r2, [r7, #0]
 800a5da:	605a      	str	r2, [r3, #4]
 800a5dc:	697b      	ldr	r3, [r7, #20]
 800a5de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a5e0:	693b      	ldr	r3, [r7, #16]
 800a5e2:	f383 8810 	msr	PRIMASK, r3
}
 800a5e6:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800a5e8:	bf00      	nop
 800a5ea:	371c      	adds	r7, #28
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f2:	4770      	bx	lr

0800a5f4 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	b087      	sub	sp, #28
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
 800a5fc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a5fe:	f3ef 8310 	mrs	r3, PRIMASK
 800a602:	60fb      	str	r3, [r7, #12]
  return(result);
 800a604:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a606:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a608:	b672      	cpsid	i
}
 800a60a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	687a      	ldr	r2, [r7, #4]
 800a610:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	685a      	ldr	r2, [r3, #4]
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	683a      	ldr	r2, [r7, #0]
 800a61e:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800a620:	683b      	ldr	r3, [r7, #0]
 800a622:	685b      	ldr	r3, [r3, #4]
 800a624:	683a      	ldr	r2, [r7, #0]
 800a626:	601a      	str	r2, [r3, #0]
 800a628:	697b      	ldr	r3, [r7, #20]
 800a62a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a62c:	693b      	ldr	r3, [r7, #16]
 800a62e:	f383 8810 	msr	PRIMASK, r3
}
 800a632:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800a634:	bf00      	nop
 800a636:	371c      	adds	r7, #28
 800a638:	46bd      	mov	sp, r7
 800a63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63e:	4770      	bx	lr

0800a640 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 800a640:	b480      	push	{r7}
 800a642:	b087      	sub	sp, #28
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a648:	f3ef 8310 	mrs	r3, PRIMASK
 800a64c:	60fb      	str	r3, [r7, #12]
  return(result);
 800a64e:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a650:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a652:	b672      	cpsid	i
}
 800a654:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	685b      	ldr	r3, [r3, #4]
 800a65a:	687a      	ldr	r2, [r7, #4]
 800a65c:	6812      	ldr	r2, [r2, #0]
 800a65e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	687a      	ldr	r2, [r7, #4]
 800a666:	6852      	ldr	r2, [r2, #4]
 800a668:	605a      	str	r2, [r3, #4]
 800a66a:	697b      	ldr	r3, [r7, #20]
 800a66c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a66e:	693b      	ldr	r3, [r7, #16]
 800a670:	f383 8810 	msr	PRIMASK, r3
}
 800a674:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800a676:	bf00      	nop
 800a678:	371c      	adds	r7, #28
 800a67a:	46bd      	mov	sp, r7
 800a67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a680:	4770      	bx	lr

0800a682 <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 800a682:	b580      	push	{r7, lr}
 800a684:	b086      	sub	sp, #24
 800a686:	af00      	add	r7, sp, #0
 800a688:	6078      	str	r0, [r7, #4]
 800a68a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a68c:	f3ef 8310 	mrs	r3, PRIMASK
 800a690:	60fb      	str	r3, [r7, #12]
  return(result);
 800a692:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a694:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a696:	b672      	cpsid	i
}
 800a698:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681a      	ldr	r2, [r3, #0]
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	f7ff ffca 	bl	800a640 <list_remove_node>
  (*node)->next = NULL;
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	605a      	str	r2, [r3, #4]
 800a6bc:	697b      	ldr	r3, [r7, #20]
 800a6be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a6c0:	693b      	ldr	r3, [r7, #16]
 800a6c2:	f383 8810 	msr	PRIMASK, r3
}
 800a6c6:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800a6c8:	bf00      	nop
 800a6ca:	3718      	adds	r7, #24
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	bd80      	pop	{r7, pc}

0800a6d0 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b086      	sub	sp, #24
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
 800a6d8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a6da:	f3ef 8310 	mrs	r3, PRIMASK
 800a6de:	60fb      	str	r3, [r7, #12]
  return(result);
 800a6e0:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a6e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a6e4:	b672      	cpsid	i
}
 800a6e6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	685a      	ldr	r2, [r3, #4]
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	685b      	ldr	r3, [r3, #4]
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	f7ff ffa3 	bl	800a640 <list_remove_node>
  (*node)->next = NULL;
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	2200      	movs	r2, #0
 800a700:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	2200      	movs	r2, #0
 800a708:	605a      	str	r2, [r3, #4]
 800a70a:	697b      	ldr	r3, [r7, #20]
 800a70c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a70e:	693b      	ldr	r3, [r7, #16]
 800a710:	f383 8810 	msr	PRIMASK, r3
}
 800a714:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800a716:	bf00      	nop
 800a718:	3718      	adds	r7, #24
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bd80      	pop	{r7, pc}

0800a71e <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 800a71e:	b480      	push	{r7}
 800a720:	b089      	sub	sp, #36	@ 0x24
 800a722:	af00      	add	r7, sp, #0
 800a724:	6078      	str	r0, [r7, #4]
  int size = 0;
 800a726:	2300      	movs	r3, #0
 800a728:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a72a:	f3ef 8310 	mrs	r3, PRIMASK
 800a72e:	613b      	str	r3, [r7, #16]
  return(result);
 800a730:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a732:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a734:	b672      	cpsid	i
}
 800a736:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800a73e:	e005      	b.n	800a74c <list_get_size+0x2e>
  {
    size++;
 800a740:	69fb      	ldr	r3, [r7, #28]
 800a742:	3301      	adds	r3, #1
 800a744:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 800a746:	69bb      	ldr	r3, [r7, #24]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800a74c:	69ba      	ldr	r2, [r7, #24]
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	429a      	cmp	r2, r3
 800a752:	d1f5      	bne.n	800a740 <list_get_size+0x22>
 800a754:	697b      	ldr	r3, [r7, #20]
 800a756:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	f383 8810 	msr	PRIMASK, r3
}
 800a75e:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 800a760:	69fb      	ldr	r3, [r7, #28]
}
 800a762:	4618      	mov	r0, r3
 800a764:	3724      	adds	r7, #36	@ 0x24
 800a766:	46bd      	mov	sp, r7
 800a768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76c:	4770      	bx	lr

0800a76e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a76e:	b480      	push	{r7}
 800a770:	b085      	sub	sp, #20
 800a772:	af00      	add	r7, sp, #0
 800a774:	4603      	mov	r3, r0
 800a776:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a778:	2300      	movs	r3, #0
 800a77a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a77c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a780:	2b84      	cmp	r3, #132	@ 0x84
 800a782:	d005      	beq.n	800a790 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a784:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	4413      	add	r3, r2
 800a78c:	3303      	adds	r3, #3
 800a78e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a790:	68fb      	ldr	r3, [r7, #12]
}
 800a792:	4618      	mov	r0, r3
 800a794:	3714      	adds	r7, #20
 800a796:	46bd      	mov	sp, r7
 800a798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79c:	4770      	bx	lr

0800a79e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a79e:	b580      	push	{r7, lr}
 800a7a0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a7a2:	f000 fae5 	bl	800ad70 <vTaskStartScheduler>
  
  return osOK;
 800a7a6:	2300      	movs	r3, #0
}
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	bd80      	pop	{r7, pc}

0800a7ac <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a7ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7ae:	b089      	sub	sp, #36	@ 0x24
 800a7b0:	af04      	add	r7, sp, #16
 800a7b2:	6078      	str	r0, [r7, #4]
 800a7b4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	695b      	ldr	r3, [r3, #20]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d020      	beq.n	800a800 <osThreadCreate+0x54>
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	699b      	ldr	r3, [r3, #24]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d01c      	beq.n	800a800 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	685c      	ldr	r4, [r3, #4]
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	691e      	ldr	r6, [r3, #16]
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a7d8:	4618      	mov	r0, r3
 800a7da:	f7ff ffc8 	bl	800a76e <makeFreeRtosPriority>
 800a7de:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	695b      	ldr	r3, [r3, #20]
 800a7e4:	687a      	ldr	r2, [r7, #4]
 800a7e6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a7e8:	9202      	str	r2, [sp, #8]
 800a7ea:	9301      	str	r3, [sp, #4]
 800a7ec:	9100      	str	r1, [sp, #0]
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	4632      	mov	r2, r6
 800a7f2:	4629      	mov	r1, r5
 800a7f4:	4620      	mov	r0, r4
 800a7f6:	f000 f8ed 	bl	800a9d4 <xTaskCreateStatic>
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	60fb      	str	r3, [r7, #12]
 800a7fe:	e01c      	b.n	800a83a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	685c      	ldr	r4, [r3, #4]
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a80c:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a814:	4618      	mov	r0, r3
 800a816:	f7ff ffaa 	bl	800a76e <makeFreeRtosPriority>
 800a81a:	4602      	mov	r2, r0
 800a81c:	f107 030c 	add.w	r3, r7, #12
 800a820:	9301      	str	r3, [sp, #4]
 800a822:	9200      	str	r2, [sp, #0]
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	4632      	mov	r2, r6
 800a828:	4629      	mov	r1, r5
 800a82a:	4620      	mov	r0, r4
 800a82c:	f000 f932 	bl	800aa94 <xTaskCreate>
 800a830:	4603      	mov	r3, r0
 800a832:	2b01      	cmp	r3, #1
 800a834:	d001      	beq.n	800a83a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a836:	2300      	movs	r3, #0
 800a838:	e000      	b.n	800a83c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a83a:	68fb      	ldr	r3, [r7, #12]
}
 800a83c:	4618      	mov	r0, r3
 800a83e:	3714      	adds	r7, #20
 800a840:	46bd      	mov	sp, r7
 800a842:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a844 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b084      	sub	sp, #16
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d001      	beq.n	800a85a <osDelay+0x16>
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	e000      	b.n	800a85c <osDelay+0x18>
 800a85a:	2301      	movs	r3, #1
 800a85c:	4618      	mov	r0, r3
 800a85e:	f000 fa51 	bl	800ad04 <vTaskDelay>
  
  return osOK;
 800a862:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a864:	4618      	mov	r0, r3
 800a866:	3710      	adds	r7, #16
 800a868:	46bd      	mov	sp, r7
 800a86a:	bd80      	pop	{r7, pc}

0800a86c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a86c:	b480      	push	{r7}
 800a86e:	b083      	sub	sp, #12
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	f103 0208 	add.w	r2, r3, #8
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	f04f 32ff 	mov.w	r2, #4294967295
 800a884:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	f103 0208 	add.w	r2, r3, #8
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f103 0208 	add.w	r2, r3, #8
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	2200      	movs	r2, #0
 800a89e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a8a0:	bf00      	nop
 800a8a2:	370c      	adds	r7, #12
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8aa:	4770      	bx	lr

0800a8ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a8ac:	b480      	push	{r7}
 800a8ae:	b083      	sub	sp, #12
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a8ba:	bf00      	nop
 800a8bc:	370c      	adds	r7, #12
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c4:	4770      	bx	lr

0800a8c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a8c6:	b480      	push	{r7}
 800a8c8:	b085      	sub	sp, #20
 800a8ca:	af00      	add	r7, sp, #0
 800a8cc:	6078      	str	r0, [r7, #4]
 800a8ce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	685b      	ldr	r3, [r3, #4]
 800a8d4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	68fa      	ldr	r2, [r7, #12]
 800a8da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	689a      	ldr	r2, [r3, #8]
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	689b      	ldr	r3, [r3, #8]
 800a8e8:	683a      	ldr	r2, [r7, #0]
 800a8ea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	683a      	ldr	r2, [r7, #0]
 800a8f0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	687a      	ldr	r2, [r7, #4]
 800a8f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	1c5a      	adds	r2, r3, #1
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	601a      	str	r2, [r3, #0]
}
 800a902:	bf00      	nop
 800a904:	3714      	adds	r7, #20
 800a906:	46bd      	mov	sp, r7
 800a908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90c:	4770      	bx	lr

0800a90e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a90e:	b480      	push	{r7}
 800a910:	b085      	sub	sp, #20
 800a912:	af00      	add	r7, sp, #0
 800a914:	6078      	str	r0, [r7, #4]
 800a916:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a91e:	68bb      	ldr	r3, [r7, #8]
 800a920:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a924:	d103      	bne.n	800a92e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	691b      	ldr	r3, [r3, #16]
 800a92a:	60fb      	str	r3, [r7, #12]
 800a92c:	e00c      	b.n	800a948 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	3308      	adds	r3, #8
 800a932:	60fb      	str	r3, [r7, #12]
 800a934:	e002      	b.n	800a93c <vListInsert+0x2e>
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	685b      	ldr	r3, [r3, #4]
 800a93a:	60fb      	str	r3, [r7, #12]
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	685b      	ldr	r3, [r3, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	68ba      	ldr	r2, [r7, #8]
 800a944:	429a      	cmp	r2, r3
 800a946:	d2f6      	bcs.n	800a936 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	685a      	ldr	r2, [r3, #4]
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a950:	683b      	ldr	r3, [r7, #0]
 800a952:	685b      	ldr	r3, [r3, #4]
 800a954:	683a      	ldr	r2, [r7, #0]
 800a956:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	68fa      	ldr	r2, [r7, #12]
 800a95c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	683a      	ldr	r2, [r7, #0]
 800a962:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	687a      	ldr	r2, [r7, #4]
 800a968:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	1c5a      	adds	r2, r3, #1
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	601a      	str	r2, [r3, #0]
}
 800a974:	bf00      	nop
 800a976:	3714      	adds	r7, #20
 800a978:	46bd      	mov	sp, r7
 800a97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97e:	4770      	bx	lr

0800a980 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a980:	b480      	push	{r7}
 800a982:	b085      	sub	sp, #20
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	691b      	ldr	r3, [r3, #16]
 800a98c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	685b      	ldr	r3, [r3, #4]
 800a992:	687a      	ldr	r2, [r7, #4]
 800a994:	6892      	ldr	r2, [r2, #8]
 800a996:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	689b      	ldr	r3, [r3, #8]
 800a99c:	687a      	ldr	r2, [r7, #4]
 800a99e:	6852      	ldr	r2, [r2, #4]
 800a9a0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	685b      	ldr	r3, [r3, #4]
 800a9a6:	687a      	ldr	r2, [r7, #4]
 800a9a8:	429a      	cmp	r2, r3
 800a9aa:	d103      	bne.n	800a9b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	689a      	ldr	r2, [r3, #8]
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	1e5a      	subs	r2, r3, #1
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	681b      	ldr	r3, [r3, #0]
}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	3714      	adds	r7, #20
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d2:	4770      	bx	lr

0800a9d4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b08e      	sub	sp, #56	@ 0x38
 800a9d8:	af04      	add	r7, sp, #16
 800a9da:	60f8      	str	r0, [r7, #12]
 800a9dc:	60b9      	str	r1, [r7, #8]
 800a9de:	607a      	str	r2, [r7, #4]
 800a9e0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a9e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d10b      	bne.n	800aa00 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a9e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9ec:	f383 8811 	msr	BASEPRI, r3
 800a9f0:	f3bf 8f6f 	isb	sy
 800a9f4:	f3bf 8f4f 	dsb	sy
 800a9f8:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a9fa:	bf00      	nop
 800a9fc:	bf00      	nop
 800a9fe:	e7fd      	b.n	800a9fc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800aa00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d10b      	bne.n	800aa1e <xTaskCreateStatic+0x4a>
	__asm volatile
 800aa06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa0a:	f383 8811 	msr	BASEPRI, r3
 800aa0e:	f3bf 8f6f 	isb	sy
 800aa12:	f3bf 8f4f 	dsb	sy
 800aa16:	61fb      	str	r3, [r7, #28]
}
 800aa18:	bf00      	nop
 800aa1a:	bf00      	nop
 800aa1c:	e7fd      	b.n	800aa1a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800aa1e:	2354      	movs	r3, #84	@ 0x54
 800aa20:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800aa22:	693b      	ldr	r3, [r7, #16]
 800aa24:	2b54      	cmp	r3, #84	@ 0x54
 800aa26:	d00b      	beq.n	800aa40 <xTaskCreateStatic+0x6c>
	__asm volatile
 800aa28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa2c:	f383 8811 	msr	BASEPRI, r3
 800aa30:	f3bf 8f6f 	isb	sy
 800aa34:	f3bf 8f4f 	dsb	sy
 800aa38:	61bb      	str	r3, [r7, #24]
}
 800aa3a:	bf00      	nop
 800aa3c:	bf00      	nop
 800aa3e:	e7fd      	b.n	800aa3c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800aa40:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800aa42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d01e      	beq.n	800aa86 <xTaskCreateStatic+0xb2>
 800aa48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d01b      	beq.n	800aa86 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800aa4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa50:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800aa52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa54:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800aa56:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800aa58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa5a:	2202      	movs	r2, #2
 800aa5c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800aa60:	2300      	movs	r3, #0
 800aa62:	9303      	str	r3, [sp, #12]
 800aa64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa66:	9302      	str	r3, [sp, #8]
 800aa68:	f107 0314 	add.w	r3, r7, #20
 800aa6c:	9301      	str	r3, [sp, #4]
 800aa6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa70:	9300      	str	r3, [sp, #0]
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	687a      	ldr	r2, [r7, #4]
 800aa76:	68b9      	ldr	r1, [r7, #8]
 800aa78:	68f8      	ldr	r0, [r7, #12]
 800aa7a:	f000 f850 	bl	800ab1e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aa7e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800aa80:	f000 f8d6 	bl	800ac30 <prvAddNewTaskToReadyList>
 800aa84:	e001      	b.n	800aa8a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800aa86:	2300      	movs	r3, #0
 800aa88:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800aa8a:	697b      	ldr	r3, [r7, #20]
	}
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	3728      	adds	r7, #40	@ 0x28
 800aa90:	46bd      	mov	sp, r7
 800aa92:	bd80      	pop	{r7, pc}

0800aa94 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b08c      	sub	sp, #48	@ 0x30
 800aa98:	af04      	add	r7, sp, #16
 800aa9a:	60f8      	str	r0, [r7, #12]
 800aa9c:	60b9      	str	r1, [r7, #8]
 800aa9e:	603b      	str	r3, [r7, #0]
 800aaa0:	4613      	mov	r3, r2
 800aaa2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800aaa4:	88fb      	ldrh	r3, [r7, #6]
 800aaa6:	009b      	lsls	r3, r3, #2
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	f000 feed 	bl	800b888 <pvPortMalloc>
 800aaae:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800aab0:	697b      	ldr	r3, [r7, #20]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d00e      	beq.n	800aad4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800aab6:	2054      	movs	r0, #84	@ 0x54
 800aab8:	f000 fee6 	bl	800b888 <pvPortMalloc>
 800aabc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800aabe:	69fb      	ldr	r3, [r7, #28]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d003      	beq.n	800aacc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800aac4:	69fb      	ldr	r3, [r7, #28]
 800aac6:	697a      	ldr	r2, [r7, #20]
 800aac8:	631a      	str	r2, [r3, #48]	@ 0x30
 800aaca:	e005      	b.n	800aad8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800aacc:	6978      	ldr	r0, [r7, #20]
 800aace:	f000 ffa9 	bl	800ba24 <vPortFree>
 800aad2:	e001      	b.n	800aad8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800aad4:	2300      	movs	r3, #0
 800aad6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800aad8:	69fb      	ldr	r3, [r7, #28]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d017      	beq.n	800ab0e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800aade:	69fb      	ldr	r3, [r7, #28]
 800aae0:	2200      	movs	r2, #0
 800aae2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800aae6:	88fa      	ldrh	r2, [r7, #6]
 800aae8:	2300      	movs	r3, #0
 800aaea:	9303      	str	r3, [sp, #12]
 800aaec:	69fb      	ldr	r3, [r7, #28]
 800aaee:	9302      	str	r3, [sp, #8]
 800aaf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaf2:	9301      	str	r3, [sp, #4]
 800aaf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaf6:	9300      	str	r3, [sp, #0]
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	68b9      	ldr	r1, [r7, #8]
 800aafc:	68f8      	ldr	r0, [r7, #12]
 800aafe:	f000 f80e 	bl	800ab1e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ab02:	69f8      	ldr	r0, [r7, #28]
 800ab04:	f000 f894 	bl	800ac30 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ab08:	2301      	movs	r3, #1
 800ab0a:	61bb      	str	r3, [r7, #24]
 800ab0c:	e002      	b.n	800ab14 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ab0e:	f04f 33ff 	mov.w	r3, #4294967295
 800ab12:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ab14:	69bb      	ldr	r3, [r7, #24]
	}
 800ab16:	4618      	mov	r0, r3
 800ab18:	3720      	adds	r7, #32
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	bd80      	pop	{r7, pc}

0800ab1e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ab1e:	b580      	push	{r7, lr}
 800ab20:	b088      	sub	sp, #32
 800ab22:	af00      	add	r7, sp, #0
 800ab24:	60f8      	str	r0, [r7, #12]
 800ab26:	60b9      	str	r1, [r7, #8]
 800ab28:	607a      	str	r2, [r7, #4]
 800ab2a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ab2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab2e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ab36:	3b01      	subs	r3, #1
 800ab38:	009b      	lsls	r3, r3, #2
 800ab3a:	4413      	add	r3, r2
 800ab3c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ab3e:	69bb      	ldr	r3, [r7, #24]
 800ab40:	f023 0307 	bic.w	r3, r3, #7
 800ab44:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ab46:	69bb      	ldr	r3, [r7, #24]
 800ab48:	f003 0307 	and.w	r3, r3, #7
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d00b      	beq.n	800ab68 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800ab50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab54:	f383 8811 	msr	BASEPRI, r3
 800ab58:	f3bf 8f6f 	isb	sy
 800ab5c:	f3bf 8f4f 	dsb	sy
 800ab60:	617b      	str	r3, [r7, #20]
}
 800ab62:	bf00      	nop
 800ab64:	bf00      	nop
 800ab66:	e7fd      	b.n	800ab64 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ab68:	68bb      	ldr	r3, [r7, #8]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d01f      	beq.n	800abae <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ab6e:	2300      	movs	r3, #0
 800ab70:	61fb      	str	r3, [r7, #28]
 800ab72:	e012      	b.n	800ab9a <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ab74:	68ba      	ldr	r2, [r7, #8]
 800ab76:	69fb      	ldr	r3, [r7, #28]
 800ab78:	4413      	add	r3, r2
 800ab7a:	7819      	ldrb	r1, [r3, #0]
 800ab7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab7e:	69fb      	ldr	r3, [r7, #28]
 800ab80:	4413      	add	r3, r2
 800ab82:	3334      	adds	r3, #52	@ 0x34
 800ab84:	460a      	mov	r2, r1
 800ab86:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ab88:	68ba      	ldr	r2, [r7, #8]
 800ab8a:	69fb      	ldr	r3, [r7, #28]
 800ab8c:	4413      	add	r3, r2
 800ab8e:	781b      	ldrb	r3, [r3, #0]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d006      	beq.n	800aba2 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ab94:	69fb      	ldr	r3, [r7, #28]
 800ab96:	3301      	adds	r3, #1
 800ab98:	61fb      	str	r3, [r7, #28]
 800ab9a:	69fb      	ldr	r3, [r7, #28]
 800ab9c:	2b0f      	cmp	r3, #15
 800ab9e:	d9e9      	bls.n	800ab74 <prvInitialiseNewTask+0x56>
 800aba0:	e000      	b.n	800aba4 <prvInitialiseNewTask+0x86>
			{
				break;
 800aba2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800aba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aba6:	2200      	movs	r2, #0
 800aba8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800abac:	e003      	b.n	800abb6 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800abae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abb0:	2200      	movs	r2, #0
 800abb2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800abb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abb8:	2b06      	cmp	r3, #6
 800abba:	d901      	bls.n	800abc0 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800abbc:	2306      	movs	r3, #6
 800abbe:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800abc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abc2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800abc4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800abc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abc8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800abca:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800abcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abce:	2200      	movs	r2, #0
 800abd0:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800abd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abd4:	3304      	adds	r3, #4
 800abd6:	4618      	mov	r0, r3
 800abd8:	f7ff fe68 	bl	800a8ac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800abdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abde:	3318      	adds	r3, #24
 800abe0:	4618      	mov	r0, r3
 800abe2:	f7ff fe63 	bl	800a8ac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800abe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abe8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800abea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800abec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abee:	f1c3 0207 	rsb	r2, r3, #7
 800abf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abf4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800abf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abf8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800abfa:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800abfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abfe:	2200      	movs	r2, #0
 800ac00:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ac02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac04:	2200      	movs	r2, #0
 800ac06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ac0a:	683a      	ldr	r2, [r7, #0]
 800ac0c:	68f9      	ldr	r1, [r7, #12]
 800ac0e:	69b8      	ldr	r0, [r7, #24]
 800ac10:	f000 fc2c 	bl	800b46c <pxPortInitialiseStack>
 800ac14:	4602      	mov	r2, r0
 800ac16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac18:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ac1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d002      	beq.n	800ac26 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ac20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ac24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ac26:	bf00      	nop
 800ac28:	3720      	adds	r7, #32
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	bd80      	pop	{r7, pc}
	...

0800ac30 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b082      	sub	sp, #8
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ac38:	f000 fd46 	bl	800b6c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ac3c:	4b2a      	ldr	r3, [pc, #168]	@ (800ace8 <prvAddNewTaskToReadyList+0xb8>)
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	3301      	adds	r3, #1
 800ac42:	4a29      	ldr	r2, [pc, #164]	@ (800ace8 <prvAddNewTaskToReadyList+0xb8>)
 800ac44:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ac46:	4b29      	ldr	r3, [pc, #164]	@ (800acec <prvAddNewTaskToReadyList+0xbc>)
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d109      	bne.n	800ac62 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ac4e:	4a27      	ldr	r2, [pc, #156]	@ (800acec <prvAddNewTaskToReadyList+0xbc>)
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ac54:	4b24      	ldr	r3, [pc, #144]	@ (800ace8 <prvAddNewTaskToReadyList+0xb8>)
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	2b01      	cmp	r3, #1
 800ac5a:	d110      	bne.n	800ac7e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ac5c:	f000 fac4 	bl	800b1e8 <prvInitialiseTaskLists>
 800ac60:	e00d      	b.n	800ac7e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ac62:	4b23      	ldr	r3, [pc, #140]	@ (800acf0 <prvAddNewTaskToReadyList+0xc0>)
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d109      	bne.n	800ac7e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ac6a:	4b20      	ldr	r3, [pc, #128]	@ (800acec <prvAddNewTaskToReadyList+0xbc>)
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac74:	429a      	cmp	r2, r3
 800ac76:	d802      	bhi.n	800ac7e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ac78:	4a1c      	ldr	r2, [pc, #112]	@ (800acec <prvAddNewTaskToReadyList+0xbc>)
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ac7e:	4b1d      	ldr	r3, [pc, #116]	@ (800acf4 <prvAddNewTaskToReadyList+0xc4>)
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	3301      	adds	r3, #1
 800ac84:	4a1b      	ldr	r2, [pc, #108]	@ (800acf4 <prvAddNewTaskToReadyList+0xc4>)
 800ac86:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac8c:	2201      	movs	r2, #1
 800ac8e:	409a      	lsls	r2, r3
 800ac90:	4b19      	ldr	r3, [pc, #100]	@ (800acf8 <prvAddNewTaskToReadyList+0xc8>)
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	4313      	orrs	r3, r2
 800ac96:	4a18      	ldr	r2, [pc, #96]	@ (800acf8 <prvAddNewTaskToReadyList+0xc8>)
 800ac98:	6013      	str	r3, [r2, #0]
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac9e:	4613      	mov	r3, r2
 800aca0:	009b      	lsls	r3, r3, #2
 800aca2:	4413      	add	r3, r2
 800aca4:	009b      	lsls	r3, r3, #2
 800aca6:	4a15      	ldr	r2, [pc, #84]	@ (800acfc <prvAddNewTaskToReadyList+0xcc>)
 800aca8:	441a      	add	r2, r3
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	3304      	adds	r3, #4
 800acae:	4619      	mov	r1, r3
 800acb0:	4610      	mov	r0, r2
 800acb2:	f7ff fe08 	bl	800a8c6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800acb6:	f000 fd39 	bl	800b72c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800acba:	4b0d      	ldr	r3, [pc, #52]	@ (800acf0 <prvAddNewTaskToReadyList+0xc0>)
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d00e      	beq.n	800ace0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800acc2:	4b0a      	ldr	r3, [pc, #40]	@ (800acec <prvAddNewTaskToReadyList+0xbc>)
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800accc:	429a      	cmp	r2, r3
 800acce:	d207      	bcs.n	800ace0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800acd0:	4b0b      	ldr	r3, [pc, #44]	@ (800ad00 <prvAddNewTaskToReadyList+0xd0>)
 800acd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800acd6:	601a      	str	r2, [r3, #0]
 800acd8:	f3bf 8f4f 	dsb	sy
 800acdc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ace0:	bf00      	nop
 800ace2:	3708      	adds	r7, #8
 800ace4:	46bd      	mov	sp, r7
 800ace6:	bd80      	pop	{r7, pc}
 800ace8:	20003158 	.word	0x20003158
 800acec:	20003058 	.word	0x20003058
 800acf0:	20003164 	.word	0x20003164
 800acf4:	20003174 	.word	0x20003174
 800acf8:	20003160 	.word	0x20003160
 800acfc:	2000305c 	.word	0x2000305c
 800ad00:	e000ed04 	.word	0xe000ed04

0800ad04 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b084      	sub	sp, #16
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d018      	beq.n	800ad48 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ad16:	4b14      	ldr	r3, [pc, #80]	@ (800ad68 <vTaskDelay+0x64>)
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d00b      	beq.n	800ad36 <vTaskDelay+0x32>
	__asm volatile
 800ad1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad22:	f383 8811 	msr	BASEPRI, r3
 800ad26:	f3bf 8f6f 	isb	sy
 800ad2a:	f3bf 8f4f 	dsb	sy
 800ad2e:	60bb      	str	r3, [r7, #8]
}
 800ad30:	bf00      	nop
 800ad32:	bf00      	nop
 800ad34:	e7fd      	b.n	800ad32 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ad36:	f000 f87d 	bl	800ae34 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ad3a:	2100      	movs	r1, #0
 800ad3c:	6878      	ldr	r0, [r7, #4]
 800ad3e:	f000 fb2f 	bl	800b3a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ad42:	f000 f885 	bl	800ae50 <xTaskResumeAll>
 800ad46:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d107      	bne.n	800ad5e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800ad4e:	4b07      	ldr	r3, [pc, #28]	@ (800ad6c <vTaskDelay+0x68>)
 800ad50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad54:	601a      	str	r2, [r3, #0]
 800ad56:	f3bf 8f4f 	dsb	sy
 800ad5a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ad5e:	bf00      	nop
 800ad60:	3710      	adds	r7, #16
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd80      	pop	{r7, pc}
 800ad66:	bf00      	nop
 800ad68:	20003180 	.word	0x20003180
 800ad6c:	e000ed04 	.word	0xe000ed04

0800ad70 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b08a      	sub	sp, #40	@ 0x28
 800ad74:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ad76:	2300      	movs	r3, #0
 800ad78:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ad7e:	463a      	mov	r2, r7
 800ad80:	1d39      	adds	r1, r7, #4
 800ad82:	f107 0308 	add.w	r3, r7, #8
 800ad86:	4618      	mov	r0, r3
 800ad88:	f7f7 fffa 	bl	8002d80 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ad8c:	6839      	ldr	r1, [r7, #0]
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	68ba      	ldr	r2, [r7, #8]
 800ad92:	9202      	str	r2, [sp, #8]
 800ad94:	9301      	str	r3, [sp, #4]
 800ad96:	2300      	movs	r3, #0
 800ad98:	9300      	str	r3, [sp, #0]
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	460a      	mov	r2, r1
 800ad9e:	491f      	ldr	r1, [pc, #124]	@ (800ae1c <vTaskStartScheduler+0xac>)
 800ada0:	481f      	ldr	r0, [pc, #124]	@ (800ae20 <vTaskStartScheduler+0xb0>)
 800ada2:	f7ff fe17 	bl	800a9d4 <xTaskCreateStatic>
 800ada6:	4603      	mov	r3, r0
 800ada8:	4a1e      	ldr	r2, [pc, #120]	@ (800ae24 <vTaskStartScheduler+0xb4>)
 800adaa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800adac:	4b1d      	ldr	r3, [pc, #116]	@ (800ae24 <vTaskStartScheduler+0xb4>)
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d002      	beq.n	800adba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800adb4:	2301      	movs	r3, #1
 800adb6:	617b      	str	r3, [r7, #20]
 800adb8:	e001      	b.n	800adbe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800adba:	2300      	movs	r3, #0
 800adbc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800adbe:	697b      	ldr	r3, [r7, #20]
 800adc0:	2b01      	cmp	r3, #1
 800adc2:	d116      	bne.n	800adf2 <vTaskStartScheduler+0x82>
	__asm volatile
 800adc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adc8:	f383 8811 	msr	BASEPRI, r3
 800adcc:	f3bf 8f6f 	isb	sy
 800add0:	f3bf 8f4f 	dsb	sy
 800add4:	613b      	str	r3, [r7, #16]
}
 800add6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800add8:	4b13      	ldr	r3, [pc, #76]	@ (800ae28 <vTaskStartScheduler+0xb8>)
 800adda:	f04f 32ff 	mov.w	r2, #4294967295
 800adde:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ade0:	4b12      	ldr	r3, [pc, #72]	@ (800ae2c <vTaskStartScheduler+0xbc>)
 800ade2:	2201      	movs	r2, #1
 800ade4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ade6:	4b12      	ldr	r3, [pc, #72]	@ (800ae30 <vTaskStartScheduler+0xc0>)
 800ade8:	2200      	movs	r2, #0
 800adea:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800adec:	f000 fbc8 	bl	800b580 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800adf0:	e00f      	b.n	800ae12 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800adf2:	697b      	ldr	r3, [r7, #20]
 800adf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adf8:	d10b      	bne.n	800ae12 <vTaskStartScheduler+0xa2>
	__asm volatile
 800adfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adfe:	f383 8811 	msr	BASEPRI, r3
 800ae02:	f3bf 8f6f 	isb	sy
 800ae06:	f3bf 8f4f 	dsb	sy
 800ae0a:	60fb      	str	r3, [r7, #12]
}
 800ae0c:	bf00      	nop
 800ae0e:	bf00      	nop
 800ae10:	e7fd      	b.n	800ae0e <vTaskStartScheduler+0x9e>
}
 800ae12:	bf00      	nop
 800ae14:	3718      	adds	r7, #24
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bd80      	pop	{r7, pc}
 800ae1a:	bf00      	nop
 800ae1c:	0800d4f0 	.word	0x0800d4f0
 800ae20:	0800b1b9 	.word	0x0800b1b9
 800ae24:	2000317c 	.word	0x2000317c
 800ae28:	20003178 	.word	0x20003178
 800ae2c:	20003164 	.word	0x20003164
 800ae30:	2000315c 	.word	0x2000315c

0800ae34 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ae34:	b480      	push	{r7}
 800ae36:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ae38:	4b04      	ldr	r3, [pc, #16]	@ (800ae4c <vTaskSuspendAll+0x18>)
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	3301      	adds	r3, #1
 800ae3e:	4a03      	ldr	r2, [pc, #12]	@ (800ae4c <vTaskSuspendAll+0x18>)
 800ae40:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ae42:	bf00      	nop
 800ae44:	46bd      	mov	sp, r7
 800ae46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4a:	4770      	bx	lr
 800ae4c:	20003180 	.word	0x20003180

0800ae50 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b084      	sub	sp, #16
 800ae54:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ae56:	2300      	movs	r3, #0
 800ae58:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ae5e:	4b42      	ldr	r3, [pc, #264]	@ (800af68 <xTaskResumeAll+0x118>)
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d10b      	bne.n	800ae7e <xTaskResumeAll+0x2e>
	__asm volatile
 800ae66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae6a:	f383 8811 	msr	BASEPRI, r3
 800ae6e:	f3bf 8f6f 	isb	sy
 800ae72:	f3bf 8f4f 	dsb	sy
 800ae76:	603b      	str	r3, [r7, #0]
}
 800ae78:	bf00      	nop
 800ae7a:	bf00      	nop
 800ae7c:	e7fd      	b.n	800ae7a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ae7e:	f000 fc23 	bl	800b6c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ae82:	4b39      	ldr	r3, [pc, #228]	@ (800af68 <xTaskResumeAll+0x118>)
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	3b01      	subs	r3, #1
 800ae88:	4a37      	ldr	r2, [pc, #220]	@ (800af68 <xTaskResumeAll+0x118>)
 800ae8a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ae8c:	4b36      	ldr	r3, [pc, #216]	@ (800af68 <xTaskResumeAll+0x118>)
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d161      	bne.n	800af58 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ae94:	4b35      	ldr	r3, [pc, #212]	@ (800af6c <xTaskResumeAll+0x11c>)
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d05d      	beq.n	800af58 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ae9c:	e02e      	b.n	800aefc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae9e:	4b34      	ldr	r3, [pc, #208]	@ (800af70 <xTaskResumeAll+0x120>)
 800aea0:	68db      	ldr	r3, [r3, #12]
 800aea2:	68db      	ldr	r3, [r3, #12]
 800aea4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	3318      	adds	r3, #24
 800aeaa:	4618      	mov	r0, r3
 800aeac:	f7ff fd68 	bl	800a980 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	3304      	adds	r3, #4
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	f7ff fd63 	bl	800a980 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aebe:	2201      	movs	r2, #1
 800aec0:	409a      	lsls	r2, r3
 800aec2:	4b2c      	ldr	r3, [pc, #176]	@ (800af74 <xTaskResumeAll+0x124>)
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	4313      	orrs	r3, r2
 800aec8:	4a2a      	ldr	r2, [pc, #168]	@ (800af74 <xTaskResumeAll+0x124>)
 800aeca:	6013      	str	r3, [r2, #0]
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aed0:	4613      	mov	r3, r2
 800aed2:	009b      	lsls	r3, r3, #2
 800aed4:	4413      	add	r3, r2
 800aed6:	009b      	lsls	r3, r3, #2
 800aed8:	4a27      	ldr	r2, [pc, #156]	@ (800af78 <xTaskResumeAll+0x128>)
 800aeda:	441a      	add	r2, r3
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	3304      	adds	r3, #4
 800aee0:	4619      	mov	r1, r3
 800aee2:	4610      	mov	r0, r2
 800aee4:	f7ff fcef 	bl	800a8c6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aeec:	4b23      	ldr	r3, [pc, #140]	@ (800af7c <xTaskResumeAll+0x12c>)
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aef2:	429a      	cmp	r2, r3
 800aef4:	d302      	bcc.n	800aefc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800aef6:	4b22      	ldr	r3, [pc, #136]	@ (800af80 <xTaskResumeAll+0x130>)
 800aef8:	2201      	movs	r2, #1
 800aefa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aefc:	4b1c      	ldr	r3, [pc, #112]	@ (800af70 <xTaskResumeAll+0x120>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d1cc      	bne.n	800ae9e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d001      	beq.n	800af0e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800af0a:	f000 fa0b 	bl	800b324 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800af0e:	4b1d      	ldr	r3, [pc, #116]	@ (800af84 <xTaskResumeAll+0x134>)
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d010      	beq.n	800af3c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800af1a:	f000 f837 	bl	800af8c <xTaskIncrementTick>
 800af1e:	4603      	mov	r3, r0
 800af20:	2b00      	cmp	r3, #0
 800af22:	d002      	beq.n	800af2a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800af24:	4b16      	ldr	r3, [pc, #88]	@ (800af80 <xTaskResumeAll+0x130>)
 800af26:	2201      	movs	r2, #1
 800af28:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	3b01      	subs	r3, #1
 800af2e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d1f1      	bne.n	800af1a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800af36:	4b13      	ldr	r3, [pc, #76]	@ (800af84 <xTaskResumeAll+0x134>)
 800af38:	2200      	movs	r2, #0
 800af3a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800af3c:	4b10      	ldr	r3, [pc, #64]	@ (800af80 <xTaskResumeAll+0x130>)
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d009      	beq.n	800af58 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800af44:	2301      	movs	r3, #1
 800af46:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800af48:	4b0f      	ldr	r3, [pc, #60]	@ (800af88 <xTaskResumeAll+0x138>)
 800af4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800af4e:	601a      	str	r2, [r3, #0]
 800af50:	f3bf 8f4f 	dsb	sy
 800af54:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800af58:	f000 fbe8 	bl	800b72c <vPortExitCritical>

	return xAlreadyYielded;
 800af5c:	68bb      	ldr	r3, [r7, #8]
}
 800af5e:	4618      	mov	r0, r3
 800af60:	3710      	adds	r7, #16
 800af62:	46bd      	mov	sp, r7
 800af64:	bd80      	pop	{r7, pc}
 800af66:	bf00      	nop
 800af68:	20003180 	.word	0x20003180
 800af6c:	20003158 	.word	0x20003158
 800af70:	20003118 	.word	0x20003118
 800af74:	20003160 	.word	0x20003160
 800af78:	2000305c 	.word	0x2000305c
 800af7c:	20003058 	.word	0x20003058
 800af80:	2000316c 	.word	0x2000316c
 800af84:	20003168 	.word	0x20003168
 800af88:	e000ed04 	.word	0xe000ed04

0800af8c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b086      	sub	sp, #24
 800af90:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800af92:	2300      	movs	r3, #0
 800af94:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af96:	4b4f      	ldr	r3, [pc, #316]	@ (800b0d4 <xTaskIncrementTick+0x148>)
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	f040 808f 	bne.w	800b0be <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800afa0:	4b4d      	ldr	r3, [pc, #308]	@ (800b0d8 <xTaskIncrementTick+0x14c>)
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	3301      	adds	r3, #1
 800afa6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800afa8:	4a4b      	ldr	r2, [pc, #300]	@ (800b0d8 <xTaskIncrementTick+0x14c>)
 800afaa:	693b      	ldr	r3, [r7, #16]
 800afac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800afae:	693b      	ldr	r3, [r7, #16]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d121      	bne.n	800aff8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800afb4:	4b49      	ldr	r3, [pc, #292]	@ (800b0dc <xTaskIncrementTick+0x150>)
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d00b      	beq.n	800afd6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800afbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afc2:	f383 8811 	msr	BASEPRI, r3
 800afc6:	f3bf 8f6f 	isb	sy
 800afca:	f3bf 8f4f 	dsb	sy
 800afce:	603b      	str	r3, [r7, #0]
}
 800afd0:	bf00      	nop
 800afd2:	bf00      	nop
 800afd4:	e7fd      	b.n	800afd2 <xTaskIncrementTick+0x46>
 800afd6:	4b41      	ldr	r3, [pc, #260]	@ (800b0dc <xTaskIncrementTick+0x150>)
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	60fb      	str	r3, [r7, #12]
 800afdc:	4b40      	ldr	r3, [pc, #256]	@ (800b0e0 <xTaskIncrementTick+0x154>)
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	4a3e      	ldr	r2, [pc, #248]	@ (800b0dc <xTaskIncrementTick+0x150>)
 800afe2:	6013      	str	r3, [r2, #0]
 800afe4:	4a3e      	ldr	r2, [pc, #248]	@ (800b0e0 <xTaskIncrementTick+0x154>)
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	6013      	str	r3, [r2, #0]
 800afea:	4b3e      	ldr	r3, [pc, #248]	@ (800b0e4 <xTaskIncrementTick+0x158>)
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	3301      	adds	r3, #1
 800aff0:	4a3c      	ldr	r2, [pc, #240]	@ (800b0e4 <xTaskIncrementTick+0x158>)
 800aff2:	6013      	str	r3, [r2, #0]
 800aff4:	f000 f996 	bl	800b324 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800aff8:	4b3b      	ldr	r3, [pc, #236]	@ (800b0e8 <xTaskIncrementTick+0x15c>)
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	693a      	ldr	r2, [r7, #16]
 800affe:	429a      	cmp	r2, r3
 800b000:	d348      	bcc.n	800b094 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b002:	4b36      	ldr	r3, [pc, #216]	@ (800b0dc <xTaskIncrementTick+0x150>)
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d104      	bne.n	800b016 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b00c:	4b36      	ldr	r3, [pc, #216]	@ (800b0e8 <xTaskIncrementTick+0x15c>)
 800b00e:	f04f 32ff 	mov.w	r2, #4294967295
 800b012:	601a      	str	r2, [r3, #0]
					break;
 800b014:	e03e      	b.n	800b094 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b016:	4b31      	ldr	r3, [pc, #196]	@ (800b0dc <xTaskIncrementTick+0x150>)
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	68db      	ldr	r3, [r3, #12]
 800b01c:	68db      	ldr	r3, [r3, #12]
 800b01e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b020:	68bb      	ldr	r3, [r7, #8]
 800b022:	685b      	ldr	r3, [r3, #4]
 800b024:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b026:	693a      	ldr	r2, [r7, #16]
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	429a      	cmp	r2, r3
 800b02c:	d203      	bcs.n	800b036 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b02e:	4a2e      	ldr	r2, [pc, #184]	@ (800b0e8 <xTaskIncrementTick+0x15c>)
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b034:	e02e      	b.n	800b094 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b036:	68bb      	ldr	r3, [r7, #8]
 800b038:	3304      	adds	r3, #4
 800b03a:	4618      	mov	r0, r3
 800b03c:	f7ff fca0 	bl	800a980 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b040:	68bb      	ldr	r3, [r7, #8]
 800b042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b044:	2b00      	cmp	r3, #0
 800b046:	d004      	beq.n	800b052 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b048:	68bb      	ldr	r3, [r7, #8]
 800b04a:	3318      	adds	r3, #24
 800b04c:	4618      	mov	r0, r3
 800b04e:	f7ff fc97 	bl	800a980 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b052:	68bb      	ldr	r3, [r7, #8]
 800b054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b056:	2201      	movs	r2, #1
 800b058:	409a      	lsls	r2, r3
 800b05a:	4b24      	ldr	r3, [pc, #144]	@ (800b0ec <xTaskIncrementTick+0x160>)
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	4313      	orrs	r3, r2
 800b060:	4a22      	ldr	r2, [pc, #136]	@ (800b0ec <xTaskIncrementTick+0x160>)
 800b062:	6013      	str	r3, [r2, #0]
 800b064:	68bb      	ldr	r3, [r7, #8]
 800b066:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b068:	4613      	mov	r3, r2
 800b06a:	009b      	lsls	r3, r3, #2
 800b06c:	4413      	add	r3, r2
 800b06e:	009b      	lsls	r3, r3, #2
 800b070:	4a1f      	ldr	r2, [pc, #124]	@ (800b0f0 <xTaskIncrementTick+0x164>)
 800b072:	441a      	add	r2, r3
 800b074:	68bb      	ldr	r3, [r7, #8]
 800b076:	3304      	adds	r3, #4
 800b078:	4619      	mov	r1, r3
 800b07a:	4610      	mov	r0, r2
 800b07c:	f7ff fc23 	bl	800a8c6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b080:	68bb      	ldr	r3, [r7, #8]
 800b082:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b084:	4b1b      	ldr	r3, [pc, #108]	@ (800b0f4 <xTaskIncrementTick+0x168>)
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b08a:	429a      	cmp	r2, r3
 800b08c:	d3b9      	bcc.n	800b002 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b08e:	2301      	movs	r3, #1
 800b090:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b092:	e7b6      	b.n	800b002 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b094:	4b17      	ldr	r3, [pc, #92]	@ (800b0f4 <xTaskIncrementTick+0x168>)
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b09a:	4915      	ldr	r1, [pc, #84]	@ (800b0f0 <xTaskIncrementTick+0x164>)
 800b09c:	4613      	mov	r3, r2
 800b09e:	009b      	lsls	r3, r3, #2
 800b0a0:	4413      	add	r3, r2
 800b0a2:	009b      	lsls	r3, r3, #2
 800b0a4:	440b      	add	r3, r1
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	2b01      	cmp	r3, #1
 800b0aa:	d901      	bls.n	800b0b0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b0ac:	2301      	movs	r3, #1
 800b0ae:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b0b0:	4b11      	ldr	r3, [pc, #68]	@ (800b0f8 <xTaskIncrementTick+0x16c>)
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d007      	beq.n	800b0c8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b0b8:	2301      	movs	r3, #1
 800b0ba:	617b      	str	r3, [r7, #20]
 800b0bc:	e004      	b.n	800b0c8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b0be:	4b0f      	ldr	r3, [pc, #60]	@ (800b0fc <xTaskIncrementTick+0x170>)
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	3301      	adds	r3, #1
 800b0c4:	4a0d      	ldr	r2, [pc, #52]	@ (800b0fc <xTaskIncrementTick+0x170>)
 800b0c6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b0c8:	697b      	ldr	r3, [r7, #20]
}
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	3718      	adds	r7, #24
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	bd80      	pop	{r7, pc}
 800b0d2:	bf00      	nop
 800b0d4:	20003180 	.word	0x20003180
 800b0d8:	2000315c 	.word	0x2000315c
 800b0dc:	20003110 	.word	0x20003110
 800b0e0:	20003114 	.word	0x20003114
 800b0e4:	20003170 	.word	0x20003170
 800b0e8:	20003178 	.word	0x20003178
 800b0ec:	20003160 	.word	0x20003160
 800b0f0:	2000305c 	.word	0x2000305c
 800b0f4:	20003058 	.word	0x20003058
 800b0f8:	2000316c 	.word	0x2000316c
 800b0fc:	20003168 	.word	0x20003168

0800b100 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b100:	b480      	push	{r7}
 800b102:	b087      	sub	sp, #28
 800b104:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b106:	4b27      	ldr	r3, [pc, #156]	@ (800b1a4 <vTaskSwitchContext+0xa4>)
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d003      	beq.n	800b116 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b10e:	4b26      	ldr	r3, [pc, #152]	@ (800b1a8 <vTaskSwitchContext+0xa8>)
 800b110:	2201      	movs	r2, #1
 800b112:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b114:	e040      	b.n	800b198 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800b116:	4b24      	ldr	r3, [pc, #144]	@ (800b1a8 <vTaskSwitchContext+0xa8>)
 800b118:	2200      	movs	r2, #0
 800b11a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b11c:	4b23      	ldr	r3, [pc, #140]	@ (800b1ac <vTaskSwitchContext+0xac>)
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	fab3 f383 	clz	r3, r3
 800b128:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b12a:	7afb      	ldrb	r3, [r7, #11]
 800b12c:	f1c3 031f 	rsb	r3, r3, #31
 800b130:	617b      	str	r3, [r7, #20]
 800b132:	491f      	ldr	r1, [pc, #124]	@ (800b1b0 <vTaskSwitchContext+0xb0>)
 800b134:	697a      	ldr	r2, [r7, #20]
 800b136:	4613      	mov	r3, r2
 800b138:	009b      	lsls	r3, r3, #2
 800b13a:	4413      	add	r3, r2
 800b13c:	009b      	lsls	r3, r3, #2
 800b13e:	440b      	add	r3, r1
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d10b      	bne.n	800b15e <vTaskSwitchContext+0x5e>
	__asm volatile
 800b146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b14a:	f383 8811 	msr	BASEPRI, r3
 800b14e:	f3bf 8f6f 	isb	sy
 800b152:	f3bf 8f4f 	dsb	sy
 800b156:	607b      	str	r3, [r7, #4]
}
 800b158:	bf00      	nop
 800b15a:	bf00      	nop
 800b15c:	e7fd      	b.n	800b15a <vTaskSwitchContext+0x5a>
 800b15e:	697a      	ldr	r2, [r7, #20]
 800b160:	4613      	mov	r3, r2
 800b162:	009b      	lsls	r3, r3, #2
 800b164:	4413      	add	r3, r2
 800b166:	009b      	lsls	r3, r3, #2
 800b168:	4a11      	ldr	r2, [pc, #68]	@ (800b1b0 <vTaskSwitchContext+0xb0>)
 800b16a:	4413      	add	r3, r2
 800b16c:	613b      	str	r3, [r7, #16]
 800b16e:	693b      	ldr	r3, [r7, #16]
 800b170:	685b      	ldr	r3, [r3, #4]
 800b172:	685a      	ldr	r2, [r3, #4]
 800b174:	693b      	ldr	r3, [r7, #16]
 800b176:	605a      	str	r2, [r3, #4]
 800b178:	693b      	ldr	r3, [r7, #16]
 800b17a:	685a      	ldr	r2, [r3, #4]
 800b17c:	693b      	ldr	r3, [r7, #16]
 800b17e:	3308      	adds	r3, #8
 800b180:	429a      	cmp	r2, r3
 800b182:	d104      	bne.n	800b18e <vTaskSwitchContext+0x8e>
 800b184:	693b      	ldr	r3, [r7, #16]
 800b186:	685b      	ldr	r3, [r3, #4]
 800b188:	685a      	ldr	r2, [r3, #4]
 800b18a:	693b      	ldr	r3, [r7, #16]
 800b18c:	605a      	str	r2, [r3, #4]
 800b18e:	693b      	ldr	r3, [r7, #16]
 800b190:	685b      	ldr	r3, [r3, #4]
 800b192:	68db      	ldr	r3, [r3, #12]
 800b194:	4a07      	ldr	r2, [pc, #28]	@ (800b1b4 <vTaskSwitchContext+0xb4>)
 800b196:	6013      	str	r3, [r2, #0]
}
 800b198:	bf00      	nop
 800b19a:	371c      	adds	r7, #28
 800b19c:	46bd      	mov	sp, r7
 800b19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a2:	4770      	bx	lr
 800b1a4:	20003180 	.word	0x20003180
 800b1a8:	2000316c 	.word	0x2000316c
 800b1ac:	20003160 	.word	0x20003160
 800b1b0:	2000305c 	.word	0x2000305c
 800b1b4:	20003058 	.word	0x20003058

0800b1b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b082      	sub	sp, #8
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b1c0:	f000 f852 	bl	800b268 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b1c4:	4b06      	ldr	r3, [pc, #24]	@ (800b1e0 <prvIdleTask+0x28>)
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	2b01      	cmp	r3, #1
 800b1ca:	d9f9      	bls.n	800b1c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b1cc:	4b05      	ldr	r3, [pc, #20]	@ (800b1e4 <prvIdleTask+0x2c>)
 800b1ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b1d2:	601a      	str	r2, [r3, #0]
 800b1d4:	f3bf 8f4f 	dsb	sy
 800b1d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b1dc:	e7f0      	b.n	800b1c0 <prvIdleTask+0x8>
 800b1de:	bf00      	nop
 800b1e0:	2000305c 	.word	0x2000305c
 800b1e4:	e000ed04 	.word	0xe000ed04

0800b1e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b082      	sub	sp, #8
 800b1ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	607b      	str	r3, [r7, #4]
 800b1f2:	e00c      	b.n	800b20e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b1f4:	687a      	ldr	r2, [r7, #4]
 800b1f6:	4613      	mov	r3, r2
 800b1f8:	009b      	lsls	r3, r3, #2
 800b1fa:	4413      	add	r3, r2
 800b1fc:	009b      	lsls	r3, r3, #2
 800b1fe:	4a12      	ldr	r2, [pc, #72]	@ (800b248 <prvInitialiseTaskLists+0x60>)
 800b200:	4413      	add	r3, r2
 800b202:	4618      	mov	r0, r3
 800b204:	f7ff fb32 	bl	800a86c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	3301      	adds	r3, #1
 800b20c:	607b      	str	r3, [r7, #4]
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	2b06      	cmp	r3, #6
 800b212:	d9ef      	bls.n	800b1f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b214:	480d      	ldr	r0, [pc, #52]	@ (800b24c <prvInitialiseTaskLists+0x64>)
 800b216:	f7ff fb29 	bl	800a86c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b21a:	480d      	ldr	r0, [pc, #52]	@ (800b250 <prvInitialiseTaskLists+0x68>)
 800b21c:	f7ff fb26 	bl	800a86c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b220:	480c      	ldr	r0, [pc, #48]	@ (800b254 <prvInitialiseTaskLists+0x6c>)
 800b222:	f7ff fb23 	bl	800a86c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b226:	480c      	ldr	r0, [pc, #48]	@ (800b258 <prvInitialiseTaskLists+0x70>)
 800b228:	f7ff fb20 	bl	800a86c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b22c:	480b      	ldr	r0, [pc, #44]	@ (800b25c <prvInitialiseTaskLists+0x74>)
 800b22e:	f7ff fb1d 	bl	800a86c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b232:	4b0b      	ldr	r3, [pc, #44]	@ (800b260 <prvInitialiseTaskLists+0x78>)
 800b234:	4a05      	ldr	r2, [pc, #20]	@ (800b24c <prvInitialiseTaskLists+0x64>)
 800b236:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b238:	4b0a      	ldr	r3, [pc, #40]	@ (800b264 <prvInitialiseTaskLists+0x7c>)
 800b23a:	4a05      	ldr	r2, [pc, #20]	@ (800b250 <prvInitialiseTaskLists+0x68>)
 800b23c:	601a      	str	r2, [r3, #0]
}
 800b23e:	bf00      	nop
 800b240:	3708      	adds	r7, #8
 800b242:	46bd      	mov	sp, r7
 800b244:	bd80      	pop	{r7, pc}
 800b246:	bf00      	nop
 800b248:	2000305c 	.word	0x2000305c
 800b24c:	200030e8 	.word	0x200030e8
 800b250:	200030fc 	.word	0x200030fc
 800b254:	20003118 	.word	0x20003118
 800b258:	2000312c 	.word	0x2000312c
 800b25c:	20003144 	.word	0x20003144
 800b260:	20003110 	.word	0x20003110
 800b264:	20003114 	.word	0x20003114

0800b268 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b082      	sub	sp, #8
 800b26c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b26e:	e019      	b.n	800b2a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b270:	f000 fa2a 	bl	800b6c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b274:	4b10      	ldr	r3, [pc, #64]	@ (800b2b8 <prvCheckTasksWaitingTermination+0x50>)
 800b276:	68db      	ldr	r3, [r3, #12]
 800b278:	68db      	ldr	r3, [r3, #12]
 800b27a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	3304      	adds	r3, #4
 800b280:	4618      	mov	r0, r3
 800b282:	f7ff fb7d 	bl	800a980 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b286:	4b0d      	ldr	r3, [pc, #52]	@ (800b2bc <prvCheckTasksWaitingTermination+0x54>)
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	3b01      	subs	r3, #1
 800b28c:	4a0b      	ldr	r2, [pc, #44]	@ (800b2bc <prvCheckTasksWaitingTermination+0x54>)
 800b28e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b290:	4b0b      	ldr	r3, [pc, #44]	@ (800b2c0 <prvCheckTasksWaitingTermination+0x58>)
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	3b01      	subs	r3, #1
 800b296:	4a0a      	ldr	r2, [pc, #40]	@ (800b2c0 <prvCheckTasksWaitingTermination+0x58>)
 800b298:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b29a:	f000 fa47 	bl	800b72c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b29e:	6878      	ldr	r0, [r7, #4]
 800b2a0:	f000 f810 	bl	800b2c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b2a4:	4b06      	ldr	r3, [pc, #24]	@ (800b2c0 <prvCheckTasksWaitingTermination+0x58>)
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d1e1      	bne.n	800b270 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b2ac:	bf00      	nop
 800b2ae:	bf00      	nop
 800b2b0:	3708      	adds	r7, #8
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	bd80      	pop	{r7, pc}
 800b2b6:	bf00      	nop
 800b2b8:	2000312c 	.word	0x2000312c
 800b2bc:	20003158 	.word	0x20003158
 800b2c0:	20003140 	.word	0x20003140

0800b2c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b084      	sub	sp, #16
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d108      	bne.n	800b2e8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2da:	4618      	mov	r0, r3
 800b2dc:	f000 fba2 	bl	800ba24 <vPortFree>
				vPortFree( pxTCB );
 800b2e0:	6878      	ldr	r0, [r7, #4]
 800b2e2:	f000 fb9f 	bl	800ba24 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b2e6:	e019      	b.n	800b31c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b2ee:	2b01      	cmp	r3, #1
 800b2f0:	d103      	bne.n	800b2fa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b2f2:	6878      	ldr	r0, [r7, #4]
 800b2f4:	f000 fb96 	bl	800ba24 <vPortFree>
	}
 800b2f8:	e010      	b.n	800b31c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b300:	2b02      	cmp	r3, #2
 800b302:	d00b      	beq.n	800b31c <prvDeleteTCB+0x58>
	__asm volatile
 800b304:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b308:	f383 8811 	msr	BASEPRI, r3
 800b30c:	f3bf 8f6f 	isb	sy
 800b310:	f3bf 8f4f 	dsb	sy
 800b314:	60fb      	str	r3, [r7, #12]
}
 800b316:	bf00      	nop
 800b318:	bf00      	nop
 800b31a:	e7fd      	b.n	800b318 <prvDeleteTCB+0x54>
	}
 800b31c:	bf00      	nop
 800b31e:	3710      	adds	r7, #16
 800b320:	46bd      	mov	sp, r7
 800b322:	bd80      	pop	{r7, pc}

0800b324 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b324:	b480      	push	{r7}
 800b326:	b083      	sub	sp, #12
 800b328:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b32a:	4b0c      	ldr	r3, [pc, #48]	@ (800b35c <prvResetNextTaskUnblockTime+0x38>)
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d104      	bne.n	800b33e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b334:	4b0a      	ldr	r3, [pc, #40]	@ (800b360 <prvResetNextTaskUnblockTime+0x3c>)
 800b336:	f04f 32ff 	mov.w	r2, #4294967295
 800b33a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b33c:	e008      	b.n	800b350 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b33e:	4b07      	ldr	r3, [pc, #28]	@ (800b35c <prvResetNextTaskUnblockTime+0x38>)
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	68db      	ldr	r3, [r3, #12]
 800b344:	68db      	ldr	r3, [r3, #12]
 800b346:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	685b      	ldr	r3, [r3, #4]
 800b34c:	4a04      	ldr	r2, [pc, #16]	@ (800b360 <prvResetNextTaskUnblockTime+0x3c>)
 800b34e:	6013      	str	r3, [r2, #0]
}
 800b350:	bf00      	nop
 800b352:	370c      	adds	r7, #12
 800b354:	46bd      	mov	sp, r7
 800b356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35a:	4770      	bx	lr
 800b35c:	20003110 	.word	0x20003110
 800b360:	20003178 	.word	0x20003178

0800b364 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b364:	b480      	push	{r7}
 800b366:	b083      	sub	sp, #12
 800b368:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b36a:	4b0b      	ldr	r3, [pc, #44]	@ (800b398 <xTaskGetSchedulerState+0x34>)
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d102      	bne.n	800b378 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b372:	2301      	movs	r3, #1
 800b374:	607b      	str	r3, [r7, #4]
 800b376:	e008      	b.n	800b38a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b378:	4b08      	ldr	r3, [pc, #32]	@ (800b39c <xTaskGetSchedulerState+0x38>)
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d102      	bne.n	800b386 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b380:	2302      	movs	r3, #2
 800b382:	607b      	str	r3, [r7, #4]
 800b384:	e001      	b.n	800b38a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b386:	2300      	movs	r3, #0
 800b388:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b38a:	687b      	ldr	r3, [r7, #4]
	}
 800b38c:	4618      	mov	r0, r3
 800b38e:	370c      	adds	r7, #12
 800b390:	46bd      	mov	sp, r7
 800b392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b396:	4770      	bx	lr
 800b398:	20003164 	.word	0x20003164
 800b39c:	20003180 	.word	0x20003180

0800b3a0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b084      	sub	sp, #16
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
 800b3a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b3aa:	4b29      	ldr	r3, [pc, #164]	@ (800b450 <prvAddCurrentTaskToDelayedList+0xb0>)
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b3b0:	4b28      	ldr	r3, [pc, #160]	@ (800b454 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	3304      	adds	r3, #4
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	f7ff fae2 	bl	800a980 <uxListRemove>
 800b3bc:	4603      	mov	r3, r0
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d10b      	bne.n	800b3da <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800b3c2:	4b24      	ldr	r3, [pc, #144]	@ (800b454 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3c8:	2201      	movs	r2, #1
 800b3ca:	fa02 f303 	lsl.w	r3, r2, r3
 800b3ce:	43da      	mvns	r2, r3
 800b3d0:	4b21      	ldr	r3, [pc, #132]	@ (800b458 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	4013      	ands	r3, r2
 800b3d6:	4a20      	ldr	r2, [pc, #128]	@ (800b458 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b3d8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3e0:	d10a      	bne.n	800b3f8 <prvAddCurrentTaskToDelayedList+0x58>
 800b3e2:	683b      	ldr	r3, [r7, #0]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d007      	beq.n	800b3f8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b3e8:	4b1a      	ldr	r3, [pc, #104]	@ (800b454 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	3304      	adds	r3, #4
 800b3ee:	4619      	mov	r1, r3
 800b3f0:	481a      	ldr	r0, [pc, #104]	@ (800b45c <prvAddCurrentTaskToDelayedList+0xbc>)
 800b3f2:	f7ff fa68 	bl	800a8c6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b3f6:	e026      	b.n	800b446 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b3f8:	68fa      	ldr	r2, [r7, #12]
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	4413      	add	r3, r2
 800b3fe:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b400:	4b14      	ldr	r3, [pc, #80]	@ (800b454 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	68ba      	ldr	r2, [r7, #8]
 800b406:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b408:	68ba      	ldr	r2, [r7, #8]
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	429a      	cmp	r2, r3
 800b40e:	d209      	bcs.n	800b424 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b410:	4b13      	ldr	r3, [pc, #76]	@ (800b460 <prvAddCurrentTaskToDelayedList+0xc0>)
 800b412:	681a      	ldr	r2, [r3, #0]
 800b414:	4b0f      	ldr	r3, [pc, #60]	@ (800b454 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	3304      	adds	r3, #4
 800b41a:	4619      	mov	r1, r3
 800b41c:	4610      	mov	r0, r2
 800b41e:	f7ff fa76 	bl	800a90e <vListInsert>
}
 800b422:	e010      	b.n	800b446 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b424:	4b0f      	ldr	r3, [pc, #60]	@ (800b464 <prvAddCurrentTaskToDelayedList+0xc4>)
 800b426:	681a      	ldr	r2, [r3, #0]
 800b428:	4b0a      	ldr	r3, [pc, #40]	@ (800b454 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	3304      	adds	r3, #4
 800b42e:	4619      	mov	r1, r3
 800b430:	4610      	mov	r0, r2
 800b432:	f7ff fa6c 	bl	800a90e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b436:	4b0c      	ldr	r3, [pc, #48]	@ (800b468 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	68ba      	ldr	r2, [r7, #8]
 800b43c:	429a      	cmp	r2, r3
 800b43e:	d202      	bcs.n	800b446 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b440:	4a09      	ldr	r2, [pc, #36]	@ (800b468 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b442:	68bb      	ldr	r3, [r7, #8]
 800b444:	6013      	str	r3, [r2, #0]
}
 800b446:	bf00      	nop
 800b448:	3710      	adds	r7, #16
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd80      	pop	{r7, pc}
 800b44e:	bf00      	nop
 800b450:	2000315c 	.word	0x2000315c
 800b454:	20003058 	.word	0x20003058
 800b458:	20003160 	.word	0x20003160
 800b45c:	20003144 	.word	0x20003144
 800b460:	20003114 	.word	0x20003114
 800b464:	20003110 	.word	0x20003110
 800b468:	20003178 	.word	0x20003178

0800b46c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b46c:	b480      	push	{r7}
 800b46e:	b085      	sub	sp, #20
 800b470:	af00      	add	r7, sp, #0
 800b472:	60f8      	str	r0, [r7, #12]
 800b474:	60b9      	str	r1, [r7, #8]
 800b476:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	3b04      	subs	r3, #4
 800b47c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b484:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	3b04      	subs	r3, #4
 800b48a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b48c:	68bb      	ldr	r3, [r7, #8]
 800b48e:	f023 0201 	bic.w	r2, r3, #1
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	3b04      	subs	r3, #4
 800b49a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b49c:	4a0c      	ldr	r2, [pc, #48]	@ (800b4d0 <pxPortInitialiseStack+0x64>)
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	3b14      	subs	r3, #20
 800b4a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b4a8:	687a      	ldr	r2, [r7, #4]
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	3b04      	subs	r3, #4
 800b4b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	f06f 0202 	mvn.w	r2, #2
 800b4ba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	3b20      	subs	r3, #32
 800b4c0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b4c2:	68fb      	ldr	r3, [r7, #12]
}
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	3714      	adds	r7, #20
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ce:	4770      	bx	lr
 800b4d0:	0800b4d5 	.word	0x0800b4d5

0800b4d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b4d4:	b480      	push	{r7}
 800b4d6:	b085      	sub	sp, #20
 800b4d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b4da:	2300      	movs	r3, #0
 800b4dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b4de:	4b13      	ldr	r3, [pc, #76]	@ (800b52c <prvTaskExitError+0x58>)
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4e6:	d00b      	beq.n	800b500 <prvTaskExitError+0x2c>
	__asm volatile
 800b4e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4ec:	f383 8811 	msr	BASEPRI, r3
 800b4f0:	f3bf 8f6f 	isb	sy
 800b4f4:	f3bf 8f4f 	dsb	sy
 800b4f8:	60fb      	str	r3, [r7, #12]
}
 800b4fa:	bf00      	nop
 800b4fc:	bf00      	nop
 800b4fe:	e7fd      	b.n	800b4fc <prvTaskExitError+0x28>
	__asm volatile
 800b500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b504:	f383 8811 	msr	BASEPRI, r3
 800b508:	f3bf 8f6f 	isb	sy
 800b50c:	f3bf 8f4f 	dsb	sy
 800b510:	60bb      	str	r3, [r7, #8]
}
 800b512:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b514:	bf00      	nop
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d0fc      	beq.n	800b516 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b51c:	bf00      	nop
 800b51e:	bf00      	nop
 800b520:	3714      	adds	r7, #20
 800b522:	46bd      	mov	sp, r7
 800b524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b528:	4770      	bx	lr
 800b52a:	bf00      	nop
 800b52c:	20000058 	.word	0x20000058

0800b530 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b530:	4b07      	ldr	r3, [pc, #28]	@ (800b550 <pxCurrentTCBConst2>)
 800b532:	6819      	ldr	r1, [r3, #0]
 800b534:	6808      	ldr	r0, [r1, #0]
 800b536:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b53a:	f380 8809 	msr	PSP, r0
 800b53e:	f3bf 8f6f 	isb	sy
 800b542:	f04f 0000 	mov.w	r0, #0
 800b546:	f380 8811 	msr	BASEPRI, r0
 800b54a:	4770      	bx	lr
 800b54c:	f3af 8000 	nop.w

0800b550 <pxCurrentTCBConst2>:
 800b550:	20003058 	.word	0x20003058
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b554:	bf00      	nop
 800b556:	bf00      	nop

0800b558 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b558:	4808      	ldr	r0, [pc, #32]	@ (800b57c <prvPortStartFirstTask+0x24>)
 800b55a:	6800      	ldr	r0, [r0, #0]
 800b55c:	6800      	ldr	r0, [r0, #0]
 800b55e:	f380 8808 	msr	MSP, r0
 800b562:	f04f 0000 	mov.w	r0, #0
 800b566:	f380 8814 	msr	CONTROL, r0
 800b56a:	b662      	cpsie	i
 800b56c:	b661      	cpsie	f
 800b56e:	f3bf 8f4f 	dsb	sy
 800b572:	f3bf 8f6f 	isb	sy
 800b576:	df00      	svc	0
 800b578:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b57a:	bf00      	nop
 800b57c:	e000ed08 	.word	0xe000ed08

0800b580 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b580:	b580      	push	{r7, lr}
 800b582:	b086      	sub	sp, #24
 800b584:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b586:	4b47      	ldr	r3, [pc, #284]	@ (800b6a4 <xPortStartScheduler+0x124>)
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	4a47      	ldr	r2, [pc, #284]	@ (800b6a8 <xPortStartScheduler+0x128>)
 800b58c:	4293      	cmp	r3, r2
 800b58e:	d10b      	bne.n	800b5a8 <xPortStartScheduler+0x28>
	__asm volatile
 800b590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b594:	f383 8811 	msr	BASEPRI, r3
 800b598:	f3bf 8f6f 	isb	sy
 800b59c:	f3bf 8f4f 	dsb	sy
 800b5a0:	613b      	str	r3, [r7, #16]
}
 800b5a2:	bf00      	nop
 800b5a4:	bf00      	nop
 800b5a6:	e7fd      	b.n	800b5a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b5a8:	4b3e      	ldr	r3, [pc, #248]	@ (800b6a4 <xPortStartScheduler+0x124>)
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	4a3f      	ldr	r2, [pc, #252]	@ (800b6ac <xPortStartScheduler+0x12c>)
 800b5ae:	4293      	cmp	r3, r2
 800b5b0:	d10b      	bne.n	800b5ca <xPortStartScheduler+0x4a>
	__asm volatile
 800b5b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5b6:	f383 8811 	msr	BASEPRI, r3
 800b5ba:	f3bf 8f6f 	isb	sy
 800b5be:	f3bf 8f4f 	dsb	sy
 800b5c2:	60fb      	str	r3, [r7, #12]
}
 800b5c4:	bf00      	nop
 800b5c6:	bf00      	nop
 800b5c8:	e7fd      	b.n	800b5c6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b5ca:	4b39      	ldr	r3, [pc, #228]	@ (800b6b0 <xPortStartScheduler+0x130>)
 800b5cc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b5ce:	697b      	ldr	r3, [r7, #20]
 800b5d0:	781b      	ldrb	r3, [r3, #0]
 800b5d2:	b2db      	uxtb	r3, r3
 800b5d4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b5d6:	697b      	ldr	r3, [r7, #20]
 800b5d8:	22ff      	movs	r2, #255	@ 0xff
 800b5da:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b5dc:	697b      	ldr	r3, [r7, #20]
 800b5de:	781b      	ldrb	r3, [r3, #0]
 800b5e0:	b2db      	uxtb	r3, r3
 800b5e2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b5e4:	78fb      	ldrb	r3, [r7, #3]
 800b5e6:	b2db      	uxtb	r3, r3
 800b5e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b5ec:	b2da      	uxtb	r2, r3
 800b5ee:	4b31      	ldr	r3, [pc, #196]	@ (800b6b4 <xPortStartScheduler+0x134>)
 800b5f0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b5f2:	4b31      	ldr	r3, [pc, #196]	@ (800b6b8 <xPortStartScheduler+0x138>)
 800b5f4:	2207      	movs	r2, #7
 800b5f6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b5f8:	e009      	b.n	800b60e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800b5fa:	4b2f      	ldr	r3, [pc, #188]	@ (800b6b8 <xPortStartScheduler+0x138>)
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	3b01      	subs	r3, #1
 800b600:	4a2d      	ldr	r2, [pc, #180]	@ (800b6b8 <xPortStartScheduler+0x138>)
 800b602:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b604:	78fb      	ldrb	r3, [r7, #3]
 800b606:	b2db      	uxtb	r3, r3
 800b608:	005b      	lsls	r3, r3, #1
 800b60a:	b2db      	uxtb	r3, r3
 800b60c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b60e:	78fb      	ldrb	r3, [r7, #3]
 800b610:	b2db      	uxtb	r3, r3
 800b612:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b616:	2b80      	cmp	r3, #128	@ 0x80
 800b618:	d0ef      	beq.n	800b5fa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b61a:	4b27      	ldr	r3, [pc, #156]	@ (800b6b8 <xPortStartScheduler+0x138>)
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	f1c3 0307 	rsb	r3, r3, #7
 800b622:	2b04      	cmp	r3, #4
 800b624:	d00b      	beq.n	800b63e <xPortStartScheduler+0xbe>
	__asm volatile
 800b626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b62a:	f383 8811 	msr	BASEPRI, r3
 800b62e:	f3bf 8f6f 	isb	sy
 800b632:	f3bf 8f4f 	dsb	sy
 800b636:	60bb      	str	r3, [r7, #8]
}
 800b638:	bf00      	nop
 800b63a:	bf00      	nop
 800b63c:	e7fd      	b.n	800b63a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b63e:	4b1e      	ldr	r3, [pc, #120]	@ (800b6b8 <xPortStartScheduler+0x138>)
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	021b      	lsls	r3, r3, #8
 800b644:	4a1c      	ldr	r2, [pc, #112]	@ (800b6b8 <xPortStartScheduler+0x138>)
 800b646:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b648:	4b1b      	ldr	r3, [pc, #108]	@ (800b6b8 <xPortStartScheduler+0x138>)
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b650:	4a19      	ldr	r2, [pc, #100]	@ (800b6b8 <xPortStartScheduler+0x138>)
 800b652:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	b2da      	uxtb	r2, r3
 800b658:	697b      	ldr	r3, [r7, #20]
 800b65a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b65c:	4b17      	ldr	r3, [pc, #92]	@ (800b6bc <xPortStartScheduler+0x13c>)
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	4a16      	ldr	r2, [pc, #88]	@ (800b6bc <xPortStartScheduler+0x13c>)
 800b662:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b666:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b668:	4b14      	ldr	r3, [pc, #80]	@ (800b6bc <xPortStartScheduler+0x13c>)
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	4a13      	ldr	r2, [pc, #76]	@ (800b6bc <xPortStartScheduler+0x13c>)
 800b66e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b672:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b674:	f000 f8da 	bl	800b82c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b678:	4b11      	ldr	r3, [pc, #68]	@ (800b6c0 <xPortStartScheduler+0x140>)
 800b67a:	2200      	movs	r2, #0
 800b67c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b67e:	f000 f8f9 	bl	800b874 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b682:	4b10      	ldr	r3, [pc, #64]	@ (800b6c4 <xPortStartScheduler+0x144>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	4a0f      	ldr	r2, [pc, #60]	@ (800b6c4 <xPortStartScheduler+0x144>)
 800b688:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b68c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b68e:	f7ff ff63 	bl	800b558 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b692:	f7ff fd35 	bl	800b100 <vTaskSwitchContext>
	prvTaskExitError();
 800b696:	f7ff ff1d 	bl	800b4d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b69a:	2300      	movs	r3, #0
}
 800b69c:	4618      	mov	r0, r3
 800b69e:	3718      	adds	r7, #24
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	bd80      	pop	{r7, pc}
 800b6a4:	e000ed00 	.word	0xe000ed00
 800b6a8:	410fc271 	.word	0x410fc271
 800b6ac:	410fc270 	.word	0x410fc270
 800b6b0:	e000e400 	.word	0xe000e400
 800b6b4:	20003184 	.word	0x20003184
 800b6b8:	20003188 	.word	0x20003188
 800b6bc:	e000ed20 	.word	0xe000ed20
 800b6c0:	20000058 	.word	0x20000058
 800b6c4:	e000ef34 	.word	0xe000ef34

0800b6c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b6c8:	b480      	push	{r7}
 800b6ca:	b083      	sub	sp, #12
 800b6cc:	af00      	add	r7, sp, #0
	__asm volatile
 800b6ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6d2:	f383 8811 	msr	BASEPRI, r3
 800b6d6:	f3bf 8f6f 	isb	sy
 800b6da:	f3bf 8f4f 	dsb	sy
 800b6de:	607b      	str	r3, [r7, #4]
}
 800b6e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b6e2:	4b10      	ldr	r3, [pc, #64]	@ (800b724 <vPortEnterCritical+0x5c>)
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	3301      	adds	r3, #1
 800b6e8:	4a0e      	ldr	r2, [pc, #56]	@ (800b724 <vPortEnterCritical+0x5c>)
 800b6ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b6ec:	4b0d      	ldr	r3, [pc, #52]	@ (800b724 <vPortEnterCritical+0x5c>)
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	2b01      	cmp	r3, #1
 800b6f2:	d110      	bne.n	800b716 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b6f4:	4b0c      	ldr	r3, [pc, #48]	@ (800b728 <vPortEnterCritical+0x60>)
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	b2db      	uxtb	r3, r3
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d00b      	beq.n	800b716 <vPortEnterCritical+0x4e>
	__asm volatile
 800b6fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b702:	f383 8811 	msr	BASEPRI, r3
 800b706:	f3bf 8f6f 	isb	sy
 800b70a:	f3bf 8f4f 	dsb	sy
 800b70e:	603b      	str	r3, [r7, #0]
}
 800b710:	bf00      	nop
 800b712:	bf00      	nop
 800b714:	e7fd      	b.n	800b712 <vPortEnterCritical+0x4a>
	}
}
 800b716:	bf00      	nop
 800b718:	370c      	adds	r7, #12
 800b71a:	46bd      	mov	sp, r7
 800b71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b720:	4770      	bx	lr
 800b722:	bf00      	nop
 800b724:	20000058 	.word	0x20000058
 800b728:	e000ed04 	.word	0xe000ed04

0800b72c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b72c:	b480      	push	{r7}
 800b72e:	b083      	sub	sp, #12
 800b730:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b732:	4b12      	ldr	r3, [pc, #72]	@ (800b77c <vPortExitCritical+0x50>)
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d10b      	bne.n	800b752 <vPortExitCritical+0x26>
	__asm volatile
 800b73a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b73e:	f383 8811 	msr	BASEPRI, r3
 800b742:	f3bf 8f6f 	isb	sy
 800b746:	f3bf 8f4f 	dsb	sy
 800b74a:	607b      	str	r3, [r7, #4]
}
 800b74c:	bf00      	nop
 800b74e:	bf00      	nop
 800b750:	e7fd      	b.n	800b74e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b752:	4b0a      	ldr	r3, [pc, #40]	@ (800b77c <vPortExitCritical+0x50>)
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	3b01      	subs	r3, #1
 800b758:	4a08      	ldr	r2, [pc, #32]	@ (800b77c <vPortExitCritical+0x50>)
 800b75a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b75c:	4b07      	ldr	r3, [pc, #28]	@ (800b77c <vPortExitCritical+0x50>)
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	2b00      	cmp	r3, #0
 800b762:	d105      	bne.n	800b770 <vPortExitCritical+0x44>
 800b764:	2300      	movs	r3, #0
 800b766:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b768:	683b      	ldr	r3, [r7, #0]
 800b76a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b76e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b770:	bf00      	nop
 800b772:	370c      	adds	r7, #12
 800b774:	46bd      	mov	sp, r7
 800b776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77a:	4770      	bx	lr
 800b77c:	20000058 	.word	0x20000058

0800b780 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b780:	f3ef 8009 	mrs	r0, PSP
 800b784:	f3bf 8f6f 	isb	sy
 800b788:	4b15      	ldr	r3, [pc, #84]	@ (800b7e0 <pxCurrentTCBConst>)
 800b78a:	681a      	ldr	r2, [r3, #0]
 800b78c:	f01e 0f10 	tst.w	lr, #16
 800b790:	bf08      	it	eq
 800b792:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b796:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b79a:	6010      	str	r0, [r2, #0]
 800b79c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b7a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b7a4:	f380 8811 	msr	BASEPRI, r0
 800b7a8:	f3bf 8f4f 	dsb	sy
 800b7ac:	f3bf 8f6f 	isb	sy
 800b7b0:	f7ff fca6 	bl	800b100 <vTaskSwitchContext>
 800b7b4:	f04f 0000 	mov.w	r0, #0
 800b7b8:	f380 8811 	msr	BASEPRI, r0
 800b7bc:	bc09      	pop	{r0, r3}
 800b7be:	6819      	ldr	r1, [r3, #0]
 800b7c0:	6808      	ldr	r0, [r1, #0]
 800b7c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7c6:	f01e 0f10 	tst.w	lr, #16
 800b7ca:	bf08      	it	eq
 800b7cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b7d0:	f380 8809 	msr	PSP, r0
 800b7d4:	f3bf 8f6f 	isb	sy
 800b7d8:	4770      	bx	lr
 800b7da:	bf00      	nop
 800b7dc:	f3af 8000 	nop.w

0800b7e0 <pxCurrentTCBConst>:
 800b7e0:	20003058 	.word	0x20003058
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b7e4:	bf00      	nop
 800b7e6:	bf00      	nop

0800b7e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b082      	sub	sp, #8
 800b7ec:	af00      	add	r7, sp, #0
	__asm volatile
 800b7ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7f2:	f383 8811 	msr	BASEPRI, r3
 800b7f6:	f3bf 8f6f 	isb	sy
 800b7fa:	f3bf 8f4f 	dsb	sy
 800b7fe:	607b      	str	r3, [r7, #4]
}
 800b800:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b802:	f7ff fbc3 	bl	800af8c <xTaskIncrementTick>
 800b806:	4603      	mov	r3, r0
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d003      	beq.n	800b814 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b80c:	4b06      	ldr	r3, [pc, #24]	@ (800b828 <xPortSysTickHandler+0x40>)
 800b80e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b812:	601a      	str	r2, [r3, #0]
 800b814:	2300      	movs	r3, #0
 800b816:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	f383 8811 	msr	BASEPRI, r3
}
 800b81e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b820:	bf00      	nop
 800b822:	3708      	adds	r7, #8
 800b824:	46bd      	mov	sp, r7
 800b826:	bd80      	pop	{r7, pc}
 800b828:	e000ed04 	.word	0xe000ed04

0800b82c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b82c:	b480      	push	{r7}
 800b82e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b830:	4b0b      	ldr	r3, [pc, #44]	@ (800b860 <vPortSetupTimerInterrupt+0x34>)
 800b832:	2200      	movs	r2, #0
 800b834:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b836:	4b0b      	ldr	r3, [pc, #44]	@ (800b864 <vPortSetupTimerInterrupt+0x38>)
 800b838:	2200      	movs	r2, #0
 800b83a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b83c:	4b0a      	ldr	r3, [pc, #40]	@ (800b868 <vPortSetupTimerInterrupt+0x3c>)
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	4a0a      	ldr	r2, [pc, #40]	@ (800b86c <vPortSetupTimerInterrupt+0x40>)
 800b842:	fba2 2303 	umull	r2, r3, r2, r3
 800b846:	099b      	lsrs	r3, r3, #6
 800b848:	4a09      	ldr	r2, [pc, #36]	@ (800b870 <vPortSetupTimerInterrupt+0x44>)
 800b84a:	3b01      	subs	r3, #1
 800b84c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b84e:	4b04      	ldr	r3, [pc, #16]	@ (800b860 <vPortSetupTimerInterrupt+0x34>)
 800b850:	2207      	movs	r2, #7
 800b852:	601a      	str	r2, [r3, #0]
}
 800b854:	bf00      	nop
 800b856:	46bd      	mov	sp, r7
 800b858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85c:	4770      	bx	lr
 800b85e:	bf00      	nop
 800b860:	e000e010 	.word	0xe000e010
 800b864:	e000e018 	.word	0xe000e018
 800b868:	20000004 	.word	0x20000004
 800b86c:	10624dd3 	.word	0x10624dd3
 800b870:	e000e014 	.word	0xe000e014

0800b874 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b874:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800b884 <vPortEnableVFP+0x10>
 800b878:	6801      	ldr	r1, [r0, #0]
 800b87a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b87e:	6001      	str	r1, [r0, #0]
 800b880:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b882:	bf00      	nop
 800b884:	e000ed88 	.word	0xe000ed88

0800b888 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b08a      	sub	sp, #40	@ 0x28
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b890:	2300      	movs	r3, #0
 800b892:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b894:	f7ff face 	bl	800ae34 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b898:	4b5c      	ldr	r3, [pc, #368]	@ (800ba0c <pvPortMalloc+0x184>)
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d101      	bne.n	800b8a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b8a0:	f000 f924 	bl	800baec <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b8a4:	4b5a      	ldr	r3, [pc, #360]	@ (800ba10 <pvPortMalloc+0x188>)
 800b8a6:	681a      	ldr	r2, [r3, #0]
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	4013      	ands	r3, r2
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	f040 8095 	bne.w	800b9dc <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d01e      	beq.n	800b8f6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800b8b8:	2208      	movs	r2, #8
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	4413      	add	r3, r2
 800b8be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	f003 0307 	and.w	r3, r3, #7
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d015      	beq.n	800b8f6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	f023 0307 	bic.w	r3, r3, #7
 800b8d0:	3308      	adds	r3, #8
 800b8d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	f003 0307 	and.w	r3, r3, #7
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d00b      	beq.n	800b8f6 <pvPortMalloc+0x6e>
	__asm volatile
 800b8de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8e2:	f383 8811 	msr	BASEPRI, r3
 800b8e6:	f3bf 8f6f 	isb	sy
 800b8ea:	f3bf 8f4f 	dsb	sy
 800b8ee:	617b      	str	r3, [r7, #20]
}
 800b8f0:	bf00      	nop
 800b8f2:	bf00      	nop
 800b8f4:	e7fd      	b.n	800b8f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d06f      	beq.n	800b9dc <pvPortMalloc+0x154>
 800b8fc:	4b45      	ldr	r3, [pc, #276]	@ (800ba14 <pvPortMalloc+0x18c>)
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	687a      	ldr	r2, [r7, #4]
 800b902:	429a      	cmp	r2, r3
 800b904:	d86a      	bhi.n	800b9dc <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b906:	4b44      	ldr	r3, [pc, #272]	@ (800ba18 <pvPortMalloc+0x190>)
 800b908:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b90a:	4b43      	ldr	r3, [pc, #268]	@ (800ba18 <pvPortMalloc+0x190>)
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b910:	e004      	b.n	800b91c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800b912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b914:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b91c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b91e:	685b      	ldr	r3, [r3, #4]
 800b920:	687a      	ldr	r2, [r7, #4]
 800b922:	429a      	cmp	r2, r3
 800b924:	d903      	bls.n	800b92e <pvPortMalloc+0xa6>
 800b926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d1f1      	bne.n	800b912 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b92e:	4b37      	ldr	r3, [pc, #220]	@ (800ba0c <pvPortMalloc+0x184>)
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b934:	429a      	cmp	r2, r3
 800b936:	d051      	beq.n	800b9dc <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b938:	6a3b      	ldr	r3, [r7, #32]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	2208      	movs	r2, #8
 800b93e:	4413      	add	r3, r2
 800b940:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b944:	681a      	ldr	r2, [r3, #0]
 800b946:	6a3b      	ldr	r3, [r7, #32]
 800b948:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b94a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b94c:	685a      	ldr	r2, [r3, #4]
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	1ad2      	subs	r2, r2, r3
 800b952:	2308      	movs	r3, #8
 800b954:	005b      	lsls	r3, r3, #1
 800b956:	429a      	cmp	r2, r3
 800b958:	d920      	bls.n	800b99c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b95a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	4413      	add	r3, r2
 800b960:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b962:	69bb      	ldr	r3, [r7, #24]
 800b964:	f003 0307 	and.w	r3, r3, #7
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d00b      	beq.n	800b984 <pvPortMalloc+0xfc>
	__asm volatile
 800b96c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b970:	f383 8811 	msr	BASEPRI, r3
 800b974:	f3bf 8f6f 	isb	sy
 800b978:	f3bf 8f4f 	dsb	sy
 800b97c:	613b      	str	r3, [r7, #16]
}
 800b97e:	bf00      	nop
 800b980:	bf00      	nop
 800b982:	e7fd      	b.n	800b980 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b986:	685a      	ldr	r2, [r3, #4]
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	1ad2      	subs	r2, r2, r3
 800b98c:	69bb      	ldr	r3, [r7, #24]
 800b98e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b992:	687a      	ldr	r2, [r7, #4]
 800b994:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b996:	69b8      	ldr	r0, [r7, #24]
 800b998:	f000 f90a 	bl	800bbb0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b99c:	4b1d      	ldr	r3, [pc, #116]	@ (800ba14 <pvPortMalloc+0x18c>)
 800b99e:	681a      	ldr	r2, [r3, #0]
 800b9a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9a2:	685b      	ldr	r3, [r3, #4]
 800b9a4:	1ad3      	subs	r3, r2, r3
 800b9a6:	4a1b      	ldr	r2, [pc, #108]	@ (800ba14 <pvPortMalloc+0x18c>)
 800b9a8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b9aa:	4b1a      	ldr	r3, [pc, #104]	@ (800ba14 <pvPortMalloc+0x18c>)
 800b9ac:	681a      	ldr	r2, [r3, #0]
 800b9ae:	4b1b      	ldr	r3, [pc, #108]	@ (800ba1c <pvPortMalloc+0x194>)
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	429a      	cmp	r2, r3
 800b9b4:	d203      	bcs.n	800b9be <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b9b6:	4b17      	ldr	r3, [pc, #92]	@ (800ba14 <pvPortMalloc+0x18c>)
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	4a18      	ldr	r2, [pc, #96]	@ (800ba1c <pvPortMalloc+0x194>)
 800b9bc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b9be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9c0:	685a      	ldr	r2, [r3, #4]
 800b9c2:	4b13      	ldr	r3, [pc, #76]	@ (800ba10 <pvPortMalloc+0x188>)
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	431a      	orrs	r2, r3
 800b9c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9ca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b9cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b9d2:	4b13      	ldr	r3, [pc, #76]	@ (800ba20 <pvPortMalloc+0x198>)
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	3301      	adds	r3, #1
 800b9d8:	4a11      	ldr	r2, [pc, #68]	@ (800ba20 <pvPortMalloc+0x198>)
 800b9da:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b9dc:	f7ff fa38 	bl	800ae50 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b9e0:	69fb      	ldr	r3, [r7, #28]
 800b9e2:	f003 0307 	and.w	r3, r3, #7
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d00b      	beq.n	800ba02 <pvPortMalloc+0x17a>
	__asm volatile
 800b9ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9ee:	f383 8811 	msr	BASEPRI, r3
 800b9f2:	f3bf 8f6f 	isb	sy
 800b9f6:	f3bf 8f4f 	dsb	sy
 800b9fa:	60fb      	str	r3, [r7, #12]
}
 800b9fc:	bf00      	nop
 800b9fe:	bf00      	nop
 800ba00:	e7fd      	b.n	800b9fe <pvPortMalloc+0x176>
	return pvReturn;
 800ba02:	69fb      	ldr	r3, [r7, #28]
}
 800ba04:	4618      	mov	r0, r3
 800ba06:	3728      	adds	r7, #40	@ 0x28
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	bd80      	pop	{r7, pc}
 800ba0c:	20003d4c 	.word	0x20003d4c
 800ba10:	20003d60 	.word	0x20003d60
 800ba14:	20003d50 	.word	0x20003d50
 800ba18:	20003d44 	.word	0x20003d44
 800ba1c:	20003d54 	.word	0x20003d54
 800ba20:	20003d58 	.word	0x20003d58

0800ba24 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b086      	sub	sp, #24
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d04f      	beq.n	800bad6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ba36:	2308      	movs	r3, #8
 800ba38:	425b      	negs	r3, r3
 800ba3a:	697a      	ldr	r2, [r7, #20]
 800ba3c:	4413      	add	r3, r2
 800ba3e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ba40:	697b      	ldr	r3, [r7, #20]
 800ba42:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ba44:	693b      	ldr	r3, [r7, #16]
 800ba46:	685a      	ldr	r2, [r3, #4]
 800ba48:	4b25      	ldr	r3, [pc, #148]	@ (800bae0 <vPortFree+0xbc>)
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	4013      	ands	r3, r2
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d10b      	bne.n	800ba6a <vPortFree+0x46>
	__asm volatile
 800ba52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba56:	f383 8811 	msr	BASEPRI, r3
 800ba5a:	f3bf 8f6f 	isb	sy
 800ba5e:	f3bf 8f4f 	dsb	sy
 800ba62:	60fb      	str	r3, [r7, #12]
}
 800ba64:	bf00      	nop
 800ba66:	bf00      	nop
 800ba68:	e7fd      	b.n	800ba66 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ba6a:	693b      	ldr	r3, [r7, #16]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d00b      	beq.n	800ba8a <vPortFree+0x66>
	__asm volatile
 800ba72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba76:	f383 8811 	msr	BASEPRI, r3
 800ba7a:	f3bf 8f6f 	isb	sy
 800ba7e:	f3bf 8f4f 	dsb	sy
 800ba82:	60bb      	str	r3, [r7, #8]
}
 800ba84:	bf00      	nop
 800ba86:	bf00      	nop
 800ba88:	e7fd      	b.n	800ba86 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ba8a:	693b      	ldr	r3, [r7, #16]
 800ba8c:	685a      	ldr	r2, [r3, #4]
 800ba8e:	4b14      	ldr	r3, [pc, #80]	@ (800bae0 <vPortFree+0xbc>)
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	4013      	ands	r3, r2
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d01e      	beq.n	800bad6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ba98:	693b      	ldr	r3, [r7, #16]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d11a      	bne.n	800bad6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800baa0:	693b      	ldr	r3, [r7, #16]
 800baa2:	685a      	ldr	r2, [r3, #4]
 800baa4:	4b0e      	ldr	r3, [pc, #56]	@ (800bae0 <vPortFree+0xbc>)
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	43db      	mvns	r3, r3
 800baaa:	401a      	ands	r2, r3
 800baac:	693b      	ldr	r3, [r7, #16]
 800baae:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bab0:	f7ff f9c0 	bl	800ae34 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bab4:	693b      	ldr	r3, [r7, #16]
 800bab6:	685a      	ldr	r2, [r3, #4]
 800bab8:	4b0a      	ldr	r3, [pc, #40]	@ (800bae4 <vPortFree+0xc0>)
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	4413      	add	r3, r2
 800babe:	4a09      	ldr	r2, [pc, #36]	@ (800bae4 <vPortFree+0xc0>)
 800bac0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bac2:	6938      	ldr	r0, [r7, #16]
 800bac4:	f000 f874 	bl	800bbb0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bac8:	4b07      	ldr	r3, [pc, #28]	@ (800bae8 <vPortFree+0xc4>)
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	3301      	adds	r3, #1
 800bace:	4a06      	ldr	r2, [pc, #24]	@ (800bae8 <vPortFree+0xc4>)
 800bad0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bad2:	f7ff f9bd 	bl	800ae50 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bad6:	bf00      	nop
 800bad8:	3718      	adds	r7, #24
 800bada:	46bd      	mov	sp, r7
 800badc:	bd80      	pop	{r7, pc}
 800bade:	bf00      	nop
 800bae0:	20003d60 	.word	0x20003d60
 800bae4:	20003d50 	.word	0x20003d50
 800bae8:	20003d5c 	.word	0x20003d5c

0800baec <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800baec:	b480      	push	{r7}
 800baee:	b085      	sub	sp, #20
 800baf0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800baf2:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800baf6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800baf8:	4b27      	ldr	r3, [pc, #156]	@ (800bb98 <prvHeapInit+0xac>)
 800bafa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	f003 0307 	and.w	r3, r3, #7
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d00c      	beq.n	800bb20 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	3307      	adds	r3, #7
 800bb0a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	f023 0307 	bic.w	r3, r3, #7
 800bb12:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bb14:	68ba      	ldr	r2, [r7, #8]
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	1ad3      	subs	r3, r2, r3
 800bb1a:	4a1f      	ldr	r2, [pc, #124]	@ (800bb98 <prvHeapInit+0xac>)
 800bb1c:	4413      	add	r3, r2
 800bb1e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bb24:	4a1d      	ldr	r2, [pc, #116]	@ (800bb9c <prvHeapInit+0xb0>)
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bb2a:	4b1c      	ldr	r3, [pc, #112]	@ (800bb9c <prvHeapInit+0xb0>)
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	68ba      	ldr	r2, [r7, #8]
 800bb34:	4413      	add	r3, r2
 800bb36:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bb38:	2208      	movs	r2, #8
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	1a9b      	subs	r3, r3, r2
 800bb3e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	f023 0307 	bic.w	r3, r3, #7
 800bb46:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	4a15      	ldr	r2, [pc, #84]	@ (800bba0 <prvHeapInit+0xb4>)
 800bb4c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bb4e:	4b14      	ldr	r3, [pc, #80]	@ (800bba0 <prvHeapInit+0xb4>)
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	2200      	movs	r2, #0
 800bb54:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bb56:	4b12      	ldr	r3, [pc, #72]	@ (800bba0 <prvHeapInit+0xb4>)
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bb62:	683b      	ldr	r3, [r7, #0]
 800bb64:	68fa      	ldr	r2, [r7, #12]
 800bb66:	1ad2      	subs	r2, r2, r3
 800bb68:	683b      	ldr	r3, [r7, #0]
 800bb6a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bb6c:	4b0c      	ldr	r3, [pc, #48]	@ (800bba0 <prvHeapInit+0xb4>)
 800bb6e:	681a      	ldr	r2, [r3, #0]
 800bb70:	683b      	ldr	r3, [r7, #0]
 800bb72:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bb74:	683b      	ldr	r3, [r7, #0]
 800bb76:	685b      	ldr	r3, [r3, #4]
 800bb78:	4a0a      	ldr	r2, [pc, #40]	@ (800bba4 <prvHeapInit+0xb8>)
 800bb7a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bb7c:	683b      	ldr	r3, [r7, #0]
 800bb7e:	685b      	ldr	r3, [r3, #4]
 800bb80:	4a09      	ldr	r2, [pc, #36]	@ (800bba8 <prvHeapInit+0xbc>)
 800bb82:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bb84:	4b09      	ldr	r3, [pc, #36]	@ (800bbac <prvHeapInit+0xc0>)
 800bb86:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800bb8a:	601a      	str	r2, [r3, #0]
}
 800bb8c:	bf00      	nop
 800bb8e:	3714      	adds	r7, #20
 800bb90:	46bd      	mov	sp, r7
 800bb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb96:	4770      	bx	lr
 800bb98:	2000318c 	.word	0x2000318c
 800bb9c:	20003d44 	.word	0x20003d44
 800bba0:	20003d4c 	.word	0x20003d4c
 800bba4:	20003d54 	.word	0x20003d54
 800bba8:	20003d50 	.word	0x20003d50
 800bbac:	20003d60 	.word	0x20003d60

0800bbb0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bbb0:	b480      	push	{r7}
 800bbb2:	b085      	sub	sp, #20
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bbb8:	4b28      	ldr	r3, [pc, #160]	@ (800bc5c <prvInsertBlockIntoFreeList+0xac>)
 800bbba:	60fb      	str	r3, [r7, #12]
 800bbbc:	e002      	b.n	800bbc4 <prvInsertBlockIntoFreeList+0x14>
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	60fb      	str	r3, [r7, #12]
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	687a      	ldr	r2, [r7, #4]
 800bbca:	429a      	cmp	r2, r3
 800bbcc:	d8f7      	bhi.n	800bbbe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	685b      	ldr	r3, [r3, #4]
 800bbd6:	68ba      	ldr	r2, [r7, #8]
 800bbd8:	4413      	add	r3, r2
 800bbda:	687a      	ldr	r2, [r7, #4]
 800bbdc:	429a      	cmp	r2, r3
 800bbde:	d108      	bne.n	800bbf2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	685a      	ldr	r2, [r3, #4]
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	685b      	ldr	r3, [r3, #4]
 800bbe8:	441a      	add	r2, r3
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	685b      	ldr	r3, [r3, #4]
 800bbfa:	68ba      	ldr	r2, [r7, #8]
 800bbfc:	441a      	add	r2, r3
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	429a      	cmp	r2, r3
 800bc04:	d118      	bne.n	800bc38 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	681a      	ldr	r2, [r3, #0]
 800bc0a:	4b15      	ldr	r3, [pc, #84]	@ (800bc60 <prvInsertBlockIntoFreeList+0xb0>)
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	429a      	cmp	r2, r3
 800bc10:	d00d      	beq.n	800bc2e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	685a      	ldr	r2, [r3, #4]
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	685b      	ldr	r3, [r3, #4]
 800bc1c:	441a      	add	r2, r3
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	681a      	ldr	r2, [r3, #0]
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	601a      	str	r2, [r3, #0]
 800bc2c:	e008      	b.n	800bc40 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bc2e:	4b0c      	ldr	r3, [pc, #48]	@ (800bc60 <prvInsertBlockIntoFreeList+0xb0>)
 800bc30:	681a      	ldr	r2, [r3, #0]
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	601a      	str	r2, [r3, #0]
 800bc36:	e003      	b.n	800bc40 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	681a      	ldr	r2, [r3, #0]
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bc40:	68fa      	ldr	r2, [r7, #12]
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	429a      	cmp	r2, r3
 800bc46:	d002      	beq.n	800bc4e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	687a      	ldr	r2, [r7, #4]
 800bc4c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bc4e:	bf00      	nop
 800bc50:	3714      	adds	r7, #20
 800bc52:	46bd      	mov	sp, r7
 800bc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc58:	4770      	bx	lr
 800bc5a:	bf00      	nop
 800bc5c:	20003d44 	.word	0x20003d44
 800bc60:	20003d4c 	.word	0x20003d4c

0800bc64 <srand>:
 800bc64:	b538      	push	{r3, r4, r5, lr}
 800bc66:	4b10      	ldr	r3, [pc, #64]	@ (800bca8 <srand+0x44>)
 800bc68:	681d      	ldr	r5, [r3, #0]
 800bc6a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800bc6c:	4604      	mov	r4, r0
 800bc6e:	b9b3      	cbnz	r3, 800bc9e <srand+0x3a>
 800bc70:	2018      	movs	r0, #24
 800bc72:	f000 fb93 	bl	800c39c <malloc>
 800bc76:	4602      	mov	r2, r0
 800bc78:	6328      	str	r0, [r5, #48]	@ 0x30
 800bc7a:	b920      	cbnz	r0, 800bc86 <srand+0x22>
 800bc7c:	4b0b      	ldr	r3, [pc, #44]	@ (800bcac <srand+0x48>)
 800bc7e:	480c      	ldr	r0, [pc, #48]	@ (800bcb0 <srand+0x4c>)
 800bc80:	2146      	movs	r1, #70	@ 0x46
 800bc82:	f000 fb23 	bl	800c2cc <__assert_func>
 800bc86:	490b      	ldr	r1, [pc, #44]	@ (800bcb4 <srand+0x50>)
 800bc88:	4b0b      	ldr	r3, [pc, #44]	@ (800bcb8 <srand+0x54>)
 800bc8a:	e9c0 1300 	strd	r1, r3, [r0]
 800bc8e:	4b0b      	ldr	r3, [pc, #44]	@ (800bcbc <srand+0x58>)
 800bc90:	6083      	str	r3, [r0, #8]
 800bc92:	230b      	movs	r3, #11
 800bc94:	8183      	strh	r3, [r0, #12]
 800bc96:	2100      	movs	r1, #0
 800bc98:	2001      	movs	r0, #1
 800bc9a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800bc9e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800bca0:	2200      	movs	r2, #0
 800bca2:	611c      	str	r4, [r3, #16]
 800bca4:	615a      	str	r2, [r3, #20]
 800bca6:	bd38      	pop	{r3, r4, r5, pc}
 800bca8:	20000068 	.word	0x20000068
 800bcac:	0800d554 	.word	0x0800d554
 800bcb0:	0800d56b 	.word	0x0800d56b
 800bcb4:	abcd330e 	.word	0xabcd330e
 800bcb8:	e66d1234 	.word	0xe66d1234
 800bcbc:	0005deec 	.word	0x0005deec

0800bcc0 <rand>:
 800bcc0:	4b16      	ldr	r3, [pc, #88]	@ (800bd1c <rand+0x5c>)
 800bcc2:	b510      	push	{r4, lr}
 800bcc4:	681c      	ldr	r4, [r3, #0]
 800bcc6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800bcc8:	b9b3      	cbnz	r3, 800bcf8 <rand+0x38>
 800bcca:	2018      	movs	r0, #24
 800bccc:	f000 fb66 	bl	800c39c <malloc>
 800bcd0:	4602      	mov	r2, r0
 800bcd2:	6320      	str	r0, [r4, #48]	@ 0x30
 800bcd4:	b920      	cbnz	r0, 800bce0 <rand+0x20>
 800bcd6:	4b12      	ldr	r3, [pc, #72]	@ (800bd20 <rand+0x60>)
 800bcd8:	4812      	ldr	r0, [pc, #72]	@ (800bd24 <rand+0x64>)
 800bcda:	2152      	movs	r1, #82	@ 0x52
 800bcdc:	f000 faf6 	bl	800c2cc <__assert_func>
 800bce0:	4911      	ldr	r1, [pc, #68]	@ (800bd28 <rand+0x68>)
 800bce2:	4b12      	ldr	r3, [pc, #72]	@ (800bd2c <rand+0x6c>)
 800bce4:	e9c0 1300 	strd	r1, r3, [r0]
 800bce8:	4b11      	ldr	r3, [pc, #68]	@ (800bd30 <rand+0x70>)
 800bcea:	6083      	str	r3, [r0, #8]
 800bcec:	230b      	movs	r3, #11
 800bcee:	8183      	strh	r3, [r0, #12]
 800bcf0:	2100      	movs	r1, #0
 800bcf2:	2001      	movs	r0, #1
 800bcf4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800bcf8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800bcfa:	480e      	ldr	r0, [pc, #56]	@ (800bd34 <rand+0x74>)
 800bcfc:	690b      	ldr	r3, [r1, #16]
 800bcfe:	694c      	ldr	r4, [r1, #20]
 800bd00:	4a0d      	ldr	r2, [pc, #52]	@ (800bd38 <rand+0x78>)
 800bd02:	4358      	muls	r0, r3
 800bd04:	fb02 0004 	mla	r0, r2, r4, r0
 800bd08:	fba3 3202 	umull	r3, r2, r3, r2
 800bd0c:	3301      	adds	r3, #1
 800bd0e:	eb40 0002 	adc.w	r0, r0, r2
 800bd12:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800bd16:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800bd1a:	bd10      	pop	{r4, pc}
 800bd1c:	20000068 	.word	0x20000068
 800bd20:	0800d554 	.word	0x0800d554
 800bd24:	0800d56b 	.word	0x0800d56b
 800bd28:	abcd330e 	.word	0xabcd330e
 800bd2c:	e66d1234 	.word	0xe66d1234
 800bd30:	0005deec 	.word	0x0005deec
 800bd34:	5851f42d 	.word	0x5851f42d
 800bd38:	4c957f2d 	.word	0x4c957f2d

0800bd3c <std>:
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	b510      	push	{r4, lr}
 800bd40:	4604      	mov	r4, r0
 800bd42:	e9c0 3300 	strd	r3, r3, [r0]
 800bd46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bd4a:	6083      	str	r3, [r0, #8]
 800bd4c:	8181      	strh	r1, [r0, #12]
 800bd4e:	6643      	str	r3, [r0, #100]	@ 0x64
 800bd50:	81c2      	strh	r2, [r0, #14]
 800bd52:	6183      	str	r3, [r0, #24]
 800bd54:	4619      	mov	r1, r3
 800bd56:	2208      	movs	r2, #8
 800bd58:	305c      	adds	r0, #92	@ 0x5c
 800bd5a:	f000 fa2d 	bl	800c1b8 <memset>
 800bd5e:	4b0d      	ldr	r3, [pc, #52]	@ (800bd94 <std+0x58>)
 800bd60:	6263      	str	r3, [r4, #36]	@ 0x24
 800bd62:	4b0d      	ldr	r3, [pc, #52]	@ (800bd98 <std+0x5c>)
 800bd64:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bd66:	4b0d      	ldr	r3, [pc, #52]	@ (800bd9c <std+0x60>)
 800bd68:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bd6a:	4b0d      	ldr	r3, [pc, #52]	@ (800bda0 <std+0x64>)
 800bd6c:	6323      	str	r3, [r4, #48]	@ 0x30
 800bd6e:	4b0d      	ldr	r3, [pc, #52]	@ (800bda4 <std+0x68>)
 800bd70:	6224      	str	r4, [r4, #32]
 800bd72:	429c      	cmp	r4, r3
 800bd74:	d006      	beq.n	800bd84 <std+0x48>
 800bd76:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bd7a:	4294      	cmp	r4, r2
 800bd7c:	d002      	beq.n	800bd84 <std+0x48>
 800bd7e:	33d0      	adds	r3, #208	@ 0xd0
 800bd80:	429c      	cmp	r4, r3
 800bd82:	d105      	bne.n	800bd90 <std+0x54>
 800bd84:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bd88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd8c:	f000 ba8c 	b.w	800c2a8 <__retarget_lock_init_recursive>
 800bd90:	bd10      	pop	{r4, pc}
 800bd92:	bf00      	nop
 800bd94:	0800c009 	.word	0x0800c009
 800bd98:	0800c02b 	.word	0x0800c02b
 800bd9c:	0800c063 	.word	0x0800c063
 800bda0:	0800c087 	.word	0x0800c087
 800bda4:	20003d64 	.word	0x20003d64

0800bda8 <stdio_exit_handler>:
 800bda8:	4a02      	ldr	r2, [pc, #8]	@ (800bdb4 <stdio_exit_handler+0xc>)
 800bdaa:	4903      	ldr	r1, [pc, #12]	@ (800bdb8 <stdio_exit_handler+0x10>)
 800bdac:	4803      	ldr	r0, [pc, #12]	@ (800bdbc <stdio_exit_handler+0x14>)
 800bdae:	f000 b869 	b.w	800be84 <_fwalk_sglue>
 800bdb2:	bf00      	nop
 800bdb4:	2000005c 	.word	0x2000005c
 800bdb8:	0800ce61 	.word	0x0800ce61
 800bdbc:	2000006c 	.word	0x2000006c

0800bdc0 <cleanup_stdio>:
 800bdc0:	6841      	ldr	r1, [r0, #4]
 800bdc2:	4b0c      	ldr	r3, [pc, #48]	@ (800bdf4 <cleanup_stdio+0x34>)
 800bdc4:	4299      	cmp	r1, r3
 800bdc6:	b510      	push	{r4, lr}
 800bdc8:	4604      	mov	r4, r0
 800bdca:	d001      	beq.n	800bdd0 <cleanup_stdio+0x10>
 800bdcc:	f001 f848 	bl	800ce60 <_fflush_r>
 800bdd0:	68a1      	ldr	r1, [r4, #8]
 800bdd2:	4b09      	ldr	r3, [pc, #36]	@ (800bdf8 <cleanup_stdio+0x38>)
 800bdd4:	4299      	cmp	r1, r3
 800bdd6:	d002      	beq.n	800bdde <cleanup_stdio+0x1e>
 800bdd8:	4620      	mov	r0, r4
 800bdda:	f001 f841 	bl	800ce60 <_fflush_r>
 800bdde:	68e1      	ldr	r1, [r4, #12]
 800bde0:	4b06      	ldr	r3, [pc, #24]	@ (800bdfc <cleanup_stdio+0x3c>)
 800bde2:	4299      	cmp	r1, r3
 800bde4:	d004      	beq.n	800bdf0 <cleanup_stdio+0x30>
 800bde6:	4620      	mov	r0, r4
 800bde8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bdec:	f001 b838 	b.w	800ce60 <_fflush_r>
 800bdf0:	bd10      	pop	{r4, pc}
 800bdf2:	bf00      	nop
 800bdf4:	20003d64 	.word	0x20003d64
 800bdf8:	20003dcc 	.word	0x20003dcc
 800bdfc:	20003e34 	.word	0x20003e34

0800be00 <global_stdio_init.part.0>:
 800be00:	b510      	push	{r4, lr}
 800be02:	4b0b      	ldr	r3, [pc, #44]	@ (800be30 <global_stdio_init.part.0+0x30>)
 800be04:	4c0b      	ldr	r4, [pc, #44]	@ (800be34 <global_stdio_init.part.0+0x34>)
 800be06:	4a0c      	ldr	r2, [pc, #48]	@ (800be38 <global_stdio_init.part.0+0x38>)
 800be08:	601a      	str	r2, [r3, #0]
 800be0a:	4620      	mov	r0, r4
 800be0c:	2200      	movs	r2, #0
 800be0e:	2104      	movs	r1, #4
 800be10:	f7ff ff94 	bl	800bd3c <std>
 800be14:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800be18:	2201      	movs	r2, #1
 800be1a:	2109      	movs	r1, #9
 800be1c:	f7ff ff8e 	bl	800bd3c <std>
 800be20:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800be24:	2202      	movs	r2, #2
 800be26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be2a:	2112      	movs	r1, #18
 800be2c:	f7ff bf86 	b.w	800bd3c <std>
 800be30:	20003e9c 	.word	0x20003e9c
 800be34:	20003d64 	.word	0x20003d64
 800be38:	0800bda9 	.word	0x0800bda9

0800be3c <__sfp_lock_acquire>:
 800be3c:	4801      	ldr	r0, [pc, #4]	@ (800be44 <__sfp_lock_acquire+0x8>)
 800be3e:	f000 ba34 	b.w	800c2aa <__retarget_lock_acquire_recursive>
 800be42:	bf00      	nop
 800be44:	20003ea5 	.word	0x20003ea5

0800be48 <__sfp_lock_release>:
 800be48:	4801      	ldr	r0, [pc, #4]	@ (800be50 <__sfp_lock_release+0x8>)
 800be4a:	f000 ba2f 	b.w	800c2ac <__retarget_lock_release_recursive>
 800be4e:	bf00      	nop
 800be50:	20003ea5 	.word	0x20003ea5

0800be54 <__sinit>:
 800be54:	b510      	push	{r4, lr}
 800be56:	4604      	mov	r4, r0
 800be58:	f7ff fff0 	bl	800be3c <__sfp_lock_acquire>
 800be5c:	6a23      	ldr	r3, [r4, #32]
 800be5e:	b11b      	cbz	r3, 800be68 <__sinit+0x14>
 800be60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be64:	f7ff bff0 	b.w	800be48 <__sfp_lock_release>
 800be68:	4b04      	ldr	r3, [pc, #16]	@ (800be7c <__sinit+0x28>)
 800be6a:	6223      	str	r3, [r4, #32]
 800be6c:	4b04      	ldr	r3, [pc, #16]	@ (800be80 <__sinit+0x2c>)
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d1f5      	bne.n	800be60 <__sinit+0xc>
 800be74:	f7ff ffc4 	bl	800be00 <global_stdio_init.part.0>
 800be78:	e7f2      	b.n	800be60 <__sinit+0xc>
 800be7a:	bf00      	nop
 800be7c:	0800bdc1 	.word	0x0800bdc1
 800be80:	20003e9c 	.word	0x20003e9c

0800be84 <_fwalk_sglue>:
 800be84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be88:	4607      	mov	r7, r0
 800be8a:	4688      	mov	r8, r1
 800be8c:	4614      	mov	r4, r2
 800be8e:	2600      	movs	r6, #0
 800be90:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800be94:	f1b9 0901 	subs.w	r9, r9, #1
 800be98:	d505      	bpl.n	800bea6 <_fwalk_sglue+0x22>
 800be9a:	6824      	ldr	r4, [r4, #0]
 800be9c:	2c00      	cmp	r4, #0
 800be9e:	d1f7      	bne.n	800be90 <_fwalk_sglue+0xc>
 800bea0:	4630      	mov	r0, r6
 800bea2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bea6:	89ab      	ldrh	r3, [r5, #12]
 800bea8:	2b01      	cmp	r3, #1
 800beaa:	d907      	bls.n	800bebc <_fwalk_sglue+0x38>
 800beac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800beb0:	3301      	adds	r3, #1
 800beb2:	d003      	beq.n	800bebc <_fwalk_sglue+0x38>
 800beb4:	4629      	mov	r1, r5
 800beb6:	4638      	mov	r0, r7
 800beb8:	47c0      	blx	r8
 800beba:	4306      	orrs	r6, r0
 800bebc:	3568      	adds	r5, #104	@ 0x68
 800bebe:	e7e9      	b.n	800be94 <_fwalk_sglue+0x10>

0800bec0 <iprintf>:
 800bec0:	b40f      	push	{r0, r1, r2, r3}
 800bec2:	b507      	push	{r0, r1, r2, lr}
 800bec4:	4906      	ldr	r1, [pc, #24]	@ (800bee0 <iprintf+0x20>)
 800bec6:	ab04      	add	r3, sp, #16
 800bec8:	6808      	ldr	r0, [r1, #0]
 800beca:	f853 2b04 	ldr.w	r2, [r3], #4
 800bece:	6881      	ldr	r1, [r0, #8]
 800bed0:	9301      	str	r3, [sp, #4]
 800bed2:	f000 fc9b 	bl	800c80c <_vfiprintf_r>
 800bed6:	b003      	add	sp, #12
 800bed8:	f85d eb04 	ldr.w	lr, [sp], #4
 800bedc:	b004      	add	sp, #16
 800bede:	4770      	bx	lr
 800bee0:	20000068 	.word	0x20000068

0800bee4 <_puts_r>:
 800bee4:	6a03      	ldr	r3, [r0, #32]
 800bee6:	b570      	push	{r4, r5, r6, lr}
 800bee8:	6884      	ldr	r4, [r0, #8]
 800beea:	4605      	mov	r5, r0
 800beec:	460e      	mov	r6, r1
 800beee:	b90b      	cbnz	r3, 800bef4 <_puts_r+0x10>
 800bef0:	f7ff ffb0 	bl	800be54 <__sinit>
 800bef4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bef6:	07db      	lsls	r3, r3, #31
 800bef8:	d405      	bmi.n	800bf06 <_puts_r+0x22>
 800befa:	89a3      	ldrh	r3, [r4, #12]
 800befc:	0598      	lsls	r0, r3, #22
 800befe:	d402      	bmi.n	800bf06 <_puts_r+0x22>
 800bf00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bf02:	f000 f9d2 	bl	800c2aa <__retarget_lock_acquire_recursive>
 800bf06:	89a3      	ldrh	r3, [r4, #12]
 800bf08:	0719      	lsls	r1, r3, #28
 800bf0a:	d502      	bpl.n	800bf12 <_puts_r+0x2e>
 800bf0c:	6923      	ldr	r3, [r4, #16]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d135      	bne.n	800bf7e <_puts_r+0x9a>
 800bf12:	4621      	mov	r1, r4
 800bf14:	4628      	mov	r0, r5
 800bf16:	f000 f8f9 	bl	800c10c <__swsetup_r>
 800bf1a:	b380      	cbz	r0, 800bf7e <_puts_r+0x9a>
 800bf1c:	f04f 35ff 	mov.w	r5, #4294967295
 800bf20:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bf22:	07da      	lsls	r2, r3, #31
 800bf24:	d405      	bmi.n	800bf32 <_puts_r+0x4e>
 800bf26:	89a3      	ldrh	r3, [r4, #12]
 800bf28:	059b      	lsls	r3, r3, #22
 800bf2a:	d402      	bmi.n	800bf32 <_puts_r+0x4e>
 800bf2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bf2e:	f000 f9bd 	bl	800c2ac <__retarget_lock_release_recursive>
 800bf32:	4628      	mov	r0, r5
 800bf34:	bd70      	pop	{r4, r5, r6, pc}
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	da04      	bge.n	800bf44 <_puts_r+0x60>
 800bf3a:	69a2      	ldr	r2, [r4, #24]
 800bf3c:	429a      	cmp	r2, r3
 800bf3e:	dc17      	bgt.n	800bf70 <_puts_r+0x8c>
 800bf40:	290a      	cmp	r1, #10
 800bf42:	d015      	beq.n	800bf70 <_puts_r+0x8c>
 800bf44:	6823      	ldr	r3, [r4, #0]
 800bf46:	1c5a      	adds	r2, r3, #1
 800bf48:	6022      	str	r2, [r4, #0]
 800bf4a:	7019      	strb	r1, [r3, #0]
 800bf4c:	68a3      	ldr	r3, [r4, #8]
 800bf4e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bf52:	3b01      	subs	r3, #1
 800bf54:	60a3      	str	r3, [r4, #8]
 800bf56:	2900      	cmp	r1, #0
 800bf58:	d1ed      	bne.n	800bf36 <_puts_r+0x52>
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	da11      	bge.n	800bf82 <_puts_r+0x9e>
 800bf5e:	4622      	mov	r2, r4
 800bf60:	210a      	movs	r1, #10
 800bf62:	4628      	mov	r0, r5
 800bf64:	f000 f893 	bl	800c08e <__swbuf_r>
 800bf68:	3001      	adds	r0, #1
 800bf6a:	d0d7      	beq.n	800bf1c <_puts_r+0x38>
 800bf6c:	250a      	movs	r5, #10
 800bf6e:	e7d7      	b.n	800bf20 <_puts_r+0x3c>
 800bf70:	4622      	mov	r2, r4
 800bf72:	4628      	mov	r0, r5
 800bf74:	f000 f88b 	bl	800c08e <__swbuf_r>
 800bf78:	3001      	adds	r0, #1
 800bf7a:	d1e7      	bne.n	800bf4c <_puts_r+0x68>
 800bf7c:	e7ce      	b.n	800bf1c <_puts_r+0x38>
 800bf7e:	3e01      	subs	r6, #1
 800bf80:	e7e4      	b.n	800bf4c <_puts_r+0x68>
 800bf82:	6823      	ldr	r3, [r4, #0]
 800bf84:	1c5a      	adds	r2, r3, #1
 800bf86:	6022      	str	r2, [r4, #0]
 800bf88:	220a      	movs	r2, #10
 800bf8a:	701a      	strb	r2, [r3, #0]
 800bf8c:	e7ee      	b.n	800bf6c <_puts_r+0x88>
	...

0800bf90 <puts>:
 800bf90:	4b02      	ldr	r3, [pc, #8]	@ (800bf9c <puts+0xc>)
 800bf92:	4601      	mov	r1, r0
 800bf94:	6818      	ldr	r0, [r3, #0]
 800bf96:	f7ff bfa5 	b.w	800bee4 <_puts_r>
 800bf9a:	bf00      	nop
 800bf9c:	20000068 	.word	0x20000068

0800bfa0 <sniprintf>:
 800bfa0:	b40c      	push	{r2, r3}
 800bfa2:	b530      	push	{r4, r5, lr}
 800bfa4:	4b17      	ldr	r3, [pc, #92]	@ (800c004 <sniprintf+0x64>)
 800bfa6:	1e0c      	subs	r4, r1, #0
 800bfa8:	681d      	ldr	r5, [r3, #0]
 800bfaa:	b09d      	sub	sp, #116	@ 0x74
 800bfac:	da08      	bge.n	800bfc0 <sniprintf+0x20>
 800bfae:	238b      	movs	r3, #139	@ 0x8b
 800bfb0:	602b      	str	r3, [r5, #0]
 800bfb2:	f04f 30ff 	mov.w	r0, #4294967295
 800bfb6:	b01d      	add	sp, #116	@ 0x74
 800bfb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bfbc:	b002      	add	sp, #8
 800bfbe:	4770      	bx	lr
 800bfc0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800bfc4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800bfc8:	bf14      	ite	ne
 800bfca:	f104 33ff 	addne.w	r3, r4, #4294967295
 800bfce:	4623      	moveq	r3, r4
 800bfd0:	9304      	str	r3, [sp, #16]
 800bfd2:	9307      	str	r3, [sp, #28]
 800bfd4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800bfd8:	9002      	str	r0, [sp, #8]
 800bfda:	9006      	str	r0, [sp, #24]
 800bfdc:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bfe0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800bfe2:	ab21      	add	r3, sp, #132	@ 0x84
 800bfe4:	a902      	add	r1, sp, #8
 800bfe6:	4628      	mov	r0, r5
 800bfe8:	9301      	str	r3, [sp, #4]
 800bfea:	f000 fae9 	bl	800c5c0 <_svfiprintf_r>
 800bfee:	1c43      	adds	r3, r0, #1
 800bff0:	bfbc      	itt	lt
 800bff2:	238b      	movlt	r3, #139	@ 0x8b
 800bff4:	602b      	strlt	r3, [r5, #0]
 800bff6:	2c00      	cmp	r4, #0
 800bff8:	d0dd      	beq.n	800bfb6 <sniprintf+0x16>
 800bffa:	9b02      	ldr	r3, [sp, #8]
 800bffc:	2200      	movs	r2, #0
 800bffe:	701a      	strb	r2, [r3, #0]
 800c000:	e7d9      	b.n	800bfb6 <sniprintf+0x16>
 800c002:	bf00      	nop
 800c004:	20000068 	.word	0x20000068

0800c008 <__sread>:
 800c008:	b510      	push	{r4, lr}
 800c00a:	460c      	mov	r4, r1
 800c00c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c010:	f000 f8fc 	bl	800c20c <_read_r>
 800c014:	2800      	cmp	r0, #0
 800c016:	bfab      	itete	ge
 800c018:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c01a:	89a3      	ldrhlt	r3, [r4, #12]
 800c01c:	181b      	addge	r3, r3, r0
 800c01e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c022:	bfac      	ite	ge
 800c024:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c026:	81a3      	strhlt	r3, [r4, #12]
 800c028:	bd10      	pop	{r4, pc}

0800c02a <__swrite>:
 800c02a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c02e:	461f      	mov	r7, r3
 800c030:	898b      	ldrh	r3, [r1, #12]
 800c032:	05db      	lsls	r3, r3, #23
 800c034:	4605      	mov	r5, r0
 800c036:	460c      	mov	r4, r1
 800c038:	4616      	mov	r6, r2
 800c03a:	d505      	bpl.n	800c048 <__swrite+0x1e>
 800c03c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c040:	2302      	movs	r3, #2
 800c042:	2200      	movs	r2, #0
 800c044:	f000 f8d0 	bl	800c1e8 <_lseek_r>
 800c048:	89a3      	ldrh	r3, [r4, #12]
 800c04a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c04e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c052:	81a3      	strh	r3, [r4, #12]
 800c054:	4632      	mov	r2, r6
 800c056:	463b      	mov	r3, r7
 800c058:	4628      	mov	r0, r5
 800c05a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c05e:	f000 b8e7 	b.w	800c230 <_write_r>

0800c062 <__sseek>:
 800c062:	b510      	push	{r4, lr}
 800c064:	460c      	mov	r4, r1
 800c066:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c06a:	f000 f8bd 	bl	800c1e8 <_lseek_r>
 800c06e:	1c43      	adds	r3, r0, #1
 800c070:	89a3      	ldrh	r3, [r4, #12]
 800c072:	bf15      	itete	ne
 800c074:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c076:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c07a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c07e:	81a3      	strheq	r3, [r4, #12]
 800c080:	bf18      	it	ne
 800c082:	81a3      	strhne	r3, [r4, #12]
 800c084:	bd10      	pop	{r4, pc}

0800c086 <__sclose>:
 800c086:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c08a:	f000 b89d 	b.w	800c1c8 <_close_r>

0800c08e <__swbuf_r>:
 800c08e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c090:	460e      	mov	r6, r1
 800c092:	4614      	mov	r4, r2
 800c094:	4605      	mov	r5, r0
 800c096:	b118      	cbz	r0, 800c0a0 <__swbuf_r+0x12>
 800c098:	6a03      	ldr	r3, [r0, #32]
 800c09a:	b90b      	cbnz	r3, 800c0a0 <__swbuf_r+0x12>
 800c09c:	f7ff feda 	bl	800be54 <__sinit>
 800c0a0:	69a3      	ldr	r3, [r4, #24]
 800c0a2:	60a3      	str	r3, [r4, #8]
 800c0a4:	89a3      	ldrh	r3, [r4, #12]
 800c0a6:	071a      	lsls	r2, r3, #28
 800c0a8:	d501      	bpl.n	800c0ae <__swbuf_r+0x20>
 800c0aa:	6923      	ldr	r3, [r4, #16]
 800c0ac:	b943      	cbnz	r3, 800c0c0 <__swbuf_r+0x32>
 800c0ae:	4621      	mov	r1, r4
 800c0b0:	4628      	mov	r0, r5
 800c0b2:	f000 f82b 	bl	800c10c <__swsetup_r>
 800c0b6:	b118      	cbz	r0, 800c0c0 <__swbuf_r+0x32>
 800c0b8:	f04f 37ff 	mov.w	r7, #4294967295
 800c0bc:	4638      	mov	r0, r7
 800c0be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0c0:	6823      	ldr	r3, [r4, #0]
 800c0c2:	6922      	ldr	r2, [r4, #16]
 800c0c4:	1a98      	subs	r0, r3, r2
 800c0c6:	6963      	ldr	r3, [r4, #20]
 800c0c8:	b2f6      	uxtb	r6, r6
 800c0ca:	4283      	cmp	r3, r0
 800c0cc:	4637      	mov	r7, r6
 800c0ce:	dc05      	bgt.n	800c0dc <__swbuf_r+0x4e>
 800c0d0:	4621      	mov	r1, r4
 800c0d2:	4628      	mov	r0, r5
 800c0d4:	f000 fec4 	bl	800ce60 <_fflush_r>
 800c0d8:	2800      	cmp	r0, #0
 800c0da:	d1ed      	bne.n	800c0b8 <__swbuf_r+0x2a>
 800c0dc:	68a3      	ldr	r3, [r4, #8]
 800c0de:	3b01      	subs	r3, #1
 800c0e0:	60a3      	str	r3, [r4, #8]
 800c0e2:	6823      	ldr	r3, [r4, #0]
 800c0e4:	1c5a      	adds	r2, r3, #1
 800c0e6:	6022      	str	r2, [r4, #0]
 800c0e8:	701e      	strb	r6, [r3, #0]
 800c0ea:	6962      	ldr	r2, [r4, #20]
 800c0ec:	1c43      	adds	r3, r0, #1
 800c0ee:	429a      	cmp	r2, r3
 800c0f0:	d004      	beq.n	800c0fc <__swbuf_r+0x6e>
 800c0f2:	89a3      	ldrh	r3, [r4, #12]
 800c0f4:	07db      	lsls	r3, r3, #31
 800c0f6:	d5e1      	bpl.n	800c0bc <__swbuf_r+0x2e>
 800c0f8:	2e0a      	cmp	r6, #10
 800c0fa:	d1df      	bne.n	800c0bc <__swbuf_r+0x2e>
 800c0fc:	4621      	mov	r1, r4
 800c0fe:	4628      	mov	r0, r5
 800c100:	f000 feae 	bl	800ce60 <_fflush_r>
 800c104:	2800      	cmp	r0, #0
 800c106:	d0d9      	beq.n	800c0bc <__swbuf_r+0x2e>
 800c108:	e7d6      	b.n	800c0b8 <__swbuf_r+0x2a>
	...

0800c10c <__swsetup_r>:
 800c10c:	b538      	push	{r3, r4, r5, lr}
 800c10e:	4b29      	ldr	r3, [pc, #164]	@ (800c1b4 <__swsetup_r+0xa8>)
 800c110:	4605      	mov	r5, r0
 800c112:	6818      	ldr	r0, [r3, #0]
 800c114:	460c      	mov	r4, r1
 800c116:	b118      	cbz	r0, 800c120 <__swsetup_r+0x14>
 800c118:	6a03      	ldr	r3, [r0, #32]
 800c11a:	b90b      	cbnz	r3, 800c120 <__swsetup_r+0x14>
 800c11c:	f7ff fe9a 	bl	800be54 <__sinit>
 800c120:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c124:	0719      	lsls	r1, r3, #28
 800c126:	d422      	bmi.n	800c16e <__swsetup_r+0x62>
 800c128:	06da      	lsls	r2, r3, #27
 800c12a:	d407      	bmi.n	800c13c <__swsetup_r+0x30>
 800c12c:	2209      	movs	r2, #9
 800c12e:	602a      	str	r2, [r5, #0]
 800c130:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c134:	81a3      	strh	r3, [r4, #12]
 800c136:	f04f 30ff 	mov.w	r0, #4294967295
 800c13a:	e033      	b.n	800c1a4 <__swsetup_r+0x98>
 800c13c:	0758      	lsls	r0, r3, #29
 800c13e:	d512      	bpl.n	800c166 <__swsetup_r+0x5a>
 800c140:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c142:	b141      	cbz	r1, 800c156 <__swsetup_r+0x4a>
 800c144:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c148:	4299      	cmp	r1, r3
 800c14a:	d002      	beq.n	800c152 <__swsetup_r+0x46>
 800c14c:	4628      	mov	r0, r5
 800c14e:	f000 f8db 	bl	800c308 <_free_r>
 800c152:	2300      	movs	r3, #0
 800c154:	6363      	str	r3, [r4, #52]	@ 0x34
 800c156:	89a3      	ldrh	r3, [r4, #12]
 800c158:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c15c:	81a3      	strh	r3, [r4, #12]
 800c15e:	2300      	movs	r3, #0
 800c160:	6063      	str	r3, [r4, #4]
 800c162:	6923      	ldr	r3, [r4, #16]
 800c164:	6023      	str	r3, [r4, #0]
 800c166:	89a3      	ldrh	r3, [r4, #12]
 800c168:	f043 0308 	orr.w	r3, r3, #8
 800c16c:	81a3      	strh	r3, [r4, #12]
 800c16e:	6923      	ldr	r3, [r4, #16]
 800c170:	b94b      	cbnz	r3, 800c186 <__swsetup_r+0x7a>
 800c172:	89a3      	ldrh	r3, [r4, #12]
 800c174:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c178:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c17c:	d003      	beq.n	800c186 <__swsetup_r+0x7a>
 800c17e:	4621      	mov	r1, r4
 800c180:	4628      	mov	r0, r5
 800c182:	f000 fecd 	bl	800cf20 <__smakebuf_r>
 800c186:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c18a:	f013 0201 	ands.w	r2, r3, #1
 800c18e:	d00a      	beq.n	800c1a6 <__swsetup_r+0x9a>
 800c190:	2200      	movs	r2, #0
 800c192:	60a2      	str	r2, [r4, #8]
 800c194:	6962      	ldr	r2, [r4, #20]
 800c196:	4252      	negs	r2, r2
 800c198:	61a2      	str	r2, [r4, #24]
 800c19a:	6922      	ldr	r2, [r4, #16]
 800c19c:	b942      	cbnz	r2, 800c1b0 <__swsetup_r+0xa4>
 800c19e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c1a2:	d1c5      	bne.n	800c130 <__swsetup_r+0x24>
 800c1a4:	bd38      	pop	{r3, r4, r5, pc}
 800c1a6:	0799      	lsls	r1, r3, #30
 800c1a8:	bf58      	it	pl
 800c1aa:	6962      	ldrpl	r2, [r4, #20]
 800c1ac:	60a2      	str	r2, [r4, #8]
 800c1ae:	e7f4      	b.n	800c19a <__swsetup_r+0x8e>
 800c1b0:	2000      	movs	r0, #0
 800c1b2:	e7f7      	b.n	800c1a4 <__swsetup_r+0x98>
 800c1b4:	20000068 	.word	0x20000068

0800c1b8 <memset>:
 800c1b8:	4402      	add	r2, r0
 800c1ba:	4603      	mov	r3, r0
 800c1bc:	4293      	cmp	r3, r2
 800c1be:	d100      	bne.n	800c1c2 <memset+0xa>
 800c1c0:	4770      	bx	lr
 800c1c2:	f803 1b01 	strb.w	r1, [r3], #1
 800c1c6:	e7f9      	b.n	800c1bc <memset+0x4>

0800c1c8 <_close_r>:
 800c1c8:	b538      	push	{r3, r4, r5, lr}
 800c1ca:	4d06      	ldr	r5, [pc, #24]	@ (800c1e4 <_close_r+0x1c>)
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	4604      	mov	r4, r0
 800c1d0:	4608      	mov	r0, r1
 800c1d2:	602b      	str	r3, [r5, #0]
 800c1d4:	f7f7 fc5e 	bl	8003a94 <_close>
 800c1d8:	1c43      	adds	r3, r0, #1
 800c1da:	d102      	bne.n	800c1e2 <_close_r+0x1a>
 800c1dc:	682b      	ldr	r3, [r5, #0]
 800c1de:	b103      	cbz	r3, 800c1e2 <_close_r+0x1a>
 800c1e0:	6023      	str	r3, [r4, #0]
 800c1e2:	bd38      	pop	{r3, r4, r5, pc}
 800c1e4:	20003ea0 	.word	0x20003ea0

0800c1e8 <_lseek_r>:
 800c1e8:	b538      	push	{r3, r4, r5, lr}
 800c1ea:	4d07      	ldr	r5, [pc, #28]	@ (800c208 <_lseek_r+0x20>)
 800c1ec:	4604      	mov	r4, r0
 800c1ee:	4608      	mov	r0, r1
 800c1f0:	4611      	mov	r1, r2
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	602a      	str	r2, [r5, #0]
 800c1f6:	461a      	mov	r2, r3
 800c1f8:	f7f7 fc73 	bl	8003ae2 <_lseek>
 800c1fc:	1c43      	adds	r3, r0, #1
 800c1fe:	d102      	bne.n	800c206 <_lseek_r+0x1e>
 800c200:	682b      	ldr	r3, [r5, #0]
 800c202:	b103      	cbz	r3, 800c206 <_lseek_r+0x1e>
 800c204:	6023      	str	r3, [r4, #0]
 800c206:	bd38      	pop	{r3, r4, r5, pc}
 800c208:	20003ea0 	.word	0x20003ea0

0800c20c <_read_r>:
 800c20c:	b538      	push	{r3, r4, r5, lr}
 800c20e:	4d07      	ldr	r5, [pc, #28]	@ (800c22c <_read_r+0x20>)
 800c210:	4604      	mov	r4, r0
 800c212:	4608      	mov	r0, r1
 800c214:	4611      	mov	r1, r2
 800c216:	2200      	movs	r2, #0
 800c218:	602a      	str	r2, [r5, #0]
 800c21a:	461a      	mov	r2, r3
 800c21c:	f7f7 fc01 	bl	8003a22 <_read>
 800c220:	1c43      	adds	r3, r0, #1
 800c222:	d102      	bne.n	800c22a <_read_r+0x1e>
 800c224:	682b      	ldr	r3, [r5, #0]
 800c226:	b103      	cbz	r3, 800c22a <_read_r+0x1e>
 800c228:	6023      	str	r3, [r4, #0]
 800c22a:	bd38      	pop	{r3, r4, r5, pc}
 800c22c:	20003ea0 	.word	0x20003ea0

0800c230 <_write_r>:
 800c230:	b538      	push	{r3, r4, r5, lr}
 800c232:	4d07      	ldr	r5, [pc, #28]	@ (800c250 <_write_r+0x20>)
 800c234:	4604      	mov	r4, r0
 800c236:	4608      	mov	r0, r1
 800c238:	4611      	mov	r1, r2
 800c23a:	2200      	movs	r2, #0
 800c23c:	602a      	str	r2, [r5, #0]
 800c23e:	461a      	mov	r2, r3
 800c240:	f7f7 fc0c 	bl	8003a5c <_write>
 800c244:	1c43      	adds	r3, r0, #1
 800c246:	d102      	bne.n	800c24e <_write_r+0x1e>
 800c248:	682b      	ldr	r3, [r5, #0]
 800c24a:	b103      	cbz	r3, 800c24e <_write_r+0x1e>
 800c24c:	6023      	str	r3, [r4, #0]
 800c24e:	bd38      	pop	{r3, r4, r5, pc}
 800c250:	20003ea0 	.word	0x20003ea0

0800c254 <__errno>:
 800c254:	4b01      	ldr	r3, [pc, #4]	@ (800c25c <__errno+0x8>)
 800c256:	6818      	ldr	r0, [r3, #0]
 800c258:	4770      	bx	lr
 800c25a:	bf00      	nop
 800c25c:	20000068 	.word	0x20000068

0800c260 <__libc_init_array>:
 800c260:	b570      	push	{r4, r5, r6, lr}
 800c262:	4d0d      	ldr	r5, [pc, #52]	@ (800c298 <__libc_init_array+0x38>)
 800c264:	4c0d      	ldr	r4, [pc, #52]	@ (800c29c <__libc_init_array+0x3c>)
 800c266:	1b64      	subs	r4, r4, r5
 800c268:	10a4      	asrs	r4, r4, #2
 800c26a:	2600      	movs	r6, #0
 800c26c:	42a6      	cmp	r6, r4
 800c26e:	d109      	bne.n	800c284 <__libc_init_array+0x24>
 800c270:	4d0b      	ldr	r5, [pc, #44]	@ (800c2a0 <__libc_init_array+0x40>)
 800c272:	4c0c      	ldr	r4, [pc, #48]	@ (800c2a4 <__libc_init_array+0x44>)
 800c274:	f000 ff5e 	bl	800d134 <_init>
 800c278:	1b64      	subs	r4, r4, r5
 800c27a:	10a4      	asrs	r4, r4, #2
 800c27c:	2600      	movs	r6, #0
 800c27e:	42a6      	cmp	r6, r4
 800c280:	d105      	bne.n	800c28e <__libc_init_array+0x2e>
 800c282:	bd70      	pop	{r4, r5, r6, pc}
 800c284:	f855 3b04 	ldr.w	r3, [r5], #4
 800c288:	4798      	blx	r3
 800c28a:	3601      	adds	r6, #1
 800c28c:	e7ee      	b.n	800c26c <__libc_init_array+0xc>
 800c28e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c292:	4798      	blx	r3
 800c294:	3601      	adds	r6, #1
 800c296:	e7f2      	b.n	800c27e <__libc_init_array+0x1e>
 800c298:	0800d63c 	.word	0x0800d63c
 800c29c:	0800d63c 	.word	0x0800d63c
 800c2a0:	0800d63c 	.word	0x0800d63c
 800c2a4:	0800d640 	.word	0x0800d640

0800c2a8 <__retarget_lock_init_recursive>:
 800c2a8:	4770      	bx	lr

0800c2aa <__retarget_lock_acquire_recursive>:
 800c2aa:	4770      	bx	lr

0800c2ac <__retarget_lock_release_recursive>:
 800c2ac:	4770      	bx	lr

0800c2ae <memcpy>:
 800c2ae:	440a      	add	r2, r1
 800c2b0:	4291      	cmp	r1, r2
 800c2b2:	f100 33ff 	add.w	r3, r0, #4294967295
 800c2b6:	d100      	bne.n	800c2ba <memcpy+0xc>
 800c2b8:	4770      	bx	lr
 800c2ba:	b510      	push	{r4, lr}
 800c2bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c2c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c2c4:	4291      	cmp	r1, r2
 800c2c6:	d1f9      	bne.n	800c2bc <memcpy+0xe>
 800c2c8:	bd10      	pop	{r4, pc}
	...

0800c2cc <__assert_func>:
 800c2cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c2ce:	4614      	mov	r4, r2
 800c2d0:	461a      	mov	r2, r3
 800c2d2:	4b09      	ldr	r3, [pc, #36]	@ (800c2f8 <__assert_func+0x2c>)
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	4605      	mov	r5, r0
 800c2d8:	68d8      	ldr	r0, [r3, #12]
 800c2da:	b954      	cbnz	r4, 800c2f2 <__assert_func+0x26>
 800c2dc:	4b07      	ldr	r3, [pc, #28]	@ (800c2fc <__assert_func+0x30>)
 800c2de:	461c      	mov	r4, r3
 800c2e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c2e4:	9100      	str	r1, [sp, #0]
 800c2e6:	462b      	mov	r3, r5
 800c2e8:	4905      	ldr	r1, [pc, #20]	@ (800c300 <__assert_func+0x34>)
 800c2ea:	f000 fde1 	bl	800ceb0 <fiprintf>
 800c2ee:	f000 fe9f 	bl	800d030 <abort>
 800c2f2:	4b04      	ldr	r3, [pc, #16]	@ (800c304 <__assert_func+0x38>)
 800c2f4:	e7f4      	b.n	800c2e0 <__assert_func+0x14>
 800c2f6:	bf00      	nop
 800c2f8:	20000068 	.word	0x20000068
 800c2fc:	0800d5fe 	.word	0x0800d5fe
 800c300:	0800d5d0 	.word	0x0800d5d0
 800c304:	0800d5c3 	.word	0x0800d5c3

0800c308 <_free_r>:
 800c308:	b538      	push	{r3, r4, r5, lr}
 800c30a:	4605      	mov	r5, r0
 800c30c:	2900      	cmp	r1, #0
 800c30e:	d041      	beq.n	800c394 <_free_r+0x8c>
 800c310:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c314:	1f0c      	subs	r4, r1, #4
 800c316:	2b00      	cmp	r3, #0
 800c318:	bfb8      	it	lt
 800c31a:	18e4      	addlt	r4, r4, r3
 800c31c:	f000 f8e8 	bl	800c4f0 <__malloc_lock>
 800c320:	4a1d      	ldr	r2, [pc, #116]	@ (800c398 <_free_r+0x90>)
 800c322:	6813      	ldr	r3, [r2, #0]
 800c324:	b933      	cbnz	r3, 800c334 <_free_r+0x2c>
 800c326:	6063      	str	r3, [r4, #4]
 800c328:	6014      	str	r4, [r2, #0]
 800c32a:	4628      	mov	r0, r5
 800c32c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c330:	f000 b8e4 	b.w	800c4fc <__malloc_unlock>
 800c334:	42a3      	cmp	r3, r4
 800c336:	d908      	bls.n	800c34a <_free_r+0x42>
 800c338:	6820      	ldr	r0, [r4, #0]
 800c33a:	1821      	adds	r1, r4, r0
 800c33c:	428b      	cmp	r3, r1
 800c33e:	bf01      	itttt	eq
 800c340:	6819      	ldreq	r1, [r3, #0]
 800c342:	685b      	ldreq	r3, [r3, #4]
 800c344:	1809      	addeq	r1, r1, r0
 800c346:	6021      	streq	r1, [r4, #0]
 800c348:	e7ed      	b.n	800c326 <_free_r+0x1e>
 800c34a:	461a      	mov	r2, r3
 800c34c:	685b      	ldr	r3, [r3, #4]
 800c34e:	b10b      	cbz	r3, 800c354 <_free_r+0x4c>
 800c350:	42a3      	cmp	r3, r4
 800c352:	d9fa      	bls.n	800c34a <_free_r+0x42>
 800c354:	6811      	ldr	r1, [r2, #0]
 800c356:	1850      	adds	r0, r2, r1
 800c358:	42a0      	cmp	r0, r4
 800c35a:	d10b      	bne.n	800c374 <_free_r+0x6c>
 800c35c:	6820      	ldr	r0, [r4, #0]
 800c35e:	4401      	add	r1, r0
 800c360:	1850      	adds	r0, r2, r1
 800c362:	4283      	cmp	r3, r0
 800c364:	6011      	str	r1, [r2, #0]
 800c366:	d1e0      	bne.n	800c32a <_free_r+0x22>
 800c368:	6818      	ldr	r0, [r3, #0]
 800c36a:	685b      	ldr	r3, [r3, #4]
 800c36c:	6053      	str	r3, [r2, #4]
 800c36e:	4408      	add	r0, r1
 800c370:	6010      	str	r0, [r2, #0]
 800c372:	e7da      	b.n	800c32a <_free_r+0x22>
 800c374:	d902      	bls.n	800c37c <_free_r+0x74>
 800c376:	230c      	movs	r3, #12
 800c378:	602b      	str	r3, [r5, #0]
 800c37a:	e7d6      	b.n	800c32a <_free_r+0x22>
 800c37c:	6820      	ldr	r0, [r4, #0]
 800c37e:	1821      	adds	r1, r4, r0
 800c380:	428b      	cmp	r3, r1
 800c382:	bf04      	itt	eq
 800c384:	6819      	ldreq	r1, [r3, #0]
 800c386:	685b      	ldreq	r3, [r3, #4]
 800c388:	6063      	str	r3, [r4, #4]
 800c38a:	bf04      	itt	eq
 800c38c:	1809      	addeq	r1, r1, r0
 800c38e:	6021      	streq	r1, [r4, #0]
 800c390:	6054      	str	r4, [r2, #4]
 800c392:	e7ca      	b.n	800c32a <_free_r+0x22>
 800c394:	bd38      	pop	{r3, r4, r5, pc}
 800c396:	bf00      	nop
 800c398:	20003eac 	.word	0x20003eac

0800c39c <malloc>:
 800c39c:	4b02      	ldr	r3, [pc, #8]	@ (800c3a8 <malloc+0xc>)
 800c39e:	4601      	mov	r1, r0
 800c3a0:	6818      	ldr	r0, [r3, #0]
 800c3a2:	f000 b825 	b.w	800c3f0 <_malloc_r>
 800c3a6:	bf00      	nop
 800c3a8:	20000068 	.word	0x20000068

0800c3ac <sbrk_aligned>:
 800c3ac:	b570      	push	{r4, r5, r6, lr}
 800c3ae:	4e0f      	ldr	r6, [pc, #60]	@ (800c3ec <sbrk_aligned+0x40>)
 800c3b0:	460c      	mov	r4, r1
 800c3b2:	6831      	ldr	r1, [r6, #0]
 800c3b4:	4605      	mov	r5, r0
 800c3b6:	b911      	cbnz	r1, 800c3be <sbrk_aligned+0x12>
 800c3b8:	f000 fe2a 	bl	800d010 <_sbrk_r>
 800c3bc:	6030      	str	r0, [r6, #0]
 800c3be:	4621      	mov	r1, r4
 800c3c0:	4628      	mov	r0, r5
 800c3c2:	f000 fe25 	bl	800d010 <_sbrk_r>
 800c3c6:	1c43      	adds	r3, r0, #1
 800c3c8:	d103      	bne.n	800c3d2 <sbrk_aligned+0x26>
 800c3ca:	f04f 34ff 	mov.w	r4, #4294967295
 800c3ce:	4620      	mov	r0, r4
 800c3d0:	bd70      	pop	{r4, r5, r6, pc}
 800c3d2:	1cc4      	adds	r4, r0, #3
 800c3d4:	f024 0403 	bic.w	r4, r4, #3
 800c3d8:	42a0      	cmp	r0, r4
 800c3da:	d0f8      	beq.n	800c3ce <sbrk_aligned+0x22>
 800c3dc:	1a21      	subs	r1, r4, r0
 800c3de:	4628      	mov	r0, r5
 800c3e0:	f000 fe16 	bl	800d010 <_sbrk_r>
 800c3e4:	3001      	adds	r0, #1
 800c3e6:	d1f2      	bne.n	800c3ce <sbrk_aligned+0x22>
 800c3e8:	e7ef      	b.n	800c3ca <sbrk_aligned+0x1e>
 800c3ea:	bf00      	nop
 800c3ec:	20003ea8 	.word	0x20003ea8

0800c3f0 <_malloc_r>:
 800c3f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3f4:	1ccd      	adds	r5, r1, #3
 800c3f6:	f025 0503 	bic.w	r5, r5, #3
 800c3fa:	3508      	adds	r5, #8
 800c3fc:	2d0c      	cmp	r5, #12
 800c3fe:	bf38      	it	cc
 800c400:	250c      	movcc	r5, #12
 800c402:	2d00      	cmp	r5, #0
 800c404:	4606      	mov	r6, r0
 800c406:	db01      	blt.n	800c40c <_malloc_r+0x1c>
 800c408:	42a9      	cmp	r1, r5
 800c40a:	d904      	bls.n	800c416 <_malloc_r+0x26>
 800c40c:	230c      	movs	r3, #12
 800c40e:	6033      	str	r3, [r6, #0]
 800c410:	2000      	movs	r0, #0
 800c412:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c416:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c4ec <_malloc_r+0xfc>
 800c41a:	f000 f869 	bl	800c4f0 <__malloc_lock>
 800c41e:	f8d8 3000 	ldr.w	r3, [r8]
 800c422:	461c      	mov	r4, r3
 800c424:	bb44      	cbnz	r4, 800c478 <_malloc_r+0x88>
 800c426:	4629      	mov	r1, r5
 800c428:	4630      	mov	r0, r6
 800c42a:	f7ff ffbf 	bl	800c3ac <sbrk_aligned>
 800c42e:	1c43      	adds	r3, r0, #1
 800c430:	4604      	mov	r4, r0
 800c432:	d158      	bne.n	800c4e6 <_malloc_r+0xf6>
 800c434:	f8d8 4000 	ldr.w	r4, [r8]
 800c438:	4627      	mov	r7, r4
 800c43a:	2f00      	cmp	r7, #0
 800c43c:	d143      	bne.n	800c4c6 <_malloc_r+0xd6>
 800c43e:	2c00      	cmp	r4, #0
 800c440:	d04b      	beq.n	800c4da <_malloc_r+0xea>
 800c442:	6823      	ldr	r3, [r4, #0]
 800c444:	4639      	mov	r1, r7
 800c446:	4630      	mov	r0, r6
 800c448:	eb04 0903 	add.w	r9, r4, r3
 800c44c:	f000 fde0 	bl	800d010 <_sbrk_r>
 800c450:	4581      	cmp	r9, r0
 800c452:	d142      	bne.n	800c4da <_malloc_r+0xea>
 800c454:	6821      	ldr	r1, [r4, #0]
 800c456:	1a6d      	subs	r5, r5, r1
 800c458:	4629      	mov	r1, r5
 800c45a:	4630      	mov	r0, r6
 800c45c:	f7ff ffa6 	bl	800c3ac <sbrk_aligned>
 800c460:	3001      	adds	r0, #1
 800c462:	d03a      	beq.n	800c4da <_malloc_r+0xea>
 800c464:	6823      	ldr	r3, [r4, #0]
 800c466:	442b      	add	r3, r5
 800c468:	6023      	str	r3, [r4, #0]
 800c46a:	f8d8 3000 	ldr.w	r3, [r8]
 800c46e:	685a      	ldr	r2, [r3, #4]
 800c470:	bb62      	cbnz	r2, 800c4cc <_malloc_r+0xdc>
 800c472:	f8c8 7000 	str.w	r7, [r8]
 800c476:	e00f      	b.n	800c498 <_malloc_r+0xa8>
 800c478:	6822      	ldr	r2, [r4, #0]
 800c47a:	1b52      	subs	r2, r2, r5
 800c47c:	d420      	bmi.n	800c4c0 <_malloc_r+0xd0>
 800c47e:	2a0b      	cmp	r2, #11
 800c480:	d917      	bls.n	800c4b2 <_malloc_r+0xc2>
 800c482:	1961      	adds	r1, r4, r5
 800c484:	42a3      	cmp	r3, r4
 800c486:	6025      	str	r5, [r4, #0]
 800c488:	bf18      	it	ne
 800c48a:	6059      	strne	r1, [r3, #4]
 800c48c:	6863      	ldr	r3, [r4, #4]
 800c48e:	bf08      	it	eq
 800c490:	f8c8 1000 	streq.w	r1, [r8]
 800c494:	5162      	str	r2, [r4, r5]
 800c496:	604b      	str	r3, [r1, #4]
 800c498:	4630      	mov	r0, r6
 800c49a:	f000 f82f 	bl	800c4fc <__malloc_unlock>
 800c49e:	f104 000b 	add.w	r0, r4, #11
 800c4a2:	1d23      	adds	r3, r4, #4
 800c4a4:	f020 0007 	bic.w	r0, r0, #7
 800c4a8:	1ac2      	subs	r2, r0, r3
 800c4aa:	bf1c      	itt	ne
 800c4ac:	1a1b      	subne	r3, r3, r0
 800c4ae:	50a3      	strne	r3, [r4, r2]
 800c4b0:	e7af      	b.n	800c412 <_malloc_r+0x22>
 800c4b2:	6862      	ldr	r2, [r4, #4]
 800c4b4:	42a3      	cmp	r3, r4
 800c4b6:	bf0c      	ite	eq
 800c4b8:	f8c8 2000 	streq.w	r2, [r8]
 800c4bc:	605a      	strne	r2, [r3, #4]
 800c4be:	e7eb      	b.n	800c498 <_malloc_r+0xa8>
 800c4c0:	4623      	mov	r3, r4
 800c4c2:	6864      	ldr	r4, [r4, #4]
 800c4c4:	e7ae      	b.n	800c424 <_malloc_r+0x34>
 800c4c6:	463c      	mov	r4, r7
 800c4c8:	687f      	ldr	r7, [r7, #4]
 800c4ca:	e7b6      	b.n	800c43a <_malloc_r+0x4a>
 800c4cc:	461a      	mov	r2, r3
 800c4ce:	685b      	ldr	r3, [r3, #4]
 800c4d0:	42a3      	cmp	r3, r4
 800c4d2:	d1fb      	bne.n	800c4cc <_malloc_r+0xdc>
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	6053      	str	r3, [r2, #4]
 800c4d8:	e7de      	b.n	800c498 <_malloc_r+0xa8>
 800c4da:	230c      	movs	r3, #12
 800c4dc:	6033      	str	r3, [r6, #0]
 800c4de:	4630      	mov	r0, r6
 800c4e0:	f000 f80c 	bl	800c4fc <__malloc_unlock>
 800c4e4:	e794      	b.n	800c410 <_malloc_r+0x20>
 800c4e6:	6005      	str	r5, [r0, #0]
 800c4e8:	e7d6      	b.n	800c498 <_malloc_r+0xa8>
 800c4ea:	bf00      	nop
 800c4ec:	20003eac 	.word	0x20003eac

0800c4f0 <__malloc_lock>:
 800c4f0:	4801      	ldr	r0, [pc, #4]	@ (800c4f8 <__malloc_lock+0x8>)
 800c4f2:	f7ff beda 	b.w	800c2aa <__retarget_lock_acquire_recursive>
 800c4f6:	bf00      	nop
 800c4f8:	20003ea4 	.word	0x20003ea4

0800c4fc <__malloc_unlock>:
 800c4fc:	4801      	ldr	r0, [pc, #4]	@ (800c504 <__malloc_unlock+0x8>)
 800c4fe:	f7ff bed5 	b.w	800c2ac <__retarget_lock_release_recursive>
 800c502:	bf00      	nop
 800c504:	20003ea4 	.word	0x20003ea4

0800c508 <__ssputs_r>:
 800c508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c50c:	688e      	ldr	r6, [r1, #8]
 800c50e:	461f      	mov	r7, r3
 800c510:	42be      	cmp	r6, r7
 800c512:	680b      	ldr	r3, [r1, #0]
 800c514:	4682      	mov	sl, r0
 800c516:	460c      	mov	r4, r1
 800c518:	4690      	mov	r8, r2
 800c51a:	d82d      	bhi.n	800c578 <__ssputs_r+0x70>
 800c51c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c520:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c524:	d026      	beq.n	800c574 <__ssputs_r+0x6c>
 800c526:	6965      	ldr	r5, [r4, #20]
 800c528:	6909      	ldr	r1, [r1, #16]
 800c52a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c52e:	eba3 0901 	sub.w	r9, r3, r1
 800c532:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c536:	1c7b      	adds	r3, r7, #1
 800c538:	444b      	add	r3, r9
 800c53a:	106d      	asrs	r5, r5, #1
 800c53c:	429d      	cmp	r5, r3
 800c53e:	bf38      	it	cc
 800c540:	461d      	movcc	r5, r3
 800c542:	0553      	lsls	r3, r2, #21
 800c544:	d527      	bpl.n	800c596 <__ssputs_r+0x8e>
 800c546:	4629      	mov	r1, r5
 800c548:	f7ff ff52 	bl	800c3f0 <_malloc_r>
 800c54c:	4606      	mov	r6, r0
 800c54e:	b360      	cbz	r0, 800c5aa <__ssputs_r+0xa2>
 800c550:	6921      	ldr	r1, [r4, #16]
 800c552:	464a      	mov	r2, r9
 800c554:	f7ff feab 	bl	800c2ae <memcpy>
 800c558:	89a3      	ldrh	r3, [r4, #12]
 800c55a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c55e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c562:	81a3      	strh	r3, [r4, #12]
 800c564:	6126      	str	r6, [r4, #16]
 800c566:	6165      	str	r5, [r4, #20]
 800c568:	444e      	add	r6, r9
 800c56a:	eba5 0509 	sub.w	r5, r5, r9
 800c56e:	6026      	str	r6, [r4, #0]
 800c570:	60a5      	str	r5, [r4, #8]
 800c572:	463e      	mov	r6, r7
 800c574:	42be      	cmp	r6, r7
 800c576:	d900      	bls.n	800c57a <__ssputs_r+0x72>
 800c578:	463e      	mov	r6, r7
 800c57a:	6820      	ldr	r0, [r4, #0]
 800c57c:	4632      	mov	r2, r6
 800c57e:	4641      	mov	r1, r8
 800c580:	f000 fd0a 	bl	800cf98 <memmove>
 800c584:	68a3      	ldr	r3, [r4, #8]
 800c586:	1b9b      	subs	r3, r3, r6
 800c588:	60a3      	str	r3, [r4, #8]
 800c58a:	6823      	ldr	r3, [r4, #0]
 800c58c:	4433      	add	r3, r6
 800c58e:	6023      	str	r3, [r4, #0]
 800c590:	2000      	movs	r0, #0
 800c592:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c596:	462a      	mov	r2, r5
 800c598:	f000 fd51 	bl	800d03e <_realloc_r>
 800c59c:	4606      	mov	r6, r0
 800c59e:	2800      	cmp	r0, #0
 800c5a0:	d1e0      	bne.n	800c564 <__ssputs_r+0x5c>
 800c5a2:	6921      	ldr	r1, [r4, #16]
 800c5a4:	4650      	mov	r0, sl
 800c5a6:	f7ff feaf 	bl	800c308 <_free_r>
 800c5aa:	230c      	movs	r3, #12
 800c5ac:	f8ca 3000 	str.w	r3, [sl]
 800c5b0:	89a3      	ldrh	r3, [r4, #12]
 800c5b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c5b6:	81a3      	strh	r3, [r4, #12]
 800c5b8:	f04f 30ff 	mov.w	r0, #4294967295
 800c5bc:	e7e9      	b.n	800c592 <__ssputs_r+0x8a>
	...

0800c5c0 <_svfiprintf_r>:
 800c5c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5c4:	4698      	mov	r8, r3
 800c5c6:	898b      	ldrh	r3, [r1, #12]
 800c5c8:	061b      	lsls	r3, r3, #24
 800c5ca:	b09d      	sub	sp, #116	@ 0x74
 800c5cc:	4607      	mov	r7, r0
 800c5ce:	460d      	mov	r5, r1
 800c5d0:	4614      	mov	r4, r2
 800c5d2:	d510      	bpl.n	800c5f6 <_svfiprintf_r+0x36>
 800c5d4:	690b      	ldr	r3, [r1, #16]
 800c5d6:	b973      	cbnz	r3, 800c5f6 <_svfiprintf_r+0x36>
 800c5d8:	2140      	movs	r1, #64	@ 0x40
 800c5da:	f7ff ff09 	bl	800c3f0 <_malloc_r>
 800c5de:	6028      	str	r0, [r5, #0]
 800c5e0:	6128      	str	r0, [r5, #16]
 800c5e2:	b930      	cbnz	r0, 800c5f2 <_svfiprintf_r+0x32>
 800c5e4:	230c      	movs	r3, #12
 800c5e6:	603b      	str	r3, [r7, #0]
 800c5e8:	f04f 30ff 	mov.w	r0, #4294967295
 800c5ec:	b01d      	add	sp, #116	@ 0x74
 800c5ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5f2:	2340      	movs	r3, #64	@ 0x40
 800c5f4:	616b      	str	r3, [r5, #20]
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	9309      	str	r3, [sp, #36]	@ 0x24
 800c5fa:	2320      	movs	r3, #32
 800c5fc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c600:	f8cd 800c 	str.w	r8, [sp, #12]
 800c604:	2330      	movs	r3, #48	@ 0x30
 800c606:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c7a4 <_svfiprintf_r+0x1e4>
 800c60a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c60e:	f04f 0901 	mov.w	r9, #1
 800c612:	4623      	mov	r3, r4
 800c614:	469a      	mov	sl, r3
 800c616:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c61a:	b10a      	cbz	r2, 800c620 <_svfiprintf_r+0x60>
 800c61c:	2a25      	cmp	r2, #37	@ 0x25
 800c61e:	d1f9      	bne.n	800c614 <_svfiprintf_r+0x54>
 800c620:	ebba 0b04 	subs.w	fp, sl, r4
 800c624:	d00b      	beq.n	800c63e <_svfiprintf_r+0x7e>
 800c626:	465b      	mov	r3, fp
 800c628:	4622      	mov	r2, r4
 800c62a:	4629      	mov	r1, r5
 800c62c:	4638      	mov	r0, r7
 800c62e:	f7ff ff6b 	bl	800c508 <__ssputs_r>
 800c632:	3001      	adds	r0, #1
 800c634:	f000 80a7 	beq.w	800c786 <_svfiprintf_r+0x1c6>
 800c638:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c63a:	445a      	add	r2, fp
 800c63c:	9209      	str	r2, [sp, #36]	@ 0x24
 800c63e:	f89a 3000 	ldrb.w	r3, [sl]
 800c642:	2b00      	cmp	r3, #0
 800c644:	f000 809f 	beq.w	800c786 <_svfiprintf_r+0x1c6>
 800c648:	2300      	movs	r3, #0
 800c64a:	f04f 32ff 	mov.w	r2, #4294967295
 800c64e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c652:	f10a 0a01 	add.w	sl, sl, #1
 800c656:	9304      	str	r3, [sp, #16]
 800c658:	9307      	str	r3, [sp, #28]
 800c65a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c65e:	931a      	str	r3, [sp, #104]	@ 0x68
 800c660:	4654      	mov	r4, sl
 800c662:	2205      	movs	r2, #5
 800c664:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c668:	484e      	ldr	r0, [pc, #312]	@ (800c7a4 <_svfiprintf_r+0x1e4>)
 800c66a:	f7f3 fdb9 	bl	80001e0 <memchr>
 800c66e:	9a04      	ldr	r2, [sp, #16]
 800c670:	b9d8      	cbnz	r0, 800c6aa <_svfiprintf_r+0xea>
 800c672:	06d0      	lsls	r0, r2, #27
 800c674:	bf44      	itt	mi
 800c676:	2320      	movmi	r3, #32
 800c678:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c67c:	0711      	lsls	r1, r2, #28
 800c67e:	bf44      	itt	mi
 800c680:	232b      	movmi	r3, #43	@ 0x2b
 800c682:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c686:	f89a 3000 	ldrb.w	r3, [sl]
 800c68a:	2b2a      	cmp	r3, #42	@ 0x2a
 800c68c:	d015      	beq.n	800c6ba <_svfiprintf_r+0xfa>
 800c68e:	9a07      	ldr	r2, [sp, #28]
 800c690:	4654      	mov	r4, sl
 800c692:	2000      	movs	r0, #0
 800c694:	f04f 0c0a 	mov.w	ip, #10
 800c698:	4621      	mov	r1, r4
 800c69a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c69e:	3b30      	subs	r3, #48	@ 0x30
 800c6a0:	2b09      	cmp	r3, #9
 800c6a2:	d94b      	bls.n	800c73c <_svfiprintf_r+0x17c>
 800c6a4:	b1b0      	cbz	r0, 800c6d4 <_svfiprintf_r+0x114>
 800c6a6:	9207      	str	r2, [sp, #28]
 800c6a8:	e014      	b.n	800c6d4 <_svfiprintf_r+0x114>
 800c6aa:	eba0 0308 	sub.w	r3, r0, r8
 800c6ae:	fa09 f303 	lsl.w	r3, r9, r3
 800c6b2:	4313      	orrs	r3, r2
 800c6b4:	9304      	str	r3, [sp, #16]
 800c6b6:	46a2      	mov	sl, r4
 800c6b8:	e7d2      	b.n	800c660 <_svfiprintf_r+0xa0>
 800c6ba:	9b03      	ldr	r3, [sp, #12]
 800c6bc:	1d19      	adds	r1, r3, #4
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	9103      	str	r1, [sp, #12]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	bfbb      	ittet	lt
 800c6c6:	425b      	neglt	r3, r3
 800c6c8:	f042 0202 	orrlt.w	r2, r2, #2
 800c6cc:	9307      	strge	r3, [sp, #28]
 800c6ce:	9307      	strlt	r3, [sp, #28]
 800c6d0:	bfb8      	it	lt
 800c6d2:	9204      	strlt	r2, [sp, #16]
 800c6d4:	7823      	ldrb	r3, [r4, #0]
 800c6d6:	2b2e      	cmp	r3, #46	@ 0x2e
 800c6d8:	d10a      	bne.n	800c6f0 <_svfiprintf_r+0x130>
 800c6da:	7863      	ldrb	r3, [r4, #1]
 800c6dc:	2b2a      	cmp	r3, #42	@ 0x2a
 800c6de:	d132      	bne.n	800c746 <_svfiprintf_r+0x186>
 800c6e0:	9b03      	ldr	r3, [sp, #12]
 800c6e2:	1d1a      	adds	r2, r3, #4
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	9203      	str	r2, [sp, #12]
 800c6e8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c6ec:	3402      	adds	r4, #2
 800c6ee:	9305      	str	r3, [sp, #20]
 800c6f0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c7b4 <_svfiprintf_r+0x1f4>
 800c6f4:	7821      	ldrb	r1, [r4, #0]
 800c6f6:	2203      	movs	r2, #3
 800c6f8:	4650      	mov	r0, sl
 800c6fa:	f7f3 fd71 	bl	80001e0 <memchr>
 800c6fe:	b138      	cbz	r0, 800c710 <_svfiprintf_r+0x150>
 800c700:	9b04      	ldr	r3, [sp, #16]
 800c702:	eba0 000a 	sub.w	r0, r0, sl
 800c706:	2240      	movs	r2, #64	@ 0x40
 800c708:	4082      	lsls	r2, r0
 800c70a:	4313      	orrs	r3, r2
 800c70c:	3401      	adds	r4, #1
 800c70e:	9304      	str	r3, [sp, #16]
 800c710:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c714:	4824      	ldr	r0, [pc, #144]	@ (800c7a8 <_svfiprintf_r+0x1e8>)
 800c716:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c71a:	2206      	movs	r2, #6
 800c71c:	f7f3 fd60 	bl	80001e0 <memchr>
 800c720:	2800      	cmp	r0, #0
 800c722:	d036      	beq.n	800c792 <_svfiprintf_r+0x1d2>
 800c724:	4b21      	ldr	r3, [pc, #132]	@ (800c7ac <_svfiprintf_r+0x1ec>)
 800c726:	bb1b      	cbnz	r3, 800c770 <_svfiprintf_r+0x1b0>
 800c728:	9b03      	ldr	r3, [sp, #12]
 800c72a:	3307      	adds	r3, #7
 800c72c:	f023 0307 	bic.w	r3, r3, #7
 800c730:	3308      	adds	r3, #8
 800c732:	9303      	str	r3, [sp, #12]
 800c734:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c736:	4433      	add	r3, r6
 800c738:	9309      	str	r3, [sp, #36]	@ 0x24
 800c73a:	e76a      	b.n	800c612 <_svfiprintf_r+0x52>
 800c73c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c740:	460c      	mov	r4, r1
 800c742:	2001      	movs	r0, #1
 800c744:	e7a8      	b.n	800c698 <_svfiprintf_r+0xd8>
 800c746:	2300      	movs	r3, #0
 800c748:	3401      	adds	r4, #1
 800c74a:	9305      	str	r3, [sp, #20]
 800c74c:	4619      	mov	r1, r3
 800c74e:	f04f 0c0a 	mov.w	ip, #10
 800c752:	4620      	mov	r0, r4
 800c754:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c758:	3a30      	subs	r2, #48	@ 0x30
 800c75a:	2a09      	cmp	r2, #9
 800c75c:	d903      	bls.n	800c766 <_svfiprintf_r+0x1a6>
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d0c6      	beq.n	800c6f0 <_svfiprintf_r+0x130>
 800c762:	9105      	str	r1, [sp, #20]
 800c764:	e7c4      	b.n	800c6f0 <_svfiprintf_r+0x130>
 800c766:	fb0c 2101 	mla	r1, ip, r1, r2
 800c76a:	4604      	mov	r4, r0
 800c76c:	2301      	movs	r3, #1
 800c76e:	e7f0      	b.n	800c752 <_svfiprintf_r+0x192>
 800c770:	ab03      	add	r3, sp, #12
 800c772:	9300      	str	r3, [sp, #0]
 800c774:	462a      	mov	r2, r5
 800c776:	4b0e      	ldr	r3, [pc, #56]	@ (800c7b0 <_svfiprintf_r+0x1f0>)
 800c778:	a904      	add	r1, sp, #16
 800c77a:	4638      	mov	r0, r7
 800c77c:	f3af 8000 	nop.w
 800c780:	1c42      	adds	r2, r0, #1
 800c782:	4606      	mov	r6, r0
 800c784:	d1d6      	bne.n	800c734 <_svfiprintf_r+0x174>
 800c786:	89ab      	ldrh	r3, [r5, #12]
 800c788:	065b      	lsls	r3, r3, #25
 800c78a:	f53f af2d 	bmi.w	800c5e8 <_svfiprintf_r+0x28>
 800c78e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c790:	e72c      	b.n	800c5ec <_svfiprintf_r+0x2c>
 800c792:	ab03      	add	r3, sp, #12
 800c794:	9300      	str	r3, [sp, #0]
 800c796:	462a      	mov	r2, r5
 800c798:	4b05      	ldr	r3, [pc, #20]	@ (800c7b0 <_svfiprintf_r+0x1f0>)
 800c79a:	a904      	add	r1, sp, #16
 800c79c:	4638      	mov	r0, r7
 800c79e:	f000 f9bb 	bl	800cb18 <_printf_i>
 800c7a2:	e7ed      	b.n	800c780 <_svfiprintf_r+0x1c0>
 800c7a4:	0800d5ff 	.word	0x0800d5ff
 800c7a8:	0800d609 	.word	0x0800d609
 800c7ac:	00000000 	.word	0x00000000
 800c7b0:	0800c509 	.word	0x0800c509
 800c7b4:	0800d605 	.word	0x0800d605

0800c7b8 <__sfputc_r>:
 800c7b8:	6893      	ldr	r3, [r2, #8]
 800c7ba:	3b01      	subs	r3, #1
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	b410      	push	{r4}
 800c7c0:	6093      	str	r3, [r2, #8]
 800c7c2:	da08      	bge.n	800c7d6 <__sfputc_r+0x1e>
 800c7c4:	6994      	ldr	r4, [r2, #24]
 800c7c6:	42a3      	cmp	r3, r4
 800c7c8:	db01      	blt.n	800c7ce <__sfputc_r+0x16>
 800c7ca:	290a      	cmp	r1, #10
 800c7cc:	d103      	bne.n	800c7d6 <__sfputc_r+0x1e>
 800c7ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c7d2:	f7ff bc5c 	b.w	800c08e <__swbuf_r>
 800c7d6:	6813      	ldr	r3, [r2, #0]
 800c7d8:	1c58      	adds	r0, r3, #1
 800c7da:	6010      	str	r0, [r2, #0]
 800c7dc:	7019      	strb	r1, [r3, #0]
 800c7de:	4608      	mov	r0, r1
 800c7e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c7e4:	4770      	bx	lr

0800c7e6 <__sfputs_r>:
 800c7e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7e8:	4606      	mov	r6, r0
 800c7ea:	460f      	mov	r7, r1
 800c7ec:	4614      	mov	r4, r2
 800c7ee:	18d5      	adds	r5, r2, r3
 800c7f0:	42ac      	cmp	r4, r5
 800c7f2:	d101      	bne.n	800c7f8 <__sfputs_r+0x12>
 800c7f4:	2000      	movs	r0, #0
 800c7f6:	e007      	b.n	800c808 <__sfputs_r+0x22>
 800c7f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7fc:	463a      	mov	r2, r7
 800c7fe:	4630      	mov	r0, r6
 800c800:	f7ff ffda 	bl	800c7b8 <__sfputc_r>
 800c804:	1c43      	adds	r3, r0, #1
 800c806:	d1f3      	bne.n	800c7f0 <__sfputs_r+0xa>
 800c808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c80c <_vfiprintf_r>:
 800c80c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c810:	460d      	mov	r5, r1
 800c812:	b09d      	sub	sp, #116	@ 0x74
 800c814:	4614      	mov	r4, r2
 800c816:	4698      	mov	r8, r3
 800c818:	4606      	mov	r6, r0
 800c81a:	b118      	cbz	r0, 800c824 <_vfiprintf_r+0x18>
 800c81c:	6a03      	ldr	r3, [r0, #32]
 800c81e:	b90b      	cbnz	r3, 800c824 <_vfiprintf_r+0x18>
 800c820:	f7ff fb18 	bl	800be54 <__sinit>
 800c824:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c826:	07d9      	lsls	r1, r3, #31
 800c828:	d405      	bmi.n	800c836 <_vfiprintf_r+0x2a>
 800c82a:	89ab      	ldrh	r3, [r5, #12]
 800c82c:	059a      	lsls	r2, r3, #22
 800c82e:	d402      	bmi.n	800c836 <_vfiprintf_r+0x2a>
 800c830:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c832:	f7ff fd3a 	bl	800c2aa <__retarget_lock_acquire_recursive>
 800c836:	89ab      	ldrh	r3, [r5, #12]
 800c838:	071b      	lsls	r3, r3, #28
 800c83a:	d501      	bpl.n	800c840 <_vfiprintf_r+0x34>
 800c83c:	692b      	ldr	r3, [r5, #16]
 800c83e:	b99b      	cbnz	r3, 800c868 <_vfiprintf_r+0x5c>
 800c840:	4629      	mov	r1, r5
 800c842:	4630      	mov	r0, r6
 800c844:	f7ff fc62 	bl	800c10c <__swsetup_r>
 800c848:	b170      	cbz	r0, 800c868 <_vfiprintf_r+0x5c>
 800c84a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c84c:	07dc      	lsls	r4, r3, #31
 800c84e:	d504      	bpl.n	800c85a <_vfiprintf_r+0x4e>
 800c850:	f04f 30ff 	mov.w	r0, #4294967295
 800c854:	b01d      	add	sp, #116	@ 0x74
 800c856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c85a:	89ab      	ldrh	r3, [r5, #12]
 800c85c:	0598      	lsls	r0, r3, #22
 800c85e:	d4f7      	bmi.n	800c850 <_vfiprintf_r+0x44>
 800c860:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c862:	f7ff fd23 	bl	800c2ac <__retarget_lock_release_recursive>
 800c866:	e7f3      	b.n	800c850 <_vfiprintf_r+0x44>
 800c868:	2300      	movs	r3, #0
 800c86a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c86c:	2320      	movs	r3, #32
 800c86e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c872:	f8cd 800c 	str.w	r8, [sp, #12]
 800c876:	2330      	movs	r3, #48	@ 0x30
 800c878:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ca28 <_vfiprintf_r+0x21c>
 800c87c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c880:	f04f 0901 	mov.w	r9, #1
 800c884:	4623      	mov	r3, r4
 800c886:	469a      	mov	sl, r3
 800c888:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c88c:	b10a      	cbz	r2, 800c892 <_vfiprintf_r+0x86>
 800c88e:	2a25      	cmp	r2, #37	@ 0x25
 800c890:	d1f9      	bne.n	800c886 <_vfiprintf_r+0x7a>
 800c892:	ebba 0b04 	subs.w	fp, sl, r4
 800c896:	d00b      	beq.n	800c8b0 <_vfiprintf_r+0xa4>
 800c898:	465b      	mov	r3, fp
 800c89a:	4622      	mov	r2, r4
 800c89c:	4629      	mov	r1, r5
 800c89e:	4630      	mov	r0, r6
 800c8a0:	f7ff ffa1 	bl	800c7e6 <__sfputs_r>
 800c8a4:	3001      	adds	r0, #1
 800c8a6:	f000 80a7 	beq.w	800c9f8 <_vfiprintf_r+0x1ec>
 800c8aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c8ac:	445a      	add	r2, fp
 800c8ae:	9209      	str	r2, [sp, #36]	@ 0x24
 800c8b0:	f89a 3000 	ldrb.w	r3, [sl]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	f000 809f 	beq.w	800c9f8 <_vfiprintf_r+0x1ec>
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	f04f 32ff 	mov.w	r2, #4294967295
 800c8c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c8c4:	f10a 0a01 	add.w	sl, sl, #1
 800c8c8:	9304      	str	r3, [sp, #16]
 800c8ca:	9307      	str	r3, [sp, #28]
 800c8cc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c8d0:	931a      	str	r3, [sp, #104]	@ 0x68
 800c8d2:	4654      	mov	r4, sl
 800c8d4:	2205      	movs	r2, #5
 800c8d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8da:	4853      	ldr	r0, [pc, #332]	@ (800ca28 <_vfiprintf_r+0x21c>)
 800c8dc:	f7f3 fc80 	bl	80001e0 <memchr>
 800c8e0:	9a04      	ldr	r2, [sp, #16]
 800c8e2:	b9d8      	cbnz	r0, 800c91c <_vfiprintf_r+0x110>
 800c8e4:	06d1      	lsls	r1, r2, #27
 800c8e6:	bf44      	itt	mi
 800c8e8:	2320      	movmi	r3, #32
 800c8ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c8ee:	0713      	lsls	r3, r2, #28
 800c8f0:	bf44      	itt	mi
 800c8f2:	232b      	movmi	r3, #43	@ 0x2b
 800c8f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c8f8:	f89a 3000 	ldrb.w	r3, [sl]
 800c8fc:	2b2a      	cmp	r3, #42	@ 0x2a
 800c8fe:	d015      	beq.n	800c92c <_vfiprintf_r+0x120>
 800c900:	9a07      	ldr	r2, [sp, #28]
 800c902:	4654      	mov	r4, sl
 800c904:	2000      	movs	r0, #0
 800c906:	f04f 0c0a 	mov.w	ip, #10
 800c90a:	4621      	mov	r1, r4
 800c90c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c910:	3b30      	subs	r3, #48	@ 0x30
 800c912:	2b09      	cmp	r3, #9
 800c914:	d94b      	bls.n	800c9ae <_vfiprintf_r+0x1a2>
 800c916:	b1b0      	cbz	r0, 800c946 <_vfiprintf_r+0x13a>
 800c918:	9207      	str	r2, [sp, #28]
 800c91a:	e014      	b.n	800c946 <_vfiprintf_r+0x13a>
 800c91c:	eba0 0308 	sub.w	r3, r0, r8
 800c920:	fa09 f303 	lsl.w	r3, r9, r3
 800c924:	4313      	orrs	r3, r2
 800c926:	9304      	str	r3, [sp, #16]
 800c928:	46a2      	mov	sl, r4
 800c92a:	e7d2      	b.n	800c8d2 <_vfiprintf_r+0xc6>
 800c92c:	9b03      	ldr	r3, [sp, #12]
 800c92e:	1d19      	adds	r1, r3, #4
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	9103      	str	r1, [sp, #12]
 800c934:	2b00      	cmp	r3, #0
 800c936:	bfbb      	ittet	lt
 800c938:	425b      	neglt	r3, r3
 800c93a:	f042 0202 	orrlt.w	r2, r2, #2
 800c93e:	9307      	strge	r3, [sp, #28]
 800c940:	9307      	strlt	r3, [sp, #28]
 800c942:	bfb8      	it	lt
 800c944:	9204      	strlt	r2, [sp, #16]
 800c946:	7823      	ldrb	r3, [r4, #0]
 800c948:	2b2e      	cmp	r3, #46	@ 0x2e
 800c94a:	d10a      	bne.n	800c962 <_vfiprintf_r+0x156>
 800c94c:	7863      	ldrb	r3, [r4, #1]
 800c94e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c950:	d132      	bne.n	800c9b8 <_vfiprintf_r+0x1ac>
 800c952:	9b03      	ldr	r3, [sp, #12]
 800c954:	1d1a      	adds	r2, r3, #4
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	9203      	str	r2, [sp, #12]
 800c95a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c95e:	3402      	adds	r4, #2
 800c960:	9305      	str	r3, [sp, #20]
 800c962:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ca38 <_vfiprintf_r+0x22c>
 800c966:	7821      	ldrb	r1, [r4, #0]
 800c968:	2203      	movs	r2, #3
 800c96a:	4650      	mov	r0, sl
 800c96c:	f7f3 fc38 	bl	80001e0 <memchr>
 800c970:	b138      	cbz	r0, 800c982 <_vfiprintf_r+0x176>
 800c972:	9b04      	ldr	r3, [sp, #16]
 800c974:	eba0 000a 	sub.w	r0, r0, sl
 800c978:	2240      	movs	r2, #64	@ 0x40
 800c97a:	4082      	lsls	r2, r0
 800c97c:	4313      	orrs	r3, r2
 800c97e:	3401      	adds	r4, #1
 800c980:	9304      	str	r3, [sp, #16]
 800c982:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c986:	4829      	ldr	r0, [pc, #164]	@ (800ca2c <_vfiprintf_r+0x220>)
 800c988:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c98c:	2206      	movs	r2, #6
 800c98e:	f7f3 fc27 	bl	80001e0 <memchr>
 800c992:	2800      	cmp	r0, #0
 800c994:	d03f      	beq.n	800ca16 <_vfiprintf_r+0x20a>
 800c996:	4b26      	ldr	r3, [pc, #152]	@ (800ca30 <_vfiprintf_r+0x224>)
 800c998:	bb1b      	cbnz	r3, 800c9e2 <_vfiprintf_r+0x1d6>
 800c99a:	9b03      	ldr	r3, [sp, #12]
 800c99c:	3307      	adds	r3, #7
 800c99e:	f023 0307 	bic.w	r3, r3, #7
 800c9a2:	3308      	adds	r3, #8
 800c9a4:	9303      	str	r3, [sp, #12]
 800c9a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c9a8:	443b      	add	r3, r7
 800c9aa:	9309      	str	r3, [sp, #36]	@ 0x24
 800c9ac:	e76a      	b.n	800c884 <_vfiprintf_r+0x78>
 800c9ae:	fb0c 3202 	mla	r2, ip, r2, r3
 800c9b2:	460c      	mov	r4, r1
 800c9b4:	2001      	movs	r0, #1
 800c9b6:	e7a8      	b.n	800c90a <_vfiprintf_r+0xfe>
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	3401      	adds	r4, #1
 800c9bc:	9305      	str	r3, [sp, #20]
 800c9be:	4619      	mov	r1, r3
 800c9c0:	f04f 0c0a 	mov.w	ip, #10
 800c9c4:	4620      	mov	r0, r4
 800c9c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c9ca:	3a30      	subs	r2, #48	@ 0x30
 800c9cc:	2a09      	cmp	r2, #9
 800c9ce:	d903      	bls.n	800c9d8 <_vfiprintf_r+0x1cc>
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d0c6      	beq.n	800c962 <_vfiprintf_r+0x156>
 800c9d4:	9105      	str	r1, [sp, #20]
 800c9d6:	e7c4      	b.n	800c962 <_vfiprintf_r+0x156>
 800c9d8:	fb0c 2101 	mla	r1, ip, r1, r2
 800c9dc:	4604      	mov	r4, r0
 800c9de:	2301      	movs	r3, #1
 800c9e0:	e7f0      	b.n	800c9c4 <_vfiprintf_r+0x1b8>
 800c9e2:	ab03      	add	r3, sp, #12
 800c9e4:	9300      	str	r3, [sp, #0]
 800c9e6:	462a      	mov	r2, r5
 800c9e8:	4b12      	ldr	r3, [pc, #72]	@ (800ca34 <_vfiprintf_r+0x228>)
 800c9ea:	a904      	add	r1, sp, #16
 800c9ec:	4630      	mov	r0, r6
 800c9ee:	f3af 8000 	nop.w
 800c9f2:	4607      	mov	r7, r0
 800c9f4:	1c78      	adds	r0, r7, #1
 800c9f6:	d1d6      	bne.n	800c9a6 <_vfiprintf_r+0x19a>
 800c9f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c9fa:	07d9      	lsls	r1, r3, #31
 800c9fc:	d405      	bmi.n	800ca0a <_vfiprintf_r+0x1fe>
 800c9fe:	89ab      	ldrh	r3, [r5, #12]
 800ca00:	059a      	lsls	r2, r3, #22
 800ca02:	d402      	bmi.n	800ca0a <_vfiprintf_r+0x1fe>
 800ca04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ca06:	f7ff fc51 	bl	800c2ac <__retarget_lock_release_recursive>
 800ca0a:	89ab      	ldrh	r3, [r5, #12]
 800ca0c:	065b      	lsls	r3, r3, #25
 800ca0e:	f53f af1f 	bmi.w	800c850 <_vfiprintf_r+0x44>
 800ca12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ca14:	e71e      	b.n	800c854 <_vfiprintf_r+0x48>
 800ca16:	ab03      	add	r3, sp, #12
 800ca18:	9300      	str	r3, [sp, #0]
 800ca1a:	462a      	mov	r2, r5
 800ca1c:	4b05      	ldr	r3, [pc, #20]	@ (800ca34 <_vfiprintf_r+0x228>)
 800ca1e:	a904      	add	r1, sp, #16
 800ca20:	4630      	mov	r0, r6
 800ca22:	f000 f879 	bl	800cb18 <_printf_i>
 800ca26:	e7e4      	b.n	800c9f2 <_vfiprintf_r+0x1e6>
 800ca28:	0800d5ff 	.word	0x0800d5ff
 800ca2c:	0800d609 	.word	0x0800d609
 800ca30:	00000000 	.word	0x00000000
 800ca34:	0800c7e7 	.word	0x0800c7e7
 800ca38:	0800d605 	.word	0x0800d605

0800ca3c <_printf_common>:
 800ca3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca40:	4616      	mov	r6, r2
 800ca42:	4698      	mov	r8, r3
 800ca44:	688a      	ldr	r2, [r1, #8]
 800ca46:	690b      	ldr	r3, [r1, #16]
 800ca48:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ca4c:	4293      	cmp	r3, r2
 800ca4e:	bfb8      	it	lt
 800ca50:	4613      	movlt	r3, r2
 800ca52:	6033      	str	r3, [r6, #0]
 800ca54:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ca58:	4607      	mov	r7, r0
 800ca5a:	460c      	mov	r4, r1
 800ca5c:	b10a      	cbz	r2, 800ca62 <_printf_common+0x26>
 800ca5e:	3301      	adds	r3, #1
 800ca60:	6033      	str	r3, [r6, #0]
 800ca62:	6823      	ldr	r3, [r4, #0]
 800ca64:	0699      	lsls	r1, r3, #26
 800ca66:	bf42      	ittt	mi
 800ca68:	6833      	ldrmi	r3, [r6, #0]
 800ca6a:	3302      	addmi	r3, #2
 800ca6c:	6033      	strmi	r3, [r6, #0]
 800ca6e:	6825      	ldr	r5, [r4, #0]
 800ca70:	f015 0506 	ands.w	r5, r5, #6
 800ca74:	d106      	bne.n	800ca84 <_printf_common+0x48>
 800ca76:	f104 0a19 	add.w	sl, r4, #25
 800ca7a:	68e3      	ldr	r3, [r4, #12]
 800ca7c:	6832      	ldr	r2, [r6, #0]
 800ca7e:	1a9b      	subs	r3, r3, r2
 800ca80:	42ab      	cmp	r3, r5
 800ca82:	dc26      	bgt.n	800cad2 <_printf_common+0x96>
 800ca84:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ca88:	6822      	ldr	r2, [r4, #0]
 800ca8a:	3b00      	subs	r3, #0
 800ca8c:	bf18      	it	ne
 800ca8e:	2301      	movne	r3, #1
 800ca90:	0692      	lsls	r2, r2, #26
 800ca92:	d42b      	bmi.n	800caec <_printf_common+0xb0>
 800ca94:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ca98:	4641      	mov	r1, r8
 800ca9a:	4638      	mov	r0, r7
 800ca9c:	47c8      	blx	r9
 800ca9e:	3001      	adds	r0, #1
 800caa0:	d01e      	beq.n	800cae0 <_printf_common+0xa4>
 800caa2:	6823      	ldr	r3, [r4, #0]
 800caa4:	6922      	ldr	r2, [r4, #16]
 800caa6:	f003 0306 	and.w	r3, r3, #6
 800caaa:	2b04      	cmp	r3, #4
 800caac:	bf02      	ittt	eq
 800caae:	68e5      	ldreq	r5, [r4, #12]
 800cab0:	6833      	ldreq	r3, [r6, #0]
 800cab2:	1aed      	subeq	r5, r5, r3
 800cab4:	68a3      	ldr	r3, [r4, #8]
 800cab6:	bf0c      	ite	eq
 800cab8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cabc:	2500      	movne	r5, #0
 800cabe:	4293      	cmp	r3, r2
 800cac0:	bfc4      	itt	gt
 800cac2:	1a9b      	subgt	r3, r3, r2
 800cac4:	18ed      	addgt	r5, r5, r3
 800cac6:	2600      	movs	r6, #0
 800cac8:	341a      	adds	r4, #26
 800caca:	42b5      	cmp	r5, r6
 800cacc:	d11a      	bne.n	800cb04 <_printf_common+0xc8>
 800cace:	2000      	movs	r0, #0
 800cad0:	e008      	b.n	800cae4 <_printf_common+0xa8>
 800cad2:	2301      	movs	r3, #1
 800cad4:	4652      	mov	r2, sl
 800cad6:	4641      	mov	r1, r8
 800cad8:	4638      	mov	r0, r7
 800cada:	47c8      	blx	r9
 800cadc:	3001      	adds	r0, #1
 800cade:	d103      	bne.n	800cae8 <_printf_common+0xac>
 800cae0:	f04f 30ff 	mov.w	r0, #4294967295
 800cae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cae8:	3501      	adds	r5, #1
 800caea:	e7c6      	b.n	800ca7a <_printf_common+0x3e>
 800caec:	18e1      	adds	r1, r4, r3
 800caee:	1c5a      	adds	r2, r3, #1
 800caf0:	2030      	movs	r0, #48	@ 0x30
 800caf2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800caf6:	4422      	add	r2, r4
 800caf8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800cafc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800cb00:	3302      	adds	r3, #2
 800cb02:	e7c7      	b.n	800ca94 <_printf_common+0x58>
 800cb04:	2301      	movs	r3, #1
 800cb06:	4622      	mov	r2, r4
 800cb08:	4641      	mov	r1, r8
 800cb0a:	4638      	mov	r0, r7
 800cb0c:	47c8      	blx	r9
 800cb0e:	3001      	adds	r0, #1
 800cb10:	d0e6      	beq.n	800cae0 <_printf_common+0xa4>
 800cb12:	3601      	adds	r6, #1
 800cb14:	e7d9      	b.n	800caca <_printf_common+0x8e>
	...

0800cb18 <_printf_i>:
 800cb18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cb1c:	7e0f      	ldrb	r7, [r1, #24]
 800cb1e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800cb20:	2f78      	cmp	r7, #120	@ 0x78
 800cb22:	4691      	mov	r9, r2
 800cb24:	4680      	mov	r8, r0
 800cb26:	460c      	mov	r4, r1
 800cb28:	469a      	mov	sl, r3
 800cb2a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800cb2e:	d807      	bhi.n	800cb40 <_printf_i+0x28>
 800cb30:	2f62      	cmp	r7, #98	@ 0x62
 800cb32:	d80a      	bhi.n	800cb4a <_printf_i+0x32>
 800cb34:	2f00      	cmp	r7, #0
 800cb36:	f000 80d2 	beq.w	800ccde <_printf_i+0x1c6>
 800cb3a:	2f58      	cmp	r7, #88	@ 0x58
 800cb3c:	f000 80b9 	beq.w	800ccb2 <_printf_i+0x19a>
 800cb40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cb44:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800cb48:	e03a      	b.n	800cbc0 <_printf_i+0xa8>
 800cb4a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800cb4e:	2b15      	cmp	r3, #21
 800cb50:	d8f6      	bhi.n	800cb40 <_printf_i+0x28>
 800cb52:	a101      	add	r1, pc, #4	@ (adr r1, 800cb58 <_printf_i+0x40>)
 800cb54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cb58:	0800cbb1 	.word	0x0800cbb1
 800cb5c:	0800cbc5 	.word	0x0800cbc5
 800cb60:	0800cb41 	.word	0x0800cb41
 800cb64:	0800cb41 	.word	0x0800cb41
 800cb68:	0800cb41 	.word	0x0800cb41
 800cb6c:	0800cb41 	.word	0x0800cb41
 800cb70:	0800cbc5 	.word	0x0800cbc5
 800cb74:	0800cb41 	.word	0x0800cb41
 800cb78:	0800cb41 	.word	0x0800cb41
 800cb7c:	0800cb41 	.word	0x0800cb41
 800cb80:	0800cb41 	.word	0x0800cb41
 800cb84:	0800ccc5 	.word	0x0800ccc5
 800cb88:	0800cbef 	.word	0x0800cbef
 800cb8c:	0800cc7f 	.word	0x0800cc7f
 800cb90:	0800cb41 	.word	0x0800cb41
 800cb94:	0800cb41 	.word	0x0800cb41
 800cb98:	0800cce7 	.word	0x0800cce7
 800cb9c:	0800cb41 	.word	0x0800cb41
 800cba0:	0800cbef 	.word	0x0800cbef
 800cba4:	0800cb41 	.word	0x0800cb41
 800cba8:	0800cb41 	.word	0x0800cb41
 800cbac:	0800cc87 	.word	0x0800cc87
 800cbb0:	6833      	ldr	r3, [r6, #0]
 800cbb2:	1d1a      	adds	r2, r3, #4
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	6032      	str	r2, [r6, #0]
 800cbb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cbbc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800cbc0:	2301      	movs	r3, #1
 800cbc2:	e09d      	b.n	800cd00 <_printf_i+0x1e8>
 800cbc4:	6833      	ldr	r3, [r6, #0]
 800cbc6:	6820      	ldr	r0, [r4, #0]
 800cbc8:	1d19      	adds	r1, r3, #4
 800cbca:	6031      	str	r1, [r6, #0]
 800cbcc:	0606      	lsls	r6, r0, #24
 800cbce:	d501      	bpl.n	800cbd4 <_printf_i+0xbc>
 800cbd0:	681d      	ldr	r5, [r3, #0]
 800cbd2:	e003      	b.n	800cbdc <_printf_i+0xc4>
 800cbd4:	0645      	lsls	r5, r0, #25
 800cbd6:	d5fb      	bpl.n	800cbd0 <_printf_i+0xb8>
 800cbd8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800cbdc:	2d00      	cmp	r5, #0
 800cbde:	da03      	bge.n	800cbe8 <_printf_i+0xd0>
 800cbe0:	232d      	movs	r3, #45	@ 0x2d
 800cbe2:	426d      	negs	r5, r5
 800cbe4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cbe8:	4859      	ldr	r0, [pc, #356]	@ (800cd50 <_printf_i+0x238>)
 800cbea:	230a      	movs	r3, #10
 800cbec:	e011      	b.n	800cc12 <_printf_i+0xfa>
 800cbee:	6821      	ldr	r1, [r4, #0]
 800cbf0:	6833      	ldr	r3, [r6, #0]
 800cbf2:	0608      	lsls	r0, r1, #24
 800cbf4:	f853 5b04 	ldr.w	r5, [r3], #4
 800cbf8:	d402      	bmi.n	800cc00 <_printf_i+0xe8>
 800cbfa:	0649      	lsls	r1, r1, #25
 800cbfc:	bf48      	it	mi
 800cbfe:	b2ad      	uxthmi	r5, r5
 800cc00:	2f6f      	cmp	r7, #111	@ 0x6f
 800cc02:	4853      	ldr	r0, [pc, #332]	@ (800cd50 <_printf_i+0x238>)
 800cc04:	6033      	str	r3, [r6, #0]
 800cc06:	bf14      	ite	ne
 800cc08:	230a      	movne	r3, #10
 800cc0a:	2308      	moveq	r3, #8
 800cc0c:	2100      	movs	r1, #0
 800cc0e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800cc12:	6866      	ldr	r6, [r4, #4]
 800cc14:	60a6      	str	r6, [r4, #8]
 800cc16:	2e00      	cmp	r6, #0
 800cc18:	bfa2      	ittt	ge
 800cc1a:	6821      	ldrge	r1, [r4, #0]
 800cc1c:	f021 0104 	bicge.w	r1, r1, #4
 800cc20:	6021      	strge	r1, [r4, #0]
 800cc22:	b90d      	cbnz	r5, 800cc28 <_printf_i+0x110>
 800cc24:	2e00      	cmp	r6, #0
 800cc26:	d04b      	beq.n	800ccc0 <_printf_i+0x1a8>
 800cc28:	4616      	mov	r6, r2
 800cc2a:	fbb5 f1f3 	udiv	r1, r5, r3
 800cc2e:	fb03 5711 	mls	r7, r3, r1, r5
 800cc32:	5dc7      	ldrb	r7, [r0, r7]
 800cc34:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cc38:	462f      	mov	r7, r5
 800cc3a:	42bb      	cmp	r3, r7
 800cc3c:	460d      	mov	r5, r1
 800cc3e:	d9f4      	bls.n	800cc2a <_printf_i+0x112>
 800cc40:	2b08      	cmp	r3, #8
 800cc42:	d10b      	bne.n	800cc5c <_printf_i+0x144>
 800cc44:	6823      	ldr	r3, [r4, #0]
 800cc46:	07df      	lsls	r7, r3, #31
 800cc48:	d508      	bpl.n	800cc5c <_printf_i+0x144>
 800cc4a:	6923      	ldr	r3, [r4, #16]
 800cc4c:	6861      	ldr	r1, [r4, #4]
 800cc4e:	4299      	cmp	r1, r3
 800cc50:	bfde      	ittt	le
 800cc52:	2330      	movle	r3, #48	@ 0x30
 800cc54:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cc58:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cc5c:	1b92      	subs	r2, r2, r6
 800cc5e:	6122      	str	r2, [r4, #16]
 800cc60:	f8cd a000 	str.w	sl, [sp]
 800cc64:	464b      	mov	r3, r9
 800cc66:	aa03      	add	r2, sp, #12
 800cc68:	4621      	mov	r1, r4
 800cc6a:	4640      	mov	r0, r8
 800cc6c:	f7ff fee6 	bl	800ca3c <_printf_common>
 800cc70:	3001      	adds	r0, #1
 800cc72:	d14a      	bne.n	800cd0a <_printf_i+0x1f2>
 800cc74:	f04f 30ff 	mov.w	r0, #4294967295
 800cc78:	b004      	add	sp, #16
 800cc7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc7e:	6823      	ldr	r3, [r4, #0]
 800cc80:	f043 0320 	orr.w	r3, r3, #32
 800cc84:	6023      	str	r3, [r4, #0]
 800cc86:	4833      	ldr	r0, [pc, #204]	@ (800cd54 <_printf_i+0x23c>)
 800cc88:	2778      	movs	r7, #120	@ 0x78
 800cc8a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cc8e:	6823      	ldr	r3, [r4, #0]
 800cc90:	6831      	ldr	r1, [r6, #0]
 800cc92:	061f      	lsls	r7, r3, #24
 800cc94:	f851 5b04 	ldr.w	r5, [r1], #4
 800cc98:	d402      	bmi.n	800cca0 <_printf_i+0x188>
 800cc9a:	065f      	lsls	r7, r3, #25
 800cc9c:	bf48      	it	mi
 800cc9e:	b2ad      	uxthmi	r5, r5
 800cca0:	6031      	str	r1, [r6, #0]
 800cca2:	07d9      	lsls	r1, r3, #31
 800cca4:	bf44      	itt	mi
 800cca6:	f043 0320 	orrmi.w	r3, r3, #32
 800ccaa:	6023      	strmi	r3, [r4, #0]
 800ccac:	b11d      	cbz	r5, 800ccb6 <_printf_i+0x19e>
 800ccae:	2310      	movs	r3, #16
 800ccb0:	e7ac      	b.n	800cc0c <_printf_i+0xf4>
 800ccb2:	4827      	ldr	r0, [pc, #156]	@ (800cd50 <_printf_i+0x238>)
 800ccb4:	e7e9      	b.n	800cc8a <_printf_i+0x172>
 800ccb6:	6823      	ldr	r3, [r4, #0]
 800ccb8:	f023 0320 	bic.w	r3, r3, #32
 800ccbc:	6023      	str	r3, [r4, #0]
 800ccbe:	e7f6      	b.n	800ccae <_printf_i+0x196>
 800ccc0:	4616      	mov	r6, r2
 800ccc2:	e7bd      	b.n	800cc40 <_printf_i+0x128>
 800ccc4:	6833      	ldr	r3, [r6, #0]
 800ccc6:	6825      	ldr	r5, [r4, #0]
 800ccc8:	6961      	ldr	r1, [r4, #20]
 800ccca:	1d18      	adds	r0, r3, #4
 800cccc:	6030      	str	r0, [r6, #0]
 800ccce:	062e      	lsls	r6, r5, #24
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	d501      	bpl.n	800ccd8 <_printf_i+0x1c0>
 800ccd4:	6019      	str	r1, [r3, #0]
 800ccd6:	e002      	b.n	800ccde <_printf_i+0x1c6>
 800ccd8:	0668      	lsls	r0, r5, #25
 800ccda:	d5fb      	bpl.n	800ccd4 <_printf_i+0x1bc>
 800ccdc:	8019      	strh	r1, [r3, #0]
 800ccde:	2300      	movs	r3, #0
 800cce0:	6123      	str	r3, [r4, #16]
 800cce2:	4616      	mov	r6, r2
 800cce4:	e7bc      	b.n	800cc60 <_printf_i+0x148>
 800cce6:	6833      	ldr	r3, [r6, #0]
 800cce8:	1d1a      	adds	r2, r3, #4
 800ccea:	6032      	str	r2, [r6, #0]
 800ccec:	681e      	ldr	r6, [r3, #0]
 800ccee:	6862      	ldr	r2, [r4, #4]
 800ccf0:	2100      	movs	r1, #0
 800ccf2:	4630      	mov	r0, r6
 800ccf4:	f7f3 fa74 	bl	80001e0 <memchr>
 800ccf8:	b108      	cbz	r0, 800ccfe <_printf_i+0x1e6>
 800ccfa:	1b80      	subs	r0, r0, r6
 800ccfc:	6060      	str	r0, [r4, #4]
 800ccfe:	6863      	ldr	r3, [r4, #4]
 800cd00:	6123      	str	r3, [r4, #16]
 800cd02:	2300      	movs	r3, #0
 800cd04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cd08:	e7aa      	b.n	800cc60 <_printf_i+0x148>
 800cd0a:	6923      	ldr	r3, [r4, #16]
 800cd0c:	4632      	mov	r2, r6
 800cd0e:	4649      	mov	r1, r9
 800cd10:	4640      	mov	r0, r8
 800cd12:	47d0      	blx	sl
 800cd14:	3001      	adds	r0, #1
 800cd16:	d0ad      	beq.n	800cc74 <_printf_i+0x15c>
 800cd18:	6823      	ldr	r3, [r4, #0]
 800cd1a:	079b      	lsls	r3, r3, #30
 800cd1c:	d413      	bmi.n	800cd46 <_printf_i+0x22e>
 800cd1e:	68e0      	ldr	r0, [r4, #12]
 800cd20:	9b03      	ldr	r3, [sp, #12]
 800cd22:	4298      	cmp	r0, r3
 800cd24:	bfb8      	it	lt
 800cd26:	4618      	movlt	r0, r3
 800cd28:	e7a6      	b.n	800cc78 <_printf_i+0x160>
 800cd2a:	2301      	movs	r3, #1
 800cd2c:	4632      	mov	r2, r6
 800cd2e:	4649      	mov	r1, r9
 800cd30:	4640      	mov	r0, r8
 800cd32:	47d0      	blx	sl
 800cd34:	3001      	adds	r0, #1
 800cd36:	d09d      	beq.n	800cc74 <_printf_i+0x15c>
 800cd38:	3501      	adds	r5, #1
 800cd3a:	68e3      	ldr	r3, [r4, #12]
 800cd3c:	9903      	ldr	r1, [sp, #12]
 800cd3e:	1a5b      	subs	r3, r3, r1
 800cd40:	42ab      	cmp	r3, r5
 800cd42:	dcf2      	bgt.n	800cd2a <_printf_i+0x212>
 800cd44:	e7eb      	b.n	800cd1e <_printf_i+0x206>
 800cd46:	2500      	movs	r5, #0
 800cd48:	f104 0619 	add.w	r6, r4, #25
 800cd4c:	e7f5      	b.n	800cd3a <_printf_i+0x222>
 800cd4e:	bf00      	nop
 800cd50:	0800d610 	.word	0x0800d610
 800cd54:	0800d621 	.word	0x0800d621

0800cd58 <__sflush_r>:
 800cd58:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cd5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd60:	0716      	lsls	r6, r2, #28
 800cd62:	4605      	mov	r5, r0
 800cd64:	460c      	mov	r4, r1
 800cd66:	d454      	bmi.n	800ce12 <__sflush_r+0xba>
 800cd68:	684b      	ldr	r3, [r1, #4]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	dc02      	bgt.n	800cd74 <__sflush_r+0x1c>
 800cd6e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	dd48      	ble.n	800ce06 <__sflush_r+0xae>
 800cd74:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cd76:	2e00      	cmp	r6, #0
 800cd78:	d045      	beq.n	800ce06 <__sflush_r+0xae>
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cd80:	682f      	ldr	r7, [r5, #0]
 800cd82:	6a21      	ldr	r1, [r4, #32]
 800cd84:	602b      	str	r3, [r5, #0]
 800cd86:	d030      	beq.n	800cdea <__sflush_r+0x92>
 800cd88:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cd8a:	89a3      	ldrh	r3, [r4, #12]
 800cd8c:	0759      	lsls	r1, r3, #29
 800cd8e:	d505      	bpl.n	800cd9c <__sflush_r+0x44>
 800cd90:	6863      	ldr	r3, [r4, #4]
 800cd92:	1ad2      	subs	r2, r2, r3
 800cd94:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cd96:	b10b      	cbz	r3, 800cd9c <__sflush_r+0x44>
 800cd98:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cd9a:	1ad2      	subs	r2, r2, r3
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cda0:	6a21      	ldr	r1, [r4, #32]
 800cda2:	4628      	mov	r0, r5
 800cda4:	47b0      	blx	r6
 800cda6:	1c43      	adds	r3, r0, #1
 800cda8:	89a3      	ldrh	r3, [r4, #12]
 800cdaa:	d106      	bne.n	800cdba <__sflush_r+0x62>
 800cdac:	6829      	ldr	r1, [r5, #0]
 800cdae:	291d      	cmp	r1, #29
 800cdb0:	d82b      	bhi.n	800ce0a <__sflush_r+0xb2>
 800cdb2:	4a2a      	ldr	r2, [pc, #168]	@ (800ce5c <__sflush_r+0x104>)
 800cdb4:	410a      	asrs	r2, r1
 800cdb6:	07d6      	lsls	r6, r2, #31
 800cdb8:	d427      	bmi.n	800ce0a <__sflush_r+0xb2>
 800cdba:	2200      	movs	r2, #0
 800cdbc:	6062      	str	r2, [r4, #4]
 800cdbe:	04d9      	lsls	r1, r3, #19
 800cdc0:	6922      	ldr	r2, [r4, #16]
 800cdc2:	6022      	str	r2, [r4, #0]
 800cdc4:	d504      	bpl.n	800cdd0 <__sflush_r+0x78>
 800cdc6:	1c42      	adds	r2, r0, #1
 800cdc8:	d101      	bne.n	800cdce <__sflush_r+0x76>
 800cdca:	682b      	ldr	r3, [r5, #0]
 800cdcc:	b903      	cbnz	r3, 800cdd0 <__sflush_r+0x78>
 800cdce:	6560      	str	r0, [r4, #84]	@ 0x54
 800cdd0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cdd2:	602f      	str	r7, [r5, #0]
 800cdd4:	b1b9      	cbz	r1, 800ce06 <__sflush_r+0xae>
 800cdd6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cdda:	4299      	cmp	r1, r3
 800cddc:	d002      	beq.n	800cde4 <__sflush_r+0x8c>
 800cdde:	4628      	mov	r0, r5
 800cde0:	f7ff fa92 	bl	800c308 <_free_r>
 800cde4:	2300      	movs	r3, #0
 800cde6:	6363      	str	r3, [r4, #52]	@ 0x34
 800cde8:	e00d      	b.n	800ce06 <__sflush_r+0xae>
 800cdea:	2301      	movs	r3, #1
 800cdec:	4628      	mov	r0, r5
 800cdee:	47b0      	blx	r6
 800cdf0:	4602      	mov	r2, r0
 800cdf2:	1c50      	adds	r0, r2, #1
 800cdf4:	d1c9      	bne.n	800cd8a <__sflush_r+0x32>
 800cdf6:	682b      	ldr	r3, [r5, #0]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d0c6      	beq.n	800cd8a <__sflush_r+0x32>
 800cdfc:	2b1d      	cmp	r3, #29
 800cdfe:	d001      	beq.n	800ce04 <__sflush_r+0xac>
 800ce00:	2b16      	cmp	r3, #22
 800ce02:	d11e      	bne.n	800ce42 <__sflush_r+0xea>
 800ce04:	602f      	str	r7, [r5, #0]
 800ce06:	2000      	movs	r0, #0
 800ce08:	e022      	b.n	800ce50 <__sflush_r+0xf8>
 800ce0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ce0e:	b21b      	sxth	r3, r3
 800ce10:	e01b      	b.n	800ce4a <__sflush_r+0xf2>
 800ce12:	690f      	ldr	r7, [r1, #16]
 800ce14:	2f00      	cmp	r7, #0
 800ce16:	d0f6      	beq.n	800ce06 <__sflush_r+0xae>
 800ce18:	0793      	lsls	r3, r2, #30
 800ce1a:	680e      	ldr	r6, [r1, #0]
 800ce1c:	bf08      	it	eq
 800ce1e:	694b      	ldreq	r3, [r1, #20]
 800ce20:	600f      	str	r7, [r1, #0]
 800ce22:	bf18      	it	ne
 800ce24:	2300      	movne	r3, #0
 800ce26:	eba6 0807 	sub.w	r8, r6, r7
 800ce2a:	608b      	str	r3, [r1, #8]
 800ce2c:	f1b8 0f00 	cmp.w	r8, #0
 800ce30:	dde9      	ble.n	800ce06 <__sflush_r+0xae>
 800ce32:	6a21      	ldr	r1, [r4, #32]
 800ce34:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ce36:	4643      	mov	r3, r8
 800ce38:	463a      	mov	r2, r7
 800ce3a:	4628      	mov	r0, r5
 800ce3c:	47b0      	blx	r6
 800ce3e:	2800      	cmp	r0, #0
 800ce40:	dc08      	bgt.n	800ce54 <__sflush_r+0xfc>
 800ce42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ce4a:	81a3      	strh	r3, [r4, #12]
 800ce4c:	f04f 30ff 	mov.w	r0, #4294967295
 800ce50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce54:	4407      	add	r7, r0
 800ce56:	eba8 0800 	sub.w	r8, r8, r0
 800ce5a:	e7e7      	b.n	800ce2c <__sflush_r+0xd4>
 800ce5c:	dfbffffe 	.word	0xdfbffffe

0800ce60 <_fflush_r>:
 800ce60:	b538      	push	{r3, r4, r5, lr}
 800ce62:	690b      	ldr	r3, [r1, #16]
 800ce64:	4605      	mov	r5, r0
 800ce66:	460c      	mov	r4, r1
 800ce68:	b913      	cbnz	r3, 800ce70 <_fflush_r+0x10>
 800ce6a:	2500      	movs	r5, #0
 800ce6c:	4628      	mov	r0, r5
 800ce6e:	bd38      	pop	{r3, r4, r5, pc}
 800ce70:	b118      	cbz	r0, 800ce7a <_fflush_r+0x1a>
 800ce72:	6a03      	ldr	r3, [r0, #32]
 800ce74:	b90b      	cbnz	r3, 800ce7a <_fflush_r+0x1a>
 800ce76:	f7fe ffed 	bl	800be54 <__sinit>
 800ce7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d0f3      	beq.n	800ce6a <_fflush_r+0xa>
 800ce82:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ce84:	07d0      	lsls	r0, r2, #31
 800ce86:	d404      	bmi.n	800ce92 <_fflush_r+0x32>
 800ce88:	0599      	lsls	r1, r3, #22
 800ce8a:	d402      	bmi.n	800ce92 <_fflush_r+0x32>
 800ce8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ce8e:	f7ff fa0c 	bl	800c2aa <__retarget_lock_acquire_recursive>
 800ce92:	4628      	mov	r0, r5
 800ce94:	4621      	mov	r1, r4
 800ce96:	f7ff ff5f 	bl	800cd58 <__sflush_r>
 800ce9a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ce9c:	07da      	lsls	r2, r3, #31
 800ce9e:	4605      	mov	r5, r0
 800cea0:	d4e4      	bmi.n	800ce6c <_fflush_r+0xc>
 800cea2:	89a3      	ldrh	r3, [r4, #12]
 800cea4:	059b      	lsls	r3, r3, #22
 800cea6:	d4e1      	bmi.n	800ce6c <_fflush_r+0xc>
 800cea8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ceaa:	f7ff f9ff 	bl	800c2ac <__retarget_lock_release_recursive>
 800ceae:	e7dd      	b.n	800ce6c <_fflush_r+0xc>

0800ceb0 <fiprintf>:
 800ceb0:	b40e      	push	{r1, r2, r3}
 800ceb2:	b503      	push	{r0, r1, lr}
 800ceb4:	4601      	mov	r1, r0
 800ceb6:	ab03      	add	r3, sp, #12
 800ceb8:	4805      	ldr	r0, [pc, #20]	@ (800ced0 <fiprintf+0x20>)
 800ceba:	f853 2b04 	ldr.w	r2, [r3], #4
 800cebe:	6800      	ldr	r0, [r0, #0]
 800cec0:	9301      	str	r3, [sp, #4]
 800cec2:	f7ff fca3 	bl	800c80c <_vfiprintf_r>
 800cec6:	b002      	add	sp, #8
 800cec8:	f85d eb04 	ldr.w	lr, [sp], #4
 800cecc:	b003      	add	sp, #12
 800cece:	4770      	bx	lr
 800ced0:	20000068 	.word	0x20000068

0800ced4 <__swhatbuf_r>:
 800ced4:	b570      	push	{r4, r5, r6, lr}
 800ced6:	460c      	mov	r4, r1
 800ced8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cedc:	2900      	cmp	r1, #0
 800cede:	b096      	sub	sp, #88	@ 0x58
 800cee0:	4615      	mov	r5, r2
 800cee2:	461e      	mov	r6, r3
 800cee4:	da0d      	bge.n	800cf02 <__swhatbuf_r+0x2e>
 800cee6:	89a3      	ldrh	r3, [r4, #12]
 800cee8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ceec:	f04f 0100 	mov.w	r1, #0
 800cef0:	bf14      	ite	ne
 800cef2:	2340      	movne	r3, #64	@ 0x40
 800cef4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cef8:	2000      	movs	r0, #0
 800cefa:	6031      	str	r1, [r6, #0]
 800cefc:	602b      	str	r3, [r5, #0]
 800cefe:	b016      	add	sp, #88	@ 0x58
 800cf00:	bd70      	pop	{r4, r5, r6, pc}
 800cf02:	466a      	mov	r2, sp
 800cf04:	f000 f862 	bl	800cfcc <_fstat_r>
 800cf08:	2800      	cmp	r0, #0
 800cf0a:	dbec      	blt.n	800cee6 <__swhatbuf_r+0x12>
 800cf0c:	9901      	ldr	r1, [sp, #4]
 800cf0e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cf12:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cf16:	4259      	negs	r1, r3
 800cf18:	4159      	adcs	r1, r3
 800cf1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cf1e:	e7eb      	b.n	800cef8 <__swhatbuf_r+0x24>

0800cf20 <__smakebuf_r>:
 800cf20:	898b      	ldrh	r3, [r1, #12]
 800cf22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cf24:	079d      	lsls	r5, r3, #30
 800cf26:	4606      	mov	r6, r0
 800cf28:	460c      	mov	r4, r1
 800cf2a:	d507      	bpl.n	800cf3c <__smakebuf_r+0x1c>
 800cf2c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cf30:	6023      	str	r3, [r4, #0]
 800cf32:	6123      	str	r3, [r4, #16]
 800cf34:	2301      	movs	r3, #1
 800cf36:	6163      	str	r3, [r4, #20]
 800cf38:	b003      	add	sp, #12
 800cf3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf3c:	ab01      	add	r3, sp, #4
 800cf3e:	466a      	mov	r2, sp
 800cf40:	f7ff ffc8 	bl	800ced4 <__swhatbuf_r>
 800cf44:	9f00      	ldr	r7, [sp, #0]
 800cf46:	4605      	mov	r5, r0
 800cf48:	4639      	mov	r1, r7
 800cf4a:	4630      	mov	r0, r6
 800cf4c:	f7ff fa50 	bl	800c3f0 <_malloc_r>
 800cf50:	b948      	cbnz	r0, 800cf66 <__smakebuf_r+0x46>
 800cf52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf56:	059a      	lsls	r2, r3, #22
 800cf58:	d4ee      	bmi.n	800cf38 <__smakebuf_r+0x18>
 800cf5a:	f023 0303 	bic.w	r3, r3, #3
 800cf5e:	f043 0302 	orr.w	r3, r3, #2
 800cf62:	81a3      	strh	r3, [r4, #12]
 800cf64:	e7e2      	b.n	800cf2c <__smakebuf_r+0xc>
 800cf66:	89a3      	ldrh	r3, [r4, #12]
 800cf68:	6020      	str	r0, [r4, #0]
 800cf6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cf6e:	81a3      	strh	r3, [r4, #12]
 800cf70:	9b01      	ldr	r3, [sp, #4]
 800cf72:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cf76:	b15b      	cbz	r3, 800cf90 <__smakebuf_r+0x70>
 800cf78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cf7c:	4630      	mov	r0, r6
 800cf7e:	f000 f837 	bl	800cff0 <_isatty_r>
 800cf82:	b128      	cbz	r0, 800cf90 <__smakebuf_r+0x70>
 800cf84:	89a3      	ldrh	r3, [r4, #12]
 800cf86:	f023 0303 	bic.w	r3, r3, #3
 800cf8a:	f043 0301 	orr.w	r3, r3, #1
 800cf8e:	81a3      	strh	r3, [r4, #12]
 800cf90:	89a3      	ldrh	r3, [r4, #12]
 800cf92:	431d      	orrs	r5, r3
 800cf94:	81a5      	strh	r5, [r4, #12]
 800cf96:	e7cf      	b.n	800cf38 <__smakebuf_r+0x18>

0800cf98 <memmove>:
 800cf98:	4288      	cmp	r0, r1
 800cf9a:	b510      	push	{r4, lr}
 800cf9c:	eb01 0402 	add.w	r4, r1, r2
 800cfa0:	d902      	bls.n	800cfa8 <memmove+0x10>
 800cfa2:	4284      	cmp	r4, r0
 800cfa4:	4623      	mov	r3, r4
 800cfa6:	d807      	bhi.n	800cfb8 <memmove+0x20>
 800cfa8:	1e43      	subs	r3, r0, #1
 800cfaa:	42a1      	cmp	r1, r4
 800cfac:	d008      	beq.n	800cfc0 <memmove+0x28>
 800cfae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cfb2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cfb6:	e7f8      	b.n	800cfaa <memmove+0x12>
 800cfb8:	4402      	add	r2, r0
 800cfba:	4601      	mov	r1, r0
 800cfbc:	428a      	cmp	r2, r1
 800cfbe:	d100      	bne.n	800cfc2 <memmove+0x2a>
 800cfc0:	bd10      	pop	{r4, pc}
 800cfc2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cfc6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cfca:	e7f7      	b.n	800cfbc <memmove+0x24>

0800cfcc <_fstat_r>:
 800cfcc:	b538      	push	{r3, r4, r5, lr}
 800cfce:	4d07      	ldr	r5, [pc, #28]	@ (800cfec <_fstat_r+0x20>)
 800cfd0:	2300      	movs	r3, #0
 800cfd2:	4604      	mov	r4, r0
 800cfd4:	4608      	mov	r0, r1
 800cfd6:	4611      	mov	r1, r2
 800cfd8:	602b      	str	r3, [r5, #0]
 800cfda:	f7f6 fd67 	bl	8003aac <_fstat>
 800cfde:	1c43      	adds	r3, r0, #1
 800cfe0:	d102      	bne.n	800cfe8 <_fstat_r+0x1c>
 800cfe2:	682b      	ldr	r3, [r5, #0]
 800cfe4:	b103      	cbz	r3, 800cfe8 <_fstat_r+0x1c>
 800cfe6:	6023      	str	r3, [r4, #0]
 800cfe8:	bd38      	pop	{r3, r4, r5, pc}
 800cfea:	bf00      	nop
 800cfec:	20003ea0 	.word	0x20003ea0

0800cff0 <_isatty_r>:
 800cff0:	b538      	push	{r3, r4, r5, lr}
 800cff2:	4d06      	ldr	r5, [pc, #24]	@ (800d00c <_isatty_r+0x1c>)
 800cff4:	2300      	movs	r3, #0
 800cff6:	4604      	mov	r4, r0
 800cff8:	4608      	mov	r0, r1
 800cffa:	602b      	str	r3, [r5, #0]
 800cffc:	f7f6 fd66 	bl	8003acc <_isatty>
 800d000:	1c43      	adds	r3, r0, #1
 800d002:	d102      	bne.n	800d00a <_isatty_r+0x1a>
 800d004:	682b      	ldr	r3, [r5, #0]
 800d006:	b103      	cbz	r3, 800d00a <_isatty_r+0x1a>
 800d008:	6023      	str	r3, [r4, #0]
 800d00a:	bd38      	pop	{r3, r4, r5, pc}
 800d00c:	20003ea0 	.word	0x20003ea0

0800d010 <_sbrk_r>:
 800d010:	b538      	push	{r3, r4, r5, lr}
 800d012:	4d06      	ldr	r5, [pc, #24]	@ (800d02c <_sbrk_r+0x1c>)
 800d014:	2300      	movs	r3, #0
 800d016:	4604      	mov	r4, r0
 800d018:	4608      	mov	r0, r1
 800d01a:	602b      	str	r3, [r5, #0]
 800d01c:	f7f6 fd6e 	bl	8003afc <_sbrk>
 800d020:	1c43      	adds	r3, r0, #1
 800d022:	d102      	bne.n	800d02a <_sbrk_r+0x1a>
 800d024:	682b      	ldr	r3, [r5, #0]
 800d026:	b103      	cbz	r3, 800d02a <_sbrk_r+0x1a>
 800d028:	6023      	str	r3, [r4, #0]
 800d02a:	bd38      	pop	{r3, r4, r5, pc}
 800d02c:	20003ea0 	.word	0x20003ea0

0800d030 <abort>:
 800d030:	b508      	push	{r3, lr}
 800d032:	2006      	movs	r0, #6
 800d034:	f000 f85a 	bl	800d0ec <raise>
 800d038:	2001      	movs	r0, #1
 800d03a:	f7f6 fce7 	bl	8003a0c <_exit>

0800d03e <_realloc_r>:
 800d03e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d042:	4680      	mov	r8, r0
 800d044:	4615      	mov	r5, r2
 800d046:	460c      	mov	r4, r1
 800d048:	b921      	cbnz	r1, 800d054 <_realloc_r+0x16>
 800d04a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d04e:	4611      	mov	r1, r2
 800d050:	f7ff b9ce 	b.w	800c3f0 <_malloc_r>
 800d054:	b92a      	cbnz	r2, 800d062 <_realloc_r+0x24>
 800d056:	f7ff f957 	bl	800c308 <_free_r>
 800d05a:	2400      	movs	r4, #0
 800d05c:	4620      	mov	r0, r4
 800d05e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d062:	f000 f85f 	bl	800d124 <_malloc_usable_size_r>
 800d066:	4285      	cmp	r5, r0
 800d068:	4606      	mov	r6, r0
 800d06a:	d802      	bhi.n	800d072 <_realloc_r+0x34>
 800d06c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d070:	d8f4      	bhi.n	800d05c <_realloc_r+0x1e>
 800d072:	4629      	mov	r1, r5
 800d074:	4640      	mov	r0, r8
 800d076:	f7ff f9bb 	bl	800c3f0 <_malloc_r>
 800d07a:	4607      	mov	r7, r0
 800d07c:	2800      	cmp	r0, #0
 800d07e:	d0ec      	beq.n	800d05a <_realloc_r+0x1c>
 800d080:	42b5      	cmp	r5, r6
 800d082:	462a      	mov	r2, r5
 800d084:	4621      	mov	r1, r4
 800d086:	bf28      	it	cs
 800d088:	4632      	movcs	r2, r6
 800d08a:	f7ff f910 	bl	800c2ae <memcpy>
 800d08e:	4621      	mov	r1, r4
 800d090:	4640      	mov	r0, r8
 800d092:	f7ff f939 	bl	800c308 <_free_r>
 800d096:	463c      	mov	r4, r7
 800d098:	e7e0      	b.n	800d05c <_realloc_r+0x1e>

0800d09a <_raise_r>:
 800d09a:	291f      	cmp	r1, #31
 800d09c:	b538      	push	{r3, r4, r5, lr}
 800d09e:	4605      	mov	r5, r0
 800d0a0:	460c      	mov	r4, r1
 800d0a2:	d904      	bls.n	800d0ae <_raise_r+0x14>
 800d0a4:	2316      	movs	r3, #22
 800d0a6:	6003      	str	r3, [r0, #0]
 800d0a8:	f04f 30ff 	mov.w	r0, #4294967295
 800d0ac:	bd38      	pop	{r3, r4, r5, pc}
 800d0ae:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d0b0:	b112      	cbz	r2, 800d0b8 <_raise_r+0x1e>
 800d0b2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d0b6:	b94b      	cbnz	r3, 800d0cc <_raise_r+0x32>
 800d0b8:	4628      	mov	r0, r5
 800d0ba:	f000 f831 	bl	800d120 <_getpid_r>
 800d0be:	4622      	mov	r2, r4
 800d0c0:	4601      	mov	r1, r0
 800d0c2:	4628      	mov	r0, r5
 800d0c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d0c8:	f000 b818 	b.w	800d0fc <_kill_r>
 800d0cc:	2b01      	cmp	r3, #1
 800d0ce:	d00a      	beq.n	800d0e6 <_raise_r+0x4c>
 800d0d0:	1c59      	adds	r1, r3, #1
 800d0d2:	d103      	bne.n	800d0dc <_raise_r+0x42>
 800d0d4:	2316      	movs	r3, #22
 800d0d6:	6003      	str	r3, [r0, #0]
 800d0d8:	2001      	movs	r0, #1
 800d0da:	e7e7      	b.n	800d0ac <_raise_r+0x12>
 800d0dc:	2100      	movs	r1, #0
 800d0de:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d0e2:	4620      	mov	r0, r4
 800d0e4:	4798      	blx	r3
 800d0e6:	2000      	movs	r0, #0
 800d0e8:	e7e0      	b.n	800d0ac <_raise_r+0x12>
	...

0800d0ec <raise>:
 800d0ec:	4b02      	ldr	r3, [pc, #8]	@ (800d0f8 <raise+0xc>)
 800d0ee:	4601      	mov	r1, r0
 800d0f0:	6818      	ldr	r0, [r3, #0]
 800d0f2:	f7ff bfd2 	b.w	800d09a <_raise_r>
 800d0f6:	bf00      	nop
 800d0f8:	20000068 	.word	0x20000068

0800d0fc <_kill_r>:
 800d0fc:	b538      	push	{r3, r4, r5, lr}
 800d0fe:	4d07      	ldr	r5, [pc, #28]	@ (800d11c <_kill_r+0x20>)
 800d100:	2300      	movs	r3, #0
 800d102:	4604      	mov	r4, r0
 800d104:	4608      	mov	r0, r1
 800d106:	4611      	mov	r1, r2
 800d108:	602b      	str	r3, [r5, #0]
 800d10a:	f7f6 fc6f 	bl	80039ec <_kill>
 800d10e:	1c43      	adds	r3, r0, #1
 800d110:	d102      	bne.n	800d118 <_kill_r+0x1c>
 800d112:	682b      	ldr	r3, [r5, #0]
 800d114:	b103      	cbz	r3, 800d118 <_kill_r+0x1c>
 800d116:	6023      	str	r3, [r4, #0]
 800d118:	bd38      	pop	{r3, r4, r5, pc}
 800d11a:	bf00      	nop
 800d11c:	20003ea0 	.word	0x20003ea0

0800d120 <_getpid_r>:
 800d120:	f7f6 bc5c 	b.w	80039dc <_getpid>

0800d124 <_malloc_usable_size_r>:
 800d124:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d128:	1f18      	subs	r0, r3, #4
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	bfbc      	itt	lt
 800d12e:	580b      	ldrlt	r3, [r1, r0]
 800d130:	18c0      	addlt	r0, r0, r3
 800d132:	4770      	bx	lr

0800d134 <_init>:
 800d134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d136:	bf00      	nop
 800d138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d13a:	bc08      	pop	{r3}
 800d13c:	469e      	mov	lr, r3
 800d13e:	4770      	bx	lr

0800d140 <_fini>:
 800d140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d142:	bf00      	nop
 800d144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d146:	bc08      	pop	{r3}
 800d148:	469e      	mov	lr, r3
 800d14a:	4770      	bx	lr
